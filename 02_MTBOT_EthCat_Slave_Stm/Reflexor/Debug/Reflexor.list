
Reflexor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012af8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003dc8  08012cd8  08012cd8  00022cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016aa0  08016aa0  0003d2a8  2**0
                  CONTENTS
  4 .ARM          00000008  08016aa0  08016aa0  00026aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016aa8  08016aa8  0003d2a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016aa8  08016aa8  00026aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016aac  08016aac  00026aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001660  20000000  08016ab0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .uartDma_module_space 00000400  20001660  08018110  00031660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000aee0  20001a60  08018510  00031a60  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000c940  08018510  0003c940  2**0
                  ALLOC
 12 .spiDma_module_space 00000200  2000cf40  08018510  0003cf40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .etherCat_module_space 00000168  2000d140  08018710  0003d140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .ARM.attributes 00000030  00000000  00000000  0003d2a8  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  0003d2d8  2**0
                  CONTENTS, READONLY
 16 .debug_info   00059cb0  00000000  00000000  0003d31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000aef7  00000000  00000000  00096fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 000200c6  00000000  00000000  000a1ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000031c0  00000000  00000000  000c1f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002a74  00000000  00000000  000c5148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00035e9a  00000000  00000000  000c7bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00055791  00000000  00000000  000fda56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00124397  00000000  00000000  001531e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  00009738  00000000  00000000  00277580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 000000a7  00000000  00000000  00280cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001a60 	.word	0x20001a60
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012cc0 	.word	0x08012cc0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001a64 	.word	0x20001a64
 800021c:	08012cc0 	.word	0x08012cc0

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	20009838 	.word	0x20009838
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000370:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000374:	f000 b970 	b.w	8000658 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9e08      	ldr	r6, [sp, #32]
 8000396:	460d      	mov	r5, r1
 8000398:	4604      	mov	r4, r0
 800039a:	460f      	mov	r7, r1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d14a      	bne.n	8000436 <__udivmoddi4+0xa6>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4694      	mov	ip, r2
 80003a4:	d965      	bls.n	8000472 <__udivmoddi4+0xe2>
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	b143      	cbz	r3, 80003be <__udivmoddi4+0x2e>
 80003ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80003b0:	f1c3 0220 	rsb	r2, r3, #32
 80003b4:	409f      	lsls	r7, r3
 80003b6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ba:	4317      	orrs	r7, r2
 80003bc:	409c      	lsls	r4, r3
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fa1f f58c 	uxth.w	r5, ip
 80003c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ca:	0c22      	lsrs	r2, r4, #16
 80003cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003d4:	fb01 f005 	mul.w	r0, r1, r5
 80003d8:	4290      	cmp	r0, r2
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x62>
 80003dc:	eb1c 0202 	adds.w	r2, ip, r2
 80003e0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003e4:	f080 811c 	bcs.w	8000620 <__udivmoddi4+0x290>
 80003e8:	4290      	cmp	r0, r2
 80003ea:	f240 8119 	bls.w	8000620 <__udivmoddi4+0x290>
 80003ee:	3902      	subs	r1, #2
 80003f0:	4462      	add	r2, ip
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	b2a4      	uxth	r4, r4
 80003f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000402:	fb00 f505 	mul.w	r5, r0, r5
 8000406:	42a5      	cmp	r5, r4
 8000408:	d90a      	bls.n	8000420 <__udivmoddi4+0x90>
 800040a:	eb1c 0404 	adds.w	r4, ip, r4
 800040e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000412:	f080 8107 	bcs.w	8000624 <__udivmoddi4+0x294>
 8000416:	42a5      	cmp	r5, r4
 8000418:	f240 8104 	bls.w	8000624 <__udivmoddi4+0x294>
 800041c:	4464      	add	r4, ip
 800041e:	3802      	subs	r0, #2
 8000420:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	2100      	movs	r1, #0
 8000428:	b11e      	cbz	r6, 8000432 <__udivmoddi4+0xa2>
 800042a:	40dc      	lsrs	r4, r3
 800042c:	2300      	movs	r3, #0
 800042e:	e9c6 4300 	strd	r4, r3, [r6]
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	428b      	cmp	r3, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0xbc>
 800043a:	2e00      	cmp	r6, #0
 800043c:	f000 80ed 	beq.w	800061a <__udivmoddi4+0x28a>
 8000440:	2100      	movs	r1, #0
 8000442:	e9c6 0500 	strd	r0, r5, [r6]
 8000446:	4608      	mov	r0, r1
 8000448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044c:	fab3 f183 	clz	r1, r3
 8000450:	2900      	cmp	r1, #0
 8000452:	d149      	bne.n	80004e8 <__udivmoddi4+0x158>
 8000454:	42ab      	cmp	r3, r5
 8000456:	d302      	bcc.n	800045e <__udivmoddi4+0xce>
 8000458:	4282      	cmp	r2, r0
 800045a:	f200 80f8 	bhi.w	800064e <__udivmoddi4+0x2be>
 800045e:	1a84      	subs	r4, r0, r2
 8000460:	eb65 0203 	sbc.w	r2, r5, r3
 8000464:	2001      	movs	r0, #1
 8000466:	4617      	mov	r7, r2
 8000468:	2e00      	cmp	r6, #0
 800046a:	d0e2      	beq.n	8000432 <__udivmoddi4+0xa2>
 800046c:	e9c6 4700 	strd	r4, r7, [r6]
 8000470:	e7df      	b.n	8000432 <__udivmoddi4+0xa2>
 8000472:	b902      	cbnz	r2, 8000476 <__udivmoddi4+0xe6>
 8000474:	deff      	udf	#255	; 0xff
 8000476:	fab2 f382 	clz	r3, r2
 800047a:	2b00      	cmp	r3, #0
 800047c:	f040 8090 	bne.w	80005a0 <__udivmoddi4+0x210>
 8000480:	1a8a      	subs	r2, r1, r2
 8000482:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000486:	fa1f fe8c 	uxth.w	lr, ip
 800048a:	2101      	movs	r1, #1
 800048c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000490:	fb07 2015 	mls	r0, r7, r5, r2
 8000494:	0c22      	lsrs	r2, r4, #16
 8000496:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800049a:	fb0e f005 	mul.w	r0, lr, r5
 800049e:	4290      	cmp	r0, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x124>
 80004a2:	eb1c 0202 	adds.w	r2, ip, r2
 80004a6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x122>
 80004ac:	4290      	cmp	r0, r2
 80004ae:	f200 80cb 	bhi.w	8000648 <__udivmoddi4+0x2b8>
 80004b2:	4645      	mov	r5, r8
 80004b4:	1a12      	subs	r2, r2, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004bc:	fb07 2210 	mls	r2, r7, r0, r2
 80004c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004c4:	fb0e fe00 	mul.w	lr, lr, r0
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x14e>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x14c>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f200 80bb 	bhi.w	8000652 <__udivmoddi4+0x2c2>
 80004dc:	4610      	mov	r0, r2
 80004de:	eba4 040e 	sub.w	r4, r4, lr
 80004e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004e6:	e79f      	b.n	8000428 <__udivmoddi4+0x98>
 80004e8:	f1c1 0720 	rsb	r7, r1, #32
 80004ec:	408b      	lsls	r3, r1
 80004ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80004f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004f6:	fa05 f401 	lsl.w	r4, r5, r1
 80004fa:	fa20 f307 	lsr.w	r3, r0, r7
 80004fe:	40fd      	lsrs	r5, r7
 8000500:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000504:	4323      	orrs	r3, r4
 8000506:	fbb5 f8f9 	udiv	r8, r5, r9
 800050a:	fa1f fe8c 	uxth.w	lr, ip
 800050e:	fb09 5518 	mls	r5, r9, r8, r5
 8000512:	0c1c      	lsrs	r4, r3, #16
 8000514:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000518:	fb08 f50e 	mul.w	r5, r8, lr
 800051c:	42a5      	cmp	r5, r4
 800051e:	fa02 f201 	lsl.w	r2, r2, r1
 8000522:	fa00 f001 	lsl.w	r0, r0, r1
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b0>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000530:	f080 8088 	bcs.w	8000644 <__udivmoddi4+0x2b4>
 8000534:	42a5      	cmp	r5, r4
 8000536:	f240 8085 	bls.w	8000644 <__udivmoddi4+0x2b4>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	4464      	add	r4, ip
 8000540:	1b64      	subs	r4, r4, r5
 8000542:	b29d      	uxth	r5, r3
 8000544:	fbb4 f3f9 	udiv	r3, r4, r9
 8000548:	fb09 4413 	mls	r4, r9, r3, r4
 800054c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000550:	fb03 fe0e 	mul.w	lr, r3, lr
 8000554:	45a6      	cmp	lr, r4
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1da>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000560:	d26c      	bcs.n	800063c <__udivmoddi4+0x2ac>
 8000562:	45a6      	cmp	lr, r4
 8000564:	d96a      	bls.n	800063c <__udivmoddi4+0x2ac>
 8000566:	3b02      	subs	r3, #2
 8000568:	4464      	add	r4, ip
 800056a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800056e:	fba3 9502 	umull	r9, r5, r3, r2
 8000572:	eba4 040e 	sub.w	r4, r4, lr
 8000576:	42ac      	cmp	r4, r5
 8000578:	46c8      	mov	r8, r9
 800057a:	46ae      	mov	lr, r5
 800057c:	d356      	bcc.n	800062c <__udivmoddi4+0x29c>
 800057e:	d053      	beq.n	8000628 <__udivmoddi4+0x298>
 8000580:	b156      	cbz	r6, 8000598 <__udivmoddi4+0x208>
 8000582:	ebb0 0208 	subs.w	r2, r0, r8
 8000586:	eb64 040e 	sbc.w	r4, r4, lr
 800058a:	fa04 f707 	lsl.w	r7, r4, r7
 800058e:	40ca      	lsrs	r2, r1
 8000590:	40cc      	lsrs	r4, r1
 8000592:	4317      	orrs	r7, r2
 8000594:	e9c6 7400 	strd	r7, r4, [r6]
 8000598:	4618      	mov	r0, r3
 800059a:	2100      	movs	r1, #0
 800059c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a0:	f1c3 0120 	rsb	r1, r3, #32
 80005a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005a8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ac:	fa25 f101 	lsr.w	r1, r5, r1
 80005b0:	409d      	lsls	r5, r3
 80005b2:	432a      	orrs	r2, r5
 80005b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b8:	fa1f fe8c 	uxth.w	lr, ip
 80005bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005c0:	fb07 1510 	mls	r5, r7, r0, r1
 80005c4:	0c11      	lsrs	r1, r2, #16
 80005c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ca:	fb00 f50e 	mul.w	r5, r0, lr
 80005ce:	428d      	cmp	r5, r1
 80005d0:	fa04 f403 	lsl.w	r4, r4, r3
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0x258>
 80005d6:	eb1c 0101 	adds.w	r1, ip, r1
 80005da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005de:	d22f      	bcs.n	8000640 <__udivmoddi4+0x2b0>
 80005e0:	428d      	cmp	r5, r1
 80005e2:	d92d      	bls.n	8000640 <__udivmoddi4+0x2b0>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4461      	add	r1, ip
 80005e8:	1b49      	subs	r1, r1, r5
 80005ea:	b292      	uxth	r2, r2
 80005ec:	fbb1 f5f7 	udiv	r5, r1, r7
 80005f0:	fb07 1115 	mls	r1, r7, r5, r1
 80005f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005f8:	fb05 f10e 	mul.w	r1, r5, lr
 80005fc:	4291      	cmp	r1, r2
 80005fe:	d908      	bls.n	8000612 <__udivmoddi4+0x282>
 8000600:	eb1c 0202 	adds.w	r2, ip, r2
 8000604:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000608:	d216      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 800060a:	4291      	cmp	r1, r2
 800060c:	d914      	bls.n	8000638 <__udivmoddi4+0x2a8>
 800060e:	3d02      	subs	r5, #2
 8000610:	4462      	add	r2, ip
 8000612:	1a52      	subs	r2, r2, r1
 8000614:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000618:	e738      	b.n	800048c <__udivmoddi4+0xfc>
 800061a:	4631      	mov	r1, r6
 800061c:	4630      	mov	r0, r6
 800061e:	e708      	b.n	8000432 <__udivmoddi4+0xa2>
 8000620:	4639      	mov	r1, r7
 8000622:	e6e6      	b.n	80003f2 <__udivmoddi4+0x62>
 8000624:	4610      	mov	r0, r2
 8000626:	e6fb      	b.n	8000420 <__udivmoddi4+0x90>
 8000628:	4548      	cmp	r0, r9
 800062a:	d2a9      	bcs.n	8000580 <__udivmoddi4+0x1f0>
 800062c:	ebb9 0802 	subs.w	r8, r9, r2
 8000630:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000634:	3b01      	subs	r3, #1
 8000636:	e7a3      	b.n	8000580 <__udivmoddi4+0x1f0>
 8000638:	4645      	mov	r5, r8
 800063a:	e7ea      	b.n	8000612 <__udivmoddi4+0x282>
 800063c:	462b      	mov	r3, r5
 800063e:	e794      	b.n	800056a <__udivmoddi4+0x1da>
 8000640:	4640      	mov	r0, r8
 8000642:	e7d1      	b.n	80005e8 <__udivmoddi4+0x258>
 8000644:	46d0      	mov	r8, sl
 8000646:	e77b      	b.n	8000540 <__udivmoddi4+0x1b0>
 8000648:	3d02      	subs	r5, #2
 800064a:	4462      	add	r2, ip
 800064c:	e732      	b.n	80004b4 <__udivmoddi4+0x124>
 800064e:	4608      	mov	r0, r1
 8000650:	e70a      	b.n	8000468 <__udivmoddi4+0xd8>
 8000652:	4464      	add	r4, ip
 8000654:	3802      	subs	r0, #2
 8000656:	e742      	b.n	80004de <__udivmoddi4+0x14e>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <ethCatTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ethCatTask */
void ethCatTask(void const * argument)
{
 800065c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ethCatTask */
  /* Initialize the modules which used by this application. */
  ethCat_Init();
 800065e:	f00f ff13 	bl	8010488 <ethCat_Init>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	4611      	mov	r1, r2
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <ethCatTask+0x24>)
 8000668:	f001 ff7c 	bl	8002564 <HAL_GPIO_WritePin>
 800066c:	e003      	b.n	8000676 <ethCatTask+0x1a>
  for(;;)
  {
    /* Run main function of ethCat. */
    ethCat_MainFunction();

    for(uint16_t i=0; i< 100;i++);
 800066e:	3301      	adds	r3, #1
 8000670:	b29b      	uxth	r3, r3
 8000672:	2b63      	cmp	r3, #99	; 0x63
 8000674:	d9fb      	bls.n	800066e <ethCatTask+0x12>
    ethCat_MainFunction();
 8000676:	f00f ff21 	bl	80104bc <ethCat_MainFunction>
    for(uint16_t i=0; i< 100;i++);
 800067a:	2300      	movs	r3, #0
 800067c:	e7f9      	b.n	8000672 <ethCatTask+0x16>
 800067e:	bf00      	nop
 8000680:	48000400 	.word	0x48000400

08000684 <canMTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_canMTask */
void canMTask(void const * argument)
{
 8000684:	b508      	push	{r3, lr}
  /* USER CODE BEGIN canMTask */
  canM_Init (&canM_Module);
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <canMTask+0x18>)
 8000688:	f00f fde2 	bl	8010250 <canM_Init>

  /* Infinite loop */
  for(;;)
  {
    /* Run main function of canM. */
    canM_MainFunction (&canM_Module);
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <canMTask+0x18>)
 800068e:	f00f fe1f 	bl	80102d0 <canM_MainFunction>

    osDelay(1);
 8000692:	2001      	movs	r0, #1
 8000694:	f007 fefd 	bl	8008492 <osDelay>
  for(;;)
 8000698:	e7f8      	b.n	800068c <canMTask+0x8>
 800069a:	bf00      	nop
 800069c:	2000142c 	.word	0x2000142c

080006a0 <canIdleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_canIdleTask */
void canIdleTask(void const * argument)
{
 80006a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN canIdleTask */
  canIdle_Init();
 80006a2:	f00f fb73 	bl	800fd8c <canIdle_Init>

  /* Infinite loop */
  for(;;)
  {
    /* Run the main function of CanIdle. */
    canIdle_MainFunction();
 80006a6:	f00f fb77 	bl	800fd98 <canIdle_MainFunction>

    osDelay(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f007 fef1 	bl	8008492 <osDelay>
  for(;;)
 80006b0:	e7f9      	b.n	80006a6 <canIdleTask+0x6>

080006b2 <configureTimerForRunTimeStats>:
}
 80006b2:	4770      	bx	lr

080006b4 <getRunTimeCounterValue>:
}
 80006b4:	2000      	movs	r0, #0
 80006b6:	4770      	bx	lr

080006b8 <vApplicationIdleHook>:
}
 80006b8:	4770      	bx	lr

080006ba <vApplicationDaemonTaskStartupHook>:
{
 80006ba:	b508      	push	{r3, lr}
  uartDma_init();
 80006bc:	f00e fb74 	bl	800eda8 <uartDma_init>
  lan9252_Init();
 80006c0:	f00a fe66 	bl	800b390 <lan9252_Init>
}
 80006c4:	bd08      	pop	{r3, pc}
	...

080006c8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	b093      	sub	sp, #76	; 0x4c
  osTimerDef(timerCounter500us, timerCounterCb);
 80006cc:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <MX_FREERTOS_Init+0xb8>)
 80006ce:	9311      	str	r3, [sp, #68]	; 0x44
  timerCounter500usHandle = osTimerCreate(osTimer(timerCounter500us), osTimerPeriodic, NULL);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2101      	movs	r1, #1
 80006d4:	a811      	add	r0, sp, #68	; 0x44
 80006d6:	f007 fee3 	bl	80084a0 <osTimerCreate>
 80006da:	4d2a      	ldr	r5, [pc, #168]	; (8000784 <MX_FREERTOS_Init+0xbc>)
 80006dc:	6028      	str	r0, [r5, #0]
  xTimerStop(timerCounter500usHandle, pdMS_TO_TICKS(1));
 80006de:	2401      	movs	r4, #1
 80006e0:	9400      	str	r4, [sp, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	461a      	mov	r2, r3
 80006e6:	2103      	movs	r1, #3
 80006e8:	f009 fa46 	bl	8009b78 <xTimerGenericCommand>
  xTimerChangePeriod(timerCounter500usHandle, 1, 100);
 80006ec:	2364      	movs	r3, #100	; 0x64
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2300      	movs	r3, #0
 80006f2:	4622      	mov	r2, r4
 80006f4:	2104      	movs	r1, #4
 80006f6:	6828      	ldr	r0, [r5, #0]
 80006f8:	f009 fa3e 	bl	8009b78 <xTimerGenericCommand>
  xTimerStart(timerCounter500usHandle, pdMS_TO_TICKS(1));
 80006fc:	682d      	ldr	r5, [r5, #0]
 80006fe:	f008 fdef 	bl	80092e0 <xTaskGetTickCount>
 8000702:	4602      	mov	r2, r0
 8000704:	9400      	str	r4, [sp, #0]
 8000706:	2300      	movs	r3, #0
 8000708:	4621      	mov	r1, r4
 800070a:	4628      	mov	r0, r5
 800070c:	f009 fa34 	bl	8009b78 <xTimerGenericCommand>
  osThreadDef(ethCat, ethCatTask, osPriorityRealtime, 0, 1024);
 8000710:	4c1d      	ldr	r4, [pc, #116]	; (8000788 <MX_FREERTOS_Init+0xc0>)
 8000712:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8000716:	46a6      	mov	lr, r4
 8000718:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800071c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000720:	f8de 3000 	ldr.w	r3, [lr]
 8000724:	f8cc 3000 	str.w	r3, [ip]
  ethCatHandle = osThreadCreate(osThread(ethCat), NULL);
 8000728:	2100      	movs	r1, #0
 800072a:	a80c      	add	r0, sp, #48	; 0x30
 800072c:	f007 fe97 	bl	800845e <osThreadCreate>
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_FREERTOS_Init+0xc4>)
 8000732:	6018      	str	r0, [r3, #0]
  osThreadDef(canM, canMTask, osPriorityNormal, 0, 1024);
 8000734:	f10d 0c1c 	add.w	ip, sp, #28
 8000738:	f104 0e14 	add.w	lr, r4, #20
 800073c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000740:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000744:	f8de 3000 	ldr.w	r3, [lr]
 8000748:	f8cc 3000 	str.w	r3, [ip]
  canMHandle = osThreadCreate(osThread(canM), NULL);
 800074c:	2100      	movs	r1, #0
 800074e:	a807      	add	r0, sp, #28
 8000750:	f007 fe85 	bl	800845e <osThreadCreate>
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_FREERTOS_Init+0xc8>)
 8000756:	6018      	str	r0, [r3, #0]
  osThreadDef(canIdle, canIdleTask, osPriorityNormal, 0, 512);
 8000758:	f10d 0e08 	add.w	lr, sp, #8
 800075c:	f104 0c28 	add.w	ip, r4, #40	; 0x28
 8000760:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000764:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000768:	f8dc 3000 	ldr.w	r3, [ip]
 800076c:	f8ce 3000 	str.w	r3, [lr]
  canIdleHandle = osThreadCreate(osThread(canIdle), NULL);
 8000770:	2100      	movs	r1, #0
 8000772:	a802      	add	r0, sp, #8
 8000774:	f007 fe73 	bl	800845e <osThreadCreate>
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_FREERTOS_Init+0xcc>)
 800077a:	6018      	str	r0, [r3, #0]
}
 800077c:	b013      	add	sp, #76	; 0x4c
 800077e:	bd30      	pop	{r4, r5, pc}
 8000780:	080104e1 	.word	0x080104e1
 8000784:	20001a88 	.word	0x20001a88
 8000788:	08012cd8 	.word	0x08012cd8
 800078c:	20001a84 	.word	0x20001a84
 8000790:	20001a80 	.word	0x20001a80
 8000794:	20001a7c 	.word	0x20001a7c

08000798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000798:	b500      	push	{lr}
 800079a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_DMA_Init+0x70>)
 800079e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007a0:	f042 0204 	orr.w	r2, r2, #4
 80007a4:	649a      	str	r2, [r3, #72]	; 0x48
 80007a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007a8:	f002 0204 	and.w	r2, r2, #4
 80007ac:	9200      	str	r2, [sp, #0]
 80007ae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007b2:	f042 0201 	orr.w	r2, r2, #1
 80007b6:	649a      	str	r2, [r3, #72]	; 0x48
 80007b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2105      	movs	r1, #5
 80007c6:	200b      	movs	r0, #11
 80007c8:	f000 fd0a 	bl	80011e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007cc:	200b      	movs	r0, #11
 80007ce:	f000 fd4d 	bl	800126c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2105      	movs	r1, #5
 80007d6:	200c      	movs	r0, #12
 80007d8:	f000 fd02 	bl	80011e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007dc:	200c      	movs	r0, #12
 80007de:	f000 fd45 	bl	800126c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2105      	movs	r1, #5
 80007e6:	200d      	movs	r0, #13
 80007e8:	f000 fcfa 	bl	80011e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007ec:	200d      	movs	r0, #13
 80007ee:	f000 fd3d 	bl	800126c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2105      	movs	r1, #5
 80007f6:	200e      	movs	r0, #14
 80007f8:	f000 fcf2 	bl	80011e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007fc:	200e      	movs	r0, #14
 80007fe:	f000 fd35 	bl	800126c <HAL_NVIC_EnableIRQ>

}
 8000802:	b003      	add	sp, #12
 8000804:	f85d fb04 	ldr.w	pc, [sp], #4
 8000808:	40021000 	.word	0x40021000

0800080c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800080c:	b510      	push	{r4, lr}
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800080e:	4812      	ldr	r0, [pc, #72]	; (8000858 <MX_FDCAN1_Init+0x4c>)
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_FDCAN1_Init+0x50>)
 8000812:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	6043      	str	r3, [r0, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000818:	f44f 7240 	mov.w	r2, #768	; 0x300
 800081c:	6082      	str	r2, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800081e:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000820:	7403      	strb	r3, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000822:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000824:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8000826:	2204      	movs	r2, #4
 8000828:	6142      	str	r2, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 800082a:	2208      	movs	r2, #8
 800082c:	6182      	str	r2, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 800082e:	211f      	movs	r1, #31
 8000830:	61c1      	str	r1, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000832:	6202      	str	r2, [r0, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000834:	2201      	movs	r2, #1
 8000836:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 6;
 8000838:	2106      	movs	r1, #6
 800083a:	6281      	str	r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 800083c:	240d      	movs	r4, #13
 800083e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 6;
 8000840:	6301      	str	r1, [r0, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000842:	6342      	str	r2, [r0, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000844:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000846:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000848:	f001 f842 	bl	80018d0 <HAL_FDCAN_Init>
 800084c:	b900      	cbnz	r0, 8000850 <MX_FDCAN1_Init+0x44>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800084e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000850:	f000 f9b8 	bl	8000bc4 <Error_Handler>
}
 8000854:	e7fb      	b.n	800084e <MX_FDCAN1_Init+0x42>
 8000856:	bf00      	nop
 8000858:	20001a8c 	.word	0x20001a8c
 800085c:	40006400 	.word	0x40006400

08000860 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000860:	b510      	push	{r4, lr}
 8000862:	b09c      	sub	sp, #112	; 0x70
 8000864:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	2100      	movs	r1, #0
 8000868:	9117      	str	r1, [sp, #92]	; 0x5c
 800086a:	9118      	str	r1, [sp, #96]	; 0x60
 800086c:	9119      	str	r1, [sp, #100]	; 0x64
 800086e:	911a      	str	r1, [sp, #104]	; 0x68
 8000870:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000872:	2254      	movs	r2, #84	; 0x54
 8000874:	a802      	add	r0, sp, #8
 8000876:	f011 f989 	bl	8011b8c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800087a:	6822      	ldr	r2, [r4, #0]
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <HAL_FDCAN_MspInit+0xa8>)
 800087e:	429a      	cmp	r2, r3
 8000880:	d001      	beq.n	8000886 <HAL_FDCAN_MspInit+0x26>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000882:	b01c      	add	sp, #112	; 0x70
 8000884:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088a:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800088c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000890:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000892:	a802      	add	r0, sp, #8
 8000894:	f003 fc66 	bl	8004164 <HAL_RCCEx_PeriphCLKConfig>
 8000898:	2800      	cmp	r0, #0
 800089a:	d132      	bne.n	8000902 <HAL_FDCAN_MspInit+0xa2>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <HAL_FDCAN_MspInit+0xac>)
 800089e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008a0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80008a4:	659a      	str	r2, [r3, #88]	; 0x58
 80008a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008a8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80008ac:	9200      	str	r2, [sp, #0]
 80008ae:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008b2:	f042 0202 	orr.w	r2, r2, #2
 80008b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	9301      	str	r3, [sp, #4]
 80008c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FDCAN_RX_Pin|FDCAN_TX_Pin;
 80008c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008c6:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2400      	movs	r4, #0
 80008ce:	9419      	str	r4, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d0:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80008d2:	2309      	movs	r3, #9
 80008d4:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	a917      	add	r1, sp, #92	; 0x5c
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <HAL_FDCAN_MspInit+0xb0>)
 80008da:	f001 fcdb 	bl	8002294 <HAL_GPIO_Init>
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_FDCAN_MspInit+0xb4>)
 80008e0:	685a      	ldr	r2, [r3, #4]
 80008e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80008e6:	605a      	str	r2, [r3, #4]
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80008e8:	685a      	ldr	r2, [r3, #4]
 80008ea:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80008ee:	605a      	str	r2, [r3, #4]
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80008f0:	4622      	mov	r2, r4
 80008f2:	2105      	movs	r1, #5
 80008f4:	2015      	movs	r0, #21
 80008f6:	f000 fc73 	bl	80011e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80008fa:	2015      	movs	r0, #21
 80008fc:	f000 fcb6 	bl	800126c <HAL_NVIC_EnableIRQ>
}
 8000900:	e7bf      	b.n	8000882 <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 8000902:	f000 f95f 	bl	8000bc4 <Error_Handler>
 8000906:	e7c9      	b.n	800089c <HAL_FDCAN_MspInit+0x3c>
 8000908:	40006400 	.word	0x40006400
 800090c:	40021000 	.word	0x40021000
 8000910:	48000400 	.word	0x48000400
 8000914:	40010000 	.word	0x40010000

08000918 <MX_GPIO_Init>:
        * the Code Generation settings)
     PC8   ------> I2C3_SCL
     PC9   ------> I2C3_SDA
*/
void MX_GPIO_Init(void)
{
 8000918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800091c:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	2400      	movs	r4, #0
 8000920:	9407      	str	r4, [sp, #28]
 8000922:	9408      	str	r4, [sp, #32]
 8000924:	9409      	str	r4, [sp, #36]	; 0x24
 8000926:	940a      	str	r4, [sp, #40]	; 0x28
 8000928:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b64      	ldr	r3, [pc, #400]	; (8000abc <MX_GPIO_Init+0x1a4>)
 800092c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800092e:	f042 0204 	orr.w	r2, r2, #4
 8000932:	64da      	str	r2, [r3, #76]	; 0x4c
 8000934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000936:	f002 0204 	and.w	r2, r2, #4
 800093a:	9201      	str	r2, [sp, #4]
 800093c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800093e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000940:	f042 0220 	orr.w	r2, r2, #32
 8000944:	64da      	str	r2, [r3, #76]	; 0x4c
 8000946:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000948:	f002 0220 	and.w	r2, r2, #32
 800094c:	9202      	str	r2, [sp, #8]
 800094e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000950:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000956:	64da      	str	r2, [r3, #76]	; 0x4c
 8000958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800095a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800095e:	9203      	str	r2, [sp, #12]
 8000960:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000964:	f042 0201 	orr.w	r2, r2, #1
 8000968:	64da      	str	r2, [r3, #76]	; 0x4c
 800096a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800096c:	f002 0201 	and.w	r2, r2, #1
 8000970:	9204      	str	r2, [sp, #16]
 8000972:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000976:	f042 0202 	orr.w	r2, r2, #2
 800097a:	64da      	str	r2, [r3, #76]	; 0x4c
 800097c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800097e:	f002 0202 	and.w	r2, r2, #2
 8000982:	9205      	str	r2, [sp, #20]
 8000984:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000988:	f042 0208 	orr.w	r2, r2, #8
 800098c:	64da      	str	r2, [r3, #76]	; 0x4c
 800098e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000990:	f003 0308 	and.w	r3, r3, #8
 8000994:	9306      	str	r3, [sp, #24]
 8000996:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2110      	movs	r1, #16
 800099c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a0:	f001 fde0 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80009a4:	4f46      	ldr	r7, [pc, #280]	; (8000ac0 <MX_GPIO_Init+0x1a8>)
 80009a6:	4622      	mov	r2, r4
 80009a8:	2110      	movs	r1, #16
 80009aa:	4638      	mov	r0, r7
 80009ac:	f001 fdda 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80009b0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8000acc <MX_GPIO_Init+0x1b4>
 80009b4:	2201      	movs	r2, #1
 80009b6:	4611      	mov	r1, r2
 80009b8:	4640      	mov	r0, r8
 80009ba:	f001 fdd3 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LAN_Reset_CMD_Pin|EXT_LED_Pin, GPIO_PIN_RESET);
 80009be:	4622      	mov	r2, r4
 80009c0:	f44f 6102 	mov.w	r1, #2080	; 0x820
 80009c4:	4640      	mov	r0, r8
 80009c6:	f001 fdcd 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Ver_D0_Pin|Ver_D1_Pin|Ver_A_Pin;
 80009ca:	f246 0301 	movw	r3, #24577	; 0x6001
 80009ce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d4:	a907      	add	r1, sp, #28
 80009d6:	4638      	mov	r0, r7
 80009d8:	f001 fc5c 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC3
                           PC5 PC6 PC7 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009dc:	f649 43ee 	movw	r3, #40174	; 0x9cee
 80009e0:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e2:	2603      	movs	r6, #3
 80009e4:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e8:	a907      	add	r1, sp, #28
 80009ea:	4638      	mov	r0, r7
 80009ec:	f001 fc52 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009fa:	a907      	add	r1, sp, #28
 80009fc:	4831      	ldr	r0, [pc, #196]	; (8000ac4 <MX_GPIO_Init+0x1ac>)
 80009fe:	f001 fc49 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ETC_SYNC1_Pin|ETC_SYNC0_Pin|ETC_IRQ_Pin;
 8000a02:	2307      	movs	r3, #7
 8000a04:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a08:	2501      	movs	r5, #1
 8000a0a:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	a907      	add	r1, sp, #28
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a12:	f001 fc3f 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_15;
 8000a16:	f248 1308 	movw	r3, #33032	; 0x8108
 8000a1a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	a907      	add	r1, sp, #28
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a26:	f001 fc35 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000a2a:	f04f 0910 	mov.w	r9, #16
 8000a2e:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a34:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a36:	2302      	movs	r3, #2
 8000a38:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	a907      	add	r1, sp, #28
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f001 fc28 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8000a44:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	a907      	add	r1, sp, #28
 8000a50:	4638      	mov	r0, r7
 8000a52:	f001 fc1f 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000a56:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5a:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	a907      	add	r1, sp, #28
 8000a60:	4640      	mov	r0, r8
 8000a62:	f001 fc17 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB12
                           PB13 PB14 PB15 PB4
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 8000a66:	f24f 43d6 	movw	r3, #62678	; 0xf4d6
 8000a6a:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	a907      	add	r1, sp, #28
 8000a72:	4640      	mov	r0, r8
 8000a74:	f001 fc0e 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LAN_Reset_CMD_Pin|EXT_LED_Pin;
 8000a78:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000a7c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	a907      	add	r1, sp, #28
 8000a86:	4640      	mov	r0, r8
 8000a88:	f001 fc04 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a90:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a92:	2312      	movs	r3, #18
 8000a94:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	a907      	add	r1, sp, #28
 8000aa0:	4638      	mov	r0, r7
 8000aa2:	f001 fbf7 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aaa:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aae:	a907      	add	r1, sp, #28
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_GPIO_Init+0x1b0>)
 8000ab2:	f001 fbef 	bl	8002294 <HAL_GPIO_Init>

}
 8000ab6:	b00d      	add	sp, #52	; 0x34
 8000ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000800 	.word	0x48000800
 8000ac4:	48001800 	.word	0x48001800
 8000ac8:	48000c00 	.word	0x48000c00
 8000acc:	48000400 	.word	0x48000400

08000ad0 <sendMessage>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
logMessageStruct logMessage;
void sendMessage(messageOrigin origin, uint8_t paramCount,...){
 8000ad0:	b40e      	push	{r1, r2, r3}
 8000ad2:	b530      	push	{r4, r5, lr}
 8000ad4:	b08c      	sub	sp, #48	; 0x30
 8000ad6:	ab0f      	add	r3, sp, #60	; 0x3c
 8000ad8:	f813 4b04 	ldrb.w	r4, [r3], #4
	va_list args;
	va_start(args, paramCount);
 8000adc:	930b      	str	r3, [sp, #44]	; 0x2c
	uint8_t buffer[40];
	buffer[0] ='$'; // size is 1 for pre and 32 for size of logmessage
 8000ade:	2324      	movs	r3, #36	; 0x24
 8000ae0:	f88d 3004 	strb.w	r3, [sp, #4]
	uint8_t *source = (uint8_t *)&logMessage;
	uint8_t *destination = (uint8_t *)&buffer[1];
	logMessage.origin = origin;
 8000ae4:	4d17      	ldr	r5, [pc, #92]	; (8000b44 <sendMessage+0x74>)
 8000ae6:	7728      	strb	r0, [r5, #28]
	ESC_read (0x0910, (void *) &logMessage.timestamp, 8);
 8000ae8:	2208      	movs	r2, #8
 8000aea:	4629      	mov	r1, r5
 8000aec:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8000af0:	f00d ffc4 	bl	800ea7c <ESC_read>
	memset(logMessage.params , 0, sizeof(logMessage.params )); // clear to zeros
 8000af4:	2300      	movs	r3, #0
 8000af6:	60ab      	str	r3, [r5, #8]
 8000af8:	60eb      	str	r3, [r5, #12]
 8000afa:	612b      	str	r3, [r5, #16]
 8000afc:	616b      	str	r3, [r5, #20]
 8000afe:	61ab      	str	r3, [r5, #24]
	for (int i = 0; i < paramCount; i++) {
 8000b00:	e008      	b.n	8000b14 <sendMessage+0x44>
	        uint32_t param = va_arg(args, uint32_t);
 8000b02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000b04:	1d11      	adds	r1, r2, #4
 8000b06:	910b      	str	r1, [sp, #44]	; 0x2c
 8000b08:	6810      	ldr	r0, [r2, #0]
	        logMessage.params[i]=  param;
 8000b0a:	1c99      	adds	r1, r3, #2
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <sendMessage+0x74>)
 8000b0e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (int i = 0; i < paramCount; i++) {
 8000b12:	3301      	adds	r3, #1
 8000b14:	429c      	cmp	r4, r3
 8000b16:	dcf4      	bgt.n	8000b02 <sendMessage+0x32>
	}
	for (size_t i = 0; i < sizeof(logMessageStruct); i++) {
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e005      	b.n	8000b28 <sendMessage+0x58>
	    destination[i] = source[i];
 8000b1c:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <sendMessage+0x74>)
 8000b1e:	5cd1      	ldrb	r1, [r2, r3]
 8000b20:	f10d 0205 	add.w	r2, sp, #5
 8000b24:	54d1      	strb	r1, [r2, r3]
	for (size_t i = 0; i < sizeof(logMessageStruct); i++) {
 8000b26:	3301      	adds	r3, #1
 8000b28:	2b1f      	cmp	r3, #31
 8000b2a:	d9f7      	bls.n	8000b1c <sendMessage+0x4c>
	}
	buffer[1+sizeof(logMessageStruct)] ='\n';
 8000b2c:	230a      	movs	r3, #10
 8000b2e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	//memcpy((uint8_t * )&buffer[1],(uint8_t *) &logMessage, sizeof(logMessageStruct));
	//for (uint8_t i =0; i<sizeof(logMessageStruct);i++)
		//buffer[1+i] = (uint8_t *)(&logMessage +i);
	CDC_Transmit_FS((uint8_t*)&buffer, sizeof(logMessageStruct)+2);
 8000b32:	2122      	movs	r1, #34	; 0x22
 8000b34:	a801      	add	r0, sp, #4
 8000b36:	f010 fc93 	bl	8011460 <CDC_Transmit_FS>
	//CDC_Transmit_FS((uint8_t*)&logMessage, 32);
}
 8000b3a:	b00c      	add	sp, #48	; 0x30
 8000b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b40:	b003      	add	sp, #12
 8000b42:	4770      	bx	lr
 8000b44:	20001af0 	.word	0x20001af0

08000b48 <cdc_printf>:




void cdc_printf(const char *format, ...)
{
 8000b48:	b40f      	push	{r0, r1, r2, r3}
 8000b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	f853 5b04 	ldr.w	r5, [r3], #4
 8000b58:	466e      	mov	r6, sp
    va_list args;
    va_start(args, format);
 8000b5a:	607b      	str	r3, [r7, #4]

    // Calculate the size needed for the formatted string
    int len = vsnprintf(NULL, 0, format, args);
 8000b5c:	462a      	mov	r2, r5
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4608      	mov	r0, r1
 8000b62:	f010 fff5 	bl	8011b50 <vsniprintf>
    va_end(args);

    if (len <= 0)
 8000b66:	1e04      	subs	r4, r0, #0
 8000b68:	dd18      	ble.n	8000b9c <cdc_printf+0x54>
        return;

    // Allocate a buffer for the formatted string
    char buffer[len + 1]; // +1 for null-terminator
 8000b6a:	f104 0308 	add.w	r3, r4, #8
 8000b6e:	f023 0307 	bic.w	r3, r3, #7
 8000b72:	ebad 0d03 	sub.w	sp, sp, r3

    // Format the string into the buffer
    va_start(args, format);
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000b7c:	462a      	mov	r2, r5
 8000b7e:	1c61      	adds	r1, r4, #1
 8000b80:	4668      	mov	r0, sp
 8000b82:	f010 ffe5 	bl	8011b50 <vsniprintf>
    va_end(args);

    // Transmit the formatted string over USB CDC
    CDC_Transmit_FS((uint8_t*)buffer, len);
 8000b86:	b2a1      	uxth	r1, r4
 8000b88:	4668      	mov	r0, sp
 8000b8a:	f010 fc69 	bl	8011460 <CDC_Transmit_FS>
 8000b8e:	46b5      	mov	sp, r6
}
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr
        return;
 8000b9c:	46b5      	mov	sp, r6
 8000b9e:	e7f7      	b.n	8000b90 <cdc_printf+0x48>

08000ba0 <GetCycleCount>:


}
uint32_t GetCycleCount(void)
{
    return DWT->CYCCNT; // Read cycle counter value
 8000ba0:	4b01      	ldr	r3, [pc, #4]	; (8000ba8 <GetCycleCount+0x8>)
 8000ba2:	6858      	ldr	r0, [r3, #4]
}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e0001000 	.word	0xe0001000

08000bac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bae:	6802      	ldr	r2, [r0, #0]
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d000      	beq.n	8000bb8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000bb8:	f000 fae2 	bl	8001180 <HAL_IncTick>
}
 8000bbc:	e7fb      	b.n	8000bb6 <HAL_TIM_PeriodElapsedCallback+0xa>
 8000bbe:	bf00      	nop
 8000bc0:	40012c00 	.word	0x40012c00

08000bc4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <Error_Handler+0x2>

08000bc8 <SystemClock_Config>:
{
 8000bc8:	b500      	push	{lr}
 8000bca:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bcc:	2238      	movs	r2, #56	; 0x38
 8000bce:	2100      	movs	r1, #0
 8000bd0:	a806      	add	r0, sp, #24
 8000bd2:	f010 ffdb 	bl	8011b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	9001      	str	r0, [sp, #4]
 8000bda:	9002      	str	r0, [sp, #8]
 8000bdc:	9003      	str	r0, [sp, #12]
 8000bde:	9004      	str	r0, [sp, #16]
 8000be0:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000be2:	f002 fcdf 	bl	80035a4 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000be6:	2321      	movs	r3, #33	; 0x21
 8000be8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bee:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000bfc:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000bfe:	2214      	movs	r2, #20
 8000c00:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c02:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c04:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c06:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c08:	a806      	add	r0, sp, #24
 8000c0a:	f002 fd8b 	bl	8003724 <HAL_RCC_OscConfig>
 8000c0e:	b980      	cbnz	r0, 8000c32 <SystemClock_Config+0x6a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c10:	230f      	movs	r3, #15
 8000c12:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c14:	2303      	movs	r3, #3
 8000c16:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c1c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c20:	2104      	movs	r1, #4
 8000c22:	eb0d 0001 	add.w	r0, sp, r1
 8000c26:	f003 f8e1 	bl	8003dec <HAL_RCC_ClockConfig>
 8000c2a:	b920      	cbnz	r0, 8000c36 <SystemClock_Config+0x6e>
}
 8000c2c:	b015      	add	sp, #84	; 0x54
 8000c2e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c32:	f7ff ffc7 	bl	8000bc4 <Error_Handler>
    Error_Handler();
 8000c36:	f7ff ffc5 	bl	8000bc4 <Error_Handler>

08000c3a <main>:
{
 8000c3a:	b508      	push	{r3, lr}
  HAL_Init();
 8000c3c:	f000 fa91 	bl	8001162 <HAL_Init>
  SystemClock_Config();
 8000c40:	f7ff ffc2 	bl	8000bc8 <SystemClock_Config>
  MX_GPIO_Init();
 8000c44:	f7ff fe68 	bl	8000918 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c48:	f7ff fda6 	bl	8000798 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000c4c:	f7ff fdde 	bl	800080c <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8000c50:	f000 f80c 	bl	8000c6c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c54:	f000 f9a6 	bl	8000fa4 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8000c58:	f010 fbac 	bl	80113b4 <MX_USB_Device_Init>
  SEGGER_SYSVIEW_Conf();
 8000c5c:	f00f fc58 	bl	8010510 <SEGGER_SYSVIEW_Conf>
  MX_FREERTOS_Init();
 8000c60:	f7ff fd32 	bl	80006c8 <MX_FREERTOS_Init>
  osKernelStart();
 8000c64:	f007 fbf6 	bl	8008454 <osKernelStart>
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <main+0x2e>

08000c6a <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000c6a:	4770      	bx	lr

08000c6c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c6c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c6e:	4810      	ldr	r0, [pc, #64]	; (8000cb0 <MX_SPI1_Init+0x44>)
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_SPI1_Init+0x48>)
 8000c72:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c74:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000c78:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c82:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c84:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c86:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c8e:	2208      	movs	r2, #8
 8000c90:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c92:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c94:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c96:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c98:	2207      	movs	r2, #7
 8000c9a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c9c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c9e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca0:	f003 feba 	bl	8004a18 <HAL_SPI_Init>
 8000ca4:	b900      	cbnz	r0, 8000ca8 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ca6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ca8:	f7ff ff8c 	bl	8000bc4 <Error_Handler>
}
 8000cac:	e7fb      	b.n	8000ca6 <MX_SPI1_Init+0x3a>
 8000cae:	bf00      	nop
 8000cb0:	20001bd0 	.word	0x20001bd0
 8000cb4:	40013000 	.word	0x40013000

08000cb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cb8:	b510      	push	{r4, lr}
 8000cba:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	9303      	str	r3, [sp, #12]
 8000cc0:	9304      	str	r3, [sp, #16]
 8000cc2:	9305      	str	r3, [sp, #20]
 8000cc4:	9306      	str	r3, [sp, #24]
 8000cc6:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8000cc8:	6802      	ldr	r2, [r0, #0]
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <HAL_SPI_MspInit+0xc8>)
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d001      	beq.n	8000cd4 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cd0:	b008      	add	sp, #32
 8000cd2:	bd10      	pop	{r4, pc}
 8000cd4:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000cda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ce0:	661a      	str	r2, [r3, #96]	; 0x60
 8000ce2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ce4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000ce8:	9201      	str	r2, [sp, #4]
 8000cea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cee:	f042 0201 	orr.w	r2, r2, #1
 8000cf2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	9302      	str	r3, [sp, #8]
 8000cfc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cfe:	23e0      	movs	r3, #224	; 0xe0
 8000d00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	a903      	add	r1, sp, #12
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d14:	f001 fabe 	bl	8002294 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8000d18:	481a      	ldr	r0, [pc, #104]	; (8000d84 <HAL_SPI_MspInit+0xcc>)
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <HAL_SPI_MspInit+0xd0>)
 8000d1c:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000d1e:	230a      	movs	r3, #10
 8000d20:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d22:	2300      	movs	r3, #0
 8000d24:	6083      	str	r3, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d26:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	6102      	str	r2, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d2c:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d2e:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000d30:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d36:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d38:	f000 fb0a 	bl	8001350 <HAL_DMA_Init>
 8000d3c:	b9d0      	cbnz	r0, 8000d74 <HAL_SPI_MspInit+0xbc>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_SPI_MspInit+0xcc>)
 8000d40:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d42:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000d44:	4811      	ldr	r0, [pc, #68]	; (8000d8c <HAL_SPI_MspInit+0xd4>)
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_SPI_MspInit+0xd8>)
 8000d48:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000d4a:	230b      	movs	r3, #11
 8000d4c:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d4e:	2310      	movs	r3, #16
 8000d50:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d5a:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5c:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d5e:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d64:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d66:	f000 faf3 	bl	8001350 <HAL_DMA_Init>
 8000d6a:	b930      	cbnz	r0, 8000d7a <HAL_SPI_MspInit+0xc2>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <HAL_SPI_MspInit+0xd4>)
 8000d6e:	6563      	str	r3, [r4, #84]	; 0x54
 8000d70:	629c      	str	r4, [r3, #40]	; 0x28
}
 8000d72:	e7ad      	b.n	8000cd0 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8000d74:	f7ff ff26 	bl	8000bc4 <Error_Handler>
 8000d78:	e7e1      	b.n	8000d3e <HAL_SPI_MspInit+0x86>
      Error_Handler();
 8000d7a:	f7ff ff23 	bl	8000bc4 <Error_Handler>
 8000d7e:	e7f5      	b.n	8000d6c <HAL_SPI_MspInit+0xb4>
 8000d80:	40013000 	.word	0x40013000
 8000d84:	20001b10 	.word	0x20001b10
 8000d88:	40020030 	.word	0x40020030
 8000d8c:	20001b70 	.word	0x20001b70
 8000d90:	40020008 	.word	0x40020008

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b500      	push	{lr}
 8000d96:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_MspInit+0x3c>)
 8000d9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d9c:	f042 0201 	orr.w	r2, r2, #1
 8000da0:	661a      	str	r2, [r3, #96]	; 0x60
 8000da2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000da4:	f002 0201 	and.w	r2, r2, #1
 8000da8:	9200      	str	r2, [sp, #0]
 8000daa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000db2:	659a      	str	r2, [r3, #88]	; 0x58
 8000db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	210f      	movs	r1, #15
 8000dc2:	f06f 0001 	mvn.w	r0, #1
 8000dc6:	f000 fa0b 	bl	80011e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	b003      	add	sp, #12
 8000dcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b530      	push	{r4, r5, lr}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <HAL_InitTick+0x7c>)
 8000ddc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000de2:	661a      	str	r2, [r3, #96]	; 0x60
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dee:	a902      	add	r1, sp, #8
 8000df0:	a803      	add	r0, sp, #12
 8000df2:	f003 f985 	bl	8004100 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000df6:	f003 f971 	bl	80040dc <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dfa:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <HAL_InitTick+0x80>)
 8000dfc:	fba2 2300 	umull	r2, r3, r2, r0
 8000e00:	0c9b      	lsrs	r3, r3, #18
 8000e02:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e04:	4814      	ldr	r0, [pc, #80]	; (8000e58 <HAL_InitTick+0x84>)
 8000e06:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <HAL_InitTick+0x88>)
 8000e08:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e0e:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e10:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e16:	6083      	str	r3, [r0, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000e18:	f004 fc24 	bl	8005664 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000e1c:	4605      	mov	r5, r0
 8000e1e:	b110      	cbz	r0, 8000e26 <HAL_InitTick+0x52>
    }
  }

 /* Return function status */
  return status;
}
 8000e20:	4628      	mov	r0, r5
 8000e22:	b009      	add	sp, #36	; 0x24
 8000e24:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e26:	480c      	ldr	r0, [pc, #48]	; (8000e58 <HAL_InitTick+0x84>)
 8000e28:	f004 fa16 	bl	8005258 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000e2c:	4605      	mov	r5, r0
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	d1f6      	bne.n	8000e20 <HAL_InitTick+0x4c>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e32:	2019      	movs	r0, #25
 8000e34:	f000 fa1a 	bl	800126c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e38:	2c0f      	cmp	r4, #15
 8000e3a:	d901      	bls.n	8000e40 <HAL_InitTick+0x6c>
        status = HAL_ERROR;
 8000e3c:	2501      	movs	r5, #1
 8000e3e:	e7ef      	b.n	8000e20 <HAL_InitTick+0x4c>
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000e40:	2200      	movs	r2, #0
 8000e42:	4621      	mov	r1, r4
 8000e44:	2019      	movs	r0, #25
 8000e46:	f000 f9cb 	bl	80011e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_InitTick+0x8c>)
 8000e4c:	601c      	str	r4, [r3, #0]
 8000e4e:	e7e7      	b.n	8000e20 <HAL_InitTick+0x4c>
 8000e50:	40021000 	.word	0x40021000
 8000e54:	431bde83 	.word	0x431bde83
 8000e58:	20001c34 	.word	0x20001c34
 8000e5c:	40012c00 	.word	0x40012c00
 8000e60:	20000008 	.word	0x20000008

08000e64 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler>

08000e66 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler>

08000e68 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler>

08000e6a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler>

08000e6c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler>

08000e6e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6e:	4770      	bx	lr

08000e70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e72:	4802      	ldr	r0, [pc, #8]	; (8000e7c <DMA1_Channel1_IRQHandler+0xc>)
 8000e74:	f000 fc41 	bl	80016fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e78:	bd08      	pop	{r3, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20001b70 	.word	0x20001b70

08000e80 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e82:	4802      	ldr	r0, [pc, #8]	; (8000e8c <DMA1_Channel2_IRQHandler+0xc>)
 8000e84:	f000 fc39 	bl	80016fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e88:	bd08      	pop	{r3, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20001c84 	.word	0x20001c84

08000e90 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000e90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e92:	4802      	ldr	r0, [pc, #8]	; (8000e9c <DMA1_Channel3_IRQHandler+0xc>)
 8000e94:	f000 fc31 	bl	80016fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000e98:	bd08      	pop	{r3, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20001b10 	.word	0x20001b10

08000ea0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ea0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ea2:	4802      	ldr	r0, [pc, #8]	; (8000eac <DMA1_Channel4_IRQHandler+0xc>)
 8000ea4:	f000 fc29 	bl	80016fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000ea8:	bd08      	pop	{r3, pc}
 8000eaa:	bf00      	nop
 8000eac:	20001ce4 	.word	0x20001ce4

08000eb0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000eb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000eb2:	4802      	ldr	r0, [pc, #8]	; (8000ebc <USB_LP_IRQHandler+0xc>)
 8000eb4:	f002 f934 	bl	8003120 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000eb8:	bd08      	pop	{r3, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000c2e0 	.word	0x2000c2e0

08000ec0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000ec0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ec2:	4802      	ldr	r0, [pc, #8]	; (8000ecc <FDCAN1_IT0_IRQHandler+0xc>)
 8000ec4:	f001 f91a 	bl	80020fc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000ec8:	bd08      	pop	{r3, pc}
 8000eca:	bf00      	nop
 8000ecc:	20001a8c 	.word	0x20001a8c

08000ed0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ed0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ed2:	4802      	ldr	r0, [pc, #8]	; (8000edc <TIM1_UP_TIM16_IRQHandler+0xc>)
 8000ed4:	f004 fa46 	bl	8005364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ed8:	bd08      	pop	{r3, pc}
 8000eda:	bf00      	nop
 8000edc:	20001c34 	.word	0x20001c34

08000ee0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ee0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ee2:	4802      	ldr	r0, [pc, #8]	; (8000eec <USART1_IRQHandler+0xc>)
 8000ee4:	f004 fd70 	bl	80059c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ee8:	bd08      	pop	{r3, pc}
 8000eea:	bf00      	nop
 8000eec:	20001d44 	.word	0x20001d44

08000ef0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	4770      	bx	lr

08000ef4 <_kill>:

int _kill(int pid, int sig)
{
 8000ef4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ef6:	f010 fedb 	bl	8011cb0 <__errno>
 8000efa:	2316      	movs	r3, #22
 8000efc:	6003      	str	r3, [r0, #0]
  return -1;
}
 8000efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f02:	bd08      	pop	{r3, pc}

08000f04 <_exit>:

void _exit (int status)
{
 8000f04:	b508      	push	{r3, lr}
  _kill(status, -1);
 8000f06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f0a:	f7ff fff3 	bl	8000ef4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f0e:	e7fe      	b.n	8000f0e <_exit+0xa>

08000f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f10:	b570      	push	{r4, r5, r6, lr}
 8000f12:	460c      	mov	r4, r1
 8000f14:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	2500      	movs	r5, #0
 8000f18:	e006      	b.n	8000f28 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000f1a:	f3af 8000 	nop.w
 8000f1e:	4621      	mov	r1, r4
 8000f20:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f24:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000f26:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f28:	42b5      	cmp	r5, r6
 8000f2a:	dbf6      	blt.n	8000f1a <_read+0xa>
  }

  return len;
}
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	bd70      	pop	{r4, r5, r6, pc}

08000f30 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f34:	4770      	bx	lr

08000f36 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3a:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	4770      	bx	lr

08000f40 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000f40:	2001      	movs	r0, #1
 8000f42:	4770      	bx	lr

08000f44 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000f44:	2000      	movs	r0, #0
 8000f46:	4770      	bx	lr

08000f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f48:	b510      	push	{r4, lr}
 8000f4a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <_sbrk+0x38>)
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <_sbrk+0x40>)
 8000f52:	6800      	ldr	r0, [r0, #0]
 8000f54:	b140      	cbz	r0, 8000f68 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <_sbrk+0x40>)
 8000f58:	6800      	ldr	r0, [r0, #0]
 8000f5a:	4403      	add	r3, r0
 8000f5c:	1a52      	subs	r2, r2, r1
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d806      	bhi.n	8000f70 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000f62:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <_sbrk+0x40>)
 8000f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000f66:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <_sbrk+0x40>)
 8000f6a:	4c08      	ldr	r4, [pc, #32]	; (8000f8c <_sbrk+0x44>)
 8000f6c:	6004      	str	r4, [r0, #0]
 8000f6e:	e7f2      	b.n	8000f56 <_sbrk+0xe>
    errno = ENOMEM;
 8000f70:	f010 fe9e 	bl	8011cb0 <__errno>
 8000f74:	230c      	movs	r3, #12
 8000f76:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f7c:	e7f3      	b.n	8000f66 <_sbrk+0x1e>
 8000f7e:	bf00      	nop
 8000f80:	20020000 	.word	0x20020000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	20001c80 	.word	0x20001c80
 8000f8c:	2000c940 	.word	0x2000c940

08000f90 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f90:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <SystemInit+0x10>)
 8000f92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000f96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fa4:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa6:	4817      	ldr	r0, [pc, #92]	; (8001004 <MX_USART1_UART_Init+0x60>)
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_USART1_UART_Init+0x64>)
 8000faa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000fac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000fb0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fb8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fba:	220c      	movs	r2, #12
 8000fbc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc2:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc4:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc8:	f005 fa88 	bl	80064dc <HAL_UART_Init>
 8000fcc:	b970      	cbnz	r0, 8000fec <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_USART1_UART_Init+0x60>)
 8000fd2:	f005 fb69 	bl	80066a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000fd6:	b960      	cbnz	r0, 8000ff2 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	480a      	ldr	r0, [pc, #40]	; (8001004 <MX_USART1_UART_Init+0x60>)
 8000fdc:	f005 fbc2 	bl	8006764 <HAL_UARTEx_SetRxFifoThreshold>
 8000fe0:	b950      	cbnz	r0, 8000ff8 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fe2:	4808      	ldr	r0, [pc, #32]	; (8001004 <MX_USART1_UART_Init+0x60>)
 8000fe4:	f005 fb1e 	bl	8006624 <HAL_UARTEx_DisableFifoMode>
 8000fe8:	b948      	cbnz	r0, 8000ffe <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fea:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000fec:	f7ff fdea 	bl	8000bc4 <Error_Handler>
 8000ff0:	e7ed      	b.n	8000fce <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8000ff2:	f7ff fde7 	bl	8000bc4 <Error_Handler>
 8000ff6:	e7ef      	b.n	8000fd8 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 8000ff8:	f7ff fde4 	bl	8000bc4 <Error_Handler>
 8000ffc:	e7f1      	b.n	8000fe2 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8000ffe:	f7ff fde1 	bl	8000bc4 <Error_Handler>
}
 8001002:	e7f2      	b.n	8000fea <MX_USART1_UART_Init+0x46>
 8001004:	20001d44 	.word	0x20001d44
 8001008:	40013800 	.word	0x40013800

0800100c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800100c:	b530      	push	{r4, r5, lr}
 800100e:	b09d      	sub	sp, #116	; 0x74
 8001010:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	2100      	movs	r1, #0
 8001014:	9117      	str	r1, [sp, #92]	; 0x5c
 8001016:	9118      	str	r1, [sp, #96]	; 0x60
 8001018:	9119      	str	r1, [sp, #100]	; 0x64
 800101a:	911a      	str	r1, [sp, #104]	; 0x68
 800101c:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800101e:	2254      	movs	r2, #84	; 0x54
 8001020:	a802      	add	r0, sp, #8
 8001022:	f010 fdb3 	bl	8011b8c <memset>
  if(uartHandle->Instance==USART1)
 8001026:	6822      	ldr	r2, [r4, #0]
 8001028:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <HAL_UART_MspInit+0xec>)
 800102a:	429a      	cmp	r2, r3
 800102c:	d001      	beq.n	8001032 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800102e:	b01d      	add	sp, #116	; 0x74
 8001030:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001036:	a802      	add	r0, sp, #8
 8001038:	f003 f894 	bl	8004164 <HAL_RCCEx_PeriphCLKConfig>
 800103c:	2800      	cmp	r0, #0
 800103e:	d152      	bne.n	80010e6 <HAL_UART_MspInit+0xda>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001040:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <HAL_UART_MspInit+0xf0>)
 8001042:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001044:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001048:	661a      	str	r2, [r3, #96]	; 0x60
 800104a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800104c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001050:	9200      	str	r2, [sp, #0]
 8001052:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	64da      	str	r2, [r3, #76]	; 0x4c
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001066:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800106a:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2500      	movs	r5, #0
 8001072:	9519      	str	r5, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001074:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001076:	2307      	movs	r3, #7
 8001078:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	a917      	add	r1, sp, #92	; 0x5c
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f001 f908 	bl	8002294 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8001084:	481e      	ldr	r0, [pc, #120]	; (8001100 <HAL_UART_MspInit+0xf4>)
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <HAL_UART_MspInit+0xf8>)
 8001088:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800108a:	2318      	movs	r3, #24
 800108c:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108e:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001090:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001096:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001098:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800109a:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800109c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800109e:	f000 f957 	bl	8001350 <HAL_DMA_Init>
 80010a2:	bb18      	cbnz	r0, 80010ec <HAL_UART_MspInit+0xe0>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_UART_MspInit+0xf4>)
 80010a6:	67e3      	str	r3, [r4, #124]	; 0x7c
 80010a8:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80010aa:	4817      	ldr	r0, [pc, #92]	; (8001108 <HAL_UART_MspInit+0xfc>)
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_UART_MspInit+0x100>)
 80010ae:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80010b0:	2319      	movs	r3, #25
 80010b2:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b4:	2310      	movs	r3, #16
 80010b6:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c0:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c2:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80010c4:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010c6:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80010c8:	f000 f942 	bl	8001350 <HAL_DMA_Init>
 80010cc:	b988      	cbnz	r0, 80010f2 <HAL_UART_MspInit+0xe6>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_UART_MspInit+0xfc>)
 80010d0:	67a3      	str	r3, [r4, #120]	; 0x78
 80010d2:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2105      	movs	r1, #5
 80010d8:	2025      	movs	r0, #37	; 0x25
 80010da:	f000 f881 	bl	80011e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010de:	2025      	movs	r0, #37	; 0x25
 80010e0:	f000 f8c4 	bl	800126c <HAL_NVIC_EnableIRQ>
}
 80010e4:	e7a3      	b.n	800102e <HAL_UART_MspInit+0x22>
      Error_Handler();
 80010e6:	f7ff fd6d 	bl	8000bc4 <Error_Handler>
 80010ea:	e7a9      	b.n	8001040 <HAL_UART_MspInit+0x34>
      Error_Handler();
 80010ec:	f7ff fd6a 	bl	8000bc4 <Error_Handler>
 80010f0:	e7d8      	b.n	80010a4 <HAL_UART_MspInit+0x98>
      Error_Handler();
 80010f2:	f7ff fd67 	bl	8000bc4 <Error_Handler>
 80010f6:	e7ea      	b.n	80010ce <HAL_UART_MspInit+0xc2>
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40021000 	.word	0x40021000
 8001100:	20001c84 	.word	0x20001c84
 8001104:	4002001c 	.word	0x4002001c
 8001108:	20001ce4 	.word	0x20001ce4
 800110c:	40020044 	.word	0x40020044

08001110 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001112:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopForever+0x6>)
  ldr r1, =_edata
 8001116:	490e      	ldr	r1, [pc, #56]	; (8001150 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <LoopForever+0xe>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <LoopForever+0x12>)
  ldr r4, =_ebss
 800112c:	4c0b      	ldr	r4, [pc, #44]	; (800115c <LoopForever+0x16>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800113a:	f7ff ff29 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113e:	f010 fdbd 	bl	8011cbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001142:	f7ff fd7a 	bl	8000c3a <main>

08001146 <LoopForever>:

LoopForever:
    b LoopForever
 8001146:	e7fe      	b.n	8001146 <LoopForever>
  ldr   r0, =_estack
 8001148:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20001660 	.word	0x20001660
  ldr r2, =_sidata
 8001154:	08016ab0 	.word	0x08016ab0
  ldr r2, =_sbss
 8001158:	20001a60 	.word	0x20001a60
  ldr r4, =_ebss
 800115c:	2000c940 	.word	0x2000c940

08001160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_2_IRQHandler>

08001162 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001162:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f81d 	bl	80011a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116a:	200f      	movs	r0, #15
 800116c:	f7ff fe32 	bl	8000dd4 <HAL_InitTick>
 8001170:	b110      	cbz	r0, 8001178 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 8001172:	2401      	movs	r4, #1
  }

  /* Return function status */
  return status;

}
 8001174:	4620      	mov	r0, r4
 8001176:	bd10      	pop	{r4, pc}
 8001178:	4604      	mov	r4, r0
    HAL_MspInit();
 800117a:	f7ff fe0b 	bl	8000d94 <HAL_MspInit>
 800117e:	e7f9      	b.n	8001174 <HAL_Init+0x12>

08001180 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001180:	4a03      	ldr	r2, [pc, #12]	; (8001190 <HAL_IncTick+0x10>)
 8001182:	6813      	ldr	r3, [r2, #0]
 8001184:	4903      	ldr	r1, [pc, #12]	; (8001194 <HAL_IncTick+0x14>)
 8001186:	6809      	ldr	r1, [r1, #0]
 8001188:	440b      	add	r3, r1
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20001dd4 	.word	0x20001dd4
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001198:	4b01      	ldr	r3, [pc, #4]	; (80011a0 <HAL_GetTick+0x8>)
 800119a:	6818      	ldr	r0, [r3, #0]
}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20001dd4 	.word	0x20001dd4

080011a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b510      	push	{r4, lr}
 80011a6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80011a8:	1ec3      	subs	r3, r0, #3
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d80f      	bhi.n	80011ce <HAL_NVIC_SetPriorityGrouping+0x2a>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80011b0:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011b6:	041b      	lsls	r3, r3, #16
 80011b8:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ba:	0224      	lsls	r4, r4, #8
 80011bc:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 80011c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80011ca:	60d3      	str	r3, [r2, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80011cc:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80011ce:	21a6      	movs	r1, #166	; 0xa6
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <HAL_NVIC_SetPriorityGrouping+0x38>)
 80011d2:	f7ff fd4a 	bl	8000c6a <assert_failed>
 80011d6:	e7ea      	b.n	80011ae <HAL_NVIC_SetPriorityGrouping+0xa>
 80011d8:	e000ed00 	.word	0xe000ed00
 80011dc:	08012d48 	.word	0x08012d48

080011e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b570      	push	{r4, r5, r6, lr}
 80011e2:	4605      	mov	r5, r0
 80011e4:	460c      	mov	r4, r1
 80011e6:	4616      	mov	r6, r2
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80011e8:	2a0f      	cmp	r2, #15
 80011ea:	d825      	bhi.n	8001238 <HAL_NVIC_SetPriority+0x58>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80011ec:	2c0f      	cmp	r4, #15
 80011ee:	d828      	bhi.n	8001242 <HAL_NVIC_SetPriority+0x62>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_NVIC_SetPriority+0x80>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	f1c3 0207 	rsb	r2, r3, #7
 80011fc:	2a04      	cmp	r2, #4
 80011fe:	bf28      	it	cs
 8001200:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	1d19      	adds	r1, r3, #4
 8001204:	2906      	cmp	r1, #6
 8001206:	d921      	bls.n	800124c <HAL_NVIC_SetPriority+0x6c>
 8001208:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800120e:	fa01 f202 	lsl.w	r2, r1, r2
 8001212:	ea24 0402 	bic.w	r4, r4, r2
 8001216:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	4099      	lsls	r1, r3
 800121a:	ea26 0601 	bic.w	r6, r6, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121e:	ea44 0206 	orr.w	r2, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8001222:	2d00      	cmp	r5, #0
 8001224:	db14      	blt.n	8001250 <HAL_NVIC_SetPriority+0x70>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 800122e:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8001232:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001236:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001238:	21be      	movs	r1, #190	; 0xbe
 800123a:	480a      	ldr	r0, [pc, #40]	; (8001264 <HAL_NVIC_SetPriority+0x84>)
 800123c:	f7ff fd15 	bl	8000c6a <assert_failed>
 8001240:	e7d4      	b.n	80011ec <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001242:	21bf      	movs	r1, #191	; 0xbf
 8001244:	4807      	ldr	r0, [pc, #28]	; (8001264 <HAL_NVIC_SetPriority+0x84>)
 8001246:	f7ff fd10 	bl	8000c6a <assert_failed>
 800124a:	e7d1      	b.n	80011f0 <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124c:	2300      	movs	r3, #0
 800124e:	e7dc      	b.n	800120a <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	f005 050f 	and.w	r5, r5, #15
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_NVIC_SetPriority+0x88>)
 800125a:	555a      	strb	r2, [r3, r5]
}
 800125c:	e7eb      	b.n	8001236 <HAL_NVIC_SetPriority+0x56>
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	08012d48 	.word	0x08012d48
 8001268:	e000ed14 	.word	0xe000ed14

0800126c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800126e:	1e04      	subs	r4, r0, #0
 8001270:	db0a      	blt.n	8001288 <HAL_NVIC_EnableIRQ+0x1c>
  if ((int32_t)(IRQn) >= 0)
 8001272:	2c00      	cmp	r4, #0
 8001274:	db07      	blt.n	8001286 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	f004 021f 	and.w	r2, r4, #31
 800127a:	0964      	lsrs	r4, r4, #5
 800127c:	2301      	movs	r3, #1
 800127e:	4093      	lsls	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <HAL_NVIC_EnableIRQ+0x28>)
 8001282:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001286:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001288:	21d2      	movs	r1, #210	; 0xd2
 800128a:	4803      	ldr	r0, [pc, #12]	; (8001298 <HAL_NVIC_EnableIRQ+0x2c>)
 800128c:	f7ff fced 	bl	8000c6a <assert_failed>
 8001290:	e7ef      	b.n	8001272 <HAL_NVIC_EnableIRQ+0x6>
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100
 8001298:	08012d48 	.word	0x08012d48

0800129c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800129c:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800129e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80012a0:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80012a2:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80012a4:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80012a6:	b114      	cbz	r4, 80012ae <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012a8:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80012aa:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80012ac:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012ae:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80012b0:	f004 0c1f 	and.w	ip, r4, #31
 80012b4:	2401      	movs	r4, #1
 80012b6:	fa04 f40c 	lsl.w	r4, r4, ip
 80012ba:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80012bc:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012be:	6804      	ldr	r4, [r0, #0]
 80012c0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012c2:	6883      	ldr	r3, [r0, #8]
 80012c4:	2b10      	cmp	r3, #16
 80012c6:	d005      	beq.n	80012d4 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80012c8:	6803      	ldr	r3, [r0, #0]
 80012ca:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80012cc:	6803      	ldr	r3, [r0, #0]
 80012ce:	60da      	str	r2, [r3, #12]
  }
}
 80012d0:	bc30      	pop	{r4, r5}
 80012d2:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80012d4:	6803      	ldr	r3, [r0, #0]
 80012d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80012d8:	6803      	ldr	r3, [r0, #0]
 80012da:	60d9      	str	r1, [r3, #12]
 80012dc:	e7f8      	b.n	80012d0 <DMA_SetConfig+0x34>
	...

080012e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80012e0:	6803      	ldr	r3, [r0, #0]
 80012e2:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d813      	bhi.n	8001310 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80012e8:	490b      	ldr	r1, [pc, #44]	; (8001318 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	3b08      	subs	r3, #8
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80012f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80012f6:	f022 0203 	bic.w	r2, r2, #3
 80012fa:	440a      	add	r2, r1
 80012fc:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80012fe:	4a08      	ldr	r2, [pc, #32]	; (8001320 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8001300:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001302:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8001306:	2201      	movs	r2, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	6503      	str	r3, [r0, #80]	; 0x50
}
 800130e:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001310:	4904      	ldr	r1, [pc, #16]	; (8001324 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001312:	e7ea      	b.n	80012ea <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8001314:	40020407 	.word	0x40020407
 8001318:	40020800 	.word	0x40020800
 800131c:	cccccccd 	.word	0xcccccccd
 8001320:	40020880 	.word	0x40020880
 8001324:	40020820 	.word	0x40020820

08001328 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001328:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 800132c:	441a      	add	r2, r3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001332:	4a06      	ldr	r2, [pc, #24]	; (800134c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001334:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001336:	3b01      	subs	r3, #1
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	2201      	movs	r2, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	1000823f 	.word	0x1000823f
 800134c:	40020940 	.word	0x40020940

08001350 <HAL_DMA_Init>:
  if (hdma == NULL)
 8001350:	2800      	cmp	r0, #0
 8001352:	f000 80ed 	beq.w	8001530 <HAL_DMA_Init+0x1e0>
{
 8001356:	b510      	push	{r4, lr}
 8001358:	4604      	mov	r4, r0
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800135a:	6803      	ldr	r3, [r0, #0]
 800135c:	4a75      	ldr	r2, [pc, #468]	; (8001534 <HAL_DMA_Init+0x1e4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d031      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 8001362:	3214      	adds	r2, #20
 8001364:	4293      	cmp	r3, r2
 8001366:	d02e      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 8001368:	3214      	adds	r2, #20
 800136a:	4293      	cmp	r3, r2
 800136c:	d02b      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 800136e:	3214      	adds	r2, #20
 8001370:	4293      	cmp	r3, r2
 8001372:	d028      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 8001374:	3214      	adds	r2, #20
 8001376:	4293      	cmp	r3, r2
 8001378:	d025      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 800137a:	3214      	adds	r2, #20
 800137c:	4293      	cmp	r3, r2
 800137e:	d022      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 8001380:	3214      	adds	r2, #20
 8001382:	4293      	cmp	r3, r2
 8001384:	d01f      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 8001386:	3214      	adds	r2, #20
 8001388:	4293      	cmp	r3, r2
 800138a:	d01c      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 800138c:	f502 725d 	add.w	r2, r2, #884	; 0x374
 8001390:	4293      	cmp	r3, r2
 8001392:	d018      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 8001394:	3214      	adds	r2, #20
 8001396:	4293      	cmp	r3, r2
 8001398:	d015      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 800139a:	3214      	adds	r2, #20
 800139c:	4293      	cmp	r3, r2
 800139e:	d012      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 80013a0:	3214      	adds	r2, #20
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00f      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 80013a6:	3214      	adds	r2, #20
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d00c      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 80013ac:	3214      	adds	r2, #20
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d009      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 80013b2:	3214      	adds	r2, #20
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d006      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 80013b8:	3214      	adds	r2, #20
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d003      	beq.n	80013c6 <HAL_DMA_Init+0x76>
 80013be:	21a3      	movs	r1, #163	; 0xa3
 80013c0:	485d      	ldr	r0, [pc, #372]	; (8001538 <HAL_DMA_Init+0x1e8>)
 80013c2:	f7ff fc52 	bl	8000c6a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80013c6:	68a3      	ldr	r3, [r4, #8]
 80013c8:	b123      	cbz	r3, 80013d4 <HAL_DMA_Init+0x84>
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d002      	beq.n	80013d4 <HAL_DMA_Init+0x84>
 80013ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013d2:	d16d      	bne.n	80014b0 <HAL_DMA_Init+0x160>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80013d4:	68e3      	ldr	r3, [r4, #12]
 80013d6:	2b40      	cmp	r3, #64	; 0x40
 80013d8:	d001      	beq.n	80013de <HAL_DMA_Init+0x8e>
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d16d      	bne.n	80014ba <HAL_DMA_Init+0x16a>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80013de:	6923      	ldr	r3, [r4, #16]
 80013e0:	2b80      	cmp	r3, #128	; 0x80
 80013e2:	d001      	beq.n	80013e8 <HAL_DMA_Init+0x98>
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d16d      	bne.n	80014c4 <HAL_DMA_Init+0x174>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80013e8:	6963      	ldr	r3, [r4, #20]
 80013ea:	b12b      	cbz	r3, 80013f8 <HAL_DMA_Init+0xa8>
 80013ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013f0:	d002      	beq.n	80013f8 <HAL_DMA_Init+0xa8>
 80013f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013f6:	d16a      	bne.n	80014ce <HAL_DMA_Init+0x17e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80013f8:	69a3      	ldr	r3, [r4, #24]
 80013fa:	b12b      	cbz	r3, 8001408 <HAL_DMA_Init+0xb8>
 80013fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001400:	d002      	beq.n	8001408 <HAL_DMA_Init+0xb8>
 8001402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001406:	d167      	bne.n	80014d8 <HAL_DMA_Init+0x188>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001408:	69e3      	ldr	r3, [r4, #28]
 800140a:	b10b      	cbz	r3, 8001410 <HAL_DMA_Init+0xc0>
 800140c:	2b20      	cmp	r3, #32
 800140e:	d168      	bne.n	80014e2 <HAL_DMA_Init+0x192>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001410:	6a23      	ldr	r3, [r4, #32]
 8001412:	b143      	cbz	r3, 8001426 <HAL_DMA_Init+0xd6>
 8001414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001418:	d005      	beq.n	8001426 <HAL_DMA_Init+0xd6>
 800141a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800141e:	d002      	beq.n	8001426 <HAL_DMA_Init+0xd6>
 8001420:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001424:	d162      	bne.n	80014ec <HAL_DMA_Init+0x19c>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8001426:	6863      	ldr	r3, [r4, #4]
 8001428:	2b73      	cmp	r3, #115	; 0x73
 800142a:	d864      	bhi.n	80014f6 <HAL_DMA_Init+0x1a6>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800142c:	6821      	ldr	r1, [r4, #0]
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <HAL_DMA_Init+0x1ec>)
 8001430:	4299      	cmp	r1, r3
 8001432:	d865      	bhi.n	8001500 <HAL_DMA_Init+0x1b0>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001434:	4b42      	ldr	r3, [pc, #264]	; (8001540 <HAL_DMA_Init+0x1f0>)
 8001436:	440b      	add	r3, r1
 8001438:	4a42      	ldr	r2, [pc, #264]	; (8001544 <HAL_DMA_Init+0x1f4>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001444:	4b40      	ldr	r3, [pc, #256]	; (8001548 <HAL_DMA_Init+0x1f8>)
 8001446:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001448:	2302      	movs	r3, #2
 800144a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 800144e:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001450:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001454:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8001458:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145a:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 800145c:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145e:	6920      	ldr	r0, [r4, #16]
 8001460:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001462:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001464:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001466:	69a0      	ldr	r0, [r4, #24]
 8001468:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800146a:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800146e:	6a20      	ldr	r0, [r4, #32]
 8001470:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001472:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001474:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001476:	4620      	mov	r0, r4
 8001478:	f7ff ff32 	bl	80012e0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800147c:	68a3      	ldr	r3, [r4, #8]
 800147e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001482:	d048      	beq.n	8001516 <HAL_DMA_Init+0x1c6>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001484:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001486:	7922      	ldrb	r2, [r4, #4]
 8001488:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800148a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800148c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800148e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001490:	6863      	ldr	r3, [r4, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	2b03      	cmp	r3, #3
 8001496:	d941      	bls.n	800151c <HAL_DMA_Init+0x1cc>
    hdma->DMAmuxRequestGen = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800149c:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800149e:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a0:	2000      	movs	r0, #0
 80014a2:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80014a4:	2301      	movs	r3, #1
 80014a6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80014aa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80014ae:	bd10      	pop	{r4, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80014b0:	21a4      	movs	r1, #164	; 0xa4
 80014b2:	4821      	ldr	r0, [pc, #132]	; (8001538 <HAL_DMA_Init+0x1e8>)
 80014b4:	f7ff fbd9 	bl	8000c6a <assert_failed>
 80014b8:	e78c      	b.n	80013d4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80014ba:	21a5      	movs	r1, #165	; 0xa5
 80014bc:	481e      	ldr	r0, [pc, #120]	; (8001538 <HAL_DMA_Init+0x1e8>)
 80014be:	f7ff fbd4 	bl	8000c6a <assert_failed>
 80014c2:	e78c      	b.n	80013de <HAL_DMA_Init+0x8e>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80014c4:	21a6      	movs	r1, #166	; 0xa6
 80014c6:	481c      	ldr	r0, [pc, #112]	; (8001538 <HAL_DMA_Init+0x1e8>)
 80014c8:	f7ff fbcf 	bl	8000c6a <assert_failed>
 80014cc:	e78c      	b.n	80013e8 <HAL_DMA_Init+0x98>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80014ce:	21a7      	movs	r1, #167	; 0xa7
 80014d0:	4819      	ldr	r0, [pc, #100]	; (8001538 <HAL_DMA_Init+0x1e8>)
 80014d2:	f7ff fbca 	bl	8000c6a <assert_failed>
 80014d6:	e78f      	b.n	80013f8 <HAL_DMA_Init+0xa8>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80014d8:	21a8      	movs	r1, #168	; 0xa8
 80014da:	4817      	ldr	r0, [pc, #92]	; (8001538 <HAL_DMA_Init+0x1e8>)
 80014dc:	f7ff fbc5 	bl	8000c6a <assert_failed>
 80014e0:	e792      	b.n	8001408 <HAL_DMA_Init+0xb8>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80014e2:	21a9      	movs	r1, #169	; 0xa9
 80014e4:	4814      	ldr	r0, [pc, #80]	; (8001538 <HAL_DMA_Init+0x1e8>)
 80014e6:	f7ff fbc0 	bl	8000c6a <assert_failed>
 80014ea:	e791      	b.n	8001410 <HAL_DMA_Init+0xc0>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80014ec:	21aa      	movs	r1, #170	; 0xaa
 80014ee:	4812      	ldr	r0, [pc, #72]	; (8001538 <HAL_DMA_Init+0x1e8>)
 80014f0:	f7ff fbbb 	bl	8000c6a <assert_failed>
 80014f4:	e797      	b.n	8001426 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80014f6:	21ac      	movs	r1, #172	; 0xac
 80014f8:	480f      	ldr	r0, [pc, #60]	; (8001538 <HAL_DMA_Init+0x1e8>)
 80014fa:	f7ff fbb6 	bl	8000c6a <assert_failed>
 80014fe:	e795      	b.n	800142c <HAL_DMA_Init+0xdc>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_DMA_Init+0x1fc>)
 8001502:	440b      	add	r3, r1
 8001504:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <HAL_DMA_Init+0x1f4>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_DMA_Init+0x200>)
 8001512:	6423      	str	r3, [r4, #64]	; 0x40
 8001514:	e798      	b.n	8001448 <HAL_DMA_Init+0xf8>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001516:	2300      	movs	r3, #0
 8001518:	6063      	str	r3, [r4, #4]
 800151a:	e7b3      	b.n	8001484 <HAL_DMA_Init+0x134>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800151c:	4620      	mov	r0, r4
 800151e:	f7ff ff03 	bl	8001328 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001522:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001528:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800152a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	e7b7      	b.n	80014a0 <HAL_DMA_Init+0x150>
    return HAL_ERROR;
 8001530:	2001      	movs	r0, #1
}
 8001532:	4770      	bx	lr
 8001534:	40020008 	.word	0x40020008
 8001538:	08012d84 	.word	0x08012d84
 800153c:	40020407 	.word	0x40020407
 8001540:	bffdfff8 	.word	0xbffdfff8
 8001544:	cccccccd 	.word	0xcccccccd
 8001548:	40020000 	.word	0x40020000
 800154c:	bffdfbf8 	.word	0xbffdfbf8
 8001550:	40020400 	.word	0x40020400

08001554 <HAL_DMA_Start_IT>:
{
 8001554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001556:	4604      	mov	r4, r0
 8001558:	460e      	mov	r6, r1
 800155a:	4617      	mov	r7, r2
 800155c:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800155e:	1e5a      	subs	r2, r3, #1
 8001560:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_DMA_Start_IT+0xb4>)
 8001562:	429a      	cmp	r2, r3
 8001564:	d810      	bhi.n	8001588 <HAL_DMA_Start_IT+0x34>
  __HAL_LOCK(hdma);
 8001566:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800156a:	2b01      	cmp	r3, #1
 800156c:	d04a      	beq.n	8001604 <HAL_DMA_Start_IT+0xb0>
 800156e:	2301      	movs	r3, #1
 8001570:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8001574:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b01      	cmp	r3, #1
 800157c:	d00a      	beq.n	8001594 <HAL_DMA_Start_IT+0x40>
    __HAL_UNLOCK(hdma);
 800157e:	2300      	movs	r3, #0
 8001580:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8001584:	2002      	movs	r0, #2
}
 8001586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001588:	f240 11ab 	movw	r1, #427	; 0x1ab
 800158c:	481f      	ldr	r0, [pc, #124]	; (800160c <HAL_DMA_Start_IT+0xb8>)
 800158e:	f7ff fb6c 	bl	8000c6a <assert_failed>
 8001592:	e7e8      	b.n	8001566 <HAL_DMA_Start_IT+0x12>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001594:	2302      	movs	r3, #2
 8001596:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800159a:	2300      	movs	r3, #0
 800159c:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800159e:	6822      	ldr	r2, [r4, #0]
 80015a0:	6813      	ldr	r3, [r2, #0]
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	6013      	str	r3, [r2, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015a8:	462b      	mov	r3, r5
 80015aa:	463a      	mov	r2, r7
 80015ac:	4631      	mov	r1, r6
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fe74 	bl	800129c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80015b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015b6:	b1d3      	cbz	r3, 80015ee <HAL_DMA_Start_IT+0x9a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b8:	6822      	ldr	r2, [r4, #0]
 80015ba:	6813      	ldr	r3, [r2, #0]
 80015bc:	f043 030e 	orr.w	r3, r3, #14
 80015c0:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80015c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80015ca:	d003      	beq.n	80015d4 <HAL_DMA_Start_IT+0x80>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015d2:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80015d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015d6:	b11b      	cbz	r3, 80015e0 <HAL_DMA_Start_IT+0x8c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015de:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80015e0:	6822      	ldr	r2, [r4, #0]
 80015e2:	6813      	ldr	r3, [r2, #0]
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ea:	2000      	movs	r0, #0
 80015ec:	e7cb      	b.n	8001586 <HAL_DMA_Start_IT+0x32>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015ee:	6822      	ldr	r2, [r4, #0]
 80015f0:	6813      	ldr	r3, [r2, #0]
 80015f2:	f023 0304 	bic.w	r3, r3, #4
 80015f6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015f8:	6822      	ldr	r2, [r4, #0]
 80015fa:	6813      	ldr	r3, [r2, #0]
 80015fc:	f043 030a 	orr.w	r3, r3, #10
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e7de      	b.n	80015c2 <HAL_DMA_Start_IT+0x6e>
  __HAL_LOCK(hdma);
 8001604:	2002      	movs	r0, #2
 8001606:	e7be      	b.n	8001586 <HAL_DMA_Start_IT+0x32>
 8001608:	0003fffe 	.word	0x0003fffe
 800160c:	08012d84 	.word	0x08012d84

08001610 <HAL_DMA_Abort>:
{
 8001610:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001612:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	2a02      	cmp	r2, #2
 800161a:	d009      	beq.n	8001630 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161c:	2204      	movs	r2, #4
 800161e:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001620:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800162e:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001630:	6801      	ldr	r1, [r0, #0]
 8001632:	680a      	ldr	r2, [r1, #0]
 8001634:	f022 020e 	bic.w	r2, r2, #14
 8001638:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800163a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800163c:	680a      	ldr	r2, [r1, #0]
 800163e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001642:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 8001644:	6801      	ldr	r1, [r0, #0]
 8001646:	680a      	ldr	r2, [r1, #0]
 8001648:	f022 0201 	bic.w	r2, r2, #1
 800164c:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800164e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001650:	f002 011f 	and.w	r1, r2, #31
 8001654:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8001656:	2201      	movs	r2, #1
 8001658:	408a      	lsls	r2, r1
 800165a:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800165c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800165e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001660:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8001662:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001664:	b142      	cbz	r2, 8001678 <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001666:	6811      	ldr	r1, [r2, #0]
 8001668:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800166c:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800166e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001670:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001672:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001674:	2000      	movs	r0, #0
 8001676:	e7d4      	b.n	8001622 <HAL_DMA_Abort+0x12>
 8001678:	2000      	movs	r0, #0
 800167a:	e7d2      	b.n	8001622 <HAL_DMA_Abort+0x12>

0800167c <HAL_DMA_Abort_IT>:
{
 800167c:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800167e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d009      	beq.n	800169c <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001688:	2304      	movs	r3, #4
 800168a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800168c:	2301      	movs	r3, #1
 800168e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001692:	2200      	movs	r2, #0
 8001694:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 8001698:	4618      	mov	r0, r3
}
 800169a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800169c:	6802      	ldr	r2, [r0, #0]
 800169e:	6813      	ldr	r3, [r2, #0]
 80016a0:	f023 030e 	bic.w	r3, r3, #14
 80016a4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80016a6:	6802      	ldr	r2, [r0, #0]
 80016a8:	6813      	ldr	r3, [r2, #0]
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016b0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80016b2:	6813      	ldr	r3, [r2, #0]
 80016b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016b8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80016c2:	2301      	movs	r3, #1
 80016c4:	4093      	lsls	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80016ca:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80016cc:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80016ce:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80016d0:	b133      	cbz	r3, 80016e0 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016d8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016da:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80016dc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80016de:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80016e6:	2300      	movs	r3, #0
 80016e8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80016ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80016ee:	b113      	cbz	r3, 80016f6 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 80016f0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80016f2:	2000      	movs	r0, #0
 80016f4:	e7d1      	b.n	800169a <HAL_DMA_Abort_IT+0x1e>
 80016f6:	2000      	movs	r0, #0
 80016f8:	e7cf      	b.n	800169a <HAL_DMA_Abort_IT+0x1e>

080016fa <HAL_DMA_IRQHandler>:
{
 80016fa:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80016fe:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001700:	6804      	ldr	r4, [r0, #0]
 8001702:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001704:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001706:	f003 031f 	and.w	r3, r3, #31
 800170a:	2204      	movs	r2, #4
 800170c:	409a      	lsls	r2, r3
 800170e:	420a      	tst	r2, r1
 8001710:	d015      	beq.n	800173e <HAL_DMA_IRQHandler+0x44>
 8001712:	f015 0f04 	tst.w	r5, #4
 8001716:	d012      	beq.n	800173e <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	f013 0f20 	tst.w	r3, #32
 800171e:	d103      	bne.n	8001728 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	f023 0304 	bic.w	r3, r3, #4
 8001726:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001728:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800172a:	f003 021f 	and.w	r2, r3, #31
 800172e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001730:	2304      	movs	r3, #4
 8001732:	4093      	lsls	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8001736:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001738:	b103      	cbz	r3, 800173c <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 800173a:	4798      	blx	r3
}
 800173c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800173e:	2202      	movs	r2, #2
 8001740:	409a      	lsls	r2, r3
 8001742:	420a      	tst	r2, r1
 8001744:	d01c      	beq.n	8001780 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8001746:	f015 0f02 	tst.w	r5, #2
 800174a:	d019      	beq.n	8001780 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	f013 0f20 	tst.w	r3, #32
 8001752:	d106      	bne.n	8001762 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	f023 030a 	bic.w	r3, r3, #10
 800175a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800175c:	2301      	movs	r3, #1
 800175e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001762:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800176a:	2302      	movs	r3, #2
 800176c:	4093      	lsls	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001770:	2300      	movs	r3, #0
 8001772:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8001776:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0df      	beq.n	800173c <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800177c:	4798      	blx	r3
 800177e:	e7dd      	b.n	800173c <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001780:	2208      	movs	r2, #8
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	420b      	tst	r3, r1
 8001788:	d0d8      	beq.n	800173c <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 800178a:	f015 0f08 	tst.w	r5, #8
 800178e:	d0d5      	beq.n	800173c <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	f023 030e 	bic.w	r3, r3, #14
 8001796:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001798:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800179a:	f003 031f 	and.w	r3, r3, #31
 800179e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80017a0:	2201      	movs	r2, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017a8:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80017aa:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80017ae:	2300      	movs	r3, #0
 80017b0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80017b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0c0      	beq.n	800173c <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80017ba:	4798      	blx	r3
  return;
 80017bc:	e7be      	b.n	800173c <HAL_DMA_IRQHandler+0x42>
	...

080017c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80017c0:	b410      	push	{r4}
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80017c2:	6802      	ldr	r2, [r0, #0]
 80017c4:	4b1d      	ldr	r3, [pc, #116]	; (800183c <FDCAN_CalcultateRamBlockAddresses+0x7c>)
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d028      	beq.n	800181c <FDCAN_CalcultateRamBlockAddresses+0x5c>
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80017ca:	491d      	ldr	r1, [pc, #116]	; (8001840 <FDCAN_CalcultateRamBlockAddresses+0x80>)
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <FDCAN_CalcultateRamBlockAddresses+0x84>)
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d026      	beq.n	8001820 <FDCAN_CalcultateRamBlockAddresses+0x60>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80017d2:	6401      	str	r1, [r0, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80017d4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80017d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80017dc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80017de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80017e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80017e6:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80017ea:	6443      	str	r3, [r0, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80017ec:	6802      	ldr	r2, [r0, #0]
 80017ee:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80017f2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80017f6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80017f8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80017fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001800:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 8001804:	6483      	str	r3, [r0, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001806:	f501 73c4 	add.w	r3, r1, #392	; 0x188
 800180a:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800180c:	f501 7318 	add.w	r3, r1, #608	; 0x260
 8001810:	6503      	str	r3, [r0, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001812:	f501 731e 	add.w	r3, r1, #632	; 0x278
 8001816:	6543      	str	r3, [r0, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001818:	460b      	mov	r3, r1
 800181a:	e007      	b.n	800182c <FDCAN_CalcultateRamBlockAddresses+0x6c>
    SramCanInstanceBase += SRAMCAN_SIZE;
 800181c:	490a      	ldr	r1, [pc, #40]	; (8001848 <FDCAN_CalcultateRamBlockAddresses+0x88>)
 800181e:	e7d5      	b.n	80017cc <FDCAN_CalcultateRamBlockAddresses+0xc>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001820:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 8001824:	e7d5      	b.n	80017d2 <FDCAN_CalcultateRamBlockAddresses+0x12>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001826:	2200      	movs	r2, #0
 8001828:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800182c:	f501 7254 	add.w	r2, r1, #848	; 0x350
 8001830:	429a      	cmp	r2, r3
 8001832:	d8f8      	bhi.n	8001826 <FDCAN_CalcultateRamBlockAddresses+0x66>
  }
}
 8001834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40006800 	.word	0x40006800
 8001840:	4000a400 	.word	0x4000a400
 8001844:	40006c00 	.word	0x40006c00
 8001848:	4000a750 	.word	0x4000a750

0800184c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800184c:	b570      	push	{r4, r5, r6, lr}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800184e:	684c      	ldr	r4, [r1, #4]
 8001850:	b9e4      	cbnz	r4, 800188c <FDCAN_CopyMessageToRAM+0x40>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001852:	690d      	ldr	r5, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001854:	688c      	ldr	r4, [r1, #8]
                   FDCAN_STANDARD_ID |
 8001856:	4325      	orrs	r5, r4
                   (pTxHeader->Identifier << 18U));
 8001858:	680c      	ldr	r4, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800185a:	ea45 4584 	orr.w	r5, r5, r4, lsl #18
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
                 pTxHeader->TxEventFifoControl |
 800185e:	69cc      	ldr	r4, [r1, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001860:	6a0e      	ldr	r6, [r1, #32]
 8001862:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
                 pTxHeader->TxEventFifoControl |
 8001866:	698e      	ldr	r6, [r1, #24]
 8001868:	4334      	orrs	r4, r6
                 pTxHeader->FDFormat |
 800186a:	694e      	ldr	r6, [r1, #20]
 800186c:	4334      	orrs	r4, r6
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800186e:	68ce      	ldr	r6, [r1, #12]
 8001870:	4334      	orrs	r4, r6
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001872:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8001874:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001878:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800187c:	f840 5033 	str.w	r5, [r0, r3, lsl #3]
  TxAddress++;
  *TxAddress = TxElementW2;
 8001880:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;
 8001884:	f10e 0e08 	add.w	lr, lr, #8

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001888:	2000      	movs	r0, #0
 800188a:	e019      	b.n	80018c0 <FDCAN_CopyMessageToRAM+0x74>
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800188c:	690c      	ldr	r4, [r1, #16]
                   pTxHeader->TxFrameType |
 800188e:	688d      	ldr	r5, [r1, #8]
                   FDCAN_EXTENDED_ID |
 8001890:	4325      	orrs	r5, r4
                   pTxHeader->Identifier);
 8001892:	680c      	ldr	r4, [r1, #0]
                   pTxHeader->TxFrameType |
 8001894:	4325      	orrs	r5, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001896:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 800189a:	e7e0      	b.n	800185e <FDCAN_CopyMessageToRAM+0x12>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800189c:	eb02 0c00 	add.w	ip, r2, r0
 80018a0:	f89c 4003 	ldrb.w	r4, [ip, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80018a4:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80018a8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80018aa:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80018ae:	f89c 4001 	ldrb.w	r4, [ip, #1]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80018b2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                  (uint32_t)pTxData[ByteCounter]);
 80018b6:	5c14      	ldrb	r4, [r2, r0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80018b8:	4323      	orrs	r3, r4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80018ba:	f84e 3b04 	str.w	r3, [lr], #4
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80018be:	3004      	adds	r0, #4
 80018c0:	89cb      	ldrh	r3, [r1, #14]
 80018c2:	4c02      	ldr	r4, [pc, #8]	; (80018cc <FDCAN_CopyMessageToRAM+0x80>)
 80018c4:	5ce3      	ldrb	r3, [r4, r3]
 80018c6:	4283      	cmp	r3, r0
 80018c8:	d8e8      	bhi.n	800189c <FDCAN_CopyMessageToRAM+0x50>
    TxAddress++;
  }
}
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
 80018cc:	08012df8 	.word	0x08012df8

080018d0 <HAL_FDCAN_Init>:
  if (hfdcan == NULL)
 80018d0:	2800      	cmp	r0, #0
 80018d2:	f000 81b1 	beq.w	8001c38 <HAL_FDCAN_Init+0x368>
{
 80018d6:	b538      	push	{r3, r4, r5, lr}
 80018d8:	4604      	mov	r4, r0
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));
 80018da:	6803      	ldr	r3, [r0, #0]
 80018dc:	4a82      	ldr	r2, [pc, #520]	; (8001ae8 <HAL_FDCAN_Init+0x218>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00c      	beq.n	80018fc <HAL_FDCAN_Init+0x2c>
 80018e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d008      	beq.n	80018fc <HAL_FDCAN_Init+0x2c>
 80018ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d004      	beq.n	80018fc <HAL_FDCAN_Init+0x2c>
 80018f2:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80018f6:	487d      	ldr	r0, [pc, #500]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 80018f8:	f7ff f9b7 	bl	8000c6a <assert_failed>
  if (hfdcan->Instance == FDCAN1)
 80018fc:	6822      	ldr	r2, [r4, #0]
 80018fe:	4b7a      	ldr	r3, [pc, #488]	; (8001ae8 <HAL_FDCAN_Init+0x218>)
 8001900:	429a      	cmp	r2, r3
 8001902:	d057      	beq.n	80019b4 <HAL_FDCAN_Init+0xe4>
  assert_param(IS_FDCAN_FRAME_FORMAT(hfdcan->Init.FrameFormat));
 8001904:	68a3      	ldr	r3, [r4, #8]
 8001906:	b12b      	cbz	r3, 8001914 <HAL_FDCAN_Init+0x44>
 8001908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800190c:	d002      	beq.n	8001914 <HAL_FDCAN_Init+0x44>
 800190e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001912:	d158      	bne.n	80019c6 <HAL_FDCAN_Init+0xf6>
  assert_param(IS_FDCAN_MODE(hfdcan->Init.Mode));
 8001914:	68e3      	ldr	r3, [r4, #12]
 8001916:	2b04      	cmp	r3, #4
 8001918:	d85b      	bhi.n	80019d2 <HAL_FDCAN_Init+0x102>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.AutoRetransmission));
 800191a:	7c23      	ldrb	r3, [r4, #16]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d85e      	bhi.n	80019de <HAL_FDCAN_Init+0x10e>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.TransmitPause));
 8001920:	7c63      	ldrb	r3, [r4, #17]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d861      	bhi.n	80019ea <HAL_FDCAN_Init+0x11a>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.ProtocolException));
 8001926:	7ca3      	ldrb	r3, [r4, #18]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d864      	bhi.n	80019f6 <HAL_FDCAN_Init+0x126>
  assert_param(IS_FDCAN_NOMINAL_PRESCALER(hfdcan->Init.NominalPrescaler));
 800192c:	6963      	ldr	r3, [r4, #20]
 800192e:	3b01      	subs	r3, #1
 8001930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001934:	d265      	bcs.n	8001a02 <HAL_FDCAN_Init+0x132>
  assert_param(IS_FDCAN_NOMINAL_SJW(hfdcan->Init.NominalSyncJumpWidth));
 8001936:	69a3      	ldr	r3, [r4, #24]
 8001938:	3b01      	subs	r3, #1
 800193a:	2b7f      	cmp	r3, #127	; 0x7f
 800193c:	d867      	bhi.n	8001a0e <HAL_FDCAN_Init+0x13e>
  assert_param(IS_FDCAN_NOMINAL_TSEG1(hfdcan->Init.NominalTimeSeg1));
 800193e:	69e3      	ldr	r3, [r4, #28]
 8001940:	3b01      	subs	r3, #1
 8001942:	2bff      	cmp	r3, #255	; 0xff
 8001944:	d869      	bhi.n	8001a1a <HAL_FDCAN_Init+0x14a>
  assert_param(IS_FDCAN_NOMINAL_TSEG2(hfdcan->Init.NominalTimeSeg2));
 8001946:	6a23      	ldr	r3, [r4, #32]
 8001948:	3b01      	subs	r3, #1
 800194a:	2b7f      	cmp	r3, #127	; 0x7f
 800194c:	d86b      	bhi.n	8001a26 <HAL_FDCAN_Init+0x156>
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800194e:	68a3      	ldr	r3, [r4, #8]
 8001950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001954:	d06d      	beq.n	8001a32 <HAL_FDCAN_Init+0x162>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.StdFiltersNbr, SRAMCAN_FLS_NBR));
 8001956:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001958:	2b1c      	cmp	r3, #28
 800195a:	f200 8092 	bhi.w	8001a82 <HAL_FDCAN_Init+0x1b2>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.ExtFiltersNbr, SRAMCAN_FLE_NBR));
 800195e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001960:	2b08      	cmp	r3, #8
 8001962:	f200 8094 	bhi.w	8001a8e <HAL_FDCAN_Init+0x1be>
  assert_param(IS_FDCAN_TX_FIFO_QUEUE_MODE(hfdcan->Init.TxFifoQueueMode));
 8001966:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001968:	b11b      	cbz	r3, 8001972 <HAL_FDCAN_Init+0xa2>
 800196a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800196e:	f040 8094 	bne.w	8001a9a <HAL_FDCAN_Init+0x1ca>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001972:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8095 	beq.w	8001aa6 <HAL_FDCAN_Init+0x1d6>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800197c:	6822      	ldr	r2, [r4, #0]
 800197e:	6993      	ldr	r3, [r2, #24]
 8001980:	f023 0310 	bic.w	r3, r3, #16
 8001984:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8001986:	f7ff fc07 	bl	8001198 <HAL_GetTick>
 800198a:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	699a      	ldr	r2, [r3, #24]
 8001990:	f012 0f08 	tst.w	r2, #8
 8001994:	f000 808d 	beq.w	8001ab2 <HAL_FDCAN_Init+0x1e2>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001998:	f7ff fbfe 	bl	8001198 <HAL_GetTick>
 800199c:	1b40      	subs	r0, r0, r5
 800199e:	280a      	cmp	r0, #10
 80019a0:	d9f4      	bls.n	800198c <HAL_FDCAN_Init+0xbc>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80019a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80019aa:	2303      	movs	r3, #3
 80019ac:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80019b0:	2001      	movs	r0, #1
}
 80019b2:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_FDCAN_CKDIV(hfdcan->Init.ClockDivider));
 80019b4:	6863      	ldr	r3, [r4, #4]
 80019b6:	2b0f      	cmp	r3, #15
 80019b8:	d9a4      	bls.n	8001904 <HAL_FDCAN_Init+0x34>
 80019ba:	f240 112d 	movw	r1, #301	; 0x12d
 80019be:	484b      	ldr	r0, [pc, #300]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 80019c0:	f7ff f953 	bl	8000c6a <assert_failed>
 80019c4:	e79e      	b.n	8001904 <HAL_FDCAN_Init+0x34>
  assert_param(IS_FDCAN_FRAME_FORMAT(hfdcan->Init.FrameFormat));
 80019c6:	f240 112f 	movw	r1, #303	; 0x12f
 80019ca:	4848      	ldr	r0, [pc, #288]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 80019cc:	f7ff f94d 	bl	8000c6a <assert_failed>
 80019d0:	e7a0      	b.n	8001914 <HAL_FDCAN_Init+0x44>
  assert_param(IS_FDCAN_MODE(hfdcan->Init.Mode));
 80019d2:	f44f 7198 	mov.w	r1, #304	; 0x130
 80019d6:	4845      	ldr	r0, [pc, #276]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 80019d8:	f7ff f947 	bl	8000c6a <assert_failed>
 80019dc:	e79d      	b.n	800191a <HAL_FDCAN_Init+0x4a>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.AutoRetransmission));
 80019de:	f240 1131 	movw	r1, #305	; 0x131
 80019e2:	4842      	ldr	r0, [pc, #264]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 80019e4:	f7ff f941 	bl	8000c6a <assert_failed>
 80019e8:	e79a      	b.n	8001920 <HAL_FDCAN_Init+0x50>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.TransmitPause));
 80019ea:	f44f 7199 	mov.w	r1, #306	; 0x132
 80019ee:	483f      	ldr	r0, [pc, #252]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 80019f0:	f7ff f93b 	bl	8000c6a <assert_failed>
 80019f4:	e797      	b.n	8001926 <HAL_FDCAN_Init+0x56>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.ProtocolException));
 80019f6:	f240 1133 	movw	r1, #307	; 0x133
 80019fa:	483c      	ldr	r0, [pc, #240]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 80019fc:	f7ff f935 	bl	8000c6a <assert_failed>
 8001a00:	e794      	b.n	800192c <HAL_FDCAN_Init+0x5c>
  assert_param(IS_FDCAN_NOMINAL_PRESCALER(hfdcan->Init.NominalPrescaler));
 8001a02:	f44f 719a 	mov.w	r1, #308	; 0x134
 8001a06:	4839      	ldr	r0, [pc, #228]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 8001a08:	f7ff f92f 	bl	8000c6a <assert_failed>
 8001a0c:	e793      	b.n	8001936 <HAL_FDCAN_Init+0x66>
  assert_param(IS_FDCAN_NOMINAL_SJW(hfdcan->Init.NominalSyncJumpWidth));
 8001a0e:	f240 1135 	movw	r1, #309	; 0x135
 8001a12:	4836      	ldr	r0, [pc, #216]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 8001a14:	f7ff f929 	bl	8000c6a <assert_failed>
 8001a18:	e791      	b.n	800193e <HAL_FDCAN_Init+0x6e>
  assert_param(IS_FDCAN_NOMINAL_TSEG1(hfdcan->Init.NominalTimeSeg1));
 8001a1a:	f44f 719b 	mov.w	r1, #310	; 0x136
 8001a1e:	4833      	ldr	r0, [pc, #204]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 8001a20:	f7ff f923 	bl	8000c6a <assert_failed>
 8001a24:	e78f      	b.n	8001946 <HAL_FDCAN_Init+0x76>
  assert_param(IS_FDCAN_NOMINAL_TSEG2(hfdcan->Init.NominalTimeSeg2));
 8001a26:	f240 1137 	movw	r1, #311	; 0x137
 8001a2a:	4830      	ldr	r0, [pc, #192]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 8001a2c:	f7ff f91d 	bl	8000c6a <assert_failed>
 8001a30:	e78d      	b.n	800194e <HAL_FDCAN_Init+0x7e>
    assert_param(IS_FDCAN_DATA_PRESCALER(hfdcan->Init.DataPrescaler));
 8001a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a34:	3b01      	subs	r3, #1
 8001a36:	2b1f      	cmp	r3, #31
 8001a38:	d811      	bhi.n	8001a5e <HAL_FDCAN_Init+0x18e>
    assert_param(IS_FDCAN_DATA_SJW(hfdcan->Init.DataSyncJumpWidth));
 8001a3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	2b0f      	cmp	r3, #15
 8001a40:	d813      	bhi.n	8001a6a <HAL_FDCAN_Init+0x19a>
    assert_param(IS_FDCAN_DATA_TSEG1(hfdcan->Init.DataTimeSeg1));
 8001a42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a44:	3b01      	subs	r3, #1
 8001a46:	2b1f      	cmp	r3, #31
 8001a48:	d815      	bhi.n	8001a76 <HAL_FDCAN_Init+0x1a6>
    assert_param(IS_FDCAN_DATA_TSEG2(hfdcan->Init.DataTimeSeg2));
 8001a4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	d981      	bls.n	8001956 <HAL_FDCAN_Init+0x86>
 8001a52:	f240 113d 	movw	r1, #317	; 0x13d
 8001a56:	4825      	ldr	r0, [pc, #148]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 8001a58:	f7ff f907 	bl	8000c6a <assert_failed>
 8001a5c:	e77b      	b.n	8001956 <HAL_FDCAN_Init+0x86>
    assert_param(IS_FDCAN_DATA_PRESCALER(hfdcan->Init.DataPrescaler));
 8001a5e:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8001a62:	4822      	ldr	r0, [pc, #136]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 8001a64:	f7ff f901 	bl	8000c6a <assert_failed>
 8001a68:	e7e7      	b.n	8001a3a <HAL_FDCAN_Init+0x16a>
    assert_param(IS_FDCAN_DATA_SJW(hfdcan->Init.DataSyncJumpWidth));
 8001a6a:	f240 113b 	movw	r1, #315	; 0x13b
 8001a6e:	481f      	ldr	r0, [pc, #124]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 8001a70:	f7ff f8fb 	bl	8000c6a <assert_failed>
 8001a74:	e7e5      	b.n	8001a42 <HAL_FDCAN_Init+0x172>
    assert_param(IS_FDCAN_DATA_TSEG1(hfdcan->Init.DataTimeSeg1));
 8001a76:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8001a7a:	481c      	ldr	r0, [pc, #112]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 8001a7c:	f7ff f8f5 	bl	8000c6a <assert_failed>
 8001a80:	e7e3      	b.n	8001a4a <HAL_FDCAN_Init+0x17a>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.StdFiltersNbr, SRAMCAN_FLS_NBR));
 8001a82:	f240 113f 	movw	r1, #319	; 0x13f
 8001a86:	4819      	ldr	r0, [pc, #100]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 8001a88:	f7ff f8ef 	bl	8000c6a <assert_failed>
 8001a8c:	e767      	b.n	800195e <HAL_FDCAN_Init+0x8e>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.ExtFiltersNbr, SRAMCAN_FLE_NBR));
 8001a8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001a92:	4816      	ldr	r0, [pc, #88]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 8001a94:	f7ff f8e9 	bl	8000c6a <assert_failed>
 8001a98:	e765      	b.n	8001966 <HAL_FDCAN_Init+0x96>
  assert_param(IS_FDCAN_TX_FIFO_QUEUE_MODE(hfdcan->Init.TxFifoQueueMode));
 8001a9a:	f240 1141 	movw	r1, #321	; 0x141
 8001a9e:	4813      	ldr	r0, [pc, #76]	; (8001aec <HAL_FDCAN_Init+0x21c>)
 8001aa0:	f7ff f8e3 	bl	8000c6a <assert_failed>
 8001aa4:	e765      	b.n	8001972 <HAL_FDCAN_Init+0xa2>
    hfdcan->Lock = HAL_UNLOCKED;
 8001aa6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7fe fed8 	bl	8000860 <HAL_FDCAN_MspInit>
 8001ab0:	e764      	b.n	800197c <HAL_FDCAN_Init+0xac>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001ab2:	699a      	ldr	r2, [r3, #24]
 8001ab4:	f042 0201 	orr.w	r2, r2, #1
 8001ab8:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8001aba:	f7ff fb6d 	bl	8001198 <HAL_GetTick>
 8001abe:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	699a      	ldr	r2, [r3, #24]
 8001ac4:	f012 0f01 	tst.w	r2, #1
 8001ac8:	d112      	bne.n	8001af0 <HAL_FDCAN_Init+0x220>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001aca:	f7ff fb65 	bl	8001198 <HAL_GetTick>
 8001ace:	1b40      	subs	r0, r0, r5
 8001ad0:	280a      	cmp	r0, #10
 8001ad2:	d9f5      	bls.n	8001ac0 <HAL_FDCAN_Init+0x1f0>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001ad4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001adc:	2303      	movs	r3, #3
 8001ade:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	e765      	b.n	80019b2 <HAL_FDCAN_Init+0xe2>
 8001ae6:	bf00      	nop
 8001ae8:	40006400 	.word	0x40006400
 8001aec:	08012dbc 	.word	0x08012dbc
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	f042 0202 	orr.w	r2, r2, #2
 8001af6:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8001af8:	6822      	ldr	r2, [r4, #0]
 8001afa:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <HAL_FDCAN_Init+0x36c>)
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d042      	beq.n	8001b86 <HAL_FDCAN_Init+0x2b6>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001b00:	7c23      	ldrb	r3, [r4, #16]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d045      	beq.n	8001b92 <HAL_FDCAN_Init+0x2c2>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	6993      	ldr	r3, [r2, #24]
 8001b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b0e:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001b10:	7c63      	ldrb	r3, [r4, #17]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d043      	beq.n	8001b9e <HAL_FDCAN_Init+0x2ce>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b16:	6822      	ldr	r2, [r4, #0]
 8001b18:	6993      	ldr	r3, [r2, #24]
 8001b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b1e:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001b20:	7ca3      	ldrb	r3, [r4, #18]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d041      	beq.n	8001baa <HAL_FDCAN_Init+0x2da>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b26:	6822      	ldr	r2, [r4, #0]
 8001b28:	6993      	ldr	r3, [r2, #24]
 8001b2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b2e:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001b30:	6822      	ldr	r2, [r4, #0]
 8001b32:	6993      	ldr	r3, [r2, #24]
 8001b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b38:	68a1      	ldr	r1, [r4, #8]
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001b3e:	6822      	ldr	r2, [r4, #0]
 8001b40:	6993      	ldr	r3, [r2, #24]
 8001b42:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8001b46:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b48:	6822      	ldr	r2, [r4, #0]
 8001b4a:	6913      	ldr	r3, [r2, #16]
 8001b4c:	f023 0310 	bic.w	r3, r3, #16
 8001b50:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001b52:	68e3      	ldr	r3, [r4, #12]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d02e      	beq.n	8001bb6 <HAL_FDCAN_Init+0x2e6>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d031      	beq.n	8001bc0 <HAL_FDCAN_Init+0x2f0>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d054      	beq.n	8001c0a <HAL_FDCAN_Init+0x33a>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001b60:	6822      	ldr	r2, [r4, #0]
 8001b62:	6993      	ldr	r3, [r2, #24]
 8001b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b68:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b6a:	6822      	ldr	r2, [r4, #0]
 8001b6c:	6913      	ldr	r3, [r2, #16]
 8001b6e:	f043 0310 	orr.w	r3, r3, #16
 8001b72:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001b74:	68e3      	ldr	r3, [r4, #12]
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d122      	bne.n	8001bc0 <HAL_FDCAN_Init+0x2f0>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b7a:	6822      	ldr	r2, [r4, #0]
 8001b7c:	6993      	ldr	r3, [r2, #24]
 8001b7e:	f043 0320 	orr.w	r3, r3, #32
 8001b82:	6193      	str	r3, [r2, #24]
 8001b84:	e01c      	b.n	8001bc0 <HAL_FDCAN_Init+0x2f0>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001b86:	6862      	ldr	r2, [r4, #4]
 8001b88:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001b8c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8001b90:	e7b6      	b.n	8001b00 <HAL_FDCAN_Init+0x230>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b92:	6822      	ldr	r2, [r4, #0]
 8001b94:	6993      	ldr	r3, [r2, #24]
 8001b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	e7b8      	b.n	8001b10 <HAL_FDCAN_Init+0x240>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b9e:	6822      	ldr	r2, [r4, #0]
 8001ba0:	6993      	ldr	r3, [r2, #24]
 8001ba2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	e7ba      	b.n	8001b20 <HAL_FDCAN_Init+0x250>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001baa:	6822      	ldr	r2, [r4, #0]
 8001bac:	6993      	ldr	r3, [r2, #24]
 8001bae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	e7bc      	b.n	8001b30 <HAL_FDCAN_Init+0x260>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001bb6:	6822      	ldr	r2, [r4, #0]
 8001bb8:	6993      	ldr	r3, [r2, #24]
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bc0:	69a3      	ldr	r3, [r4, #24]
 8001bc2:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001bc4:	69e3      	ldr	r3, [r4, #28]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bca:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001bce:	6a22      	ldr	r2, [r4, #32]
 8001bd0:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001bd2:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001bd4:	6962      	ldr	r2, [r4, #20]
 8001bd6:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bd8:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bde:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001be0:	68a3      	ldr	r3, [r4, #8]
 8001be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001be6:	d016      	beq.n	8001c16 <HAL_FDCAN_Init+0x346>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001be8:	6822      	ldr	r2, [r4, #0]
 8001bea:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001bee:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7ff fde2 	bl	80017c0 <FDCAN_CalcultateRamBlockAddresses>
  hfdcan->LatestTxFifoQRequest = 0U;
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c00:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 8001c08:	e6d3      	b.n	80019b2 <HAL_FDCAN_Init+0xe2>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c0a:	6822      	ldr	r2, [r4, #0]
 8001c0c:	6993      	ldr	r3, [r2, #24]
 8001c0e:	f043 0320 	orr.w	r3, r3, #32
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	e7d4      	b.n	8001bc0 <HAL_FDCAN_Init+0x2f0>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c18:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c1c:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c24:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c26:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001c2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c2c:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c2e:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c34:	60cb      	str	r3, [r1, #12]
 8001c36:	e7d7      	b.n	8001be8 <HAL_FDCAN_Init+0x318>
    return HAL_ERROR;
 8001c38:	2001      	movs	r0, #1
}
 8001c3a:	4770      	bx	lr
 8001c3c:	40006400 	.word	0x40006400

08001c40 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c40:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d005      	beq.n	8001c56 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c4a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8001c52:	2001      	movs	r0, #1
}
 8001c54:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001c56:	2302      	movs	r3, #2
 8001c58:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c5c:	6802      	ldr	r2, [r0, #0]
 8001c5e:	6993      	ldr	r3, [r2, #24]
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_OK;
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4770      	bx	lr

08001c6e <HAL_FDCAN_Stop>:
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001c6e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d139      	bne.n	8001cec <HAL_FDCAN_Stop+0x7e>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c78:	6802      	ldr	r2, [r0, #0]
 8001c7a:	6993      	ldr	r3, [r2, #24]
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6193      	str	r3, [r2, #24]
  uint32_t Counter = 0U;
 8001c82:	2300      	movs	r3, #0
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001c84:	6802      	ldr	r2, [r0, #0]
 8001c86:	6991      	ldr	r1, [r2, #24]
 8001c88:	f011 0f01 	tst.w	r1, #1
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_FDCAN_Stop+0x3a>
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001c8e:	2b0a      	cmp	r3, #10
 8001c90:	d801      	bhi.n	8001c96 <HAL_FDCAN_Stop+0x28>
      Counter++;
 8001c92:	3301      	adds	r3, #1
 8001c94:	e7f6      	b.n	8001c84 <HAL_FDCAN_Stop+0x16>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001c96:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6603      	str	r3, [r0, #96]	; 0x60
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001ca8:	6993      	ldr	r3, [r2, #24]
 8001caa:	f023 0310 	bic.w	r3, r3, #16
 8001cae:	6193      	str	r3, [r2, #24]
    Counter = 0U;
 8001cb0:	2300      	movs	r3, #0
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001cb2:	6802      	ldr	r2, [r0, #0]
 8001cb4:	6991      	ldr	r1, [r2, #24]
 8001cb6:	f011 0f08 	tst.w	r1, #8
 8001cba:	d00c      	beq.n	8001cd6 <HAL_FDCAN_Stop+0x68>
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001cbc:	2b0a      	cmp	r3, #10
 8001cbe:	d801      	bhi.n	8001cc4 <HAL_FDCAN_Stop+0x56>
      Counter++;
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	e7f6      	b.n	8001cb2 <HAL_FDCAN_Stop+0x44>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001cc4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6603      	str	r3, [r0, #96]	; 0x60
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	4770      	bx	lr
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001cd6:	6993      	ldr	r3, [r2, #24]
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	6193      	str	r3, [r2, #24]
    hfdcan->LatestTxFifoQRequest = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	6583      	str	r3, [r0, #88]	; 0x58
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    return HAL_OK;
 8001ce8:	4618      	mov	r0, r3
 8001cea:	4770      	bx	lr
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cec:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001cee:	f043 0308 	orr.w	r3, r3, #8
 8001cf2:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8001cf4:	2001      	movs	r0, #1
}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfa:	4605      	mov	r5, r0
 8001cfc:	460c      	mov	r4, r1
 8001cfe:	4616      	mov	r6, r2
  assert_param(IS_FDCAN_ID_TYPE(pTxHeader->IdType));
 8001d00:	684b      	ldr	r3, [r1, #4]
 8001d02:	b113      	cbz	r3, 8001d0a <HAL_FDCAN_AddMessageToTxFifoQ+0x12>
 8001d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d08:	d162      	bne.n	8001dd0 <HAL_FDCAN_AddMessageToTxFifoQ+0xd8>
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001d0a:	6863      	ldr	r3, [r4, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d16b      	bne.n	8001de8 <HAL_FDCAN_AddMessageToTxFifoQ+0xf0>
    assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->Identifier, 0x7FFU));
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d16:	d261      	bcs.n	8001ddc <HAL_FDCAN_AddMessageToTxFifoQ+0xe4>
  assert_param(IS_FDCAN_FRAME_TYPE(pTxHeader->TxFrameType));
 8001d18:	68a3      	ldr	r3, [r4, #8]
 8001d1a:	b113      	cbz	r3, 8001d22 <HAL_FDCAN_AddMessageToTxFifoQ+0x2a>
 8001d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d20:	d16c      	bne.n	8001dfc <HAL_FDCAN_AddMessageToTxFifoQ+0x104>
  assert_param(IS_FDCAN_DLC(pTxHeader->DataLength));
 8001d22:	68e3      	ldr	r3, [r4, #12]
 8001d24:	b363      	cbz	r3, 8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2a:	d029      	beq.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d30:	d026      	beq.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001d36:	d023      	beq.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d3c:	d020      	beq.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d42:	d01d      	beq.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d44:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001d48:	d01a      	beq.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d4a:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8001d4e:	d017      	beq.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d54:	d014      	beq.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d56:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8001d5a:	d011      	beq.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d5c:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8001d60:	d00e      	beq.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d62:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8001d66:	d00b      	beq.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001d6c:	d008      	beq.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d6e:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8001d72:	d005      	beq.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d74:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d78:	d002      	beq.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d7a:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8001d7e:	d143      	bne.n	8001e08 <HAL_FDCAN_AddMessageToTxFifoQ+0x110>
  assert_param(IS_FDCAN_ESI(pTxHeader->ErrorStateIndicator));
 8001d80:	6923      	ldr	r3, [r4, #16]
 8001d82:	b113      	cbz	r3, 8001d8a <HAL_FDCAN_AddMessageToTxFifoQ+0x92>
 8001d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d88:	d144      	bne.n	8001e14 <HAL_FDCAN_AddMessageToTxFifoQ+0x11c>
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
 8001d8a:	6963      	ldr	r3, [r4, #20]
 8001d8c:	b113      	cbz	r3, 8001d94 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
 8001d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d92:	d145      	bne.n	8001e20 <HAL_FDCAN_AddMessageToTxFifoQ+0x128>
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
 8001d94:	69a3      	ldr	r3, [r4, #24]
 8001d96:	b113      	cbz	r3, 8001d9e <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
 8001d98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d9c:	d146      	bne.n	8001e2c <HAL_FDCAN_AddMessageToTxFifoQ+0x134>
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
 8001d9e:	69e3      	ldr	r3, [r4, #28]
 8001da0:	b113      	cbz	r3, 8001da8 <HAL_FDCAN_AddMessageToTxFifoQ+0xb0>
 8001da2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001da6:	d147      	bne.n	8001e38 <HAL_FDCAN_AddMessageToTxFifoQ+0x140>
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));
 8001da8:	6a23      	ldr	r3, [r4, #32]
 8001daa:	2bff      	cmp	r3, #255	; 0xff
 8001dac:	d84a      	bhi.n	8001e44 <HAL_FDCAN_AddMessageToTxFifoQ+0x14c>
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001dae:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d15d      	bne.n	8001e74 <HAL_FDCAN_AddMessageToTxFifoQ+0x17c>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001db8:	682b      	ldr	r3, [r5, #0]
 8001dba:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001dbe:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8001dc2:	d045      	beq.n	8001e50 <HAL_FDCAN_AddMessageToTxFifoQ+0x158>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001dc4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dca:	662b      	str	r3, [r5, #96]	; 0x60
      return HAL_ERROR;
 8001dcc:	2001      	movs	r0, #1
 8001dce:	e056      	b.n	8001e7e <HAL_FDCAN_AddMessageToTxFifoQ+0x186>
  assert_param(IS_FDCAN_ID_TYPE(pTxHeader->IdType));
 8001dd0:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001dd4:	482a      	ldr	r0, [pc, #168]	; (8001e80 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001dd6:	f7fe ff48 	bl	8000c6a <assert_failed>
 8001dda:	e796      	b.n	8001d0a <HAL_FDCAN_AddMessageToTxFifoQ+0x12>
    assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->Identifier, 0x7FFU));
 8001ddc:	f640 0143 	movw	r1, #2115	; 0x843
 8001de0:	4827      	ldr	r0, [pc, #156]	; (8001e80 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001de2:	f7fe ff42 	bl	8000c6a <assert_failed>
 8001de6:	e797      	b.n	8001d18 <HAL_FDCAN_AddMessageToTxFifoQ+0x20>
    assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->Identifier, 0x1FFFFFFFU));
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dee:	d393      	bcc.n	8001d18 <HAL_FDCAN_AddMessageToTxFifoQ+0x20>
 8001df0:	f640 0147 	movw	r1, #2119	; 0x847
 8001df4:	4822      	ldr	r0, [pc, #136]	; (8001e80 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001df6:	f7fe ff38 	bl	8000c6a <assert_failed>
 8001dfa:	e78d      	b.n	8001d18 <HAL_FDCAN_AddMessageToTxFifoQ+0x20>
  assert_param(IS_FDCAN_FRAME_TYPE(pTxHeader->TxFrameType));
 8001dfc:	f640 0149 	movw	r1, #2121	; 0x849
 8001e00:	481f      	ldr	r0, [pc, #124]	; (8001e80 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e02:	f7fe ff32 	bl	8000c6a <assert_failed>
 8001e06:	e78c      	b.n	8001d22 <HAL_FDCAN_AddMessageToTxFifoQ+0x2a>
  assert_param(IS_FDCAN_DLC(pTxHeader->DataLength));
 8001e08:	f640 014a 	movw	r1, #2122	; 0x84a
 8001e0c:	481c      	ldr	r0, [pc, #112]	; (8001e80 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e0e:	f7fe ff2c 	bl	8000c6a <assert_failed>
 8001e12:	e7b5      	b.n	8001d80 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
  assert_param(IS_FDCAN_ESI(pTxHeader->ErrorStateIndicator));
 8001e14:	f640 014b 	movw	r1, #2123	; 0x84b
 8001e18:	4819      	ldr	r0, [pc, #100]	; (8001e80 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e1a:	f7fe ff26 	bl	8000c6a <assert_failed>
 8001e1e:	e7b4      	b.n	8001d8a <HAL_FDCAN_AddMessageToTxFifoQ+0x92>
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
 8001e20:	f640 014c 	movw	r1, #2124	; 0x84c
 8001e24:	4816      	ldr	r0, [pc, #88]	; (8001e80 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e26:	f7fe ff20 	bl	8000c6a <assert_failed>
 8001e2a:	e7b3      	b.n	8001d94 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
 8001e2c:	f640 014d 	movw	r1, #2125	; 0x84d
 8001e30:	4813      	ldr	r0, [pc, #76]	; (8001e80 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e32:	f7fe ff1a 	bl	8000c6a <assert_failed>
 8001e36:	e7b2      	b.n	8001d9e <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
 8001e38:	f640 014e 	movw	r1, #2126	; 0x84e
 8001e3c:	4810      	ldr	r0, [pc, #64]	; (8001e80 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e3e:	f7fe ff14 	bl	8000c6a <assert_failed>
 8001e42:	e7b1      	b.n	8001da8 <HAL_FDCAN_AddMessageToTxFifoQ+0xb0>
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));
 8001e44:	f640 014f 	movw	r1, #2127	; 0x84f
 8001e48:	480d      	ldr	r0, [pc, #52]	; (8001e80 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e4a:	f7fe ff0e 	bl	8000c6a <assert_failed>
 8001e4e:	e7ae      	b.n	8001dae <HAL_FDCAN_AddMessageToTxFifoQ+0xb6>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001e50:	f8d3 70c4 	ldr.w	r7, [r3, #196]	; 0xc4
 8001e54:	f3c7 4701 	ubfx	r7, r7, #16, #2
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001e58:	463b      	mov	r3, r7
 8001e5a:	4632      	mov	r2, r6
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	4628      	mov	r0, r5
 8001e60:	f7ff fcf4 	bl	800184c <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001e64:	682a      	ldr	r2, [r5, #0]
 8001e66:	2301      	movs	r3, #1
 8001e68:	40bb      	lsls	r3, r7
 8001e6a:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001e6e:	65ab      	str	r3, [r5, #88]	; 0x58
    return HAL_OK;
 8001e70:	2000      	movs	r0, #0
 8001e72:	e004      	b.n	8001e7e <HAL_FDCAN_AddMessageToTxFifoQ+0x186>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001e74:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001e76:	f043 0308 	orr.w	r3, r3, #8
 8001e7a:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_ERROR;
 8001e7c:	2001      	movs	r0, #1
}
 8001e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e80:	08012dbc 	.word	0x08012dbc

08001e84 <HAL_FDCAN_GetRxMessage>:
{
 8001e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e88:	4605      	mov	r5, r0
 8001e8a:	460f      	mov	r7, r1
 8001e8c:	4614      	mov	r4, r2
 8001e8e:	461e      	mov	r6, r3
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001e90:	f890 805c 	ldrb.w	r8, [r0, #92]	; 0x5c
 8001e94:	fa5f f888 	uxtb.w	r8, r8
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));
 8001e98:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d810      	bhi.n	8001ec2 <HAL_FDCAN_GetRxMessage+0x3e>
  if (state == HAL_FDCAN_STATE_BUSY)
 8001ea0:	f1b8 0f02 	cmp.w	r8, #2
 8001ea4:	d177      	bne.n	8001f96 <HAL_FDCAN_GetRxMessage+0x112>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001ea6:	2f40      	cmp	r7, #64	; 0x40
 8001ea8:	d011      	beq.n	8001ece <HAL_FDCAN_GetRxMessage+0x4a>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001eaa:	682b      	ldr	r3, [r5, #0]
 8001eac:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001eb0:	f012 0f0f 	tst.w	r2, #15
 8001eb4:	d121      	bne.n	8001efa <HAL_FDCAN_GetRxMessage+0x76>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001eb6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebc:	662b      	str	r3, [r5, #96]	; 0x60
        return HAL_ERROR;
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	e06e      	b.n	8001fa0 <HAL_FDCAN_GetRxMessage+0x11c>
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));
 8001ec2:	f640 01b6 	movw	r1, #2230	; 0x8b6
 8001ec6:	4837      	ldr	r0, [pc, #220]	; (8001fa4 <HAL_FDCAN_GetRxMessage+0x120>)
 8001ec8:	f7fe fecf 	bl	8000c6a <assert_failed>
 8001ecc:	e7e8      	b.n	8001ea0 <HAL_FDCAN_GetRxMessage+0x1c>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001ece:	682b      	ldr	r3, [r5, #0]
 8001ed0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001ed4:	f012 0f0f 	tst.w	r2, #15
 8001ed8:	d105      	bne.n	8001ee6 <HAL_FDCAN_GetRxMessage+0x62>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001eda:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee0:	662b      	str	r3, [r5, #96]	; 0x60
        return HAL_ERROR;
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	e05c      	b.n	8001fa0 <HAL_FDCAN_GetRxMessage+0x11c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001ee6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001eea:	f3c0 2001 	ubfx	r0, r0, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001eee:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8001ef0:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8001ef4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001ef8:	e008      	b.n	8001f0c <HAL_FDCAN_GetRxMessage+0x88>
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001efa:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001efe:	f3c0 2001 	ubfx	r0, r0, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001f02:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8001f04:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8001f08:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001f0c:	6813      	ldr	r3, [r2, #0]
 8001f0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f12:	6063      	str	r3, [r4, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001f14:	bb23      	cbnz	r3, 8001f60 <HAL_FDCAN_GetRxMessage+0xdc>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001f16:	6813      	ldr	r3, [r2, #0]
 8001f18:	f3c3 438a 	ubfx	r3, r3, #18, #11
 8001f1c:	6023      	str	r3, [r4, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001f1e:	6813      	ldr	r3, [r2, #0]
 8001f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f24:	60a3      	str	r3, [r4, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001f26:	6813      	ldr	r3, [r2, #0]
 8001f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f2c:	6123      	str	r3, [r4, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001f2e:	8893      	ldrh	r3, [r2, #4]
 8001f30:	61e3      	str	r3, [r4, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001f32:	6853      	ldr	r3, [r2, #4]
 8001f34:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f38:	60e3      	str	r3, [r4, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001f3a:	6853      	ldr	r3, [r2, #4]
 8001f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f40:	6163      	str	r3, [r4, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001f42:	6853      	ldr	r3, [r2, #4]
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f48:	61a3      	str	r3, [r4, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001f4a:	79d3      	ldrb	r3, [r2, #7]
 8001f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f50:	6223      	str	r3, [r4, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001f52:	6853      	ldr	r3, [r2, #4]
 8001f54:	0fdb      	lsrs	r3, r3, #31
 8001f56:	6263      	str	r3, [r4, #36]	; 0x24
    RxAddress++;
 8001f58:	3208      	adds	r2, #8
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001f5a:	f04f 0c00 	mov.w	ip, #0
 8001f5e:	e00a      	b.n	8001f76 <HAL_FDCAN_GetRxMessage+0xf2>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001f60:	6813      	ldr	r3, [r2, #0]
 8001f62:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8001f66:	6023      	str	r3, [r4, #0]
 8001f68:	e7d9      	b.n	8001f1e <HAL_FDCAN_GetRxMessage+0x9a>
      pRxData[ByteCounter] = pData[ByteCounter];
 8001f6a:	f812 300c 	ldrb.w	r3, [r2, ip]
 8001f6e:	f806 300c 	strb.w	r3, [r6, ip]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001f72:	f10c 0c01 	add.w	ip, ip, #1
 8001f76:	89e3      	ldrh	r3, [r4, #14]
 8001f78:	490b      	ldr	r1, [pc, #44]	; (8001fa8 <HAL_FDCAN_GetRxMessage+0x124>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	4563      	cmp	r3, ip
 8001f7e:	d8f4      	bhi.n	8001f6a <HAL_FDCAN_GetRxMessage+0xe6>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001f80:	2f40      	cmp	r7, #64	; 0x40
 8001f82:	d004      	beq.n	8001f8e <HAL_FDCAN_GetRxMessage+0x10a>
      hfdcan->Instance->RXF1A = GetIndex;
 8001f84:	682b      	ldr	r3, [r5, #0]
 8001f86:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    return HAL_OK;
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	e008      	b.n	8001fa0 <HAL_FDCAN_GetRxMessage+0x11c>
      hfdcan->Instance->RXF0A = GetIndex;
 8001f8e:	682b      	ldr	r3, [r5, #0]
 8001f90:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 8001f94:	e7f9      	b.n	8001f8a <HAL_FDCAN_GetRxMessage+0x106>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001f96:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001f98:	f043 0308 	orr.w	r3, r3, #8
 8001f9c:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_ERROR;
 8001f9e:	2001      	movs	r0, #1
}
 8001fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fa4:	08012dbc 	.word	0x08012dbc
 8001fa8:	08012df8 	.word	0x08012df8

08001fac <HAL_FDCAN_ActivateNotification>:
{
 8001fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fae:	4606      	mov	r6, r0
 8001fb0:	460c      	mov	r4, r1
 8001fb2:	4617      	mov	r7, r2
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001fb4:	f890 505c 	ldrb.w	r5, [r0, #92]	; 0x5c
 8001fb8:	b2ed      	uxtb	r5, r5
  assert_param(IS_FDCAN_IT(ActiveITs));
 8001fba:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8001fbe:	d10f      	bne.n	8001fe0 <HAL_FDCAN_ActivateNotification+0x34>
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
 8001fc0:	f414 7fc0 	tst.w	r4, #384	; 0x180
 8001fc4:	d002      	beq.n	8001fcc <HAL_FDCAN_ActivateNotification+0x20>
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
 8001fc6:	1e7b      	subs	r3, r7, #1
 8001fc8:	2b06      	cmp	r3, #6
 8001fca:	d80f      	bhi.n	8001fec <HAL_FDCAN_ActivateNotification+0x40>
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001fcc:	3d01      	subs	r5, #1
 8001fce:	b2ed      	uxtb	r5, r5
 8001fd0:	2d01      	cmp	r5, #1
 8001fd2:	d911      	bls.n	8001ff8 <HAL_FDCAN_ActivateNotification+0x4c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001fd4:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	6633      	str	r3, [r6, #96]	; 0x60
    return HAL_ERROR;
 8001fdc:	2001      	movs	r0, #1
}
 8001fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FDCAN_IT(ActiveITs));
 8001fe0:	f640 2189 	movw	r1, #2697	; 0xa89
 8001fe4:	483f      	ldr	r0, [pc, #252]	; (80020e4 <HAL_FDCAN_ActivateNotification+0x138>)
 8001fe6:	f7fe fe40 	bl	8000c6a <assert_failed>
 8001fea:	e7e9      	b.n	8001fc0 <HAL_FDCAN_ActivateNotification+0x14>
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
 8001fec:	f640 218c 	movw	r1, #2700	; 0xa8c
 8001ff0:	483c      	ldr	r0, [pc, #240]	; (80020e4 <HAL_FDCAN_ActivateNotification+0x138>)
 8001ff2:	f7fe fe3a 	bl	8000c6a <assert_failed>
 8001ff6:	e7e9      	b.n	8001fcc <HAL_FDCAN_ActivateNotification+0x20>
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001ff8:	6832      	ldr	r2, [r6, #0]
 8001ffa:	6d93      	ldr	r3, [r2, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001ffc:	f014 0007 	ands.w	r0, r4, #7
 8002000:	d002      	beq.n	8002008 <HAL_FDCAN_ActivateNotification+0x5c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002002:	f013 0f01 	tst.w	r3, #1
 8002006:	d023      	beq.n	8002050 <HAL_FDCAN_ActivateNotification+0xa4>
 8002008:	f014 0f38 	tst.w	r4, #56	; 0x38
 800200c:	d002      	beq.n	8002014 <HAL_FDCAN_ActivateNotification+0x68>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800200e:	f013 0f02 	tst.w	r3, #2
 8002012:	d01d      	beq.n	8002050 <HAL_FDCAN_ActivateNotification+0xa4>
 8002014:	f414 7fe0 	tst.w	r4, #448	; 0x1c0
 8002018:	d002      	beq.n	8002020 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800201a:	f013 0f04 	tst.w	r3, #4
 800201e:	d017      	beq.n	8002050 <HAL_FDCAN_ActivateNotification+0xa4>
 8002020:	f414 5ff0 	tst.w	r4, #7680	; 0x1e00
 8002024:	d002      	beq.n	800202c <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002026:	f013 0f08 	tst.w	r3, #8
 800202a:	d011      	beq.n	8002050 <HAL_FDCAN_ActivateNotification+0xa4>
 800202c:	f414 4f60 	tst.w	r4, #57344	; 0xe000
 8002030:	d002      	beq.n	8002038 <HAL_FDCAN_ActivateNotification+0x8c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002032:	f013 0f10 	tst.w	r3, #16
 8002036:	d00b      	beq.n	8002050 <HAL_FDCAN_ActivateNotification+0xa4>
 8002038:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800203c:	d002      	beq.n	8002044 <HAL_FDCAN_ActivateNotification+0x98>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800203e:	f013 0f20 	tst.w	r3, #32
 8002042:	d005      	beq.n	8002050 <HAL_FDCAN_ActivateNotification+0xa4>
 8002044:	f414 0f7c 	tst.w	r4, #16515072	; 0xfc0000
 8002048:	d006      	beq.n	8002058 <HAL_FDCAN_ActivateNotification+0xac>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800204a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800204e:	d103      	bne.n	8002058 <HAL_FDCAN_ActivateNotification+0xac>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002050:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8002052:	f041 0101 	orr.w	r1, r1, #1
 8002056:	65d1      	str	r1, [r2, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002058:	b110      	cbz	r0, 8002060 <HAL_FDCAN_ActivateNotification+0xb4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800205a:	f013 0f01 	tst.w	r3, #1
 800205e:	d123      	bne.n	80020a8 <HAL_FDCAN_ActivateNotification+0xfc>
 8002060:	f014 0f38 	tst.w	r4, #56	; 0x38
 8002064:	d002      	beq.n	800206c <HAL_FDCAN_ActivateNotification+0xc0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002066:	f013 0f02 	tst.w	r3, #2
 800206a:	d11d      	bne.n	80020a8 <HAL_FDCAN_ActivateNotification+0xfc>
 800206c:	f414 7fe0 	tst.w	r4, #448	; 0x1c0
 8002070:	d002      	beq.n	8002078 <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002072:	f013 0f04 	tst.w	r3, #4
 8002076:	d117      	bne.n	80020a8 <HAL_FDCAN_ActivateNotification+0xfc>
 8002078:	f414 5ff0 	tst.w	r4, #7680	; 0x1e00
 800207c:	d002      	beq.n	8002084 <HAL_FDCAN_ActivateNotification+0xd8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800207e:	f013 0f08 	tst.w	r3, #8
 8002082:	d111      	bne.n	80020a8 <HAL_FDCAN_ActivateNotification+0xfc>
 8002084:	f414 4f60 	tst.w	r4, #57344	; 0xe000
 8002088:	d002      	beq.n	8002090 <HAL_FDCAN_ActivateNotification+0xe4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800208a:	f013 0f10 	tst.w	r3, #16
 800208e:	d10b      	bne.n	80020a8 <HAL_FDCAN_ActivateNotification+0xfc>
 8002090:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002094:	d002      	beq.n	800209c <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002096:	f013 0f20 	tst.w	r3, #32
 800209a:	d105      	bne.n	80020a8 <HAL_FDCAN_ActivateNotification+0xfc>
 800209c:	f414 0f7c 	tst.w	r4, #16515072	; 0xfc0000
 80020a0:	d007      	beq.n	80020b2 <HAL_FDCAN_ActivateNotification+0x106>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80020a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80020a6:	d004      	beq.n	80020b2 <HAL_FDCAN_ActivateNotification+0x106>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80020a8:	6832      	ldr	r2, [r6, #0]
 80020aa:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	65d3      	str	r3, [r2, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80020b2:	f014 0f80 	tst.w	r4, #128	; 0x80
 80020b6:	d005      	beq.n	80020c4 <HAL_FDCAN_ActivateNotification+0x118>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80020b8:	6832      	ldr	r2, [r6, #0]
 80020ba:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 80020be:	433b      	orrs	r3, r7
 80020c0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80020c4:	f414 7f80 	tst.w	r4, #256	; 0x100
 80020c8:	d005      	beq.n	80020d6 <HAL_FDCAN_ActivateNotification+0x12a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80020ca:	6832      	ldr	r2, [r6, #0]
 80020cc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 80020d0:	433b      	orrs	r3, r7
 80020d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80020d6:	6832      	ldr	r2, [r6, #0]
 80020d8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80020da:	4323      	orrs	r3, r4
 80020dc:	6553      	str	r3, [r2, #84]	; 0x54
    return HAL_OK;
 80020de:	2000      	movs	r0, #0
 80020e0:	e77d      	b.n	8001fde <HAL_FDCAN_ActivateNotification+0x32>
 80020e2:	bf00      	nop
 80020e4:	08012dbc 	.word	0x08012dbc

080020e8 <HAL_FDCAN_TxEventFifoCallback>:
}
 80020e8:	4770      	bx	lr

080020ea <HAL_FDCAN_RxFifo1Callback>:
}
 80020ea:	4770      	bx	lr

080020ec <HAL_FDCAN_TxFifoEmptyCallback>:
}
 80020ec:	4770      	bx	lr

080020ee <HAL_FDCAN_TxBufferCompleteCallback>:
}
 80020ee:	4770      	bx	lr

080020f0 <HAL_FDCAN_TxBufferAbortCallback>:
}
 80020f0:	4770      	bx	lr

080020f2 <HAL_FDCAN_TimestampWraparoundCallback>:
}
 80020f2:	4770      	bx	lr

080020f4 <HAL_FDCAN_TimeoutOccurredCallback>:
}
 80020f4:	4770      	bx	lr

080020f6 <HAL_FDCAN_HighPriorityMessageCallback>:
}
 80020f6:	4770      	bx	lr

080020f8 <HAL_FDCAN_ErrorCallback>:
}
 80020f8:	4770      	bx	lr

080020fa <HAL_FDCAN_ErrorStatusCallback>:
}
 80020fa:	4770      	bx	lr

080020fc <HAL_FDCAN_IRQHandler>:
{
 80020fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002100:	4604      	mov	r4, r0
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002102:	6803      	ldr	r3, [r0, #0]
 8002104:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002106:	f402 59e0 	and.w	r9, r2, #7168	; 0x1c00
  TxEventFifoITs &= hfdcan->Instance->IE;
 800210a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800210c:	ea09 0902 	and.w	r9, r9, r2
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002112:	f002 0807 	and.w	r8, r2, #7
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002116:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002118:	ea08 0802 	and.w	r8, r8, r2
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800211c:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 800211e:	f007 0738 	and.w	r7, r7, #56	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002122:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002124:	4017      	ands	r7, r2
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002126:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8002128:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  Errors &= hfdcan->Instance->IE;
 800212c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800212e:	4015      	ands	r5, r2
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002130:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8002132:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002136:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002138:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800213a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800213c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002140:	d003      	beq.n	800214a <HAL_FDCAN_IRQHandler+0x4e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002142:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002144:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002148:	d151      	bne.n	80021ee <HAL_FDCAN_IRQHandler+0xf2>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800214e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002152:	d003      	beq.n	800215c <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002156:	f412 7f80 	tst.w	r2, #256	; 0x100
 800215a:	d14d      	bne.n	80021f8 <HAL_FDCAN_IRQHandler+0xfc>
  if (TxEventFifoITs != 0U)
 800215c:	f1b9 0f00 	cmp.w	r9, #0
 8002160:	d156      	bne.n	8002210 <HAL_FDCAN_IRQHandler+0x114>
  if (RxFifo0ITs != 0U)
 8002162:	f1b8 0f00 	cmp.w	r8, #0
 8002166:	d15b      	bne.n	8002220 <HAL_FDCAN_IRQHandler+0x124>
  if (RxFifo1ITs != 0U)
 8002168:	2f00      	cmp	r7, #0
 800216a:	d161      	bne.n	8002230 <HAL_FDCAN_IRQHandler+0x134>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002170:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002174:	d003      	beq.n	800217e <HAL_FDCAN_IRQHandler+0x82>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002176:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002178:	f412 7f00 	tst.w	r2, #512	; 0x200
 800217c:	d15f      	bne.n	800223e <HAL_FDCAN_IRQHandler+0x142>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002182:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002186:	d003      	beq.n	8002190 <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800218a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800218e:	d15d      	bne.n	800224c <HAL_FDCAN_IRQHandler+0x150>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002194:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002198:	d003      	beq.n	80021a2 <HAL_FDCAN_IRQHandler+0xa6>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800219a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800219c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80021a0:	d15f      	bne.n	8002262 <HAL_FDCAN_IRQHandler+0x166>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021a6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80021aa:	d003      	beq.n	80021b4 <HAL_FDCAN_IRQHandler+0xb8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80021ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021ae:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80021b2:	d15d      	bne.n	8002270 <HAL_FDCAN_IRQHandler+0x174>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021b8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80021bc:	d00a      	beq.n	80021d4 <HAL_FDCAN_IRQHandler+0xd8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80021be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021c0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80021c4:	d006      	beq.n	80021d4 <HAL_FDCAN_IRQHandler+0xd8>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80021c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ca:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80021cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80021ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d2:	6623      	str	r3, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 80021d4:	2e00      	cmp	r6, #0
 80021d6:	d152      	bne.n	800227e <HAL_FDCAN_IRQHandler+0x182>
  if (Errors != 0U)
 80021d8:	b125      	cbz	r5, 80021e4 <HAL_FDCAN_IRQHandler+0xe8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 80021de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80021e0:	432b      	orrs	r3, r5
 80021e2:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80021e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d150      	bne.n	800228c <HAL_FDCAN_IRQHandler+0x190>
}
 80021ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80021ee:	2240      	movs	r2, #64	; 0x40
 80021f0:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80021f2:	f7ff ff80 	bl	80020f6 <HAL_FDCAN_HighPriorityMessageCallback>
 80021f6:	e7a8      	b.n	800214a <HAL_FDCAN_IRQHandler+0x4e>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80021f8:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80021fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002200:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002204:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002206:	4011      	ands	r1, r2
 8002208:	4620      	mov	r0, r4
 800220a:	f7ff ff71 	bl	80020f0 <HAL_FDCAN_TxBufferAbortCallback>
 800220e:	e7a5      	b.n	800215c <HAL_FDCAN_IRQHandler+0x60>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002216:	4649      	mov	r1, r9
 8002218:	4620      	mov	r0, r4
 800221a:	f7ff ff65 	bl	80020e8 <HAL_FDCAN_TxEventFifoCallback>
 800221e:	e7a0      	b.n	8002162 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002226:	4641      	mov	r1, r8
 8002228:	4620      	mov	r0, r4
 800222a:	f00e f875 	bl	8010318 <HAL_FDCAN_RxFifo0Callback>
 800222e:	e79b      	b.n	8002168 <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002234:	4639      	mov	r1, r7
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff ff57 	bl	80020ea <HAL_FDCAN_RxFifo1Callback>
 800223c:	e796      	b.n	800216c <HAL_FDCAN_IRQHandler+0x70>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800223e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002242:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002244:	4620      	mov	r0, r4
 8002246:	f7ff ff51 	bl	80020ec <HAL_FDCAN_TxFifoEmptyCallback>
 800224a:	e798      	b.n	800217e <HAL_FDCAN_IRQHandler+0x82>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800224c:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002250:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002254:	2080      	movs	r0, #128	; 0x80
 8002256:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002258:	4011      	ands	r1, r2
 800225a:	4620      	mov	r0, r4
 800225c:	f7ff ff47 	bl	80020ee <HAL_FDCAN_TxBufferCompleteCallback>
 8002260:	e796      	b.n	8002190 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002262:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002266:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002268:	4620      	mov	r0, r4
 800226a:	f7ff ff42 	bl	80020f2 <HAL_FDCAN_TimestampWraparoundCallback>
 800226e:	e798      	b.n	80021a2 <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002270:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002274:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002276:	4620      	mov	r0, r4
 8002278:	f7ff ff3c 	bl	80020f4 <HAL_FDCAN_TimeoutOccurredCallback>
 800227c:	e79a      	b.n	80021b4 <HAL_FDCAN_IRQHandler+0xb8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002282:	4631      	mov	r1, r6
 8002284:	4620      	mov	r0, r4
 8002286:	f7ff ff38 	bl	80020fa <HAL_FDCAN_ErrorStatusCallback>
 800228a:	e7a5      	b.n	80021d8 <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 800228c:	4620      	mov	r0, r4
 800228e:	f7ff ff33 	bl	80020f8 <HAL_FDCAN_ErrorCallback>
}
 8002292:	e7aa      	b.n	80021ea <HAL_FDCAN_IRQHandler+0xee>

08002294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	4680      	mov	r8, r0
 800229c:	460c      	mov	r4, r1
  uint32_t position = 0x00U;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800229e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80022a2:	d01a      	beq.n	80022da <HAL_GPIO_Init+0x46>
 80022a4:	4baa      	ldr	r3, [pc, #680]	; (8002550 <HAL_GPIO_Init+0x2bc>)
 80022a6:	4298      	cmp	r0, r3
 80022a8:	d017      	beq.n	80022da <HAL_GPIO_Init+0x46>
 80022aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ae:	4298      	cmp	r0, r3
 80022b0:	d013      	beq.n	80022da <HAL_GPIO_Init+0x46>
 80022b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022b6:	4298      	cmp	r0, r3
 80022b8:	d00f      	beq.n	80022da <HAL_GPIO_Init+0x46>
 80022ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022be:	4298      	cmp	r0, r3
 80022c0:	d00b      	beq.n	80022da <HAL_GPIO_Init+0x46>
 80022c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c6:	4298      	cmp	r0, r3
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x46>
 80022ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ce:	4298      	cmp	r0, r3
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x46>
 80022d2:	21a9      	movs	r1, #169	; 0xa9
 80022d4:	489f      	ldr	r0, [pc, #636]	; (8002554 <HAL_GPIO_Init+0x2c0>)
 80022d6:	f7fe fcc8 	bl	8000c6a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	b112      	cbz	r2, 80022e6 <HAL_GPIO_Init+0x52>
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	041b      	lsls	r3, r3, #16
 80022e4:	b11b      	cbz	r3, 80022ee <HAL_GPIO_Init+0x5a>
 80022e6:	21aa      	movs	r1, #170	; 0xaa
 80022e8:	489a      	ldr	r0, [pc, #616]	; (8002554 <HAL_GPIO_Init+0x2c0>)
 80022ea:	f7fe fcbe 	bl	8000c6a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80022ee:	6863      	ldr	r3, [r4, #4]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d910      	bls.n	8002316 <HAL_GPIO_Init+0x82>
 80022f4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80022f8:	d00d      	beq.n	8002316 <HAL_GPIO_Init+0x82>
 80022fa:	d811      	bhi.n	8002320 <HAL_GPIO_Init+0x8c>
 80022fc:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002300:	d009      	beq.n	8002316 <HAL_GPIO_Init+0x82>
 8002302:	d903      	bls.n	800230c <HAL_GPIO_Init+0x78>
 8002304:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002308:	d005      	beq.n	8002316 <HAL_GPIO_Init+0x82>
 800230a:	e012      	b.n	8002332 <HAL_GPIO_Init+0x9e>
 800230c:	2b03      	cmp	r3, #3
 800230e:	d904      	bls.n	800231a <HAL_GPIO_Init+0x86>
 8002310:	3b11      	subs	r3, #17
 8002312:	2b01      	cmp	r3, #1
 8002314:	d80d      	bhi.n	8002332 <HAL_GPIO_Init+0x9e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002316:	2500      	movs	r5, #0
 8002318:	e0a3      	b.n	8002462 <HAL_GPIO_Init+0x1ce>
 800231a:	2b02      	cmp	r3, #2
 800231c:	d309      	bcc.n	8002332 <HAL_GPIO_Init+0x9e>
 800231e:	e7fa      	b.n	8002316 <HAL_GPIO_Init+0x82>
 8002320:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002324:	d0f7      	beq.n	8002316 <HAL_GPIO_Init+0x82>
 8002326:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800232a:	d0f4      	beq.n	8002316 <HAL_GPIO_Init+0x82>
 800232c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002330:	d0f1      	beq.n	8002316 <HAL_GPIO_Init+0x82>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002332:	21ab      	movs	r1, #171	; 0xab
 8002334:	4887      	ldr	r0, [pc, #540]	; (8002554 <HAL_GPIO_Init+0x2c0>)
 8002336:	f7fe fc98 	bl	8000c6a <assert_failed>
 800233a:	e7ec      	b.n	8002316 <HAL_GPIO_Init+0x82>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800233c:	68e3      	ldr	r3, [r4, #12]
 800233e:	2b03      	cmp	r3, #3
 8002340:	d817      	bhi.n	8002372 <HAL_GPIO_Init+0xde>
        temp = GPIOx->OSPEEDR;
 8002342:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002346:	0069      	lsls	r1, r5, #1
 8002348:	2303      	movs	r3, #3
 800234a:	408b      	lsls	r3, r1
 800234c:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002350:	68e3      	ldr	r3, [r4, #12]
 8002352:	408b      	lsls	r3, r1
 8002354:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8002356:	f8c8 3008 	str.w	r3, [r8, #8]
        temp = GPIOx->OTYPER;
 800235a:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800235e:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002362:	6863      	ldr	r3, [r4, #4]
 8002364:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002368:	40ab      	lsls	r3, r5
 800236a:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 800236c:	f8c8 3004 	str.w	r3, [r8, #4]
 8002370:	e086      	b.n	8002480 <HAL_GPIO_Init+0x1ec>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002372:	21bb      	movs	r1, #187	; 0xbb
 8002374:	4877      	ldr	r0, [pc, #476]	; (8002554 <HAL_GPIO_Init+0x2c0>)
 8002376:	f7fe fc78 	bl	8000c6a <assert_failed>
 800237a:	e7e2      	b.n	8002342 <HAL_GPIO_Init+0xae>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800237c:	21cc      	movs	r1, #204	; 0xcc
 800237e:	4875      	ldr	r0, [pc, #468]	; (8002554 <HAL_GPIO_Init+0x2c0>)
 8002380:	f7fe fc73 	bl	8000c6a <assert_failed>
 8002384:	e085      	b.n	8002492 <HAL_GPIO_Init+0x1fe>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002386:	f1b8 4f90 	cmp.w	r8, #1207959552	; 0x48000000
 800238a:	d01a      	beq.n	80023c2 <HAL_GPIO_Init+0x12e>
 800238c:	4b70      	ldr	r3, [pc, #448]	; (8002550 <HAL_GPIO_Init+0x2bc>)
 800238e:	4598      	cmp	r8, r3
 8002390:	d017      	beq.n	80023c2 <HAL_GPIO_Init+0x12e>
 8002392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002396:	4598      	cmp	r8, r3
 8002398:	d013      	beq.n	80023c2 <HAL_GPIO_Init+0x12e>
 800239a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800239e:	4598      	cmp	r8, r3
 80023a0:	d00f      	beq.n	80023c2 <HAL_GPIO_Init+0x12e>
 80023a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023a6:	4598      	cmp	r8, r3
 80023a8:	d00b      	beq.n	80023c2 <HAL_GPIO_Init+0x12e>
 80023aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ae:	4598      	cmp	r8, r3
 80023b0:	d007      	beq.n	80023c2 <HAL_GPIO_Init+0x12e>
 80023b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b6:	4598      	cmp	r8, r3
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x12e>
 80023ba:	21d9      	movs	r1, #217	; 0xd9
 80023bc:	4865      	ldr	r0, [pc, #404]	; (8002554 <HAL_GPIO_Init+0x2c0>)
 80023be:	f7fe fc54 	bl	8000c6a <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80023c2:	6923      	ldr	r3, [r4, #16]
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	d810      	bhi.n	80023ea <HAL_GPIO_Init+0x156>
        temp = GPIOx->AFR[position >> 3U];
 80023c8:	08ea      	lsrs	r2, r5, #3
 80023ca:	3208      	adds	r2, #8
 80023cc:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023d0:	f005 0107 	and.w	r1, r5, #7
 80023d4:	0089      	lsls	r1, r1, #2
 80023d6:	230f      	movs	r3, #15
 80023d8:	408b      	lsls	r3, r1
 80023da:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023de:	6923      	ldr	r3, [r4, #16]
 80023e0:	408b      	lsls	r3, r1
 80023e2:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3U] = temp;
 80023e4:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 80023e8:	e065      	b.n	80024b6 <HAL_GPIO_Init+0x222>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80023ea:	21da      	movs	r1, #218	; 0xda
 80023ec:	4859      	ldr	r0, [pc, #356]	; (8002554 <HAL_GPIO_Init+0x2c0>)
 80023ee:	f7fe fc3c 	bl	8000c6a <assert_failed>
 80023f2:	e7e9      	b.n	80023c8 <HAL_GPIO_Init+0x134>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023f4:	2305      	movs	r3, #5
 80023f6:	e000      	b.n	80023fa <HAL_GPIO_Init+0x166>
 80023f8:	2300      	movs	r3, #0
 80023fa:	408b      	lsls	r3, r1
 80023fc:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023fe:	3202      	adds	r2, #2
 8002400:	4955      	ldr	r1, [pc, #340]	; (8002558 <HAL_GPIO_Init+0x2c4>)
 8002402:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002406:	4b55      	ldr	r3, [pc, #340]	; (800255c <HAL_GPIO_Init+0x2c8>)
 8002408:	689a      	ldr	r2, [r3, #8]
        temp &= ~(iocurrent);
 800240a:	43f3      	mvns	r3, r6
 800240c:	ea22 0106 	bic.w	r1, r2, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002410:	6860      	ldr	r0, [r4, #4]
 8002412:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002416:	d001      	beq.n	800241c <HAL_GPIO_Init+0x188>
        {
          temp |= iocurrent;
 8002418:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->RTSR1 = temp;
 800241c:	4a4f      	ldr	r2, [pc, #316]	; (800255c <HAL_GPIO_Init+0x2c8>)
 800241e:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR1;
 8002420:	68d2      	ldr	r2, [r2, #12]
        temp &= ~(iocurrent);
 8002422:	ea03 0102 	and.w	r1, r3, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002426:	6860      	ldr	r0, [r4, #4]
 8002428:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800242c:	d001      	beq.n	8002432 <HAL_GPIO_Init+0x19e>
        {
          temp |= iocurrent;
 800242e:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->FTSR1 = temp;
 8002432:	4a4a      	ldr	r2, [pc, #296]	; (800255c <HAL_GPIO_Init+0x2c8>)
 8002434:	60d1      	str	r1, [r2, #12]

        temp = EXTI->EMR1;
 8002436:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 8002438:	ea03 0102 	and.w	r1, r3, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800243c:	6860      	ldr	r0, [r4, #4]
 800243e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8002442:	d001      	beq.n	8002448 <HAL_GPIO_Init+0x1b4>
        {
          temp |= iocurrent;
 8002444:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->EMR1 = temp;
 8002448:	4a44      	ldr	r2, [pc, #272]	; (800255c <HAL_GPIO_Init+0x2c8>)
 800244a:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800244c:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 800244e:	4013      	ands	r3, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002450:	6861      	ldr	r1, [r4, #4]
 8002452:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8002456:	d001      	beq.n	800245c <HAL_GPIO_Init+0x1c8>
        {
          temp |= iocurrent;
 8002458:	ea46 0302 	orr.w	r3, r6, r2
        }
        EXTI->IMR1 = temp;
 800245c:	4a3f      	ldr	r2, [pc, #252]	; (800255c <HAL_GPIO_Init+0x2c8>)
 800245e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002460:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002462:	6826      	ldr	r6, [r4, #0]
 8002464:	fa36 f205 	lsrs.w	r2, r6, r5
 8002468:	d06f      	beq.n	800254a <HAL_GPIO_Init+0x2b6>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800246a:	2701      	movs	r7, #1
 800246c:	40af      	lsls	r7, r5
    if (iocurrent != 0x00u)
 800246e:	403e      	ands	r6, r7
 8002470:	d0f6      	beq.n	8002460 <HAL_GPIO_Init+0x1cc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002472:	6863      	ldr	r3, [r4, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	3b01      	subs	r3, #1
 800247a:	2b01      	cmp	r3, #1
 800247c:	f67f af5e 	bls.w	800233c <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002480:	6863      	ldr	r3, [r4, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b03      	cmp	r3, #3
 8002488:	d00f      	beq.n	80024aa <HAL_GPIO_Init+0x216>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800248a:	68a3      	ldr	r3, [r4, #8]
 800248c:	2b02      	cmp	r3, #2
 800248e:	f63f af75 	bhi.w	800237c <HAL_GPIO_Init+0xe8>
        temp = GPIOx->PUPDR;
 8002492:	f8d8 200c 	ldr.w	r2, [r8, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002496:	0069      	lsls	r1, r5, #1
 8002498:	2303      	movs	r3, #3
 800249a:	408b      	lsls	r3, r1
 800249c:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a0:	68a3      	ldr	r3, [r4, #8]
 80024a2:	408b      	lsls	r3, r1
 80024a4:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
 80024a6:	f8c8 300c 	str.w	r3, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024aa:	6863      	ldr	r3, [r4, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	f43f af68 	beq.w	8002386 <HAL_GPIO_Init+0xf2>
      temp = GPIOx->MODER;
 80024b6:	f8d8 2000 	ldr.w	r2, [r8]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024ba:	0069      	lsls	r1, r5, #1
 80024bc:	2303      	movs	r3, #3
 80024be:	408b      	lsls	r3, r1
 80024c0:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c4:	6863      	ldr	r3, [r4, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	408b      	lsls	r3, r1
 80024cc:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 80024ce:	f8c8 3000 	str.w	r3, [r8]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024d2:	6863      	ldr	r3, [r4, #4]
 80024d4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80024d8:	d0c2      	beq.n	8002460 <HAL_GPIO_Init+0x1cc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	4b21      	ldr	r3, [pc, #132]	; (8002560 <HAL_GPIO_Init+0x2cc>)
 80024dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	661a      	str	r2, [r3, #96]	; 0x60
 80024e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80024ee:	08aa      	lsrs	r2, r5, #2
 80024f0:	1c91      	adds	r1, r2, #2
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_GPIO_Init+0x2c4>)
 80024f4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024f8:	f005 0103 	and.w	r1, r5, #3
 80024fc:	0089      	lsls	r1, r1, #2
 80024fe:	230f      	movs	r3, #15
 8002500:	408b      	lsls	r3, r1
 8002502:	ea20 0003 	bic.w	r0, r0, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002506:	f1b8 4f90 	cmp.w	r8, #1207959552	; 0x48000000
 800250a:	f43f af75 	beq.w	80023f8 <HAL_GPIO_Init+0x164>
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_GPIO_Init+0x2bc>)
 8002510:	4598      	cmp	r8, r3
 8002512:	d012      	beq.n	800253a <HAL_GPIO_Init+0x2a6>
 8002514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002518:	4598      	cmp	r8, r3
 800251a:	d010      	beq.n	800253e <HAL_GPIO_Init+0x2aa>
 800251c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002520:	4598      	cmp	r8, r3
 8002522:	d00e      	beq.n	8002542 <HAL_GPIO_Init+0x2ae>
 8002524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002528:	4598      	cmp	r8, r3
 800252a:	d00c      	beq.n	8002546 <HAL_GPIO_Init+0x2b2>
 800252c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002530:	4598      	cmp	r8, r3
 8002532:	f43f af5f 	beq.w	80023f4 <HAL_GPIO_Init+0x160>
 8002536:	2306      	movs	r3, #6
 8002538:	e75f      	b.n	80023fa <HAL_GPIO_Init+0x166>
 800253a:	2301      	movs	r3, #1
 800253c:	e75d      	b.n	80023fa <HAL_GPIO_Init+0x166>
 800253e:	2302      	movs	r3, #2
 8002540:	e75b      	b.n	80023fa <HAL_GPIO_Init+0x166>
 8002542:	2303      	movs	r3, #3
 8002544:	e759      	b.n	80023fa <HAL_GPIO_Init+0x166>
 8002546:	2304      	movs	r3, #4
 8002548:	e757      	b.n	80023fa <HAL_GPIO_Init+0x166>
  }
}
 800254a:	b002      	add	sp, #8
 800254c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002550:	48000400 	.word	0x48000400
 8002554:	08012e08 	.word	0x08012e08
 8002558:	40010000 	.word	0x40010000
 800255c:	40010400 	.word	0x40010400
 8002560:	40021000 	.word	0x40021000

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b570      	push	{r4, r5, r6, lr}
 8002566:	4605      	mov	r5, r0
 8002568:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800256a:	460e      	mov	r6, r1
 800256c:	b121      	cbz	r1, 8002578 <HAL_GPIO_WritePin+0x14>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800256e:	2c01      	cmp	r4, #1
 8002570:	d808      	bhi.n	8002584 <HAL_GPIO_WritePin+0x20>

  if (PinState != GPIO_PIN_RESET)
 8002572:	b16c      	cbz	r4, 8002590 <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002574:	61ae      	str	r6, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002576:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002578:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800257c:	4805      	ldr	r0, [pc, #20]	; (8002594 <HAL_GPIO_WritePin+0x30>)
 800257e:	f7fe fb74 	bl	8000c6a <assert_failed>
 8002582:	e7f4      	b.n	800256e <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002584:	f240 119b 	movw	r1, #411	; 0x19b
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <HAL_GPIO_WritePin+0x30>)
 800258a:	f7fe fb6e 	bl	8000c6a <assert_failed>
 800258e:	e7f0      	b.n	8002572 <HAL_GPIO_WritePin+0xe>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002590:	62ae      	str	r6, [r5, #40]	; 0x28
}
 8002592:	e7f0      	b.n	8002576 <HAL_GPIO_WritePin+0x12>
 8002594:	08012e08 	.word	0x08012e08

08002598 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002598:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800259a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800259e:	d043      	beq.n	8002628 <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025a0:	6804      	ldr	r4, [r0, #0]
 80025a2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80025a6:	f891 c000 	ldrb.w	ip, [r1]
 80025aa:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 80025ae:	fa1e f383 	uxtah	r3, lr, r3
 80025b2:	4423      	add	r3, r4
 80025b4:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 80025b8:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 80025bc:	698b      	ldr	r3, [r1, #24]
 80025be:	42a3      	cmp	r3, r4
 80025c0:	d328      	bcc.n	8002614 <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 80025c2:	1b1b      	subs	r3, r3, r4
 80025c4:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 80025c6:	698b      	ldr	r3, [r1, #24]
 80025c8:	b97b      	cbnz	r3, 80025ea <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025ca:	6805      	ldr	r5, [r0, #0]
 80025cc:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e6:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025ea:	f012 0f40 	tst.w	r2, #64	; 0x40
 80025ee:	d00e      	beq.n	800260e <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025f0:	6802      	ldr	r2, [r0, #0]
 80025f2:	780d      	ldrb	r5, [r1, #0]
 80025f4:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002606:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800260a:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 800260e:	b924      	cbnz	r4, 800261a <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8002610:	4620      	mov	r0, r4
 8002612:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	618b      	str	r3, [r1, #24]
 8002618:	e7d5      	b.n	80025c6 <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800261a:	4623      	mov	r3, r4
 800261c:	890a      	ldrh	r2, [r1, #8]
 800261e:	6949      	ldr	r1, [r1, #20]
 8002620:	6800      	ldr	r0, [r0, #0]
 8002622:	f005 f825 	bl	8007670 <USB_ReadPMA>
 8002626:	e7f3      	b.n	8002610 <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002628:	6804      	ldr	r4, [r0, #0]
 800262a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800262e:	f891 c000 	ldrb.w	ip, [r1]
 8002632:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 8002636:	fa1e f383 	uxtah	r3, lr, r3
 800263a:	4423      	add	r3, r4
 800263c:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 8002640:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8002644:	698b      	ldr	r3, [r1, #24]
 8002646:	42a3      	cmp	r3, r4
 8002648:	d32f      	bcc.n	80026aa <HAL_PCD_EP_DB_Receive+0x112>
      ep->xfer_len -= count;
 800264a:	1b1b      	subs	r3, r3, r4
 800264c:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 800264e:	698b      	ldr	r3, [r1, #24]
 8002650:	b97b      	cbnz	r3, 8002672 <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002652:	6805      	ldr	r5, [r0, #0]
 8002654:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8002658:	b29b      	uxth	r3, r3
 800265a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800265e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002662:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266e:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002672:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002676:	d10f      	bne.n	8002698 <HAL_PCD_EP_DB_Receive+0x100>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002678:	6802      	ldr	r2, [r0, #0]
 800267a:	f891 c000 	ldrb.w	ip, [r1]
 800267e:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8002682:	b29b      	uxth	r3, r3
 8002684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002690:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002694:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 8002698:	2c00      	cmp	r4, #0
 800269a:	d0b9      	beq.n	8002610 <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800269c:	4623      	mov	r3, r4
 800269e:	894a      	ldrh	r2, [r1, #10]
 80026a0:	6949      	ldr	r1, [r1, #20]
 80026a2:	6800      	ldr	r0, [r0, #0]
 80026a4:	f004 ffe4 	bl	8007670 <USB_ReadPMA>
 80026a8:	e7b2      	b.n	8002610 <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	618b      	str	r3, [r1, #24]
 80026ae:	e7ce      	b.n	800264e <HAL_PCD_EP_DB_Receive+0xb6>

080026b0 <HAL_PCD_Init>:
  if (hpcd == NULL)
 80026b0:	2800      	cmp	r0, #0
 80026b2:	d076      	beq.n	80027a2 <HAL_PCD_Init+0xf2>
{
 80026b4:	b530      	push	{r4, r5, lr}
 80026b6:	b087      	sub	sp, #28
 80026b8:	4604      	mov	r4, r0
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80026ba:	6802      	ldr	r2, [r0, #0]
 80026bc:	4b3a      	ldr	r3, [pc, #232]	; (80027a8 <HAL_PCD_Init+0xf8>)
 80026be:	429a      	cmp	r2, r3
 80026c0:	d003      	beq.n	80026ca <HAL_PCD_Init+0x1a>
 80026c2:	2187      	movs	r1, #135	; 0x87
 80026c4:	4839      	ldr	r0, [pc, #228]	; (80027ac <HAL_PCD_Init+0xfc>)
 80026c6:	f7fe fad0 	bl	8000c6a <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026ca:	f894 32a9 	ldrb.w	r3, [r4, #681]	; 0x2a9
 80026ce:	b13b      	cbz	r3, 80026e0 <HAL_PCD_Init+0x30>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80026d0:	2303      	movs	r3, #3
 80026d2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80026d6:	6820      	ldr	r0, [r4, #0]
 80026d8:	f004 f8ab 	bl	8006832 <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026dc:	2300      	movs	r3, #0
 80026de:	e020      	b.n	8002722 <HAL_PCD_Init+0x72>
    hpcd->Lock = HAL_UNLOCKED;
 80026e0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80026e4:	4620      	mov	r0, r4
 80026e6:	f00e ff71 	bl	80115cc <HAL_PCD_MspInit>
 80026ea:	e7f1      	b.n	80026d0 <HAL_PCD_Init+0x20>
    hpcd->IN_ep[i].is_in = 1U;
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80026f2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80026f6:	2001      	movs	r0, #1
 80026f8:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 80026fa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80026fe:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002702:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002706:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800270a:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800270c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8002710:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8002714:	2000      	movs	r0, #0
 8002716:	f88c 0003 	strb.w	r0, [ip, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 800271a:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800271c:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800271e:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002720:	b2d3      	uxtb	r3, r2
 8002722:	6860      	ldr	r0, [r4, #4]
 8002724:	4283      	cmp	r3, r0
 8002726:	d3e1      	bcc.n	80026ec <HAL_PCD_Init+0x3c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002728:	2300      	movs	r3, #0
 800272a:	e016      	b.n	800275a <HAL_PCD_Init+0xaa>
    hpcd->OUT_ep[i].is_in = 0U;
 800272c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002730:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002734:	2100      	movs	r1, #0
 8002736:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 800273a:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800273e:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002742:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002746:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800274a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800274e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002752:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002756:	3301      	adds	r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	4298      	cmp	r0, r3
 800275c:	d8e6      	bhi.n	800272c <HAL_PCD_Init+0x7c>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800275e:	46a4      	mov	ip, r4
 8002760:	f85c 5b10 	ldr.w	r5, [ip], #16
 8002764:	46ee      	mov	lr, sp
 8002766:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800276a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800276e:	f8dc 3000 	ldr.w	r3, [ip]
 8002772:	f8ce 3000 	str.w	r3, [lr]
 8002776:	1d23      	adds	r3, r4, #4
 8002778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800277a:	4628      	mov	r0, r5
 800277c:	f004 f863 	bl	8006846 <USB_DevInit>
  hpcd->USB_Address = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002786:	2301      	movs	r3, #1
 8002788:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 800278c:	69e3      	ldr	r3, [r4, #28]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d002      	beq.n	8002798 <HAL_PCD_Init+0xe8>
  return HAL_OK;
 8002792:	2000      	movs	r0, #0
}
 8002794:	b007      	add	sp, #28
 8002796:	bd30      	pop	{r4, r5, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002798:	4620      	mov	r0, r4
 800279a:	f000 feed 	bl	8003578 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 800279e:	2000      	movs	r0, #0
 80027a0:	e7f8      	b.n	8002794 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
 80027a2:	2001      	movs	r0, #1
}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40005c00 	.word	0x40005c00
 80027ac:	08012e44 	.word	0x08012e44

080027b0 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 80027b0:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d00e      	beq.n	80027d6 <HAL_PCD_Start+0x26>
{
 80027b8:	b510      	push	{r4, lr}
 80027ba:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80027bc:	2301      	movs	r3, #1
 80027be:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80027c2:	6800      	ldr	r0, [r0, #0]
 80027c4:	f004 f82c 	bl	8006820 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027c8:	6820      	ldr	r0, [r4, #0]
 80027ca:	f004 fb80 	bl	8006ece <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80027d4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80027d6:	2002      	movs	r0, #2
}
 80027d8:	4770      	bx	lr

080027da <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027da:	b570      	push	{r4, r5, r6, lr}
 80027dc:	4605      	mov	r5, r0
 80027de:	460c      	mov	r4, r1
 80027e0:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027e2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80027e6:	f000 8109 	beq.w	80029fc <HAL_PCD_EP_DB_Transmit+0x222>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027ea:	6802      	ldr	r2, [r0, #0]
 80027ec:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80027f0:	7809      	ldrb	r1, [r1, #0]
 80027f2:	00c8      	lsls	r0, r1, #3
 80027f4:	fa10 f383 	uxtah	r3, r0, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80027fe:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 8002802:	69a3      	ldr	r3, [r4, #24]
 8002804:	4293      	cmp	r3, r2
 8002806:	d951      	bls.n	80028ac <HAL_PCD_EP_DB_Transmit+0xd2>
    {
      ep->xfer_len -= TxPctSize;
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800280c:	69a3      	ldr	r3, [r4, #24]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d168      	bne.n	80028e4 <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002812:	7863      	ldrb	r3, [r4, #1]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d14c      	bne.n	80028b2 <HAL_PCD_EP_DB_Transmit+0xd8>
 8002818:	682a      	ldr	r2, [r5, #0]
 800281a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800281e:	fa12 f383 	uxtah	r3, r2, r3
 8002822:	4403      	add	r3, r0
 8002824:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002828:	b292      	uxth	r2, r2
 800282a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800282e:	b292      	uxth	r2, r2
 8002830:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002834:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002838:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800283c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002840:	b292      	uxth	r2, r2
 8002842:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002846:	682a      	ldr	r2, [r5, #0]
 8002848:	7863      	ldrb	r3, [r4, #1]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d13d      	bne.n	80028ca <HAL_PCD_EP_DB_Transmit+0xf0>
 800284e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002852:	fa12 f383 	uxtah	r3, r2, r3
 8002856:	7822      	ldrb	r2, [r4, #0]
 8002858:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800285c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002860:	b292      	uxth	r2, r2
 8002862:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002866:	b292      	uxth	r2, r2
 8002868:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800286c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002870:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002874:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002878:	b292      	uxth	r2, r2
 800287a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800287e:	7821      	ldrb	r1, [r4, #0]
 8002880:	4628      	mov	r0, r5
 8002882:	f00e fee7 	bl	8011654 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002886:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800288a:	d040      	beq.n	800290e <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800288c:	682a      	ldr	r2, [r5, #0]
 800288e:	7821      	ldrb	r1, [r4, #0]
 8002890:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002894:	b29b      	uxth	r3, r3
 8002896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80028aa:	e030      	b.n	800290e <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61a3      	str	r3, [r4, #24]
 80028b0:	e7ac      	b.n	800280c <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d1c7      	bne.n	8002846 <HAL_PCD_EP_DB_Transmit+0x6c>
 80028b6:	682a      	ldr	r2, [r5, #0]
 80028b8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80028bc:	fa12 f383 	uxtah	r3, r2, r3
 80028c0:	4403      	add	r3, r0
 80028c2:	2200      	movs	r2, #0
 80028c4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80028c8:	e7bd      	b.n	8002846 <HAL_PCD_EP_DB_Transmit+0x6c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d1d7      	bne.n	800287e <HAL_PCD_EP_DB_Transmit+0xa4>
 80028ce:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80028d2:	fa12 f383 	uxtah	r3, r2, r3
 80028d6:	7822      	ldrb	r2, [r4, #0]
 80028d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80028dc:	2200      	movs	r2, #0
 80028de:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80028e2:	e7cc      	b.n	800287e <HAL_PCD_EP_DB_Transmit+0xa4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028e4:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80028e8:	d00d      	beq.n	8002906 <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028ea:	6828      	ldr	r0, [r5, #0]
 80028ec:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002902:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002906:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800290a:	2b01      	cmp	r3, #1
 800290c:	d012      	beq.n	8002934 <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800290e:	682a      	ldr	r2, [r5, #0]
 8002910:	7821      	ldrb	r1, [r4, #0]
 8002912:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002916:	b29b      	uxth	r3, r3
 8002918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002920:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8002930:	2000      	movs	r0, #0
 8002932:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 8002934:	6963      	ldr	r3, [r4, #20]
 8002936:	4413      	add	r3, r2
 8002938:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 800293a:	69e3      	ldr	r3, [r4, #28]
 800293c:	4413      	add	r3, r2
 800293e:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002940:	6a21      	ldr	r1, [r4, #32]
 8002942:	6923      	ldr	r3, [r4, #16]
 8002944:	4299      	cmp	r1, r3
 8002946:	d31b      	bcc.n	8002980 <HAL_PCD_EP_DB_Transmit+0x1a6>
          ep->xfer_len_db -= len;
 8002948:	1ac9      	subs	r1, r1, r3
 800294a:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800294c:	7862      	ldrb	r2, [r4, #1]
 800294e:	2a00      	cmp	r2, #0
 8002950:	d13f      	bne.n	80029d2 <HAL_PCD_EP_DB_Transmit+0x1f8>
 8002952:	6829      	ldr	r1, [r5, #0]
 8002954:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8002958:	fa11 f282 	uxtah	r2, r1, r2
 800295c:	7821      	ldrb	r1, [r4, #0]
 800295e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002962:	2b3e      	cmp	r3, #62	; 0x3e
 8002964:	d918      	bls.n	8002998 <HAL_PCD_EP_DB_Transmit+0x1be>
 8002966:	0959      	lsrs	r1, r3, #5
 8002968:	f013 0f1f 	tst.w	r3, #31
 800296c:	d100      	bne.n	8002970 <HAL_PCD_EP_DB_Transmit+0x196>
 800296e:	3901      	subs	r1, #1
 8002970:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002974:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002978:	b289      	uxth	r1, r1
 800297a:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800297e:	e02a      	b.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x1fc>
        else if (ep->xfer_len_db == 0U)
 8002980:	b921      	cbnz	r1, 800298c <HAL_PCD_EP_DB_Transmit+0x1b2>
          ep->xfer_fill_db = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8002988:	4613      	mov	r3, r2
 800298a:	e7df      	b.n	800294c <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8002992:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8002994:	460b      	mov	r3, r1
 8002996:	e7d9      	b.n	800294c <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002998:	b98b      	cbnz	r3, 80029be <HAL_PCD_EP_DB_Transmit+0x1e4>
 800299a:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800299e:	b289      	uxth	r1, r1
 80029a0:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80029a4:	b289      	uxth	r1, r1
 80029a6:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80029aa:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80029ae:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80029b2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80029b6:	b289      	uxth	r1, r1
 80029b8:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80029bc:	e00b      	b.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x1fc>
 80029be:	0859      	lsrs	r1, r3, #1
 80029c0:	f013 0f01 	tst.w	r3, #1
 80029c4:	d000      	beq.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x1ee>
 80029c6:	3101      	adds	r1, #1
 80029c8:	0289      	lsls	r1, r1, #10
 80029ca:	b289      	uxth	r1, r1
 80029cc:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80029d0:	e001      	b.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x1fc>
 80029d2:	2a01      	cmp	r2, #1
 80029d4:	d006      	beq.n	80029e4 <HAL_PCD_EP_DB_Transmit+0x20a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	8922      	ldrh	r2, [r4, #8]
 80029da:	6961      	ldr	r1, [r4, #20]
 80029dc:	6828      	ldr	r0, [r5, #0]
 80029de:	f004 fa85 	bl	8006eec <USB_WritePMA>
 80029e2:	e794      	b.n	800290e <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029e4:	6829      	ldr	r1, [r5, #0]
 80029e6:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80029ea:	fa11 f282 	uxtah	r2, r1, r2
 80029ee:	7821      	ldrb	r1, [r4, #0]
 80029f0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80029f4:	b299      	uxth	r1, r3
 80029f6:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80029fa:	e7ec      	b.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x1fc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029fc:	6802      	ldr	r2, [r0, #0]
 80029fe:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002a02:	7809      	ldrb	r1, [r1, #0]
 8002a04:	00c8      	lsls	r0, r1, #3
 8002a06:	fa10 f383 	uxtah	r3, r0, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002a10:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8002a14:	69a3      	ldr	r3, [r4, #24]
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d352      	bcc.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x2e6>
      ep->xfer_len -= TxPctSize;
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8002a1e:	69a3      	ldr	r3, [r4, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d169      	bne.n	8002af8 <HAL_PCD_EP_DB_Transmit+0x31e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a24:	7863      	ldrb	r3, [r4, #1]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d14d      	bne.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x2ec>
 8002a2a:	682a      	ldr	r2, [r5, #0]
 8002a2c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002a30:	fa12 f383 	uxtah	r3, r2, r3
 8002a34:	4403      	add	r3, r0
 8002a36:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002a3a:	b292      	uxth	r2, r2
 8002a3c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002a40:	b292      	uxth	r2, r2
 8002a42:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002a46:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002a4a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002a4e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a52:	b292      	uxth	r2, r2
 8002a54:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a58:	682a      	ldr	r2, [r5, #0]
 8002a5a:	7863      	ldrb	r3, [r4, #1]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d13e      	bne.n	8002ade <HAL_PCD_EP_DB_Transmit+0x304>
 8002a60:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002a64:	fa12 f383 	uxtah	r3, r2, r3
 8002a68:	7822      	ldrb	r2, [r4, #0]
 8002a6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a6e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002a72:	b292      	uxth	r2, r2
 8002a74:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002a78:	b292      	uxth	r2, r2
 8002a7a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002a7e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002a82:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002a86:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a8a:	b292      	uxth	r2, r2
 8002a8c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a90:	7821      	ldrb	r1, [r4, #0]
 8002a92:	4628      	mov	r0, r5
 8002a94:	f00e fdde 	bl	8011654 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a98:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002a9c:	f47f af37 	bne.w	800290e <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002aa0:	682a      	ldr	r2, [r5, #0]
 8002aa2:	7821      	ldrb	r1, [r4, #0]
 8002aa4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aba:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002abe:	e726      	b.n	800290e <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61a3      	str	r3, [r4, #24]
 8002ac4:	e7ab      	b.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x244>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d1c6      	bne.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x27e>
 8002aca:	682a      	ldr	r2, [r5, #0]
 8002acc:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002ad0:	fa12 f383 	uxtah	r3, r2, r3
 8002ad4:	4403      	add	r3, r0
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002adc:	e7bc      	b.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x27e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d1d6      	bne.n	8002a90 <HAL_PCD_EP_DB_Transmit+0x2b6>
 8002ae2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002ae6:	fa12 f383 	uxtah	r3, r2, r3
 8002aea:	7822      	ldrb	r2, [r4, #0]
 8002aec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002af0:	2200      	movs	r2, #0
 8002af2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002af6:	e7cb      	b.n	8002a90 <HAL_PCD_EP_DB_Transmit+0x2b6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002af8:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002afc:	d10d      	bne.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x340>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002afe:	6828      	ldr	r0, [r5, #0]
 8002b00:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b16:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002b1a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	f47f aef5 	bne.w	800290e <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 8002b24:	6963      	ldr	r3, [r4, #20]
 8002b26:	4413      	add	r3, r2
 8002b28:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8002b2a:	69e3      	ldr	r3, [r4, #28]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b30:	6a21      	ldr	r1, [r4, #32]
 8002b32:	6923      	ldr	r3, [r4, #16]
 8002b34:	4299      	cmp	r1, r3
 8002b36:	d31b      	bcc.n	8002b70 <HAL_PCD_EP_DB_Transmit+0x396>
          ep->xfer_len_db -= len;
 8002b38:	1ac9      	subs	r1, r1, r3
 8002b3a:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b3c:	6829      	ldr	r1, [r5, #0]
 8002b3e:	7862      	ldrb	r2, [r4, #1]
 8002b40:	2a00      	cmp	r2, #0
 8002b42:	d13e      	bne.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x3e8>
 8002b44:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8002b48:	fa11 f282 	uxtah	r2, r1, r2
 8002b4c:	7821      	ldrb	r1, [r4, #0]
 8002b4e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002b52:	2b3e      	cmp	r3, #62	; 0x3e
 8002b54:	d918      	bls.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8002b56:	0959      	lsrs	r1, r3, #5
 8002b58:	f013 0f1f 	tst.w	r3, #31
 8002b5c:	d100      	bne.n	8002b60 <HAL_PCD_EP_DB_Transmit+0x386>
 8002b5e:	3901      	subs	r1, #1
 8002b60:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002b64:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002b68:	b289      	uxth	r1, r1
 8002b6a:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002b6e:	e02a      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x3ec>
        else if (ep->xfer_len_db == 0U)
 8002b70:	b921      	cbnz	r1, 8002b7c <HAL_PCD_EP_DB_Transmit+0x3a2>
          ep->xfer_fill_db = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8002b78:	4613      	mov	r3, r2
 8002b7a:	e7df      	b.n	8002b3c <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8002b80:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b84:	460b      	mov	r3, r1
 8002b86:	e7d9      	b.n	8002b3c <HAL_PCD_EP_DB_Transmit+0x362>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b88:	b98b      	cbnz	r3, 8002bae <HAL_PCD_EP_DB_Transmit+0x3d4>
 8002b8a:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8002b8e:	b289      	uxth	r1, r1
 8002b90:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002b94:	b289      	uxth	r1, r1
 8002b96:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002b9a:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8002b9e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002ba2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002ba6:	b289      	uxth	r1, r1
 8002ba8:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002bac:	e00b      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x3ec>
 8002bae:	0859      	lsrs	r1, r3, #1
 8002bb0:	f013 0f01 	tst.w	r3, #1
 8002bb4:	d000      	beq.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x3de>
 8002bb6:	3101      	adds	r1, #1
 8002bb8:	0289      	lsls	r1, r1, #10
 8002bba:	b289      	uxth	r1, r1
 8002bbc:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002bc0:	e001      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x3ec>
 8002bc2:	2a01      	cmp	r2, #1
 8002bc4:	d006      	beq.n	8002bd4 <HAL_PCD_EP_DB_Transmit+0x3fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	8962      	ldrh	r2, [r4, #10]
 8002bca:	6961      	ldr	r1, [r4, #20]
 8002bcc:	6828      	ldr	r0, [r5, #0]
 8002bce:	f004 f98d 	bl	8006eec <USB_WritePMA>
 8002bd2:	e69c      	b.n	800290e <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bd4:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8002bd8:	fa11 f282 	uxtah	r2, r1, r2
 8002bdc:	7821      	ldrb	r1, [r4, #0]
 8002bde:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002be2:	b299      	uxth	r1, r3
 8002be4:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002be8:	e7ed      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x3ec>

08002bea <PCD_EP_ISR_Handler>:
{
 8002bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bee:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bf0:	e0ca      	b.n	8002d88 <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bf2:	8803      	ldrh	r3, [r0, #0]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c0a:	6829      	ldr	r1, [r5, #0]
 8002c0c:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002c10:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8002c14:	00d2      	lsls	r2, r2, #3
 8002c16:	fa12 f383 	uxtah	r3, r2, r3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8002c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c24:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002c26:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002c28:	441a      	add	r2, r3
 8002c2a:	63ea      	str	r2, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4628      	mov	r0, r5
 8002c30:	f00e fd10 	bl	8011654 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c34:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80a5 	beq.w	8002d88 <PCD_EP_ISR_Handler+0x19e>
 8002c3e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f040 80a1 	bne.w	8002d88 <PCD_EP_ISR_Handler+0x19e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c46:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002c4a:	682a      	ldr	r2, [r5, #0]
 8002c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c50:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8002c5a:	e095      	b.n	8002d88 <PCD_EP_ISR_Handler+0x19e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c5c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002c60:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8002c64:	00d2      	lsls	r2, r2, #3
 8002c66:	fa12 f383 	uxtah	r3, r2, r3
 8002c6a:	4403      	add	r3, r0
 8002c6c:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8002c70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c74:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c78:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8002c7c:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8002c80:	f004 fcf6 	bl	8007670 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c84:	682a      	ldr	r2, [r5, #0]
 8002c86:	8813      	ldrh	r3, [r2, #0]
 8002c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8c:	051b      	lsls	r3, r3, #20
 8002c8e:	0d1b      	lsrs	r3, r3, #20
 8002c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c94:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002c96:	4628      	mov	r0, r5
 8002c98:	f00e fcc8 	bl	801162c <HAL_PCD_SetupStageCallback>
 8002c9c:	e074      	b.n	8002d88 <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c9e:	b989      	cbnz	r1, 8002cc4 <PCD_EP_ISR_Handler+0xda>
 8002ca0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002ca4:	b292      	uxth	r2, r2
 8002ca6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002caa:	b292      	uxth	r2, r2
 8002cac:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002cb0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002cb4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002cb8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002cc2:	e0bf      	b.n	8002e44 <PCD_EP_ISR_Handler+0x25a>
 8002cc4:	084a      	lsrs	r2, r1, #1
 8002cc6:	f011 0f01 	tst.w	r1, #1
 8002cca:	d000      	beq.n	8002cce <PCD_EP_ISR_Handler+0xe4>
 8002ccc:	3201      	adds	r2, #1
 8002cce:	0292      	lsls	r2, r2, #10
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002cd6:	e0b5      	b.n	8002e44 <PCD_EP_ISR_Handler+0x25a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002cd8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002cdc:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002cde:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002ce2:	f040 80be 	bne.w	8002e62 <PCD_EP_ISR_Handler+0x278>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ce6:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002cea:	d04d      	beq.n	8002d88 <PCD_EP_ISR_Handler+0x19e>
        ep = &hpcd->IN_ep[epindex];
 8002cec:	1c62      	adds	r2, r4, #1
 8002cee:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002cf2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002cf6:	6828      	ldr	r0, [r5, #0]
 8002cf8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 8002d14:	78cb      	ldrb	r3, [r1, #3]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	f000 81a7 	beq.w	800306a <PCD_EP_ISR_Handler+0x480>
          ep->xfer_len = 0U;
 8002d1c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002d20:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002d24:	2200      	movs	r2, #0
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8002d28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d2c:	b323      	cbz	r3, 8002d78 <PCD_EP_ISR_Handler+0x18e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d2e:	f016 0f40 	tst.w	r6, #64	; 0x40
 8002d32:	f000 8163 	beq.w	8002ffc <PCD_EP_ISR_Handler+0x412>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d36:	784b      	ldrb	r3, [r1, #1]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f040 814c 	bne.w	8002fd6 <PCD_EP_ISR_Handler+0x3ec>
 8002d3e:	682a      	ldr	r2, [r5, #0]
 8002d40:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002d44:	fa12 f383 	uxtah	r3, r2, r3
 8002d48:	1c62      	adds	r2, r4, #1
 8002d4a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d4e:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8002d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d56:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002d5a:	b292      	uxth	r2, r2
 8002d5c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002d60:	b292      	uxth	r2, r2
 8002d62:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002d66:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002d6a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002d6e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d72:	b292      	uxth	r2, r2
 8002d74:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d78:	3401      	adds	r4, #1
 8002d7a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002d7e:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8002d82:	4628      	mov	r0, r5
 8002d84:	f00e fc66 	bl	8011654 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d88:	6828      	ldr	r0, [r5, #0]
 8002d8a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002d8e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002d92:	f000 81ae 	beq.w	80030f2 <PCD_EP_ISR_Handler+0x508>
    wIstr = hpcd->Instance->ISTR;
 8002d96:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8002d9a:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8002d9c:	f014 040f 	ands.w	r4, r4, #15
 8002da0:	d19a      	bne.n	8002cd8 <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002da2:	f013 0f10 	tst.w	r3, #16
 8002da6:	f43f af24 	beq.w	8002bf2 <PCD_EP_ISR_Handler+0x8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002daa:	8803      	ldrh	r3, [r0, #0]
 8002dac:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002dae:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002db2:	f47f af53 	bne.w	8002c5c <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002db6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002dba:	d0e5      	beq.n	8002d88 <PCD_EP_ISR_Handler+0x19e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002dbc:	8803      	ldrh	r3, [r0, #0]
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc2:	051b      	lsls	r3, r3, #20
 8002dc4:	0d1b      	lsrs	r3, r3, #20
 8002dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dca:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dcc:	6828      	ldr	r0, [r5, #0]
 8002dce:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002dd2:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8002dd6:	00d2      	lsls	r2, r2, #3
 8002dd8:	fa12 f383 	uxtah	r3, r2, r3
 8002ddc:	4403      	add	r3, r0
 8002dde:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8002de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de6:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002dea:	b18b      	cbz	r3, 8002e10 <PCD_EP_ISR_Handler+0x226>
 8002dec:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8002df0:	b171      	cbz	r1, 8002e10 <PCD_EP_ISR_Handler+0x226>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002df2:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8002df6:	f004 fc3b 	bl	8007670 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002dfa:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8002dfe:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8002e02:	4413      	add	r3, r2
 8002e04:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	f00e fc16 	bl	801163c <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002e10:	682b      	ldr	r3, [r5, #0]
 8002e12:	881a      	ldrh	r2, [r3, #0]
 8002e14:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002e18:	d1b6      	bne.n	8002d88 <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e1a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002e1e:	fa13 f382 	uxtah	r3, r3, r2
 8002e22:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 8002e26:	293e      	cmp	r1, #62	; 0x3e
 8002e28:	f67f af39 	bls.w	8002c9e <PCD_EP_ISR_Handler+0xb4>
 8002e2c:	094a      	lsrs	r2, r1, #5
 8002e2e:	f011 0f1f 	tst.w	r1, #31
 8002e32:	d100      	bne.n	8002e36 <PCD_EP_ISR_Handler+0x24c>
 8002e34:	3a01      	subs	r2, #1
 8002e36:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002e3a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002e3e:	b292      	uxth	r2, r2
 8002e40:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e44:	682a      	ldr	r2, [r5, #0]
 8002e46:	8813      	ldrh	r3, [r2, #0]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e52:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5e:	8013      	strh	r3, [r2, #0]
 8002e60:	e792      	b.n	8002d88 <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e62:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6a:	051b      	lsls	r3, r3, #20
 8002e6c:	0d1b      	lsrs	r3, r3, #20
 8002e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e72:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8002e76:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002e7a:	00c9      	lsls	r1, r1, #3
 8002e7c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002e80:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8002e84:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002e88:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002e8c:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d140      	bne.n	8002f16 <PCD_EP_ISR_Handler+0x32c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e94:	6828      	ldr	r0, [r5, #0]
 8002e96:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e9a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002e9e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002ea2:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8002ea6:	00d2      	lsls	r2, r2, #3
 8002ea8:	fa12 f383 	uxtah	r3, r2, r3
 8002eac:	4403      	add	r3, r0
 8002eae:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8002eb2:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8002eb6:	bb17      	cbnz	r7, 8002efe <PCD_EP_ISR_Handler+0x314>
        ep->xfer_count += count;
 8002eb8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002ebc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002ec0:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002ec4:	443a      	add	r2, r7
 8002ec6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002eca:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002ece:	443a      	add	r2, r7
 8002ed0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ed4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002ed8:	b13b      	cbz	r3, 8002eea <PCD_EP_ISR_Handler+0x300>
 8002eda:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002ede:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002ee2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002ee6:	429f      	cmp	r7, r3
 8002ee8:	d270      	bcs.n	8002fcc <PCD_EP_ISR_Handler+0x3e2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002eea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002eee:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002ef2:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	f00e fba0 	bl	801163c <HAL_PCD_DataOutStageCallback>
 8002efc:	e6f3      	b.n	8002ce6 <PCD_EP_ISR_Handler+0xfc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002efe:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002f02:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002f06:	463b      	mov	r3, r7
 8002f08:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8002f0c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002f10:	f004 fbae 	bl	8007670 <USB_ReadPMA>
 8002f14:	e7d0      	b.n	8002eb8 <PCD_EP_ISR_Handler+0x2ce>
          if (ep->type == EP_TYPE_BULK)
 8002f16:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002f1a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002f1e:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d033      	beq.n	8002f8e <PCD_EP_ISR_Handler+0x3a4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f26:	6829      	ldr	r1, [r5, #0]
 8002f28:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002f2c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002f30:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8002f34:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f4a:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f4e:	6828      	ldr	r0, [r5, #0]
 8002f50:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 8002f54:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002f58:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002f5c:	d01e      	beq.n	8002f9c <PCD_EP_ISR_Handler+0x3b2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f5e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	fa13 f382 	uxtah	r3, r3, r2
 8002f68:	4403      	add	r3, r0
 8002f6a:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 8002f6e:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8002f72:	2f00      	cmp	r7, #0
 8002f74:	d0a0      	beq.n	8002eb8 <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f76:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002f7a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002f7e:	463b      	mov	r3, r7
 8002f80:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002f84:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002f88:	f004 fb72 	bl	8007670 <USB_ReadPMA>
 8002f8c:	e794      	b.n	8002eb8 <PCD_EP_ISR_Handler+0x2ce>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f8e:	4632      	mov	r2, r6
 8002f90:	4641      	mov	r1, r8
 8002f92:	4628      	mov	r0, r5
 8002f94:	f7ff fb00 	bl	8002598 <HAL_PCD_EP_DB_Receive>
 8002f98:	4607      	mov	r7, r0
 8002f9a:	e78d      	b.n	8002eb8 <PCD_EP_ISR_Handler+0x2ce>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f9c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	fa13 f382 	uxtah	r3, r3, r2
 8002fa6:	4403      	add	r3, r0
 8002fa8:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8002fac:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8002fb0:	2f00      	cmp	r7, #0
 8002fb2:	d081      	beq.n	8002eb8 <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fb4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002fb8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002fbc:	463b      	mov	r3, r7
 8002fbe:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002fc2:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002fc6:	f004 fb53 	bl	8007670 <USB_ReadPMA>
 8002fca:	e775      	b.n	8002eb8 <PCD_EP_ISR_Handler+0x2ce>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002fcc:	4641      	mov	r1, r8
 8002fce:	6828      	ldr	r0, [r5, #0]
 8002fd0:	f003 ff9e 	bl	8006f10 <USB_EPStartXfer>
 8002fd4:	e687      	b.n	8002ce6 <PCD_EP_ISR_Handler+0xfc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	f47f aece 	bne.w	8002d78 <PCD_EP_ISR_Handler+0x18e>
 8002fdc:	682a      	ldr	r2, [r5, #0]
 8002fde:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002fe2:	fa12 f383 	uxtah	r3, r2, r3
 8002fe6:	1c62      	adds	r2, r4, #1
 8002fe8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002fec:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8002ff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002ffa:	e6bd      	b.n	8002d78 <PCD_EP_ISR_Handler+0x18e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ffc:	682a      	ldr	r2, [r5, #0]
 8002ffe:	1c63      	adds	r3, r4, #1
 8003000:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003004:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003008:	785b      	ldrb	r3, [r3, #1]
 800300a:	b9e3      	cbnz	r3, 8003046 <PCD_EP_ISR_Handler+0x45c>
 800300c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003010:	fa12 f383 	uxtah	r3, r2, r3
 8003014:	1c62      	adds	r2, r4, #1
 8003016:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800301a:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 800301e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003022:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8003026:	b292      	uxth	r2, r2
 8003028:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800302c:	b292      	uxth	r2, r2
 800302e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003032:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8003036:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800303a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800303e:	b292      	uxth	r2, r2
 8003040:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003044:	e698      	b.n	8002d78 <PCD_EP_ISR_Handler+0x18e>
 8003046:	2b01      	cmp	r3, #1
 8003048:	f47f ae96 	bne.w	8002d78 <PCD_EP_ISR_Handler+0x18e>
 800304c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003050:	fa12 f383 	uxtah	r3, r2, r3
 8003054:	1c62      	adds	r2, r4, #1
 8003056:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800305a:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 800305e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003062:	2200      	movs	r2, #0
 8003064:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003068:	e686      	b.n	8002d78 <PCD_EP_ISR_Handler+0x18e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 800306a:	f416 7f80 	tst.w	r6, #256	; 0x100
 800306e:	d13b      	bne.n	80030e8 <PCD_EP_ISR_Handler+0x4fe>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003070:	6828      	ldr	r0, [r5, #0]
 8003072:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003076:	1c62      	adds	r2, r4, #1
 8003078:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800307c:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 8003080:	00f2      	lsls	r2, r6, #3
 8003082:	fa12 f383 	uxtah	r3, r2, r3
 8003086:	4403      	add	r3, r0
 8003088:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800308c:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8003090:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003094:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003098:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800309a:	429a      	cmp	r2, r3
 800309c:	d910      	bls.n	80030c0 <PCD_EP_ISR_Handler+0x4d6>
              ep->xfer_len -= TxPctSize;
 800309e:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 80030a2:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 80030a6:	1ad2      	subs	r2, r2, r3
 80030a8:	643a      	str	r2, [r7, #64]	; 0x40
            if (ep->xfer_len == 0U)
 80030aa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80030ae:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80030b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030b4:	b95a      	cbnz	r2, 80030ce <PCD_EP_ISR_Handler+0x4e4>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030b6:	4631      	mov	r1, r6
 80030b8:	4628      	mov	r0, r5
 80030ba:	f00e facb 	bl	8011654 <HAL_PCD_DataInStageCallback>
 80030be:	e663      	b.n	8002d88 <PCD_EP_ISR_Handler+0x19e>
              ep->xfer_len = 0U;
 80030c0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80030c4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80030c8:	2700      	movs	r7, #0
 80030ca:	6417      	str	r7, [r2, #64]	; 0x40
 80030cc:	e7ed      	b.n	80030aa <PCD_EP_ISR_Handler+0x4c0>
              ep->xfer_buff += TxPctSize;
 80030ce:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80030d2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80030d6:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 80030d8:	441e      	add	r6, r3
 80030da:	63d6      	str	r6, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 80030dc:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80030de:	4423      	add	r3, r4
 80030e0:	6453      	str	r3, [r2, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030e2:	f003 ff15 	bl	8006f10 <USB_EPStartXfer>
 80030e6:	e64f      	b.n	8002d88 <PCD_EP_ISR_Handler+0x19e>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80030e8:	4632      	mov	r2, r6
 80030ea:	4628      	mov	r0, r5
 80030ec:	f7ff fb75 	bl	80027da <HAL_PCD_EP_DB_Transmit>
 80030f0:	e64a      	b.n	8002d88 <PCD_EP_ISR_Handler+0x19e>
}
 80030f2:	2000      	movs	r0, #0
 80030f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080030f8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80030f8:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d00d      	beq.n	800311c <HAL_PCD_SetAddress+0x24>
{
 8003100:	b510      	push	{r4, lr}
 8003102:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003104:	2301      	movs	r3, #1
 8003106:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800310a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800310e:	6800      	ldr	r0, [r0, #0]
 8003110:	f003 fed7 	bl	8006ec2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003114:	2000      	movs	r0, #0
 8003116:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800311a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800311c:	2002      	movs	r0, #2
}
 800311e:	4770      	bx	lr

08003120 <HAL_PCD_IRQHandler>:
{
 8003120:	b510      	push	{r4, lr}
 8003122:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003124:	6800      	ldr	r0, [r0, #0]
 8003126:	f003 fedd 	bl	8006ee4 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800312a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800312e:	d123      	bne.n	8003178 <HAL_PCD_IRQHandler+0x58>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003130:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8003134:	d124      	bne.n	8003180 <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003136:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800313a:	d132      	bne.n	80031a2 <HAL_PCD_IRQHandler+0x82>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800313c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8003140:	d139      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x96>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003142:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8003146:	d140      	bne.n	80031ca <HAL_PCD_IRQHandler+0xaa>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003148:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800314c:	d167      	bne.n	800321e <HAL_PCD_IRQHandler+0xfe>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800314e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003152:	f040 8081 	bne.w	8003258 <HAL_PCD_IRQHandler+0x138>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003156:	f410 7f00 	tst.w	r0, #512	; 0x200
 800315a:	f040 80ad 	bne.w	80032b8 <HAL_PCD_IRQHandler+0x198>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800315e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003162:	d027      	beq.n	80031b4 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003164:	6822      	ldr	r2, [r4, #0]
 8003166:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800316a:	b29b      	uxth	r3, r3
 800316c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003170:	b29b      	uxth	r3, r3
 8003172:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8003176:	e01d      	b.n	80031b4 <HAL_PCD_IRQHandler+0x94>
    (void)PCD_EP_ISR_Handler(hpcd);
 8003178:	4620      	mov	r0, r4
 800317a:	f7ff fd36 	bl	8002bea <PCD_EP_ISR_Handler>
    return;
 800317e:	e019      	b.n	80031b4 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003180:	6822      	ldr	r2, [r4, #0]
 8003182:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003186:	b29b      	uxth	r3, r3
 8003188:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800318c:	b29b      	uxth	r3, r3
 800318e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003192:	4620      	mov	r0, r4
 8003194:	f00e fa6f 	bl	8011676 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003198:	2100      	movs	r1, #0
 800319a:	4620      	mov	r0, r4
 800319c:	f7ff ffac 	bl	80030f8 <HAL_PCD_SetAddress>
    return;
 80031a0:	e008      	b.n	80031b4 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80031a2:	6822      	ldr	r2, [r4, #0]
 80031a4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80031b4:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80031b6:	6822      	ldr	r2, [r4, #0]
 80031b8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80031c8:	e7f4      	b.n	80031b4 <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80031ca:	6822      	ldr	r2, [r4, #0]
 80031cc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f023 0304 	bic.w	r3, r3, #4
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80031dc:	6822      	ldr	r2, [r4, #0]
 80031de:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f023 0308 	bic.w	r3, r3, #8
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 80031ee:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d00c      	beq.n	8003210 <HAL_PCD_IRQHandler+0xf0>
    HAL_PCD_ResumeCallback(hpcd);
 80031f6:	4620      	mov	r0, r4
 80031f8:	f00e fa60 	bl	80116bc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80031fc:	6822      	ldr	r2, [r4, #0]
 80031fe:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003202:	b29b      	uxth	r3, r3
 8003204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003208:	b29b      	uxth	r3, r3
 800320a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 800320e:	e7d1      	b.n	80031b4 <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 8003210:	2100      	movs	r1, #0
 8003212:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003216:	4620      	mov	r0, r4
 8003218:	f00e fb08 	bl	801182c <HAL_PCDEx_LPM_Callback>
 800321c:	e7eb      	b.n	80031f6 <HAL_PCD_IRQHandler+0xd6>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003224:	b29b      	uxth	r3, r3
 8003226:	f043 0308 	orr.w	r3, r3, #8
 800322a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800322e:	6822      	ldr	r2, [r4, #0]
 8003230:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003234:	b29b      	uxth	r3, r3
 8003236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800323a:	b29b      	uxth	r3, r3
 800323c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003240:	6822      	ldr	r2, [r4, #0]
 8003242:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003246:	b29b      	uxth	r3, r3
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8003250:	4620      	mov	r0, r4
 8003252:	f00e fa23 	bl	801169c <HAL_PCD_SuspendCallback>
    return;
 8003256:	e7ad      	b.n	80031b4 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003258:	6822      	ldr	r2, [r4, #0]
 800325a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800325e:	b29b      	uxth	r3, r3
 8003260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003264:	b29b      	uxth	r3, r3
 8003266:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800326a:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 800326e:	b9fb      	cbnz	r3, 80032b0 <HAL_PCD_IRQHandler+0x190>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003270:	6822      	ldr	r2, [r4, #0]
 8003272:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003276:	b29b      	uxth	r3, r3
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003280:	6822      	ldr	r2, [r4, #0]
 8003282:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003286:	b29b      	uxth	r3, r3
 8003288:	f043 0308 	orr.w	r3, r3, #8
 800328c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8003290:	2101      	movs	r1, #1
 8003292:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800329c:	f3c3 038d 	ubfx	r3, r3, #2, #14
 80032a0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80032a4:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80032a8:	4620      	mov	r0, r4
 80032aa:	f00e fabf 	bl	801182c <HAL_PCDEx_LPM_Callback>
 80032ae:	e781      	b.n	80031b4 <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_SuspendCallback(hpcd);
 80032b0:	4620      	mov	r0, r4
 80032b2:	f00e f9f3 	bl	801169c <HAL_PCD_SuspendCallback>
    return;
 80032b6:	e77d      	b.n	80031b4 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032be:	b29b      	uxth	r3, r3
 80032c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80032ca:	4620      	mov	r0, r4
 80032cc:	f00e f9cd 	bl	801166a <HAL_PCD_SOFCallback>
    return;
 80032d0:	e770      	b.n	80031b4 <HAL_PCD_IRQHandler+0x94>

080032d2 <HAL_PCD_EP_Open>:
{
 80032d2:	b510      	push	{r4, lr}
 80032d4:	4604      	mov	r4, r0
 80032d6:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80032d8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80032dc:	d12a      	bne.n	8003334 <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032de:	f001 0007 	and.w	r0, r1, #7
 80032e2:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80032e6:	00c9      	lsls	r1, r1, #3
 80032e8:	f501 7eb4 	add.w	lr, r1, #360	; 0x168
 80032ec:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 80032f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032f4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80032f8:	f04f 0e00 	mov.w	lr, #0
 80032fc:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003300:	f00c 0c07 	and.w	ip, ip, #7
 8003304:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8003308:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800330a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800330c:	784a      	ldrb	r2, [r1, #1]
 800330e:	b10a      	cbz	r2, 8003314 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8003310:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8003314:	2b02      	cmp	r3, #2
 8003316:	d019      	beq.n	800334c <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 8003318:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800331c:	2b01      	cmp	r3, #1
 800331e:	d018      	beq.n	8003352 <HAL_PCD_EP_Open+0x80>
 8003320:	2301      	movs	r3, #1
 8003322:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003326:	6820      	ldr	r0, [r4, #0]
 8003328:	f003 fa9e 	bl	8006868 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800332c:	2000      	movs	r0, #0
 800332e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003332:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003334:	f001 0007 	and.w	r0, r1, #7
 8003338:	3001      	adds	r0, #1
 800333a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 800333e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8003342:	f04f 0e01 	mov.w	lr, #1
 8003346:	f881 e001 	strb.w	lr, [r1, #1]
 800334a:	e7d9      	b.n	8003300 <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	710b      	strb	r3, [r1, #4]
 8003350:	e7e2      	b.n	8003318 <HAL_PCD_EP_Open+0x46>
  __HAL_LOCK(hpcd);
 8003352:	2002      	movs	r0, #2
 8003354:	e7ed      	b.n	8003332 <HAL_PCD_EP_Open+0x60>

08003356 <HAL_PCD_EP_Close>:
{
 8003356:	b510      	push	{r4, lr}
 8003358:	4604      	mov	r4, r0
 800335a:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800335c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003360:	d11f      	bne.n	80033a2 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003362:	f001 0207 	and.w	r2, r1, #7
 8003366:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800336a:	00c9      	lsls	r1, r1, #3
 800336c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003370:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003372:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003376:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800337a:	2000      	movs	r0, #0
 800337c:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003386:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800338a:	2b01      	cmp	r3, #1
 800338c:	d013      	beq.n	80033b6 <HAL_PCD_EP_Close+0x60>
 800338e:	2301      	movs	r3, #1
 8003390:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003394:	6820      	ldr	r0, [r4, #0]
 8003396:	f003 fc33 	bl	8006c00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800339a:	2000      	movs	r0, #0
 800339c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80033a0:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a2:	f001 0207 	and.w	r2, r1, #7
 80033a6:	3201      	adds	r2, #1
 80033a8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80033ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80033b0:	2001      	movs	r0, #1
 80033b2:	7048      	strb	r0, [r1, #1]
 80033b4:	e7e4      	b.n	8003380 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 80033b6:	2002      	movs	r0, #2
 80033b8:	e7f2      	b.n	80033a0 <HAL_PCD_EP_Close+0x4a>

080033ba <HAL_PCD_EP_Receive>:
{
 80033ba:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033bc:	f001 0407 	and.w	r4, r1, #7
 80033c0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80033c4:	00c9      	lsls	r1, r1, #3
 80033c6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80033ca:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80033cc:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 80033d0:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80033d4:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 80033d8:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 80033e2:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e6:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033ea:	b924      	cbnz	r4, 80033f6 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80033ec:	6800      	ldr	r0, [r0, #0]
 80033ee:	f003 fd8f 	bl	8006f10 <USB_EPStartXfer>
}
 80033f2:	2000      	movs	r0, #0
 80033f4:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033f6:	6800      	ldr	r0, [r0, #0]
 80033f8:	f003 fd8a 	bl	8006f10 <USB_EPStartXfer>
 80033fc:	e7f9      	b.n	80033f2 <HAL_PCD_EP_Receive+0x38>

080033fe <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033fe:	f001 0107 	and.w	r1, r1, #7
 8003402:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003406:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 800340a:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 800340e:	4770      	bx	lr

08003410 <HAL_PCD_EP_Transmit>:
{
 8003410:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003412:	f001 0407 	and.w	r4, r1, #7
 8003416:	f104 0c01 	add.w	ip, r4, #1
 800341a:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 800341e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8003422:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 8003426:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 800342a:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
  ep->xfer_len = len;
 800342e:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8003432:	2201      	movs	r2, #1
 8003434:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
  ep->xfer_len_db = len;
 8003438:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  ep->xfer_count = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
  ep->is_in = 1U;
 8003442:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003444:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003448:	f800 403c 	strb.w	r4, [r0, ip, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800344c:	b924      	cbnz	r4, 8003458 <HAL_PCD_EP_Transmit+0x48>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800344e:	6800      	ldr	r0, [r0, #0]
 8003450:	f003 fd5e 	bl	8006f10 <USB_EPStartXfer>
}
 8003454:	2000      	movs	r0, #0
 8003456:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003458:	6800      	ldr	r0, [r0, #0]
 800345a:	f003 fd59 	bl	8006f10 <USB_EPStartXfer>
 800345e:	e7f9      	b.n	8003454 <HAL_PCD_EP_Transmit+0x44>

08003460 <HAL_PCD_EP_SetStall>:
{
 8003460:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003462:	f001 0207 	and.w	r2, r1, #7
 8003466:	6841      	ldr	r1, [r0, #4]
 8003468:	428a      	cmp	r2, r1
 800346a:	d82a      	bhi.n	80034c2 <HAL_PCD_EP_SetStall+0x62>
{
 800346c:	b510      	push	{r4, lr}
 800346e:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8003470:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003474:	d11d      	bne.n	80034b2 <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 8003476:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800347a:	00c9      	lsls	r1, r1, #3
 800347c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003480:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003482:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003486:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800348a:	2000      	movs	r0, #0
 800348c:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8003490:	2301      	movs	r3, #1
 8003492:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003494:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003496:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800349a:	2b01      	cmp	r3, #1
 800349c:	d013      	beq.n	80034c6 <HAL_PCD_EP_SetStall+0x66>
 800349e:	2301      	movs	r3, #1
 80034a0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034a4:	6820      	ldr	r0, [r4, #0]
 80034a6:	f003 fc96 	bl	8006dd6 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80034aa:	2000      	movs	r0, #0
 80034ac:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80034b0:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b2:	1c53      	adds	r3, r2, #1
 80034b4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80034b8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80034bc:	2001      	movs	r0, #1
 80034be:	7048      	strb	r0, [r1, #1]
 80034c0:	e7e6      	b.n	8003490 <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 80034c2:	2001      	movs	r0, #1
}
 80034c4:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80034c6:	2002      	movs	r0, #2
 80034c8:	e7f2      	b.n	80034b0 <HAL_PCD_EP_SetStall+0x50>

080034ca <HAL_PCD_EP_ClrStall>:
{
 80034ca:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034cc:	f001 010f 	and.w	r1, r1, #15
 80034d0:	6842      	ldr	r2, [r0, #4]
 80034d2:	4291      	cmp	r1, r2
 80034d4:	d830      	bhi.n	8003538 <HAL_PCD_EP_ClrStall+0x6e>
{
 80034d6:	b510      	push	{r4, lr}
 80034d8:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80034da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80034de:	d121      	bne.n	8003524 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e0:	f003 0207 	and.w	r2, r3, #7
 80034e4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80034e8:	00c9      	lsls	r1, r1, #3
 80034ea:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80034ee:	4401      	add	r1, r0
    ep->is_in = 0U;
 80034f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80034f4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80034f8:	2000      	movs	r0, #0
 80034fa:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 80034fe:	2200      	movs	r2, #0
 8003500:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003508:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800350c:	2b01      	cmp	r3, #1
 800350e:	d015      	beq.n	800353c <HAL_PCD_EP_ClrStall+0x72>
 8003510:	2301      	movs	r3, #1
 8003512:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003516:	6820      	ldr	r0, [r4, #0]
 8003518:	f003 fc82 	bl	8006e20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800351c:	2000      	movs	r0, #0
 800351e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003522:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003524:	f003 0207 	and.w	r2, r3, #7
 8003528:	3201      	adds	r2, #1
 800352a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800352e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003532:	2001      	movs	r0, #1
 8003534:	7048      	strb	r0, [r1, #1]
 8003536:	e7e2      	b.n	80034fe <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8003538:	2001      	movs	r0, #1
}
 800353a:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800353c:	2002      	movs	r0, #2
 800353e:	e7f0      	b.n	8003522 <HAL_PCD_EP_ClrStall+0x58>

08003540 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003540:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003544:	d00b      	beq.n	800355e <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003546:	f001 0107 	and.w	r1, r1, #7
 800354a:	3101      	adds	r1, #1
 800354c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003550:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003554:	b952      	cbnz	r2, 800356c <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003556:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003558:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800355a:	2000      	movs	r0, #0
 800355c:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800355e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003562:	00c9      	lsls	r1, r1, #3
 8003564:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003568:	4408      	add	r0, r1
 800356a:	e7f3      	b.n	8003554 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 800356c:	2201      	movs	r2, #1
 800356e:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003570:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	8143      	strh	r3, [r0, #10]
 8003576:	e7f0      	b.n	800355a <HAL_PCDEx_PMAConfig+0x1a>

08003578 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003578:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 800357a:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 800357c:	2101      	movs	r1, #1
 800357e:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003582:	2000      	movs	r0, #0
 8003584:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003588:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800358c:	b29b      	uxth	r3, r3
 800358e:	430b      	orrs	r3, r1
 8003590:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003594:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8003598:	b29b      	uxth	r3, r3
 800359a:	f043 0302 	orr.w	r3, r3, #2
 800359e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80035a2:	4770      	bx	lr

080035a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035a4:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80035a6:	4604      	mov	r4, r0
 80035a8:	b128      	cbz	r0, 80035b6 <HAL_PWREx_ControlVoltageScaling+0x12>
 80035aa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80035ae:	d002      	beq.n	80035b6 <HAL_PWREx_ControlVoltageScaling+0x12>
 80035b0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80035b4:	d111      	bne.n	80035da <HAL_PWREx_ControlVoltageScaling+0x36>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035b6:	2c00      	cmp	r4, #0
 80035b8:	d13b      	bne.n	8003632 <HAL_PWREx_ControlVoltageScaling+0x8e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ba:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c6:	d00d      	beq.n	80035e4 <HAL_PWREx_ControlVoltageScaling+0x40>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035c8:	4a3d      	ldr	r2, [pc, #244]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 80035ca:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80035ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80035d6:	2000      	movs	r0, #0
}
 80035d8:	bd10      	pop	{r4, pc}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80035da:	219d      	movs	r1, #157	; 0x9d
 80035dc:	4839      	ldr	r0, [pc, #228]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0x120>)
 80035de:	f7fd fb44 	bl	8000c6a <assert_failed>
 80035e2:	e7e8      	b.n	80035b6 <HAL_PWREx_ControlVoltageScaling+0x12>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035e4:	4a36      	ldr	r2, [pc, #216]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 80035e6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80035ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035f2:	6813      	ldr	r3, [r2, #0]
 80035f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035fc:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035fe:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0x124>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2232      	movs	r2, #50	; 0x32
 8003604:	fb02 f303 	mul.w	r3, r2, r3
 8003608:	4a30      	ldr	r2, [pc, #192]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0x128>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	0c9b      	lsrs	r3, r3, #18
 8003610:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003612:	e000      	b.n	8003616 <HAL_PWREx_ControlVoltageScaling+0x72>
        wait_loop_index--;
 8003614:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003616:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 8003618:	6952      	ldr	r2, [r2, #20]
 800361a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800361e:	d001      	beq.n	8003624 <HAL_PWREx_ControlVoltageScaling+0x80>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f7      	bne.n	8003614 <HAL_PWREx_ControlVoltageScaling+0x70>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003624:	4b26      	ldr	r3, [pc, #152]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800362c:	d144      	bne.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x114>
  return HAL_OK;
 800362e:	2000      	movs	r0, #0
 8003630:	e7d2      	b.n	80035d8 <HAL_PWREx_ControlVoltageScaling+0x34>
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003632:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8003636:	d008      	beq.n	800364a <HAL_PWREx_ControlVoltageScaling+0xa6>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003638:	4a21      	ldr	r2, [pc, #132]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003640:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003644:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003646:	2000      	movs	r0, #0
 8003648:	e7c6      	b.n	80035d8 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800364a:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003656:	d008      	beq.n	800366a <HAL_PWREx_ControlVoltageScaling+0xc6>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800365a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800365e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003662:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8003666:	2000      	movs	r0, #0
 8003668:	e7b6      	b.n	80035d8 <HAL_PWREx_ControlVoltageScaling+0x34>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800366a:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800366c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003678:	6813      	ldr	r3, [r2, #0]
 800367a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800367e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003682:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003684:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0x124>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2232      	movs	r2, #50	; 0x32
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	4a0f      	ldr	r2, [pc, #60]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0x128>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	0c9b      	lsrs	r3, r3, #18
 8003696:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003698:	e000      	b.n	800369c <HAL_PWREx_ControlVoltageScaling+0xf8>
        wait_loop_index--;
 800369a:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369c:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800369e:	6952      	ldr	r2, [r2, #20]
 80036a0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80036a4:	d001      	beq.n	80036aa <HAL_PWREx_ControlVoltageScaling+0x106>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f7      	bne.n	800369a <HAL_PWREx_ControlVoltageScaling+0xf6>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80036b2:	d103      	bne.n	80036bc <HAL_PWREx_ControlVoltageScaling+0x118>
  return HAL_OK;
 80036b4:	2000      	movs	r0, #0
 80036b6:	e78f      	b.n	80035d8 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 80036b8:	2003      	movs	r0, #3
 80036ba:	e78d      	b.n	80035d8 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 80036bc:	2003      	movs	r0, #3
 80036be:	e78b      	b.n	80035d8 <HAL_PWREx_ControlVoltageScaling+0x34>
 80036c0:	40007000 	.word	0x40007000
 80036c4:	08012e7c 	.word	0x08012e7c
 80036c8:	20000000 	.word	0x20000000
 80036cc:	431bde83 	.word	0x431bde83

080036d0 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036de:	3301      	adds	r3, #1

  switch (pllsource)
 80036e0:	2a03      	cmp	r2, #3
 80036e2:	d011      	beq.n	8003708 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e4:	480e      	ldr	r0, [pc, #56]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 80036e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80036ea:	4b0c      	ldr	r3, [pc, #48]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80036f2:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80036fe:	3301      	adds	r3, #1
 8003700:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8003702:	fbb0 f0f3 	udiv	r0, r0, r3
 8003706:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003708:	4805      	ldr	r0, [pc, #20]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 800370a:	fbb0 f0f3 	udiv	r0, r0, r3
 800370e:	4b03      	ldr	r3, [pc, #12]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8003716:	fb03 f000 	mul.w	r0, r3, r0
    break;
 800371a:	e7ec      	b.n	80036f6 <RCC_GetSysClockFreqFromPLLSource+0x26>
 800371c:	40021000 	.word	0x40021000
 8003720:	00f42400 	.word	0x00f42400

08003724 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003724:	2800      	cmp	r0, #0
 8003726:	f000 8301 	beq.w	8003d2c <HAL_RCC_OscConfig+0x608>
{
 800372a:	b570      	push	{r4, r5, r6, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003730:	6803      	ldr	r3, [r0, #0]
 8003732:	b113      	cbz	r3, 800373a <HAL_RCC_OscConfig+0x16>
 8003734:	f013 0f2f 	tst.w	r3, #47	; 0x2f
 8003738:	d038      	beq.n	80037ac <HAL_RCC_OscConfig+0x88>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	f013 0f01 	tst.w	r3, #1
 8003740:	d04b      	beq.n	80037da <HAL_RCC_OscConfig+0xb6>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003742:	6863      	ldr	r3, [r4, #4]
 8003744:	b12b      	cbz	r3, 8003752 <HAL_RCC_OscConfig+0x2e>
 8003746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374a:	d002      	beq.n	8003752 <HAL_RCC_OscConfig+0x2e>
 800374c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003750:	d132      	bne.n	80037b8 <HAL_RCC_OscConfig+0x94>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003752:	4a8b      	ldr	r2, [pc, #556]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 8003754:	6893      	ldr	r3, [r2, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800375a:	68d2      	ldr	r2, [r2, #12]
 800375c:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003760:	2b0c      	cmp	r3, #12
 8003762:	d02f      	beq.n	80037c4 <HAL_RCC_OscConfig+0xa0>
 8003764:	2b08      	cmp	r3, #8
 8003766:	d02f      	beq.n	80037c8 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003768:	6863      	ldr	r3, [r4, #4]
 800376a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376e:	d063      	beq.n	8003838 <HAL_RCC_OscConfig+0x114>
 8003770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003774:	d066      	beq.n	8003844 <HAL_RCC_OscConfig+0x120>
 8003776:	4b82      	ldr	r3, [pc, #520]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003786:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003788:	6863      	ldr	r3, [r4, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d067      	beq.n	800385e <HAL_RCC_OscConfig+0x13a>
        tickstart = HAL_GetTick();
 800378e:	f7fd fd03 	bl	8001198 <HAL_GetTick>
 8003792:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003794:	4b7a      	ldr	r3, [pc, #488]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800379c:	d11d      	bne.n	80037da <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800379e:	f7fd fcfb 	bl	8001198 <HAL_GetTick>
 80037a2:	1b40      	subs	r0, r0, r5
 80037a4:	2864      	cmp	r0, #100	; 0x64
 80037a6:	d9f5      	bls.n	8003794 <HAL_RCC_OscConfig+0x70>
            return HAL_TIMEOUT;
 80037a8:	2003      	movs	r0, #3
 80037aa:	e2c8      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80037ac:	f240 1145 	movw	r1, #325	; 0x145
 80037b0:	4874      	ldr	r0, [pc, #464]	; (8003984 <HAL_RCC_OscConfig+0x260>)
 80037b2:	f7fd fa5a 	bl	8000c6a <assert_failed>
 80037b6:	e7c0      	b.n	800373a <HAL_RCC_OscConfig+0x16>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80037b8:	f240 114b 	movw	r1, #331	; 0x14b
 80037bc:	4871      	ldr	r0, [pc, #452]	; (8003984 <HAL_RCC_OscConfig+0x260>)
 80037be:	f7fd fa54 	bl	8000c6a <assert_failed>
 80037c2:	e7c6      	b.n	8003752 <HAL_RCC_OscConfig+0x2e>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037c4:	2a03      	cmp	r2, #3
 80037c6:	d1cd      	bne.n	8003764 <HAL_RCC_OscConfig+0x40>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	4b6d      	ldr	r3, [pc, #436]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037d0:	d003      	beq.n	80037da <HAL_RCC_OscConfig+0xb6>
 80037d2:	6863      	ldr	r3, [r4, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 82ab 	beq.w	8003d30 <HAL_RCC_OscConfig+0x60c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	f013 0f02 	tst.w	r3, #2
 80037e0:	d072      	beq.n	80038c8 <HAL_RCC_OscConfig+0x1a4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80037e2:	68e3      	ldr	r3, [r4, #12]
 80037e4:	b113      	cbz	r3, 80037ec <HAL_RCC_OscConfig+0xc8>
 80037e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ea:	d147      	bne.n	800387c <HAL_RCC_OscConfig+0x158>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80037ec:	6923      	ldr	r3, [r4, #16]
 80037ee:	2b7f      	cmp	r3, #127	; 0x7f
 80037f0:	d84a      	bhi.n	8003888 <HAL_RCC_OscConfig+0x164>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f2:	4a63      	ldr	r2, [pc, #396]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 80037f4:	6893      	ldr	r3, [r2, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037fa:	68d2      	ldr	r2, [r2, #12]
 80037fc:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003800:	2b0c      	cmp	r3, #12
 8003802:	d047      	beq.n	8003894 <HAL_RCC_OscConfig+0x170>
 8003804:	2b04      	cmp	r3, #4
 8003806:	d047      	beq.n	8003898 <HAL_RCC_OscConfig+0x174>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003808:	68e3      	ldr	r3, [r4, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8086 	beq.w	800391c <HAL_RCC_OscConfig+0x1f8>
        __HAL_RCC_HSI_ENABLE();
 8003810:	4a5b      	ldr	r2, [pc, #364]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 8003812:	6813      	ldr	r3, [r2, #0]
 8003814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003818:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800381a:	f7fd fcbd 	bl	8001198 <HAL_GetTick>
 800381e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003820:	4b57      	ldr	r3, [pc, #348]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003828:	d16f      	bne.n	800390a <HAL_RCC_OscConfig+0x1e6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382a:	f7fd fcb5 	bl	8001198 <HAL_GetTick>
 800382e:	1b40      	subs	r0, r0, r5
 8003830:	2802      	cmp	r0, #2
 8003832:	d9f5      	bls.n	8003820 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8003834:	2003      	movs	r0, #3
 8003836:	e282      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003838:	4a51      	ldr	r2, [pc, #324]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 800383a:	6813      	ldr	r3, [r2, #0]
 800383c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	e7a1      	b.n	8003788 <HAL_RCC_OscConfig+0x64>
 8003844:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003848:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e794      	b.n	8003788 <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
 800385e:	f7fd fc9b 	bl	8001198 <HAL_GetTick>
 8003862:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003864:	4b46      	ldr	r3, [pc, #280]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800386c:	d0b5      	beq.n	80037da <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800386e:	f7fd fc93 	bl	8001198 <HAL_GetTick>
 8003872:	1b40      	subs	r0, r0, r5
 8003874:	2864      	cmp	r0, #100	; 0x64
 8003876:	d9f5      	bls.n	8003864 <HAL_RCC_OscConfig+0x140>
            return HAL_TIMEOUT;
 8003878:	2003      	movs	r0, #3
 800387a:	e260      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800387c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8003880:	4840      	ldr	r0, [pc, #256]	; (8003984 <HAL_RCC_OscConfig+0x260>)
 8003882:	f7fd f9f2 	bl	8000c6a <assert_failed>
 8003886:	e7b1      	b.n	80037ec <HAL_RCC_OscConfig+0xc8>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003888:	f240 1181 	movw	r1, #385	; 0x181
 800388c:	483d      	ldr	r0, [pc, #244]	; (8003984 <HAL_RCC_OscConfig+0x260>)
 800388e:	f7fd f9ec 	bl	8000c6a <assert_failed>
 8003892:	e7ae      	b.n	80037f2 <HAL_RCC_OscConfig+0xce>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003894:	2a02      	cmp	r2, #2
 8003896:	d1b5      	bne.n	8003804 <HAL_RCC_OscConfig+0xe0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003898:	4b39      	ldr	r3, [pc, #228]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_OscConfig+0x186>
 80038a2:	68e3      	ldr	r3, [r4, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8245 	beq.w	8003d34 <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038aa:	4a35      	ldr	r2, [pc, #212]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 80038ac:	6853      	ldr	r3, [r2, #4]
 80038ae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80038b2:	6921      	ldr	r1, [r4, #16]
 80038b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80038b8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038ba:	4b33      	ldr	r3, [pc, #204]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	f7fd fa89 	bl	8000dd4 <HAL_InitTick>
 80038c2:	2800      	cmp	r0, #0
 80038c4:	f040 8238 	bne.w	8003d38 <HAL_RCC_OscConfig+0x614>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	f013 0f08 	tst.w	r3, #8
 80038ce:	d05d      	beq.n	800398c <HAL_RCC_OscConfig+0x268>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80038d0:	6963      	ldr	r3, [r4, #20]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d836      	bhi.n	8003944 <HAL_RCC_OscConfig+0x220>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d6:	6963      	ldr	r3, [r4, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d039      	beq.n	8003950 <HAL_RCC_OscConfig+0x22c>
      __HAL_RCC_LSI_ENABLE();
 80038dc:	4a28      	ldr	r2, [pc, #160]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 80038de:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80038ea:	f7fd fc55 	bl	8001198 <HAL_GetTick>
 80038ee:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038f0:	4b23      	ldr	r3, [pc, #140]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 80038f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f6:	f013 0f02 	tst.w	r3, #2
 80038fa:	d147      	bne.n	800398c <HAL_RCC_OscConfig+0x268>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038fc:	f7fd fc4c 	bl	8001198 <HAL_GetTick>
 8003900:	1b40      	subs	r0, r0, r5
 8003902:	2802      	cmp	r0, #2
 8003904:	d9f4      	bls.n	80038f0 <HAL_RCC_OscConfig+0x1cc>
          return HAL_TIMEOUT;
 8003906:	2003      	movs	r0, #3
 8003908:	e219      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390a:	4a1d      	ldr	r2, [pc, #116]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 800390c:	6853      	ldr	r3, [r2, #4]
 800390e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003912:	6921      	ldr	r1, [r4, #16]
 8003914:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003918:	6053      	str	r3, [r2, #4]
 800391a:	e7d5      	b.n	80038c8 <HAL_RCC_OscConfig+0x1a4>
        __HAL_RCC_HSI_DISABLE();
 800391c:	4a18      	ldr	r2, [pc, #96]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 800391e:	6813      	ldr	r3, [r2, #0]
 8003920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003924:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003926:	f7fd fc37 	bl	8001198 <HAL_GetTick>
 800392a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800392c:	4b14      	ldr	r3, [pc, #80]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003934:	d0c8      	beq.n	80038c8 <HAL_RCC_OscConfig+0x1a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003936:	f7fd fc2f 	bl	8001198 <HAL_GetTick>
 800393a:	1b40      	subs	r0, r0, r5
 800393c:	2802      	cmp	r0, #2
 800393e:	d9f5      	bls.n	800392c <HAL_RCC_OscConfig+0x208>
            return HAL_TIMEOUT;
 8003940:	2003      	movs	r0, #3
 8003942:	e1fc      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003944:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8003948:	480e      	ldr	r0, [pc, #56]	; (8003984 <HAL_RCC_OscConfig+0x260>)
 800394a:	f7fd f98e 	bl	8000c6a <assert_failed>
 800394e:	e7c2      	b.n	80038d6 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_LSI_DISABLE();
 8003950:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 8003952:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800395e:	f7fd fc1b 	bl	8001198 <HAL_GetTick>
 8003962:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCC_OscConfig+0x25c>)
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396a:	f013 0f02 	tst.w	r3, #2
 800396e:	d00d      	beq.n	800398c <HAL_RCC_OscConfig+0x268>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003970:	f7fd fc12 	bl	8001198 <HAL_GetTick>
 8003974:	1b40      	subs	r0, r0, r5
 8003976:	2802      	cmp	r0, #2
 8003978:	d9f4      	bls.n	8003964 <HAL_RCC_OscConfig+0x240>
          return HAL_TIMEOUT;
 800397a:	2003      	movs	r0, #3
 800397c:	e1df      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	08012eb8 	.word	0x08012eb8
 8003988:	20000008 	.word	0x20000008
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	f013 0f04 	tst.w	r3, #4
 8003992:	f000 8086 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x37e>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003996:	68a3      	ldr	r3, [r4, #8]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x27c>
 800399c:	2b05      	cmp	r3, #5
 800399e:	d13b      	bne.n	8003a18 <HAL_RCC_OscConfig+0x2f4>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039a0:	4b9e      	ldr	r3, [pc, #632]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 80039a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80039a8:	d13c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x300>
      __HAL_RCC_PWR_CLK_ENABLE();
 80039aa:	4b9c      	ldr	r3, [pc, #624]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 80039ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039b2:	659a      	str	r2, [r3, #88]	; 0x58
 80039b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80039be:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c0:	4b97      	ldr	r3, [pc, #604]	; (8003c20 <HAL_RCC_OscConfig+0x4fc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039c8:	d02e      	beq.n	8003a28 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ca:	68a3      	ldr	r3, [r4, #8]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d03f      	beq.n	8003a50 <HAL_RCC_OscConfig+0x32c>
 80039d0:	2b05      	cmp	r3, #5
 80039d2:	d045      	beq.n	8003a60 <HAL_RCC_OscConfig+0x33c>
 80039d4:	4b91      	ldr	r3, [pc, #580]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 80039d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80039da:	f022 0201 	bic.w	r2, r2, #1
 80039de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80039e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80039e6:	f022 0204 	bic.w	r2, r2, #4
 80039ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ee:	68a3      	ldr	r3, [r4, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d043      	beq.n	8003a7c <HAL_RCC_OscConfig+0x358>
      tickstart = HAL_GetTick();
 80039f4:	f7fd fbd0 	bl	8001198 <HAL_GetTick>
 80039f8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039fa:	4b88      	ldr	r3, [pc, #544]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a00:	f013 0f02 	tst.w	r3, #2
 8003a04:	d14c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7fd fbc7 	bl	8001198 <HAL_GetTick>
 8003a0a:	1b80      	subs	r0, r0, r6
 8003a0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a10:	4298      	cmp	r0, r3
 8003a12:	d9f2      	bls.n	80039fa <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 8003a14:	2003      	movs	r0, #3
 8003a16:	e192      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003a18:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003a1c:	4881      	ldr	r0, [pc, #516]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003a1e:	f7fd f924 	bl	8000c6a <assert_failed>
 8003a22:	e7bd      	b.n	80039a0 <HAL_RCC_OscConfig+0x27c>
    FlagStatus       pwrclkchanged = RESET;
 8003a24:	2500      	movs	r5, #0
 8003a26:	e7cb      	b.n	80039c0 <HAL_RCC_OscConfig+0x29c>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a28:	4a7d      	ldr	r2, [pc, #500]	; (8003c20 <HAL_RCC_OscConfig+0x4fc>)
 8003a2a:	6813      	ldr	r3, [r2, #0]
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a30:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003a32:	f7fd fbb1 	bl	8001198 <HAL_GetTick>
 8003a36:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a38:	4b79      	ldr	r3, [pc, #484]	; (8003c20 <HAL_RCC_OscConfig+0x4fc>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a40:	d1c3      	bne.n	80039ca <HAL_RCC_OscConfig+0x2a6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7fd fba9 	bl	8001198 <HAL_GetTick>
 8003a46:	1b80      	subs	r0, r0, r6
 8003a48:	2802      	cmp	r0, #2
 8003a4a:	d9f5      	bls.n	8003a38 <HAL_RCC_OscConfig+0x314>
          return HAL_TIMEOUT;
 8003a4c:	2003      	movs	r0, #3
 8003a4e:	e176      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a50:	4a72      	ldr	r2, [pc, #456]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 8003a52:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a5e:	e7c6      	b.n	80039ee <HAL_RCC_OscConfig+0x2ca>
 8003a60:	4b6e      	ldr	r3, [pc, #440]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 8003a62:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a66:	f042 0204 	orr.w	r2, r2, #4
 8003a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003a6e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003a7a:	e7b8      	b.n	80039ee <HAL_RCC_OscConfig+0x2ca>
      tickstart = HAL_GetTick();
 8003a7c:	f7fd fb8c 	bl	8001198 <HAL_GetTick>
 8003a80:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a82:	4b66      	ldr	r3, [pc, #408]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f013 0f02 	tst.w	r3, #2
 8003a8c:	d008      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fd fb83 	bl	8001198 <HAL_GetTick>
 8003a92:	1b80      	subs	r0, r0, r6
 8003a94:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a98:	4298      	cmp	r0, r3
 8003a9a:	d9f2      	bls.n	8003a82 <HAL_RCC_OscConfig+0x35e>
          return HAL_TIMEOUT;
 8003a9c:	2003      	movs	r0, #3
 8003a9e:	e14e      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
    if (pwrclkchanged == SET)
 8003aa0:	b9fd      	cbnz	r5, 8003ae2 <HAL_RCC_OscConfig+0x3be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	f013 0f20 	tst.w	r3, #32
 8003aa8:	d03e      	beq.n	8003b28 <HAL_RCC_OscConfig+0x404>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003aaa:	69a3      	ldr	r3, [r4, #24]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d81e      	bhi.n	8003aee <HAL_RCC_OscConfig+0x3ca>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ab0:	69a3      	ldr	r3, [r4, #24]
 8003ab2:	b313      	cbz	r3, 8003afa <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSI48_ENABLE();
 8003ab4:	4a59      	ldr	r2, [pc, #356]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 8003ab6:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003ac2:	f7fd fb69 	bl	8001198 <HAL_GetTick>
 8003ac6:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ac8:	4b54      	ldr	r3, [pc, #336]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 8003aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ace:	f013 0f02 	tst.w	r3, #2
 8003ad2:	d129      	bne.n	8003b28 <HAL_RCC_OscConfig+0x404>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ad4:	f7fd fb60 	bl	8001198 <HAL_GetTick>
 8003ad8:	1b40      	subs	r0, r0, r5
 8003ada:	2802      	cmp	r0, #2
 8003adc:	d9f4      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x3a4>
          return HAL_TIMEOUT;
 8003ade:	2003      	movs	r0, #3
 8003ae0:	e12d      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae2:	4a4e      	ldr	r2, [pc, #312]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 8003ae4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aea:	6593      	str	r3, [r2, #88]	; 0x58
 8003aec:	e7d9      	b.n	8003aa2 <HAL_RCC_OscConfig+0x37e>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003aee:	f240 213b 	movw	r1, #571	; 0x23b
 8003af2:	484c      	ldr	r0, [pc, #304]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003af4:	f7fd f8b9 	bl	8000c6a <assert_failed>
 8003af8:	e7da      	b.n	8003ab0 <HAL_RCC_OscConfig+0x38c>
      __HAL_RCC_HSI48_DISABLE();
 8003afa:	4a48      	ldr	r2, [pc, #288]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 8003afc:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003b08:	f7fd fb46 	bl	8001198 <HAL_GetTick>
 8003b0c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b0e:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 8003b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b14:	f013 0f02 	tst.w	r3, #2
 8003b18:	d006      	beq.n	8003b28 <HAL_RCC_OscConfig+0x404>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b1a:	f7fd fb3d 	bl	8001198 <HAL_GetTick>
 8003b1e:	1b40      	subs	r0, r0, r5
 8003b20:	2802      	cmp	r0, #2
 8003b22:	d9f4      	bls.n	8003b0e <HAL_RCC_OscConfig+0x3ea>
          return HAL_TIMEOUT;
 8003b24:	2003      	movs	r0, #3
 8003b26:	e10a      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003b28:	69e3      	ldr	r3, [r4, #28]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d84b      	bhi.n	8003bc6 <HAL_RCC_OscConfig+0x4a2>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b2e:	69e3      	ldr	r3, [r4, #28]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8103 	beq.w	8003d3c <HAL_RCC_OscConfig+0x618>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b36:	4a39      	ldr	r2, [pc, #228]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 8003b38:	6892      	ldr	r2, [r2, #8]
 8003b3a:	f002 020c 	and.w	r2, r2, #12
 8003b3e:	2a0c      	cmp	r2, #12
 8003b40:	f000 80c6 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x5ac>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	f040 80a3 	bne.w	8003c90 <HAL_RCC_OscConfig+0x56c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003b4a:	6a23      	ldr	r3, [r4, #32]
 8003b4c:	b11b      	cbz	r3, 8003b56 <HAL_RCC_OscConfig+0x432>
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d001      	beq.n	8003b56 <HAL_RCC_OscConfig+0x432>
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d13d      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4ae>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	2b0f      	cmp	r3, #15
 8003b5c:	d83f      	bhi.n	8003bde <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003b5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b60:	3b08      	subs	r3, #8
 8003b62:	2b77      	cmp	r3, #119	; 0x77
 8003b64:	d841      	bhi.n	8003bea <HAL_RCC_OscConfig+0x4c6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003b66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b68:	3b02      	subs	r3, #2
 8003b6a:	2b1d      	cmp	r3, #29
 8003b6c:	d843      	bhi.n	8003bf6 <HAL_RCC_OscConfig+0x4d2>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003b6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_OscConfig+0x462>
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d844      	bhi.n	8003c02 <HAL_RCC_OscConfig+0x4de>
 8003b78:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b80:	f013 0f01 	tst.w	r3, #1
 8003b84:	d03d      	beq.n	8003c02 <HAL_RCC_OscConfig+0x4de>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d008      	beq.n	8003b9e <HAL_RCC_OscConfig+0x47a>
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d83e      	bhi.n	8003c0e <HAL_RCC_OscConfig+0x4ea>
 8003b90:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
 8003b98:	f013 0f01 	tst.w	r3, #1
 8003b9c:	d037      	beq.n	8003c0e <HAL_RCC_OscConfig+0x4ea>
        __HAL_RCC_PLL_DISABLE();
 8003b9e:	4a1f      	ldr	r2, [pc, #124]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 8003ba0:	6813      	ldr	r3, [r2, #0]
 8003ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ba6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003ba8:	f7fd faf6 	bl	8001198 <HAL_GetTick>
 8003bac:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bae:	4b1b      	ldr	r3, [pc, #108]	; (8003c1c <HAL_RCC_OscConfig+0x4f8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003bb6:	d037      	beq.n	8003c28 <HAL_RCC_OscConfig+0x504>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fd faee 	bl	8001198 <HAL_GetTick>
 8003bbc:	1b40      	subs	r0, r0, r5
 8003bbe:	2802      	cmp	r0, #2
 8003bc0:	d9f5      	bls.n	8003bae <HAL_RCC_OscConfig+0x48a>
            return HAL_TIMEOUT;
 8003bc2:	2003      	movs	r0, #3
 8003bc4:	e0bb      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003bc6:	f44f 7119 	mov.w	r1, #612	; 0x264
 8003bca:	4816      	ldr	r0, [pc, #88]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003bcc:	f7fd f84d 	bl	8000c6a <assert_failed>
 8003bd0:	e7ad      	b.n	8003b2e <HAL_RCC_OscConfig+0x40a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003bd2:	f240 216e 	movw	r1, #622	; 0x26e
 8003bd6:	4813      	ldr	r0, [pc, #76]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003bd8:	f7fd f847 	bl	8000c6a <assert_failed>
 8003bdc:	e7bb      	b.n	8003b56 <HAL_RCC_OscConfig+0x432>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003bde:	f240 216f 	movw	r1, #623	; 0x26f
 8003be2:	4810      	ldr	r0, [pc, #64]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003be4:	f7fd f841 	bl	8000c6a <assert_failed>
 8003be8:	e7b9      	b.n	8003b5e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003bea:	f44f 711c 	mov.w	r1, #624	; 0x270
 8003bee:	480d      	ldr	r0, [pc, #52]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003bf0:	f7fd f83b 	bl	8000c6a <assert_failed>
 8003bf4:	e7b7      	b.n	8003b66 <HAL_RCC_OscConfig+0x442>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003bf6:	f240 2171 	movw	r1, #625	; 0x271
 8003bfa:	480a      	ldr	r0, [pc, #40]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003bfc:	f7fd f835 	bl	8000c6a <assert_failed>
 8003c00:	e7b5      	b.n	8003b6e <HAL_RCC_OscConfig+0x44a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003c02:	f240 2172 	movw	r1, #626	; 0x272
 8003c06:	4807      	ldr	r0, [pc, #28]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003c08:	f7fd f82f 	bl	8000c6a <assert_failed>
 8003c0c:	e7bb      	b.n	8003b86 <HAL_RCC_OscConfig+0x462>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003c0e:	f240 2173 	movw	r1, #627	; 0x273
 8003c12:	4804      	ldr	r0, [pc, #16]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003c14:	f7fd f829 	bl	8000c6a <assert_failed>
 8003c18:	e7c1      	b.n	8003b9e <HAL_RCC_OscConfig+0x47a>
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40007000 	.word	0x40007000
 8003c24:	08012eb8 	.word	0x08012eb8
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c28:	4a4d      	ldr	r2, [pc, #308]	; (8003d60 <HAL_RCC_OscConfig+0x63c>)
 8003c2a:	68d3      	ldr	r3, [r2, #12]
 8003c2c:	494d      	ldr	r1, [pc, #308]	; (8003d64 <HAL_RCC_OscConfig+0x640>)
 8003c2e:	4019      	ands	r1, r3
 8003c30:	6a23      	ldr	r3, [r4, #32]
 8003c32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c34:	3801      	subs	r0, #1
 8003c36:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003c3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003c3c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003c40:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003c42:	0840      	lsrs	r0, r0, #1
 8003c44:	3801      	subs	r0, #1
 8003c46:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8003c4a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003c4c:	0840      	lsrs	r0, r0, #1
 8003c4e:	3801      	subs	r0, #1
 8003c50:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8003c54:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003c56:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8003c5a:	4319      	orrs	r1, r3
 8003c5c:	60d1      	str	r1, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c64:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c66:	68d3      	ldr	r3, [r2, #12]
 8003c68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6c:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003c6e:	f7fd fa93 	bl	8001198 <HAL_GetTick>
 8003c72:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c74:	4b3a      	ldr	r3, [pc, #232]	; (8003d60 <HAL_RCC_OscConfig+0x63c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c7c:	d106      	bne.n	8003c8c <HAL_RCC_OscConfig+0x568>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7e:	f7fd fa8b 	bl	8001198 <HAL_GetTick>
 8003c82:	1b00      	subs	r0, r0, r4
 8003c84:	2802      	cmp	r0, #2
 8003c86:	d9f5      	bls.n	8003c74 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8003c88:	2003      	movs	r0, #3
 8003c8a:	e058      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	e056      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_PLL_DISABLE();
 8003c90:	4b33      	ldr	r3, [pc, #204]	; (8003d60 <HAL_RCC_OscConfig+0x63c>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003c98:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	f022 0203 	bic.w	r2, r2, #3
 8003ca0:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8003ca8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003cac:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8003cae:	f7fd fa73 	bl	8001198 <HAL_GetTick>
 8003cb2:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <HAL_RCC_OscConfig+0x63c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003cbc:	d006      	beq.n	8003ccc <HAL_RCC_OscConfig+0x5a8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fd fa6b 	bl	8001198 <HAL_GetTick>
 8003cc2:	1b00      	subs	r0, r0, r4
 8003cc4:	2802      	cmp	r0, #2
 8003cc6:	d9f5      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 8003cc8:	2003      	movs	r0, #3
 8003cca:	e038      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 8003ccc:	2000      	movs	r0, #0
 8003cce:	e036      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d036      	beq.n	8003d42 <HAL_RCC_OscConfig+0x61e>
      temp_pllckcfg = RCC->PLLCFGR;
 8003cd4:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <HAL_RCC_OscConfig+0x63c>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd8:	f003 0103 	and.w	r1, r3, #3
 8003cdc:	6a22      	ldr	r2, [r4, #32]
 8003cde:	4291      	cmp	r1, r2
 8003ce0:	d131      	bne.n	8003d46 <HAL_RCC_OscConfig+0x622>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ce2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ce6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003ce8:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003cee:	d12c      	bne.n	8003d4a <HAL_RCC_OscConfig+0x626>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cf0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cf4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cf6:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003cfa:	d128      	bne.n	8003d4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cfc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d00:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d02:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8003d06:	d124      	bne.n	8003d52 <HAL_RCC_OscConfig+0x62e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d08:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003d0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d0e:	0852      	lsrs	r2, r2, #1
 8003d10:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d12:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003d16:	d11e      	bne.n	8003d56 <HAL_RCC_OscConfig+0x632>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d18:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003d1c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003d1e:	0852      	lsrs	r2, r2, #1
 8003d20:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d22:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003d26:	d118      	bne.n	8003d5a <HAL_RCC_OscConfig+0x636>
  return HAL_OK;
 8003d28:	2000      	movs	r0, #0
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
    return HAL_ERROR;
 8003d2c:	2001      	movs	r0, #1
}
 8003d2e:	4770      	bx	lr
        return HAL_ERROR;
 8003d30:	2001      	movs	r0, #1
 8003d32:	e004      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 8003d34:	2001      	movs	r0, #1
 8003d36:	e002      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
          return HAL_ERROR;
 8003d38:	2001      	movs	r0, #1
 8003d3a:	e000      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 8003d3c:	2000      	movs	r0, #0
}
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003d42:	2001      	movs	r0, #1
 8003d44:	e7fb      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 8003d46:	2001      	movs	r0, #1
 8003d48:	e7f9      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	e7f7      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
 8003d4e:	2001      	movs	r0, #1
 8003d50:	e7f5      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
 8003d52:	2001      	movs	r0, #1
 8003d54:	e7f3      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
 8003d56:	2001      	movs	r0, #1
 8003d58:	e7f1      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	e7ef      	b.n	8003d3e <HAL_RCC_OscConfig+0x61a>
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	019f800c 	.word	0x019f800c

08003d68 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d68:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 030c 	and.w	r3, r3, #12
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d033      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 030c 	and.w	r3, r3, #12
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d02f      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d80:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 030c 	and.w	r3, r3, #12
 8003d88:	2b0c      	cmp	r3, #12
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8003d8c:	2000      	movs	r0, #0
}
 8003d8e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d90:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d9e:	3301      	adds	r3, #1
    switch (pllsource)
 8003da0:	2a03      	cmp	r2, #3
 8003da2:	d011      	beq.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003da4:	4810      	ldr	r0, [pc, #64]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x80>)
 8003da6:	fbb0 f0f3 	udiv	r0, r0, r3
 8003daa:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8003db2:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003dc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8003dc6:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dc8:	4807      	ldr	r0, [pc, #28]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x80>)
 8003dca:	fbb0 f0f3 	udiv	r0, r0, r3
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8003dd6:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8003dda:	e7ec      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8003ddc:	4802      	ldr	r0, [pc, #8]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x80>)
 8003dde:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8003de0:	4801      	ldr	r0, [pc, #4]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x80>)
 8003de2:	4770      	bx	lr
 8003de4:	40021000 	.word	0x40021000
 8003de8:	00f42400 	.word	0x00f42400

08003dec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003dec:	2800      	cmp	r0, #0
 8003dee:	f000 8155 	beq.w	800409c <HAL_RCC_ClockConfig+0x2b0>
{
 8003df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df4:	460d      	mov	r5, r1
 8003df6:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003df8:	6803      	ldr	r3, [r0, #0]
 8003dfa:	f013 0f0f 	tst.w	r3, #15
 8003dfe:	d002      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x1a>
 8003e00:	f033 030f 	bics.w	r3, r3, #15
 8003e04:	d004      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x24>
 8003e06:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8003e0a:	489a      	ldr	r0, [pc, #616]	; (8004074 <HAL_RCC_ClockConfig+0x288>)
 8003e0c:	f7fc ff2d 	bl	8000c6a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003e10:	2d0f      	cmp	r5, #15
 8003e12:	d84c      	bhi.n	8003eae <HAL_RCC_ClockConfig+0xc2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e14:	4b98      	ldr	r3, [pc, #608]	; (8004078 <HAL_RCC_ClockConfig+0x28c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	42ab      	cmp	r3, r5
 8003e1e:	d20b      	bcs.n	8003e38 <HAL_RCC_ClockConfig+0x4c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e20:	4a95      	ldr	r2, [pc, #596]	; (8004078 <HAL_RCC_ClockConfig+0x28c>)
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	f023 030f 	bic.w	r3, r3, #15
 8003e28:	432b      	orrs	r3, r5
 8003e2a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2c:	6813      	ldr	r3, [r2, #0]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	42ab      	cmp	r3, r5
 8003e34:	f040 8134 	bne.w	80040a0 <HAL_RCC_ClockConfig+0x2b4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e38:	6826      	ldr	r6, [r4, #0]
 8003e3a:	f016 0601 	ands.w	r6, r6, #1
 8003e3e:	d06f      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x134>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003e40:	6863      	ldr	r3, [r4, #4]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d838      	bhi.n	8003eba <HAL_RCC_ClockConfig+0xce>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e48:	6863      	ldr	r3, [r4, #4]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d03b      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0xda>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d059      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x11a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e52:	4b8a      	ldr	r3, [pc, #552]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003e5a:	f000 8123 	beq.w	80040a4 <HAL_RCC_ClockConfig+0x2b8>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e5e:	f7ff ff83 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8003e62:	4b87      	ldr	r3, [pc, #540]	; (8004080 <HAL_RCC_ClockConfig+0x294>)
 8003e64:	4298      	cmp	r0, r3
 8003e66:	d959      	bls.n	8003f1c <HAL_RCC_ClockConfig+0x130>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e68:	4a84      	ldr	r2, [pc, #528]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 8003e6a:	6893      	ldr	r3, [r2, #8]
 8003e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e76:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e78:	4a80      	ldr	r2, [pc, #512]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 8003e7a:	6893      	ldr	r3, [r2, #8]
 8003e7c:	f023 0303 	bic.w	r3, r3, #3
 8003e80:	6861      	ldr	r1, [r4, #4]
 8003e82:	430b      	orrs	r3, r1
 8003e84:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003e86:	f7fd f987 	bl	8001198 <HAL_GetTick>
 8003e8a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8c:	4b7b      	ldr	r3, [pc, #492]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	6862      	ldr	r2, [r4, #4]
 8003e96:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003e9a:	d041      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x134>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e9c:	f7fd f97c 	bl	8001198 <HAL_GetTick>
 8003ea0:	1bc0      	subs	r0, r0, r7
 8003ea2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ea6:	4298      	cmp	r0, r3
 8003ea8:	d9f0      	bls.n	8003e8c <HAL_RCC_ClockConfig+0xa0>
        return HAL_TIMEOUT;
 8003eaa:	2003      	movs	r0, #3
 8003eac:	e0af      	b.n	800400e <HAL_RCC_ClockConfig+0x222>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003eae:	f240 310d 	movw	r1, #781	; 0x30d
 8003eb2:	4870      	ldr	r0, [pc, #448]	; (8004074 <HAL_RCC_ClockConfig+0x288>)
 8003eb4:	f7fc fed9 	bl	8000c6a <assert_failed>
 8003eb8:	e7ac      	b.n	8003e14 <HAL_RCC_ClockConfig+0x28>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003eba:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003ebe:	486d      	ldr	r0, [pc, #436]	; (8004074 <HAL_RCC_ClockConfig+0x288>)
 8003ec0:	f7fc fed3 	bl	8000c6a <assert_failed>
 8003ec4:	e7c0      	b.n	8003e48 <HAL_RCC_ClockConfig+0x5c>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec6:	4b6d      	ldr	r3, [pc, #436]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0xe8>
        return HAL_ERROR;
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	e09c      	b.n	800400e <HAL_RCC_ClockConfig+0x222>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ed4:	f7ff fbfc 	bl	80036d0 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8003ed8:	4b69      	ldr	r3, [pc, #420]	; (8004080 <HAL_RCC_ClockConfig+0x294>)
 8003eda:	4298      	cmp	r0, r3
 8003edc:	d91a      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x128>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ede:	4b67      	ldr	r3, [pc, #412]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x108>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ee8:	6826      	ldr	r6, [r4, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003eea:	f016 0602 	ands.w	r6, r6, #2
 8003eee:	d0c3      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x8c>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ef0:	68a3      	ldr	r3, [r4, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ef2:	b98b      	cbnz	r3, 8003f18 <HAL_RCC_ClockConfig+0x12c>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ef4:	4a61      	ldr	r2, [pc, #388]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 8003ef6:	6893      	ldr	r3, [r2, #8]
 8003ef8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f02:	2680      	movs	r6, #128	; 0x80
 8003f04:	e7b8      	b.n	8003e78 <HAL_RCC_ClockConfig+0x8c>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f06:	4b5d      	ldr	r3, [pc, #372]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f0e:	d1a6      	bne.n	8003e5e <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8003f10:	2001      	movs	r0, #1
 8003f12:	e07c      	b.n	800400e <HAL_RCC_ClockConfig+0x222>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f14:	2600      	movs	r6, #0
 8003f16:	e7af      	b.n	8003e78 <HAL_RCC_ClockConfig+0x8c>
 8003f18:	2600      	movs	r6, #0
 8003f1a:	e7ad      	b.n	8003e78 <HAL_RCC_ClockConfig+0x8c>
 8003f1c:	2600      	movs	r6, #0
 8003f1e:	e7ab      	b.n	8003e78 <HAL_RCC_ClockConfig+0x8c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	f013 0f02 	tst.w	r3, #2
 8003f26:	d07f      	beq.n	8004028 <HAL_RCC_ClockConfig+0x23c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f28:	f013 0f04 	tst.w	r3, #4
 8003f2c:	d004      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x14c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f2e:	4a53      	ldr	r2, [pc, #332]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 8003f30:	6893      	ldr	r3, [r2, #8]
 8003f32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f36:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	f013 0f08 	tst.w	r3, #8
 8003f3e:	d006      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x162>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f40:	4a4e      	ldr	r2, [pc, #312]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 8003f42:	6893      	ldr	r3, [r2, #8]
 8003f44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f48:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f4c:	6093      	str	r3, [r2, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003f4e:	68a3      	ldr	r3, [r4, #8]
 8003f50:	b163      	cbz	r3, 8003f6c <HAL_RCC_ClockConfig+0x180>
 8003f52:	2bc0      	cmp	r3, #192	; 0xc0
 8003f54:	d00a      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x180>
 8003f56:	d85b      	bhi.n	8004010 <HAL_RCC_ClockConfig+0x224>
 8003f58:	2ba0      	cmp	r3, #160	; 0xa0
 8003f5a:	d007      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x180>
 8003f5c:	d902      	bls.n	8003f64 <HAL_RCC_ClockConfig+0x178>
 8003f5e:	2bb0      	cmp	r3, #176	; 0xb0
 8003f60:	d004      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x180>
 8003f62:	e05b      	b.n	800401c <HAL_RCC_ClockConfig+0x230>
 8003f64:	2b80      	cmp	r3, #128	; 0x80
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x180>
 8003f68:	2b90      	cmp	r3, #144	; 0x90
 8003f6a:	d157      	bne.n	800401c <HAL_RCC_ClockConfig+0x230>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f6c:	4a43      	ldr	r2, [pc, #268]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 8003f6e:	6893      	ldr	r3, [r2, #8]
 8003f70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f74:	68a1      	ldr	r1, [r4, #8]
 8003f76:	430b      	orrs	r3, r1
 8003f78:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f7a:	4b3f      	ldr	r3, [pc, #252]	; (8004078 <HAL_RCC_ClockConfig+0x28c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	42ab      	cmp	r3, r5
 8003f84:	d858      	bhi.n	8004038 <HAL_RCC_ClockConfig+0x24c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	f013 0f04 	tst.w	r3, #4
 8003f8c:	d014      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x1cc>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003f8e:	68e3      	ldr	r3, [r4, #12]
 8003f90:	b15b      	cbz	r3, 8003faa <HAL_RCC_ClockConfig+0x1be>
 8003f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f96:	d008      	beq.n	8003faa <HAL_RCC_ClockConfig+0x1be>
 8003f98:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003f9c:	d005      	beq.n	8003faa <HAL_RCC_ClockConfig+0x1be>
 8003f9e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fa2:	d002      	beq.n	8003faa <HAL_RCC_ClockConfig+0x1be>
 8003fa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fa8:	d15e      	bne.n	8004068 <HAL_RCC_ClockConfig+0x27c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003faa:	4a34      	ldr	r2, [pc, #208]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 8003fac:	6893      	ldr	r3, [r2, #8]
 8003fae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003fb2:	68e1      	ldr	r1, [r4, #12]
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	f013 0f08 	tst.w	r3, #8
 8003fbe:	d015      	beq.n	8003fec <HAL_RCC_ClockConfig+0x200>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003fc0:	6923      	ldr	r3, [r4, #16]
 8003fc2:	b15b      	cbz	r3, 8003fdc <HAL_RCC_ClockConfig+0x1f0>
 8003fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc8:	d008      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x1f0>
 8003fca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003fce:	d005      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x1f0>
 8003fd0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fd4:	d002      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x1f0>
 8003fd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fda:	d159      	bne.n	8004090 <HAL_RCC_ClockConfig+0x2a4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fdc:	4a27      	ldr	r2, [pc, #156]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 8003fde:	6893      	ldr	r3, [r2, #8]
 8003fe0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003fe4:	6921      	ldr	r1, [r4, #16]
 8003fe6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003fea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fec:	f7ff febc 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
 8003ff0:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ff8:	4a22      	ldr	r2, [pc, #136]	; (8004084 <HAL_RCC_ClockConfig+0x298>)
 8003ffa:	5cd3      	ldrb	r3, [r2, r3]
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	40d8      	lsrs	r0, r3
 8004002:	4b21      	ldr	r3, [pc, #132]	; (8004088 <HAL_RCC_ClockConfig+0x29c>)
 8004004:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004006:	4b21      	ldr	r3, [pc, #132]	; (800408c <HAL_RCC_ClockConfig+0x2a0>)
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	f7fc fee3 	bl	8000dd4 <HAL_InitTick>
}
 800400e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004010:	2be0      	cmp	r3, #224	; 0xe0
 8004012:	d0ab      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x180>
 8004014:	2bf0      	cmp	r3, #240	; 0xf0
 8004016:	d0a9      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x180>
 8004018:	2bd0      	cmp	r3, #208	; 0xd0
 800401a:	d0a7      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x180>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800401c:	f240 317b 	movw	r1, #891	; 0x37b
 8004020:	4814      	ldr	r0, [pc, #80]	; (8004074 <HAL_RCC_ClockConfig+0x288>)
 8004022:	f7fc fe22 	bl	8000c6a <assert_failed>
 8004026:	e7a1      	b.n	8003f6c <HAL_RCC_ClockConfig+0x180>
    if(hpre == RCC_SYSCLK_DIV2)
 8004028:	2e80      	cmp	r6, #128	; 0x80
 800402a:	d1a6      	bne.n	8003f7a <HAL_RCC_ClockConfig+0x18e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800402c:	4a13      	ldr	r2, [pc, #76]	; (800407c <HAL_RCC_ClockConfig+0x290>)
 800402e:	6893      	ldr	r3, [r2, #8]
 8004030:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004034:	6093      	str	r3, [r2, #8]
 8004036:	e7a0      	b.n	8003f7a <HAL_RCC_ClockConfig+0x18e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004038:	4a0f      	ldr	r2, [pc, #60]	; (8004078 <HAL_RCC_ClockConfig+0x28c>)
 800403a:	6813      	ldr	r3, [r2, #0]
 800403c:	f023 030f 	bic.w	r3, r3, #15
 8004040:	432b      	orrs	r3, r5
 8004042:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004044:	f7fd f8a8 	bl	8001198 <HAL_GetTick>
 8004048:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_ClockConfig+0x28c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	42ab      	cmp	r3, r5
 8004054:	d097      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x19a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004056:	f7fd f89f 	bl	8001198 <HAL_GetTick>
 800405a:	1b80      	subs	r0, r0, r6
 800405c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004060:	4298      	cmp	r0, r3
 8004062:	d9f2      	bls.n	800404a <HAL_RCC_ClockConfig+0x25e>
        return HAL_TIMEOUT;
 8004064:	2003      	movs	r0, #3
 8004066:	e7d2      	b.n	800400e <HAL_RCC_ClockConfig+0x222>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004068:	f240 319d 	movw	r1, #925	; 0x39d
 800406c:	4801      	ldr	r0, [pc, #4]	; (8004074 <HAL_RCC_ClockConfig+0x288>)
 800406e:	f7fc fdfc 	bl	8000c6a <assert_failed>
 8004072:	e79a      	b.n	8003faa <HAL_RCC_ClockConfig+0x1be>
 8004074:	08012eb8 	.word	0x08012eb8
 8004078:	40022000 	.word	0x40022000
 800407c:	40021000 	.word	0x40021000
 8004080:	04c4b400 	.word	0x04c4b400
 8004084:	08012d30 	.word	0x08012d30
 8004088:	20000000 	.word	0x20000000
 800408c:	20000008 	.word	0x20000008
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004090:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8004094:	4804      	ldr	r0, [pc, #16]	; (80040a8 <HAL_RCC_ClockConfig+0x2bc>)
 8004096:	f7fc fde8 	bl	8000c6a <assert_failed>
 800409a:	e79f      	b.n	8003fdc <HAL_RCC_ClockConfig+0x1f0>
    return HAL_ERROR;
 800409c:	2001      	movs	r0, #1
}
 800409e:	4770      	bx	lr
      return HAL_ERROR;
 80040a0:	2001      	movs	r0, #1
 80040a2:	e7b4      	b.n	800400e <HAL_RCC_ClockConfig+0x222>
          return HAL_ERROR;
 80040a4:	2001      	movs	r0, #1
 80040a6:	e7b2      	b.n	800400e <HAL_RCC_ClockConfig+0x222>
 80040a8:	08012eb8 	.word	0x08012eb8

080040ac <HAL_RCC_GetHCLKFreq>:
}
 80040ac:	4b01      	ldr	r3, [pc, #4]	; (80040b4 <HAL_RCC_GetHCLKFreq+0x8>)
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000000 	.word	0x20000000

080040b8 <HAL_RCC_GetPCLK1Freq>:
{
 80040b8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040ba:	f7ff fff7 	bl	80040ac <HAL_RCC_GetHCLKFreq>
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80040c6:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040c8:	5cd3      	ldrb	r3, [r2, r3]
 80040ca:	f003 031f 	and.w	r3, r3, #31
}
 80040ce:	40d8      	lsrs	r0, r3
 80040d0:	bd08      	pop	{r3, pc}
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000
 80040d8:	08012d40 	.word	0x08012d40

080040dc <HAL_RCC_GetPCLK2Freq>:
{
 80040dc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040de:	f7ff ffe5 	bl	80040ac <HAL_RCC_GetHCLKFreq>
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80040ea:	4a04      	ldr	r2, [pc, #16]	; (80040fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040ec:	5cd3      	ldrb	r3, [r2, r3]
 80040ee:	f003 031f 	and.w	r3, r3, #31
}
 80040f2:	40d8      	lsrs	r0, r3
 80040f4:	bd08      	pop	{r3, pc}
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	08012d40 	.word	0x08012d40

08004100 <HAL_RCC_GetClockConfig>:
{
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	460d      	mov	r5, r1
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8004104:	4604      	mov	r4, r0
 8004106:	b1d0      	cbz	r0, 800413e <HAL_RCC_GetClockConfig+0x3e>
  assert_param(pFLatency != (void *)NULL);
 8004108:	b1fd      	cbz	r5, 800414a <HAL_RCC_GetClockConfig+0x4a>
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800410a:	230f      	movs	r3, #15
 800410c:	6023      	str	r3, [r4, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800410e:	4b12      	ldr	r3, [pc, #72]	; (8004158 <HAL_RCC_GetClockConfig+0x58>)
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	f002 0203 	and.w	r2, r2, #3
 8004116:	6062      	str	r2, [r4, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800411e:	60a2      	str	r2, [r4, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004126:	60e2      	str	r2, [r4, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	08db      	lsrs	r3, r3, #3
 800412c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004130:	6123      	str	r3, [r4, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004132:	4b0a      	ldr	r3, [pc, #40]	; (800415c <HAL_RCC_GetClockConfig+0x5c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	602b      	str	r3, [r5, #0]
}
 800413c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 800413e:	f240 41e4 	movw	r1, #1252	; 0x4e4
 8004142:	4807      	ldr	r0, [pc, #28]	; (8004160 <HAL_RCC_GetClockConfig+0x60>)
 8004144:	f7fc fd91 	bl	8000c6a <assert_failed>
 8004148:	e7de      	b.n	8004108 <HAL_RCC_GetClockConfig+0x8>
  assert_param(pFLatency != (void *)NULL);
 800414a:	f240 41e5 	movw	r1, #1253	; 0x4e5
 800414e:	4804      	ldr	r0, [pc, #16]	; (8004160 <HAL_RCC_GetClockConfig+0x60>)
 8004150:	f7fc fd8b 	bl	8000c6a <assert_failed>
 8004154:	e7d9      	b.n	800410a <HAL_RCC_GetClockConfig+0xa>
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000
 800415c:	40022000 	.word	0x40022000
 8004160:	08012eb8 	.word	0x08012eb8

08004164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004166:	b083      	sub	sp, #12
 8004168:	4604      	mov	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800416a:	6803      	ldr	r3, [r0, #0]
 800416c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004170:	2b00      	cmp	r3, #0
 8004172:	d033      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x78>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800417a:	f000 8085 	beq.w	8004288 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    FlagStatus       pwrclkchanged = RESET;
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800417e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004180:	b143      	cbz	r3, 8004194 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8004182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004186:	d005      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8004188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418c:	d002      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x30>
 800418e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004192:	d128      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x82>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004194:	4b39      	ldr	r3, [pc, #228]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004198:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800419c:	d128      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419e:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80041a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041a6:	659a      	str	r2, [r3, #88]	; 0x58
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80041b2:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b4:	4a32      	ldr	r2, [pc, #200]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041be:	f7fc ffeb 	bl	8001198 <HAL_GetTick>
 80041c2:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041c4:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80041cc:	d112      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ce:	f7fc ffe3 	bl	8001198 <HAL_GetTick>
 80041d2:	1b40      	subs	r0, r0, r5
 80041d4:	2802      	cmp	r0, #2
 80041d6:	d9f5      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
      {
        ret = HAL_TIMEOUT;
 80041d8:	2503      	movs	r5, #3
 80041da:	e00c      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x92>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80041dc:	2183      	movs	r1, #131	; 0x83
 80041de:	4829      	ldr	r0, [pc, #164]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80041e0:	f7fc fd43 	bl	8000c6a <assert_failed>
 80041e4:	e7c6      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x10>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80041e6:	218b      	movs	r1, #139	; 0x8b
 80041e8:	4826      	ldr	r0, [pc, #152]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80041ea:	f7fc fd3e 	bl	8000c6a <assert_failed>
 80041ee:	e7d1      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x30>
    FlagStatus       pwrclkchanged = RESET;
 80041f0:	2600      	movs	r6, #0
 80041f2:	e7df      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x50>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041f4:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 80041f6:	bb45      	cbnz	r5, 800424a <HAL_RCCEx_PeriphCLKConfig+0xe6>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041f8:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041fe:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004202:	d015      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004204:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004206:	429a      	cmp	r2, r3
 8004208:	d012      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800420a:	4a1c      	ldr	r2, [pc, #112]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800420c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004214:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004218:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800421c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004220:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004224:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004228:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800422c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004230:	f013 0f01 	tst.w	r3, #1
 8004234:	d110      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xf4>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8004236:	b945      	cbnz	r5, 800424a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004238:	4a10      	ldr	r2, [pc, #64]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800423a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800423e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004242:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004244:	430b      	orrs	r3, r1
 8004246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800424a:	b1f6      	cbz	r6, 800428a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424c:	4a0b      	ldr	r2, [pc, #44]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800424e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004254:	6593      	str	r3, [r2, #88]	; 0x58
 8004256:	e018      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x126>
        tickstart = HAL_GetTick();
 8004258:	f7fc ff9e 	bl	8001198 <HAL_GetTick>
 800425c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800425e:	4b07      	ldr	r3, [pc, #28]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	f013 0f02 	tst.w	r3, #2
 8004268:	d1e5      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800426a:	f7fc ff95 	bl	8001198 <HAL_GetTick>
 800426e:	1bc0      	subs	r0, r0, r7
 8004270:	f241 3388 	movw	r3, #5000	; 0x1388
 8004274:	4298      	cmp	r0, r3
 8004276:	d9f2      	bls.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xfa>
            ret = HAL_TIMEOUT;
 8004278:	2503      	movs	r5, #3
 800427a:	e7dc      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 800427c:	40021000 	.word	0x40021000
 8004280:	40007000 	.word	0x40007000
 8004284:	08012ef0 	.word	0x08012ef0
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004288:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	f013 0f01 	tst.w	r3, #1
 8004290:	d010      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004292:	6863      	ldr	r3, [r4, #4]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d904      	bls.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8004298:	2b03      	cmp	r3, #3
 800429a:	d002      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800429c:	2b02      	cmp	r3, #2
 800429e:	f040 81d1 	bne.w	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042a2:	4aa4      	ldr	r2, [pc, #656]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80042a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80042a8:	f023 0303 	bic.w	r3, r3, #3
 80042ac:	6861      	ldr	r1, [r4, #4]
 80042ae:	430b      	orrs	r3, r1
 80042b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	f013 0f02 	tst.w	r3, #2
 80042ba:	d018      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80042bc:	68a3      	ldr	r3, [r4, #8]
 80042be:	b16b      	cbz	r3, 80042dc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80042c0:	3b04      	subs	r3, #4
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d806      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80042c6:	f240 1211 	movw	r2, #273	; 0x111
 80042ca:	fa22 f303 	lsr.w	r3, r2, r3
 80042ce:	f013 0f01 	tst.w	r3, #1
 80042d2:	d103      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80042d4:	21ea      	movs	r1, #234	; 0xea
 80042d6:	4898      	ldr	r0, [pc, #608]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80042d8:	f7fc fcc7 	bl	8000c6a <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042dc:	4a95      	ldr	r2, [pc, #596]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80042de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80042e2:	f023 030c 	bic.w	r3, r3, #12
 80042e6:	68a1      	ldr	r1, [r4, #8]
 80042e8:	430b      	orrs	r3, r1
 80042ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	f013 0f04 	tst.w	r3, #4
 80042f4:	d011      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80042f6:	68e3      	ldr	r3, [r4, #12]
 80042f8:	b133      	cbz	r3, 8004308 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80042fa:	2b10      	cmp	r3, #16
 80042fc:	d004      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80042fe:	2b30      	cmp	r3, #48	; 0x30
 8004300:	d002      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004302:	2b20      	cmp	r3, #32
 8004304:	f040 81a3 	bne.w	800464e <HAL_RCCEx_PeriphCLKConfig+0x4ea>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004308:	4a8a      	ldr	r2, [pc, #552]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800430a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800430e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004312:	68e1      	ldr	r1, [r4, #12]
 8004314:	430b      	orrs	r3, r1
 8004316:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	f013 0f08 	tst.w	r3, #8
 8004320:	d011      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004322:	6923      	ldr	r3, [r4, #16]
 8004324:	b133      	cbz	r3, 8004334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d004      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800432a:	2bc0      	cmp	r3, #192	; 0xc0
 800432c:	d002      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800432e:	2b80      	cmp	r3, #128	; 0x80
 8004330:	f040 8192 	bne.w	8004658 <HAL_RCCEx_PeriphCLKConfig+0x4f4>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004334:	4a7f      	ldr	r2, [pc, #508]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004336:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800433a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800433e:	6921      	ldr	r1, [r4, #16]
 8004340:	430b      	orrs	r3, r1
 8004342:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	f013 0f10 	tst.w	r3, #16
 800434c:	d014      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800434e:	6963      	ldr	r3, [r4, #20]
 8004350:	b14b      	cbz	r3, 8004366 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004356:	d006      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800435c:	d003      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800435e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004362:	f040 817e 	bne.w	8004662 <HAL_RCCEx_PeriphCLKConfig+0x4fe>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004366:	4a73      	ldr	r2, [pc, #460]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004368:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800436c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004370:	6961      	ldr	r1, [r4, #20]
 8004372:	430b      	orrs	r3, r1
 8004374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	f013 0f20 	tst.w	r3, #32
 800437e:	d014      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004380:	69a3      	ldr	r3, [r4, #24]
 8004382:	b14b      	cbz	r3, 8004398 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004388:	d006      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800438a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800438e:	d003      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004394:	f040 816b 	bne.w	800466e <HAL_RCCEx_PeriphCLKConfig+0x50a>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004398:	4a66      	ldr	r2, [pc, #408]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800439a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800439e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80043a2:	69a1      	ldr	r1, [r4, #24]
 80043a4:	430b      	orrs	r3, r1
 80043a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043b0:	d011      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80043b2:	69e3      	ldr	r3, [r4, #28]
 80043b4:	b133      	cbz	r3, 80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>
 80043b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ba:	d003      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>
 80043bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c0:	f040 815b 	bne.w	800467a <HAL_RCCEx_PeriphCLKConfig+0x516>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043c4:	4a5b      	ldr	r2, [pc, #364]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80043c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043ce:	69e1      	ldr	r1, [r4, #28]
 80043d0:	430b      	orrs	r3, r1
 80043d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043dc:	d011      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80043de:	6a23      	ldr	r3, [r4, #32]
 80043e0:	b133      	cbz	r3, 80043f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80043e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e6:	d003      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80043e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ec:	f040 814b 	bne.w	8004686 <HAL_RCCEx_PeriphCLKConfig+0x522>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043f0:	4a50      	ldr	r2, [pc, #320]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80043f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80043fa:	6a21      	ldr	r1, [r4, #32]
 80043fc:	430b      	orrs	r3, r1
 80043fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004408:	d011      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800440a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800440c:	b133      	cbz	r3, 800441c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800440e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004412:	d003      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004418:	f040 813b 	bne.w	8004692 <HAL_RCCEx_PeriphCLKConfig+0x52e>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800441c:	4a45      	ldr	r2, [pc, #276]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800441e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004422:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004426:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004428:	430b      	orrs	r3, r1
 800442a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004434:	d00c      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004436:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004438:	2b02      	cmp	r3, #2
 800443a:	f200 8130 	bhi.w	800469e <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800443e:	4a3d      	ldr	r2, [pc, #244]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004440:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004444:	f023 0303 	bic.w	r3, r3, #3
 8004448:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800444a:	430b      	orrs	r3, r1
 800444c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004456:	d014      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 8004458:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800445a:	b14b      	cbz	r3, 8004470 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800445c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004460:	d006      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004462:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004466:	d003      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004468:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800446c:	f040 811d 	bne.w	80046aa <HAL_RCCEx_PeriphCLKConfig+0x546>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004470:	4a30      	ldr	r2, [pc, #192]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004472:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004476:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800447a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800447c:	430b      	orrs	r3, r1
 800447e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004488:	d019      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800448a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800448c:	b14b      	cbz	r3, 80044a2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800448e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004492:	d006      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004498:	d003      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800449a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800449e:	f040 810a 	bne.w	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044a2:	4a24      	ldr	r2, [pc, #144]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80044a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80044ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80044ae:	430b      	orrs	r3, r1
 80044b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ba:	f000 8102 	beq.w	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80044c4:	d019      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80044c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044c8:	b14b      	cbz	r3, 80044de <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80044ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ce:	d006      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80044d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044d4:	d003      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80044d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044da:	f040 80f7 	bne.w	80046cc <HAL_RCCEx_PeriphCLKConfig+0x568>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044de:	4a15      	ldr	r2, [pc, #84]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80044e0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044e4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80044e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044ea:	430b      	orrs	r3, r1
 80044ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f6:	f000 80ef 	beq.w	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x574>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004500:	d01c      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 8004502:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004504:	b133      	cbz	r3, 8004514 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004506:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800450a:	d003      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800450c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004510:	f040 80e7 	bne.w	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x57e>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004514:	4a07      	ldr	r2, [pc, #28]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004516:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800451a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800451e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004520:	430b      	orrs	r3, r1
 8004522:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004526:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800452c:	f000 80df 	beq.w	80046ee <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004530:	e004      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8004532:	bf00      	nop
 8004534:	40021000 	.word	0x40021000
 8004538:	08012ef0 	.word	0x08012ef0
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004542:	d013      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004544:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004546:	b11b      	cbz	r3, 8004550 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454c:	f040 80d4 	bne.w	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004550:	4a85      	ldr	r2, [pc, #532]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8004552:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004556:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800455a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800455c:	430b      	orrs	r3, r1
 800455e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004562:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004568:	f000 80cc 	beq.w	8004704 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004572:	d013      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004574:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004576:	b11b      	cbz	r3, 8004580 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800457c:	f040 80c7 	bne.w	800470e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004580:	4a79      	ldr	r2, [pc, #484]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8004582:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004586:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800458a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800458c:	430b      	orrs	r3, r1
 800458e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004592:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004598:	f000 80bf 	beq.w	800471a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80045a2:	d016      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 80045a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80045a6:	b133      	cbz	r3, 80045b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80045a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ac:	d003      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80045ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b2:	f040 80b7 	bne.w	8004724 <HAL_RCCEx_PeriphCLKConfig+0x5c0>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045b6:	4a6c      	ldr	r2, [pc, #432]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80045b8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045bc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80045c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80045c2:	430b      	orrs	r3, r1
 80045c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80045ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ce:	f000 80af 	beq.w	8004730 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80045d8:	d016      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 80045da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80045dc:	b133      	cbz	r3, 80045ec <HAL_RCCEx_PeriphCLKConfig+0x488>
 80045de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e2:	d003      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x488>
 80045e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045e8:	f040 80a7 	bne.w	800473a <HAL_RCCEx_PeriphCLKConfig+0x5d6>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80045ec:	4a5e      	ldr	r2, [pc, #376]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80045ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045f2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80045f6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80045f8:	430b      	orrs	r3, r1
 80045fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80045fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004604:	f000 809f 	beq.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800460e:	d016      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x4da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 8004610:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004616:	d004      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004618:	b11b      	cbz	r3, 8004622 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800461a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800461e:	f040 8097 	bne.w	8004750 <HAL_RCCEx_PeriphCLKConfig+0x5ec>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004622:	4a51      	ldr	r2, [pc, #324]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8004624:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004628:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800462c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800462e:	430b      	orrs	r3, r1
 8004630:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004634:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004636:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800463a:	f000 808f 	beq.w	800475c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  }

#endif /* QUADSPI */

  return status;
}
 800463e:	4628      	mov	r0, r5
 8004640:	b003      	add	sp, #12
 8004642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004644:	21e0      	movs	r1, #224	; 0xe0
 8004646:	4849      	ldr	r0, [pc, #292]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004648:	f7fc fb0f 	bl	8000c6a <assert_failed>
 800464c:	e629      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800464e:	21f4      	movs	r1, #244	; 0xf4
 8004650:	4846      	ldr	r0, [pc, #280]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004652:	f7fc fb0a 	bl	8000c6a <assert_failed>
 8004656:	e657      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004658:	21ff      	movs	r1, #255	; 0xff
 800465a:	4844      	ldr	r0, [pc, #272]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800465c:	f7fc fb05 	bl	8000c6a <assert_failed>
 8004660:	e668      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004662:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8004666:	4841      	ldr	r0, [pc, #260]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004668:	f7fc faff 	bl	8000c6a <assert_failed>
 800466c:	e67b      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x202>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800466e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004672:	483e      	ldr	r0, [pc, #248]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004674:	f7fc faf9 	bl	8000c6a <assert_failed>
 8004678:	e68e      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x234>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800467a:	f44f 7191 	mov.w	r1, #290	; 0x122
 800467e:	483b      	ldr	r0, [pc, #236]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004680:	f7fc faf3 	bl	8000c6a <assert_failed>
 8004684:	e69e      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004686:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800468a:	4838      	ldr	r0, [pc, #224]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800468c:	f7fc faed 	bl	8000c6a <assert_failed>
 8004690:	e6ae      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004692:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004696:	4835      	ldr	r0, [pc, #212]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004698:	f7fc fae7 	bl	8000c6a <assert_failed>
 800469c:	e6be      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800469e:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80046a2:	4832      	ldr	r0, [pc, #200]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80046a4:	f7fc fae1 	bl	8000c6a <assert_failed>
 80046a8:	e6c9      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 80046aa:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80046ae:	482f      	ldr	r0, [pc, #188]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80046b0:	f7fc fadb 	bl	8000c6a <assert_failed>
 80046b4:	e6dc      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80046b6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80046ba:	482c      	ldr	r0, [pc, #176]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80046bc:	f7fc fad5 	bl	8000c6a <assert_failed>
 80046c0:	e6ef      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c2:	68d3      	ldr	r3, [r2, #12]
 80046c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046c8:	60d3      	str	r3, [r2, #12]
 80046ca:	e6f8      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x35a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80046cc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80046d0:	4826      	ldr	r0, [pc, #152]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80046d2:	f7fc faca 	bl	8000c6a <assert_failed>
 80046d6:	e702      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d8:	68d3      	ldr	r3, [r2, #12]
 80046da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046de:	60d3      	str	r3, [r2, #12]
 80046e0:	e70b      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x396>
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 80046e2:	f240 1179 	movw	r1, #377	; 0x179
 80046e6:	4821      	ldr	r0, [pc, #132]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80046e8:	f7fc fabf 	bl	8000c6a <assert_failed>
 80046ec:	e712      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ee:	68d3      	ldr	r3, [r2, #12]
 80046f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046f4:	60d3      	str	r3, [r2, #12]
 80046f6:	e721      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 80046f8:	f240 118b 	movw	r1, #395	; 0x18b
 80046fc:	481b      	ldr	r0, [pc, #108]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80046fe:	f7fc fab4 	bl	8000c6a <assert_failed>
 8004702:	e725      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004704:	68d3      	ldr	r3, [r2, #12]
 8004706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800470a:	60d3      	str	r3, [r2, #12]
 800470c:	e72e      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x408>
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800470e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8004712:	4816      	ldr	r0, [pc, #88]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004714:	f7fc faa9 	bl	8000c6a <assert_failed>
 8004718:	e732      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800471a:	68d3      	ldr	r3, [r2, #12]
 800471c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004720:	60d3      	str	r3, [r2, #12]
 8004722:	e73b      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x438>
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 8004724:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8004728:	4810      	ldr	r0, [pc, #64]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800472a:	f7fc fa9e 	bl	8000c6a <assert_failed>
 800472e:	e742      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004730:	68d3      	ldr	r3, [r2, #12]
 8004732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004736:	60d3      	str	r3, [r2, #12]
 8004738:	e74b      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 800473a:	f240 11b9 	movw	r1, #441	; 0x1b9
 800473e:	480b      	ldr	r0, [pc, #44]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004740:	f7fc fa93 	bl	8000c6a <assert_failed>
 8004744:	e752      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x488>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004746:	68d3      	ldr	r3, [r2, #12]
 8004748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474c:	60d3      	str	r3, [r2, #12]
 800474e:	e75b      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 8004750:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8004754:	4805      	ldr	r0, [pc, #20]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004756:	f7fc fa88 	bl	8000c6a <assert_failed>
 800475a:	e762      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800475c:	68d3      	ldr	r3, [r2, #12]
 800475e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004762:	60d3      	str	r3, [r2, #12]
 8004764:	e76b      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000
 800476c:	08012ef0 	.word	0x08012ef0

08004770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	4605      	mov	r5, r0
 8004778:	4688      	mov	r8, r1
 800477a:	4617      	mov	r7, r2
 800477c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800477e:	f7fc fd0b 	bl	8001198 <HAL_GetTick>
 8004782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004784:	1a1b      	subs	r3, r3, r0
 8004786:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800478a:	f7fc fd05 	bl	8001198 <HAL_GetTick>
 800478e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004790:	4b2a      	ldr	r3, [pc, #168]	; (800483c <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004798:	fb09 f303 	mul.w	r3, r9, r3
 800479c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800479e:	682b      	ldr	r3, [r5, #0]
 80047a0:	689c      	ldr	r4, [r3, #8]
 80047a2:	ea38 0404 	bics.w	r4, r8, r4
 80047a6:	bf0c      	ite	eq
 80047a8:	2301      	moveq	r3, #1
 80047aa:	2300      	movne	r3, #0
 80047ac:	42bb      	cmp	r3, r7
 80047ae:	d040      	beq.n	8004832 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047b0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80047b4:	d0f3      	beq.n	800479e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047b6:	f7fc fcef 	bl	8001198 <HAL_GetTick>
 80047ba:	eba0 000a 	sub.w	r0, r0, sl
 80047be:	4548      	cmp	r0, r9
 80047c0:	d20a      	bcs.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0x68>
 80047c2:	f1b9 0f00 	cmp.w	r9, #0
 80047c6:	d007      	beq.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047c8:	9a01      	ldr	r2, [sp, #4]
 80047ca:	b102      	cbz	r2, 80047ce <SPI_WaitFlagStateUntilTimeout+0x5e>
 80047cc:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80047ce:	9b01      	ldr	r3, [sp, #4]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	4691      	mov	r9, r2
 80047d6:	e7e2      	b.n	800479e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047d8:	682a      	ldr	r2, [r5, #0]
 80047da:	6853      	ldr	r3, [r2, #4]
 80047dc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80047e0:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e2:	686b      	ldr	r3, [r5, #4]
 80047e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047e8:	d00b      	beq.n	8004802 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80047ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f0:	d014      	beq.n	800481c <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80047f8:	2300      	movs	r3, #0
 80047fa:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 80047fe:	2003      	movs	r0, #3
 8004800:	e018      	b.n	8004834 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004802:	68ab      	ldr	r3, [r5, #8]
 8004804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004808:	d002      	beq.n	8004810 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800480a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480e:	d1ec      	bne.n	80047ea <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004810:	682a      	ldr	r2, [r5, #0]
 8004812:	6813      	ldr	r3, [r2, #0]
 8004814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e7e6      	b.n	80047ea <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 800481c:	682a      	ldr	r2, [r5, #0]
 800481e:	6813      	ldr	r3, [r2, #0]
 8004820:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	682a      	ldr	r2, [r5, #0]
 8004828:	6813      	ldr	r3, [r2, #0]
 800482a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	e7df      	b.n	80047f2 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8004832:	2000      	movs	r0, #0
}
 8004834:	b002      	add	sp, #8
 8004836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483a:	bf00      	nop
 800483c:	20000000 	.word	0x20000000

08004840 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	4606      	mov	r6, r0
 8004848:	460c      	mov	r4, r1
 800484a:	4615      	mov	r5, r2
 800484c:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004854:	f7fc fca0 	bl	8001198 <HAL_GetTick>
 8004858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800485a:	1a1b      	subs	r3, r3, r0
 800485c:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8004860:	f7fc fc9a 	bl	8001198 <HAL_GetTick>
 8004864:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004866:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800486a:	4b31      	ldr	r3, [pc, #196]	; (8004930 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004872:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004876:	0d1b      	lsrs	r3, r3, #20
 8004878:	fb08 f303 	mul.w	r3, r8, r3
 800487c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800487e:	e002      	b.n	8004886 <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8004880:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8004884:	d112      	bne.n	80048ac <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8004886:	6833      	ldr	r3, [r6, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	ea03 0c04 	and.w	ip, r3, r4
 800488e:	45ac      	cmp	ip, r5
 8004890:	d04a      	beq.n	8004928 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004892:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8004896:	d1f3      	bne.n	8004880 <SPI_WaitFifoStateUntilTimeout+0x40>
 8004898:	2d00      	cmp	r5, #0
 800489a:	d1f1      	bne.n	8004880 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 800489c:	f89a 300c 	ldrb.w	r3, [sl, #12]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80048a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80048aa:	e7e9      	b.n	8004880 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048ac:	f7fc fc74 	bl	8001198 <HAL_GetTick>
 80048b0:	eba0 0009 	sub.w	r0, r0, r9
 80048b4:	4540      	cmp	r0, r8
 80048b6:	d20a      	bcs.n	80048ce <SPI_WaitFifoStateUntilTimeout+0x8e>
 80048b8:	f1b8 0f00 	cmp.w	r8, #0
 80048bc:	d007      	beq.n	80048ce <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048be:	9a01      	ldr	r2, [sp, #4]
 80048c0:	b102      	cbz	r2, 80048c4 <SPI_WaitFifoStateUntilTimeout+0x84>
 80048c2:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 80048c4:	9b01      	ldr	r3, [sp, #4]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	4690      	mov	r8, r2
 80048cc:	e7db      	b.n	8004886 <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048ce:	6832      	ldr	r2, [r6, #0]
 80048d0:	6853      	ldr	r3, [r2, #4]
 80048d2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80048d6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d8:	6873      	ldr	r3, [r6, #4]
 80048da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048de:	d00b      	beq.n	80048f8 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048e0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80048e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e6:	d014      	beq.n	8004912 <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80048ee:	2300      	movs	r3, #0
 80048f0:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 80048f4:	2003      	movs	r0, #3
 80048f6:	e018      	b.n	800492a <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f8:	68b3      	ldr	r3, [r6, #8]
 80048fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fe:	d002      	beq.n	8004906 <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004904:	d1ec      	bne.n	80048e0 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8004906:	6832      	ldr	r2, [r6, #0]
 8004908:	6813      	ldr	r3, [r2, #0]
 800490a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	e7e6      	b.n	80048e0 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8004912:	6832      	ldr	r2, [r6, #0]
 8004914:	6813      	ldr	r3, [r2, #0]
 8004916:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	6832      	ldr	r2, [r6, #0]
 800491e:	6813      	ldr	r3, [r2, #0]
 8004920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e7df      	b.n	80048e8 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8004928:	2000      	movs	r0, #0
}
 800492a:	b002      	add	sp, #8
 800492c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004930:	20000000 	.word	0x20000000

08004934 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	4604      	mov	r4, r0
 800493a:	460d      	mov	r5, r1
 800493c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800493e:	9200      	str	r2, [sp, #0]
 8004940:	460b      	mov	r3, r1
 8004942:	2200      	movs	r2, #0
 8004944:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004948:	f7ff ff7a 	bl	8004840 <SPI_WaitFifoStateUntilTimeout>
 800494c:	b9b0      	cbnz	r0, 800497c <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800494e:	9600      	str	r6, [sp, #0]
 8004950:	462b      	mov	r3, r5
 8004952:	2200      	movs	r2, #0
 8004954:	2180      	movs	r1, #128	; 0x80
 8004956:	4620      	mov	r0, r4
 8004958:	f7ff ff0a 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 800495c:	b9a8      	cbnz	r0, 800498a <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800495e:	9600      	str	r6, [sp, #0]
 8004960:	462b      	mov	r3, r5
 8004962:	2200      	movs	r2, #0
 8004964:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004968:	4620      	mov	r0, r4
 800496a:	f7ff ff69 	bl	8004840 <SPI_WaitFifoStateUntilTimeout>
 800496e:	b150      	cbz	r0, 8004986 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004970:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004972:	f043 0320 	orr.w	r3, r3, #32
 8004976:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004978:	2003      	movs	r0, #3
 800497a:	e004      	b.n	8004986 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800497c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800497e:	f043 0320 	orr.w	r3, r3, #32
 8004982:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004984:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8004986:	b002      	add	sp, #8
 8004988:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800498c:	f043 0320 	orr.w	r3, r3, #32
 8004990:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004992:	2003      	movs	r0, #3
 8004994:	e7f7      	b.n	8004986 <SPI_EndRxTxTransaction+0x52>

08004996 <SPI_EndRxTransaction>:
{
 8004996:	b570      	push	{r4, r5, r6, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	4604      	mov	r4, r0
 800499c:	460d      	mov	r5, r1
 800499e:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a0:	6843      	ldr	r3, [r0, #4]
 80049a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049a6:	d00d      	beq.n	80049c4 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049a8:	9600      	str	r6, [sp, #0]
 80049aa:	462b      	mov	r3, r5
 80049ac:	2200      	movs	r2, #0
 80049ae:	2180      	movs	r1, #128	; 0x80
 80049b0:	4620      	mov	r0, r4
 80049b2:	f7ff fedd 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 80049b6:	b990      	cbnz	r0, 80049de <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049b8:	6863      	ldr	r3, [r4, #4]
 80049ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049be:	d014      	beq.n	80049ea <SPI_EndRxTransaction+0x54>
}
 80049c0:	b002      	add	sp, #8
 80049c2:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c4:	6883      	ldr	r3, [r0, #8]
 80049c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ca:	d002      	beq.n	80049d2 <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d0:	d1ea      	bne.n	80049a8 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 80049d2:	6822      	ldr	r2, [r4, #0]
 80049d4:	6813      	ldr	r3, [r2, #0]
 80049d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	e7e4      	b.n	80049a8 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80049e0:	f043 0320 	orr.w	r3, r3, #32
 80049e4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80049e6:	2003      	movs	r0, #3
 80049e8:	e7ea      	b.n	80049c0 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ea:	68a3      	ldr	r3, [r4, #8]
 80049ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f0:	d002      	beq.n	80049f8 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f6:	d1e3      	bne.n	80049c0 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049f8:	9600      	str	r6, [sp, #0]
 80049fa:	462b      	mov	r3, r5
 80049fc:	2200      	movs	r2, #0
 80049fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a02:	4620      	mov	r0, r4
 8004a04:	f7ff ff1c 	bl	8004840 <SPI_WaitFifoStateUntilTimeout>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d0d9      	beq.n	80049c0 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a0c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a0e:	f043 0320 	orr.w	r3, r3, #32
 8004a12:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004a14:	2003      	movs	r0, #3
 8004a16:	e7d3      	b.n	80049c0 <SPI_EndRxTransaction+0x2a>

08004a18 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	f000 8170 	beq.w	8004cfe <HAL_SPI_Init+0x2e6>
{
 8004a1e:	b510      	push	{r4, lr}
 8004a20:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004a22:	6803      	ldr	r3, [r0, #0]
 8004a24:	4a71      	ldr	r2, [pc, #452]	; (8004bec <HAL_SPI_Init+0x1d4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d010      	beq.n	8004a4c <HAL_SPI_Init+0x34>
 8004a2a:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00c      	beq.n	8004a4c <HAL_SPI_Init+0x34>
 8004a32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d008      	beq.n	8004a4c <HAL_SPI_Init+0x34>
 8004a3a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d004      	beq.n	8004a4c <HAL_SPI_Init+0x34>
 8004a42:	f240 1145 	movw	r1, #325	; 0x145
 8004a46:	486a      	ldr	r0, [pc, #424]	; (8004bf0 <HAL_SPI_Init+0x1d8>)
 8004a48:	f7fc f90f 	bl	8000c6a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004a4c:	6863      	ldr	r3, [r4, #4]
 8004a4e:	b113      	cbz	r3, 8004a56 <HAL_SPI_Init+0x3e>
 8004a50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a54:	d16a      	bne.n	8004b2c <HAL_SPI_Init+0x114>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004a56:	68a3      	ldr	r3, [r4, #8]
 8004a58:	b12b      	cbz	r3, 8004a66 <HAL_SPI_Init+0x4e>
 8004a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5e:	d002      	beq.n	8004a66 <HAL_SPI_Init+0x4e>
 8004a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a64:	d168      	bne.n	8004b38 <HAL_SPI_Init+0x120>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004a66:	68e3      	ldr	r3, [r4, #12]
 8004a68:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a6c:	d023      	beq.n	8004ab6 <HAL_SPI_Init+0x9e>
 8004a6e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004a72:	d020      	beq.n	8004ab6 <HAL_SPI_Init+0x9e>
 8004a74:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004a78:	d01d      	beq.n	8004ab6 <HAL_SPI_Init+0x9e>
 8004a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a7e:	d01a      	beq.n	8004ab6 <HAL_SPI_Init+0x9e>
 8004a80:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004a84:	d017      	beq.n	8004ab6 <HAL_SPI_Init+0x9e>
 8004a86:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004a8a:	d014      	beq.n	8004ab6 <HAL_SPI_Init+0x9e>
 8004a8c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004a90:	d011      	beq.n	8004ab6 <HAL_SPI_Init+0x9e>
 8004a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a96:	d00e      	beq.n	8004ab6 <HAL_SPI_Init+0x9e>
 8004a98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a9c:	d00b      	beq.n	8004ab6 <HAL_SPI_Init+0x9e>
 8004a9e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004aa2:	d008      	beq.n	8004ab6 <HAL_SPI_Init+0x9e>
 8004aa4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004aa8:	d005      	beq.n	8004ab6 <HAL_SPI_Init+0x9e>
 8004aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aae:	d002      	beq.n	8004ab6 <HAL_SPI_Init+0x9e>
 8004ab0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ab4:	d146      	bne.n	8004b44 <HAL_SPI_Init+0x12c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004ab6:	69a3      	ldr	r3, [r4, #24]
 8004ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004abc:	d003      	beq.n	8004ac6 <HAL_SPI_Init+0xae>
 8004abe:	b113      	cbz	r3, 8004ac6 <HAL_SPI_Init+0xae>
 8004ac0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ac4:	d144      	bne.n	8004b50 <HAL_SPI_Init+0x138>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004ac6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d001      	beq.n	8004ad0 <HAL_SPI_Init+0xb8>
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d145      	bne.n	8004b5c <HAL_SPI_Init+0x144>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004ad0:	69e3      	ldr	r3, [r4, #28]
 8004ad2:	b193      	cbz	r3, 8004afa <HAL_SPI_Init+0xe2>
 8004ad4:	2b18      	cmp	r3, #24
 8004ad6:	d947      	bls.n	8004b68 <HAL_SPI_Init+0x150>
 8004ad8:	2b38      	cmp	r3, #56	; 0x38
 8004ada:	d809      	bhi.n	8004af0 <HAL_SPI_Init+0xd8>
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d307      	bcc.n	8004af0 <HAL_SPI_Init+0xd8>
 8004ae0:	3b20      	subs	r3, #32
 8004ae2:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8004ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aea:	f013 0f01 	tst.w	r3, #1
 8004aee:	d104      	bne.n	8004afa <HAL_SPI_Init+0xe2>
 8004af0:	f240 114b 	movw	r1, #331	; 0x14b
 8004af4:	483e      	ldr	r0, [pc, #248]	; (8004bf0 <HAL_SPI_Init+0x1d8>)
 8004af6:	f7fc f8b8 	bl	8000c6a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004afa:	6a23      	ldr	r3, [r4, #32]
 8004afc:	b10b      	cbz	r3, 8004b02 <HAL_SPI_Init+0xea>
 8004afe:	2b80      	cmp	r3, #128	; 0x80
 8004b00:	d13b      	bne.n	8004b7a <HAL_SPI_Init+0x162>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b04:	b10b      	cbz	r3, 8004b0a <HAL_SPI_Init+0xf2>
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	d13d      	bne.n	8004b86 <HAL_SPI_Init+0x16e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d173      	bne.n	8004bf8 <HAL_SPI_Init+0x1e0>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004b10:	6923      	ldr	r3, [r4, #16]
 8004b12:	b10b      	cbz	r3, 8004b18 <HAL_SPI_Init+0x100>
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d13c      	bne.n	8004b92 <HAL_SPI_Init+0x17a>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004b18:	6963      	ldr	r3, [r4, #20]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d83f      	bhi.n	8004b9e <HAL_SPI_Init+0x186>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b1e:	6863      	ldr	r3, [r4, #4]
 8004b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b24:	d041      	beq.n	8004baa <HAL_SPI_Init+0x192>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b26:	2300      	movs	r3, #0
 8004b28:	61e3      	str	r3, [r4, #28]
 8004b2a:	e07d      	b.n	8004c28 <HAL_SPI_Init+0x210>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004b2c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004b30:	482f      	ldr	r0, [pc, #188]	; (8004bf0 <HAL_SPI_Init+0x1d8>)
 8004b32:	f7fc f89a 	bl	8000c6a <assert_failed>
 8004b36:	e78e      	b.n	8004a56 <HAL_SPI_Init+0x3e>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004b38:	f240 1147 	movw	r1, #327	; 0x147
 8004b3c:	482c      	ldr	r0, [pc, #176]	; (8004bf0 <HAL_SPI_Init+0x1d8>)
 8004b3e:	f7fc f894 	bl	8000c6a <assert_failed>
 8004b42:	e790      	b.n	8004a66 <HAL_SPI_Init+0x4e>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004b44:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004b48:	4829      	ldr	r0, [pc, #164]	; (8004bf0 <HAL_SPI_Init+0x1d8>)
 8004b4a:	f7fc f88e 	bl	8000c6a <assert_failed>
 8004b4e:	e7b2      	b.n	8004ab6 <HAL_SPI_Init+0x9e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004b50:	f240 1149 	movw	r1, #329	; 0x149
 8004b54:	4826      	ldr	r0, [pc, #152]	; (8004bf0 <HAL_SPI_Init+0x1d8>)
 8004b56:	f7fc f888 	bl	8000c6a <assert_failed>
 8004b5a:	e7b4      	b.n	8004ac6 <HAL_SPI_Init+0xae>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004b5c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004b60:	4823      	ldr	r0, [pc, #140]	; (8004bf0 <HAL_SPI_Init+0x1d8>)
 8004b62:	f7fc f882 	bl	8000c6a <assert_failed>
 8004b66:	e7b3      	b.n	8004ad0 <HAL_SPI_Init+0xb8>
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d3c1      	bcc.n	8004af0 <HAL_SPI_Init+0xd8>
 8004b6c:	4a21      	ldr	r2, [pc, #132]	; (8004bf4 <HAL_SPI_Init+0x1dc>)
 8004b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b72:	f013 0f01 	tst.w	r3, #1
 8004b76:	d0bb      	beq.n	8004af0 <HAL_SPI_Init+0xd8>
 8004b78:	e7bf      	b.n	8004afa <HAL_SPI_Init+0xe2>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004b7a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004b7e:	481c      	ldr	r0, [pc, #112]	; (8004bf0 <HAL_SPI_Init+0x1d8>)
 8004b80:	f7fc f873 	bl	8000c6a <assert_failed>
 8004b84:	e7bd      	b.n	8004b02 <HAL_SPI_Init+0xea>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004b86:	f240 114d 	movw	r1, #333	; 0x14d
 8004b8a:	4819      	ldr	r0, [pc, #100]	; (8004bf0 <HAL_SPI_Init+0x1d8>)
 8004b8c:	f7fc f86d 	bl	8000c6a <assert_failed>
 8004b90:	e7bb      	b.n	8004b0a <HAL_SPI_Init+0xf2>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004b92:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004b96:	4816      	ldr	r0, [pc, #88]	; (8004bf0 <HAL_SPI_Init+0x1d8>)
 8004b98:	f7fc f867 	bl	8000c6a <assert_failed>
 8004b9c:	e7bc      	b.n	8004b18 <HAL_SPI_Init+0x100>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004b9e:	f240 1151 	movw	r1, #337	; 0x151
 8004ba2:	4813      	ldr	r0, [pc, #76]	; (8004bf0 <HAL_SPI_Init+0x1d8>)
 8004ba4:	f7fc f861 	bl	8000c6a <assert_failed>
 8004ba8:	e7b9      	b.n	8004b1e <HAL_SPI_Init+0x106>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004baa:	69e3      	ldr	r3, [r4, #28]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d03b      	beq.n	8004c28 <HAL_SPI_Init+0x210>
 8004bb0:	2b18      	cmp	r3, #24
 8004bb2:	d911      	bls.n	8004bd8 <HAL_SPI_Init+0x1c0>
 8004bb4:	2b38      	cmp	r3, #56	; 0x38
 8004bb6:	d809      	bhi.n	8004bcc <HAL_SPI_Init+0x1b4>
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d307      	bcc.n	8004bcc <HAL_SPI_Init+0x1b4>
 8004bbc:	3b20      	subs	r3, #32
 8004bbe:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8004bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc6:	f013 0f01 	tst.w	r3, #1
 8004bca:	d12d      	bne.n	8004c28 <HAL_SPI_Init+0x210>
 8004bcc:	f240 1155 	movw	r1, #341	; 0x155
 8004bd0:	4807      	ldr	r0, [pc, #28]	; (8004bf0 <HAL_SPI_Init+0x1d8>)
 8004bd2:	f7fc f84a 	bl	8000c6a <assert_failed>
 8004bd6:	e027      	b.n	8004c28 <HAL_SPI_Init+0x210>
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d3f7      	bcc.n	8004bcc <HAL_SPI_Init+0x1b4>
 8004bdc:	4a05      	ldr	r2, [pc, #20]	; (8004bf4 <HAL_SPI_Init+0x1dc>)
 8004bde:	fa22 f303 	lsr.w	r3, r2, r3
 8004be2:	f013 0f01 	tst.w	r3, #1
 8004be6:	d0f1      	beq.n	8004bcc <HAL_SPI_Init+0x1b4>
 8004be8:	e01e      	b.n	8004c28 <HAL_SPI_Init+0x210>
 8004bea:	bf00      	nop
 8004bec:	40013000 	.word	0x40013000
 8004bf0:	08012f2c 	.word	0x08012f2c
 8004bf4:	01010100 	.word	0x01010100
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004bf8:	69e3      	ldr	r3, [r4, #28]
 8004bfa:	b193      	cbz	r3, 8004c22 <HAL_SPI_Init+0x20a>
 8004bfc:	2b18      	cmp	r3, #24
 8004bfe:	d96c      	bls.n	8004cda <HAL_SPI_Init+0x2c2>
 8004c00:	2b38      	cmp	r3, #56	; 0x38
 8004c02:	d809      	bhi.n	8004c18 <HAL_SPI_Init+0x200>
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d307      	bcc.n	8004c18 <HAL_SPI_Init+0x200>
 8004c08:	3b20      	subs	r3, #32
 8004c0a:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8004c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c12:	f013 0f01 	tst.w	r3, #1
 8004c16:	d104      	bne.n	8004c22 <HAL_SPI_Init+0x20a>
 8004c18:	f240 115f 	movw	r1, #351	; 0x15f
 8004c1c:	4839      	ldr	r0, [pc, #228]	; (8004d04 <HAL_SPI_Init+0x2ec>)
 8004c1e:	f7fc f824 	bl	8000c6a <assert_failed>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c22:	2300      	movs	r3, #0
 8004c24:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c26:	6163      	str	r3, [r4, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c2c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d05b      	beq.n	8004cec <HAL_SPI_Init+0x2d4>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004c34:	2302      	movs	r3, #2
 8004c36:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004c3a:	6822      	ldr	r2, [r4, #0]
 8004c3c:	6813      	ldr	r3, [r2, #0]
 8004c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c42:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c44:	68e3      	ldr	r3, [r4, #12]
 8004c46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c4a:	d955      	bls.n	8004cf8 <HAL_SPI_Init+0x2e0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c4c:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c4e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c52:	d004      	beq.n	8004c5e <HAL_SPI_Init+0x246>
 8004c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c58:	d001      	beq.n	8004c5e <HAL_SPI_Init+0x246>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c5e:	6863      	ldr	r3, [r4, #4]
 8004c60:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004c64:	68a1      	ldr	r1, [r4, #8]
 8004c66:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	6921      	ldr	r1, [r4, #16]
 8004c6e:	f001 0102 	and.w	r1, r1, #2
 8004c72:	430b      	orrs	r3, r1
 8004c74:	6961      	ldr	r1, [r4, #20]
 8004c76:	f001 0101 	and.w	r1, r1, #1
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	69a1      	ldr	r1, [r4, #24]
 8004c7e:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004c82:	430b      	orrs	r3, r1
 8004c84:	69e1      	ldr	r1, [r4, #28]
 8004c86:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	6a21      	ldr	r1, [r4, #32]
 8004c8e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004c92:	430b      	orrs	r3, r1
 8004c94:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004c96:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004c9a:	6820      	ldr	r0, [r4, #0]
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ca0:	8b63      	ldrh	r3, [r4, #26]
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ca8:	f001 0110 	and.w	r1, r1, #16
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cb0:	f001 0108 	and.w	r1, r1, #8
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	68e1      	ldr	r1, [r4, #12]
 8004cb8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6821      	ldr	r1, [r4, #0]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cc4:	6822      	ldr	r2, [r4, #0]
 8004cc6:	69d3      	ldr	r3, [r2, #28]
 8004cc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ccc:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cce:	2000      	movs	r0, #0
 8004cd0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004cd8:	bd10      	pop	{r4, pc}
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d39c      	bcc.n	8004c18 <HAL_SPI_Init+0x200>
 8004cde:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <HAL_SPI_Init+0x2f0>)
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce4:	f013 0f01 	tst.w	r3, #1
 8004ce8:	d096      	beq.n	8004c18 <HAL_SPI_Init+0x200>
 8004cea:	e79a      	b.n	8004c22 <HAL_SPI_Init+0x20a>
    hspi->Lock = HAL_UNLOCKED;
 8004cec:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f7fb ffe1 	bl	8000cb8 <HAL_SPI_MspInit>
 8004cf6:	e79d      	b.n	8004c34 <HAL_SPI_Init+0x21c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004cfc:	e7a7      	b.n	8004c4e <HAL_SPI_Init+0x236>
    return HAL_ERROR;
 8004cfe:	2001      	movs	r0, #1
}
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	08012f2c 	.word	0x08012f2c
 8004d08:	01010100 	.word	0x01010100

08004d0c <HAL_SPI_Transmit_DMA>:
{
 8004d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0e:	4604      	mov	r4, r0
 8004d10:	460e      	mov	r6, r1
 8004d12:	4617      	mov	r7, r2
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004d14:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d065      	beq.n	8004de6 <HAL_SPI_Transmit_DMA+0xda>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004d1a:	68a3      	ldr	r3, [r4, #8]
 8004d1c:	b113      	cbz	r3, 8004d24 <HAL_SPI_Transmit_DMA+0x18>
 8004d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d22:	d166      	bne.n	8004df2 <HAL_SPI_Transmit_DMA+0xe6>
  __HAL_LOCK(hspi);
 8004d24:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	f000 809a 	beq.w	8004e62 <HAL_SPI_Transmit_DMA+0x156>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8004d34:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
 8004d38:	b2ed      	uxtb	r5, r5
 8004d3a:	429d      	cmp	r5, r3
 8004d3c:	f040 808b 	bne.w	8004e56 <HAL_SPI_Transmit_DMA+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8004d40:	2e00      	cmp	r6, #0
 8004d42:	f000 8089 	beq.w	8004e58 <HAL_SPI_Transmit_DMA+0x14c>
 8004d46:	2f00      	cmp	r7, #0
 8004d48:	f000 8086 	beq.w	8004e58 <HAL_SPI_Transmit_DMA+0x14c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d56:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d58:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d5a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d5c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d5e:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d60:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8004d62:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d66:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d6a:	68a3      	ldr	r3, [r4, #8]
 8004d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d70:	d045      	beq.n	8004dfe <HAL_SPI_Transmit_DMA+0xf2>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004d72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d74:	4a3c      	ldr	r2, [pc, #240]	; (8004e68 <HAL_SPI_Transmit_DMA+0x15c>)
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004d78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d7a:	4a3c      	ldr	r2, [pc, #240]	; (8004e6c <HAL_SPI_Transmit_DMA+0x160>)
 8004d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004d7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d80:	4a3b      	ldr	r2, [pc, #236]	; (8004e70 <HAL_SPI_Transmit_DMA+0x164>)
 8004d82:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 8004d84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d86:	2200      	movs	r2, #0
 8004d88:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004d8a:	6822      	ldr	r2, [r4, #0]
 8004d8c:	6853      	ldr	r3, [r2, #4]
 8004d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d92:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004d94:	68e3      	ldr	r3, [r4, #12]
 8004d96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d9a:	d804      	bhi.n	8004da6 <HAL_SPI_Transmit_DMA+0x9a>
 8004d9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da4:	d036      	beq.n	8004e14 <HAL_SPI_Transmit_DMA+0x108>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004da6:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 8004da8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	320c      	adds	r2, #12
 8004dae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004db0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004db2:	f7fc fbcf 	bl	8001554 <HAL_DMA_Start_IT>
 8004db6:	4601      	mov	r1, r0
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d144      	bne.n	8004e46 <HAL_SPI_Transmit_DMA+0x13a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004dc4:	d103      	bne.n	8004dce <HAL_SPI_Transmit_DMA+0xc2>
    __HAL_SPI_ENABLE(hspi);
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dcc:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004dce:	6822      	ldr	r2, [r4, #0]
 8004dd0:	6853      	ldr	r3, [r2, #4]
 8004dd2:	f043 0320 	orr.w	r3, r3, #32
 8004dd6:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004dd8:	6822      	ldr	r2, [r4, #0]
 8004dda:	6853      	ldr	r3, [r2, #4]
 8004ddc:	f043 0302 	orr.w	r3, r3, #2
 8004de0:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004de2:	460d      	mov	r5, r1
 8004de4:	e038      	b.n	8004e58 <HAL_SPI_Transmit_DMA+0x14c>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004de6:	f240 7145 	movw	r1, #1861	; 0x745
 8004dea:	4822      	ldr	r0, [pc, #136]	; (8004e74 <HAL_SPI_Transmit_DMA+0x168>)
 8004dec:	f7fb ff3d 	bl	8000c6a <assert_failed>
 8004df0:	e793      	b.n	8004d1a <HAL_SPI_Transmit_DMA+0xe>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004df2:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 8004df6:	481f      	ldr	r0, [pc, #124]	; (8004e74 <HAL_SPI_Transmit_DMA+0x168>)
 8004df8:	f7fb ff37 	bl	8000c6a <assert_failed>
 8004dfc:	e792      	b.n	8004d24 <HAL_SPI_Transmit_DMA+0x18>
    __HAL_SPI_DISABLE(hspi);
 8004dfe:	6822      	ldr	r2, [r4, #0]
 8004e00:	6813      	ldr	r3, [r2, #0]
 8004e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e06:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004e08:	6822      	ldr	r2, [r4, #0]
 8004e0a:	6813      	ldr	r3, [r2, #0]
 8004e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e7ae      	b.n	8004d72 <HAL_SPI_Transmit_DMA+0x66>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004e14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e16:	f013 0f01 	tst.w	r3, #1
 8004e1a:	d109      	bne.n	8004e30 <HAL_SPI_Transmit_DMA+0x124>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004e1c:	6822      	ldr	r2, [r4, #0]
 8004e1e:	6853      	ldr	r3, [r2, #4]
 8004e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e24:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004e26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e28:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004e2c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004e2e:	e7ba      	b.n	8004da6 <HAL_SPI_Transmit_DMA+0x9a>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004e30:	6822      	ldr	r2, [r4, #0]
 8004e32:	6853      	ldr	r3, [r2, #4]
 8004e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e38:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004e3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e3c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004e40:	3301      	adds	r3, #1
 8004e42:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004e44:	e7af      	b.n	8004da6 <HAL_SPI_Transmit_DMA+0x9a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e46:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e48:	f043 0310 	orr.w	r3, r3, #16
 8004e4c:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 8004e54:	e000      	b.n	8004e58 <HAL_SPI_Transmit_DMA+0x14c>
    errorcode = HAL_BUSY;
 8004e56:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004e5e:	4628      	mov	r0, r5
 8004e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8004e62:	2502      	movs	r5, #2
 8004e64:	e7fb      	b.n	8004e5e <HAL_SPI_Transmit_DMA+0x152>
 8004e66:	bf00      	nop
 8004e68:	080050d1 	.word	0x080050d1
 8004e6c:	08005117 	.word	0x08005117
 8004e70:	080050f5 	.word	0x080050f5
 8004e74:	08012f2c 	.word	0x08012f2c

08004e78 <HAL_SPI_TransmitReceive_DMA>:
{
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	460e      	mov	r6, r1
 8004e7e:	4617      	mov	r7, r2
 8004e80:	461d      	mov	r5, r3
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8004e82:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d06d      	beq.n	8004f64 <HAL_SPI_TransmitReceive_DMA+0xec>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004e88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d070      	beq.n	8004f70 <HAL_SPI_TransmitReceive_DMA+0xf8>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004e8e:	68a3      	ldr	r3, [r4, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d173      	bne.n	8004f7c <HAL_SPI_TransmitReceive_DMA+0x104>
  __HAL_LOCK(hspi);
 8004e94:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	f000 8109 	beq.w	80050b0 <HAL_SPI_TransmitReceive_DMA+0x238>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 8004ea4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004ea8:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8004eaa:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d00a      	beq.n	8004ec6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8004eb0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004eb4:	f040 80ed 	bne.w	8005092 <HAL_SPI_TransmitReceive_DMA+0x21a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004eb8:	68a2      	ldr	r2, [r4, #8]
 8004eba:	2a00      	cmp	r2, #0
 8004ebc:	f040 80ee 	bne.w	800509c <HAL_SPI_TransmitReceive_DMA+0x224>
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	f040 80ed 	bne.w	80050a0 <HAL_SPI_TransmitReceive_DMA+0x228>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ec6:	2e00      	cmp	r6, #0
 8004ec8:	f000 80ec 	beq.w	80050a4 <HAL_SPI_TransmitReceive_DMA+0x22c>
 8004ecc:	2f00      	cmp	r7, #0
 8004ece:	f000 80eb 	beq.w	80050a8 <HAL_SPI_TransmitReceive_DMA+0x230>
 8004ed2:	2d00      	cmp	r5, #0
 8004ed4:	f000 80ea 	beq.w	80050ac <HAL_SPI_TransmitReceive_DMA+0x234>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ed8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d002      	beq.n	8004ee8 <HAL_SPI_TransmitReceive_DMA+0x70>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ee2:	2305      	movs	r3, #5
 8004ee4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004eec:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004eee:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ef0:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ef2:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ef4:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004ef8:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004efc:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004efe:	6523      	str	r3, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004f00:	6822      	ldr	r2, [r4, #0]
 8004f02:	6853      	ldr	r3, [r2, #4]
 8004f04:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8004f08:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f0a:	68e3      	ldr	r3, [r4, #12]
 8004f0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f10:	d93a      	bls.n	8004f88 <HAL_SPI_TransmitReceive_DMA+0x110>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	6853      	ldr	r3, [r2, #4]
 8004f16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f1a:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004f1c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d07b      	beq.n	800501e <HAL_SPI_TransmitReceive_DMA+0x1a6>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004f26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f28:	4a62      	ldr	r2, [pc, #392]	; (80050b4 <HAL_SPI_TransmitReceive_DMA+0x23c>)
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004f2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f2e:	4a62      	ldr	r2, [pc, #392]	; (80050b8 <HAL_SPI_TransmitReceive_DMA+0x240>)
 8004f30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004f32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f34:	4a61      	ldr	r2, [pc, #388]	; (80050bc <HAL_SPI_TransmitReceive_DMA+0x244>)
 8004f36:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8004f38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004f3e:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 8004f40:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004f48:	310c      	adds	r1, #12
 8004f4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f4c:	f7fc fb02 	bl	8001554 <HAL_DMA_Start_IT>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d06b      	beq.n	800502c <HAL_SPI_TransmitReceive_DMA+0x1b4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f54:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004f56:	f043 0310 	orr.w	r3, r3, #16
 8004f5a:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 8004f62:	e097      	b.n	8005094 <HAL_SPI_TransmitReceive_DMA+0x21c>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8004f64:	f640 0156 	movw	r1, #2134	; 0x856
 8004f68:	4855      	ldr	r0, [pc, #340]	; (80050c0 <HAL_SPI_TransmitReceive_DMA+0x248>)
 8004f6a:	f7fb fe7e 	bl	8000c6a <assert_failed>
 8004f6e:	e78b      	b.n	8004e88 <HAL_SPI_TransmitReceive_DMA+0x10>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004f70:	f640 0157 	movw	r1, #2135	; 0x857
 8004f74:	4852      	ldr	r0, [pc, #328]	; (80050c0 <HAL_SPI_TransmitReceive_DMA+0x248>)
 8004f76:	f7fb fe78 	bl	8000c6a <assert_failed>
 8004f7a:	e788      	b.n	8004e8e <HAL_SPI_TransmitReceive_DMA+0x16>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004f7c:	f640 015a 	movw	r1, #2138	; 0x85a
 8004f80:	484f      	ldr	r0, [pc, #316]	; (80050c0 <HAL_SPI_TransmitReceive_DMA+0x248>)
 8004f82:	f7fb fe72 	bl	8000c6a <assert_failed>
 8004f86:	e785      	b.n	8004e94 <HAL_SPI_TransmitReceive_DMA+0x1c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f88:	6822      	ldr	r2, [r4, #0]
 8004f8a:	6853      	ldr	r3, [r2, #4]
 8004f8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f90:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9a:	d01a      	beq.n	8004fd2 <HAL_SPI_TransmitReceive_DMA+0x15a>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa4:	d1ba      	bne.n	8004f1c <HAL_SPI_TransmitReceive_DMA+0xa4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fa6:	6822      	ldr	r2, [r4, #0]
 8004fa8:	6853      	ldr	r3, [r2, #4]
 8004faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fae:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004fb0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004fb4:	f013 0f01 	tst.w	r3, #1
 8004fb8:	d124      	bne.n	8005004 <HAL_SPI_TransmitReceive_DMA+0x18c>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004fba:	6822      	ldr	r2, [r4, #0]
 8004fbc:	6853      	ldr	r3, [r2, #4]
 8004fbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fc2:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004fc4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004fc8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004fcc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8004fd0:	e7a4      	b.n	8004f1c <HAL_SPI_TransmitReceive_DMA+0xa4>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004fd2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8004fd4:	f013 0f01 	tst.w	r3, #1
 8004fd8:	d109      	bne.n	8004fee <HAL_SPI_TransmitReceive_DMA+0x176>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004fda:	6822      	ldr	r2, [r4, #0]
 8004fdc:	6853      	ldr	r3, [r2, #4]
 8004fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fe2:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004fe4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fe6:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004fea:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004fec:	e7d6      	b.n	8004f9c <HAL_SPI_TransmitReceive_DMA+0x124>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004fee:	6822      	ldr	r2, [r4, #0]
 8004ff0:	6853      	ldr	r3, [r2, #4]
 8004ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ff6:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004ff8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ffa:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004ffe:	3301      	adds	r3, #1
 8005000:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005002:	e7cb      	b.n	8004f9c <HAL_SPI_TransmitReceive_DMA+0x124>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005004:	6822      	ldr	r2, [r4, #0]
 8005006:	6853      	ldr	r3, [r2, #4]
 8005008:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800500c:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800500e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005012:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8005016:	3301      	adds	r3, #1
 8005018:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800501c:	e77e      	b.n	8004f1c <HAL_SPI_TransmitReceive_DMA+0xa4>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800501e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005020:	4a28      	ldr	r2, [pc, #160]	; (80050c4 <HAL_SPI_TransmitReceive_DMA+0x24c>)
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005024:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005026:	4a28      	ldr	r2, [pc, #160]	; (80050c8 <HAL_SPI_TransmitReceive_DMA+0x250>)
 8005028:	62da      	str	r2, [r3, #44]	; 0x2c
 800502a:	e782      	b.n	8004f32 <HAL_SPI_TransmitReceive_DMA+0xba>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800502c:	6822      	ldr	r2, [r4, #0]
 800502e:	6853      	ldr	r3, [r2, #4]
 8005030:	f043 0301 	orr.w	r3, r3, #1
 8005034:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005036:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005038:	2300      	movs	r3, #0
 800503a:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800503c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800503e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005040:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005042:	6353      	str	r3, [r2, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005044:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005046:	6393      	str	r3, [r2, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005048:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 800504a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800504c:	b29b      	uxth	r3, r3
 800504e:	320c      	adds	r2, #12
 8005050:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005052:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005054:	f7fc fa7e 	bl	8001554 <HAL_DMA_Start_IT>
 8005058:	b998      	cbnz	r0, 8005082 <HAL_SPI_TransmitReceive_DMA+0x20a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005062:	d103      	bne.n	800506c <HAL_SPI_TransmitReceive_DMA+0x1f4>
    __HAL_SPI_ENABLE(hspi);
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800506a:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800506c:	6822      	ldr	r2, [r4, #0]
 800506e:	6853      	ldr	r3, [r2, #4]
 8005070:	f043 0320 	orr.w	r3, r3, #32
 8005074:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005076:	6822      	ldr	r2, [r4, #0]
 8005078:	6853      	ldr	r3, [r2, #4]
 800507a:	f043 0302 	orr.w	r3, r3, #2
 800507e:	6053      	str	r3, [r2, #4]
 8005080:	e008      	b.n	8005094 <HAL_SPI_TransmitReceive_DMA+0x21c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005082:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005084:	f043 0310 	orr.w	r3, r3, #16
 8005088:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800508a:	2001      	movs	r0, #1
 800508c:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 8005090:	e000      	b.n	8005094 <HAL_SPI_TransmitReceive_DMA+0x21c>
    errorcode = HAL_BUSY;
 8005092:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005094:	2300      	movs	r3, #0
 8005096:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800509a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    errorcode = HAL_BUSY;
 800509c:	2002      	movs	r0, #2
 800509e:	e7f9      	b.n	8005094 <HAL_SPI_TransmitReceive_DMA+0x21c>
 80050a0:	2002      	movs	r0, #2
 80050a2:	e7f7      	b.n	8005094 <HAL_SPI_TransmitReceive_DMA+0x21c>
    errorcode = HAL_ERROR;
 80050a4:	2001      	movs	r0, #1
 80050a6:	e7f5      	b.n	8005094 <HAL_SPI_TransmitReceive_DMA+0x21c>
 80050a8:	2001      	movs	r0, #1
 80050aa:	e7f3      	b.n	8005094 <HAL_SPI_TransmitReceive_DMA+0x21c>
 80050ac:	2001      	movs	r0, #1
 80050ae:	e7f1      	b.n	8005094 <HAL_SPI_TransmitReceive_DMA+0x21c>
  __HAL_LOCK(hspi);
 80050b0:	2002      	movs	r0, #2
 80050b2:	e7f2      	b.n	800509a <HAL_SPI_TransmitReceive_DMA+0x222>
 80050b4:	080050e9 	.word	0x080050e9
 80050b8:	080051f7 	.word	0x080051f7
 80050bc:	080050f5 	.word	0x080050f5
 80050c0:	08012f2c 	.word	0x08012f2c
 80050c4:	080050dd 	.word	0x080050dd
 80050c8:	08005187 	.word	0x08005187

080050cc <HAL_SPI_RxCpltCallback>:
}
 80050cc:	4770      	bx	lr

080050ce <HAL_SPI_TxHalfCpltCallback>:
}
 80050ce:	4770      	bx	lr

080050d0 <SPI_DMAHalfTransmitCplt>:
{
 80050d0:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80050d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80050d4:	f7ff fffb 	bl	80050ce <HAL_SPI_TxHalfCpltCallback>
}
 80050d8:	bd08      	pop	{r3, pc}

080050da <HAL_SPI_RxHalfCpltCallback>:
}
 80050da:	4770      	bx	lr

080050dc <SPI_DMAHalfReceiveCplt>:
{
 80050dc:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80050de:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80050e0:	f7ff fffb 	bl	80050da <HAL_SPI_RxHalfCpltCallback>
}
 80050e4:	bd08      	pop	{r3, pc}

080050e6 <HAL_SPI_TxRxHalfCpltCallback>:
}
 80050e6:	4770      	bx	lr

080050e8 <SPI_DMAHalfTransmitReceiveCplt>:
{
 80050e8:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80050ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80050ec:	f7ff fffb 	bl	80050e6 <HAL_SPI_TxRxHalfCpltCallback>
}
 80050f0:	bd08      	pop	{r3, pc}

080050f2 <HAL_SPI_ErrorCallback>:
}
 80050f2:	4770      	bx	lr

080050f4 <SPI_DMAError>:
{
 80050f4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80050f8:	6802      	ldr	r2, [r0, #0]
 80050fa:	6853      	ldr	r3, [r2, #4]
 80050fc:	f023 0303 	bic.w	r3, r3, #3
 8005100:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005102:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005104:	f043 0310 	orr.w	r3, r3, #16
 8005108:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800510a:	2301      	movs	r3, #1
 800510c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8005110:	f7ff ffef 	bl	80050f2 <HAL_SPI_ErrorCallback>
}
 8005114:	bd08      	pop	{r3, pc}

08005116 <SPI_DMATransmitCplt>:
{
 8005116:	b530      	push	{r4, r5, lr}
 8005118:	b083      	sub	sp, #12
 800511a:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800511c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800511e:	f7fc f83b 	bl	8001198 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005122:	682b      	ldr	r3, [r5, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f013 0f20 	tst.w	r3, #32
 800512a:	d123      	bne.n	8005174 <SPI_DMATransmitCplt+0x5e>
 800512c:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800512e:	6821      	ldr	r1, [r4, #0]
 8005130:	684b      	ldr	r3, [r1, #4]
 8005132:	f023 0320 	bic.w	r3, r3, #32
 8005136:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005138:	6821      	ldr	r1, [r4, #0]
 800513a:	684b      	ldr	r3, [r1, #4]
 800513c:	f023 0302 	bic.w	r3, r3, #2
 8005140:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005142:	2164      	movs	r1, #100	; 0x64
 8005144:	4620      	mov	r0, r4
 8005146:	f7ff fbf5 	bl	8004934 <SPI_EndRxTxTransaction>
 800514a:	b118      	cbz	r0, 8005154 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800514c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800514e:	f043 0320 	orr.w	r3, r3, #32
 8005152:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005154:	68a3      	ldr	r3, [r4, #8]
 8005156:	b933      	cbnz	r3, 8005166 <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	9201      	str	r2, [sp, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800516a:	2301      	movs	r3, #1
 800516c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005170:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005172:	b923      	cbnz	r3, 800517e <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 8005174:	4620      	mov	r0, r4
 8005176:	f009 fe07 	bl	800ed88 <HAL_SPI_TxCpltCallback>
}
 800517a:	b003      	add	sp, #12
 800517c:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800517e:	4620      	mov	r0, r4
 8005180:	f7ff ffb7 	bl	80050f2 <HAL_SPI_ErrorCallback>
      return;
 8005184:	e7f9      	b.n	800517a <SPI_DMATransmitCplt+0x64>

08005186 <SPI_DMAReceiveCplt>:
{
 8005186:	b538      	push	{r3, r4, r5, lr}
 8005188:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800518a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800518c:	f7fc f804 	bl	8001198 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005190:	682b      	ldr	r3, [r5, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f013 0f20 	tst.w	r3, #32
 8005198:	d11f      	bne.n	80051da <SPI_DMAReceiveCplt+0x54>
 800519a:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800519c:	6821      	ldr	r1, [r4, #0]
 800519e:	684b      	ldr	r3, [r1, #4]
 80051a0:	f023 0320 	bic.w	r3, r3, #32
 80051a4:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80051a6:	68a3      	ldr	r3, [r4, #8]
 80051a8:	b91b      	cbnz	r3, 80051b2 <SPI_DMAReceiveCplt+0x2c>
 80051aa:	6863      	ldr	r3, [r4, #4]
 80051ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b0:	d017      	beq.n	80051e2 <SPI_DMAReceiveCplt+0x5c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80051b2:	6821      	ldr	r1, [r4, #0]
 80051b4:	684b      	ldr	r3, [r1, #4]
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80051bc:	2164      	movs	r1, #100	; 0x64
 80051be:	4620      	mov	r0, r4
 80051c0:	f7ff fbe9 	bl	8004996 <SPI_EndRxTransaction>
 80051c4:	b108      	cbz	r0, 80051ca <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051c6:	2320      	movs	r3, #32
 80051c8:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80051d0:	2301      	movs	r3, #1
 80051d2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80051d8:	b94b      	cbnz	r3, 80051ee <SPI_DMAReceiveCplt+0x68>
  HAL_SPI_RxCpltCallback(hspi);
 80051da:	4620      	mov	r0, r4
 80051dc:	f7ff ff76 	bl	80050cc <HAL_SPI_RxCpltCallback>
}
 80051e0:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80051e2:	6821      	ldr	r1, [r4, #0]
 80051e4:	684b      	ldr	r3, [r1, #4]
 80051e6:	f023 0303 	bic.w	r3, r3, #3
 80051ea:	604b      	str	r3, [r1, #4]
 80051ec:	e7e6      	b.n	80051bc <SPI_DMAReceiveCplt+0x36>
      HAL_SPI_ErrorCallback(hspi);
 80051ee:	4620      	mov	r0, r4
 80051f0:	f7ff ff7f 	bl	80050f2 <HAL_SPI_ErrorCallback>
      return;
 80051f4:	e7f4      	b.n	80051e0 <SPI_DMAReceiveCplt+0x5a>

080051f6 <SPI_DMATransmitReceiveCplt>:
{
 80051f6:	b538      	push	{r3, r4, r5, lr}
 80051f8:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051fa:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80051fc:	f7fb ffcc 	bl	8001198 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f013 0f20 	tst.w	r3, #32
 8005208:	d11c      	bne.n	8005244 <SPI_DMATransmitReceiveCplt+0x4e>
 800520a:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800520c:	6821      	ldr	r1, [r4, #0]
 800520e:	684b      	ldr	r3, [r1, #4]
 8005210:	f023 0320 	bic.w	r3, r3, #32
 8005214:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005216:	2164      	movs	r1, #100	; 0x64
 8005218:	4620      	mov	r0, r4
 800521a:	f7ff fb8b 	bl	8004934 <SPI_EndRxTxTransaction>
 800521e:	b118      	cbz	r0, 8005228 <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005220:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005222:	f043 0320 	orr.w	r3, r3, #32
 8005226:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005228:	6822      	ldr	r2, [r4, #0]
 800522a:	6853      	ldr	r3, [r2, #4]
 800522c:	f023 0303 	bic.w	r3, r3, #3
 8005230:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005236:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800523a:	2301      	movs	r3, #1
 800523c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005240:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005242:	b91b      	cbnz	r3, 800524c <SPI_DMATransmitReceiveCplt+0x56>
  HAL_SPI_TxRxCpltCallback(hspi);
 8005244:	4620      	mov	r0, r4
 8005246:	f009 fda7 	bl	800ed98 <HAL_SPI_TxRxCpltCallback>
}
 800524a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800524c:	4620      	mov	r0, r4
 800524e:	f7ff ff50 	bl	80050f2 <HAL_SPI_ErrorCallback>
      return;
 8005252:	e7fa      	b.n	800524a <SPI_DMATransmitReceiveCplt+0x54>

08005254 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005254:	4770      	bx	lr
	...

08005258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005258:	b510      	push	{r4, lr}
 800525a:	4604      	mov	r4, r0
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800525c:	6803      	ldr	r3, [r0, #0]
 800525e:	4a3c      	ldr	r2, [pc, #240]	; (8005350 <HAL_TIM_Base_Start_IT+0xf8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d02f      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005268:	d02c      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 800526a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800526e:	4293      	cmp	r3, r2
 8005270:	d028      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 8005272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005276:	4293      	cmp	r3, r2
 8005278:	d024      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 800527a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800527e:	4293      	cmp	r3, r2
 8005280:	d020      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 8005282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005286:	4293      	cmp	r3, r2
 8005288:	d01c      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 800528a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 8005292:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8005296:	4293      	cmp	r3, r2
 8005298:	d014      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 800529a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800529e:	4293      	cmp	r3, r2
 80052a0:	d010      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 80052a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00c      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 80052aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d008      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 80052b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x6c>
 80052ba:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80052be:	4825      	ldr	r0, [pc, #148]	; (8005354 <HAL_TIM_Base_Start_IT+0xfc>)
 80052c0:	f7fb fcd3 	bl	8000c6a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d13a      	bne.n	8005344 <HAL_TIM_Base_Start_IT+0xec>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ce:	2302      	movs	r3, #2
 80052d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052d4:	6822      	ldr	r2, [r4, #0]
 80052d6:	68d3      	ldr	r3, [r2, #12]
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	4a1b      	ldr	r2, [pc, #108]	; (8005350 <HAL_TIM_Base_Start_IT+0xf8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d020      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0xd0>
 80052e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ea:	d01d      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0xd0>
 80052ec:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d019      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0xd0>
 80052f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d015      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0xd0>
 80052fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005300:	4293      	cmp	r3, r2
 8005302:	d011      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0xd0>
 8005304:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005308:	4293      	cmp	r3, r2
 800530a:	d00d      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0xd0>
 800530c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005310:	4293      	cmp	r3, r2
 8005312:	d009      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0xd0>
 8005314:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005318:	4293      	cmp	r3, r2
 800531a:	d005      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0xd0>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005324:	2000      	movs	r0, #0
 8005326:	e00e      	b.n	8005346 <HAL_TIM_Base_Start_IT+0xee>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005328:	6899      	ldr	r1, [r3, #8]
 800532a:	4a0b      	ldr	r2, [pc, #44]	; (8005358 <HAL_TIM_Base_Start_IT+0x100>)
 800532c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532e:	2a06      	cmp	r2, #6
 8005330:	d00a      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0xf0>
 8005332:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005336:	d009      	beq.n	800534c <HAL_TIM_Base_Start_IT+0xf4>
      __HAL_TIM_ENABLE(htim);
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005340:	2000      	movs	r0, #0
 8005342:	e000      	b.n	8005346 <HAL_TIM_Base_Start_IT+0xee>
    return HAL_ERROR;
 8005344:	2001      	movs	r0, #1
}
 8005346:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005348:	2000      	movs	r0, #0
 800534a:	e7fc      	b.n	8005346 <HAL_TIM_Base_Start_IT+0xee>
 800534c:	2000      	movs	r0, #0
 800534e:	e7fa      	b.n	8005346 <HAL_TIM_Base_Start_IT+0xee>
 8005350:	40012c00 	.word	0x40012c00
 8005354:	08012f64 	.word	0x08012f64
 8005358:	00010007 	.word	0x00010007

0800535c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800535c:	4770      	bx	lr

0800535e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800535e:	4770      	bx	lr

08005360 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005360:	4770      	bx	lr

08005362 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005362:	4770      	bx	lr

08005364 <HAL_TIM_IRQHandler>:
{
 8005364:	b510      	push	{r4, lr}
 8005366:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005368:	6803      	ldr	r3, [r0, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	f012 0f02 	tst.w	r2, #2
 8005370:	d012      	beq.n	8005398 <HAL_TIM_IRQHandler+0x34>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	f012 0f02 	tst.w	r2, #2
 8005378:	d00e      	beq.n	8005398 <HAL_TIM_IRQHandler+0x34>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800537a:	f06f 0202 	mvn.w	r2, #2
 800537e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005380:	2301      	movs	r3, #1
 8005382:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005384:	6803      	ldr	r3, [r0, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f013 0f03 	tst.w	r3, #3
 800538c:	f000 809f 	beq.w	80054ce <HAL_TIM_IRQHandler+0x16a>
          HAL_TIM_IC_CaptureCallback(htim);
 8005390:	f7ff ffe5 	bl	800535e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005394:	2300      	movs	r3, #0
 8005396:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	f012 0f04 	tst.w	r2, #4
 80053a0:	d013      	beq.n	80053ca <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	f012 0f04 	tst.w	r2, #4
 80053a8:	d00f      	beq.n	80053ca <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053aa:	f06f 0204 	mvn.w	r2, #4
 80053ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053b0:	2302      	movs	r3, #2
 80053b2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80053bc:	f000 808d 	beq.w	80054da <HAL_TIM_IRQHandler+0x176>
        HAL_TIM_IC_CaptureCallback(htim);
 80053c0:	4620      	mov	r0, r4
 80053c2:	f7ff ffcc 	bl	800535e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c6:	2300      	movs	r3, #0
 80053c8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	691a      	ldr	r2, [r3, #16]
 80053ce:	f012 0f08 	tst.w	r2, #8
 80053d2:	d012      	beq.n	80053fa <HAL_TIM_IRQHandler+0x96>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	f012 0f08 	tst.w	r2, #8
 80053da:	d00e      	beq.n	80053fa <HAL_TIM_IRQHandler+0x96>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053dc:	f06f 0208 	mvn.w	r2, #8
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e2:	2304      	movs	r3, #4
 80053e4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f013 0f03 	tst.w	r3, #3
 80053ee:	d07b      	beq.n	80054e8 <HAL_TIM_IRQHandler+0x184>
        HAL_TIM_IC_CaptureCallback(htim);
 80053f0:	4620      	mov	r0, r4
 80053f2:	f7ff ffb4 	bl	800535e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f6:	2300      	movs	r3, #0
 80053f8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	f012 0f10 	tst.w	r2, #16
 8005402:	d012      	beq.n	800542a <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	f012 0f10 	tst.w	r2, #16
 800540a:	d00e      	beq.n	800542a <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800540c:	f06f 0210 	mvn.w	r2, #16
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005412:	2308      	movs	r3, #8
 8005414:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800541e:	d06a      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x192>
        HAL_TIM_IC_CaptureCallback(htim);
 8005420:	4620      	mov	r0, r4
 8005422:	f7ff ff9c 	bl	800535e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005426:	2300      	movs	r3, #0
 8005428:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	f012 0f01 	tst.w	r2, #1
 8005432:	d003      	beq.n	800543c <HAL_TIM_IRQHandler+0xd8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	f012 0f01 	tst.w	r2, #1
 800543a:	d163      	bne.n	8005504 <HAL_TIM_IRQHandler+0x1a0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005444:	d003      	beq.n	800544e <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	f012 0f80 	tst.w	r2, #128	; 0x80
 800544c:	d161      	bne.n	8005512 <HAL_TIM_IRQHandler+0x1ae>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	691a      	ldr	r2, [r3, #16]
 8005452:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005456:	d003      	beq.n	8005460 <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800545e:	d15f      	bne.n	8005520 <HAL_TIM_IRQHandler+0x1bc>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005468:	d003      	beq.n	8005472 <HAL_TIM_IRQHandler+0x10e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005470:	d15d      	bne.n	800552e <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	691a      	ldr	r2, [r3, #16]
 8005476:	f012 0f20 	tst.w	r2, #32
 800547a:	d003      	beq.n	8005484 <HAL_TIM_IRQHandler+0x120>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	f012 0f20 	tst.w	r2, #32
 8005482:	d15b      	bne.n	800553c <HAL_TIM_IRQHandler+0x1d8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800548c:	d003      	beq.n	8005496 <HAL_TIM_IRQHandler+0x132>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8005494:	d159      	bne.n	800554a <HAL_TIM_IRQHandler+0x1e6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800549e:	d003      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x144>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80054a6:	d157      	bne.n	8005558 <HAL_TIM_IRQHandler+0x1f4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80054b0:	d003      	beq.n	80054ba <HAL_TIM_IRQHandler+0x156>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80054b8:	d155      	bne.n	8005566 <HAL_TIM_IRQHandler+0x202>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 80054c2:	d003      	beq.n	80054cc <HAL_TIM_IRQHandler+0x168>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 80054ca:	d153      	bne.n	8005574 <HAL_TIM_IRQHandler+0x210>
}
 80054cc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	f7ff ff45 	bl	800535c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d2:	4620      	mov	r0, r4
 80054d4:	f7ff ff44 	bl	8005360 <HAL_TIM_PWM_PulseFinishedCallback>
 80054d8:	e75c      	b.n	8005394 <HAL_TIM_IRQHandler+0x30>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054da:	4620      	mov	r0, r4
 80054dc:	f7ff ff3e 	bl	800535c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e0:	4620      	mov	r0, r4
 80054e2:	f7ff ff3d 	bl	8005360 <HAL_TIM_PWM_PulseFinishedCallback>
 80054e6:	e76e      	b.n	80053c6 <HAL_TIM_IRQHandler+0x62>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e8:	4620      	mov	r0, r4
 80054ea:	f7ff ff37 	bl	800535c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ee:	4620      	mov	r0, r4
 80054f0:	f7ff ff36 	bl	8005360 <HAL_TIM_PWM_PulseFinishedCallback>
 80054f4:	e77f      	b.n	80053f6 <HAL_TIM_IRQHandler+0x92>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f6:	4620      	mov	r0, r4
 80054f8:	f7ff ff30 	bl	800535c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fc:	4620      	mov	r0, r4
 80054fe:	f7ff ff2f 	bl	8005360 <HAL_TIM_PWM_PulseFinishedCallback>
 8005502:	e790      	b.n	8005426 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005504:	f06f 0201 	mvn.w	r2, #1
 8005508:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800550a:	4620      	mov	r0, r4
 800550c:	f7fb fb4e 	bl	8000bac <HAL_TIM_PeriodElapsedCallback>
 8005510:	e794      	b.n	800543c <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005512:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005516:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005518:	4620      	mov	r0, r4
 800551a:	f000 f938 	bl	800578e <HAL_TIMEx_BreakCallback>
 800551e:	e796      	b.n	800544e <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005520:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005524:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005526:	4620      	mov	r0, r4
 8005528:	f000 f932 	bl	8005790 <HAL_TIMEx_Break2Callback>
 800552c:	e798      	b.n	8005460 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800552e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005532:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005534:	4620      	mov	r0, r4
 8005536:	f7ff ff14 	bl	8005362 <HAL_TIM_TriggerCallback>
 800553a:	e79a      	b.n	8005472 <HAL_TIM_IRQHandler+0x10e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800553c:	f06f 0220 	mvn.w	r2, #32
 8005540:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005542:	4620      	mov	r0, r4
 8005544:	f000 f922 	bl	800578c <HAL_TIMEx_CommutCallback>
 8005548:	e79c      	b.n	8005484 <HAL_TIM_IRQHandler+0x120>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800554a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800554e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005550:	4620      	mov	r0, r4
 8005552:	f000 f91e 	bl	8005792 <HAL_TIMEx_EncoderIndexCallback>
 8005556:	e79e      	b.n	8005496 <HAL_TIM_IRQHandler+0x132>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005558:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800555c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 800555e:	4620      	mov	r0, r4
 8005560:	f000 f918 	bl	8005794 <HAL_TIMEx_DirectionChangeCallback>
 8005564:	e7a0      	b.n	80054a8 <HAL_TIM_IRQHandler+0x144>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005566:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800556a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 800556c:	4620      	mov	r0, r4
 800556e:	f000 f912 	bl	8005796 <HAL_TIMEx_IndexErrorCallback>
 8005572:	e7a2      	b.n	80054ba <HAL_TIM_IRQHandler+0x156>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005574:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005578:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 800557a:	4620      	mov	r0, r4
 800557c:	f000 f90c 	bl	8005798 <HAL_TIMEx_TransitionErrorCallback>
}
 8005580:	e7a4      	b.n	80054cc <HAL_TIM_IRQHandler+0x168>
	...

08005584 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005584:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005586:	4a36      	ldr	r2, [pc, #216]	; (8005660 <TIM_Base_SetConfig+0xdc>)
 8005588:	4290      	cmp	r0, r2
 800558a:	d016      	beq.n	80055ba <TIM_Base_SetConfig+0x36>
 800558c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005590:	d013      	beq.n	80055ba <TIM_Base_SetConfig+0x36>
 8005592:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005596:	4290      	cmp	r0, r2
 8005598:	d00f      	beq.n	80055ba <TIM_Base_SetConfig+0x36>
 800559a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800559e:	4290      	cmp	r0, r2
 80055a0:	d00b      	beq.n	80055ba <TIM_Base_SetConfig+0x36>
 80055a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055a6:	4290      	cmp	r0, r2
 80055a8:	d007      	beq.n	80055ba <TIM_Base_SetConfig+0x36>
 80055aa:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80055ae:	4290      	cmp	r0, r2
 80055b0:	d003      	beq.n	80055ba <TIM_Base_SetConfig+0x36>
 80055b2:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80055b6:	4290      	cmp	r0, r2
 80055b8:	d103      	bne.n	80055c2 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80055be:	684a      	ldr	r2, [r1, #4]
 80055c0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055c2:	4a27      	ldr	r2, [pc, #156]	; (8005660 <TIM_Base_SetConfig+0xdc>)
 80055c4:	4290      	cmp	r0, r2
 80055c6:	d022      	beq.n	800560e <TIM_Base_SetConfig+0x8a>
 80055c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80055cc:	d01f      	beq.n	800560e <TIM_Base_SetConfig+0x8a>
 80055ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80055d2:	4290      	cmp	r0, r2
 80055d4:	d01b      	beq.n	800560e <TIM_Base_SetConfig+0x8a>
 80055d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055da:	4290      	cmp	r0, r2
 80055dc:	d017      	beq.n	800560e <TIM_Base_SetConfig+0x8a>
 80055de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055e2:	4290      	cmp	r0, r2
 80055e4:	d013      	beq.n	800560e <TIM_Base_SetConfig+0x8a>
 80055e6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80055ea:	4290      	cmp	r0, r2
 80055ec:	d00f      	beq.n	800560e <TIM_Base_SetConfig+0x8a>
 80055ee:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80055f2:	4290      	cmp	r0, r2
 80055f4:	d00b      	beq.n	800560e <TIM_Base_SetConfig+0x8a>
 80055f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055fa:	4290      	cmp	r0, r2
 80055fc:	d007      	beq.n	800560e <TIM_Base_SetConfig+0x8a>
 80055fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005602:	4290      	cmp	r0, r2
 8005604:	d003      	beq.n	800560e <TIM_Base_SetConfig+0x8a>
 8005606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800560a:	4290      	cmp	r0, r2
 800560c:	d103      	bne.n	8005616 <TIM_Base_SetConfig+0x92>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800560e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005612:	68ca      	ldr	r2, [r1, #12]
 8005614:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800561a:	694a      	ldr	r2, [r1, #20]
 800561c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800561e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005620:	688b      	ldr	r3, [r1, #8]
 8005622:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005624:	680b      	ldr	r3, [r1, #0]
 8005626:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005628:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <TIM_Base_SetConfig+0xdc>)
 800562a:	4298      	cmp	r0, r3
 800562c:	d013      	beq.n	8005656 <TIM_Base_SetConfig+0xd2>
 800562e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005632:	4298      	cmp	r0, r3
 8005634:	d00f      	beq.n	8005656 <TIM_Base_SetConfig+0xd2>
 8005636:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800563a:	4298      	cmp	r0, r3
 800563c:	d00b      	beq.n	8005656 <TIM_Base_SetConfig+0xd2>
 800563e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005642:	4298      	cmp	r0, r3
 8005644:	d007      	beq.n	8005656 <TIM_Base_SetConfig+0xd2>
 8005646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800564a:	4298      	cmp	r0, r3
 800564c:	d003      	beq.n	8005656 <TIM_Base_SetConfig+0xd2>
 800564e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005652:	4298      	cmp	r0, r3
 8005654:	d101      	bne.n	800565a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005656:	690b      	ldr	r3, [r1, #16]
 8005658:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800565a:	2301      	movs	r3, #1
 800565c:	6143      	str	r3, [r0, #20]
}
 800565e:	4770      	bx	lr
 8005660:	40012c00 	.word	0x40012c00

08005664 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005664:	2800      	cmp	r0, #0
 8005666:	f000 808a 	beq.w	800577e <HAL_TIM_Base_Init+0x11a>
{
 800566a:	b510      	push	{r4, lr}
 800566c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800566e:	6803      	ldr	r3, [r0, #0]
 8005670:	4a44      	ldr	r2, [pc, #272]	; (8005784 <HAL_TIM_Base_Init+0x120>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d02f      	beq.n	80056d6 <HAL_TIM_Base_Init+0x72>
 8005676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567a:	d02c      	beq.n	80056d6 <HAL_TIM_Base_Init+0x72>
 800567c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005680:	4293      	cmp	r3, r2
 8005682:	d028      	beq.n	80056d6 <HAL_TIM_Base_Init+0x72>
 8005684:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005688:	4293      	cmp	r3, r2
 800568a:	d024      	beq.n	80056d6 <HAL_TIM_Base_Init+0x72>
 800568c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005690:	4293      	cmp	r3, r2
 8005692:	d020      	beq.n	80056d6 <HAL_TIM_Base_Init+0x72>
 8005694:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005698:	4293      	cmp	r3, r2
 800569a:	d01c      	beq.n	80056d6 <HAL_TIM_Base_Init+0x72>
 800569c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d018      	beq.n	80056d6 <HAL_TIM_Base_Init+0x72>
 80056a4:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d014      	beq.n	80056d6 <HAL_TIM_Base_Init+0x72>
 80056ac:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d010      	beq.n	80056d6 <HAL_TIM_Base_Init+0x72>
 80056b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00c      	beq.n	80056d6 <HAL_TIM_Base_Init+0x72>
 80056bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d008      	beq.n	80056d6 <HAL_TIM_Base_Init+0x72>
 80056c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d004      	beq.n	80056d6 <HAL_TIM_Base_Init+0x72>
 80056cc:	f44f 7191 	mov.w	r1, #290	; 0x122
 80056d0:	482d      	ldr	r0, [pc, #180]	; (8005788 <HAL_TIM_Base_Init+0x124>)
 80056d2:	f7fb faca 	bl	8000c6a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80056d6:	68a3      	ldr	r3, [r4, #8]
 80056d8:	b13b      	cbz	r3, 80056ea <HAL_TIM_Base_Init+0x86>
 80056da:	2b10      	cmp	r3, #16
 80056dc:	d005      	beq.n	80056ea <HAL_TIM_Base_Init+0x86>
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_Base_Init+0x86>
 80056e2:	2b40      	cmp	r3, #64	; 0x40
 80056e4:	d001      	beq.n	80056ea <HAL_TIM_Base_Init+0x86>
 80056e6:	2b60      	cmp	r3, #96	; 0x60
 80056e8:	d131      	bne.n	800574e <HAL_TIM_Base_Init+0xea>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80056ea:	6923      	ldr	r3, [r4, #16]
 80056ec:	b12b      	cbz	r3, 80056fa <HAL_TIM_Base_Init+0x96>
 80056ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f2:	d002      	beq.n	80056fa <HAL_TIM_Base_Init+0x96>
 80056f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f8:	d12f      	bne.n	800575a <HAL_TIM_Base_Init+0xf6>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80056fa:	69a3      	ldr	r3, [r4, #24]
 80056fc:	b10b      	cbz	r3, 8005702 <HAL_TIM_Base_Init+0x9e>
 80056fe:	2b80      	cmp	r3, #128	; 0x80
 8005700:	d131      	bne.n	8005766 <HAL_TIM_Base_Init+0x102>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005702:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005706:	b3a3      	cbz	r3, 8005772 <HAL_TIM_Base_Init+0x10e>
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	2302      	movs	r3, #2
 800570a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800570e:	4621      	mov	r1, r4
 8005710:	f851 0b04 	ldr.w	r0, [r1], #4
 8005714:	f7ff ff36 	bl	8005584 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005718:	2301      	movs	r3, #1
 800571a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005722:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005726:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800572a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800572e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005736:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800573a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800573e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005742:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005746:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800574a:	2000      	movs	r0, #0
}
 800574c:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800574e:	f240 1123 	movw	r1, #291	; 0x123
 8005752:	480d      	ldr	r0, [pc, #52]	; (8005788 <HAL_TIM_Base_Init+0x124>)
 8005754:	f7fb fa89 	bl	8000c6a <assert_failed>
 8005758:	e7c7      	b.n	80056ea <HAL_TIM_Base_Init+0x86>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800575a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800575e:	480a      	ldr	r0, [pc, #40]	; (8005788 <HAL_TIM_Base_Init+0x124>)
 8005760:	f7fb fa83 	bl	8000c6a <assert_failed>
 8005764:	e7c9      	b.n	80056fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005766:	f240 1125 	movw	r1, #293	; 0x125
 800576a:	4807      	ldr	r0, [pc, #28]	; (8005788 <HAL_TIM_Base_Init+0x124>)
 800576c:	f7fb fa7d 	bl	8000c6a <assert_failed>
 8005770:	e7c7      	b.n	8005702 <HAL_TIM_Base_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 8005772:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005776:	4620      	mov	r0, r4
 8005778:	f7ff fd6c 	bl	8005254 <HAL_TIM_Base_MspInit>
 800577c:	e7c4      	b.n	8005708 <HAL_TIM_Base_Init+0xa4>
    return HAL_ERROR;
 800577e:	2001      	movs	r0, #1
}
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40012c00 	.word	0x40012c00
 8005788:	08012f64 	.word	0x08012f64

0800578c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800578c:	4770      	bx	lr

0800578e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800578e:	4770      	bx	lr

08005790 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005790:	4770      	bx	lr

08005792 <HAL_TIMEx_EncoderIndexCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005792:	4770      	bx	lr

08005794 <HAL_TIMEx_DirectionChangeCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005794:	4770      	bx	lr

08005796 <HAL_TIMEx_IndexErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005796:	4770      	bx	lr

08005798 <HAL_TIMEx_TransitionErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005798:	4770      	bx	lr

0800579a <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800579a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	e852 3f00 	ldrex	r3, [r2]
 80057a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	e842 3100 	strex	r1, r3, [r2]
 80057a8:	2900      	cmp	r1, #0
 80057aa:	d1f6      	bne.n	800579a <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80057ac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	f102 0308 	add.w	r3, r2, #8
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	3208      	adds	r2, #8
 80057bc:	e842 3100 	strex	r1, r3, [r2]
 80057c0:	2900      	cmp	r1, #0
 80057c2:	d1f3      	bne.n	80057ac <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057c4:	2320      	movs	r3, #32
 80057c6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 80057ca:	4770      	bx	lr

080057cc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057cc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	e852 3f00 	ldrex	r3, [r2]
 80057d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	e842 3100 	strex	r1, r3, [r2]
 80057da:	2900      	cmp	r1, #0
 80057dc:	d1f6      	bne.n	80057cc <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	f102 0308 	add.w	r3, r2, #8
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	3208      	adds	r2, #8
 80057f2:	e842 3100 	strex	r1, r3, [r2]
 80057f6:	2900      	cmp	r1, #0
 80057f8:	d1f1      	bne.n	80057de <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d006      	beq.n	800580e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005800:	2320      	movs	r3, #32
 8005802:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005806:	2300      	movs	r3, #0
 8005808:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800580a:	6703      	str	r3, [r0, #112]	; 0x70
}
 800580c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800580e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	e852 3f00 	ldrex	r3, [r2]
 8005814:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	e842 3100 	strex	r1, r3, [r2]
 800581c:	2900      	cmp	r1, #0
 800581e:	d1f6      	bne.n	800580e <UART_EndRxTransfer+0x42>
 8005820:	e7ee      	b.n	8005800 <UART_EndRxTransfer+0x34>
	...

08005824 <HAL_UART_Transmit_DMA>:
{
 8005824:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005826:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800582a:	2a20      	cmp	r2, #32
 800582c:	d14a      	bne.n	80058c4 <HAL_UART_Transmit_DMA+0xa0>
{
 800582e:	b510      	push	{r4, lr}
 8005830:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005832:	2900      	cmp	r1, #0
 8005834:	d048      	beq.n	80058c8 <HAL_UART_Transmit_DMA+0xa4>
 8005836:	2b00      	cmp	r3, #0
 8005838:	d048      	beq.n	80058cc <HAL_UART_Transmit_DMA+0xa8>
    __HAL_LOCK(huart);
 800583a:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800583e:	2a01      	cmp	r2, #1
 8005840:	d046      	beq.n	80058d0 <HAL_UART_Transmit_DMA+0xac>
 8005842:	2201      	movs	r2, #1
 8005844:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8005848:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800584a:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800584e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005852:	2200      	movs	r2, #0
 8005854:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005858:	2221      	movs	r2, #33	; 0x21
 800585a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 800585e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005860:	b1e2      	cbz	r2, 800589c <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005862:	491c      	ldr	r1, [pc, #112]	; (80058d4 <HAL_UART_Transmit_DMA+0xb0>)
 8005864:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005866:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005868:	491b      	ldr	r1, [pc, #108]	; (80058d8 <HAL_UART_Transmit_DMA+0xb4>)
 800586a:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800586c:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800586e:	491b      	ldr	r1, [pc, #108]	; (80058dc <HAL_UART_Transmit_DMA+0xb8>)
 8005870:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005872:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005874:	2100      	movs	r1, #0
 8005876:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005878:	6802      	ldr	r2, [r0, #0]
 800587a:	3228      	adds	r2, #40	; 0x28
 800587c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800587e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005880:	f7fb fe68 	bl	8001554 <HAL_DMA_Start_IT>
 8005884:	b150      	cbz	r0, 800589c <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005886:	2310      	movs	r3, #16
 8005888:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 800588c:	2300      	movs	r3, #0
 800588e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8005892:	2320      	movs	r3, #32
 8005894:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8005898:	2001      	movs	r0, #1
 800589a:	e012      	b.n	80058c2 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	2240      	movs	r2, #64	; 0x40
 80058a0:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80058a2:	2300      	movs	r3, #0
 80058a4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058a8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	f102 0308 	add.w	r3, r2, #8
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	3208      	adds	r2, #8
 80058b8:	e842 3100 	strex	r1, r3, [r2]
 80058bc:	2900      	cmp	r1, #0
 80058be:	d1f3      	bne.n	80058a8 <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 80058c0:	2000      	movs	r0, #0
}
 80058c2:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80058c4:	2002      	movs	r0, #2
}
 80058c6:	4770      	bx	lr
      return HAL_ERROR;
 80058c8:	2001      	movs	r0, #1
 80058ca:	e7fa      	b.n	80058c2 <HAL_UART_Transmit_DMA+0x9e>
 80058cc:	2001      	movs	r0, #1
 80058ce:	e7f8      	b.n	80058c2 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 80058d0:	2002      	movs	r0, #2
 80058d2:	e7f6      	b.n	80058c2 <HAL_UART_Transmit_DMA+0x9e>
 80058d4:	080058e1 	.word	0x080058e1
 80058d8:	0800594f 	.word	0x0800594f
 80058dc:	0800595b 	.word	0x0800595b

080058e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80058e0:	b508      	push	{r3, lr}
 80058e2:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058e4:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f013 0f20 	tst.w	r3, #32
 80058ee:	d118      	bne.n	8005922 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f8:	f102 0308 	add.w	r3, r2, #8
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005904:	3208      	adds	r2, #8
 8005906:	e842 3100 	strex	r1, r3, [r2]
 800590a:	2900      	cmp	r1, #0
 800590c:	d1f3      	bne.n	80058f6 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800590e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	e852 3f00 	ldrex	r3, [r2]
 8005914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	e842 3100 	strex	r1, r3, [r2]
 800591c:	2900      	cmp	r1, #0
 800591e:	d1f6      	bne.n	800590e <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005920:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005922:	f009 fa73 	bl	800ee0c <HAL_UART_TxCpltCallback>
}
 8005926:	e7fb      	b.n	8005920 <UART_DMATransmitCplt+0x40>

08005928 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005928:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800592a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	e852 3f00 	ldrex	r3, [r2]
 8005930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	e842 3100 	strex	r1, r3, [r2]
 8005938:	2900      	cmp	r1, #0
 800593a:	d1f6      	bne.n	800592a <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800593c:	2320      	movs	r3, #32
 800593e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005942:	2300      	movs	r3, #0
 8005944:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005946:	f009 fa61 	bl	800ee0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800594a:	bd08      	pop	{r3, pc}

0800594c <HAL_UART_TxHalfCpltCallback>:
}
 800594c:	4770      	bx	lr

0800594e <UART_DMATxHalfCplt>:
{
 800594e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005950:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005952:	f7ff fffb 	bl	800594c <HAL_UART_TxHalfCpltCallback>
}
 8005956:	bd08      	pop	{r3, pc}

08005958 <HAL_UART_ErrorCallback>:
}
 8005958:	4770      	bx	lr

0800595a <UART_DMAError>:
{
 800595a:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800595c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800595e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005962:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800596e:	d001      	beq.n	8005974 <UART_DMAError+0x1a>
 8005970:	2a21      	cmp	r2, #33	; 0x21
 8005972:	d010      	beq.n	8005996 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f013 0f40 	tst.w	r3, #64	; 0x40
 800597c:	d001      	beq.n	8005982 <UART_DMAError+0x28>
 800597e:	2d22      	cmp	r5, #34	; 0x22
 8005980:	d010      	beq.n	80059a4 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005982:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005986:	f043 0310 	orr.w	r3, r3, #16
 800598a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 800598e:	4620      	mov	r0, r4
 8005990:	f7ff ffe2 	bl	8005958 <HAL_UART_ErrorCallback>
}
 8005994:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800599c:	4620      	mov	r0, r4
 800599e:	f7ff fefc 	bl	800579a <UART_EndTxTransfer>
 80059a2:	e7e7      	b.n	8005974 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80059aa:	4620      	mov	r0, r4
 80059ac:	f7ff ff0e 	bl	80057cc <UART_EndRxTransfer>
 80059b0:	e7e7      	b.n	8005982 <UART_DMAError+0x28>

080059b2 <UART_DMAAbortOnError>:
{
 80059b2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80059bc:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80059c0:	f7ff ffca 	bl	8005958 <HAL_UART_ErrorCallback>
}
 80059c4:	bd08      	pop	{r3, pc}

080059c6 <HAL_UARTEx_RxEventCallback>:
}
 80059c6:	4770      	bx	lr

080059c8 <HAL_UART_IRQHandler>:
{
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059cc:	6801      	ldr	r1, [r0, #0]
 80059ce:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059d0:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059d2:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059d4:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80059d8:	401a      	ands	r2, r3
 80059da:	d108      	bne.n	80059ee <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059dc:	f013 0f20 	tst.w	r3, #32
 80059e0:	d005      	beq.n	80059ee <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80059e2:	f010 0f20 	tst.w	r0, #32
 80059e6:	d134      	bne.n	8005a52 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80059e8:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80059ec:	d131      	bne.n	8005a52 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 80059ee:	b12a      	cbz	r2, 80059fc <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80059f0:	4a95      	ldr	r2, [pc, #596]	; (8005c48 <HAL_UART_IRQHandler+0x280>)
 80059f2:	402a      	ands	r2, r5
 80059f4:	d133      	bne.n	8005a5e <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80059f6:	4e95      	ldr	r6, [pc, #596]	; (8005c4c <HAL_UART_IRQHandler+0x284>)
 80059f8:	4230      	tst	r0, r6
 80059fa:	d130      	bne.n	8005a5e <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059fc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80059fe:	2a01      	cmp	r2, #1
 8005a00:	f000 80c3 	beq.w	8005b8a <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005a08:	d003      	beq.n	8005a12 <HAL_UART_IRQHandler+0x4a>
 8005a0a:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8005a0e:	f040 815b 	bne.w	8005cc8 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a16:	d007      	beq.n	8005a28 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a18:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005a1c:	f040 815b 	bne.w	8005cd6 <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a20:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8005a24:	f040 8157 	bne.w	8005cd6 <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a2c:	d003      	beq.n	8005a36 <HAL_UART_IRQHandler+0x6e>
 8005a2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a32:	f040 8157 	bne.w	8005ce4 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a36:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005a3a:	d003      	beq.n	8005a44 <HAL_UART_IRQHandler+0x7c>
 8005a3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005a40:	f040 8154 	bne.w	8005cec <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a44:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005a48:	d002      	beq.n	8005a50 <HAL_UART_IRQHandler+0x88>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	f2c0 8152 	blt.w	8005cf4 <HAL_UART_IRQHandler+0x32c>
}
 8005a50:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005a52:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0fb      	beq.n	8005a50 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005a58:	4620      	mov	r0, r4
 8005a5a:	4798      	blx	r3
      return;
 8005a5c:	e7f8      	b.n	8005a50 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a5e:	f013 0f01 	tst.w	r3, #1
 8005a62:	d009      	beq.n	8005a78 <HAL_UART_IRQHandler+0xb0>
 8005a64:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005a68:	d006      	beq.n	8005a78 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a6a:	2601      	movs	r6, #1
 8005a6c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a6e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005a72:	4331      	orrs	r1, r6
 8005a74:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a78:	f013 0f02 	tst.w	r3, #2
 8005a7c:	d00b      	beq.n	8005a96 <HAL_UART_IRQHandler+0xce>
 8005a7e:	f015 0f01 	tst.w	r5, #1
 8005a82:	d008      	beq.n	8005a96 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a84:	6821      	ldr	r1, [r4, #0]
 8005a86:	2602      	movs	r6, #2
 8005a88:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a8a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005a8e:	f041 0104 	orr.w	r1, r1, #4
 8005a92:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a96:	f013 0f04 	tst.w	r3, #4
 8005a9a:	d00b      	beq.n	8005ab4 <HAL_UART_IRQHandler+0xec>
 8005a9c:	f015 0f01 	tst.w	r5, #1
 8005aa0:	d008      	beq.n	8005ab4 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005aa2:	6821      	ldr	r1, [r4, #0]
 8005aa4:	2604      	movs	r6, #4
 8005aa6:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aa8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005aac:	f041 0102 	orr.w	r1, r1, #2
 8005ab0:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ab4:	f013 0f08 	tst.w	r3, #8
 8005ab8:	d00b      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005aba:	f010 0f20 	tst.w	r0, #32
 8005abe:	d100      	bne.n	8005ac2 <HAL_UART_IRQHandler+0xfa>
 8005ac0:	b13a      	cbz	r2, 8005ad2 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	2108      	movs	r1, #8
 8005ac6:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ac8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005acc:	430a      	orrs	r2, r1
 8005ace:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ad2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005ad6:	d00c      	beq.n	8005af2 <HAL_UART_IRQHandler+0x12a>
 8005ad8:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005adc:	d009      	beq.n	8005af2 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ade:	6822      	ldr	r2, [r4, #0]
 8005ae0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ae4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ae6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005aea:	f042 0220 	orr.w	r2, r2, #32
 8005aee:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005af2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005af6:	2a00      	cmp	r2, #0
 8005af8:	d0aa      	beq.n	8005a50 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005afa:	f013 0f20 	tst.w	r3, #32
 8005afe:	d009      	beq.n	8005b14 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b00:	f010 0f20 	tst.w	r0, #32
 8005b04:	d102      	bne.n	8005b0c <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b06:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005b0a:	d003      	beq.n	8005b14 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8005b0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005b0e:	b10b      	cbz	r3, 8005b14 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8005b10:	4620      	mov	r0, r4
 8005b12:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005b14:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b20:	d102      	bne.n	8005b28 <HAL_UART_IRQHandler+0x160>
 8005b22:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005b26:	d029      	beq.n	8005b7c <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f7ff fe4f 	bl	80057cc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b36:	d01d      	beq.n	8005b74 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b38:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	f102 0308 	add.w	r3, r2, #8
 8005b3e:	e853 3f00 	ldrex	r3, [r3]
 8005b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	3208      	adds	r2, #8
 8005b48:	e842 3100 	strex	r1, r3, [r2]
 8005b4c:	2900      	cmp	r1, #0
 8005b4e:	d1f3      	bne.n	8005b38 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005b50:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005b52:	b15b      	cbz	r3, 8005b6c <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b54:	4a3e      	ldr	r2, [pc, #248]	; (8005c50 <HAL_UART_IRQHandler+0x288>)
 8005b56:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b58:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005b5a:	f7fb fd8f 	bl	800167c <HAL_DMA_Abort_IT>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	f43f af76 	beq.w	8005a50 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b64:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005b66:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005b68:	4798      	blx	r3
 8005b6a:	e771      	b.n	8005a50 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f7ff fef3 	bl	8005958 <HAL_UART_ErrorCallback>
 8005b72:	e76d      	b.n	8005a50 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005b74:	4620      	mov	r0, r4
 8005b76:	f7ff feef 	bl	8005958 <HAL_UART_ErrorCallback>
 8005b7a:	e769      	b.n	8005a50 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f7ff feeb 	bl	8005958 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8005b88:	e762      	b.n	8005a50 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b8a:	f013 0f10 	tst.w	r3, #16
 8005b8e:	f43f af39 	beq.w	8005a04 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b92:	f010 0f10 	tst.w	r0, #16
 8005b96:	f43f af35 	beq.w	8005a04 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b9a:	2310      	movs	r3, #16
 8005b9c:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ba6:	d055      	beq.n	8005c54 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ba8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005baa:	6813      	ldr	r3, [r2, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f43f af4d 	beq.w	8005a50 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bb6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005bba:	4299      	cmp	r1, r3
 8005bbc:	f67f af48 	bls.w	8005a50 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005bc0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bc4:	6813      	ldr	r3, [r2, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f013 0f20 	tst.w	r3, #32
 8005bcc:	d131      	bne.n	8005c32 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	e852 3f00 	ldrex	r3, [r2]
 8005bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	e842 3100 	strex	r1, r3, [r2]
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	d1f6      	bne.n	8005bce <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	f102 0308 	add.w	r3, r2, #8
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	3208      	adds	r2, #8
 8005bf0:	e842 3100 	strex	r1, r3, [r2]
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	d1f3      	bne.n	8005be0 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	f102 0308 	add.w	r3, r2, #8
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	3208      	adds	r2, #8
 8005c08:	e842 3100 	strex	r1, r3, [r2]
 8005c0c:	2900      	cmp	r1, #0
 8005c0e:	d1f3      	bne.n	8005bf8 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8005c10:	2320      	movs	r3, #32
 8005c12:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c16:	2300      	movs	r3, #0
 8005c18:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1c:	e852 3f00 	ldrex	r3, [r2]
 8005c20:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	e842 3100 	strex	r1, r3, [r2]
 8005c28:	2900      	cmp	r1, #0
 8005c2a:	d1f6      	bne.n	8005c1a <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c2c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005c2e:	f7fb fcef 	bl	8001610 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c32:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005c36:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	1ac9      	subs	r1, r1, r3
 8005c3e:	b289      	uxth	r1, r1
 8005c40:	4620      	mov	r0, r4
 8005c42:	f7ff fec0 	bl	80059c6 <HAL_UARTEx_RxEventCallback>
      return;
 8005c46:	e703      	b.n	8005a50 <HAL_UART_IRQHandler+0x88>
 8005c48:	10000001 	.word	0x10000001
 8005c4c:	04000120 	.word	0x04000120
 8005c50:	080059b3 	.word	0x080059b3
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c54:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005c58:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	1ac9      	subs	r1, r1, r3
 8005c60:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005c62:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f43f aef1 	beq.w	8005a50 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 8005c6e:	2900      	cmp	r1, #0
 8005c70:	f43f aeee 	beq.w	8005a50 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c74:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	e852 3f00 	ldrex	r3, [r2]
 8005c7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	e842 3000 	strex	r0, r3, [r2]
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d1f6      	bne.n	8005c74 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c86:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	f102 0308 	add.w	r3, r2, #8
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c94:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	3208      	adds	r2, #8
 8005c9a:	e842 3000 	strex	r0, r3, [r2]
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d1f1      	bne.n	8005c86 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8005ca2:	2320      	movs	r3, #32
 8005ca4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005cac:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	e852 3f00 	ldrex	r3, [r2]
 8005cb4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	e842 3000 	strex	r0, r3, [r2]
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d1f6      	bne.n	8005cae <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f7ff fe80 	bl	80059c6 <HAL_UARTEx_RxEventCallback>
      return;
 8005cc6:	e6c3      	b.n	8005a50 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005cc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ccc:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f000 fca4 	bl	800661c <HAL_UARTEx_WakeupCallback>
    return;
 8005cd4:	e6bc      	b.n	8005a50 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8005cd6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f43f aeb9 	beq.w	8005a50 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8005cde:	4620      	mov	r0, r4
 8005ce0:	4798      	blx	r3
    return;
 8005ce2:	e6b5      	b.n	8005a50 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f7ff fe1f 	bl	8005928 <UART_EndTransmit_IT>
    return;
 8005cea:	e6b1      	b.n	8005a50 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005cec:	4620      	mov	r0, r4
 8005cee:	f000 fc97 	bl	8006620 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005cf2:	e6ad      	b.n	8005a50 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f000 fc92 	bl	800661e <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005cfa:	e6a9      	b.n	8005a50 <HAL_UART_IRQHandler+0x88>

08005cfc <UART_SetConfig>:
{
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005d00:	6842      	ldr	r2, [r0, #4]
 8005d02:	4b96      	ldr	r3, [pc, #600]	; (8005f5c <UART_SetConfig+0x260>)
 8005d04:	429a      	cmp	r2, r3
 8005d06:	f200 8087 	bhi.w	8005e18 <UART_SetConfig+0x11c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005d0a:	68a3      	ldr	r3, [r4, #8]
 8005d0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d10:	d004      	beq.n	8005d1c <UART_SetConfig+0x20>
 8005d12:	b11b      	cbz	r3, 8005d1c <UART_SetConfig+0x20>
 8005d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d18:	f040 8084 	bne.w	8005e24 <UART_SetConfig+0x128>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d1c:	6822      	ldr	r2, [r4, #0]
 8005d1e:	4b90      	ldr	r3, [pc, #576]	; (8005f60 <UART_SetConfig+0x264>)
 8005d20:	429a      	cmp	r2, r3
 8005d22:	f000 8085 	beq.w	8005e30 <UART_SetConfig+0x134>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005d26:	68e3      	ldr	r3, [r4, #12]
 8005d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2c:	d007      	beq.n	8005d3e <UART_SetConfig+0x42>
 8005d2e:	b133      	cbz	r3, 8005d3e <UART_SetConfig+0x42>
 8005d30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d34:	d003      	beq.n	8005d3e <UART_SetConfig+0x42>
 8005d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d3a:	f040 8085 	bne.w	8005e48 <UART_SetConfig+0x14c>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005d3e:	6a23      	ldr	r3, [r4, #32]
 8005d40:	b11b      	cbz	r3, 8005d4a <UART_SetConfig+0x4e>
 8005d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d46:	f040 8085 	bne.w	8005e54 <UART_SetConfig+0x158>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	b133      	cbz	r3, 8005d5c <UART_SetConfig+0x60>
 8005d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d52:	d003      	beq.n	8005d5c <UART_SetConfig+0x60>
 8005d54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d58:	f040 8082 	bne.w	8005e60 <UART_SetConfig+0x164>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005d5c:	6963      	ldr	r3, [r4, #20]
 8005d5e:	f033 020c 	bics.w	r2, r3, #12
 8005d62:	d100      	bne.n	8005d66 <UART_SetConfig+0x6a>
 8005d64:	b923      	cbnz	r3, 8005d70 <UART_SetConfig+0x74>
 8005d66:	f640 31e7 	movw	r1, #3047	; 0xbe7
 8005d6a:	487e      	ldr	r0, [pc, #504]	; (8005f64 <UART_SetConfig+0x268>)
 8005d6c:	f7fa ff7d 	bl	8000c6a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005d70:	69a3      	ldr	r3, [r4, #24]
 8005d72:	b143      	cbz	r3, 8005d86 <UART_SetConfig+0x8a>
 8005d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d78:	d005      	beq.n	8005d86 <UART_SetConfig+0x8a>
 8005d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d7e:	d002      	beq.n	8005d86 <UART_SetConfig+0x8a>
 8005d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d84:	d172      	bne.n	8005e6c <UART_SetConfig+0x170>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005d86:	69e3      	ldr	r3, [r4, #28]
 8005d88:	b113      	cbz	r3, 8005d90 <UART_SetConfig+0x94>
 8005d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d8e:	d173      	bne.n	8005e78 <UART_SetConfig+0x17c>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8005d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d92:	2b0b      	cmp	r3, #11
 8005d94:	d876      	bhi.n	8005e84 <UART_SetConfig+0x188>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d96:	68a3      	ldr	r3, [r4, #8]
 8005d98:	6922      	ldr	r2, [r4, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	6962      	ldr	r2, [r4, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	69e2      	ldr	r2, [r4, #28]
 8005da2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005da4:	6821      	ldr	r1, [r4, #0]
 8005da6:	6808      	ldr	r0, [r1, #0]
 8005da8:	4a6f      	ldr	r2, [pc, #444]	; (8005f68 <UART_SetConfig+0x26c>)
 8005daa:	4002      	ands	r2, r0
 8005dac:	431a      	orrs	r2, r3
 8005dae:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db0:	6822      	ldr	r2, [r4, #0]
 8005db2:	6853      	ldr	r3, [r2, #4]
 8005db4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005db8:	68e1      	ldr	r1, [r4, #12]
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dbe:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dc0:	6822      	ldr	r2, [r4, #0]
 8005dc2:	4b67      	ldr	r3, [pc, #412]	; (8005f60 <UART_SetConfig+0x264>)
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d001      	beq.n	8005dcc <UART_SetConfig+0xd0>
    tmpreg |= huart->Init.OneBitSampling;
 8005dc8:	6a23      	ldr	r3, [r4, #32]
 8005dca:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dcc:	6893      	ldr	r3, [r2, #8]
 8005dce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005dd2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005dda:	6822      	ldr	r2, [r4, #0]
 8005ddc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005dde:	f023 030f 	bic.w	r3, r3, #15
 8005de2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005de4:	430b      	orrs	r3, r1
 8005de6:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	4a60      	ldr	r2, [pc, #384]	; (8005f6c <UART_SetConfig+0x270>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d04f      	beq.n	8005e90 <UART_SetConfig+0x194>
 8005df0:	4a5f      	ldr	r2, [pc, #380]	; (8005f70 <UART_SetConfig+0x274>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d060      	beq.n	8005eb8 <UART_SetConfig+0x1bc>
 8005df6:	4a5f      	ldr	r2, [pc, #380]	; (8005f74 <UART_SetConfig+0x278>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d076      	beq.n	8005eea <UART_SetConfig+0x1ee>
 8005dfc:	4a5e      	ldr	r2, [pc, #376]	; (8005f78 <UART_SetConfig+0x27c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	f000 809c 	beq.w	8005f3c <UART_SetConfig+0x240>
 8005e04:	4a5d      	ldr	r2, [pc, #372]	; (8005f7c <UART_SetConfig+0x280>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	f000 80be 	beq.w	8005f88 <UART_SetConfig+0x28c>
 8005e0c:	4a54      	ldr	r2, [pc, #336]	; (8005f60 <UART_SetConfig+0x264>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	f000 80cf 	beq.w	8005fb2 <UART_SetConfig+0x2b6>
 8005e14:	2210      	movs	r2, #16
 8005e16:	e076      	b.n	8005f06 <UART_SetConfig+0x20a>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005e18:	f640 31da 	movw	r1, #3034	; 0xbda
 8005e1c:	4851      	ldr	r0, [pc, #324]	; (8005f64 <UART_SetConfig+0x268>)
 8005e1e:	f7fa ff24 	bl	8000c6a <assert_failed>
 8005e22:	e772      	b.n	8005d0a <UART_SetConfig+0xe>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005e24:	f640 31db 	movw	r1, #3035	; 0xbdb
 8005e28:	484e      	ldr	r0, [pc, #312]	; (8005f64 <UART_SetConfig+0x268>)
 8005e2a:	f7fa ff1e 	bl	8000c6a <assert_failed>
 8005e2e:	e775      	b.n	8005d1c <UART_SetConfig+0x20>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8005e30:	68e3      	ldr	r3, [r4, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d089      	beq.n	8005d4a <UART_SetConfig+0x4e>
 8005e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e3a:	d086      	beq.n	8005d4a <UART_SetConfig+0x4e>
 8005e3c:	f640 31de 	movw	r1, #3038	; 0xbde
 8005e40:	4848      	ldr	r0, [pc, #288]	; (8005f64 <UART_SetConfig+0x268>)
 8005e42:	f7fa ff12 	bl	8000c6a <assert_failed>
 8005e46:	e780      	b.n	8005d4a <UART_SetConfig+0x4e>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005e48:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8005e4c:	4845      	ldr	r0, [pc, #276]	; (8005f64 <UART_SetConfig+0x268>)
 8005e4e:	f7fa ff0c 	bl	8000c6a <assert_failed>
 8005e52:	e774      	b.n	8005d3e <UART_SetConfig+0x42>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005e54:	f640 31e3 	movw	r1, #3043	; 0xbe3
 8005e58:	4842      	ldr	r0, [pc, #264]	; (8005f64 <UART_SetConfig+0x268>)
 8005e5a:	f7fa ff06 	bl	8000c6a <assert_failed>
 8005e5e:	e774      	b.n	8005d4a <UART_SetConfig+0x4e>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005e60:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8005e64:	483f      	ldr	r0, [pc, #252]	; (8005f64 <UART_SetConfig+0x268>)
 8005e66:	f7fa ff00 	bl	8000c6a <assert_failed>
 8005e6a:	e777      	b.n	8005d5c <UART_SetConfig+0x60>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005e6c:	f640 31e8 	movw	r1, #3048	; 0xbe8
 8005e70:	483c      	ldr	r0, [pc, #240]	; (8005f64 <UART_SetConfig+0x268>)
 8005e72:	f7fa fefa 	bl	8000c6a <assert_failed>
 8005e76:	e786      	b.n	8005d86 <UART_SetConfig+0x8a>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005e78:	f640 31e9 	movw	r1, #3049	; 0xbe9
 8005e7c:	4839      	ldr	r0, [pc, #228]	; (8005f64 <UART_SetConfig+0x268>)
 8005e7e:	f7fa fef4 	bl	8000c6a <assert_failed>
 8005e82:	e785      	b.n	8005d90 <UART_SetConfig+0x94>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8005e84:	f640 31ea 	movw	r1, #3050	; 0xbea
 8005e88:	4836      	ldr	r0, [pc, #216]	; (8005f64 <UART_SetConfig+0x268>)
 8005e8a:	f7fa feee 	bl	8000c6a <assert_failed>
 8005e8e:	e782      	b.n	8005d96 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e90:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8005e94:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005e98:	f002 0203 	and.w	r2, r2, #3
 8005e9c:	2a03      	cmp	r2, #3
 8005e9e:	d809      	bhi.n	8005eb4 <UART_SetConfig+0x1b8>
 8005ea0:	e8df f002 	tbb	[pc, r2]
 8005ea4:	069c0402 	.word	0x069c0402
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	e02c      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005eac:	2204      	movs	r2, #4
 8005eae:	e02a      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005eb0:	2208      	movs	r2, #8
 8005eb2:	e028      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005eb4:	2210      	movs	r2, #16
 8005eb6:	e026      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005eb8:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8005ebc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005ec0:	f002 020c 	and.w	r2, r2, #12
 8005ec4:	2a0c      	cmp	r2, #12
 8005ec6:	d80e      	bhi.n	8005ee6 <UART_SetConfig+0x1ea>
 8005ec8:	e8df f002 	tbb	[pc, r2]
 8005ecc:	0d0d0d07 	.word	0x0d0d0d07
 8005ed0:	0d0d0d09 	.word	0x0d0d0d09
 8005ed4:	0d0d0d8a 	.word	0x0d0d0d8a
 8005ed8:	0b          	.byte	0x0b
 8005ed9:	00          	.byte	0x00
 8005eda:	2200      	movs	r2, #0
 8005edc:	e013      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005ede:	2204      	movs	r2, #4
 8005ee0:	e011      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005ee2:	2208      	movs	r2, #8
 8005ee4:	e00f      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005ee6:	2210      	movs	r2, #16
 8005ee8:	e00d      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005eea:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8005eee:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005ef2:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005ef6:	2a20      	cmp	r2, #32
 8005ef8:	d074      	beq.n	8005fe4 <UART_SetConfig+0x2e8>
 8005efa:	d81b      	bhi.n	8005f34 <UART_SetConfig+0x238>
 8005efc:	2a00      	cmp	r2, #0
 8005efe:	d073      	beq.n	8005fe8 <UART_SetConfig+0x2ec>
 8005f00:	2a10      	cmp	r2, #16
 8005f02:	d173      	bne.n	8005fec <UART_SetConfig+0x2f0>
 8005f04:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f06:	4916      	ldr	r1, [pc, #88]	; (8005f60 <UART_SetConfig+0x264>)
 8005f08:	428b      	cmp	r3, r1
 8005f0a:	f000 808b 	beq.w	8006024 <UART_SetConfig+0x328>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f0e:	69e0      	ldr	r0, [r4, #28]
 8005f10:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005f14:	f000 80c7 	beq.w	80060a6 <UART_SetConfig+0x3aa>
    switch (clocksource)
 8005f18:	2a08      	cmp	r2, #8
 8005f1a:	f200 8132 	bhi.w	8006182 <UART_SetConfig+0x486>
 8005f1e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005f22:	00f5      	.short	0x00f5
 8005f24:	00f30117 	.word	0x00f30117
 8005f28:	011a0130 	.word	0x011a0130
 8005f2c:	01300130 	.word	0x01300130
 8005f30:	011d0130 	.word	0x011d0130
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f34:	2a30      	cmp	r2, #48	; 0x30
 8005f36:	d15b      	bne.n	8005ff0 <UART_SetConfig+0x2f4>
 8005f38:	2208      	movs	r2, #8
 8005f3a:	e7e4      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005f3c:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8005f40:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005f44:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005f48:	2a80      	cmp	r2, #128	; 0x80
 8005f4a:	d053      	beq.n	8005ff4 <UART_SetConfig+0x2f8>
 8005f4c:	d818      	bhi.n	8005f80 <UART_SetConfig+0x284>
 8005f4e:	2a00      	cmp	r2, #0
 8005f50:	d052      	beq.n	8005ff8 <UART_SetConfig+0x2fc>
 8005f52:	2a40      	cmp	r2, #64	; 0x40
 8005f54:	d152      	bne.n	8005ffc <UART_SetConfig+0x300>
 8005f56:	2204      	movs	r2, #4
 8005f58:	e7d5      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005f5a:	bf00      	nop
 8005f5c:	011e1a30 	.word	0x011e1a30
 8005f60:	40008000 	.word	0x40008000
 8005f64:	08012f9c 	.word	0x08012f9c
 8005f68:	cfff69f3 	.word	0xcfff69f3
 8005f6c:	40013800 	.word	0x40013800
 8005f70:	40004400 	.word	0x40004400
 8005f74:	40004800 	.word	0x40004800
 8005f78:	40004c00 	.word	0x40004c00
 8005f7c:	40005000 	.word	0x40005000
 8005f80:	2ac0      	cmp	r2, #192	; 0xc0
 8005f82:	d13d      	bne.n	8006000 <UART_SetConfig+0x304>
 8005f84:	2208      	movs	r2, #8
 8005f86:	e7be      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005f88:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8005f8c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005f90:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005f94:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005f98:	d034      	beq.n	8006004 <UART_SetConfig+0x308>
 8005f9a:	d805      	bhi.n	8005fa8 <UART_SetConfig+0x2ac>
 8005f9c:	b3a2      	cbz	r2, 8006008 <UART_SetConfig+0x30c>
 8005f9e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005fa2:	d133      	bne.n	800600c <UART_SetConfig+0x310>
 8005fa4:	2204      	movs	r2, #4
 8005fa6:	e7ae      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005fa8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005fac:	d130      	bne.n	8006010 <UART_SetConfig+0x314>
 8005fae:	2208      	movs	r2, #8
 8005fb0:	e7a9      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005fb2:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8005fb6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005fba:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005fbe:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005fc2:	d027      	beq.n	8006014 <UART_SetConfig+0x318>
 8005fc4:	d805      	bhi.n	8005fd2 <UART_SetConfig+0x2d6>
 8005fc6:	b33a      	cbz	r2, 8006018 <UART_SetConfig+0x31c>
 8005fc8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005fcc:	d126      	bne.n	800601c <UART_SetConfig+0x320>
 8005fce:	2204      	movs	r2, #4
 8005fd0:	e799      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005fd2:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005fd6:	d123      	bne.n	8006020 <UART_SetConfig+0x324>
 8005fd8:	2208      	movs	r2, #8
 8005fda:	e794      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005fdc:	2202      	movs	r2, #2
 8005fde:	e792      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	e790      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	e78e      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005fe8:	2200      	movs	r2, #0
 8005fea:	e78c      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005fec:	2210      	movs	r2, #16
 8005fee:	e78a      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	e788      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	e786      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	e784      	b.n	8005f06 <UART_SetConfig+0x20a>
 8005ffc:	2210      	movs	r2, #16
 8005ffe:	e782      	b.n	8005f06 <UART_SetConfig+0x20a>
 8006000:	2210      	movs	r2, #16
 8006002:	e780      	b.n	8005f06 <UART_SetConfig+0x20a>
 8006004:	2202      	movs	r2, #2
 8006006:	e77e      	b.n	8005f06 <UART_SetConfig+0x20a>
 8006008:	2200      	movs	r2, #0
 800600a:	e77c      	b.n	8005f06 <UART_SetConfig+0x20a>
 800600c:	2210      	movs	r2, #16
 800600e:	e77a      	b.n	8005f06 <UART_SetConfig+0x20a>
 8006010:	2210      	movs	r2, #16
 8006012:	e778      	b.n	8005f06 <UART_SetConfig+0x20a>
 8006014:	2202      	movs	r2, #2
 8006016:	e776      	b.n	8005f06 <UART_SetConfig+0x20a>
 8006018:	2200      	movs	r2, #0
 800601a:	e774      	b.n	8005f06 <UART_SetConfig+0x20a>
 800601c:	2210      	movs	r2, #16
 800601e:	e772      	b.n	8005f06 <UART_SetConfig+0x20a>
 8006020:	2210      	movs	r2, #16
 8006022:	e770      	b.n	8005f06 <UART_SetConfig+0x20a>
    switch (clocksource)
 8006024:	2a08      	cmp	r2, #8
 8006026:	f200 809c 	bhi.w	8006162 <UART_SetConfig+0x466>
 800602a:	e8df f002 	tbb	[pc, r2]
 800602e:	9a08      	.short	0x9a08
 8006030:	9a379a3a 	.word	0x9a379a3a
 8006034:	9a9a      	.short	0x9a9a
 8006036:	05          	.byte	0x05
 8006037:	00          	.byte	0x00
 8006038:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800603c:	e004      	b.n	8006048 <UART_SetConfig+0x34c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800603e:	f7fe f83b 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006042:	2800      	cmp	r0, #0
 8006044:	f000 808f 	beq.w	8006166 <UART_SetConfig+0x46a>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006048:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800604a:	4b51      	ldr	r3, [pc, #324]	; (8006190 <UART_SetConfig+0x494>)
 800604c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006050:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006054:	6865      	ldr	r5, [r4, #4]
 8006056:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800605a:	4299      	cmp	r1, r3
 800605c:	f200 8085 	bhi.w	800616a <UART_SetConfig+0x46e>
 8006060:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006064:	f200 8083 	bhi.w	800616e <UART_SetConfig+0x472>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006068:	2600      	movs	r6, #0
 800606a:	4633      	mov	r3, r6
 800606c:	4631      	mov	r1, r6
 800606e:	f7fa f977 	bl	8000360 <__aeabi_uldivmod>
 8006072:	0209      	lsls	r1, r1, #8
 8006074:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006078:	0200      	lsls	r0, r0, #8
 800607a:	086b      	lsrs	r3, r5, #1
 800607c:	18c0      	adds	r0, r0, r3
 800607e:	462a      	mov	r2, r5
 8006080:	4633      	mov	r3, r6
 8006082:	f141 0100 	adc.w	r1, r1, #0
 8006086:	f7fa f96b 	bl	8000360 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800608a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800608e:	4b41      	ldr	r3, [pc, #260]	; (8006194 <UART_SetConfig+0x498>)
 8006090:	429a      	cmp	r2, r3
 8006092:	d86e      	bhi.n	8006172 <UART_SetConfig+0x476>
          huart->Instance->BRR = usartdiv;
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	60d8      	str	r0, [r3, #12]
 8006098:	4630      	mov	r0, r6
 800609a:	e050      	b.n	800613e <UART_SetConfig+0x442>
        pclk = HAL_RCC_GetSysClockFreq();
 800609c:	f7fd fe64 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
        break;
 80060a0:	e7cf      	b.n	8006042 <UART_SetConfig+0x346>
        pclk = (uint32_t) HSI_VALUE;
 80060a2:	483d      	ldr	r0, [pc, #244]	; (8006198 <UART_SetConfig+0x49c>)
 80060a4:	e7d0      	b.n	8006048 <UART_SetConfig+0x34c>
    switch (clocksource)
 80060a6:	2a08      	cmp	r2, #8
 80060a8:	d865      	bhi.n	8006176 <UART_SetConfig+0x47a>
 80060aa:	e8df f002 	tbb	[pc, r2]
 80060ae:	2707      	.short	0x2707
 80060b0:	642a6405 	.word	0x642a6405
 80060b4:	6464      	.short	0x6464
 80060b6:	0b          	.byte	0x0b
 80060b7:	00          	.byte	0x00
 80060b8:	4837      	ldr	r0, [pc, #220]	; (8006198 <UART_SetConfig+0x49c>)
 80060ba:	e003      	b.n	80060c4 <UART_SetConfig+0x3c8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80060bc:	f7fd fffc 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d05a      	beq.n	800617a <UART_SetConfig+0x47e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80060c6:	4b32      	ldr	r3, [pc, #200]	; (8006190 <UART_SetConfig+0x494>)
 80060c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80060cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80060d0:	6862      	ldr	r2, [r4, #4]
 80060d2:	0853      	lsrs	r3, r2, #1
 80060d4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80060d8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060dc:	f1a3 0110 	sub.w	r1, r3, #16
 80060e0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80060e4:	4291      	cmp	r1, r2
 80060e6:	d84a      	bhi.n	800617e <UART_SetConfig+0x482>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060ee:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80060f2:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80060f4:	6822      	ldr	r2, [r4, #0]
 80060f6:	60d3      	str	r3, [r2, #12]
 80060f8:	2000      	movs	r0, #0
 80060fa:	e020      	b.n	800613e <UART_SetConfig+0x442>
        pclk = HAL_RCC_GetPCLK2Freq();
 80060fc:	f7fd ffee 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
        break;
 8006100:	e7de      	b.n	80060c0 <UART_SetConfig+0x3c4>
        pclk = HAL_RCC_GetSysClockFreq();
 8006102:	f7fd fe31 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
        break;
 8006106:	e7db      	b.n	80060c0 <UART_SetConfig+0x3c4>
    switch (clocksource)
 8006108:	4823      	ldr	r0, [pc, #140]	; (8006198 <UART_SetConfig+0x49c>)
 800610a:	e003      	b.n	8006114 <UART_SetConfig+0x418>
        pclk = HAL_RCC_GetPCLK1Freq();
 800610c:	f7fd ffd4 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006110:	2800      	cmp	r0, #0
 8006112:	d038      	beq.n	8006186 <UART_SetConfig+0x48a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006114:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006116:	4b1e      	ldr	r3, [pc, #120]	; (8006190 <UART_SetConfig+0x494>)
 8006118:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800611c:	fbb0 f0f3 	udiv	r0, r0, r3
 8006120:	6863      	ldr	r3, [r4, #4]
 8006122:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006126:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800612a:	f1a0 0210 	sub.w	r2, r0, #16
 800612e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006132:	429a      	cmp	r2, r3
 8006134:	d829      	bhi.n	800618a <UART_SetConfig+0x48e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	b280      	uxth	r0, r0
 800613a:	60d8      	str	r0, [r3, #12]
 800613c:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800613e:	2301      	movs	r3, #1
 8006140:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006144:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006148:	2300      	movs	r3, #0
 800614a:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800614c:	6763      	str	r3, [r4, #116]	; 0x74
}
 800614e:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006150:	f7fd ffc4 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
        break;
 8006154:	e7dc      	b.n	8006110 <UART_SetConfig+0x414>
        pclk = HAL_RCC_GetSysClockFreq();
 8006156:	f7fd fe07 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
        break;
 800615a:	e7d9      	b.n	8006110 <UART_SetConfig+0x414>
        pclk = (uint32_t) LSE_VALUE;
 800615c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006160:	e7d8      	b.n	8006114 <UART_SetConfig+0x418>
    switch (clocksource)
 8006162:	2001      	movs	r0, #1
 8006164:	e7eb      	b.n	800613e <UART_SetConfig+0x442>
 8006166:	2000      	movs	r0, #0
 8006168:	e7e9      	b.n	800613e <UART_SetConfig+0x442>
        ret = HAL_ERROR;
 800616a:	2001      	movs	r0, #1
 800616c:	e7e7      	b.n	800613e <UART_SetConfig+0x442>
 800616e:	2001      	movs	r0, #1
 8006170:	e7e5      	b.n	800613e <UART_SetConfig+0x442>
          ret = HAL_ERROR;
 8006172:	2001      	movs	r0, #1
 8006174:	e7e3      	b.n	800613e <UART_SetConfig+0x442>
    switch (clocksource)
 8006176:	2001      	movs	r0, #1
 8006178:	e7e1      	b.n	800613e <UART_SetConfig+0x442>
 800617a:	2000      	movs	r0, #0
 800617c:	e7df      	b.n	800613e <UART_SetConfig+0x442>
        ret = HAL_ERROR;
 800617e:	2001      	movs	r0, #1
 8006180:	e7dd      	b.n	800613e <UART_SetConfig+0x442>
    switch (clocksource)
 8006182:	2001      	movs	r0, #1
 8006184:	e7db      	b.n	800613e <UART_SetConfig+0x442>
 8006186:	2000      	movs	r0, #0
 8006188:	e7d9      	b.n	800613e <UART_SetConfig+0x442>
        ret = HAL_ERROR;
 800618a:	2001      	movs	r0, #1
 800618c:	e7d7      	b.n	800613e <UART_SetConfig+0x442>
 800618e:	bf00      	nop
 8006190:	08012fd8 	.word	0x08012fd8
 8006194:	000ffcff 	.word	0x000ffcff
 8006198:	00f42400 	.word	0x00f42400

0800619c <UART_AdvFeatureConfig>:
{
 800619c:	b510      	push	{r4, lr}
 800619e:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80061a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80061a2:	2bff      	cmp	r3, #255	; 0xff
 80061a4:	f200 80a1 	bhi.w	80062ea <UART_AdvFeatureConfig+0x14e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80061aa:	f013 0f01 	tst.w	r3, #1
 80061ae:	d00c      	beq.n	80061ca <UART_AdvFeatureConfig+0x2e>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80061b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80061b2:	b11b      	cbz	r3, 80061bc <UART_AdvFeatureConfig+0x20>
 80061b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061b8:	f040 809d 	bne.w	80062f6 <UART_AdvFeatureConfig+0x15a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	6853      	ldr	r3, [r2, #4]
 80061c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80061c6:	430b      	orrs	r3, r1
 80061c8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80061cc:	f013 0f02 	tst.w	r3, #2
 80061d0:	d00c      	beq.n	80061ec <UART_AdvFeatureConfig+0x50>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80061d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80061d4:	b11b      	cbz	r3, 80061de <UART_AdvFeatureConfig+0x42>
 80061d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061da:	f040 8092 	bne.w	8006302 <UART_AdvFeatureConfig+0x166>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061de:	6822      	ldr	r2, [r4, #0]
 80061e0:	6853      	ldr	r3, [r2, #4]
 80061e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80061e8:	430b      	orrs	r3, r1
 80061ea:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80061ee:	f013 0f04 	tst.w	r3, #4
 80061f2:	d00c      	beq.n	800620e <UART_AdvFeatureConfig+0x72>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80061f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061f6:	b11b      	cbz	r3, 8006200 <UART_AdvFeatureConfig+0x64>
 80061f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061fc:	f040 8087 	bne.w	800630e <UART_AdvFeatureConfig+0x172>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006200:	6822      	ldr	r2, [r4, #0]
 8006202:	6853      	ldr	r3, [r2, #4]
 8006204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800620a:	430b      	orrs	r3, r1
 800620c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800620e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006210:	f013 0f08 	tst.w	r3, #8
 8006214:	d00b      	beq.n	800622e <UART_AdvFeatureConfig+0x92>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006216:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006218:	b113      	cbz	r3, 8006220 <UART_AdvFeatureConfig+0x84>
 800621a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621e:	d17c      	bne.n	800631a <UART_AdvFeatureConfig+0x17e>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006220:	6822      	ldr	r2, [r4, #0]
 8006222:	6853      	ldr	r3, [r2, #4]
 8006224:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006228:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800622a:	430b      	orrs	r3, r1
 800622c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800622e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006230:	f013 0f10 	tst.w	r3, #16
 8006234:	d00b      	beq.n	800624e <UART_AdvFeatureConfig+0xb2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8006236:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006238:	b113      	cbz	r3, 8006240 <UART_AdvFeatureConfig+0xa4>
 800623a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800623e:	d172      	bne.n	8006326 <UART_AdvFeatureConfig+0x18a>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006240:	6822      	ldr	r2, [r4, #0]
 8006242:	6893      	ldr	r3, [r2, #8]
 8006244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006248:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800624a:	430b      	orrs	r3, r1
 800624c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800624e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006250:	f013 0f20 	tst.w	r3, #32
 8006254:	d00b      	beq.n	800626e <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8006256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006258:	b113      	cbz	r3, 8006260 <UART_AdvFeatureConfig+0xc4>
 800625a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800625e:	d168      	bne.n	8006332 <UART_AdvFeatureConfig+0x196>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006260:	6822      	ldr	r2, [r4, #0]
 8006262:	6893      	ldr	r3, [r2, #8]
 8006264:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006268:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800626a:	430b      	orrs	r3, r1
 800626c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800626e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006270:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006274:	d028      	beq.n	80062c8 <UART_AdvFeatureConfig+0x12c>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	4a43      	ldr	r2, [pc, #268]	; (8006388 <UART_AdvFeatureConfig+0x1ec>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d014      	beq.n	80062a8 <UART_AdvFeatureConfig+0x10c>
 800627e:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8006282:	4293      	cmp	r3, r2
 8006284:	d010      	beq.n	80062a8 <UART_AdvFeatureConfig+0x10c>
 8006286:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800628a:	4293      	cmp	r3, r2
 800628c:	d00c      	beq.n	80062a8 <UART_AdvFeatureConfig+0x10c>
 800628e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006292:	4293      	cmp	r3, r2
 8006294:	d008      	beq.n	80062a8 <UART_AdvFeatureConfig+0x10c>
 8006296:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800629a:	4293      	cmp	r3, r2
 800629c:	d004      	beq.n	80062a8 <UART_AdvFeatureConfig+0x10c>
 800629e:	f640 41da 	movw	r1, #3290	; 0xcda
 80062a2:	483a      	ldr	r0, [pc, #232]	; (800638c <UART_AdvFeatureConfig+0x1f0>)
 80062a4:	f7fa fce1 	bl	8000c6a <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80062a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80062aa:	b113      	cbz	r3, 80062b2 <UART_AdvFeatureConfig+0x116>
 80062ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062b0:	d145      	bne.n	800633e <UART_AdvFeatureConfig+0x1a2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	6853      	ldr	r3, [r2, #4]
 80062b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80062ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80062bc:	430b      	orrs	r3, r1
 80062be:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80062c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c6:	d040      	beq.n	800634a <UART_AdvFeatureConfig+0x1ae>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80062ce:	d00b      	beq.n	80062e8 <UART_AdvFeatureConfig+0x14c>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80062d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80062d2:	b113      	cbz	r3, 80062da <UART_AdvFeatureConfig+0x13e>
 80062d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062d8:	d150      	bne.n	800637c <UART_AdvFeatureConfig+0x1e0>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062da:	6822      	ldr	r2, [r4, #0]
 80062dc:	6853      	ldr	r3, [r2, #4]
 80062de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80062e2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80062e4:	430b      	orrs	r3, r1
 80062e6:	6053      	str	r3, [r2, #4]
}
 80062e8:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80062ea:	f640 41ab 	movw	r1, #3243	; 0xcab
 80062ee:	4827      	ldr	r0, [pc, #156]	; (800638c <UART_AdvFeatureConfig+0x1f0>)
 80062f0:	f7fa fcbb 	bl	8000c6a <assert_failed>
 80062f4:	e758      	b.n	80061a8 <UART_AdvFeatureConfig+0xc>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80062f6:	f44f 614b 	mov.w	r1, #3248	; 0xcb0
 80062fa:	4824      	ldr	r0, [pc, #144]	; (800638c <UART_AdvFeatureConfig+0x1f0>)
 80062fc:	f7fa fcb5 	bl	8000c6a <assert_failed>
 8006300:	e75c      	b.n	80061bc <UART_AdvFeatureConfig+0x20>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006302:	f640 41b7 	movw	r1, #3255	; 0xcb7
 8006306:	4821      	ldr	r0, [pc, #132]	; (800638c <UART_AdvFeatureConfig+0x1f0>)
 8006308:	f7fa fcaf 	bl	8000c6a <assert_failed>
 800630c:	e767      	b.n	80061de <UART_AdvFeatureConfig+0x42>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800630e:	f640 41be 	movw	r1, #3262	; 0xcbe
 8006312:	481e      	ldr	r0, [pc, #120]	; (800638c <UART_AdvFeatureConfig+0x1f0>)
 8006314:	f7fa fca9 	bl	8000c6a <assert_failed>
 8006318:	e772      	b.n	8006200 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800631a:	f640 41c5 	movw	r1, #3269	; 0xcc5
 800631e:	481b      	ldr	r0, [pc, #108]	; (800638c <UART_AdvFeatureConfig+0x1f0>)
 8006320:	f7fa fca3 	bl	8000c6a <assert_failed>
 8006324:	e77c      	b.n	8006220 <UART_AdvFeatureConfig+0x84>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8006326:	f640 41cc 	movw	r1, #3276	; 0xccc
 800632a:	4818      	ldr	r0, [pc, #96]	; (800638c <UART_AdvFeatureConfig+0x1f0>)
 800632c:	f7fa fc9d 	bl	8000c6a <assert_failed>
 8006330:	e786      	b.n	8006240 <UART_AdvFeatureConfig+0xa4>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8006332:	f640 41d3 	movw	r1, #3283	; 0xcd3
 8006336:	4815      	ldr	r0, [pc, #84]	; (800638c <UART_AdvFeatureConfig+0x1f0>)
 8006338:	f7fa fc97 	bl	8000c6a <assert_failed>
 800633c:	e790      	b.n	8006260 <UART_AdvFeatureConfig+0xc4>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800633e:	f640 41db 	movw	r1, #3291	; 0xcdb
 8006342:	4812      	ldr	r0, [pc, #72]	; (800638c <UART_AdvFeatureConfig+0x1f0>)
 8006344:	f7fa fc91 	bl	8000c6a <assert_failed>
 8006348:	e7b3      	b.n	80062b2 <UART_AdvFeatureConfig+0x116>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800634a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800634c:	b143      	cbz	r3, 8006360 <UART_AdvFeatureConfig+0x1c4>
 800634e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006352:	d005      	beq.n	8006360 <UART_AdvFeatureConfig+0x1c4>
 8006354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006358:	d002      	beq.n	8006360 <UART_AdvFeatureConfig+0x1c4>
 800635a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800635e:	d107      	bne.n	8006370 <UART_AdvFeatureConfig+0x1d4>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006360:	6822      	ldr	r2, [r4, #0]
 8006362:	6853      	ldr	r3, [r2, #4]
 8006364:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006368:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800636a:	430b      	orrs	r3, r1
 800636c:	6053      	str	r3, [r2, #4]
 800636e:	e7ab      	b.n	80062c8 <UART_AdvFeatureConfig+0x12c>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006370:	f44f 614e 	mov.w	r1, #3296	; 0xce0
 8006374:	4805      	ldr	r0, [pc, #20]	; (800638c <UART_AdvFeatureConfig+0x1f0>)
 8006376:	f7fa fc78 	bl	8000c6a <assert_failed>
 800637a:	e7f1      	b.n	8006360 <UART_AdvFeatureConfig+0x1c4>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800637c:	f640 41e8 	movw	r1, #3304	; 0xce8
 8006380:	4802      	ldr	r0, [pc, #8]	; (800638c <UART_AdvFeatureConfig+0x1f0>)
 8006382:	f7fa fc72 	bl	8000c6a <assert_failed>
 8006386:	e7a8      	b.n	80062da <UART_AdvFeatureConfig+0x13e>
 8006388:	40013800 	.word	0x40013800
 800638c:	08012f9c 	.word	0x08012f9c

08006390 <UART_WaitOnFlagUntilTimeout>:
{
 8006390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006394:	4605      	mov	r5, r0
 8006396:	460f      	mov	r7, r1
 8006398:	4616      	mov	r6, r2
 800639a:	4699      	mov	r9, r3
 800639c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	69dc      	ldr	r4, [r3, #28]
 80063a4:	ea37 0404 	bics.w	r4, r7, r4
 80063a8:	bf0c      	ite	eq
 80063aa:	2401      	moveq	r4, #1
 80063ac:	2400      	movne	r4, #0
 80063ae:	42b4      	cmp	r4, r6
 80063b0:	d157      	bne.n	8006462 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 80063b2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80063b6:	d0f3      	beq.n	80063a0 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b8:	f7fa feee 	bl	8001198 <HAL_GetTick>
 80063bc:	eba0 0009 	sub.w	r0, r0, r9
 80063c0:	4540      	cmp	r0, r8
 80063c2:	d82f      	bhi.n	8006424 <UART_WaitOnFlagUntilTimeout+0x94>
 80063c4:	f1b8 0f00 	cmp.w	r8, #0
 80063c8:	d02c      	beq.n	8006424 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ca:	682b      	ldr	r3, [r5, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	f012 0f04 	tst.w	r2, #4
 80063d2:	d0e5      	beq.n	80063a0 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063d4:	69da      	ldr	r2, [r3, #28]
 80063d6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80063da:	d0e1      	beq.n	80063a0 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063e0:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80063e2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	e852 3f00 	ldrex	r3, [r2]
 80063e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	e842 3100 	strex	r1, r3, [r2]
 80063f0:	2900      	cmp	r1, #0
 80063f2:	d1f6      	bne.n	80063e2 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	f102 0308 	add.w	r3, r2, #8
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	3208      	adds	r2, #8
 8006404:	e842 3100 	strex	r1, r3, [r2]
 8006408:	2900      	cmp	r1, #0
 800640a:	d1f3      	bne.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800640c:	2320      	movs	r3, #32
 800640e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006412:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006416:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800641a:	2300      	movs	r3, #0
 800641c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8006420:	2003      	movs	r0, #3
 8006422:	e01f      	b.n	8006464 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006424:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	e852 3f00 	ldrex	r3, [r2]
 800642a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	e842 3100 	strex	r1, r3, [r2]
 8006432:	2900      	cmp	r1, #0
 8006434:	d1f6      	bne.n	8006424 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006436:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	f102 0308 	add.w	r3, r2, #8
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	3208      	adds	r2, #8
 8006446:	e842 3100 	strex	r1, r3, [r2]
 800644a:	2900      	cmp	r1, #0
 800644c:	d1f3      	bne.n	8006436 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800644e:	2320      	movs	r3, #32
 8006450:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006454:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8006458:	2300      	movs	r3, #0
 800645a:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 800645e:	2003      	movs	r0, #3
 8006460:	e000      	b.n	8006464 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8006462:	2000      	movs	r0, #0
}
 8006464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006468 <UART_CheckIdleState>:
{
 8006468:	b530      	push	{r4, r5, lr}
 800646a:	b083      	sub	sp, #12
 800646c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646e:	2300      	movs	r3, #0
 8006470:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006474:	f7fa fe90 	bl	8001198 <HAL_GetTick>
 8006478:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800647a:	6822      	ldr	r2, [r4, #0]
 800647c:	6812      	ldr	r2, [r2, #0]
 800647e:	f012 0f08 	tst.w	r2, #8
 8006482:	d10f      	bne.n	80064a4 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f013 0f04 	tst.w	r3, #4
 800648c:	d118      	bne.n	80064c0 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800648e:	2320      	movs	r3, #32
 8006490:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006494:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006498:	2000      	movs	r0, #0
 800649a:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800649c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80064a0:	b003      	add	sp, #12
 80064a2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	4603      	mov	r3, r0
 80064ac:	2200      	movs	r2, #0
 80064ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064b2:	4620      	mov	r0, r4
 80064b4:	f7ff ff6c 	bl	8006390 <UART_WaitOnFlagUntilTimeout>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d0e3      	beq.n	8006484 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80064bc:	2003      	movs	r0, #3
 80064be:	e7ef      	b.n	80064a0 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	462b      	mov	r3, r5
 80064c8:	2200      	movs	r2, #0
 80064ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7ff ff5e 	bl	8006390 <UART_WaitOnFlagUntilTimeout>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d0da      	beq.n	800648e <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80064d8:	2003      	movs	r0, #3
 80064da:	e7e1      	b.n	80064a0 <UART_CheckIdleState+0x38>

080064dc <HAL_UART_Init>:
  if (huart == NULL)
 80064dc:	2800      	cmp	r0, #0
 80064de:	d070      	beq.n	80065c2 <HAL_UART_Init+0xe6>
{
 80064e0:	b510      	push	{r4, lr}
 80064e2:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80064e4:	6983      	ldr	r3, [r0, #24]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d043      	beq.n	8006572 <HAL_UART_Init+0x96>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80064ea:	6803      	ldr	r3, [r0, #0]
 80064ec:	4a36      	ldr	r2, [pc, #216]	; (80065c8 <HAL_UART_Init+0xec>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d018      	beq.n	8006524 <HAL_UART_Init+0x48>
 80064f2:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d014      	beq.n	8006524 <HAL_UART_Init+0x48>
 80064fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064fe:	4293      	cmp	r3, r2
 8006500:	d010      	beq.n	8006524 <HAL_UART_Init+0x48>
 8006502:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006506:	4293      	cmp	r3, r2
 8006508:	d00c      	beq.n	8006524 <HAL_UART_Init+0x48>
 800650a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800650e:	4293      	cmp	r3, r2
 8006510:	d008      	beq.n	8006524 <HAL_UART_Init+0x48>
 8006512:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8006516:	4293      	cmp	r3, r2
 8006518:	d004      	beq.n	8006524 <HAL_UART_Init+0x48>
 800651a:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800651e:	482b      	ldr	r0, [pc, #172]	; (80065cc <HAL_UART_Init+0xf0>)
 8006520:	f7fa fba3 	bl	8000c6a <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006524:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006528:	2b00      	cmp	r3, #0
 800652a:	d040      	beq.n	80065ae <HAL_UART_Init+0xd2>
  huart->gState = HAL_UART_STATE_BUSY;
 800652c:	2324      	movs	r3, #36	; 0x24
 800652e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	6813      	ldr	r3, [r2, #0]
 8006536:	f023 0301 	bic.w	r3, r3, #1
 800653a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800653c:	4620      	mov	r0, r4
 800653e:	f7ff fbdd 	bl	8005cfc <UART_SetConfig>
 8006542:	2801      	cmp	r0, #1
 8006544:	d014      	beq.n	8006570 <HAL_UART_Init+0x94>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006548:	2b00      	cmp	r3, #0
 800654a:	d136      	bne.n	80065ba <HAL_UART_Init+0xde>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800654c:	6822      	ldr	r2, [r4, #0]
 800654e:	6853      	ldr	r3, [r2, #4]
 8006550:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006554:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	6893      	ldr	r3, [r2, #8]
 800655a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800655e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006560:	6822      	ldr	r2, [r4, #0]
 8006562:	6813      	ldr	r3, [r2, #0]
 8006564:	f043 0301 	orr.w	r3, r3, #1
 8006568:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800656a:	4620      	mov	r0, r4
 800656c:	f7ff ff7c 	bl	8006468 <UART_CheckIdleState>
}
 8006570:	bd10      	pop	{r4, pc}
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006572:	6803      	ldr	r3, [r0, #0]
 8006574:	4a14      	ldr	r2, [pc, #80]	; (80065c8 <HAL_UART_Init+0xec>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d0d4      	beq.n	8006524 <HAL_UART_Init+0x48>
 800657a:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800657e:	4293      	cmp	r3, r2
 8006580:	d0d0      	beq.n	8006524 <HAL_UART_Init+0x48>
 8006582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006586:	4293      	cmp	r3, r2
 8006588:	d0cc      	beq.n	8006524 <HAL_UART_Init+0x48>
 800658a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800658e:	4293      	cmp	r3, r2
 8006590:	d0c8      	beq.n	8006524 <HAL_UART_Init+0x48>
 8006592:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006596:	4293      	cmp	r3, r2
 8006598:	d0c4      	beq.n	8006524 <HAL_UART_Init+0x48>
 800659a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800659e:	4293      	cmp	r3, r2
 80065a0:	d0c0      	beq.n	8006524 <HAL_UART_Init+0x48>
 80065a2:	f240 1143 	movw	r1, #323	; 0x143
 80065a6:	4809      	ldr	r0, [pc, #36]	; (80065cc <HAL_UART_Init+0xf0>)
 80065a8:	f7fa fb5f 	bl	8000c6a <assert_failed>
 80065ac:	e7ba      	b.n	8006524 <HAL_UART_Init+0x48>
    huart->Lock = HAL_UNLOCKED;
 80065ae:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80065b2:	4620      	mov	r0, r4
 80065b4:	f7fa fd2a 	bl	800100c <HAL_UART_MspInit>
 80065b8:	e7b8      	b.n	800652c <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 80065ba:	4620      	mov	r0, r4
 80065bc:	f7ff fdee 	bl	800619c <UART_AdvFeatureConfig>
 80065c0:	e7c4      	b.n	800654c <HAL_UART_Init+0x70>
    return HAL_ERROR;
 80065c2:	2001      	movs	r0, #1
}
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40013800 	.word	0x40013800
 80065cc:	08012f9c 	.word	0x08012f9c

080065d0 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065d0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80065d2:	b92b      	cbnz	r3, 80065e0 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80065d4:	2301      	movs	r3, #1
 80065d6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065da:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 80065de:	4770      	bx	lr
{
 80065e0:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065e2:	6803      	ldr	r3, [r0, #0]
 80065e4:	689a      	ldr	r2, [r3, #8]
 80065e6:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065ea:	6899      	ldr	r1, [r3, #8]
 80065ec:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065ee:	4d09      	ldr	r5, [pc, #36]	; (8006614 <UARTEx_SetNbDataToProcess+0x44>)
 80065f0:	5c6b      	ldrb	r3, [r5, r1]
 80065f2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065f4:	4c08      	ldr	r4, [pc, #32]	; (8006618 <UARTEx_SetNbDataToProcess+0x48>)
 80065f6:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065f8:	fb93 f3f1 	sdiv	r3, r3, r1
 80065fc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006600:	5cab      	ldrb	r3, [r5, r2]
 8006602:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006604:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006606:	fb93 f3f2 	sdiv	r3, r3, r2
 800660a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800660e:	bc30      	pop	{r4, r5}
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	08013034 	.word	0x08013034
 8006618:	0801302c 	.word	0x0801302c

0800661c <HAL_UARTEx_WakeupCallback>:
}
 800661c:	4770      	bx	lr

0800661e <HAL_UARTEx_RxFifoFullCallback>:
}
 800661e:	4770      	bx	lr

08006620 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006620:	4770      	bx	lr
	...

08006624 <HAL_UARTEx_DisableFifoMode>:
{
 8006624:	b510      	push	{r4, lr}
 8006626:	4604      	mov	r4, r0
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8006628:	6803      	ldr	r3, [r0, #0]
 800662a:	4a1d      	ldr	r2, [pc, #116]	; (80066a0 <HAL_UARTEx_DisableFifoMode+0x7c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d018      	beq.n	8006662 <HAL_UARTEx_DisableFifoMode+0x3e>
 8006630:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8006634:	4293      	cmp	r3, r2
 8006636:	d014      	beq.n	8006662 <HAL_UARTEx_DisableFifoMode+0x3e>
 8006638:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800663c:	4293      	cmp	r3, r2
 800663e:	d010      	beq.n	8006662 <HAL_UARTEx_DisableFifoMode+0x3e>
 8006640:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006644:	4293      	cmp	r3, r2
 8006646:	d00c      	beq.n	8006662 <HAL_UARTEx_DisableFifoMode+0x3e>
 8006648:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800664c:	4293      	cmp	r3, r2
 800664e:	d008      	beq.n	8006662 <HAL_UARTEx_DisableFifoMode+0x3e>
 8006650:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8006654:	4293      	cmp	r3, r2
 8006656:	d004      	beq.n	8006662 <HAL_UARTEx_DisableFifoMode+0x3e>
 8006658:	f44f 710d 	mov.w	r1, #564	; 0x234
 800665c:	4811      	ldr	r0, [pc, #68]	; (80066a4 <HAL_UARTEx_DisableFifoMode+0x80>)
 800665e:	f7fa fb04 	bl	8000c6a <assert_failed>
  __HAL_LOCK(huart);
 8006662:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8006666:	2b01      	cmp	r3, #1
 8006668:	d017      	beq.n	800669a <HAL_UARTEx_DisableFifoMode+0x76>
 800666a:	2301      	movs	r3, #1
 800666c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006670:	2324      	movs	r3, #36	; 0x24
 8006672:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006676:	6822      	ldr	r2, [r4, #0]
 8006678:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800667a:	6811      	ldr	r1, [r2, #0]
 800667c:	f021 0101 	bic.w	r1, r1, #1
 8006680:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006682:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006686:	2000      	movs	r0, #0
 8006688:	6660      	str	r0, [r4, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800668a:	6822      	ldr	r2, [r4, #0]
 800668c:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800668e:	2320      	movs	r3, #32
 8006690:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006694:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006698:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800669a:	2002      	movs	r0, #2
 800669c:	e7fc      	b.n	8006698 <HAL_UARTEx_DisableFifoMode+0x74>
 800669e:	bf00      	nop
 80066a0:	40013800 	.word	0x40013800
 80066a4:	08012ff0 	.word	0x08012ff0

080066a8 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	4604      	mov	r4, r0
 80066ac:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80066ae:	6803      	ldr	r3, [r0, #0]
 80066b0:	4a2a      	ldr	r2, [pc, #168]	; (800675c <HAL_UARTEx_SetTxFifoThreshold+0xb4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d018      	beq.n	80066e8 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 80066b6:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d014      	beq.n	80066e8 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 80066be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d010      	beq.n	80066e8 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 80066c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00c      	beq.n	80066e8 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 80066ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d008      	beq.n	80066e8 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 80066d6:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80066da:	4293      	cmp	r3, r2
 80066dc:	d004      	beq.n	80066e8 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 80066de:	f240 2162 	movw	r1, #610	; 0x262
 80066e2:	481f      	ldr	r0, [pc, #124]	; (8006760 <HAL_UARTEx_SetTxFifoThreshold+0xb8>)
 80066e4:	f7fa fac1 	bl	8000c6a <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 80066e8:	b175      	cbz	r5, 8006708 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 80066ea:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 80066ee:	d00b      	beq.n	8006708 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 80066f0:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80066f4:	d008      	beq.n	8006708 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 80066f6:	f1b5 4fc0 	cmp.w	r5, #1610612736	; 0x60000000
 80066fa:	d005      	beq.n	8006708 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 80066fc:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8006700:	d002      	beq.n	8006708 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8006702:	f1b5 4f20 	cmp.w	r5, #2684354560	; 0xa0000000
 8006706:	d121      	bne.n	800674c <HAL_UARTEx_SetTxFifoThreshold+0xa4>
  __HAL_LOCK(huart);
 8006708:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800670c:	2b01      	cmp	r3, #1
 800670e:	d023      	beq.n	8006758 <HAL_UARTEx_SetTxFifoThreshold+0xb0>
 8006710:	2301      	movs	r3, #1
 8006712:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006716:	2324      	movs	r3, #36	; 0x24
 8006718:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	f022 0201 	bic.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006728:	6822      	ldr	r2, [r4, #0]
 800672a:	6893      	ldr	r3, [r2, #8]
 800672c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006730:	432b      	orrs	r3, r5
 8006732:	6093      	str	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006734:	4620      	mov	r0, r4
 8006736:	f7ff ff4b 	bl	80065d0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	601e      	str	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800673e:	2320      	movs	r3, #32
 8006740:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006744:	2000      	movs	r0, #0
 8006746:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800674a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800674c:	f240 2163 	movw	r1, #611	; 0x263
 8006750:	4803      	ldr	r0, [pc, #12]	; (8006760 <HAL_UARTEx_SetTxFifoThreshold+0xb8>)
 8006752:	f7fa fa8a 	bl	8000c6a <assert_failed>
 8006756:	e7d7      	b.n	8006708 <HAL_UARTEx_SetTxFifoThreshold+0x60>
  __HAL_LOCK(huart);
 8006758:	2002      	movs	r0, #2
 800675a:	e7f6      	b.n	800674a <HAL_UARTEx_SetTxFifoThreshold+0xa2>
 800675c:	40013800 	.word	0x40013800
 8006760:	08012ff0 	.word	0x08012ff0

08006764 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	4604      	mov	r4, r0
 8006768:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800676a:	6803      	ldr	r3, [r0, #0]
 800676c:	4a2a      	ldr	r2, [pc, #168]	; (8006818 <HAL_UARTEx_SetRxFifoThreshold+0xb4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d018      	beq.n	80067a4 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 8006772:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8006776:	4293      	cmp	r3, r2
 8006778:	d014      	beq.n	80067a4 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 800677a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800677e:	4293      	cmp	r3, r2
 8006780:	d010      	beq.n	80067a4 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 8006782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006786:	4293      	cmp	r3, r2
 8006788:	d00c      	beq.n	80067a4 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 800678a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800678e:	4293      	cmp	r3, r2
 8006790:	d008      	beq.n	80067a4 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 8006792:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8006796:	4293      	cmp	r3, r2
 8006798:	d004      	beq.n	80067a4 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 800679a:	f240 2193 	movw	r1, #659	; 0x293
 800679e:	481f      	ldr	r0, [pc, #124]	; (800681c <HAL_UARTEx_SetRxFifoThreshold+0xb8>)
 80067a0:	f7fa fa63 	bl	8000c6a <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 80067a4:	b175      	cbz	r5, 80067c4 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 80067a6:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
 80067aa:	d00b      	beq.n	80067c4 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 80067ac:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 80067b0:	d008      	beq.n	80067c4 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 80067b2:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 80067b6:	d005      	beq.n	80067c4 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 80067b8:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 80067bc:	d002      	beq.n	80067c4 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 80067be:	f1b5 6f20 	cmp.w	r5, #167772160	; 0xa000000
 80067c2:	d121      	bne.n	8006808 <HAL_UARTEx_SetRxFifoThreshold+0xa4>
  __HAL_LOCK(huart);
 80067c4:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d023      	beq.n	8006814 <HAL_UARTEx_SetRxFifoThreshold+0xb0>
 80067cc:	2301      	movs	r3, #1
 80067ce:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80067d2:	2324      	movs	r3, #36	; 0x24
 80067d4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	f022 0201 	bic.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067e4:	6822      	ldr	r2, [r4, #0]
 80067e6:	6893      	ldr	r3, [r2, #8]
 80067e8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80067ec:	432b      	orrs	r3, r5
 80067ee:	6093      	str	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80067f0:	4620      	mov	r0, r4
 80067f2:	f7ff feed 	bl	80065d0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	601e      	str	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80067fa:	2320      	movs	r3, #32
 80067fc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006800:	2000      	movs	r0, #0
 8006802:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006806:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8006808:	f44f 7125 	mov.w	r1, #660	; 0x294
 800680c:	4803      	ldr	r0, [pc, #12]	; (800681c <HAL_UARTEx_SetRxFifoThreshold+0xb8>)
 800680e:	f7fa fa2c 	bl	8000c6a <assert_failed>
 8006812:	e7d7      	b.n	80067c4 <HAL_UARTEx_SetRxFifoThreshold+0x60>
  __HAL_LOCK(huart);
 8006814:	2002      	movs	r0, #2
 8006816:	e7f6      	b.n	8006806 <HAL_UARTEx_SetRxFifoThreshold+0xa2>
 8006818:	40013800 	.word	0x40013800
 800681c:	08012ff0 	.word	0x08012ff0

08006820 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006820:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006822:	2000      	movs	r0, #0
 8006824:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006828:	f64b 7280 	movw	r2, #49024	; 0xbf80
 800682c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8006830:	4770      	bx	lr

08006832 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006832:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8006836:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 800683a:	045b      	lsls	r3, r3, #17
 800683c:	0c5b      	lsrs	r3, r3, #17
 800683e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8006842:	2000      	movs	r0, #0
 8006844:	4770      	bx	lr

08006846 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006846:	b084      	sub	sp, #16
 8006848:	4684      	mov	ip, r0
 800684a:	a801      	add	r0, sp, #4
 800684c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006850:	2301      	movs	r3, #1
 8006852:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006856:	2000      	movs	r0, #0
 8006858:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800685c:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006860:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 8006864:	b004      	add	sp, #16
 8006866:	4770      	bx	lr

08006868 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006868:	b510      	push	{r4, lr}
 800686a:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800686c:	f891 c000 	ldrb.w	ip, [r1]
 8006870:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8006874:	b292      	uxth	r2, r2
 8006876:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800687a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800687e:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8006880:	78c8      	ldrb	r0, [r1, #3]
 8006882:	2803      	cmp	r0, #3
 8006884:	d862      	bhi.n	800694c <USB_ActivateEndpoint+0xe4>
 8006886:	e8df f000 	tbb	[pc, r0]
 800688a:	5d56      	.short	0x5d56
 800688c:	5902      	.short	0x5902
 800688e:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006890:	f248 0e80 	movw	lr, #32896	; 0x8080
 8006894:	ea42 020e 	orr.w	r2, r2, lr
 8006898:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800689c:	f891 c000 	ldrb.w	ip, [r1]
 80068a0:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80068a4:	b212      	sxth	r2, r2
 80068a6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80068aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80068ae:	ea4c 0202 	orr.w	r2, ip, r2
 80068b2:	b292      	uxth	r2, r2
 80068b4:	ea42 020e 	orr.w	r2, r2, lr
 80068b8:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 80068bc:	7b0a      	ldrb	r2, [r1, #12]
 80068be:	2a00      	cmp	r2, #0
 80068c0:	f040 80c2 	bne.w	8006a48 <USB_ActivateEndpoint+0x1e0>
  {
    if (ep->is_in != 0U)
 80068c4:	784a      	ldrb	r2, [r1, #1]
 80068c6:	2a00      	cmp	r2, #0
 80068c8:	d051      	beq.n	800696e <USB_ActivateEndpoint+0x106>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80068ca:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80068ce:	fa13 f282 	uxtah	r2, r3, r2
 80068d2:	780c      	ldrb	r4, [r1, #0]
 80068d4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80068d8:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 80068dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80068e0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80068e4:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068e8:	780c      	ldrb	r4, [r1, #0]
 80068ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80068ee:	f012 0f40 	tst.w	r2, #64	; 0x40
 80068f2:	d00c      	beq.n	800690e <USB_ActivateEndpoint+0xa6>
 80068f4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80068f8:	b292      	uxth	r2, r2
 80068fa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80068fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006906:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800690a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800690e:	78ca      	ldrb	r2, [r1, #3]
 8006910:	2a01      	cmp	r2, #1
 8006912:	d01d      	beq.n	8006950 <USB_ActivateEndpoint+0xe8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006914:	7809      	ldrb	r1, [r1, #0]
 8006916:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800691a:	b292      	uxth	r2, r2
 800691c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006924:	f082 0220 	eor.w	r2, r2, #32
 8006928:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800692c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006930:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8006934:	e066      	b.n	8006a04 <USB_ActivateEndpoint+0x19c>
      wEpRegVal |= USB_EP_CONTROL;
 8006936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 800693a:	e7a9      	b.n	8006890 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 800693c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8006940:	2000      	movs	r0, #0
      break;
 8006942:	e7a5      	b.n	8006890 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006944:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8006948:	2000      	movs	r0, #0
      break;
 800694a:	e7a1      	b.n	8006890 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 800694c:	2001      	movs	r0, #1
 800694e:	e79f      	b.n	8006890 <USB_ActivateEndpoint+0x28>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006950:	7809      	ldrb	r1, [r1, #0]
 8006952:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006956:	b292      	uxth	r2, r2
 8006958:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800695c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006960:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006964:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006968:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800696c:	e04a      	b.n	8006a04 <USB_ActivateEndpoint+0x19c>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800696e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006972:	fa13 f282 	uxtah	r2, r3, r2
 8006976:	780c      	ldrb	r4, [r1, #0]
 8006978:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800697c:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8006980:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006984:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006988:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800698c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006990:	fa13 f282 	uxtah	r2, r3, r2
 8006994:	780c      	ldrb	r4, [r1, #0]
 8006996:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800699a:	690c      	ldr	r4, [r1, #16]
 800699c:	2c3e      	cmp	r4, #62	; 0x3e
 800699e:	d932      	bls.n	8006a06 <USB_ActivateEndpoint+0x19e>
 80069a0:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 80069a4:	f014 0f1f 	tst.w	r4, #31
 80069a8:	d101      	bne.n	80069ae <USB_ActivateEndpoint+0x146>
 80069aa:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80069ae:	ea6f 6ccc 	mvn.w	ip, ip, lsl #27
 80069b2:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 80069b6:	fa1f fc8c 	uxth.w	ip, ip
 80069ba:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069be:	780c      	ldrb	r4, [r1, #0]
 80069c0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80069c4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80069c8:	d00c      	beq.n	80069e4 <USB_ActivateEndpoint+0x17c>
 80069ca:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80069ce:	b292      	uxth	r2, r2
 80069d0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80069d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80069d8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80069dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069e0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069e4:	7809      	ldrb	r1, [r1, #0]
 80069e6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80069ea:	b292      	uxth	r2, r2
 80069ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80069f4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80069f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a00:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8006a04:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006a06:	b98c      	cbnz	r4, 8006a2c <USB_ActivateEndpoint+0x1c4>
 8006a08:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8006a0c:	b2a4      	uxth	r4, r4
 8006a0e:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8006a12:	b2a4      	uxth	r4, r4
 8006a14:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8006a18:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8006a1c:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8006a20:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8006a24:	b2a4      	uxth	r4, r4
 8006a26:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8006a2a:	e7c8      	b.n	80069be <USB_ActivateEndpoint+0x156>
 8006a2c:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8006a30:	f014 0f01 	tst.w	r4, #1
 8006a34:	d001      	beq.n	8006a3a <USB_ActivateEndpoint+0x1d2>
 8006a36:	f10c 0c01 	add.w	ip, ip, #1
 8006a3a:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8006a3e:	fa1f fc8c 	uxth.w	ip, ip
 8006a42:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
 8006a46:	e7ba      	b.n	80069be <USB_ActivateEndpoint+0x156>
    if (ep->type == EP_TYPE_BULK)
 8006a48:	78ca      	ldrb	r2, [r1, #3]
 8006a4a:	2a02      	cmp	r2, #2
 8006a4c:	d072      	beq.n	8006b34 <USB_ActivateEndpoint+0x2cc>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006a4e:	780c      	ldrb	r4, [r1, #0]
 8006a50:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006a54:	b292      	uxth	r2, r2
 8006a56:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8006a5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a66:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006a6a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006a6e:	fa13 f282 	uxtah	r2, r3, r2
 8006a72:	f891 c000 	ldrb.w	ip, [r1]
 8006a76:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8006a7a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8006a7e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006a82:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006a86:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 8006a8a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006a8e:	fa13 f282 	uxtah	r2, r3, r2
 8006a92:	f891 c000 	ldrb.w	ip, [r1]
 8006a96:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8006a9a:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8006a9e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006aa2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006aa6:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 8006aaa:	784a      	ldrb	r2, [r1, #1]
 8006aac:	2a00      	cmp	r2, #0
 8006aae:	d150      	bne.n	8006b52 <USB_ActivateEndpoint+0x2ea>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ab0:	780c      	ldrb	r4, [r1, #0]
 8006ab2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006ab6:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006aba:	d00c      	beq.n	8006ad6 <USB_ActivateEndpoint+0x26e>
 8006abc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006ac0:	b292      	uxth	r2, r2
 8006ac2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006ac6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006aca:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006ace:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ad2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ad6:	780c      	ldrb	r4, [r1, #0]
 8006ad8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006adc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006ae0:	d00c      	beq.n	8006afc <USB_ActivateEndpoint+0x294>
 8006ae2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006ae6:	b292      	uxth	r2, r2
 8006ae8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006aec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006af0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006af4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006af8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006afc:	f891 c000 	ldrb.w	ip, [r1]
 8006b00:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8006b04:	b292      	uxth	r2, r2
 8006b06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b0e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8006b12:	f248 0480 	movw	r4, #32896	; 0x8080
 8006b16:	4322      	orrs	r2, r4
 8006b18:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b1c:	7809      	ldrb	r1, [r1, #0]
 8006b1e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006b22:	b292      	uxth	r2, r2
 8006b24:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b2c:	4322      	orrs	r2, r4
 8006b2e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8006b32:	e767      	b.n	8006a04 <USB_ActivateEndpoint+0x19c>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b34:	780c      	ldrb	r4, [r1, #0]
 8006b36:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b3a:	b292      	uxth	r2, r2
 8006b3c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006b40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b44:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8006b48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b4c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8006b50:	e78b      	b.n	8006a6a <USB_ActivateEndpoint+0x202>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b52:	780c      	ldrb	r4, [r1, #0]
 8006b54:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b58:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006b5c:	d00c      	beq.n	8006b78 <USB_ActivateEndpoint+0x310>
 8006b5e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b62:	b292      	uxth	r2, r2
 8006b64:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006b68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b6c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006b70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b74:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b78:	780c      	ldrb	r4, [r1, #0]
 8006b7a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b7e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006b82:	d00c      	beq.n	8006b9e <USB_ActivateEndpoint+0x336>
 8006b84:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b88:	b292      	uxth	r2, r2
 8006b8a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006b8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b96:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006b9a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8006b9e:	78ca      	ldrb	r2, [r1, #3]
 8006ba0:	2a01      	cmp	r2, #1
 8006ba2:	d01e      	beq.n	8006be2 <USB_ActivateEndpoint+0x37a>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ba4:	780c      	ldrb	r4, [r1, #0]
 8006ba6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006baa:	b292      	uxth	r2, r2
 8006bac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb4:	f082 0220 	eor.w	r2, r2, #32
 8006bb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bc0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bc4:	7809      	ldrb	r1, [r1, #0]
 8006bc6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006bca:	b292      	uxth	r2, r2
 8006bcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bd0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006bd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bdc:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8006be0:	e710      	b.n	8006a04 <USB_ActivateEndpoint+0x19c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006be2:	780c      	ldrb	r4, [r1, #0]
 8006be4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006be8:	b292      	uxth	r2, r2
 8006bea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bfa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8006bfe:	e7e1      	b.n	8006bc4 <USB_ActivateEndpoint+0x35c>

08006c00 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006c00:	7b0b      	ldrb	r3, [r1, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d146      	bne.n	8006c94 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8006c06:	784b      	ldrb	r3, [r1, #1]
 8006c08:	b313      	cbz	r3, 8006c50 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c0a:	780a      	ldrb	r2, [r1, #0]
 8006c0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c14:	d00c      	beq.n	8006c30 <USB_DeactivateEndpoint+0x30>
 8006c16:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c2c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c30:	780a      	ldrb	r2, [r1, #0]
 8006c32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c48:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c50:	780a      	ldrb	r2, [r1, #0]
 8006c52:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c56:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006c5a:	d00c      	beq.n	8006c76 <USB_DeactivateEndpoint+0x76>
 8006c5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c72:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c76:	780a      	ldrb	r2, [r1, #0]
 8006c78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006c92:	e7db      	b.n	8006c4c <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8006c94:	784b      	ldrb	r3, [r1, #1]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d14e      	bne.n	8006d38 <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c9a:	780a      	ldrb	r2, [r1, #0]
 8006c9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ca0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006ca4:	d00c      	beq.n	8006cc0 <USB_DeactivateEndpoint+0xc0>
 8006ca6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cbc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cc0:	780a      	ldrb	r2, [r1, #0]
 8006cc2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cc6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006cca:	d00c      	beq.n	8006ce6 <USB_DeactivateEndpoint+0xe6>
 8006ccc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ce2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8006ce6:	780a      	ldrb	r2, [r1, #0]
 8006ce8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cfe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d02:	780a      	ldrb	r2, [r1, #0]
 8006d04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d12:	f248 0c80 	movw	ip, #32896	; 0x8080
 8006d16:	ea43 030c 	orr.w	r3, r3, ip
 8006d1a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d1e:	780a      	ldrb	r2, [r1, #0]
 8006d20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d2e:	ea43 030c 	orr.w	r3, r3, ip
 8006d32:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006d36:	e789      	b.n	8006c4c <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d38:	780a      	ldrb	r2, [r1, #0]
 8006d3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d3e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006d42:	d00c      	beq.n	8006d5e <USB_DeactivateEndpoint+0x15e>
 8006d44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d5e:	780a      	ldrb	r2, [r1, #0]
 8006d60:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d64:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d68:	d00c      	beq.n	8006d84 <USB_DeactivateEndpoint+0x184>
 8006d6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d80:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8006d84:	780a      	ldrb	r2, [r1, #0]
 8006d86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d9c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006da0:	780a      	ldrb	r2, [r1, #0]
 8006da2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db0:	f248 0c80 	movw	ip, #32896	; 0x8080
 8006db4:	ea43 030c 	orr.w	r3, r3, ip
 8006db8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dbc:	780a      	ldrb	r2, [r1, #0]
 8006dbe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dcc:	ea43 030c 	orr.w	r3, r3, ip
 8006dd0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006dd4:	e73a      	b.n	8006c4c <USB_DeactivateEndpoint+0x4c>

08006dd6 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8006dd6:	784b      	ldrb	r3, [r1, #1]
 8006dd8:	b18b      	cbz	r3, 8006dfe <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006dda:	780a      	ldrb	r2, [r1, #0]
 8006ddc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dea:	f083 0310 	eor.w	r3, r3, #16
 8006dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006dfe:	780a      	ldrb	r2, [r1, #0]
 8006e00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006e1e:	e7ec      	b.n	8006dfa <USB_EPSetStall+0x24>

08006e20 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006e20:	7b0b      	ldrb	r3, [r1, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d14b      	bne.n	8006ebe <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8006e26:	784b      	ldrb	r3, [r1, #1]
 8006e28:	b333      	cbz	r3, 8006e78 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e2a:	780a      	ldrb	r2, [r1, #0]
 8006e2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e34:	d00c      	beq.n	8006e50 <USB_EPClearStall+0x30>
 8006e36:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006e50:	78cb      	ldrb	r3, [r1, #3]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d033      	beq.n	8006ebe <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e56:	780a      	ldrb	r2, [r1, #0]
 8006e58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e66:	f083 0320 	eor.w	r3, r3, #32
 8006e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e72:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006e76:	e022      	b.n	8006ebe <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e78:	780a      	ldrb	r2, [r1, #0]
 8006e7a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e7e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006e82:	d00c      	beq.n	8006e9e <USB_EPClearStall+0x7e>
 8006e84:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e9e:	780a      	ldrb	r2, [r1, #0]
 8006ea0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	4770      	bx	lr

08006ec2 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8006ec2:	b911      	cbnz	r1, 8006eca <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006ec4:	2380      	movs	r3, #128	; 0x80
 8006ec6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8006eca:	2000      	movs	r0, #0
 8006ecc:	4770      	bx	lr

08006ece <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006ece:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8006ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	4770      	bx	lr

08006ee4 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ee4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8006ee8:	b280      	uxth	r0, r0
 8006eea:	4770      	bx	lr

08006eec <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006eec:	3301      	adds	r3, #1
 8006eee:	085b      	lsrs	r3, r3, #1
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ef0:	4402      	add	r2, r0
 8006ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8006ef6:	e008      	b.n	8006f0a <USB_WritePMA+0x1e>
  {
    temp1 = *pBuf;
 8006ef8:	7808      	ldrb	r0, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006efa:	f891 c001 	ldrb.w	ip, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8006efe:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8006f02:	f822 0b02 	strh.w	r0, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006f06:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f4      	bne.n	8006ef8 <USB_WritePMA+0xc>
  }
}
 8006f0e:	4770      	bx	lr

08006f10 <USB_EPStartXfer>:
{
 8006f10:	b570      	push	{r4, r5, r6, lr}
 8006f12:	4605      	mov	r5, r0
 8006f14:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8006f16:	784a      	ldrb	r2, [r1, #1]
 8006f18:	2a01      	cmp	r2, #1
 8006f1a:	d032      	beq.n	8006f82 <USB_EPStartXfer+0x72>
    if (ep->doublebuffer == 0U)
 8006f1c:	7b0b      	ldrb	r3, [r1, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f040 8283 	bne.w	800742a <USB_EPStartXfer+0x51a>
      if (ep->xfer_len > ep->maxpacket)
 8006f24:	698b      	ldr	r3, [r1, #24]
 8006f26:	690a      	ldr	r2, [r1, #16]
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	f240 825d 	bls.w	80073e8 <USB_EPStartXfer+0x4d8>
        ep->xfer_len -= len;
 8006f2e:	1a9b      	subs	r3, r3, r2
 8006f30:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f32:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006f36:	fa15 f383 	uxtah	r3, r5, r3
 8006f3a:	7821      	ldrb	r1, [r4, #0]
 8006f3c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006f40:	2a3e      	cmp	r2, #62	; 0x3e
 8006f42:	f240 8255 	bls.w	80073f0 <USB_EPStartXfer+0x4e0>
 8006f46:	0951      	lsrs	r1, r2, #5
 8006f48:	f012 0f1f 	tst.w	r2, #31
 8006f4c:	d100      	bne.n	8006f50 <USB_EPStartXfer+0x40>
 8006f4e:	3901      	subs	r1, #1
 8006f50:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8006f54:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8006f58:	b289      	uxth	r1, r1
 8006f5a:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f5e:	7822      	ldrb	r2, [r4, #0]
 8006f60:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8006f7e:	2000      	movs	r0, #0
}
 8006f80:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8006f82:	698e      	ldr	r6, [r1, #24]
 8006f84:	6909      	ldr	r1, [r1, #16]
 8006f86:	428e      	cmp	r6, r1
 8006f88:	d900      	bls.n	8006f8c <USB_EPStartXfer+0x7c>
      len = ep->maxpacket;
 8006f8a:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 8006f8c:	7b23      	ldrb	r3, [r4, #12]
 8006f8e:	b32b      	cbz	r3, 8006fdc <USB_EPStartXfer+0xcc>
      if (ep->type == EP_TYPE_BULK)
 8006f90:	78e3      	ldrb	r3, [r4, #3]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d044      	beq.n	8007020 <USB_EPStartXfer+0x110>
        ep->xfer_len_db -= len;
 8006f96:	6a23      	ldr	r3, [r4, #32]
 8006f98:	1b9b      	subs	r3, r3, r6
 8006f9a:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f9c:	7823      	ldrb	r3, [r4, #0]
 8006f9e:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
 8006fa2:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006fa6:	f000 81dc 	beq.w	8007362 <USB_EPStartXfer+0x452>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006faa:	2a00      	cmp	r2, #0
 8006fac:	f040 81c9 	bne.w	8007342 <USB_EPStartXfer+0x432>
 8006fb0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006fb4:	fa15 f282 	uxtah	r2, r5, r2
 8006fb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006fbc:	2e3e      	cmp	r6, #62	; 0x3e
 8006fbe:	f240 81a3 	bls.w	8007308 <USB_EPStartXfer+0x3f8>
 8006fc2:	0972      	lsrs	r2, r6, #5
 8006fc4:	f016 0f1f 	tst.w	r6, #31
 8006fc8:	d100      	bne.n	8006fcc <USB_EPStartXfer+0xbc>
 8006fca:	3a01      	subs	r2, #1
 8006fcc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006fd0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006fd4:	b292      	uxth	r2, r2
 8006fd6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006fda:	e1bb      	b.n	8007354 <USB_EPStartXfer+0x444>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006fdc:	b2b6      	uxth	r6, r6
 8006fde:	4633      	mov	r3, r6
 8006fe0:	88e2      	ldrh	r2, [r4, #6]
 8006fe2:	6961      	ldr	r1, [r4, #20]
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f7ff ff81 	bl	8006eec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fea:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006fee:	fa15 f383 	uxtah	r3, r5, r3
 8006ff2:	7822      	ldrb	r2, [r4, #0]
 8006ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ff8:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006ffc:	7822      	ldrb	r2, [r4, #0]
 8006ffe:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800700c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8007010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007018:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800701c:	2000      	movs	r0, #0
 800701e:	e7af      	b.n	8006f80 <USB_EPStartXfer+0x70>
        if (ep->xfer_len_db > ep->maxpacket)
 8007020:	6a23      	ldr	r3, [r4, #32]
 8007022:	4299      	cmp	r1, r3
 8007024:	f080 8152 	bcs.w	80072cc <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007028:	7822      	ldrb	r2, [r4, #0]
 800702a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800702e:	b29b      	uxth	r3, r3
 8007030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007038:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800703c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007040:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8007044:	6a23      	ldr	r3, [r4, #32]
 8007046:	1b9b      	subs	r3, r3, r6
 8007048:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800704a:	7823      	ldrb	r3, [r4, #0]
 800704c:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8007050:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007054:	f000 809d 	beq.w	8007192 <USB_EPStartXfer+0x282>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007058:	7862      	ldrb	r2, [r4, #1]
 800705a:	bb8a      	cbnz	r2, 80070c0 <USB_EPStartXfer+0x1b0>
 800705c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007060:	fa15 f282 	uxtah	r2, r5, r2
 8007064:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007068:	2e3e      	cmp	r6, #62	; 0x3e
 800706a:	d90c      	bls.n	8007086 <USB_EPStartXfer+0x176>
 800706c:	0972      	lsrs	r2, r6, #5
 800706e:	f016 0f1f 	tst.w	r6, #31
 8007072:	d100      	bne.n	8007076 <USB_EPStartXfer+0x166>
 8007074:	3a01      	subs	r2, #1
 8007076:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800707a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800707e:	b292      	uxth	r2, r2
 8007080:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007084:	e01e      	b.n	80070c4 <USB_EPStartXfer+0x1b4>
 8007086:	b98e      	cbnz	r6, 80070ac <USB_EPStartXfer+0x19c>
 8007088:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800708c:	b292      	uxth	r2, r2
 800708e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007092:	b292      	uxth	r2, r2
 8007094:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007098:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800709c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80070a0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80070a4:	b292      	uxth	r2, r2
 80070a6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80070aa:	e00b      	b.n	80070c4 <USB_EPStartXfer+0x1b4>
 80070ac:	0872      	lsrs	r2, r6, #1
 80070ae:	f016 0f01 	tst.w	r6, #1
 80070b2:	d000      	beq.n	80070b6 <USB_EPStartXfer+0x1a6>
 80070b4:	3201      	adds	r2, #1
 80070b6:	0292      	lsls	r2, r2, #10
 80070b8:	b292      	uxth	r2, r2
 80070ba:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80070be:	e001      	b.n	80070c4 <USB_EPStartXfer+0x1b4>
 80070c0:	2a01      	cmp	r2, #1
 80070c2:	d027      	beq.n	8007114 <USB_EPStartXfer+0x204>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070c4:	b2b3      	uxth	r3, r6
 80070c6:	8962      	ldrh	r2, [r4, #10]
 80070c8:	6961      	ldr	r1, [r4, #20]
 80070ca:	4628      	mov	r0, r5
 80070cc:	f7ff ff0e 	bl	8006eec <USB_WritePMA>
            ep->xfer_buff += len;
 80070d0:	6963      	ldr	r3, [r4, #20]
 80070d2:	4433      	add	r3, r6
 80070d4:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80070d6:	6a23      	ldr	r3, [r4, #32]
 80070d8:	6922      	ldr	r2, [r4, #16]
 80070da:	4293      	cmp	r3, r2
 80070dc:	d924      	bls.n	8007128 <USB_EPStartXfer+0x218>
              ep->xfer_len_db -= len;
 80070de:	1b9b      	subs	r3, r3, r6
 80070e0:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070e2:	7863      	ldrb	r3, [r4, #1]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d140      	bne.n	800716a <USB_EPStartXfer+0x25a>
 80070e8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80070ec:	fa15 f383 	uxtah	r3, r5, r3
 80070f0:	7822      	ldrb	r2, [r4, #0]
 80070f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070f6:	2e3e      	cmp	r6, #62	; 0x3e
 80070f8:	d91a      	bls.n	8007130 <USB_EPStartXfer+0x220>
 80070fa:	0972      	lsrs	r2, r6, #5
 80070fc:	f016 0f1f 	tst.w	r6, #31
 8007100:	d100      	bne.n	8007104 <USB_EPStartXfer+0x1f4>
 8007102:	3a01      	subs	r2, #1
 8007104:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007108:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800710c:	b292      	uxth	r2, r2
 800710e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007112:	e02c      	b.n	800716e <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007114:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007118:	fa15 f282 	uxtah	r2, r5, r2
 800711c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007120:	b2b2      	uxth	r2, r6
 8007122:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007126:	e7cd      	b.n	80070c4 <USB_EPStartXfer+0x1b4>
              ep->xfer_len_db = 0U;
 8007128:	2200      	movs	r2, #0
 800712a:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800712c:	461e      	mov	r6, r3
 800712e:	e7d8      	b.n	80070e2 <USB_EPStartXfer+0x1d2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007130:	b98e      	cbnz	r6, 8007156 <USB_EPStartXfer+0x246>
 8007132:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007136:	b292      	uxth	r2, r2
 8007138:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800713c:	b292      	uxth	r2, r2
 800713e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007142:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007146:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800714a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800714e:	b292      	uxth	r2, r2
 8007150:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007154:	e00b      	b.n	800716e <USB_EPStartXfer+0x25e>
 8007156:	0872      	lsrs	r2, r6, #1
 8007158:	f016 0f01 	tst.w	r6, #1
 800715c:	d000      	beq.n	8007160 <USB_EPStartXfer+0x250>
 800715e:	3201      	adds	r2, #1
 8007160:	0292      	lsls	r2, r2, #10
 8007162:	b292      	uxth	r2, r2
 8007164:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007168:	e001      	b.n	800716e <USB_EPStartXfer+0x25e>
 800716a:	2b01      	cmp	r3, #1
 800716c:	d006      	beq.n	800717c <USB_EPStartXfer+0x26c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800716e:	b2b3      	uxth	r3, r6
 8007170:	8922      	ldrh	r2, [r4, #8]
 8007172:	6961      	ldr	r1, [r4, #20]
 8007174:	4628      	mov	r0, r5
 8007176:	f7ff feb9 	bl	8006eec <USB_WritePMA>
 800717a:	e73f      	b.n	8006ffc <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800717c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007180:	fa15 f383 	uxtah	r3, r5, r3
 8007184:	7822      	ldrb	r2, [r4, #0]
 8007186:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800718a:	b2b2      	uxth	r2, r6
 800718c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007190:	e7ed      	b.n	800716e <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007192:	7862      	ldrb	r2, [r4, #1]
 8007194:	bb8a      	cbnz	r2, 80071fa <USB_EPStartXfer+0x2ea>
 8007196:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800719a:	fa15 f282 	uxtah	r2, r5, r2
 800719e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071a2:	2e3e      	cmp	r6, #62	; 0x3e
 80071a4:	d90c      	bls.n	80071c0 <USB_EPStartXfer+0x2b0>
 80071a6:	0972      	lsrs	r2, r6, #5
 80071a8:	f016 0f1f 	tst.w	r6, #31
 80071ac:	d100      	bne.n	80071b0 <USB_EPStartXfer+0x2a0>
 80071ae:	3a01      	subs	r2, #1
 80071b0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80071b4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80071b8:	b292      	uxth	r2, r2
 80071ba:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80071be:	e01e      	b.n	80071fe <USB_EPStartXfer+0x2ee>
 80071c0:	b98e      	cbnz	r6, 80071e6 <USB_EPStartXfer+0x2d6>
 80071c2:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80071c6:	b292      	uxth	r2, r2
 80071c8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80071cc:	b292      	uxth	r2, r2
 80071ce:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80071d2:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80071d6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80071da:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80071de:	b292      	uxth	r2, r2
 80071e0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80071e4:	e00b      	b.n	80071fe <USB_EPStartXfer+0x2ee>
 80071e6:	0872      	lsrs	r2, r6, #1
 80071e8:	f016 0f01 	tst.w	r6, #1
 80071ec:	d000      	beq.n	80071f0 <USB_EPStartXfer+0x2e0>
 80071ee:	3201      	adds	r2, #1
 80071f0:	0292      	lsls	r2, r2, #10
 80071f2:	b292      	uxth	r2, r2
 80071f4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80071f8:	e001      	b.n	80071fe <USB_EPStartXfer+0x2ee>
 80071fa:	2a01      	cmp	r2, #1
 80071fc:	d027      	beq.n	800724e <USB_EPStartXfer+0x33e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071fe:	b2b3      	uxth	r3, r6
 8007200:	8922      	ldrh	r2, [r4, #8]
 8007202:	6961      	ldr	r1, [r4, #20]
 8007204:	4628      	mov	r0, r5
 8007206:	f7ff fe71 	bl	8006eec <USB_WritePMA>
            ep->xfer_buff += len;
 800720a:	6963      	ldr	r3, [r4, #20]
 800720c:	4433      	add	r3, r6
 800720e:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007210:	6a23      	ldr	r3, [r4, #32]
 8007212:	6922      	ldr	r2, [r4, #16]
 8007214:	4293      	cmp	r3, r2
 8007216:	d924      	bls.n	8007262 <USB_EPStartXfer+0x352>
              ep->xfer_len_db -= len;
 8007218:	1b9b      	subs	r3, r3, r6
 800721a:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800721c:	7863      	ldrb	r3, [r4, #1]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d140      	bne.n	80072a4 <USB_EPStartXfer+0x394>
 8007222:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007226:	fa15 f383 	uxtah	r3, r5, r3
 800722a:	7822      	ldrb	r2, [r4, #0]
 800722c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007230:	2e3e      	cmp	r6, #62	; 0x3e
 8007232:	d91a      	bls.n	800726a <USB_EPStartXfer+0x35a>
 8007234:	0972      	lsrs	r2, r6, #5
 8007236:	f016 0f1f 	tst.w	r6, #31
 800723a:	d100      	bne.n	800723e <USB_EPStartXfer+0x32e>
 800723c:	3a01      	subs	r2, #1
 800723e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007242:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007246:	b292      	uxth	r2, r2
 8007248:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800724c:	e02c      	b.n	80072a8 <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800724e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007252:	fa15 f282 	uxtah	r2, r5, r2
 8007256:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800725a:	b2b2      	uxth	r2, r6
 800725c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007260:	e7cd      	b.n	80071fe <USB_EPStartXfer+0x2ee>
              ep->xfer_len_db = 0U;
 8007262:	2200      	movs	r2, #0
 8007264:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8007266:	461e      	mov	r6, r3
 8007268:	e7d8      	b.n	800721c <USB_EPStartXfer+0x30c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800726a:	b98e      	cbnz	r6, 8007290 <USB_EPStartXfer+0x380>
 800726c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007270:	b292      	uxth	r2, r2
 8007272:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007276:	b292      	uxth	r2, r2
 8007278:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800727c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007280:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007284:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007288:	b292      	uxth	r2, r2
 800728a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800728e:	e00b      	b.n	80072a8 <USB_EPStartXfer+0x398>
 8007290:	0872      	lsrs	r2, r6, #1
 8007292:	f016 0f01 	tst.w	r6, #1
 8007296:	d000      	beq.n	800729a <USB_EPStartXfer+0x38a>
 8007298:	3201      	adds	r2, #1
 800729a:	0292      	lsls	r2, r2, #10
 800729c:	b292      	uxth	r2, r2
 800729e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80072a2:	e001      	b.n	80072a8 <USB_EPStartXfer+0x398>
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d006      	beq.n	80072b6 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072a8:	b2b3      	uxth	r3, r6
 80072aa:	8962      	ldrh	r2, [r4, #10]
 80072ac:	6961      	ldr	r1, [r4, #20]
 80072ae:	4628      	mov	r0, r5
 80072b0:	f7ff fe1c 	bl	8006eec <USB_WritePMA>
 80072b4:	e6a2      	b.n	8006ffc <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072b6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80072ba:	fa15 f383 	uxtah	r3, r5, r3
 80072be:	7822      	ldrb	r2, [r4, #0]
 80072c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072c4:	b2b2      	uxth	r2, r6
 80072c6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80072ca:	e7ed      	b.n	80072a8 <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80072cc:	7821      	ldrb	r1, [r4, #0]
 80072ce:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 80072d2:	b292      	uxth	r2, r2
 80072d4:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80072d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80072dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072e4:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80072e8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80072ec:	fa15 f282 	uxtah	r2, r5, r2
 80072f0:	7821      	ldrb	r1, [r4, #0]
 80072f2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072fc:	8922      	ldrh	r2, [r4, #8]
 80072fe:	6961      	ldr	r1, [r4, #20]
 8007300:	4628      	mov	r0, r5
 8007302:	f7ff fdf3 	bl	8006eec <USB_WritePMA>
 8007306:	e679      	b.n	8006ffc <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007308:	b98e      	cbnz	r6, 800732e <USB_EPStartXfer+0x41e>
 800730a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800730e:	b292      	uxth	r2, r2
 8007310:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007314:	b292      	uxth	r2, r2
 8007316:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800731a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800731e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007322:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007326:	b292      	uxth	r2, r2
 8007328:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800732c:	e012      	b.n	8007354 <USB_EPStartXfer+0x444>
 800732e:	0872      	lsrs	r2, r6, #1
 8007330:	f016 0f01 	tst.w	r6, #1
 8007334:	d000      	beq.n	8007338 <USB_EPStartXfer+0x428>
 8007336:	3201      	adds	r2, #1
 8007338:	0292      	lsls	r2, r2, #10
 800733a:	b292      	uxth	r2, r2
 800733c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007340:	e008      	b.n	8007354 <USB_EPStartXfer+0x444>
 8007342:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007346:	fa15 f282 	uxtah	r2, r5, r2
 800734a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800734e:	b2b2      	uxth	r2, r6
 8007350:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007354:	b2b3      	uxth	r3, r6
 8007356:	8962      	ldrh	r2, [r4, #10]
 8007358:	6961      	ldr	r1, [r4, #20]
 800735a:	4628      	mov	r0, r5
 800735c:	f7ff fdc6 	bl	8006eec <USB_WritePMA>
 8007360:	e64c      	b.n	8006ffc <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007362:	bb8a      	cbnz	r2, 80073c8 <USB_EPStartXfer+0x4b8>
 8007364:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007368:	fa15 f282 	uxtah	r2, r5, r2
 800736c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007370:	2e3e      	cmp	r6, #62	; 0x3e
 8007372:	d90c      	bls.n	800738e <USB_EPStartXfer+0x47e>
 8007374:	0972      	lsrs	r2, r6, #5
 8007376:	f016 0f1f 	tst.w	r6, #31
 800737a:	d100      	bne.n	800737e <USB_EPStartXfer+0x46e>
 800737c:	3a01      	subs	r2, #1
 800737e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007382:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007386:	b292      	uxth	r2, r2
 8007388:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800738c:	e025      	b.n	80073da <USB_EPStartXfer+0x4ca>
 800738e:	b98e      	cbnz	r6, 80073b4 <USB_EPStartXfer+0x4a4>
 8007390:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007394:	b292      	uxth	r2, r2
 8007396:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800739a:	b292      	uxth	r2, r2
 800739c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80073a0:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80073a4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80073a8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80073ac:	b292      	uxth	r2, r2
 80073ae:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80073b2:	e012      	b.n	80073da <USB_EPStartXfer+0x4ca>
 80073b4:	0872      	lsrs	r2, r6, #1
 80073b6:	f016 0f01 	tst.w	r6, #1
 80073ba:	d000      	beq.n	80073be <USB_EPStartXfer+0x4ae>
 80073bc:	3201      	adds	r2, #1
 80073be:	0292      	lsls	r2, r2, #10
 80073c0:	b292      	uxth	r2, r2
 80073c2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80073c6:	e008      	b.n	80073da <USB_EPStartXfer+0x4ca>
 80073c8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80073cc:	fa15 f282 	uxtah	r2, r5, r2
 80073d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80073d4:	b2b2      	uxth	r2, r6
 80073d6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073da:	b2b3      	uxth	r3, r6
 80073dc:	8922      	ldrh	r2, [r4, #8]
 80073de:	6961      	ldr	r1, [r4, #20]
 80073e0:	4628      	mov	r0, r5
 80073e2:	f7ff fd83 	bl	8006eec <USB_WritePMA>
 80073e6:	e609      	b.n	8006ffc <USB_EPStartXfer+0xec>
        ep->xfer_len = 0U;
 80073e8:	2200      	movs	r2, #0
 80073ea:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 80073ec:	461a      	mov	r2, r3
 80073ee:	e5a0      	b.n	8006f32 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80073f0:	b98a      	cbnz	r2, 8007416 <USB_EPStartXfer+0x506>
 80073f2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80073f6:	b292      	uxth	r2, r2
 80073f8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80073fc:	b292      	uxth	r2, r2
 80073fe:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007402:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007406:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800740a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800740e:	b292      	uxth	r2, r2
 8007410:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007414:	e5a3      	b.n	8006f5e <USB_EPStartXfer+0x4e>
 8007416:	0851      	lsrs	r1, r2, #1
 8007418:	f012 0f01 	tst.w	r2, #1
 800741c:	d000      	beq.n	8007420 <USB_EPStartXfer+0x510>
 800741e:	3101      	adds	r1, #1
 8007420:	0289      	lsls	r1, r1, #10
 8007422:	b289      	uxth	r1, r1
 8007424:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8007428:	e599      	b.n	8006f5e <USB_EPStartXfer+0x4e>
      if (ep->type == EP_TYPE_BULK)
 800742a:	78cb      	ldrb	r3, [r1, #3]
 800742c:	2b02      	cmp	r3, #2
 800742e:	d03b      	beq.n	80074a8 <USB_EPStartXfer+0x598>
      else if (ep->type == EP_TYPE_ISOC)
 8007430:	2b01      	cmp	r3, #1
 8007432:	f040 811b 	bne.w	800766c <USB_EPStartXfer+0x75c>
        if (ep->xfer_len > ep->maxpacket)
 8007436:	6989      	ldr	r1, [r1, #24]
 8007438:	6923      	ldr	r3, [r4, #16]
 800743a:	4299      	cmp	r1, r3
 800743c:	f240 80ca 	bls.w	80075d4 <USB_EPStartXfer+0x6c4>
          ep->xfer_len -= len;
 8007440:	1ac9      	subs	r1, r1, r3
 8007442:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007444:	b9aa      	cbnz	r2, 8007472 <USB_EPStartXfer+0x562>
 8007446:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800744a:	fa15 f282 	uxtah	r2, r5, r2
 800744e:	7821      	ldrb	r1, [r4, #0]
 8007450:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007454:	2b3e      	cmp	r3, #62	; 0x3e
 8007456:	f240 80c1 	bls.w	80075dc <USB_EPStartXfer+0x6cc>
 800745a:	0959      	lsrs	r1, r3, #5
 800745c:	f013 0f1f 	tst.w	r3, #31
 8007460:	d100      	bne.n	8007464 <USB_EPStartXfer+0x554>
 8007462:	3901      	subs	r1, #1
 8007464:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8007468:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800746c:	b289      	uxth	r1, r1
 800746e:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007472:	7862      	ldrb	r2, [r4, #1]
 8007474:	2a00      	cmp	r2, #0
 8007476:	f040 80eb 	bne.w	8007650 <USB_EPStartXfer+0x740>
 800747a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800747e:	fa15 f282 	uxtah	r2, r5, r2
 8007482:	7821      	ldrb	r1, [r4, #0]
 8007484:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007488:	2b3e      	cmp	r3, #62	; 0x3e
 800748a:	f240 80c4 	bls.w	8007616 <USB_EPStartXfer+0x706>
 800748e:	0959      	lsrs	r1, r3, #5
 8007490:	f013 0f1f 	tst.w	r3, #31
 8007494:	d100      	bne.n	8007498 <USB_EPStartXfer+0x588>
 8007496:	3901      	subs	r1, #1
 8007498:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 800749c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80074a6:	e55a      	b.n	8006f5e <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80074a8:	b9aa      	cbnz	r2, 80074d6 <USB_EPStartXfer+0x5c6>
 80074aa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80074ae:	fa10 f383 	uxtah	r3, r0, r3
 80074b2:	780a      	ldrb	r2, [r1, #0]
 80074b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074b8:	6909      	ldr	r1, [r1, #16]
 80074ba:	293e      	cmp	r1, #62	; 0x3e
 80074bc:	d925      	bls.n	800750a <USB_EPStartXfer+0x5fa>
 80074be:	094a      	lsrs	r2, r1, #5
 80074c0:	f011 0f1f 	tst.w	r1, #31
 80074c4:	d100      	bne.n	80074c8 <USB_EPStartXfer+0x5b8>
 80074c6:	3a01      	subs	r2, #1
 80074c8:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80074cc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80074d0:	b292      	uxth	r2, r2
 80074d2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80074d6:	7863      	ldrb	r3, [r4, #1]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d150      	bne.n	800757e <USB_EPStartXfer+0x66e>
 80074dc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80074e0:	fa15 f383 	uxtah	r3, r5, r3
 80074e4:	7822      	ldrb	r2, [r4, #0]
 80074e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074ea:	6921      	ldr	r1, [r4, #16]
 80074ec:	293e      	cmp	r1, #62	; 0x3e
 80074ee:	d929      	bls.n	8007544 <USB_EPStartXfer+0x634>
 80074f0:	094a      	lsrs	r2, r1, #5
 80074f2:	f011 0f1f 	tst.w	r1, #31
 80074f6:	d100      	bne.n	80074fa <USB_EPStartXfer+0x5ea>
 80074f8:	3a01      	subs	r2, #1
 80074fa:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80074fe:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007502:	b292      	uxth	r2, r2
 8007504:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007508:	e03b      	b.n	8007582 <USB_EPStartXfer+0x672>
 800750a:	b989      	cbnz	r1, 8007530 <USB_EPStartXfer+0x620>
 800750c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007510:	b292      	uxth	r2, r2
 8007512:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007516:	b292      	uxth	r2, r2
 8007518:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800751c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007520:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007524:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007528:	b292      	uxth	r2, r2
 800752a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800752e:	e7d2      	b.n	80074d6 <USB_EPStartXfer+0x5c6>
 8007530:	084a      	lsrs	r2, r1, #1
 8007532:	f011 0f01 	tst.w	r1, #1
 8007536:	d000      	beq.n	800753a <USB_EPStartXfer+0x62a>
 8007538:	3201      	adds	r2, #1
 800753a:	0292      	lsls	r2, r2, #10
 800753c:	b292      	uxth	r2, r2
 800753e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007542:	e7c8      	b.n	80074d6 <USB_EPStartXfer+0x5c6>
 8007544:	b989      	cbnz	r1, 800756a <USB_EPStartXfer+0x65a>
 8007546:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800754a:	b292      	uxth	r2, r2
 800754c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007550:	b292      	uxth	r2, r2
 8007552:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007556:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800755a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800755e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007562:	b292      	uxth	r2, r2
 8007564:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007568:	e00b      	b.n	8007582 <USB_EPStartXfer+0x672>
 800756a:	084a      	lsrs	r2, r1, #1
 800756c:	f011 0f01 	tst.w	r1, #1
 8007570:	d000      	beq.n	8007574 <USB_EPStartXfer+0x664>
 8007572:	3201      	adds	r2, #1
 8007574:	0292      	lsls	r2, r2, #10
 8007576:	b292      	uxth	r2, r2
 8007578:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800757c:	e001      	b.n	8007582 <USB_EPStartXfer+0x672>
 800757e:	2b01      	cmp	r3, #1
 8007580:	d01d      	beq.n	80075be <USB_EPStartXfer+0x6ae>
        if (ep->xfer_count != 0U)
 8007582:	69e3      	ldr	r3, [r4, #28]
 8007584:	2b00      	cmp	r3, #0
 8007586:	f43f acea 	beq.w	8006f5e <USB_EPStartXfer+0x4e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800758a:	7822      	ldrb	r2, [r4, #0]
 800758c:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007590:	f244 0340 	movw	r3, #16448	; 0x4040
 8007594:	ea03 0001 	and.w	r0, r3, r1
 8007598:	438b      	bics	r3, r1
 800759a:	d002      	beq.n	80075a2 <USB_EPStartXfer+0x692>
 800759c:	2800      	cmp	r0, #0
 800759e:	f47f acde 	bne.w	8006f5e <USB_EPStartXfer+0x4e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80075a2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075b8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80075bc:	e4cf      	b.n	8006f5e <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80075be:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80075c2:	fa15 f383 	uxtah	r3, r5, r3
 80075c6:	7822      	ldrb	r2, [r4, #0]
 80075c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075cc:	8a22      	ldrh	r2, [r4, #16]
 80075ce:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80075d2:	e7d6      	b.n	8007582 <USB_EPStartXfer+0x672>
          ep->xfer_len = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 80075d8:	460b      	mov	r3, r1
 80075da:	e733      	b.n	8007444 <USB_EPStartXfer+0x534>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80075dc:	b98b      	cbnz	r3, 8007602 <USB_EPStartXfer+0x6f2>
 80075de:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80075e2:	b289      	uxth	r1, r1
 80075e4:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80075e8:	b289      	uxth	r1, r1
 80075ea:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80075ee:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80075f2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80075f6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80075fa:	b289      	uxth	r1, r1
 80075fc:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007600:	e737      	b.n	8007472 <USB_EPStartXfer+0x562>
 8007602:	0859      	lsrs	r1, r3, #1
 8007604:	f013 0f01 	tst.w	r3, #1
 8007608:	d000      	beq.n	800760c <USB_EPStartXfer+0x6fc>
 800760a:	3101      	adds	r1, #1
 800760c:	0289      	lsls	r1, r1, #10
 800760e:	b289      	uxth	r1, r1
 8007610:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007614:	e72d      	b.n	8007472 <USB_EPStartXfer+0x562>
 8007616:	b98b      	cbnz	r3, 800763c <USB_EPStartXfer+0x72c>
 8007618:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 800761c:	b29b      	uxth	r3, r3
 800761e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007622:	b29b      	uxth	r3, r3
 8007624:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8007628:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 800762c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007634:	b29b      	uxth	r3, r3
 8007636:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800763a:	e490      	b.n	8006f5e <USB_EPStartXfer+0x4e>
 800763c:	0859      	lsrs	r1, r3, #1
 800763e:	f013 0f01 	tst.w	r3, #1
 8007642:	d000      	beq.n	8007646 <USB_EPStartXfer+0x736>
 8007644:	3101      	adds	r1, #1
 8007646:	028b      	lsls	r3, r1, #10
 8007648:	b29b      	uxth	r3, r3
 800764a:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800764e:	e486      	b.n	8006f5e <USB_EPStartXfer+0x4e>
 8007650:	2a01      	cmp	r2, #1
 8007652:	f47f ac84 	bne.w	8006f5e <USB_EPStartXfer+0x4e>
 8007656:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800765a:	fa15 f282 	uxtah	r2, r5, r2
 800765e:	7821      	ldrb	r1, [r4, #0]
 8007660:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007664:	b29b      	uxth	r3, r3
 8007666:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800766a:	e478      	b.n	8006f5e <USB_EPStartXfer+0x4e>
        return HAL_ERROR;
 800766c:	2001      	movs	r0, #1
 800766e:	e487      	b.n	8006f80 <USB_EPStartXfer+0x70>

08007670 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007670:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007672:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007674:	4402      	add	r2, r0
 8007676:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800767a:	e007      	b.n	800768c <USB_ReadPMA+0x1c>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800767c:	f832 0b02 	ldrh.w	r0, [r2], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007680:	7008      	strb	r0, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007682:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007686:	7048      	strb	r0, [r1, #1]
    pBuf++;
 8007688:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800768a:	3c01      	subs	r4, #1
 800768c:	2c00      	cmp	r4, #0
 800768e:	d1f5      	bne.n	800767c <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007690:	f013 0f01 	tst.w	r3, #1
 8007694:	d001      	beq.n	800769a <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 8007696:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007698:	700b      	strb	r3, [r1, #0]
  }
}
 800769a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076a0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076a2:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80076a6:	b184      	cbz	r4, 80076ca <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076a8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80076ac:	b17b      	cbz	r3, 80076ce <USBD_CDC_EP0_RxReady+0x2e>
 80076ae:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80076b2:	28ff      	cmp	r0, #255	; 0xff
 80076b4:	d00d      	beq.n	80076d2 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80076bc:	4621      	mov	r1, r4
 80076be:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80076c0:	23ff      	movs	r3, #255	; 0xff
 80076c2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80076c6:	2000      	movs	r0, #0
}
 80076c8:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80076ca:	2003      	movs	r0, #3
 80076cc:	e7fc      	b.n	80076c8 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 80076ce:	2000      	movs	r0, #0
 80076d0:	e7fa      	b.n	80076c8 <USBD_CDC_EP0_RxReady+0x28>
 80076d2:	2000      	movs	r0, #0
 80076d4:	e7f8      	b.n	80076c8 <USBD_CDC_EP0_RxReady+0x28>
	...

080076d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80076d8:	2343      	movs	r3, #67	; 0x43
 80076da:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 80076dc:	4800      	ldr	r0, [pc, #0]	; (80076e0 <USBD_CDC_GetFSCfgDesc+0x8>)
 80076de:	4770      	bx	lr
 80076e0:	20000044 	.word	0x20000044

080076e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80076e4:	2343      	movs	r3, #67	; 0x43
 80076e6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 80076e8:	4800      	ldr	r0, [pc, #0]	; (80076ec <USBD_CDC_GetHSCfgDesc+0x8>)
 80076ea:	4770      	bx	lr
 80076ec:	20000088 	.word	0x20000088

080076f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80076f0:	2343      	movs	r3, #67	; 0x43
 80076f2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80076f4:	4800      	ldr	r0, [pc, #0]	; (80076f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80076f6:	4770      	bx	lr
 80076f8:	200000d8 	.word	0x200000d8

080076fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80076fc:	230a      	movs	r3, #10
 80076fe:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8007700:	4800      	ldr	r0, [pc, #0]	; (8007704 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8007702:	4770      	bx	lr
 8007704:	200000cc 	.word	0x200000cc

08007708 <USBD_CDC_DataOut>:
{
 8007708:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800770a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800770e:	b175      	cbz	r5, 800772e <USBD_CDC_DataOut+0x26>
 8007710:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007712:	f00a f885 	bl	8011820 <USBD_LL_GetRxDataSize>
 8007716:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800771a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8007724:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8007728:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800772a:	2000      	movs	r0, #0
}
 800772c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800772e:	2003      	movs	r0, #3
 8007730:	e7fc      	b.n	800772c <USBD_CDC_DataOut+0x24>

08007732 <USBD_CDC_DataIn>:
{
 8007732:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007734:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8007738:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800773c:	b353      	cbz	r3, 8007794 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800773e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8007742:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007746:	6992      	ldr	r2, [r2, #24]
 8007748:	b14a      	cbz	r2, 800775e <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800774a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800774e:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8007752:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007754:	fbb2 fcf4 	udiv	ip, r2, r4
 8007758:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800775c:	b172      	cbz	r2, 800777c <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 800775e:	2200      	movs	r2, #0
 8007760:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007764:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8007768:	6914      	ldr	r4, [r2, #16]
 800776a:	b1ac      	cbz	r4, 8007798 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800776c:	460a      	mov	r2, r1
 800776e:	f503 7104 	add.w	r1, r3, #528	; 0x210
 8007772:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8007776:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 8007778:	2000      	movs	r0, #0
}
 800777a:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800777c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8007780:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007784:	2400      	movs	r4, #0
 8007786:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007788:	4623      	mov	r3, r4
 800778a:	4622      	mov	r2, r4
 800778c:	f00a f838 	bl	8011800 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8007790:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007792:	e7f2      	b.n	800777a <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 8007794:	2003      	movs	r0, #3
 8007796:	e7f0      	b.n	800777a <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 8007798:	2000      	movs	r0, #0
 800779a:	e7ee      	b.n	800777a <USBD_CDC_DataIn+0x48>

0800779c <USBD_CDC_Setup>:
{
 800779c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800779e:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077a0:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80077aa:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 80077ae:	2e00      	cmp	r6, #0
 80077b0:	d06c      	beq.n	800788c <USBD_CDC_Setup+0xf0>
 80077b2:	4607      	mov	r7, r0
 80077b4:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077b6:	780b      	ldrb	r3, [r1, #0]
 80077b8:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 80077bc:	d02a      	beq.n	8007814 <USBD_CDC_Setup+0x78>
 80077be:	2d20      	cmp	r5, #32
 80077c0:	d15e      	bne.n	8007880 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 80077c2:	88ca      	ldrh	r2, [r1, #6]
 80077c4:	b1f2      	cbz	r2, 8007804 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 80077c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80077ca:	d00f      	beq.n	80077ec <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077cc:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	4631      	mov	r1, r6
 80077d4:	7860      	ldrb	r0, [r4, #1]
 80077d6:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80077d8:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80077da:	2a07      	cmp	r2, #7
 80077dc:	bf28      	it	cs
 80077de:	2207      	movcs	r2, #7
 80077e0:	4631      	mov	r1, r6
 80077e2:	4638      	mov	r0, r7
 80077e4:	f000 fdee 	bl	80083c4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80077e8:	2500      	movs	r5, #0
 80077ea:	e04c      	b.n	8007886 <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 80077ec:	784b      	ldrb	r3, [r1, #1]
 80077ee:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80077f2:	798b      	ldrb	r3, [r1, #6]
 80077f4:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80077f8:	88ca      	ldrh	r2, [r1, #6]
 80077fa:	4631      	mov	r1, r6
 80077fc:	f000 fdf7 	bl	80083ee <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8007800:	2500      	movs	r5, #0
 8007802:	e040      	b.n	8007886 <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007804:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	7848      	ldrb	r0, [r1, #1]
 800780e:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8007810:	2500      	movs	r5, #0
 8007812:	e038      	b.n	8007886 <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 8007814:	784e      	ldrb	r6, [r1, #1]
 8007816:	2e0b      	cmp	r6, #11
 8007818:	d82e      	bhi.n	8007878 <USBD_CDC_Setup+0xdc>
 800781a:	e8df f006 	tbb	[pc, r6]
 800781e:	3406      	.short	0x3406
 8007820:	2d2d2d2d 	.word	0x2d2d2d2d
 8007824:	2d2d2d2d 	.word	0x2d2d2d2d
 8007828:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b03      	cmp	r3, #3
 8007832:	d003      	beq.n	800783c <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 8007834:	f000 fa8c 	bl	8007d50 <USBD_CtlError>
            ret = USBD_FAIL;
 8007838:	2503      	movs	r5, #3
 800783a:	e024      	b.n	8007886 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800783c:	2202      	movs	r2, #2
 800783e:	a901      	add	r1, sp, #4
 8007840:	f000 fdc0 	bl	80083c4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8007844:	4635      	mov	r5, r6
 8007846:	e01e      	b.n	8007886 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007848:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b03      	cmp	r3, #3
 8007850:	d003      	beq.n	800785a <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 8007852:	f000 fa7d 	bl	8007d50 <USBD_CtlError>
            ret = USBD_FAIL;
 8007856:	2503      	movs	r5, #3
 8007858:	e015      	b.n	8007886 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800785a:	2201      	movs	r2, #1
 800785c:	f10d 0107 	add.w	r1, sp, #7
 8007860:	f000 fdb0 	bl	80083c4 <USBD_CtlSendData>
 8007864:	e00f      	b.n	8007886 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007866:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b03      	cmp	r3, #3
 800786e:	d00a      	beq.n	8007886 <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 8007870:	f000 fa6e 	bl	8007d50 <USBD_CtlError>
            ret = USBD_FAIL;
 8007874:	2503      	movs	r5, #3
 8007876:	e006      	b.n	8007886 <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 8007878:	f000 fa6a 	bl	8007d50 <USBD_CtlError>
          ret = USBD_FAIL;
 800787c:	2503      	movs	r5, #3
          break;
 800787e:	e002      	b.n	8007886 <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 8007880:	f000 fa66 	bl	8007d50 <USBD_CtlError>
      ret = USBD_FAIL;
 8007884:	2503      	movs	r5, #3
}
 8007886:	4628      	mov	r0, r5
 8007888:	b003      	add	sp, #12
 800788a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800788c:	2503      	movs	r5, #3
 800788e:	e7fa      	b.n	8007886 <USBD_CDC_Setup+0xea>

08007890 <USBD_CDC_DeInit>:
{
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007894:	2181      	movs	r1, #129	; 0x81
 8007896:	f009 ff7c 	bl	8011792 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800789a:	2500      	movs	r5, #0
 800789c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800789e:	2101      	movs	r1, #1
 80078a0:	4620      	mov	r0, r4
 80078a2:	f009 ff76 	bl	8011792 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80078a6:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80078aa:	2182      	movs	r1, #130	; 0x82
 80078ac:	4620      	mov	r0, r4
 80078ae:	f009 ff70 	bl	8011792 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80078b2:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80078b6:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 80078ba:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80078be:	b14b      	cbz	r3, 80078d4 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80078c0:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80078c8:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 80078cc:	f009 ffd6 	bl	801187c <USBD_static_free>
    pdev->pClassData = NULL;
 80078d0:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 80078d4:	2000      	movs	r0, #0
 80078d6:	bd38      	pop	{r3, r4, r5, pc}

080078d8 <USBD_CDC_Init>:
{
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078e0:	f009 ffc8 	bl	8011874 <USBD_static_malloc>
  if (hcdc == NULL)
 80078e4:	b3b8      	cbz	r0, 8007956 <USBD_CDC_Init+0x7e>
 80078e6:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 80078e8:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ec:	7c23      	ldrb	r3, [r4, #16]
 80078ee:	bbbb      	cbnz	r3, 8007960 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078f4:	2202      	movs	r2, #2
 80078f6:	2181      	movs	r1, #129	; 0x81
 80078f8:	4620      	mov	r0, r4
 80078fa:	f009 ff3f 	bl	801177c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078fe:	2501      	movs	r5, #1
 8007900:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007906:	2202      	movs	r2, #2
 8007908:	4629      	mov	r1, r5
 800790a:	4620      	mov	r0, r4
 800790c:	f009 ff36 	bl	801177c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007910:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007914:	2310      	movs	r3, #16
 8007916:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800791a:	2308      	movs	r3, #8
 800791c:	2203      	movs	r2, #3
 800791e:	2182      	movs	r1, #130	; 0x82
 8007920:	4620      	mov	r0, r4
 8007922:	f009 ff2b 	bl	801177c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007926:	2301      	movs	r3, #1
 8007928:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800792c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4798      	blx	r3
  hcdc->TxState = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800793a:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800793e:	7c25      	ldrb	r5, [r4, #16]
 8007940:	bb15      	cbnz	r5, 8007988 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007946:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800794a:	2101      	movs	r1, #1
 800794c:	4620      	mov	r0, r4
 800794e:	f009 ff5f 	bl	8011810 <USBD_LL_PrepareReceive>
}
 8007952:	4628      	mov	r0, r5
 8007954:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8007956:	2300      	movs	r3, #0
 8007958:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800795c:	2502      	movs	r5, #2
 800795e:	e7f8      	b.n	8007952 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007960:	2340      	movs	r3, #64	; 0x40
 8007962:	2202      	movs	r2, #2
 8007964:	2181      	movs	r1, #129	; 0x81
 8007966:	4620      	mov	r0, r4
 8007968:	f009 ff08 	bl	801177c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800796c:	2501      	movs	r5, #1
 800796e:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007970:	2340      	movs	r3, #64	; 0x40
 8007972:	2202      	movs	r2, #2
 8007974:	4629      	mov	r1, r5
 8007976:	4620      	mov	r0, r4
 8007978:	f009 ff00 	bl	801177c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800797c:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007980:	2310      	movs	r3, #16
 8007982:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8007986:	e7c8      	b.n	800791a <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007988:	2340      	movs	r3, #64	; 0x40
 800798a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800798e:	2101      	movs	r1, #1
 8007990:	4620      	mov	r0, r4
 8007992:	f009 ff3d 	bl	8011810 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8007996:	2500      	movs	r5, #0
 8007998:	e7db      	b.n	8007952 <USBD_CDC_Init+0x7a>

0800799a <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800799a:	b119      	cbz	r1, 80079a4 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800799c:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80079a0:	2000      	movs	r0, #0
 80079a2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80079a4:	2003      	movs	r0, #3
}
 80079a6:	4770      	bx	lr

080079a8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079a8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80079ac:	b12b      	cbz	r3, 80079ba <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 80079ae:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80079b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80079b6:	2000      	movs	r0, #0
 80079b8:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80079ba:	2003      	movs	r0, #3
}
 80079bc:	4770      	bx	lr

080079be <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079be:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80079c2:	b11b      	cbz	r3, 80079cc <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 80079c4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80079c8:	2000      	movs	r0, #0
 80079ca:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80079cc:	2003      	movs	r0, #3
}
 80079ce:	4770      	bx	lr

080079d0 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079d0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 80079d4:	b1a2      	cbz	r2, 8007a00 <USBD_CDC_TransmitPacket+0x30>
{
 80079d6:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 80079d8:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80079dc:	b10b      	cbz	r3, 80079e2 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 80079de:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 80079e0:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 80079e2:	2301      	movs	r3, #1
 80079e4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80079e8:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80079ec:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80079ee:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80079f2:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80079f6:	2181      	movs	r1, #129	; 0x81
 80079f8:	f009 ff02 	bl	8011800 <USBD_LL_Transmit>
    ret = USBD_OK;
 80079fc:	2000      	movs	r0, #0
 80079fe:	e7ef      	b.n	80079e0 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 8007a00:	2003      	movs	r0, #3
}
 8007a02:	4770      	bx	lr

08007a04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a04:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a06:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8007a0a:	b192      	cbz	r2, 8007a32 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a0c:	7c04      	ldrb	r4, [r0, #16]
 8007a0e:	b944      	cbnz	r4, 8007a22 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a14:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8007a18:	2101      	movs	r1, #1
 8007a1a:	f009 fef9 	bl	8011810 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8007a1e:	4620      	mov	r0, r4
 8007a20:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a22:	2340      	movs	r3, #64	; 0x40
 8007a24:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8007a28:	2101      	movs	r1, #1
 8007a2a:	f009 fef1 	bl	8011810 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8007a2e:	2400      	movs	r4, #0
 8007a30:	e7f5      	b.n	8007a1e <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8007a32:	2403      	movs	r4, #3
 8007a34:	e7f3      	b.n	8007a1e <USBD_CDC_ReceivePacket+0x1a>

08007a36 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a36:	b198      	cbz	r0, 8007a60 <USBD_Init+0x2a>
{
 8007a38:	b508      	push	{r3, lr}
 8007a3a:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007a42:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007a46:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a4a:	b109      	cbz	r1, 8007a50 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8007a4c:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a50:	2101      	movs	r1, #1
 8007a52:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f009 fe43 	bl	80116e4 <USBD_LL_Init>

  return ret;
}
 8007a5e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007a60:	2003      	movs	r0, #3
}
 8007a62:	4770      	bx	lr

08007a64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a64:	b510      	push	{r4, lr}
 8007a66:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8007a6e:	b161      	cbz	r1, 8007a8a <USBD_RegisterClass+0x26>
 8007a70:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007a72:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007a76:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007a78:	b14b      	cbz	r3, 8007a8e <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007a7a:	f10d 0006 	add.w	r0, sp, #6
 8007a7e:	4798      	blx	r3
 8007a80:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007a84:	2000      	movs	r0, #0
}
 8007a86:	b002      	add	sp, #8
 8007a88:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8007a8a:	2003      	movs	r0, #3
 8007a8c:	e7fb      	b.n	8007a86 <USBD_RegisterClass+0x22>
  return USBD_OK;
 8007a8e:	2000      	movs	r0, #0
 8007a90:	e7f9      	b.n	8007a86 <USBD_RegisterClass+0x22>

08007a92 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a92:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a94:	f009 fe6a 	bl	801176c <USBD_LL_Start>
}
 8007a98:	bd08      	pop	{r3, pc}

08007a9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a9a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8007a9c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007aa0:	b113      	cbz	r3, 8007aa8 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4798      	blx	r3
  }

  return ret;
}
 8007aa6:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007aa8:	2003      	movs	r0, #3
 8007aaa:	e7fc      	b.n	8007aa6 <USBD_SetClassConfig+0xc>

08007aac <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aac:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007aae:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007ab2:	b10b      	cbz	r3, 8007ab8 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007ab8:	2000      	movs	r0, #0
 8007aba:	bd08      	pop	{r3, pc}

08007abc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ac0:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 f92f 	bl	8007d28 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ad0:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8007ad4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ad8:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8007adc:	f001 031f 	and.w	r3, r1, #31
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d00d      	beq.n	8007b00 <USBD_LL_SetupStage+0x44>
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d010      	beq.n	8007b0a <USBD_LL_SetupStage+0x4e>
 8007ae8:	b12b      	cbz	r3, 8007af6 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007aea:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007aee:	4620      	mov	r0, r4
 8007af0:	f009 fe57 	bl	80117a2 <USBD_LL_StallEP>
      break;
 8007af4:	e003      	b.n	8007afe <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007af6:	4629      	mov	r1, r5
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 fae4 	bl	80080c6 <USBD_StdDevReq>
  }

  return ret;
}
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b00:	4629      	mov	r1, r5
 8007b02:	4620      	mov	r0, r4
 8007b04:	f000 fb17 	bl	8008136 <USBD_StdItfReq>
      break;
 8007b08:	e7f9      	b.n	8007afe <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f000 fb46 	bl	800819e <USBD_StdEPReq>
      break;
 8007b12:	e7f4      	b.n	8007afe <USBD_LL_SetupStage+0x42>

08007b14 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b18:	460d      	mov	r5, r1
 8007b1a:	bb41      	cbnz	r1, 8007b6e <USBD_LL_DataOutStage+0x5a>
 8007b1c:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b1e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8007b22:	2a03      	cmp	r2, #3
 8007b24:	d001      	beq.n	8007b2a <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 8007b26:	4608      	mov	r0, r1
}
 8007b28:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8007b2a:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8007b2e:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8007b32:	4291      	cmp	r1, r2
 8007b34:	d809      	bhi.n	8007b4a <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b36:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d00f      	beq.n	8007b60 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 fc6b 	bl	800841c <USBD_CtlSendStatus>
  return USBD_OK;
 8007b46:	4628      	mov	r0, r5
 8007b48:	e7ee      	b.n	8007b28 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8007b4a:	1a89      	subs	r1, r1, r2
 8007b4c:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b50:	428a      	cmp	r2, r1
 8007b52:	bf28      	it	cs
 8007b54:	460a      	movcs	r2, r1
 8007b56:	4619      	mov	r1, r3
 8007b58:	f000 fc58 	bl	800840c <USBD_CtlContinueRx>
  return USBD_OK;
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	e7e3      	b.n	8007b28 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 8007b60:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0ea      	beq.n	8007b40 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 8007b6a:	4798      	blx	r3
 8007b6c:	e7e8      	b.n	8007b40 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d001      	beq.n	8007b7c <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 8007b78:	2000      	movs	r0, #0
 8007b7a:	e7d5      	b.n	8007b28 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 8007b7c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	b10b      	cbz	r3, 8007b88 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b84:	4798      	blx	r3
        if (ret != USBD_OK)
 8007b86:	e7cf      	b.n	8007b28 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8007b88:	2000      	movs	r0, #0
 8007b8a:	e7cd      	b.n	8007b28 <USBD_LL_DataOutStage+0x14>

08007b8c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b90:	460d      	mov	r5, r1
 8007b92:	2900      	cmp	r1, #0
 8007b94:	d14a      	bne.n	8007c2c <USBD_LL_DataInStage+0xa0>
 8007b96:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b98:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8007b9c:	2a02      	cmp	r2, #2
 8007b9e:	d005      	beq.n	8007bac <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007ba0:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d03c      	beq.n	8007c22 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 8007ba8:	4628      	mov	r0, r5
}
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8007bac:	69c2      	ldr	r2, [r0, #28]
 8007bae:	6a01      	ldr	r1, [r0, #32]
 8007bb0:	428a      	cmp	r2, r1
 8007bb2:	d80e      	bhi.n	8007bd2 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 8007bb4:	428a      	cmp	r2, r1
 8007bb6:	d018      	beq.n	8007bea <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb8:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d027      	beq.n	8007c12 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bc2:	2180      	movs	r1, #128	; 0x80
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f009 fdec 	bl	80117a2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 fc31 	bl	8008432 <USBD_CtlReceiveStatus>
 8007bd0:	e7e6      	b.n	8007ba0 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8007bd2:	1a52      	subs	r2, r2, r1
 8007bd4:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	f000 fc01 	bl	80083de <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bdc:	2300      	movs	r3, #0
 8007bde:	461a      	mov	r2, r3
 8007be0:	4619      	mov	r1, r3
 8007be2:	4620      	mov	r0, r4
 8007be4:	f009 fe14 	bl	8011810 <USBD_LL_PrepareReceive>
 8007be8:	e7da      	b.n	8007ba0 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8007bea:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bec:	4299      	cmp	r1, r3
 8007bee:	d8e3      	bhi.n	8007bb8 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8007bf0:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d2df      	bcs.n	8007bb8 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	f000 fbef 	bl	80083de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c00:	2100      	movs	r1, #0
 8007c02:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c06:	460b      	mov	r3, r1
 8007c08:	460a      	mov	r2, r1
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f009 fe00 	bl	8011810 <USBD_LL_PrepareReceive>
 8007c10:	e7c6      	b.n	8007ba0 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 8007c12:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d0d2      	beq.n	8007bc2 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	4798      	blx	r3
 8007c20:	e7cf      	b.n	8007bc2 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8007c28:	4628      	mov	r0, r5
 8007c2a:	e7be      	b.n	8007baa <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c2c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d001      	beq.n	8007c3a <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 8007c36:	2000      	movs	r0, #0
 8007c38:	e7b7      	b.n	8007baa <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 8007c3a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	b10b      	cbz	r3, 8007c46 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007c42:	4798      	blx	r3
        if (ret != USBD_OK)
 8007c44:	e7b1      	b.n	8007baa <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 8007c46:	2000      	movs	r0, #0
 8007c48:	e7af      	b.n	8007baa <USBD_LL_DataInStage+0x1e>

08007c4a <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c50:	2300      	movs	r3, #0
 8007c52:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c56:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c58:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007c5c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007c60:	b1f3      	cbz	r3, 8007ca0 <USBD_LL_Reset+0x56>
{
 8007c62:	b570      	push	{r4, r5, r6, lr}
 8007c64:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8007c66:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8007c6a:	b11a      	cbz	r2, 8007c74 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	b10b      	cbz	r3, 8007c74 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c70:	2100      	movs	r1, #0
 8007c72:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c74:	2340      	movs	r3, #64	; 0x40
 8007c76:	2200      	movs	r2, #0
 8007c78:	4611      	mov	r1, r2
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f009 fd7e 	bl	801177c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c80:	2601      	movs	r6, #1
 8007c82:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c86:	2540      	movs	r5, #64	; 0x40
 8007c88:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c8c:	462b      	mov	r3, r5
 8007c8e:	2200      	movs	r2, #0
 8007c90:	2180      	movs	r1, #128	; 0x80
 8007c92:	4620      	mov	r0, r4
 8007c94:	f009 fd72 	bl	801177c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c98:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c9a:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8007c9c:	2000      	movs	r0, #0
}
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8007ca0:	2003      	movs	r0, #3
}
 8007ca2:	4770      	bx	lr

08007ca4 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007ca4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	4770      	bx	lr

08007caa <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8007caa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8007cba:	2000      	movs	r0, #0
 8007cbc:	4770      	bx	lr

08007cbe <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007cbe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b04      	cmp	r3, #4
 8007cc6:	d001      	beq.n	8007ccc <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8007cc8:	2000      	movs	r0, #0
 8007cca:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8007ccc:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8007cd6:	e7f7      	b.n	8007cc8 <USBD_LL_Resume+0xa>

08007cd8 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8007cd8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8007cdc:	b162      	cbz	r2, 8007cf8 <USBD_LL_SOF+0x20>
{
 8007cde:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d001      	beq.n	8007cee <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8007cea:	2000      	movs	r0, #0
}
 8007cec:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8007cee:	69d3      	ldr	r3, [r2, #28]
 8007cf0:	b123      	cbz	r3, 8007cfc <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 8007cf2:	4798      	blx	r3
  return USBD_OK;
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	e7f9      	b.n	8007cec <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 8007cf8:	2003      	movs	r0, #3
}
 8007cfa:	4770      	bx	lr
  return USBD_OK;
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	e7f5      	b.n	8007cec <USBD_LL_SOF+0x14>

08007d00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d00:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8007d02:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8007d04:	e002      	b.n	8007d0c <USBD_GetLen+0xc>
  {
    len++;
 8007d06:	3001      	adds	r0, #1
 8007d08:	b2c0      	uxtb	r0, r0
    pbuff++;
 8007d0a:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8007d0c:	781a      	ldrb	r2, [r3, #0]
 8007d0e:	2a00      	cmp	r2, #0
 8007d10:	d1f9      	bne.n	8007d06 <USBD_GetLen+0x6>
  }

  return len;
}
 8007d12:	4770      	bx	lr

08007d14 <USBD_SetFeature>:
{
 8007d14:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d16:	884b      	ldrh	r3, [r1, #2]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d000      	beq.n	8007d1e <USBD_SetFeature+0xa>
}
 8007d1c:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8007d1e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d22:	f000 fb7b 	bl	800841c <USBD_CtlSendStatus>
}
 8007d26:	e7f9      	b.n	8007d1c <USBD_SetFeature+0x8>

08007d28 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8007d28:	780b      	ldrb	r3, [r1, #0]
 8007d2a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d2c:	784b      	ldrb	r3, [r1, #1]
 8007d2e:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8007d30:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8007d32:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8007d38:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8007d3a:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d3c:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8007d42:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8007d44:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d46:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8007d4c:	80c3      	strh	r3, [r0, #6]
}
 8007d4e:	4770      	bx	lr

08007d50 <USBD_CtlError>:
{
 8007d50:	b510      	push	{r4, lr}
 8007d52:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d54:	2180      	movs	r1, #128	; 0x80
 8007d56:	f009 fd24 	bl	80117a2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f009 fd20 	bl	80117a2 <USBD_LL_StallEP>
}
 8007d62:	bd10      	pop	{r4, pc}

08007d64 <USBD_GetDescriptor>:
{
 8007d64:	b530      	push	{r4, r5, lr}
 8007d66:	b083      	sub	sp, #12
 8007d68:	4604      	mov	r4, r0
 8007d6a:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8007d72:	884a      	ldrh	r2, [r1, #2]
 8007d74:	0a13      	lsrs	r3, r2, #8
 8007d76:	3b01      	subs	r3, #1
 8007d78:	2b0e      	cmp	r3, #14
 8007d7a:	f200 80bc 	bhi.w	8007ef6 <USBD_GetDescriptor+0x192>
 8007d7e:	e8df f003 	tbb	[pc, r3]
 8007d82:	3015      	.short	0x3015
 8007d84:	9ebaba44 	.word	0x9ebaba44
 8007d88:	bababaab 	.word	0xbababaab
 8007d8c:	babababa 	.word	0xbabababa
 8007d90:	08          	.byte	0x08
 8007d91:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007d92:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	b123      	cbz	r3, 8007da4 <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007d9a:	f10d 0106 	add.w	r1, sp, #6
 8007d9e:	7c00      	ldrb	r0, [r0, #16]
 8007da0:	4798      	blx	r3
  if (err != 0U)
 8007da2:	e00a      	b.n	8007dba <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8007da4:	4629      	mov	r1, r5
 8007da6:	f7ff ffd3 	bl	8007d50 <USBD_CtlError>
  if (err != 0U)
 8007daa:	e018      	b.n	8007dde <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007dac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f10d 0106 	add.w	r1, sp, #6
 8007db6:	7c00      	ldrb	r0, [r0, #16]
 8007db8:	4798      	blx	r3
  if (req->wLength != 0U)
 8007dba:	88ea      	ldrh	r2, [r5, #6]
 8007dbc:	2a00      	cmp	r2, #0
 8007dbe:	f000 80a3 	beq.w	8007f08 <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 8007dc2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 8099 	beq.w	8007efe <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	bf28      	it	cs
 8007dd0:	461a      	movcs	r2, r3
 8007dd2:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f000 faf3 	bl	80083c4 <USBD_CtlSendData>
}
 8007dde:	b003      	add	sp, #12
 8007de0:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007de2:	7c03      	ldrb	r3, [r0, #16]
 8007de4:	b943      	cbnz	r3, 8007df8 <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007de6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	f10d 0006 	add.w	r0, sp, #6
 8007df0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007df2:	2302      	movs	r3, #2
 8007df4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007df6:	e7e0      	b.n	8007dba <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007df8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfe:	f10d 0006 	add.w	r0, sp, #6
 8007e02:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e04:	2302      	movs	r3, #2
 8007e06:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007e08:	e7d7      	b.n	8007dba <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	2a05      	cmp	r2, #5
 8007e0e:	d852      	bhi.n	8007eb6 <USBD_GetDescriptor+0x152>
 8007e10:	e8df f002 	tbb	[pc, r2]
 8007e14:	2a1d1003 	.word	0x2a1d1003
 8007e18:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e1a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	b123      	cbz	r3, 8007e2c <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e22:	f10d 0106 	add.w	r1, sp, #6
 8007e26:	7c00      	ldrb	r0, [r0, #16]
 8007e28:	4798      	blx	r3
  if (err != 0U)
 8007e2a:	e7c6      	b.n	8007dba <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	f7ff ff8f 	bl	8007d50 <USBD_CtlError>
  if (err != 0U)
 8007e32:	e7d4      	b.n	8007dde <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e34:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	b123      	cbz	r3, 8007e46 <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e3c:	f10d 0106 	add.w	r1, sp, #6
 8007e40:	7c00      	ldrb	r0, [r0, #16]
 8007e42:	4798      	blx	r3
  if (err != 0U)
 8007e44:	e7b9      	b.n	8007dba <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007e46:	4629      	mov	r1, r5
 8007e48:	f7ff ff82 	bl	8007d50 <USBD_CtlError>
  if (err != 0U)
 8007e4c:	e7c7      	b.n	8007dde <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e4e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	b123      	cbz	r3, 8007e60 <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e56:	f10d 0106 	add.w	r1, sp, #6
 8007e5a:	7c00      	ldrb	r0, [r0, #16]
 8007e5c:	4798      	blx	r3
  if (err != 0U)
 8007e5e:	e7ac      	b.n	8007dba <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007e60:	4629      	mov	r1, r5
 8007e62:	f7ff ff75 	bl	8007d50 <USBD_CtlError>
  if (err != 0U)
 8007e66:	e7ba      	b.n	8007dde <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e68:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	b123      	cbz	r3, 8007e7a <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e70:	f10d 0106 	add.w	r1, sp, #6
 8007e74:	7c00      	ldrb	r0, [r0, #16]
 8007e76:	4798      	blx	r3
  if (err != 0U)
 8007e78:	e79f      	b.n	8007dba <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	f7ff ff68 	bl	8007d50 <USBD_CtlError>
  if (err != 0U)
 8007e80:	e7ad      	b.n	8007dde <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e82:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	b123      	cbz	r3, 8007e94 <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e8a:	f10d 0106 	add.w	r1, sp, #6
 8007e8e:	7c00      	ldrb	r0, [r0, #16]
 8007e90:	4798      	blx	r3
  if (err != 0U)
 8007e92:	e792      	b.n	8007dba <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007e94:	4629      	mov	r1, r5
 8007e96:	f7ff ff5b 	bl	8007d50 <USBD_CtlError>
  if (err != 0U)
 8007e9a:	e7a0      	b.n	8007dde <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e9c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	b123      	cbz	r3, 8007eae <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ea4:	f10d 0106 	add.w	r1, sp, #6
 8007ea8:	7c00      	ldrb	r0, [r0, #16]
 8007eaa:	4798      	blx	r3
  if (err != 0U)
 8007eac:	e785      	b.n	8007dba <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f7ff ff4e 	bl	8007d50 <USBD_CtlError>
  if (err != 0U)
 8007eb4:	e793      	b.n	8007dde <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	f7ff ff4a 	bl	8007d50 <USBD_CtlError>
  if (err != 0U)
 8007ebc:	e78f      	b.n	8007dde <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ebe:	7c03      	ldrb	r3, [r0, #16]
 8007ec0:	b933      	cbnz	r3, 8007ed0 <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ec2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec8:	f10d 0006 	add.w	r0, sp, #6
 8007ecc:	4798      	blx	r3
  if (err != 0U)
 8007ece:	e774      	b.n	8007dba <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	f7ff ff3d 	bl	8007d50 <USBD_CtlError>
  if (err != 0U)
 8007ed6:	e782      	b.n	8007dde <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ed8:	7c03      	ldrb	r3, [r0, #16]
 8007eda:	b943      	cbnz	r3, 8007eee <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007edc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee2:	f10d 0006 	add.w	r0, sp, #6
 8007ee6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ee8:	2307      	movs	r3, #7
 8007eea:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007eec:	e765      	b.n	8007dba <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8007eee:	4629      	mov	r1, r5
 8007ef0:	f7ff ff2e 	bl	8007d50 <USBD_CtlError>
  if (err != 0U)
 8007ef4:	e773      	b.n	8007dde <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	f7ff ff2a 	bl	8007d50 <USBD_CtlError>
    return;
 8007efc:	e76f      	b.n	8007dde <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 8007efe:	4629      	mov	r1, r5
 8007f00:	4620      	mov	r0, r4
 8007f02:	f7ff ff25 	bl	8007d50 <USBD_CtlError>
 8007f06:	e76a      	b.n	8007dde <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 fa87 	bl	800841c <USBD_CtlSendStatus>
 8007f0e:	e766      	b.n	8007dde <USBD_GetDescriptor+0x7a>

08007f10 <USBD_SetAddress>:
{
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f14:	888b      	ldrh	r3, [r1, #4]
 8007f16:	b9fb      	cbnz	r3, 8007f58 <USBD_SetAddress+0x48>
 8007f18:	88cb      	ldrh	r3, [r1, #6]
 8007f1a:	b9eb      	cbnz	r3, 8007f58 <USBD_SetAddress+0x48>
 8007f1c:	884b      	ldrh	r3, [r1, #2]
 8007f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8007f20:	d81a      	bhi.n	8007f58 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f22:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f26:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d00c      	beq.n	8007f4a <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8007f30:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f34:	4629      	mov	r1, r5
 8007f36:	f009 fc5b 	bl	80117f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 fa6e 	bl	800841c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8007f40:	b135      	cbz	r5, 8007f50 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f42:	2302      	movs	r3, #2
 8007f44:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007f48:	e009      	b.n	8007f5e <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8007f4a:	f7ff ff01 	bl	8007d50 <USBD_CtlError>
 8007f4e:	e006      	b.n	8007f5e <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f50:	2301      	movs	r3, #1
 8007f52:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007f56:	e002      	b.n	8007f5e <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f7ff fef9 	bl	8007d50 <USBD_CtlError>
}
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}

08007f60 <USBD_SetConfig>:
{
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	4604      	mov	r4, r0
 8007f64:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8007f66:	788d      	ldrb	r5, [r1, #2]
 8007f68:	4b2e      	ldr	r3, [pc, #184]	; (8008024 <USBD_SetConfig+0xc4>)
 8007f6a:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f6c:	2d01      	cmp	r5, #1
 8007f6e:	d810      	bhi.n	8007f92 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8007f70:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d00f      	beq.n	8007f9a <USBD_SetConfig+0x3a>
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d023      	beq.n	8007fc6 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 8007f7e:	f7ff fee7 	bl	8007d50 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f82:	4b28      	ldr	r3, [pc, #160]	; (8008024 <USBD_SetConfig+0xc4>)
 8007f84:	7819      	ldrb	r1, [r3, #0]
 8007f86:	4620      	mov	r0, r4
 8007f88:	f7ff fd90 	bl	8007aac <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f8c:	2503      	movs	r5, #3
}
 8007f8e:	4628      	mov	r0, r5
 8007f90:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8007f92:	f7ff fedd 	bl	8007d50 <USBD_CtlError>
    return USBD_FAIL;
 8007f96:	2503      	movs	r5, #3
 8007f98:	e7f9      	b.n	8007f8e <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8007f9a:	b18d      	cbz	r5, 8007fc0 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 8007f9c:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	f7ff fd7b 	bl	8007a9a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8007fa4:	4605      	mov	r5, r0
 8007fa6:	b120      	cbz	r0, 8007fb2 <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4620      	mov	r0, r4
 8007fac:	f7ff fed0 	bl	8007d50 <USBD_CtlError>
 8007fb0:	e7ed      	b.n	8007f8e <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 fa32 	bl	800841c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007fbe:	e7e6      	b.n	8007f8e <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8007fc0:	f000 fa2c 	bl	800841c <USBD_CtlSendStatus>
 8007fc4:	e7e3      	b.n	8007f8e <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8007fc6:	b1cd      	cbz	r5, 8007ffc <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 8007fc8:	6841      	ldr	r1, [r0, #4]
 8007fca:	428d      	cmp	r5, r1
 8007fcc:	d025      	beq.n	800801a <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fce:	b2c9      	uxtb	r1, r1
 8007fd0:	f7ff fd6c 	bl	8007aac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007fd4:	4b13      	ldr	r3, [pc, #76]	; (8008024 <USBD_SetConfig+0xc4>)
 8007fd6:	7819      	ldrb	r1, [r3, #0]
 8007fd8:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f7ff fd5d 	bl	8007a9a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	b1b0      	cbz	r0, 8008012 <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 8007fe4:	4631      	mov	r1, r6
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f7ff feb2 	bl	8007d50 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fec:	7921      	ldrb	r1, [r4, #4]
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f7ff fd5c 	bl	8007aac <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007ffa:	e7c8      	b.n	8007f8e <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008002:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008004:	4629      	mov	r1, r5
 8008006:	f7ff fd51 	bl	8007aac <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800800a:	4620      	mov	r0, r4
 800800c:	f000 fa06 	bl	800841c <USBD_CtlSendStatus>
 8008010:	e7bd      	b.n	8007f8e <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8008012:	4620      	mov	r0, r4
 8008014:	f000 fa02 	bl	800841c <USBD_CtlSendStatus>
 8008018:	e7b9      	b.n	8007f8e <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800801a:	f000 f9ff 	bl	800841c <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800801e:	2500      	movs	r5, #0
 8008020:	e7b5      	b.n	8007f8e <USBD_SetConfig+0x2e>
 8008022:	bf00      	nop
 8008024:	20001dd8 	.word	0x20001dd8

08008028 <USBD_GetConfig>:
{
 8008028:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800802a:	88cb      	ldrh	r3, [r1, #6]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d10b      	bne.n	8008048 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8008030:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d909      	bls.n	800804e <USBD_GetConfig+0x26>
 800803a:	2b03      	cmp	r3, #3
 800803c:	d109      	bne.n	8008052 <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800803e:	2201      	movs	r2, #1
 8008040:	1d01      	adds	r1, r0, #4
 8008042:	f000 f9bf 	bl	80083c4 <USBD_CtlSendData>
        break;
 8008046:	e001      	b.n	800804c <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8008048:	f7ff fe82 	bl	8007d50 <USBD_CtlError>
}
 800804c:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800804e:	b25b      	sxtb	r3, r3
 8008050:	b913      	cbnz	r3, 8008058 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 8008052:	f7ff fe7d 	bl	8007d50 <USBD_CtlError>
}
 8008056:	e7f9      	b.n	800804c <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 8008058:	4601      	mov	r1, r0
 800805a:	2300      	movs	r3, #0
 800805c:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008060:	2201      	movs	r2, #1
 8008062:	f000 f9af 	bl	80083c4 <USBD_CtlSendData>
        break;
 8008066:	e7f1      	b.n	800804c <USBD_GetConfig+0x24>

08008068 <USBD_GetStatus>:
{
 8008068:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800806a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800806e:	3b01      	subs	r3, #1
 8008070:	2b02      	cmp	r3, #2
 8008072:	d812      	bhi.n	800809a <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8008074:	88cb      	ldrh	r3, [r1, #6]
 8008076:	2b02      	cmp	r3, #2
 8008078:	d10c      	bne.n	8008094 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800807a:	2301      	movs	r3, #1
 800807c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800807e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8008082:	b10b      	cbz	r3, 8008088 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008084:	2303      	movs	r3, #3
 8008086:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008088:	2202      	movs	r2, #2
 800808a:	f100 010c 	add.w	r1, r0, #12
 800808e:	f000 f999 	bl	80083c4 <USBD_CtlSendData>
}
 8008092:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8008094:	f7ff fe5c 	bl	8007d50 <USBD_CtlError>
        break;
 8008098:	e7fb      	b.n	8008092 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800809a:	f7ff fe59 	bl	8007d50 <USBD_CtlError>
}
 800809e:	e7f8      	b.n	8008092 <USBD_GetStatus+0x2a>

080080a0 <USBD_ClrFeature>:
{
 80080a0:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80080a2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80080a6:	3b01      	subs	r3, #1
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d809      	bhi.n	80080c0 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ac:	884b      	ldrh	r3, [r1, #2]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d000      	beq.n	80080b4 <USBD_ClrFeature+0x14>
}
 80080b2:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080ba:	f000 f9af 	bl	800841c <USBD_CtlSendStatus>
 80080be:	e7f8      	b.n	80080b2 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80080c0:	f7ff fe46 	bl	8007d50 <USBD_CtlError>
}
 80080c4:	e7f5      	b.n	80080b2 <USBD_ClrFeature+0x12>

080080c6 <USBD_StdDevReq>:
{
 80080c6:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080c8:	780c      	ldrb	r4, [r1, #0]
 80080ca:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80080ce:	2c20      	cmp	r4, #32
 80080d0:	d006      	beq.n	80080e0 <USBD_StdDevReq+0x1a>
 80080d2:	2c40      	cmp	r4, #64	; 0x40
 80080d4:	d004      	beq.n	80080e0 <USBD_StdDevReq+0x1a>
 80080d6:	b154      	cbz	r4, 80080ee <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 80080d8:	f7ff fe3a 	bl	8007d50 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80080dc:	2400      	movs	r4, #0
      break;
 80080de:	e004      	b.n	80080ea <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080e0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	4798      	blx	r3
 80080e8:	4604      	mov	r4, r0
}
 80080ea:	4620      	mov	r0, r4
 80080ec:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 80080ee:	784d      	ldrb	r5, [r1, #1]
 80080f0:	2d09      	cmp	r5, #9
 80080f2:	d81d      	bhi.n	8008130 <USBD_StdDevReq+0x6a>
 80080f4:	e8df f005 	tbb	[pc, r5]
 80080f8:	161c1912 	.word	0x161c1912
 80080fc:	1c05081c 	.word	0x1c05081c
 8008100:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8008102:	f7ff fe2f 	bl	8007d64 <USBD_GetDescriptor>
          break;
 8008106:	e7f0      	b.n	80080ea <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 8008108:	f7ff ff02 	bl	8007f10 <USBD_SetAddress>
          break;
 800810c:	e7ed      	b.n	80080ea <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800810e:	f7ff ff27 	bl	8007f60 <USBD_SetConfig>
 8008112:	4604      	mov	r4, r0
          break;
 8008114:	e7e9      	b.n	80080ea <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 8008116:	f7ff ff87 	bl	8008028 <USBD_GetConfig>
          break;
 800811a:	e7e6      	b.n	80080ea <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800811c:	f7ff ffa4 	bl	8008068 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8008120:	462c      	mov	r4, r5
          break;
 8008122:	e7e2      	b.n	80080ea <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 8008124:	f7ff fdf6 	bl	8007d14 <USBD_SetFeature>
          break;
 8008128:	e7df      	b.n	80080ea <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800812a:	f7ff ffb9 	bl	80080a0 <USBD_ClrFeature>
          break;
 800812e:	e7dc      	b.n	80080ea <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 8008130:	f7ff fe0e 	bl	8007d50 <USBD_CtlError>
          break;
 8008134:	e7d9      	b.n	80080ea <USBD_StdDevReq+0x24>

08008136 <USBD_StdItfReq>:
{
 8008136:	b570      	push	{r4, r5, r6, lr}
 8008138:	4605      	mov	r5, r0
 800813a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800813c:	780b      	ldrb	r3, [r1, #0]
 800813e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008142:	2b20      	cmp	r3, #32
 8008144:	d007      	beq.n	8008156 <USBD_StdItfReq+0x20>
 8008146:	2b40      	cmp	r3, #64	; 0x40
 8008148:	d005      	beq.n	8008156 <USBD_StdItfReq+0x20>
 800814a:	b123      	cbz	r3, 8008156 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800814c:	f7ff fe00 	bl	8007d50 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008150:	2600      	movs	r6, #0
}
 8008152:	4630      	mov	r0, r6
 8008154:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8008156:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800815a:	3b01      	subs	r3, #1
 800815c:	2b02      	cmp	r3, #2
 800815e:	d818      	bhi.n	8008192 <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008160:	7923      	ldrb	r3, [r4, #4]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d80f      	bhi.n	8008186 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008166:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	4621      	mov	r1, r4
 800816e:	4628      	mov	r0, r5
 8008170:	4798      	blx	r3
 8008172:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008174:	88e3      	ldrh	r3, [r4, #6]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1eb      	bne.n	8008152 <USBD_StdItfReq+0x1c>
 800817a:	2800      	cmp	r0, #0
 800817c:	d1e9      	bne.n	8008152 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800817e:	4628      	mov	r0, r5
 8008180:	f000 f94c 	bl	800841c <USBD_CtlSendStatus>
 8008184:	e7e5      	b.n	8008152 <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 8008186:	4621      	mov	r1, r4
 8008188:	4628      	mov	r0, r5
 800818a:	f7ff fde1 	bl	8007d50 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800818e:	2600      	movs	r6, #0
 8008190:	e7df      	b.n	8008152 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 8008192:	4621      	mov	r1, r4
 8008194:	4628      	mov	r0, r5
 8008196:	f7ff fddb 	bl	8007d50 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800819a:	2600      	movs	r6, #0
          break;
 800819c:	e7d9      	b.n	8008152 <USBD_StdItfReq+0x1c>

0800819e <USBD_StdEPReq>:
{
 800819e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a0:	4606      	mov	r6, r0
 80081a2:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 80081a4:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081a6:	780c      	ldrb	r4, [r1, #0]
 80081a8:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80081ac:	2c20      	cmp	r4, #32
 80081ae:	d008      	beq.n	80081c2 <USBD_StdEPReq+0x24>
 80081b0:	b2d9      	uxtb	r1, r3
 80081b2:	2c40      	cmp	r4, #64	; 0x40
 80081b4:	d005      	beq.n	80081c2 <USBD_StdEPReq+0x24>
 80081b6:	b16c      	cbz	r4, 80081d4 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7ff fdc9 	bl	8007d50 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80081be:	2400      	movs	r4, #0
      break;
 80081c0:	e006      	b.n	80081d0 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081c2:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	4629      	mov	r1, r5
 80081ca:	4630      	mov	r0, r6
 80081cc:	4798      	blx	r3
 80081ce:	4604      	mov	r4, r0
}
 80081d0:	4620      	mov	r0, r4
 80081d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 80081d4:	786f      	ldrb	r7, [r5, #1]
 80081d6:	2f01      	cmp	r7, #1
 80081d8:	d02f      	beq.n	800823a <USBD_StdEPReq+0x9c>
 80081da:	2f03      	cmp	r7, #3
 80081dc:	d005      	beq.n	80081ea <USBD_StdEPReq+0x4c>
 80081de:	2f00      	cmp	r7, #0
 80081e0:	d059      	beq.n	8008296 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 80081e2:	4629      	mov	r1, r5
 80081e4:	f7ff fdb4 	bl	8007d50 <USBD_CtlError>
          break;
 80081e8:	e7f2      	b.n	80081d0 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80081ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d005      	beq.n	8008200 <USBD_StdEPReq+0x62>
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d012      	beq.n	800821e <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 80081f8:	4629      	mov	r1, r5
 80081fa:	f7ff fda9 	bl	8007d50 <USBD_CtlError>
              break;
 80081fe:	e7e7      	b.n	80081d0 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008200:	b109      	cbz	r1, 8008206 <USBD_StdEPReq+0x68>
 8008202:	2980      	cmp	r1, #128	; 0x80
 8008204:	d104      	bne.n	8008210 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 8008206:	4629      	mov	r1, r5
 8008208:	4630      	mov	r0, r6
 800820a:	f7ff fda1 	bl	8007d50 <USBD_CtlError>
 800820e:	e7df      	b.n	80081d0 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008210:	f009 fac7 	bl	80117a2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008214:	2180      	movs	r1, #128	; 0x80
 8008216:	4630      	mov	r0, r6
 8008218:	f009 fac3 	bl	80117a2 <USBD_LL_StallEP>
 800821c:	e7d8      	b.n	80081d0 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800821e:	886b      	ldrh	r3, [r5, #2]
 8008220:	b923      	cbnz	r3, 800822c <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008222:	b119      	cbz	r1, 800822c <USBD_StdEPReq+0x8e>
 8008224:	2980      	cmp	r1, #128	; 0x80
 8008226:	d001      	beq.n	800822c <USBD_StdEPReq+0x8e>
 8008228:	88eb      	ldrh	r3, [r5, #6]
 800822a:	b11b      	cbz	r3, 8008234 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 800822c:	4630      	mov	r0, r6
 800822e:	f000 f8f5 	bl	800841c <USBD_CtlSendStatus>
              break;
 8008232:	e7cd      	b.n	80081d0 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008234:	f009 fab5 	bl	80117a2 <USBD_LL_StallEP>
 8008238:	e7f8      	b.n	800822c <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800823a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b02      	cmp	r3, #2
 8008242:	d005      	beq.n	8008250 <USBD_StdEPReq+0xb2>
 8008244:	2b03      	cmp	r3, #3
 8008246:	d012      	beq.n	800826e <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 8008248:	4629      	mov	r1, r5
 800824a:	f7ff fd81 	bl	8007d50 <USBD_CtlError>
              break;
 800824e:	e7bf      	b.n	80081d0 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008250:	b109      	cbz	r1, 8008256 <USBD_StdEPReq+0xb8>
 8008252:	2980      	cmp	r1, #128	; 0x80
 8008254:	d104      	bne.n	8008260 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 8008256:	4629      	mov	r1, r5
 8008258:	4630      	mov	r0, r6
 800825a:	f7ff fd79 	bl	8007d50 <USBD_CtlError>
 800825e:	e7b7      	b.n	80081d0 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008260:	f009 fa9f 	bl	80117a2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008264:	2180      	movs	r1, #128	; 0x80
 8008266:	4630      	mov	r0, r6
 8008268:	f009 fa9b 	bl	80117a2 <USBD_LL_StallEP>
 800826c:	e7b0      	b.n	80081d0 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800826e:	886b      	ldrh	r3, [r5, #2]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1ad      	bne.n	80081d0 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8008274:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8008278:	d10a      	bne.n	8008290 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800827a:	4630      	mov	r0, r6
 800827c:	f000 f8ce 	bl	800841c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008280:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	4629      	mov	r1, r5
 8008288:	4630      	mov	r0, r6
 800828a:	4798      	blx	r3
 800828c:	4604      	mov	r4, r0
 800828e:	e79f      	b.n	80081d0 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008290:	f009 fa8f 	bl	80117b2 <USBD_LL_ClearStallEP>
 8008294:	e7f1      	b.n	800827a <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 8008296:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	2a02      	cmp	r2, #2
 800829e:	d006      	beq.n	80082ae <USBD_StdEPReq+0x110>
 80082a0:	2a03      	cmp	r2, #3
 80082a2:	d029      	beq.n	80082f8 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 80082a4:	4629      	mov	r1, r5
 80082a6:	f7ff fd53 	bl	8007d50 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80082aa:	463c      	mov	r4, r7
              break;
 80082ac:	e790      	b.n	80081d0 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082ae:	b109      	cbz	r1, 80082b4 <USBD_StdEPReq+0x116>
 80082b0:	2980      	cmp	r1, #128	; 0x80
 80082b2:	d113      	bne.n	80082dc <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80082b8:	d115      	bne.n	80082e6 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082ba:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80082c2:	0089      	lsls	r1, r1, #2
 80082c4:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 80082c8:	4431      	add	r1, r6
 80082ca:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082d0:	2202      	movs	r2, #2
 80082d2:	4630      	mov	r0, r6
 80082d4:	f000 f876 	bl	80083c4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80082d8:	463c      	mov	r4, r7
              break;
 80082da:	e779      	b.n	80081d0 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 80082dc:	4629      	mov	r1, r5
 80082de:	f7ff fd37 	bl	8007d50 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80082e2:	463c      	mov	r4, r7
                break;
 80082e4:	e774      	b.n	80081d0 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082e6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80082ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80082ee:	0089      	lsls	r1, r1, #2
 80082f0:	3110      	adds	r1, #16
 80082f2:	4431      	add	r1, r6
 80082f4:	3104      	adds	r1, #4
 80082f6:	e7e9      	b.n	80082cc <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 80082f8:	b25b      	sxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	db1f      	blt.n	800833e <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80082fe:	f001 020f 	and.w	r2, r1, #15
 8008302:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008306:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800830a:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800830e:	b322      	cbz	r2, 800835a <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008310:	2b00      	cmp	r3, #0
 8008312:	db27      	blt.n	8008364 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008314:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008318:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800831c:	009c      	lsls	r4, r3, #2
 800831e:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8008322:	4434      	add	r4, r6
 8008324:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008326:	b109      	cbz	r1, 800832c <USBD_StdEPReq+0x18e>
 8008328:	2980      	cmp	r1, #128	; 0x80
 800832a:	d124      	bne.n	8008376 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 800832c:	2300      	movs	r3, #0
 800832e:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008330:	2202      	movs	r2, #2
 8008332:	4621      	mov	r1, r4
 8008334:	4630      	mov	r0, r6
 8008336:	f000 f845 	bl	80083c4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800833a:	463c      	mov	r4, r7
              break;
 800833c:	e748      	b.n	80081d0 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800833e:	f001 020f 	and.w	r2, r1, #15
 8008342:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008346:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800834a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800834c:	2a00      	cmp	r2, #0
 800834e:	d1df      	bne.n	8008310 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 8008350:	4629      	mov	r1, r5
 8008352:	f7ff fcfd 	bl	8007d50 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008356:	463c      	mov	r4, r7
                  break;
 8008358:	e73a      	b.n	80081d0 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800835a:	4629      	mov	r1, r5
 800835c:	f7ff fcf8 	bl	8007d50 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008360:	463c      	mov	r4, r7
                  break;
 8008362:	e735      	b.n	80081d0 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008364:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8008368:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800836c:	009c      	lsls	r4, r3, #2
 800836e:	3410      	adds	r4, #16
 8008370:	4434      	add	r4, r6
 8008372:	3404      	adds	r4, #4
 8008374:	e7d7      	b.n	8008326 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008376:	4630      	mov	r0, r6
 8008378:	f009 fa23 	bl	80117c2 <USBD_LL_IsStallEP>
 800837c:	b110      	cbz	r0, 8008384 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800837e:	2301      	movs	r3, #1
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	e7d5      	b.n	8008330 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 8008384:	2300      	movs	r3, #0
 8008386:	6023      	str	r3, [r4, #0]
 8008388:	e7d2      	b.n	8008330 <USBD_StdEPReq+0x192>

0800838a <USBD_GetString>:
  if (desc == NULL)
 800838a:	b1d0      	cbz	r0, 80083c2 <USBD_GetString+0x38>
{
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	460d      	mov	r5, r1
 8008390:	4616      	mov	r6, r2
 8008392:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008394:	f7ff fcb4 	bl	8007d00 <USBD_GetLen>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	005b      	lsls	r3, r3, #1
 800839c:	b29b      	uxth	r3, r3
 800839e:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 80083a0:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083a2:	2303      	movs	r3, #3
 80083a4:	706b      	strb	r3, [r5, #1]
  idx++;
 80083a6:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 80083a8:	e007      	b.n	80083ba <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 80083aa:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 80083ac:	3401      	adds	r4, #1
    idx++;
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 80083b2:	2100      	movs	r1, #0
 80083b4:	54a9      	strb	r1, [r5, r2]
    idx++;
 80083b6:	3302      	adds	r3, #2
 80083b8:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 80083ba:	7822      	ldrb	r2, [r4, #0]
 80083bc:	2a00      	cmp	r2, #0
 80083be:	d1f4      	bne.n	80083aa <USBD_GetString+0x20>
}
 80083c0:	bd70      	pop	{r4, r5, r6, pc}
 80083c2:	4770      	bx	lr

080083c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80083c4:	b508      	push	{r3, lr}
 80083c6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083c8:	2202      	movs	r2, #2
 80083ca:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80083ce:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80083d0:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083d2:	460a      	mov	r2, r1
 80083d4:	2100      	movs	r1, #0
 80083d6:	f009 fa13 	bl	8011800 <USBD_LL_Transmit>

  return USBD_OK;
}
 80083da:	2000      	movs	r0, #0
 80083dc:	bd08      	pop	{r3, pc}

080083de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80083de:	b508      	push	{r3, lr}
 80083e0:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083e2:	460a      	mov	r2, r1
 80083e4:	2100      	movs	r1, #0
 80083e6:	f009 fa0b 	bl	8011800 <USBD_LL_Transmit>

  return USBD_OK;
}
 80083ea:	2000      	movs	r0, #0
 80083ec:	bd08      	pop	{r3, pc}

080083ee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80083ee:	b508      	push	{r3, lr}
 80083f0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083f2:	2203      	movs	r2, #3
 80083f4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80083f8:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80083fc:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008400:	460a      	mov	r2, r1
 8008402:	2100      	movs	r1, #0
 8008404:	f009 fa04 	bl	8011810 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008408:	2000      	movs	r0, #0
 800840a:	bd08      	pop	{r3, pc}

0800840c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800840c:	b508      	push	{r3, lr}
 800840e:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008410:	460a      	mov	r2, r1
 8008412:	2100      	movs	r1, #0
 8008414:	f009 f9fc 	bl	8011810 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008418:	2000      	movs	r0, #0
 800841a:	bd08      	pop	{r3, pc}

0800841c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800841c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800841e:	2204      	movs	r2, #4
 8008420:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008424:	2300      	movs	r3, #0
 8008426:	461a      	mov	r2, r3
 8008428:	4619      	mov	r1, r3
 800842a:	f009 f9e9 	bl	8011800 <USBD_LL_Transmit>

  return USBD_OK;
}
 800842e:	2000      	movs	r0, #0
 8008430:	bd08      	pop	{r3, pc}

08008432 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008432:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008434:	2205      	movs	r2, #5
 8008436:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800843a:	2300      	movs	r3, #0
 800843c:	461a      	mov	r2, r3
 800843e:	4619      	mov	r1, r3
 8008440:	f009 f9e6 	bl	8011810 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008444:	2000      	movs	r0, #0
 8008446:	bd08      	pop	{r3, pc}

08008448 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8008448:	2884      	cmp	r0, #132	; 0x84
 800844a:	d001      	beq.n	8008450 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 800844c:	3003      	adds	r0, #3
 800844e:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008450:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8008452:	4770      	bx	lr

08008454 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008454:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8008456:	f000 fee3 	bl	8009220 <vTaskStartScheduler>
  
  return osOK;
}
 800845a:	2000      	movs	r0, #0
 800845c:	bd08      	pop	{r3, pc}

0800845e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800845e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008460:	b085      	sub	sp, #20
 8008462:	460c      	mov	r4, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008464:	6845      	ldr	r5, [r0, #4]
 8008466:	6806      	ldr	r6, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008468:	6907      	ldr	r7, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800846a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800846e:	f7ff ffeb 	bl	8008448 <makeFreeRtosPriority>
 8008472:	ab03      	add	r3, sp, #12
 8008474:	9301      	str	r3, [sp, #4]
 8008476:	9000      	str	r0, [sp, #0]
 8008478:	4623      	mov	r3, r4
 800847a:	b2ba      	uxth	r2, r7
 800847c:	4631      	mov	r1, r6
 800847e:	4628      	mov	r0, r5
 8008480:	f000 fe9c 	bl	80091bc <xTaskCreate>
 8008484:	2801      	cmp	r0, #1
 8008486:	d102      	bne.n	800848e <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008488:	9803      	ldr	r0, [sp, #12]
}
 800848a:	b005      	add	sp, #20
 800848c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 800848e:	2000      	movs	r0, #0
 8008490:	e7fb      	b.n	800848a <osThreadCreate+0x2c>

08008492 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008492:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008494:	b900      	cbnz	r0, 8008498 <osDelay+0x6>
 8008496:	2001      	movs	r0, #1
 8008498:	f001 f83e 	bl	8009518 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800849c:	2000      	movs	r0, #0
 800849e:	bd08      	pop	{r3, pc}

080084a0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80084a0:	b500      	push	{lr}
 80084a2:	b083      	sub	sp, #12
 80084a4:	4613      	mov	r3, r2
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 80084a6:	2901      	cmp	r1, #1
 80084a8:	d009      	beq.n	80084be <osTimerCreate+0x1e>
 80084aa:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80084ac:	6801      	ldr	r1, [r0, #0]
  return xTimerCreate((const char *)"",
 80084ae:	9100      	str	r1, [sp, #0]
 80084b0:	2101      	movs	r1, #1
 80084b2:	4804      	ldr	r0, [pc, #16]	; (80084c4 <osTimerCreate+0x24>)
 80084b4:	f001 fb44 	bl	8009b40 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 80084b8:	b003      	add	sp, #12
 80084ba:	f85d fb04 	ldr.w	pc, [sp], #4
  return xTimerCreate((const char *)"",
 80084be:	2201      	movs	r2, #1
 80084c0:	e7f4      	b.n	80084ac <osTimerCreate+0xc>
 80084c2:	bf00      	nop
 80084c4:	080137e0 	.word	0x080137e0

080084c8 <prvTestWaitCondition>:

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 80084c8:	b91a      	cbnz	r2, 80084d2 <prvTestWaitCondition+0xa>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80084ca:	4208      	tst	r0, r1
 80084cc:	d105      	bne.n	80084da <prvTestWaitCondition+0x12>
BaseType_t xWaitConditionMet = pdFALSE;
 80084ce:	4610      	mov	r0, r2
 80084d0:	4770      	bx	lr
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80084d2:	4381      	bics	r1, r0
 80084d4:	d003      	beq.n	80084de <prvTestWaitCondition+0x16>
BaseType_t xWaitConditionMet = pdFALSE;
 80084d6:	2000      	movs	r0, #0
 80084d8:	4770      	bx	lr
			xWaitConditionMet = pdTRUE;
 80084da:	2001      	movs	r0, #1
 80084dc:	4770      	bx	lr
		{
			xWaitConditionMet = pdTRUE;
 80084de:	2001      	movs	r0, #1
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
 80084e0:	4770      	bx	lr

080084e2 <xEventGroupCreate>:
	{
 80084e2:	b510      	push	{r4, lr}
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80084e4:	201c      	movs	r0, #28
 80084e6:	f001 ff0d 	bl	800a304 <pvPortMalloc>
		if( pxEventBits != NULL )
 80084ea:	4604      	mov	r4, r0
 80084ec:	b120      	cbz	r0, 80084f8 <xEventGroupCreate+0x16>
			pxEventBits->uxEventBits = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80084f4:	f000 f8da 	bl	80086ac <vListInitialise>
	}
 80084f8:	4620      	mov	r0, r4
 80084fa:	bd10      	pop	{r4, pc}

080084fc <xEventGroupWaitBits>:
{
 80084fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 8008500:	b178      	cbz	r0, 8008522 <xEventGroupWaitBits+0x26>
 8008502:	460c      	mov	r4, r1
 8008504:	4616      	mov	r6, r2
 8008506:	461d      	mov	r5, r3
 8008508:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800850a:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 800850e:	d011      	beq.n	8008534 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	e7fe      	b.n	8008520 <xEventGroupWaitBits+0x24>
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8008532:	e7fe      	b.n	8008532 <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 8008534:	b941      	cbnz	r1, 8008548 <xEventGroupWaitBits+0x4c>
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	e7fe      	b.n	8008546 <xEventGroupWaitBits+0x4a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008548:	f001 f9ce 	bl	80098e8 <xTaskGetSchedulerState>
 800854c:	b950      	cbnz	r0, 8008564 <xEventGroupWaitBits+0x68>
 800854e:	9b08      	ldr	r3, [sp, #32]
 8008550:	b143      	cbz	r3, 8008564 <xEventGroupWaitBits+0x68>
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	e7fe      	b.n	8008562 <xEventGroupWaitBits+0x66>
	vTaskSuspendAll();
 8008564:	f000 feb4 	bl	80092d0 <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008568:	f8d7 9000 	ldr.w	r9, [r7]
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800856c:	462a      	mov	r2, r5
 800856e:	4621      	mov	r1, r4
 8008570:	4648      	mov	r0, r9
 8008572:	f7ff ffa9 	bl	80084c8 <prvTestWaitCondition>
		if( xWaitConditionMet != pdFALSE )
 8008576:	b1f0      	cbz	r0, 80085b6 <xEventGroupWaitBits+0xba>
			if( xClearOnExit != pdFALSE )
 8008578:	b116      	cbz	r6, 8008580 <xEventGroupWaitBits+0x84>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800857a:	ea29 0304 	bic.w	r3, r9, r4
 800857e:	603b      	str	r3, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 8008580:	f000 ff4c 	bl	800941c <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8008584:	f1b8 0f00 	cmp.w	r8, #0
 8008588:	d012      	beq.n	80085b0 <xEventGroupWaitBits+0xb4>
		if( xAlreadyYielded == pdFALSE )
 800858a:	b948      	cbnz	r0, 80085a0 <xEventGroupWaitBits+0xa4>
			portYIELD_WITHIN_API();
 800858c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008594:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 80085a0:	f001 fa12 	bl	80099c8 <uxTaskResetEventItemValue>
 80085a4:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80085a6:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80085aa:	d01a      	beq.n	80085e2 <xEventGroupWaitBits+0xe6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80085ac:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
 80085b0:	4648      	mov	r0, r9
 80085b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80085b6:	9b08      	ldr	r3, [sp, #32]
 80085b8:	b183      	cbz	r3, 80085dc <xEventGroupWaitBits+0xe0>
			if( xClearOnExit != pdFALSE )
 80085ba:	b966      	cbnz	r6, 80085d6 <xEventGroupWaitBits+0xda>
EventBits_t uxReturn, uxControlBits = 0;
 80085bc:	4641      	mov	r1, r8
			if( xWaitForAllBits != pdFALSE )
 80085be:	b10d      	cbz	r5, 80085c4 <xEventGroupWaitBits+0xc8>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80085c0:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80085c4:	9a08      	ldr	r2, [sp, #32]
 80085c6:	4321      	orrs	r1, r4
 80085c8:	1d38      	adds	r0, r7, #4
 80085ca:	f001 f85d 	bl	8009688 <vTaskPlaceOnUnorderedEventList>
			uxReturn = 0;
 80085ce:	46c1      	mov	r9, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80085d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085d4:	e7d4      	b.n	8008580 <xEventGroupWaitBits+0x84>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80085d6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80085da:	e7f0      	b.n	80085be <xEventGroupWaitBits+0xc2>
 80085dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085e0:	e7ce      	b.n	8008580 <xEventGroupWaitBits+0x84>
			taskENTER_CRITICAL();
 80085e2:	f001 fcd7 	bl	8009f94 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 80085e6:	f8d7 9000 	ldr.w	r9, [r7]
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80085ea:	462a      	mov	r2, r5
 80085ec:	4621      	mov	r1, r4
 80085ee:	4648      	mov	r0, r9
 80085f0:	f7ff ff6a 	bl	80084c8 <prvTestWaitCondition>
 80085f4:	b118      	cbz	r0, 80085fe <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 80085f6:	b116      	cbz	r6, 80085fe <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80085f8:	ea29 0404 	bic.w	r4, r9, r4
 80085fc:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 80085fe:	f001 fceb 	bl	8009fd8 <vPortExitCritical>
 8008602:	e7d3      	b.n	80085ac <xEventGroupWaitBits+0xb0>

08008604 <xEventGroupSetBits>:
{
 8008604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( xEventGroup );
 8008606:	b168      	cbz	r0, 8008624 <xEventGroupSetBits+0x20>
 8008608:	460d      	mov	r5, r1
 800860a:	4604      	mov	r4, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800860c:	f011 477f 	ands.w	r7, r1, #4278190080	; 0xff000000
 8008610:	d011      	beq.n	8008636 <xEventGroupSetBits+0x32>
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	e7fe      	b.n	8008622 <xEventGroupSetBits+0x1e>
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8008634:	e7fe      	b.n	8008634 <xEventGroupSetBits+0x30>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008636:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 800863a:	f000 fe49 	bl	80092d0 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 800863e:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	432b      	orrs	r3, r5
 8008644:	6023      	str	r3, [r4, #0]
		while( pxListItem != pxListEnd )
 8008646:	e00a      	b.n	800865e <xEventGroupSetBits+0x5a>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008648:	6821      	ldr	r1, [r4, #0]
 800864a:	ea32 0101 	bics.w	r1, r2, r1
 800864e:	d105      	bne.n	800865c <xEventGroupSetBits+0x58>
 8008650:	e011      	b.n	8008676 <xEventGroupSetBits+0x72>
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008652:	6821      	ldr	r1, [r4, #0]
 8008654:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8008658:	f001 f8aa 	bl	80097b0 <vTaskRemoveFromUnorderedEventList>
{
 800865c:	4628      	mov	r0, r5
		while( pxListItem != pxListEnd )
 800865e:	42b0      	cmp	r0, r6
 8008660:	d00e      	beq.n	8008680 <xEventGroupSetBits+0x7c>
			pxNext = listGET_NEXT( pxListItem );
 8008662:	6845      	ldr	r5, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008664:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008666:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800866a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800866e:	d1eb      	bne.n	8008648 <xEventGroupSetBits+0x44>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008670:	6821      	ldr	r1, [r4, #0]
 8008672:	4211      	tst	r1, r2
 8008674:	d0f2      	beq.n	800865c <xEventGroupSetBits+0x58>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008676:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800867a:	d0ea      	beq.n	8008652 <xEventGroupSetBits+0x4e>
					uxBitsToClear |= uxBitsWaitedFor;
 800867c:	4317      	orrs	r7, r2
 800867e:	e7e8      	b.n	8008652 <xEventGroupSetBits+0x4e>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	ea23 0307 	bic.w	r3, r3, r7
 8008686:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8008688:	f000 fec8 	bl	800941c <xTaskResumeAll>
}
 800868c:	6820      	ldr	r0, [r4, #0]
 800868e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008690 <vEventGroupSetBitsCallback>:
{
 8008690:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008692:	f7ff ffb7 	bl	8008604 <xEventGroupSetBits>
}
 8008696:	bd08      	pop	{r3, pc}

08008698 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008698:	b508      	push	{r3, lr}
 800869a:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800869c:	460a      	mov	r2, r1
 800869e:	4601      	mov	r1, r0
 80086a0:	4801      	ldr	r0, [pc, #4]	; (80086a8 <xEventGroupSetBitsFromISR+0x10>)
 80086a2:	f001 fbf7 	bl	8009e94 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 80086a6:	bd08      	pop	{r3, pc}
 80086a8:	08008691 	.word	0x08008691

080086ac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086ac:	f100 0308 	add.w	r3, r0, #8
 80086b0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086b6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086b8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086ba:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086bc:	2300      	movs	r3, #0
 80086be:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086c0:	4770      	bx	lr

080086c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086c6:	4770      	bx	lr

080086c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80086c8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80086ca:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80086cc:	689a      	ldr	r2, [r3, #8]
 80086ce:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086d0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086d2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086d4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80086d6:	6803      	ldr	r3, [r0, #0]
 80086d8:	3301      	adds	r3, #1
 80086da:	6003      	str	r3, [r0, #0]
}
 80086dc:	4770      	bx	lr

080086de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086de:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086e0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086e2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80086e6:	d011      	beq.n	800870c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086e8:	f100 0308 	add.w	r3, r0, #8
 80086ec:	461c      	mov	r4, r3
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	42aa      	cmp	r2, r5
 80086f4:	d9fa      	bls.n	80086ec <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086f6:	6863      	ldr	r3, [r4, #4]
 80086f8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086fa:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086fc:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80086fe:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008700:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008702:	6803      	ldr	r3, [r0, #0]
 8008704:	3301      	adds	r3, #1
 8008706:	6003      	str	r3, [r0, #0]
}
 8008708:	bc30      	pop	{r4, r5}
 800870a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800870c:	6904      	ldr	r4, [r0, #16]
 800870e:	e7f2      	b.n	80086f6 <vListInsert+0x18>

08008710 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008710:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008712:	6841      	ldr	r1, [r0, #4]
 8008714:	6882      	ldr	r2, [r0, #8]
 8008716:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008718:	6841      	ldr	r1, [r0, #4]
 800871a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	4282      	cmp	r2, r0
 8008720:	d006      	beq.n	8008730 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008722:	2200      	movs	r2, #0
 8008724:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	3a01      	subs	r2, #1
 800872a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800872c:	6818      	ldr	r0, [r3, #0]
}
 800872e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008730:	6882      	ldr	r2, [r0, #8]
 8008732:	605a      	str	r2, [r3, #4]
 8008734:	e7f5      	b.n	8008722 <uxListRemove+0x12>

08008736 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008736:	b510      	push	{r4, lr}
 8008738:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800873a:	f001 fc2b 	bl	8009f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800873e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008740:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008742:	429a      	cmp	r2, r3
 8008744:	d004      	beq.n	8008750 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8008746:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8008748:	f001 fc46 	bl	8009fd8 <vPortExitCritical>

	return xReturn;
}
 800874c:	4620      	mov	r0, r4
 800874e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008750:	2401      	movs	r4, #1
 8008752:	e7f9      	b.n	8008748 <prvIsQueueFull+0x12>

08008754 <prvIsQueueEmpty>:
{
 8008754:	b510      	push	{r4, lr}
 8008756:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008758:	f001 fc1c 	bl	8009f94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800875c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800875e:	b923      	cbnz	r3, 800876a <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8008760:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8008762:	f001 fc39 	bl	8009fd8 <vPortExitCritical>
}
 8008766:	4620      	mov	r0, r4
 8008768:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800876a:	2400      	movs	r4, #0
 800876c:	e7f9      	b.n	8008762 <prvIsQueueEmpty+0xe>

0800876e <prvCopyDataToQueue>:
{
 800876e:	b570      	push	{r4, r5, r6, lr}
 8008770:	4604      	mov	r4, r0
 8008772:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008774:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008776:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008778:	b95a      	cbnz	r2, 8008792 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800877a:	6803      	ldr	r3, [r0, #0]
 800877c:	b11b      	cbz	r3, 8008786 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800877e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008780:	3601      	adds	r6, #1
 8008782:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008784:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008786:	6880      	ldr	r0, [r0, #8]
 8008788:	f001 f8be 	bl	8009908 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800878c:	2300      	movs	r3, #0
 800878e:	60a3      	str	r3, [r4, #8]
 8008790:	e7f6      	b.n	8008780 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008792:	b96d      	cbnz	r5, 80087b0 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008794:	6840      	ldr	r0, [r0, #4]
 8008796:	f009 fab7 	bl	8011d08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800879a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800879c:	6863      	ldr	r3, [r4, #4]
 800879e:	4413      	add	r3, r2
 80087a0:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087a2:	68a2      	ldr	r2, [r4, #8]
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d319      	bcc.n	80087dc <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80087ac:	4628      	mov	r0, r5
 80087ae:	e7e7      	b.n	8008780 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087b0:	68c0      	ldr	r0, [r0, #12]
 80087b2:	f009 faa9 	bl	8011d08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80087b8:	4251      	negs	r1, r2
 80087ba:	68e3      	ldr	r3, [r4, #12]
 80087bc:	1a9b      	subs	r3, r3, r2
 80087be:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087c0:	6822      	ldr	r2, [r4, #0]
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d202      	bcs.n	80087cc <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80087c6:	68a3      	ldr	r3, [r4, #8]
 80087c8:	440b      	add	r3, r1
 80087ca:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80087cc:	2d02      	cmp	r5, #2
 80087ce:	d001      	beq.n	80087d4 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80087d0:	2000      	movs	r0, #0
 80087d2:	e7d5      	b.n	8008780 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087d4:	b126      	cbz	r6, 80087e0 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80087d6:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80087d8:	2000      	movs	r0, #0
 80087da:	e7d1      	b.n	8008780 <prvCopyDataToQueue+0x12>
 80087dc:	4628      	mov	r0, r5
 80087de:	e7cf      	b.n	8008780 <prvCopyDataToQueue+0x12>
 80087e0:	2000      	movs	r0, #0
 80087e2:	e7cd      	b.n	8008780 <prvCopyDataToQueue+0x12>

080087e4 <prvCopyDataFromQueue>:
{
 80087e4:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80087e8:	b16a      	cbz	r2, 8008806 <prvCopyDataFromQueue+0x22>
{
 80087ea:	b510      	push	{r4, lr}
 80087ec:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087ee:	68d9      	ldr	r1, [r3, #12]
 80087f0:	4411      	add	r1, r2
 80087f2:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80087f4:	689c      	ldr	r4, [r3, #8]
 80087f6:	42a1      	cmp	r1, r4
 80087f8:	d301      	bcc.n	80087fe <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80087fa:	6819      	ldr	r1, [r3, #0]
 80087fc:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087fe:	68d9      	ldr	r1, [r3, #12]
 8008800:	f009 fa82 	bl	8011d08 <memcpy>
}
 8008804:	bd10      	pop	{r4, pc}
 8008806:	4770      	bx	lr

08008808 <prvUnlockQueue>:
{
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800880c:	f001 fbc2 	bl	8009f94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008810:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8008814:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008816:	e001      	b.n	800881c <prvUnlockQueue+0x14>
			--cTxLock;
 8008818:	3c01      	subs	r4, #1
 800881a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800881c:	2c00      	cmp	r4, #0
 800881e:	dd0a      	ble.n	8008836 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008820:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008822:	b143      	cbz	r3, 8008836 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008824:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008828:	f000 ff7a 	bl	8009720 <xTaskRemoveFromEventList>
 800882c:	2800      	cmp	r0, #0
 800882e:	d0f3      	beq.n	8008818 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8008830:	f001 f854 	bl	80098dc <vTaskMissedYield>
 8008834:	e7f0      	b.n	8008818 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8008836:	23ff      	movs	r3, #255	; 0xff
 8008838:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800883c:	f001 fbcc 	bl	8009fd8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008840:	f001 fba8 	bl	8009f94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008844:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8008848:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800884a:	e001      	b.n	8008850 <prvUnlockQueue+0x48>
				--cRxLock;
 800884c:	3c01      	subs	r4, #1
 800884e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008850:	2c00      	cmp	r4, #0
 8008852:	dd0a      	ble.n	800886a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008854:	692b      	ldr	r3, [r5, #16]
 8008856:	b143      	cbz	r3, 800886a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008858:	f105 0010 	add.w	r0, r5, #16
 800885c:	f000 ff60 	bl	8009720 <xTaskRemoveFromEventList>
 8008860:	2800      	cmp	r0, #0
 8008862:	d0f3      	beq.n	800884c <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8008864:	f001 f83a 	bl	80098dc <vTaskMissedYield>
 8008868:	e7f0      	b.n	800884c <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800886a:	23ff      	movs	r3, #255	; 0xff
 800886c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008870:	f001 fbb2 	bl	8009fd8 <vPortExitCritical>
}
 8008874:	bd38      	pop	{r3, r4, r5, pc}

08008876 <xQueueGenericReset>:
{
 8008876:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8008878:	b1e0      	cbz	r0, 80088b4 <xQueueGenericReset+0x3e>
 800887a:	460d      	mov	r5, r1
 800887c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800887e:	f001 fb89 	bl	8009f94 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008886:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008888:	fb01 3002 	mla	r0, r1, r2, r3
 800888c:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800888e:	2000      	movs	r0, #0
 8008890:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008892:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008894:	3a01      	subs	r2, #1
 8008896:	fb02 3301 	mla	r3, r2, r1, r3
 800889a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800889c:	23ff      	movs	r3, #255	; 0xff
 800889e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80088a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80088a6:	b9fd      	cbnz	r5, 80088e8 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	b963      	cbnz	r3, 80088c6 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80088ac:	f001 fb94 	bl	8009fd8 <vPortExitCritical>
}
 80088b0:	2001      	movs	r0, #1
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80088c4:	e7fe      	b.n	80088c4 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088c6:	f104 0010 	add.w	r0, r4, #16
 80088ca:	f000 ff29 	bl	8009720 <xTaskRemoveFromEventList>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d0ec      	beq.n	80088ac <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80088d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80088d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	e7e1      	b.n	80088ac <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088e8:	f104 0010 	add.w	r0, r4, #16
 80088ec:	f7ff fede 	bl	80086ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80088f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80088f4:	f7ff feda 	bl	80086ac <vListInitialise>
 80088f8:	e7d8      	b.n	80088ac <xQueueGenericReset+0x36>

080088fa <prvInitialiseNewQueue>:
{
 80088fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fc:	4605      	mov	r5, r0
 80088fe:	461e      	mov	r6, r3
 8008900:	9c06      	ldr	r4, [sp, #24]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008902:	460f      	mov	r7, r1
 8008904:	b979      	cbnz	r1, 8008926 <prvInitialiseNewQueue+0x2c>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008906:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8008908:	63e5      	str	r5, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800890a:	6427      	str	r7, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800890c:	2101      	movs	r1, #1
 800890e:	4620      	mov	r0, r4
 8008910:	f7ff ffb1 	bl	8008876 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008914:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
	traceQUEUE_CREATE( pxNewQueue );
 8008918:	4633      	mov	r3, r6
 800891a:	463a      	mov	r2, r7
 800891c:	4629      	mov	r1, r5
 800891e:	2073      	movs	r0, #115	; 0x73
 8008920:	f008 fb0a 	bl	8010f38 <SEGGER_SYSVIEW_RecordU32x3>
}
 8008924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008926:	6022      	str	r2, [r4, #0]
 8008928:	e7ee      	b.n	8008908 <prvInitialiseNewQueue+0xe>

0800892a <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800892a:	b940      	cbnz	r0, 800893e <xQueueGenericCreate+0x14>
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	e7fe      	b.n	800893c <xQueueGenericCreate+0x12>
	{
 800893e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008940:	b083      	sub	sp, #12
 8008942:	460c      	mov	r4, r1
 8008944:	4615      	mov	r5, r2
 8008946:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008948:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800894c:	3050      	adds	r0, #80	; 0x50
 800894e:	f001 fcd9 	bl	800a304 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008952:	4607      	mov	r7, r0
 8008954:	b138      	cbz	r0, 8008966 <xQueueGenericCreate+0x3c>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008956:	9000      	str	r0, [sp, #0]
 8008958:	462b      	mov	r3, r5
 800895a:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800895e:	4621      	mov	r1, r4
 8008960:	4630      	mov	r0, r6
 8008962:	f7ff ffca 	bl	80088fa <prvInitialiseNewQueue>
	}
 8008966:	4638      	mov	r0, r7
 8008968:	b003      	add	sp, #12
 800896a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800896c <xQueueGenericSend>:
{
 800896c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800896e:	b087      	sub	sp, #28
 8008970:	9203      	str	r2, [sp, #12]
	configASSERT( pxQueue );
 8008972:	b188      	cbz	r0, 8008998 <xQueueGenericSend+0x2c>
 8008974:	460e      	mov	r6, r1
 8008976:	461d      	mov	r5, r3
 8008978:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800897a:	b1b1      	cbz	r1, 80089aa <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800897c:	2d02      	cmp	r5, #2
 800897e:	d120      	bne.n	80089c2 <xQueueGenericSend+0x56>
 8008980:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008982:	2b01      	cmp	r3, #1
 8008984:	d01d      	beq.n	80089c2 <xQueueGenericSend+0x56>
 8008986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	e7fe      	b.n	8008996 <xQueueGenericSend+0x2a>
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80089a8:	e7fe      	b.n	80089a8 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d0e5      	beq.n	800897c <xQueueGenericSend+0x10>
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	e7fe      	b.n	80089c0 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089c2:	f000 ff91 	bl	80098e8 <xTaskGetSchedulerState>
 80089c6:	4607      	mov	r7, r0
 80089c8:	b958      	cbnz	r0, 80089e2 <xQueueGenericSend+0x76>
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d05c      	beq.n	8008a8a <xQueueGenericSend+0x11e>
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	e7fe      	b.n	80089e0 <xQueueGenericSend+0x74>
 80089e2:	2700      	movs	r7, #0
 80089e4:	e051      	b.n	8008a8a <xQueueGenericSend+0x11e>
				traceQUEUE_SEND( pxQueue );
 80089e6:	4620      	mov	r0, r4
 80089e8:	f008 f88a 	bl	8010b00 <SEGGER_SYSVIEW_ShrinkId>
 80089ec:	4601      	mov	r1, r0
 80089ee:	9500      	str	r5, [sp, #0]
 80089f0:	9b03      	ldr	r3, [sp, #12]
 80089f2:	4632      	mov	r2, r6
 80089f4:	205a      	movs	r0, #90	; 0x5a
 80089f6:	f008 fad9 	bl	8010fac <SEGGER_SYSVIEW_RecordU32x4>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089fa:	462a      	mov	r2, r5
 80089fc:	4631      	mov	r1, r6
 80089fe:	4620      	mov	r0, r4
 8008a00:	f7ff feb5 	bl	800876e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a06:	b97b      	cbnz	r3, 8008a28 <xQueueGenericSend+0xbc>
					else if( xYieldRequired != pdFALSE )
 8008a08:	b148      	cbz	r0, 8008a1e <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8008a0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a12:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008a1e:	f001 fadb 	bl	8009fd8 <vPortExitCritical>
				return pdPASS;
 8008a22:	2001      	movs	r0, #1
}
 8008a24:	b007      	add	sp, #28
 8008a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a28:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a2c:	f000 fe78 	bl	8009720 <xTaskRemoveFromEventList>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d0f4      	beq.n	8008a1e <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
 8008a34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	e7e9      	b.n	8008a1e <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
 8008a4a:	f001 fac5 	bl	8009fd8 <vPortExitCritical>
					traceQUEUE_SEND_FAILED( pxQueue );
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f008 f856 	bl	8010b00 <SEGGER_SYSVIEW_ShrinkId>
 8008a54:	4601      	mov	r1, r0
 8008a56:	9500      	str	r5, [sp, #0]
 8008a58:	9b03      	ldr	r3, [sp, #12]
 8008a5a:	4632      	mov	r2, r6
 8008a5c:	205a      	movs	r0, #90	; 0x5a
 8008a5e:	f008 faa5 	bl	8010fac <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8008a62:	2000      	movs	r0, #0
 8008a64:	e7de      	b.n	8008a24 <xQueueGenericSend+0xb8>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a66:	a804      	add	r0, sp, #16
 8008a68:	f000 feea 	bl	8009840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a6c:	2701      	movs	r7, #1
 8008a6e:	e019      	b.n	8008aa4 <xQueueGenericSend+0x138>
		prvLockQueue( pxQueue );
 8008a70:	2300      	movs	r3, #0
 8008a72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008a76:	e021      	b.n	8008abc <xQueueGenericSend+0x150>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a7e:	e023      	b.n	8008ac8 <xQueueGenericSend+0x15c>
				prvUnlockQueue( pxQueue );
 8008a80:	4620      	mov	r0, r4
 8008a82:	f7ff fec1 	bl	8008808 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a86:	f000 fcc9 	bl	800941c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008a8a:	f001 fa83 	bl	8009f94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008a90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d3a7      	bcc.n	80089e6 <xQueueGenericSend+0x7a>
 8008a96:	2d02      	cmp	r5, #2
 8008a98:	d0a5      	beq.n	80089e6 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a9a:	9b03      	ldr	r3, [sp, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0d4      	beq.n	8008a4a <xQueueGenericSend+0xde>
				else if( xEntryTimeSet == pdFALSE )
 8008aa0:	2f00      	cmp	r7, #0
 8008aa2:	d0e0      	beq.n	8008a66 <xQueueGenericSend+0xfa>
		taskEXIT_CRITICAL();
 8008aa4:	f001 fa98 	bl	8009fd8 <vPortExitCritical>
		vTaskSuspendAll();
 8008aa8:	f000 fc12 	bl	80092d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008aac:	f001 fa72 	bl	8009f94 <vPortEnterCritical>
 8008ab0:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8008ab4:	b252      	sxtb	r2, r2
 8008ab6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008aba:	d0d9      	beq.n	8008a70 <xQueueGenericSend+0x104>
 8008abc:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8008ac0:	b252      	sxtb	r2, r2
 8008ac2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008ac6:	d0d7      	beq.n	8008a78 <xQueueGenericSend+0x10c>
 8008ac8:	f001 fa86 	bl	8009fd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008acc:	a903      	add	r1, sp, #12
 8008ace:	a804      	add	r0, sp, #16
 8008ad0:	f000 fec2 	bl	8009858 <xTaskCheckForTimeOut>
 8008ad4:	b9d8      	cbnz	r0, 8008b0e <xQueueGenericSend+0x1a2>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f7ff fe2d 	bl	8008736 <prvIsQueueFull>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d0cf      	beq.n	8008a80 <xQueueGenericSend+0x114>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ae0:	9903      	ldr	r1, [sp, #12]
 8008ae2:	f104 0010 	add.w	r0, r4, #16
 8008ae6:	f000 fdb7 	bl	8009658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008aea:	4620      	mov	r0, r4
 8008aec:	f7ff fe8c 	bl	8008808 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008af0:	f000 fc94 	bl	800941c <xTaskResumeAll>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d1c8      	bne.n	8008a8a <xQueueGenericSend+0x11e>
					portYIELD_WITHIN_API();
 8008af8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b00:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	e7bd      	b.n	8008a8a <xQueueGenericSend+0x11e>
			prvUnlockQueue( pxQueue );
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f7ff fe7a 	bl	8008808 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b14:	f000 fc82 	bl	800941c <xTaskResumeAll>
			traceQUEUE_SEND_FAILED( pxQueue );
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f007 fff1 	bl	8010b00 <SEGGER_SYSVIEW_ShrinkId>
 8008b1e:	4601      	mov	r1, r0
 8008b20:	9500      	str	r5, [sp, #0]
 8008b22:	9b03      	ldr	r3, [sp, #12]
 8008b24:	4632      	mov	r2, r6
 8008b26:	205a      	movs	r0, #90	; 0x5a
 8008b28:	f008 fa40 	bl	8010fac <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e779      	b.n	8008a24 <xQueueGenericSend+0xb8>

08008b30 <xQueueGenericSendFromISR>:
{
 8008b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008b34:	b190      	cbz	r0, 8008b5c <xQueueGenericSendFromISR+0x2c>
 8008b36:	460f      	mov	r7, r1
 8008b38:	4616      	mov	r6, r2
 8008b3a:	461c      	mov	r4, r3
 8008b3c:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b3e:	b1b1      	cbz	r1, 8008b6e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b40:	2c02      	cmp	r4, #2
 8008b42:	d120      	bne.n	8008b86 <xQueueGenericSendFromISR+0x56>
 8008b44:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d01d      	beq.n	8008b86 <xQueueGenericSendFromISR+0x56>
 8008b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	e7fe      	b.n	8008b5a <xQueueGenericSendFromISR+0x2a>
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008b6c:	e7fe      	b.n	8008b6c <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d0e5      	beq.n	8008b40 <xQueueGenericSendFromISR+0x10>
 8008b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	e7fe      	b.n	8008b84 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b86:	f001 fb2b 	bl	800a1e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b8a:	f3ef 8911 	mrs	r9, BASEPRI
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b9e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008ba0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d301      	bcc.n	8008baa <xQueueGenericSendFromISR+0x7a>
 8008ba6:	2c02      	cmp	r4, #2
 8008ba8:	d12b      	bne.n	8008c02 <xQueueGenericSendFromISR+0xd2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008baa:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8008bae:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bb2:	6bab      	ldr	r3, [r5, #56]	; 0x38
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	f007 ffa3 	bl	8010b00 <SEGGER_SYSVIEW_ShrinkId>
 8008bba:	4601      	mov	r1, r0
 8008bbc:	4632      	mov	r2, r6
 8008bbe:	2060      	movs	r0, #96	; 0x60
 8008bc0:	f008 f978 	bl	8010eb4 <SEGGER_SYSVIEW_RecordU32x2>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bc4:	4622      	mov	r2, r4
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f7ff fdd0 	bl	800876e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008bce:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8008bd2:	d009      	beq.n	8008be8 <xQueueGenericSendFromISR+0xb8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008bd4:	f108 0301 	add.w	r3, r8, #1
 8008bd8:	b25b      	sxtb	r3, r3
 8008bda:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8008bde:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008be0:	f389 8811 	msr	BASEPRI, r9
}
 8008be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008be8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008bea:	b90b      	cbnz	r3, 8008bf0 <xQueueGenericSendFromISR+0xc0>
			xReturn = pdPASS;
 8008bec:	2001      	movs	r0, #1
 8008bee:	e7f7      	b.n	8008be0 <xQueueGenericSendFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bf0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008bf4:	f000 fd94 	bl	8009720 <xTaskRemoveFromEventList>
 8008bf8:	b168      	cbz	r0, 8008c16 <xQueueGenericSendFromISR+0xe6>
							if( pxHigherPriorityTaskWoken != NULL )
 8008bfa:	b176      	cbz	r6, 8008c1a <xQueueGenericSendFromISR+0xea>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bfc:	2001      	movs	r0, #1
 8008bfe:	6030      	str	r0, [r6, #0]
 8008c00:	e7ee      	b.n	8008be0 <xQueueGenericSendFromISR+0xb0>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008c02:	4628      	mov	r0, r5
 8008c04:	f007 ff7c 	bl	8010b00 <SEGGER_SYSVIEW_ShrinkId>
 8008c08:	4601      	mov	r1, r0
 8008c0a:	4632      	mov	r2, r6
 8008c0c:	2060      	movs	r0, #96	; 0x60
 8008c0e:	f008 f951 	bl	8010eb4 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8008c12:	2000      	movs	r0, #0
 8008c14:	e7e4      	b.n	8008be0 <xQueueGenericSendFromISR+0xb0>
			xReturn = pdPASS;
 8008c16:	2001      	movs	r0, #1
 8008c18:	e7e2      	b.n	8008be0 <xQueueGenericSendFromISR+0xb0>
 8008c1a:	2001      	movs	r0, #1
 8008c1c:	e7e0      	b.n	8008be0 <xQueueGenericSendFromISR+0xb0>

08008c1e <xQueueReceive>:
{
 8008c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c20:	b087      	sub	sp, #28
 8008c22:	9203      	str	r2, [sp, #12]
	configASSERT( ( pxQueue ) );
 8008c24:	b190      	cbz	r0, 8008c4c <xQueueReceive+0x2e>
 8008c26:	460f      	mov	r7, r1
 8008c28:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c2a:	b1c1      	cbz	r1, 8008c5e <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c2c:	f000 fe5c 	bl	80098e8 <xTaskGetSchedulerState>
 8008c30:	4606      	mov	r6, r0
 8008c32:	bb00      	cbnz	r0, 8008c76 <xQueueReceive+0x58>
 8008c34:	9b03      	ldr	r3, [sp, #12]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d07c      	beq.n	8008d34 <xQueueReceive+0x116>
	__asm volatile
 8008c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	e7fe      	b.n	8008c4a <xQueueReceive+0x2c>
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8008c5c:	e7fe      	b.n	8008c5c <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d0e3      	beq.n	8008c2c <xQueueReceive+0xe>
 8008c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	e7fe      	b.n	8008c74 <xQueueReceive+0x56>
 8008c76:	2600      	movs	r6, #0
 8008c78:	e05c      	b.n	8008d34 <xQueueReceive+0x116>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f7ff fdb1 	bl	80087e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8008c82:	4620      	mov	r0, r4
 8008c84:	f007 ff3c 	bl	8010b00 <SEGGER_SYSVIEW_ShrinkId>
 8008c88:	4606      	mov	r6, r0
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	f007 ff38 	bl	8010b00 <SEGGER_SYSVIEW_ShrinkId>
 8008c90:	4602      	mov	r2, r0
 8008c92:	2301      	movs	r3, #1
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	4631      	mov	r1, r6
 8008c9a:	205c      	movs	r0, #92	; 0x5c
 8008c9c:	f008 f986 	bl	8010fac <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ca0:	3d01      	subs	r5, #1
 8008ca2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ca4:	6923      	ldr	r3, [r4, #16]
 8008ca6:	b923      	cbnz	r3, 8008cb2 <xQueueReceive+0x94>
				taskEXIT_CRITICAL();
 8008ca8:	f001 f996 	bl	8009fd8 <vPortExitCritical>
				return pdPASS;
 8008cac:	2001      	movs	r0, #1
}
 8008cae:	b007      	add	sp, #28
 8008cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cb2:	f104 0010 	add.w	r0, r4, #16
 8008cb6:	f000 fd33 	bl	8009720 <xTaskRemoveFromEventList>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	d0f4      	beq.n	8008ca8 <xQueueReceive+0x8a>
						queueYIELD_IF_USING_PREEMPTION();
 8008cbe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	e7e9      	b.n	8008ca8 <xQueueReceive+0x8a>
					taskEXIT_CRITICAL();
 8008cd4:	f001 f980 	bl	8009fd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f007 ff11 	bl	8010b00 <SEGGER_SYSVIEW_ShrinkId>
 8008cde:	4604      	mov	r4, r0
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	f007 ff0d 	bl	8010b00 <SEGGER_SYSVIEW_ShrinkId>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	2301      	movs	r3, #1
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	9b03      	ldr	r3, [sp, #12]
 8008cee:	4621      	mov	r1, r4
 8008cf0:	205c      	movs	r0, #92	; 0x5c
 8008cf2:	f008 f95b 	bl	8010fac <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	e7d9      	b.n	8008cae <xQueueReceive+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cfa:	a804      	add	r0, sp, #16
 8008cfc:	f000 fda0 	bl	8009840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d00:	2601      	movs	r6, #1
 8008d02:	e021      	b.n	8008d48 <xQueueReceive+0x12a>
		prvLockQueue( pxQueue );
 8008d04:	2300      	movs	r3, #0
 8008d06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008d0a:	e029      	b.n	8008d60 <xQueueReceive+0x142>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d12:	e02b      	b.n	8008d6c <xQueueReceive+0x14e>
				prvUnlockQueue( pxQueue );
 8008d14:	4620      	mov	r0, r4
 8008d16:	f7ff fd77 	bl	8008808 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d1a:	f000 fb7f 	bl	800941c <xTaskResumeAll>
 8008d1e:	e009      	b.n	8008d34 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8008d20:	4620      	mov	r0, r4
 8008d22:	f7ff fd71 	bl	8008808 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d26:	f000 fb79 	bl	800941c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f7ff fd12 	bl	8008754 <prvIsQueueEmpty>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d13f      	bne.n	8008db4 <xQueueReceive+0x196>
		taskENTER_CRITICAL();
 8008d34:	f001 f92e 	bl	8009f94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d38:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d3a:	2d00      	cmp	r5, #0
 8008d3c:	d19d      	bne.n	8008c7a <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0c7      	beq.n	8008cd4 <xQueueReceive+0xb6>
				else if( xEntryTimeSet == pdFALSE )
 8008d44:	2e00      	cmp	r6, #0
 8008d46:	d0d8      	beq.n	8008cfa <xQueueReceive+0xdc>
		taskEXIT_CRITICAL();
 8008d48:	f001 f946 	bl	8009fd8 <vPortExitCritical>
		vTaskSuspendAll();
 8008d4c:	f000 fac0 	bl	80092d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d50:	f001 f920 	bl	8009f94 <vPortEnterCritical>
 8008d54:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008d58:	b25b      	sxtb	r3, r3
 8008d5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d5e:	d0d1      	beq.n	8008d04 <xQueueReceive+0xe6>
 8008d60:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008d64:	b25b      	sxtb	r3, r3
 8008d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d6a:	d0cf      	beq.n	8008d0c <xQueueReceive+0xee>
 8008d6c:	f001 f934 	bl	8009fd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d70:	a903      	add	r1, sp, #12
 8008d72:	a804      	add	r0, sp, #16
 8008d74:	f000 fd70 	bl	8009858 <xTaskCheckForTimeOut>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d1d1      	bne.n	8008d20 <xQueueReceive+0x102>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f7ff fce9 	bl	8008754 <prvIsQueueEmpty>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d0c6      	beq.n	8008d14 <xQueueReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d86:	9903      	ldr	r1, [sp, #12]
 8008d88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d8c:	f000 fc64 	bl	8009658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d90:	4620      	mov	r0, r4
 8008d92:	f7ff fd39 	bl	8008808 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d96:	f000 fb41 	bl	800941c <xTaskResumeAll>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d1ca      	bne.n	8008d34 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8008d9e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	e7bf      	b.n	8008d34 <xQueueReceive+0x116>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008db4:	4620      	mov	r0, r4
 8008db6:	f007 fea3 	bl	8010b00 <SEGGER_SYSVIEW_ShrinkId>
 8008dba:	4604      	mov	r4, r0
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	f007 fe9f 	bl	8010b00 <SEGGER_SYSVIEW_ShrinkId>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	9b03      	ldr	r3, [sp, #12]
 8008dca:	4621      	mov	r1, r4
 8008dcc:	205c      	movs	r0, #92	; 0x5c
 8008dce:	f008 f8ed 	bl	8010fac <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	e76b      	b.n	8008cae <xQueueReceive+0x90>
	...

08008dd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008dd8:	b510      	push	{r4, lr}
 8008dda:	460c      	mov	r4, r1
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ddc:	2300      	movs	r3, #0
 8008dde:	2b07      	cmp	r3, #7
 8008de0:	d812      	bhi.n	8008e08 <vQueueAddToRegistry+0x30>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008de2:	4a0a      	ldr	r2, [pc, #40]	; (8008e0c <vQueueAddToRegistry+0x34>)
 8008de4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008de8:	b10a      	cbz	r2, 8008dee <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dea:	3301      	adds	r3, #1
 8008dec:	e7f7      	b.n	8008dde <vQueueAddToRegistry+0x6>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008dee:	4a07      	ldr	r2, [pc, #28]	; (8008e0c <vQueueAddToRegistry+0x34>)
 8008df0:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008df4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008df8:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8008dfa:	f007 fe81 	bl	8010b00 <SEGGER_SYSVIEW_ShrinkId>
 8008dfe:	4601      	mov	r1, r0
 8008e00:	4622      	mov	r2, r4
 8008e02:	2071      	movs	r0, #113	; 0x71
 8008e04:	f008 f856 	bl	8010eb4 <SEGGER_SYSVIEW_RecordU32x2>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e08:	bd10      	pop	{r4, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20001ddc 	.word	0x20001ddc

08008e10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	4604      	mov	r4, r0
 8008e14:	460d      	mov	r5, r1
 8008e16:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e18:	f001 f8bc 	bl	8009f94 <vPortEnterCritical>
 8008e1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008e20:	b25b      	sxtb	r3, r3
 8008e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e26:	d00d      	beq.n	8008e44 <vQueueWaitForMessageRestricted+0x34>
 8008e28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008e2c:	b25b      	sxtb	r3, r3
 8008e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e32:	d00b      	beq.n	8008e4c <vQueueWaitForMessageRestricted+0x3c>
 8008e34:	f001 f8d0 	bl	8009fd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e3a:	b15b      	cbz	r3, 8008e54 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f7ff fce3 	bl	8008808 <prvUnlockQueue>
	}
 8008e42:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8008e44:	2300      	movs	r3, #0
 8008e46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008e4a:	e7ed      	b.n	8008e28 <vQueueWaitForMessageRestricted+0x18>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e52:	e7ef      	b.n	8008e34 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e54:	4632      	mov	r2, r6
 8008e56:	4629      	mov	r1, r5
 8008e58:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008e5c:	f000 fc40 	bl	80096e0 <vTaskPlaceOnEventListRestricted>
 8008e60:	e7ec      	b.n	8008e3c <vQueueWaitForMessageRestricted+0x2c>
	...

08008e64 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e64:	4b08      	ldr	r3, [pc, #32]	; (8008e88 <prvResetNextTaskUnblockTime+0x24>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	b923      	cbnz	r3, 8008e76 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e6c:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <prvResetNextTaskUnblockTime+0x28>)
 8008e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e76:	4b04      	ldr	r3, [pc, #16]	; (8008e88 <prvResetNextTaskUnblockTime+0x24>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	4b02      	ldr	r3, [pc, #8]	; (8008e8c <prvResetNextTaskUnblockTime+0x28>)
 8008e82:	601a      	str	r2, [r3, #0]
	}
}
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	20001e20 	.word	0x20001e20
 8008e8c:	20001efc 	.word	0x20001efc

08008e90 <prvInitialiseNewTask>:
{
 8008e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e94:	4680      	mov	r8, r0
 8008e96:	460d      	mov	r5, r1
 8008e98:	4617      	mov	r7, r2
 8008e9a:	4699      	mov	r9, r3
 8008e9c:	9e08      	ldr	r6, [sp, #32]
 8008e9e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008ea2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ea4:	0092      	lsls	r2, r2, #2
 8008ea6:	21a5      	movs	r1, #165	; 0xa5
 8008ea8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008eaa:	f008 fe6f 	bl	8011b8c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008eae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008eb0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8008eb4:	3a01      	subs	r2, #1
 8008eb6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008eba:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8008ebe:	2d00      	cmp	r5, #0
 8008ec0:	d043      	beq.n	8008f4a <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ec2:	f04f 0c00 	mov.w	ip, #0
 8008ec6:	f1bc 0f0f 	cmp.w	ip, #15
 8008eca:	d809      	bhi.n	8008ee0 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ecc:	f815 300c 	ldrb.w	r3, [r5, ip]
 8008ed0:	eb04 020c 	add.w	r2, r4, ip
 8008ed4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8008ed8:	b113      	cbz	r3, 8008ee0 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008eda:	f10c 0c01 	add.w	ip, ip, #1
 8008ede:	e7f2      	b.n	8008ec6 <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ee6:	2e06      	cmp	r6, #6
 8008ee8:	d900      	bls.n	8008eec <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008eea:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8008eec:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008eee:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ef0:	2500      	movs	r5, #0
 8008ef2:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ef4:	1d20      	adds	r0, r4, #4
 8008ef6:	f7ff fbe4 	bl	80086c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008efa:	f104 0018 	add.w	r0, r4, #24
 8008efe:	f7ff fbe0 	bl	80086c2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f02:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f04:	f1c6 0607 	rsb	r6, r6, #7
 8008f08:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f0a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008f0c:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ulNotifiedValue = 0;
 8008f0e:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f12:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f16:	224c      	movs	r2, #76	; 0x4c
 8008f18:	4629      	mov	r1, r5
 8008f1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f1e:	f008 fe35 	bl	8011b8c <memset>
 8008f22:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <prvInitialiseNewTask+0xc4>)
 8008f24:	65e3      	str	r3, [r4, #92]	; 0x5c
 8008f26:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008f2a:	6622      	str	r2, [r4, #96]	; 0x60
 8008f2c:	33d0      	adds	r3, #208	; 0xd0
 8008f2e:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f30:	464a      	mov	r2, r9
 8008f32:	4641      	mov	r1, r8
 8008f34:	4638      	mov	r0, r7
 8008f36:	f000 ffff 	bl	8009f38 <pxPortInitialiseStack>
 8008f3a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008f3c:	f1ba 0f00 	cmp.w	sl, #0
 8008f40:	d001      	beq.n	8008f46 <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f42:	f8ca 4000 	str.w	r4, [sl]
}
 8008f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008f50:	e7c9      	b.n	8008ee6 <prvInitialiseNewTask+0x56>
 8008f52:	bf00      	nop
 8008f54:	2000c7f4 	.word	0x2000c7f4

08008f58 <prvInitialiseTaskLists>:
{
 8008f58:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f5a:	2400      	movs	r4, #0
 8008f5c:	e007      	b.n	8008f6e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f5e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008f62:	0093      	lsls	r3, r2, #2
 8008f64:	480e      	ldr	r0, [pc, #56]	; (8008fa0 <prvInitialiseTaskLists+0x48>)
 8008f66:	4418      	add	r0, r3
 8008f68:	f7ff fba0 	bl	80086ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f6c:	3401      	adds	r4, #1
 8008f6e:	2c06      	cmp	r4, #6
 8008f70:	d9f5      	bls.n	8008f5e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8008f72:	4d0c      	ldr	r5, [pc, #48]	; (8008fa4 <prvInitialiseTaskLists+0x4c>)
 8008f74:	4628      	mov	r0, r5
 8008f76:	f7ff fb99 	bl	80086ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f7a:	4c0b      	ldr	r4, [pc, #44]	; (8008fa8 <prvInitialiseTaskLists+0x50>)
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f7ff fb95 	bl	80086ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f82:	480a      	ldr	r0, [pc, #40]	; (8008fac <prvInitialiseTaskLists+0x54>)
 8008f84:	f7ff fb92 	bl	80086ac <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8008f88:	4809      	ldr	r0, [pc, #36]	; (8008fb0 <prvInitialiseTaskLists+0x58>)
 8008f8a:	f7ff fb8f 	bl	80086ac <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008f8e:	4809      	ldr	r0, [pc, #36]	; (8008fb4 <prvInitialiseTaskLists+0x5c>)
 8008f90:	f7ff fb8c 	bl	80086ac <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f94:	4b08      	ldr	r3, [pc, #32]	; (8008fb8 <prvInitialiseTaskLists+0x60>)
 8008f96:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f98:	4b08      	ldr	r3, [pc, #32]	; (8008fbc <prvInitialiseTaskLists+0x64>)
 8008f9a:	601c      	str	r4, [r3, #0]
}
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20001e28 	.word	0x20001e28
 8008fa4:	20001ed0 	.word	0x20001ed0
 8008fa8:	20001ee4 	.word	0x20001ee4
 8008fac:	20001f08 	.word	0x20001f08
 8008fb0:	20001f34 	.word	0x20001f34
 8008fb4:	20001f20 	.word	0x20001f20
 8008fb8:	20001e20 	.word	0x20001e20
 8008fbc:	20001e24 	.word	0x20001e24

08008fc0 <prvAddNewTaskToReadyList>:
{
 8008fc0:	b510      	push	{r4, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008fc6:	f000 ffe5 	bl	8009f94 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008fca:	4a2b      	ldr	r2, [pc, #172]	; (8009078 <prvAddNewTaskToReadyList+0xb8>)
 8008fcc:	6813      	ldr	r3, [r2, #0]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008fd2:	4b2a      	ldr	r3, [pc, #168]	; (800907c <prvAddNewTaskToReadyList+0xbc>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	b15b      	cbz	r3, 8008ff0 <prvAddNewTaskToReadyList+0x30>
			if( xSchedulerRunning == pdFALSE )
 8008fd8:	4b29      	ldr	r3, [pc, #164]	; (8009080 <prvAddNewTaskToReadyList+0xc0>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	b96b      	cbnz	r3, 8008ffa <prvAddNewTaskToReadyList+0x3a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fde:	4b27      	ldr	r3, [pc, #156]	; (800907c <prvAddNewTaskToReadyList+0xbc>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d807      	bhi.n	8008ffa <prvAddNewTaskToReadyList+0x3a>
					pxCurrentTCB = pxNewTCB;
 8008fea:	4b24      	ldr	r3, [pc, #144]	; (800907c <prvAddNewTaskToReadyList+0xbc>)
 8008fec:	601c      	str	r4, [r3, #0]
 8008fee:	e004      	b.n	8008ffa <prvAddNewTaskToReadyList+0x3a>
			pxCurrentTCB = pxNewTCB;
 8008ff0:	4b22      	ldr	r3, [pc, #136]	; (800907c <prvAddNewTaskToReadyList+0xbc>)
 8008ff2:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ff4:	6813      	ldr	r3, [r2, #0]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d03b      	beq.n	8009072 <prvAddNewTaskToReadyList+0xb2>
		uxTaskNumber++;
 8008ffa:	4a22      	ldr	r2, [pc, #136]	; (8009084 <prvAddNewTaskToReadyList+0xc4>)
 8008ffc:	6813      	ldr	r3, [r2, #0]
 8008ffe:	3301      	adds	r3, #1
 8009000:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009002:	6463      	str	r3, [r4, #68]	; 0x44
		traceTASK_CREATE( pxNewTCB );
 8009004:	b164      	cbz	r4, 8009020 <prvAddNewTaskToReadyList+0x60>
 8009006:	4620      	mov	r0, r4
 8009008:	f008 f902 	bl	8011210 <SEGGER_SYSVIEW_OnTaskCreate>
 800900c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800900e:	6822      	ldr	r2, [r4, #0]
 8009010:	1ad2      	subs	r2, r2, r3
 8009012:	9200      	str	r2, [sp, #0]
 8009014:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009016:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800901a:	4620      	mov	r0, r4
 800901c:	f007 fab4 	bl	8010588 <SYSVIEW_AddTask>
		prvAddTaskToReadyList( pxNewTCB );
 8009020:	4620      	mov	r0, r4
 8009022:	f008 f93d 	bl	80112a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009026:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009028:	2301      	movs	r3, #1
 800902a:	4083      	lsls	r3, r0
 800902c:	4a16      	ldr	r2, [pc, #88]	; (8009088 <prvAddNewTaskToReadyList+0xc8>)
 800902e:	6811      	ldr	r1, [r2, #0]
 8009030:	430b      	orrs	r3, r1
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009038:	1d21      	adds	r1, r4, #4
 800903a:	4b14      	ldr	r3, [pc, #80]	; (800908c <prvAddNewTaskToReadyList+0xcc>)
 800903c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009040:	f7ff fb42 	bl	80086c8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009044:	f000 ffc8 	bl	8009fd8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009048:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <prvAddNewTaskToReadyList+0xc0>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	b17b      	cbz	r3, 800906e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800904e:	4b0b      	ldr	r3, [pc, #44]	; (800907c <prvAddNewTaskToReadyList+0xbc>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009054:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009056:	429a      	cmp	r2, r3
 8009058:	d209      	bcs.n	800906e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800905a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800905e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009062:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	f3bf 8f6f 	isb	sy
}
 800906e:	b002      	add	sp, #8
 8009070:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009072:	f7ff ff71 	bl	8008f58 <prvInitialiseTaskLists>
 8009076:	e7c0      	b.n	8008ffa <prvAddNewTaskToReadyList+0x3a>
 8009078:	20001ebc 	.word	0x20001ebc
 800907c:	20001e1c 	.word	0x20001e1c
 8009080:	20001f1c 	.word	0x20001f1c
 8009084:	20001ec8 	.word	0x20001ec8
 8009088:	20001ecc 	.word	0x20001ecc
 800908c:	20001e28 	.word	0x20001e28

08009090 <prvDeleteTCB>:
	{
 8009090:	b510      	push	{r4, lr}
 8009092:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009094:	3058      	adds	r0, #88	; 0x58
 8009096:	f008 fd91 	bl	8011bbc <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800909a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800909c:	f001 f9b0 	bl	800a400 <vPortFree>
			vPortFree( pxTCB );
 80090a0:	4620      	mov	r0, r4
 80090a2:	f001 f9ad 	bl	800a400 <vPortFree>
	}
 80090a6:	bd10      	pop	{r4, pc}

080090a8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090a8:	4b0f      	ldr	r3, [pc, #60]	; (80090e8 <prvCheckTasksWaitingTermination+0x40>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	b1d3      	cbz	r3, 80090e4 <prvCheckTasksWaitingTermination+0x3c>
{
 80090ae:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80090b0:	f000 ff70 	bl	8009f94 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b4:	4b0d      	ldr	r3, [pc, #52]	; (80090ec <prvCheckTasksWaitingTermination+0x44>)
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090ba:	1d20      	adds	r0, r4, #4
 80090bc:	f7ff fb28 	bl	8008710 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090c0:	4a0b      	ldr	r2, [pc, #44]	; (80090f0 <prvCheckTasksWaitingTermination+0x48>)
 80090c2:	6813      	ldr	r3, [r2, #0]
 80090c4:	3b01      	subs	r3, #1
 80090c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80090c8:	4a07      	ldr	r2, [pc, #28]	; (80090e8 <prvCheckTasksWaitingTermination+0x40>)
 80090ca:	6813      	ldr	r3, [r2, #0]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80090d0:	f000 ff82 	bl	8009fd8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80090d4:	4620      	mov	r0, r4
 80090d6:	f7ff ffdb 	bl	8009090 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090da:	4b03      	ldr	r3, [pc, #12]	; (80090e8 <prvCheckTasksWaitingTermination+0x40>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e6      	bne.n	80090b0 <prvCheckTasksWaitingTermination+0x8>
}
 80090e2:	bd10      	pop	{r4, pc}
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	20001ec0 	.word	0x20001ec0
 80090ec:	20001f34 	.word	0x20001f34
 80090f0:	20001ebc 	.word	0x20001ebc

080090f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	4604      	mov	r4, r0
 80090f8:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090fa:	4b1d      	ldr	r3, [pc, #116]	; (8009170 <prvAddCurrentTaskToDelayedList+0x7c>)
 80090fc:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090fe:	4b1d      	ldr	r3, [pc, #116]	; (8009174 <prvAddCurrentTaskToDelayedList+0x80>)
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	3004      	adds	r0, #4
 8009104:	f7ff fb04 	bl	8008710 <uxListRemove>
 8009108:	b948      	cbnz	r0, 800911e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800910a:	4b1a      	ldr	r3, [pc, #104]	; (8009174 <prvAddCurrentTaskToDelayedList+0x80>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009110:	2201      	movs	r2, #1
 8009112:	409a      	lsls	r2, r3
 8009114:	4918      	ldr	r1, [pc, #96]	; (8009178 <prvAddCurrentTaskToDelayedList+0x84>)
 8009116:	680b      	ldr	r3, [r1, #0]
 8009118:	ea23 0302 	bic.w	r3, r3, r2
 800911c:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800911e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8009122:	d00d      	beq.n	8009140 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009124:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009126:	4b13      	ldr	r3, [pc, #76]	; (8009174 <prvAddCurrentTaskToDelayedList+0x80>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800912c:	42a6      	cmp	r6, r4
 800912e:	d910      	bls.n	8009152 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009130:	4b12      	ldr	r3, [pc, #72]	; (800917c <prvAddCurrentTaskToDelayedList+0x88>)
 8009132:	6818      	ldr	r0, [r3, #0]
 8009134:	4b0f      	ldr	r3, [pc, #60]	; (8009174 <prvAddCurrentTaskToDelayedList+0x80>)
 8009136:	6819      	ldr	r1, [r3, #0]
 8009138:	3104      	adds	r1, #4
 800913a:	f7ff fad0 	bl	80086de <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800913e:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009140:	2d00      	cmp	r5, #0
 8009142:	d0ef      	beq.n	8009124 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009144:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <prvAddCurrentTaskToDelayedList+0x80>)
 8009146:	6819      	ldr	r1, [r3, #0]
 8009148:	3104      	adds	r1, #4
 800914a:	480d      	ldr	r0, [pc, #52]	; (8009180 <prvAddCurrentTaskToDelayedList+0x8c>)
 800914c:	f7ff fabc 	bl	80086c8 <vListInsertEnd>
 8009150:	e7f5      	b.n	800913e <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009152:	4b0c      	ldr	r3, [pc, #48]	; (8009184 <prvAddCurrentTaskToDelayedList+0x90>)
 8009154:	6818      	ldr	r0, [r3, #0]
 8009156:	4b07      	ldr	r3, [pc, #28]	; (8009174 <prvAddCurrentTaskToDelayedList+0x80>)
 8009158:	6819      	ldr	r1, [r3, #0]
 800915a:	3104      	adds	r1, #4
 800915c:	f7ff fabf 	bl	80086de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009160:	4b09      	ldr	r3, [pc, #36]	; (8009188 <prvAddCurrentTaskToDelayedList+0x94>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	42a3      	cmp	r3, r4
 8009166:	d9ea      	bls.n	800913e <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 8009168:	4b07      	ldr	r3, [pc, #28]	; (8009188 <prvAddCurrentTaskToDelayedList+0x94>)
 800916a:	601c      	str	r4, [r3, #0]
}
 800916c:	e7e7      	b.n	800913e <prvAddCurrentTaskToDelayedList+0x4a>
 800916e:	bf00      	nop
 8009170:	20001f48 	.word	0x20001f48
 8009174:	20001e1c 	.word	0x20001e1c
 8009178:	20001ecc 	.word	0x20001ecc
 800917c:	20001e24 	.word	0x20001e24
 8009180:	20001f20 	.word	0x20001f20
 8009184:	20001e20 	.word	0x20001e20
 8009188:	20001efc 	.word	0x20001efc

0800918c <prvIdleTask>:
{
 800918c:	b508      	push	{r3, lr}
 800918e:	e00b      	b.n	80091a8 <prvIdleTask+0x1c>
				taskYIELD();
 8009190:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009198:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80091a4:	f7f7 fa88 	bl	80006b8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80091a8:	f7ff ff7e 	bl	80090a8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091ac:	4b02      	ldr	r3, [pc, #8]	; (80091b8 <prvIdleTask+0x2c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d8ed      	bhi.n	8009190 <prvIdleTask+0x4>
 80091b4:	e7f6      	b.n	80091a4 <prvIdleTask+0x18>
 80091b6:	bf00      	nop
 80091b8:	20001e28 	.word	0x20001e28

080091bc <xTaskCreate>:
	{
 80091bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091c0:	b085      	sub	sp, #20
 80091c2:	4607      	mov	r7, r0
 80091c4:	4688      	mov	r8, r1
 80091c6:	4614      	mov	r4, r2
 80091c8:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091ca:	0090      	lsls	r0, r2, #2
 80091cc:	f001 f89a 	bl	800a304 <pvPortMalloc>
			if( pxStack != NULL )
 80091d0:	b1f0      	cbz	r0, 8009210 <xTaskCreate+0x54>
 80091d2:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091d4:	20ac      	movs	r0, #172	; 0xac
 80091d6:	f001 f895 	bl	800a304 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80091da:	4605      	mov	r5, r0
 80091dc:	b1a0      	cbz	r0, 8009208 <xTaskCreate+0x4c>
					pxNewTCB->pxStack = pxStack;
 80091de:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80091e2:	b1d5      	cbz	r5, 800921a <xTaskCreate+0x5e>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091e4:	2300      	movs	r3, #0
 80091e6:	9303      	str	r3, [sp, #12]
 80091e8:	9502      	str	r5, [sp, #8]
 80091ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	4633      	mov	r3, r6
 80091f4:	4622      	mov	r2, r4
 80091f6:	4641      	mov	r1, r8
 80091f8:	4638      	mov	r0, r7
 80091fa:	f7ff fe49 	bl	8008e90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091fe:	4628      	mov	r0, r5
 8009200:	f7ff fede 	bl	8008fc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009204:	2001      	movs	r0, #1
 8009206:	e005      	b.n	8009214 <xTaskCreate+0x58>
					vPortFree( pxStack );
 8009208:	4648      	mov	r0, r9
 800920a:	f001 f8f9 	bl	800a400 <vPortFree>
 800920e:	e7e8      	b.n	80091e2 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8009214:	b005      	add	sp, #20
 8009216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800921a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800921e:	e7f9      	b.n	8009214 <xTaskCreate+0x58>

08009220 <vTaskStartScheduler>:
{
 8009220:	b510      	push	{r4, lr}
 8009222:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
 8009224:	4b22      	ldr	r3, [pc, #136]	; (80092b0 <vTaskStartScheduler+0x90>)
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	2300      	movs	r3, #0
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	2280      	movs	r2, #128	; 0x80
 800922e:	4921      	ldr	r1, [pc, #132]	; (80092b4 <vTaskStartScheduler+0x94>)
 8009230:	4821      	ldr	r0, [pc, #132]	; (80092b8 <vTaskStartScheduler+0x98>)
 8009232:	f7ff ffc3 	bl	80091bc <xTaskCreate>
		if( xReturn == pdPASS )
 8009236:	2801      	cmp	r0, #1
 8009238:	d006      	beq.n	8009248 <vTaskStartScheduler+0x28>
	if( xReturn == pdPASS )
 800923a:	2801      	cmp	r0, #1
 800923c:	d007      	beq.n	800924e <vTaskStartScheduler+0x2e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800923e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009242:	d02c      	beq.n	800929e <vTaskStartScheduler+0x7e>
}
 8009244:	b002      	add	sp, #8
 8009246:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
 8009248:	f000 fc52 	bl	8009af0 <xTimerCreateTimerTask>
 800924c:	e7f5      	b.n	800923a <vTaskStartScheduler+0x1a>
 800924e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800925e:	4c17      	ldr	r4, [pc, #92]	; (80092bc <vTaskStartScheduler+0x9c>)
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	3358      	adds	r3, #88	; 0x58
 8009264:	4a16      	ldr	r2, [pc, #88]	; (80092c0 <vTaskStartScheduler+0xa0>)
 8009266:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8009268:	4b16      	ldr	r3, [pc, #88]	; (80092c4 <vTaskStartScheduler+0xa4>)
 800926a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800926e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009270:	4b15      	ldr	r3, [pc, #84]	; (80092c8 <vTaskStartScheduler+0xa8>)
 8009272:	2201      	movs	r2, #1
 8009274:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009276:	4b15      	ldr	r3, [pc, #84]	; (80092cc <vTaskStartScheduler+0xac>)
 8009278:	2200      	movs	r2, #0
 800927a:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800927c:	f7f7 fa19 	bl	80006b2 <configureTimerForRunTimeStats>
		traceTASK_SWITCHED_IN();
 8009280:	6822      	ldr	r2, [r4, #0]
 8009282:	4b0b      	ldr	r3, [pc, #44]	; (80092b0 <vTaskStartScheduler+0x90>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	429a      	cmp	r2, r3
 8009288:	d006      	beq.n	8009298 <vTaskStartScheduler+0x78>
 800928a:	4b0c      	ldr	r3, [pc, #48]	; (80092bc <vTaskStartScheduler+0x9c>)
 800928c:	6818      	ldr	r0, [r3, #0]
 800928e:	f007 ffe3 	bl	8011258 <SEGGER_SYSVIEW_OnTaskStartExec>
		if( xPortStartScheduler() != pdFALSE )
 8009292:	f000 ff19 	bl	800a0c8 <xPortStartScheduler>
 8009296:	e7d5      	b.n	8009244 <vTaskStartScheduler+0x24>
		traceTASK_SWITCHED_IN();
 8009298:	f007 ffa6 	bl	80111e8 <SEGGER_SYSVIEW_OnIdle>
 800929c:	e7f9      	b.n	8009292 <vTaskStartScheduler+0x72>
 800929e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092ae:	e7fe      	b.n	80092ae <vTaskStartScheduler+0x8e>
 80092b0:	20001ef8 	.word	0x20001ef8
 80092b4:	0801303c 	.word	0x0801303c
 80092b8:	0800918d 	.word	0x0800918d
 80092bc:	20001e1c 	.word	0x20001e1c
 80092c0:	2000165c 	.word	0x2000165c
 80092c4:	20001efc 	.word	0x20001efc
 80092c8:	20001f1c 	.word	0x20001f1c
 80092cc:	20001f48 	.word	0x20001f48

080092d0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80092d0:	4a02      	ldr	r2, [pc, #8]	; (80092dc <vTaskSuspendAll+0xc>)
 80092d2:	6813      	ldr	r3, [r2, #0]
 80092d4:	3301      	adds	r3, #1
 80092d6:	6013      	str	r3, [r2, #0]
}
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	20001ec4 	.word	0x20001ec4

080092e0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80092e0:	4b01      	ldr	r3, [pc, #4]	; (80092e8 <xTaskGetTickCount+0x8>)
 80092e2:	6818      	ldr	r0, [r3, #0]
}
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	20001f48 	.word	0x20001f48

080092ec <xTaskGetTickCountFromISR>:
{
 80092ec:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092ee:	f000 ff77 	bl	800a1e0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80092f2:	4b01      	ldr	r3, [pc, #4]	; (80092f8 <xTaskGetTickCountFromISR+0xc>)
 80092f4:	6818      	ldr	r0, [r3, #0]
}
 80092f6:	bd08      	pop	{r3, pc}
 80092f8:	20001f48 	.word	0x20001f48

080092fc <xTaskIncrementTick>:
{
 80092fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092fe:	4b3c      	ldr	r3, [pc, #240]	; (80093f0 <xTaskIncrementTick+0xf4>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d16c      	bne.n	80093e0 <xTaskIncrementTick+0xe4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009306:	4b3b      	ldr	r3, [pc, #236]	; (80093f4 <xTaskIncrementTick+0xf8>)
 8009308:	681d      	ldr	r5, [r3, #0]
 800930a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800930c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800930e:	b9c5      	cbnz	r5, 8009342 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009310:	4b39      	ldr	r3, [pc, #228]	; (80093f8 <xTaskIncrementTick+0xfc>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	b143      	cbz	r3, 800932a <xTaskIncrementTick+0x2e>
 8009318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	e7fe      	b.n	8009328 <xTaskIncrementTick+0x2c>
 800932a:	4a33      	ldr	r2, [pc, #204]	; (80093f8 <xTaskIncrementTick+0xfc>)
 800932c:	6811      	ldr	r1, [r2, #0]
 800932e:	4b33      	ldr	r3, [pc, #204]	; (80093fc <xTaskIncrementTick+0x100>)
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	6010      	str	r0, [r2, #0]
 8009334:	6019      	str	r1, [r3, #0]
 8009336:	4a32      	ldr	r2, [pc, #200]	; (8009400 <xTaskIncrementTick+0x104>)
 8009338:	6813      	ldr	r3, [r2, #0]
 800933a:	3301      	adds	r3, #1
 800933c:	6013      	str	r3, [r2, #0]
 800933e:	f7ff fd91 	bl	8008e64 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009342:	4b30      	ldr	r3, [pc, #192]	; (8009404 <xTaskIncrementTick+0x108>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	42ab      	cmp	r3, r5
 8009348:	d940      	bls.n	80093cc <xTaskIncrementTick+0xd0>
BaseType_t xSwitchRequired = pdFALSE;
 800934a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800934c:	4b2e      	ldr	r3, [pc, #184]	; (8009408 <xTaskIncrementTick+0x10c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009352:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009356:	009a      	lsls	r2, r3, #2
 8009358:	4b2c      	ldr	r3, [pc, #176]	; (800940c <xTaskIncrementTick+0x110>)
 800935a:	589b      	ldr	r3, [r3, r2]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d900      	bls.n	8009362 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8009360:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8009362:	4b2b      	ldr	r3, [pc, #172]	; (8009410 <xTaskIncrementTick+0x114>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d03f      	beq.n	80093ea <xTaskIncrementTick+0xee>
				xSwitchRequired = pdTRUE;
 800936a:	2701      	movs	r7, #1
	return xSwitchRequired;
 800936c:	e03d      	b.n	80093ea <xTaskIncrementTick+0xee>
							xSwitchRequired = pdTRUE;
 800936e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009370:	4b21      	ldr	r3, [pc, #132]	; (80093f8 <xTaskIncrementTick+0xfc>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	b35b      	cbz	r3, 80093d0 <xTaskIncrementTick+0xd4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009378:	4b1f      	ldr	r3, [pc, #124]	; (80093f8 <xTaskIncrementTick+0xfc>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009380:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8009382:	429d      	cmp	r5, r3
 8009384:	d329      	bcc.n	80093da <xTaskIncrementTick+0xde>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009386:	1d26      	adds	r6, r4, #4
 8009388:	4630      	mov	r0, r6
 800938a:	f7ff f9c1 	bl	8008710 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800938e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009390:	b11b      	cbz	r3, 800939a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009392:	f104 0018 	add.w	r0, r4, #24
 8009396:	f7ff f9bb 	bl	8008710 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800939a:	4620      	mov	r0, r4
 800939c:	f007 ff80 	bl	80112a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80093a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80093a2:	2201      	movs	r2, #1
 80093a4:	409a      	lsls	r2, r3
 80093a6:	491b      	ldr	r1, [pc, #108]	; (8009414 <xTaskIncrementTick+0x118>)
 80093a8:	6808      	ldr	r0, [r1, #0]
 80093aa:	4302      	orrs	r2, r0
 80093ac:	600a      	str	r2, [r1, #0]
 80093ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80093b2:	009a      	lsls	r2, r3, #2
 80093b4:	4631      	mov	r1, r6
 80093b6:	4815      	ldr	r0, [pc, #84]	; (800940c <xTaskIncrementTick+0x110>)
 80093b8:	4410      	add	r0, r2
 80093ba:	f7ff f985 	bl	80086c8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80093c0:	4b11      	ldr	r3, [pc, #68]	; (8009408 <xTaskIncrementTick+0x10c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d2d1      	bcs.n	800936e <xTaskIncrementTick+0x72>
 80093ca:	e7d1      	b.n	8009370 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 80093cc:	2700      	movs	r7, #0
 80093ce:	e7cf      	b.n	8009370 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093d0:	4b0c      	ldr	r3, [pc, #48]	; (8009404 <xTaskIncrementTick+0x108>)
 80093d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093d6:	601a      	str	r2, [r3, #0]
					break;
 80093d8:	e7b8      	b.n	800934c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80093da:	4a0a      	ldr	r2, [pc, #40]	; (8009404 <xTaskIncrementTick+0x108>)
 80093dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80093de:	e7b5      	b.n	800934c <xTaskIncrementTick+0x50>
		++xPendedTicks;
 80093e0:	4a0d      	ldr	r2, [pc, #52]	; (8009418 <xTaskIncrementTick+0x11c>)
 80093e2:	6813      	ldr	r3, [r2, #0]
 80093e4:	3301      	adds	r3, #1
 80093e6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80093e8:	2700      	movs	r7, #0
}
 80093ea:	4638      	mov	r0, r7
 80093ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093ee:	bf00      	nop
 80093f0:	20001ec4 	.word	0x20001ec4
 80093f4:	20001f48 	.word	0x20001f48
 80093f8:	20001e20 	.word	0x20001e20
 80093fc:	20001e24 	.word	0x20001e24
 8009400:	20001f00 	.word	0x20001f00
 8009404:	20001efc 	.word	0x20001efc
 8009408:	20001e1c 	.word	0x20001e1c
 800940c:	20001e28 	.word	0x20001e28
 8009410:	20001f4c 	.word	0x20001f4c
 8009414:	20001ecc 	.word	0x20001ecc
 8009418:	20001f04 	.word	0x20001f04

0800941c <xTaskResumeAll>:
{
 800941c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800941e:	4b36      	ldr	r3, [pc, #216]	; (80094f8 <xTaskResumeAll+0xdc>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	b943      	cbnz	r3, 8009436 <xTaskResumeAll+0x1a>
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	e7fe      	b.n	8009434 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8009436:	f000 fdad 	bl	8009f94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800943a:	4b2f      	ldr	r3, [pc, #188]	; (80094f8 <xTaskResumeAll+0xdc>)
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	3a01      	subs	r2, #1
 8009440:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d152      	bne.n	80094ee <xTaskResumeAll+0xd2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009448:	4b2c      	ldr	r3, [pc, #176]	; (80094fc <xTaskResumeAll+0xe0>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	b90b      	cbnz	r3, 8009452 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800944e:	2400      	movs	r4, #0
 8009450:	e04e      	b.n	80094f0 <xTaskResumeAll+0xd4>
TCB_t *pxTCB = NULL;
 8009452:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009454:	4b2a      	ldr	r3, [pc, #168]	; (8009500 <xTaskResumeAll+0xe4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	b333      	cbz	r3, 80094a8 <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800945a:	4b29      	ldr	r3, [pc, #164]	; (8009500 <xTaskResumeAll+0xe4>)
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009460:	f104 0018 	add.w	r0, r4, #24
 8009464:	f7ff f954 	bl	8008710 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009468:	1d25      	adds	r5, r4, #4
 800946a:	4628      	mov	r0, r5
 800946c:	f7ff f950 	bl	8008710 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009470:	4620      	mov	r0, r4
 8009472:	f007 ff15 	bl	80112a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009476:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009478:	2301      	movs	r3, #1
 800947a:	4083      	lsls	r3, r0
 800947c:	4a21      	ldr	r2, [pc, #132]	; (8009504 <xTaskResumeAll+0xe8>)
 800947e:	6811      	ldr	r1, [r2, #0]
 8009480:	430b      	orrs	r3, r1
 8009482:	6013      	str	r3, [r2, #0]
 8009484:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009488:	4629      	mov	r1, r5
 800948a:	4b1f      	ldr	r3, [pc, #124]	; (8009508 <xTaskResumeAll+0xec>)
 800948c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009490:	f7ff f91a 	bl	80086c8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009494:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009496:	4b1d      	ldr	r3, [pc, #116]	; (800950c <xTaskResumeAll+0xf0>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949c:	429a      	cmp	r2, r3
 800949e:	d3d9      	bcc.n	8009454 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 80094a0:	4b1b      	ldr	r3, [pc, #108]	; (8009510 <xTaskResumeAll+0xf4>)
 80094a2:	2201      	movs	r2, #1
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	e7d5      	b.n	8009454 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80094a8:	b10c      	cbz	r4, 80094ae <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80094aa:	f7ff fcdb 	bl	8008e64 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094ae:	4b19      	ldr	r3, [pc, #100]	; (8009514 <xTaskResumeAll+0xf8>)
 80094b0:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80094b2:	b984      	cbnz	r4, 80094d6 <xTaskResumeAll+0xba>
				if( xYieldPending != pdFALSE )
 80094b4:	4b16      	ldr	r3, [pc, #88]	; (8009510 <xTaskResumeAll+0xf4>)
 80094b6:	681c      	ldr	r4, [r3, #0]
 80094b8:	b1d4      	cbz	r4, 80094f0 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
 80094ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80094be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80094ce:	2401      	movs	r4, #1
 80094d0:	e00e      	b.n	80094f0 <xTaskResumeAll+0xd4>
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094d2:	3c01      	subs	r4, #1
 80094d4:	d007      	beq.n	80094e6 <xTaskResumeAll+0xca>
							if( xTaskIncrementTick() != pdFALSE )
 80094d6:	f7ff ff11 	bl	80092fc <xTaskIncrementTick>
 80094da:	2800      	cmp	r0, #0
 80094dc:	d0f9      	beq.n	80094d2 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 80094de:	4b0c      	ldr	r3, [pc, #48]	; (8009510 <xTaskResumeAll+0xf4>)
 80094e0:	2201      	movs	r2, #1
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	e7f5      	b.n	80094d2 <xTaskResumeAll+0xb6>
						xPendedTicks = 0;
 80094e6:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <xTaskResumeAll+0xf8>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	e7e2      	b.n	80094b4 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 80094ee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80094f0:	f000 fd72 	bl	8009fd8 <vPortExitCritical>
}
 80094f4:	4620      	mov	r0, r4
 80094f6:	bd38      	pop	{r3, r4, r5, pc}
 80094f8:	20001ec4 	.word	0x20001ec4
 80094fc:	20001ebc 	.word	0x20001ebc
 8009500:	20001f08 	.word	0x20001f08
 8009504:	20001ecc 	.word	0x20001ecc
 8009508:	20001e28 	.word	0x20001e28
 800950c:	20001e1c 	.word	0x20001e1c
 8009510:	20001f4c 	.word	0x20001f4c
 8009514:	20001f04 	.word	0x20001f04

08009518 <vTaskDelay>:
	{
 8009518:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800951a:	b1c8      	cbz	r0, 8009550 <vTaskDelay+0x38>
 800951c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800951e:	4b12      	ldr	r3, [pc, #72]	; (8009568 <vTaskDelay+0x50>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	b143      	cbz	r3, 8009536 <vTaskDelay+0x1e>
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	e7fe      	b.n	8009534 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8009536:	f7ff fecb 	bl	80092d0 <vTaskSuspendAll>
				traceTASK_DELAY();
 800953a:	4621      	mov	r1, r4
 800953c:	2023      	movs	r0, #35	; 0x23
 800953e:	f007 fc99 	bl	8010e74 <SEGGER_SYSVIEW_RecordU32>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009542:	2100      	movs	r1, #0
 8009544:	4620      	mov	r0, r4
 8009546:	f7ff fdd5 	bl	80090f4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800954a:	f7ff ff67 	bl	800941c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800954e:	b948      	cbnz	r0, 8009564 <vTaskDelay+0x4c>
			portYIELD_WITHIN_API();
 8009550:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009558:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	f3bf 8f6f 	isb	sy
	}
 8009564:	bd10      	pop	{r4, pc}
 8009566:	bf00      	nop
 8009568:	20001ec4 	.word	0x20001ec4

0800956c <vTaskSwitchContext>:
{
 800956c:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800956e:	4b31      	ldr	r3, [pc, #196]	; (8009634 <vTaskSwitchContext+0xc8>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	b11b      	cbz	r3, 800957c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8009574:	4b30      	ldr	r3, [pc, #192]	; (8009638 <vTaskSwitchContext+0xcc>)
 8009576:	2201      	movs	r2, #1
 8009578:	601a      	str	r2, [r3, #0]
}
 800957a:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 800957c:	4b2e      	ldr	r3, [pc, #184]	; (8009638 <vTaskSwitchContext+0xcc>)
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009582:	f7f7 f897 	bl	80006b4 <getRunTimeCounterValue>
 8009586:	4b2d      	ldr	r3, [pc, #180]	; (800963c <vTaskSwitchContext+0xd0>)
 8009588:	6018      	str	r0, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800958a:	4b2d      	ldr	r3, [pc, #180]	; (8009640 <vTaskSwitchContext+0xd4>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4298      	cmp	r0, r3
 8009590:	d905      	bls.n	800959e <vTaskSwitchContext+0x32>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009592:	4a2c      	ldr	r2, [pc, #176]	; (8009644 <vTaskSwitchContext+0xd8>)
 8009594:	6811      	ldr	r1, [r2, #0]
 8009596:	1ac3      	subs	r3, r0, r3
 8009598:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800959a:	441a      	add	r2, r3
 800959c:	654a      	str	r2, [r1, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800959e:	4b28      	ldr	r3, [pc, #160]	; (8009640 <vTaskSwitchContext+0xd4>)
 80095a0:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a2:	4b29      	ldr	r3, [pc, #164]	; (8009648 <vTaskSwitchContext+0xdc>)
 80095a4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80095a6:	fab3 f383 	clz	r3, r3
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	f1c3 031f 	rsb	r3, r3, #31
 80095b0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80095b4:	0092      	lsls	r2, r2, #2
 80095b6:	4925      	ldr	r1, [pc, #148]	; (800964c <vTaskSwitchContext+0xe0>)
 80095b8:	588a      	ldr	r2, [r1, r2]
 80095ba:	b942      	cbnz	r2, 80095ce <vTaskSwitchContext+0x62>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	e7fe      	b.n	80095cc <vTaskSwitchContext+0x60>
 80095ce:	491f      	ldr	r1, [pc, #124]	; (800964c <vTaskSwitchContext+0xe0>)
 80095d0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80095d4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80095d8:	6850      	ldr	r0, [r2, #4]
 80095da:	6840      	ldr	r0, [r0, #4]
 80095dc:	6050      	str	r0, [r2, #4]
 80095de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80095e2:	0092      	lsls	r2, r2, #2
 80095e4:	3208      	adds	r2, #8
 80095e6:	4411      	add	r1, r2
 80095e8:	4288      	cmp	r0, r1
 80095ea:	d017      	beq.n	800961c <vTaskSwitchContext+0xb0>
 80095ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80095f0:	4a16      	ldr	r2, [pc, #88]	; (800964c <vTaskSwitchContext+0xe0>)
 80095f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	68da      	ldr	r2, [r3, #12]
 80095fa:	4b12      	ldr	r3, [pc, #72]	; (8009644 <vTaskSwitchContext+0xd8>)
 80095fc:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	4b13      	ldr	r3, [pc, #76]	; (8009650 <vTaskSwitchContext+0xe4>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	429a      	cmp	r2, r3
 8009606:	d011      	beq.n	800962c <vTaskSwitchContext+0xc0>
 8009608:	4b0e      	ldr	r3, [pc, #56]	; (8009644 <vTaskSwitchContext+0xd8>)
 800960a:	6818      	ldr	r0, [r3, #0]
 800960c:	f007 fe24 	bl	8011258 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009610:	4b0c      	ldr	r3, [pc, #48]	; (8009644 <vTaskSwitchContext+0xd8>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3358      	adds	r3, #88	; 0x58
 8009616:	4a0f      	ldr	r2, [pc, #60]	; (8009654 <vTaskSwitchContext+0xe8>)
 8009618:	6013      	str	r3, [r2, #0]
}
 800961a:	e7ae      	b.n	800957a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800961c:	6840      	ldr	r0, [r0, #4]
 800961e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009622:	4a0a      	ldr	r2, [pc, #40]	; (800964c <vTaskSwitchContext+0xe0>)
 8009624:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009628:	6050      	str	r0, [r2, #4]
 800962a:	e7df      	b.n	80095ec <vTaskSwitchContext+0x80>
		traceTASK_SWITCHED_IN();
 800962c:	f007 fddc 	bl	80111e8 <SEGGER_SYSVIEW_OnIdle>
 8009630:	e7ee      	b.n	8009610 <vTaskSwitchContext+0xa4>
 8009632:	bf00      	nop
 8009634:	20001ec4 	.word	0x20001ec4
 8009638:	20001f4c 	.word	0x20001f4c
 800963c:	20001eb8 	.word	0x20001eb8
 8009640:	20001eb4 	.word	0x20001eb4
 8009644:	20001e1c 	.word	0x20001e1c
 8009648:	20001ecc 	.word	0x20001ecc
 800964c:	20001e28 	.word	0x20001e28
 8009650:	20001ef8 	.word	0x20001ef8
 8009654:	2000165c 	.word	0x2000165c

08009658 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009658:	b158      	cbz	r0, 8009672 <vTaskPlaceOnEventList+0x1a>
{
 800965a:	b510      	push	{r4, lr}
 800965c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800965e:	4a09      	ldr	r2, [pc, #36]	; (8009684 <vTaskPlaceOnEventList+0x2c>)
 8009660:	6811      	ldr	r1, [r2, #0]
 8009662:	3118      	adds	r1, #24
 8009664:	f7ff f83b 	bl	80086de <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009668:	2101      	movs	r1, #1
 800966a:	4620      	mov	r0, r4
 800966c:	f7ff fd42 	bl	80090f4 <prvAddCurrentTaskToDelayedList>
}
 8009670:	bd10      	pop	{r4, pc}
 8009672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009676:	f383 8811 	msr	BASEPRI, r3
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8009682:	e7fe      	b.n	8009682 <vTaskPlaceOnEventList+0x2a>
 8009684:	20001e1c 	.word	0x20001e1c

08009688 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 8009688:	b170      	cbz	r0, 80096a8 <vTaskPlaceOnUnorderedEventList+0x20>
{
 800968a:	b510      	push	{r4, lr}
 800968c:	4614      	mov	r4, r2
 800968e:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 8009690:	4b11      	ldr	r3, [pc, #68]	; (80096d8 <vTaskPlaceOnUnorderedEventList+0x50>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	b98b      	cbnz	r3, 80096ba <vTaskPlaceOnUnorderedEventList+0x32>
 8009696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	e7fe      	b.n	80096a6 <vTaskPlaceOnUnorderedEventList+0x1e>
 80096a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80096b8:	e7fe      	b.n	80096b8 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80096ba:	4b08      	ldr	r3, [pc, #32]	; (80096dc <vTaskPlaceOnUnorderedEventList+0x54>)
 80096bc:	6818      	ldr	r0, [r3, #0]
 80096be:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80096c2:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096c4:	6819      	ldr	r1, [r3, #0]
 80096c6:	3118      	adds	r1, #24
 80096c8:	4610      	mov	r0, r2
 80096ca:	f7fe fffd 	bl	80086c8 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096ce:	2101      	movs	r1, #1
 80096d0:	4620      	mov	r0, r4
 80096d2:	f7ff fd0f 	bl	80090f4 <prvAddCurrentTaskToDelayedList>
}
 80096d6:	bd10      	pop	{r4, pc}
 80096d8:	20001ec4 	.word	0x20001ec4
 80096dc:	20001e1c 	.word	0x20001e1c

080096e0 <vTaskPlaceOnEventListRestricted>:
	{
 80096e0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80096e2:	b188      	cbz	r0, 8009708 <vTaskPlaceOnEventListRestricted+0x28>
 80096e4:	460d      	mov	r5, r1
 80096e6:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096e8:	4a0c      	ldr	r2, [pc, #48]	; (800971c <vTaskPlaceOnEventListRestricted+0x3c>)
 80096ea:	6811      	ldr	r1, [r2, #0]
 80096ec:	3118      	adds	r1, #24
 80096ee:	f7fe ffeb 	bl	80086c8 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80096f2:	b10c      	cbz	r4, 80096f8 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80096f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80096f8:	2024      	movs	r0, #36	; 0x24
 80096fa:	f007 fba7 	bl	8010e4c <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096fe:	4621      	mov	r1, r4
 8009700:	4628      	mov	r0, r5
 8009702:	f7ff fcf7 	bl	80090f4 <prvAddCurrentTaskToDelayedList>
	}
 8009706:	bd38      	pop	{r3, r4, r5, pc}
 8009708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8009718:	e7fe      	b.n	8009718 <vTaskPlaceOnEventListRestricted+0x38>
 800971a:	bf00      	nop
 800971c:	20001e1c 	.word	0x20001e1c

08009720 <xTaskRemoveFromEventList>:
{
 8009720:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009722:	68c3      	ldr	r3, [r0, #12]
 8009724:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009726:	b33c      	cbz	r4, 8009778 <xTaskRemoveFromEventList+0x58>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009728:	f104 0518 	add.w	r5, r4, #24
 800972c:	4628      	mov	r0, r5
 800972e:	f7fe ffef 	bl	8008710 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009732:	4b19      	ldr	r3, [pc, #100]	; (8009798 <xTaskRemoveFromEventList+0x78>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	bb43      	cbnz	r3, 800978a <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009738:	1d25      	adds	r5, r4, #4
 800973a:	4628      	mov	r0, r5
 800973c:	f7fe ffe8 	bl	8008710 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009740:	4620      	mov	r0, r4
 8009742:	f007 fdad 	bl	80112a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009746:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009748:	2301      	movs	r3, #1
 800974a:	4083      	lsls	r3, r0
 800974c:	4a13      	ldr	r2, [pc, #76]	; (800979c <xTaskRemoveFromEventList+0x7c>)
 800974e:	6811      	ldr	r1, [r2, #0]
 8009750:	430b      	orrs	r3, r1
 8009752:	6013      	str	r3, [r2, #0]
 8009754:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009758:	4629      	mov	r1, r5
 800975a:	4b11      	ldr	r3, [pc, #68]	; (80097a0 <xTaskRemoveFromEventList+0x80>)
 800975c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009760:	f7fe ffb2 	bl	80086c8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009764:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009766:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <xTaskRemoveFromEventList+0x84>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976c:	429a      	cmp	r2, r3
 800976e:	d911      	bls.n	8009794 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8009770:	2001      	movs	r0, #1
 8009772:	4b0d      	ldr	r3, [pc, #52]	; (80097a8 <xTaskRemoveFromEventList+0x88>)
 8009774:	6018      	str	r0, [r3, #0]
}
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977c:	f383 8811 	msr	BASEPRI, r3
 8009780:	f3bf 8f6f 	isb	sy
 8009784:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8009788:	e7fe      	b.n	8009788 <xTaskRemoveFromEventList+0x68>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800978a:	4629      	mov	r1, r5
 800978c:	4807      	ldr	r0, [pc, #28]	; (80097ac <xTaskRemoveFromEventList+0x8c>)
 800978e:	f7fe ff9b 	bl	80086c8 <vListInsertEnd>
 8009792:	e7e7      	b.n	8009764 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 8009794:	2000      	movs	r0, #0
	return xReturn;
 8009796:	e7ee      	b.n	8009776 <xTaskRemoveFromEventList+0x56>
 8009798:	20001ec4 	.word	0x20001ec4
 800979c:	20001ecc 	.word	0x20001ecc
 80097a0:	20001e28 	.word	0x20001e28
 80097a4:	20001e1c 	.word	0x20001e1c
 80097a8:	20001f4c 	.word	0x20001f4c
 80097ac:	20001f08 	.word	0x20001f08

080097b0 <vTaskRemoveFromUnorderedEventList>:
{
 80097b0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80097b2:	4b1e      	ldr	r3, [pc, #120]	; (800982c <vTaskRemoveFromUnorderedEventList+0x7c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	b943      	cbnz	r3, 80097ca <vTaskRemoveFromUnorderedEventList+0x1a>
 80097b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097bc:	f383 8811 	msr	BASEPRI, r3
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	e7fe      	b.n	80097c8 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80097ca:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80097ce:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097d0:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 80097d2:	b30c      	cbz	r4, 8009818 <vTaskRemoveFromUnorderedEventList+0x68>
	( void ) uxListRemove( pxEventListItem );
 80097d4:	f7fe ff9c 	bl	8008710 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097d8:	1d25      	adds	r5, r4, #4
 80097da:	4628      	mov	r0, r5
 80097dc:	f7fe ff98 	bl	8008710 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80097e0:	4620      	mov	r0, r4
 80097e2:	f007 fd5d 	bl	80112a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80097e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80097e8:	2301      	movs	r3, #1
 80097ea:	4083      	lsls	r3, r0
 80097ec:	4a10      	ldr	r2, [pc, #64]	; (8009830 <vTaskRemoveFromUnorderedEventList+0x80>)
 80097ee:	6811      	ldr	r1, [r2, #0]
 80097f0:	430b      	orrs	r3, r1
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80097f8:	4629      	mov	r1, r5
 80097fa:	4b0e      	ldr	r3, [pc, #56]	; (8009834 <vTaskRemoveFromUnorderedEventList+0x84>)
 80097fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009800:	f7fe ff62 	bl	80086c8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009804:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009806:	4b0c      	ldr	r3, [pc, #48]	; (8009838 <vTaskRemoveFromUnorderedEventList+0x88>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980c:	429a      	cmp	r2, r3
 800980e:	d902      	bls.n	8009816 <vTaskRemoveFromUnorderedEventList+0x66>
		xYieldPending = pdTRUE;
 8009810:	4b0a      	ldr	r3, [pc, #40]	; (800983c <vTaskRemoveFromUnorderedEventList+0x8c>)
 8009812:	2201      	movs	r2, #1
 8009814:	601a      	str	r2, [r3, #0]
}
 8009816:	bd38      	pop	{r3, r4, r5, pc}
 8009818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8009828:	e7fe      	b.n	8009828 <vTaskRemoveFromUnorderedEventList+0x78>
 800982a:	bf00      	nop
 800982c:	20001ec4 	.word	0x20001ec4
 8009830:	20001ecc 	.word	0x20001ecc
 8009834:	20001e28 	.word	0x20001e28
 8009838:	20001e1c 	.word	0x20001e1c
 800983c:	20001f4c 	.word	0x20001f4c

08009840 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009840:	4b03      	ldr	r3, [pc, #12]	; (8009850 <vTaskInternalSetTimeOutState+0x10>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009846:	4b03      	ldr	r3, [pc, #12]	; (8009854 <vTaskInternalSetTimeOutState+0x14>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6043      	str	r3, [r0, #4]
}
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	20001f00 	.word	0x20001f00
 8009854:	20001f48 	.word	0x20001f48

08009858 <xTaskCheckForTimeOut>:
{
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800985a:	b1c8      	cbz	r0, 8009890 <xTaskCheckForTimeOut+0x38>
 800985c:	460c      	mov	r4, r1
 800985e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009860:	b1f9      	cbz	r1, 80098a2 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8009862:	f000 fb97 	bl	8009f94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009866:	4b1b      	ldr	r3, [pc, #108]	; (80098d4 <xTaskCheckForTimeOut+0x7c>)
 8009868:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800986a:	686b      	ldr	r3, [r5, #4]
 800986c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800986e:	6822      	ldr	r2, [r4, #0]
 8009870:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009874:	d026      	beq.n	80098c4 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009876:	4e18      	ldr	r6, [pc, #96]	; (80098d8 <xTaskCheckForTimeOut+0x80>)
 8009878:	6836      	ldr	r6, [r6, #0]
 800987a:	682f      	ldr	r7, [r5, #0]
 800987c:	42b7      	cmp	r7, r6
 800987e:	d001      	beq.n	8009884 <xTaskCheckForTimeOut+0x2c>
 8009880:	428b      	cmp	r3, r1
 8009882:	d924      	bls.n	80098ce <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009884:	4282      	cmp	r2, r0
 8009886:	d815      	bhi.n	80098b4 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8009888:	2300      	movs	r3, #0
 800988a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800988c:	2401      	movs	r4, #1
 800988e:	e01a      	b.n	80098c6 <xTaskCheckForTimeOut+0x6e>
 8009890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80098a0:	e7fe      	b.n	80098a0 <xTaskCheckForTimeOut+0x48>
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80098b2:	e7fe      	b.n	80098b2 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 80098b4:	1a5b      	subs	r3, r3, r1
 80098b6:	4413      	add	r3, r2
 80098b8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098ba:	4628      	mov	r0, r5
 80098bc:	f7ff ffc0 	bl	8009840 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098c0:	2400      	movs	r4, #0
 80098c2:	e000      	b.n	80098c6 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 80098c4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80098c6:	f000 fb87 	bl	8009fd8 <vPortExitCritical>
}
 80098ca:	4620      	mov	r0, r4
 80098cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80098ce:	2401      	movs	r4, #1
 80098d0:	e7f9      	b.n	80098c6 <xTaskCheckForTimeOut+0x6e>
 80098d2:	bf00      	nop
 80098d4:	20001f48 	.word	0x20001f48
 80098d8:	20001f00 	.word	0x20001f00

080098dc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80098dc:	4b01      	ldr	r3, [pc, #4]	; (80098e4 <vTaskMissedYield+0x8>)
 80098de:	2201      	movs	r2, #1
 80098e0:	601a      	str	r2, [r3, #0]
}
 80098e2:	4770      	bx	lr
 80098e4:	20001f4c 	.word	0x20001f4c

080098e8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80098e8:	4b05      	ldr	r3, [pc, #20]	; (8009900 <xTaskGetSchedulerState+0x18>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	b133      	cbz	r3, 80098fc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098ee:	4b05      	ldr	r3, [pc, #20]	; (8009904 <xTaskGetSchedulerState+0x1c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	b10b      	cbz	r3, 80098f8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80098f4:	2000      	movs	r0, #0
	}
 80098f6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80098f8:	2002      	movs	r0, #2
 80098fa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098fc:	2001      	movs	r0, #1
 80098fe:	4770      	bx	lr
 8009900:	20001f1c 	.word	0x20001f1c
 8009904:	20001ec4 	.word	0x20001ec4

08009908 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009908:	2800      	cmp	r0, #0
 800990a:	d053      	beq.n	80099b4 <xTaskPriorityDisinherit+0xac>
	{
 800990c:	b538      	push	{r3, r4, r5, lr}
 800990e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009910:	4b2a      	ldr	r3, [pc, #168]	; (80099bc <xTaskPriorityDisinherit+0xb4>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4283      	cmp	r3, r0
 8009916:	d008      	beq.n	800992a <xTaskPriorityDisinherit+0x22>
 8009918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	e7fe      	b.n	8009928 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800992a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800992c:	b943      	cbnz	r3, 8009940 <xTaskPriorityDisinherit+0x38>
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	e7fe      	b.n	800993e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8009940:	3b01      	subs	r3, #1
 8009942:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009944:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009946:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8009948:	4291      	cmp	r1, r2
 800994a:	d035      	beq.n	80099b8 <xTaskPriorityDisinherit+0xb0>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800994c:	b10b      	cbz	r3, 8009952 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800994e:	2000      	movs	r0, #0
	}
 8009950:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009952:	1d05      	adds	r5, r0, #4
 8009954:	4628      	mov	r0, r5
 8009956:	f7fe fedb 	bl	8008710 <uxListRemove>
 800995a:	b968      	cbnz	r0, 8009978 <xTaskPriorityDisinherit+0x70>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800995c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800995e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009962:	0092      	lsls	r2, r2, #2
 8009964:	4916      	ldr	r1, [pc, #88]	; (80099c0 <xTaskPriorityDisinherit+0xb8>)
 8009966:	588a      	ldr	r2, [r1, r2]
 8009968:	b932      	cbnz	r2, 8009978 <xTaskPriorityDisinherit+0x70>
 800996a:	2201      	movs	r2, #1
 800996c:	409a      	lsls	r2, r3
 800996e:	4915      	ldr	r1, [pc, #84]	; (80099c4 <xTaskPriorityDisinherit+0xbc>)
 8009970:	680b      	ldr	r3, [r1, #0]
 8009972:	ea23 0302 	bic.w	r3, r3, r2
 8009976:	600b      	str	r3, [r1, #0]
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8009978:	4621      	mov	r1, r4
 800997a:	204a      	movs	r0, #74	; 0x4a
 800997c:	f007 fa7a 	bl	8010e74 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009980:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009982:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009984:	f1c3 0307 	rsb	r3, r3, #7
 8009988:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800998a:	4620      	mov	r0, r4
 800998c:	f007 fc88 	bl	80112a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009990:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009992:	2401      	movs	r4, #1
 8009994:	fa04 f300 	lsl.w	r3, r4, r0
 8009998:	4a0a      	ldr	r2, [pc, #40]	; (80099c4 <xTaskPriorityDisinherit+0xbc>)
 800999a:	6811      	ldr	r1, [r2, #0]
 800999c:	430b      	orrs	r3, r1
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80099a4:	4629      	mov	r1, r5
 80099a6:	4b06      	ldr	r3, [pc, #24]	; (80099c0 <xTaskPriorityDisinherit+0xb8>)
 80099a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80099ac:	f7fe fe8c 	bl	80086c8 <vListInsertEnd>
					xReturn = pdTRUE;
 80099b0:	4620      	mov	r0, r4
 80099b2:	e7cd      	b.n	8009950 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80099b4:	2000      	movs	r0, #0
	}
 80099b6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80099b8:	2000      	movs	r0, #0
 80099ba:	e7c9      	b.n	8009950 <xTaskPriorityDisinherit+0x48>
 80099bc:	20001e1c 	.word	0x20001e1c
 80099c0:	20001e28 	.word	0x20001e28
 80099c4:	20001ecc 	.word	0x20001ecc

080099c8 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80099c8:	4a04      	ldr	r2, [pc, #16]	; (80099dc <uxTaskResetEventItemValue+0x14>)
 80099ca:	6813      	ldr	r3, [r2, #0]
 80099cc:	6998      	ldr	r0, [r3, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ce:	6813      	ldr	r3, [r2, #0]
 80099d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d2:	6812      	ldr	r2, [r2, #0]
 80099d4:	f1c3 0307 	rsb	r3, r3, #7
 80099d8:	6193      	str	r3, [r2, #24]
}
 80099da:	4770      	bx	lr
 80099dc:	20001e1c 	.word	0x20001e1c

080099e0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099e0:	4b06      	ldr	r3, [pc, #24]	; (80099fc <prvGetNextExpireTime+0x1c>)
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	6813      	ldr	r3, [r2, #0]
 80099e6:	b92b      	cbnz	r3, 80099f4 <prvGetNextExpireTime+0x14>
 80099e8:	2301      	movs	r3, #1
 80099ea:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099ec:	b923      	cbnz	r3, 80099f8 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099ee:	68d3      	ldr	r3, [r2, #12]
 80099f0:	6818      	ldr	r0, [r3, #0]
 80099f2:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099f4:	2300      	movs	r3, #0
 80099f6:	e7f8      	b.n	80099ea <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099f8:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80099fa:	4770      	bx	lr
 80099fc:	20001f50 	.word	0x20001f50

08009a00 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a00:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a02:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a04:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a06:	4291      	cmp	r1, r2
 8009a08:	d80c      	bhi.n	8009a24 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a0a:	1ad2      	subs	r2, r2, r3
 8009a0c:	6983      	ldr	r3, [r0, #24]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d301      	bcc.n	8009a16 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a12:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8009a14:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a16:	1d01      	adds	r1, r0, #4
 8009a18:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <prvInsertTimerInActiveList+0x40>)
 8009a1a:	6818      	ldr	r0, [r3, #0]
 8009a1c:	f7fe fe5f 	bl	80086de <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009a20:	2000      	movs	r0, #0
 8009a22:	e7f7      	b.n	8009a14 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d201      	bcs.n	8009a2c <prvInsertTimerInActiveList+0x2c>
 8009a28:	4299      	cmp	r1, r3
 8009a2a:	d206      	bcs.n	8009a3a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a2c:	1d01      	adds	r1, r0, #4
 8009a2e:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <prvInsertTimerInActiveList+0x44>)
 8009a30:	6818      	ldr	r0, [r3, #0]
 8009a32:	f7fe fe54 	bl	80086de <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009a36:	2000      	movs	r0, #0
 8009a38:	e7ec      	b.n	8009a14 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8009a3a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009a3c:	e7ea      	b.n	8009a14 <prvInsertTimerInActiveList+0x14>
 8009a3e:	bf00      	nop
 8009a40:	20001f54 	.word	0x20001f54
 8009a44:	20001f50 	.word	0x20001f50

08009a48 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a48:	b538      	push	{r3, r4, r5, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a4a:	f000 faa3 	bl	8009f94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a4e:	4b0f      	ldr	r3, [pc, #60]	; (8009a8c <prvCheckForValidListAndQueue+0x44>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	b113      	cbz	r3, 8009a5a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a54:	f000 fac0 	bl	8009fd8 <vPortExitCritical>
}
 8009a58:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8009a5a:	4d0d      	ldr	r5, [pc, #52]	; (8009a90 <prvCheckForValidListAndQueue+0x48>)
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	f7fe fe25 	bl	80086ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a62:	4c0c      	ldr	r4, [pc, #48]	; (8009a94 <prvCheckForValidListAndQueue+0x4c>)
 8009a64:	4620      	mov	r0, r4
 8009a66:	f7fe fe21 	bl	80086ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a6a:	4b0b      	ldr	r3, [pc, #44]	; (8009a98 <prvCheckForValidListAndQueue+0x50>)
 8009a6c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a6e:	4b0b      	ldr	r3, [pc, #44]	; (8009a9c <prvCheckForValidListAndQueue+0x54>)
 8009a70:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009a72:	2200      	movs	r2, #0
 8009a74:	2110      	movs	r1, #16
 8009a76:	200a      	movs	r0, #10
 8009a78:	f7fe ff57 	bl	800892a <xQueueGenericCreate>
 8009a7c:	4b03      	ldr	r3, [pc, #12]	; (8009a8c <prvCheckForValidListAndQueue+0x44>)
 8009a7e:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d0e7      	beq.n	8009a54 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a84:	4906      	ldr	r1, [pc, #24]	; (8009aa0 <prvCheckForValidListAndQueue+0x58>)
 8009a86:	f7ff f9a7 	bl	8008dd8 <vQueueAddToRegistry>
 8009a8a:	e7e3      	b.n	8009a54 <prvCheckForValidListAndQueue+0xc>
 8009a8c:	20001f84 	.word	0x20001f84
 8009a90:	20001f58 	.word	0x20001f58
 8009a94:	20001f6c 	.word	0x20001f6c
 8009a98:	20001f50 	.word	0x20001f50
 8009a9c:	20001f54 	.word	0x20001f54
 8009aa0:	08013044 	.word	0x08013044

08009aa4 <prvInitialiseNewTimer>:
{
 8009aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa8:	9f07      	ldr	r7, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009aaa:	b941      	cbnz	r1, 8009abe <prvInitialiseNewTimer+0x1a>
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	e7fe      	b.n	8009abc <prvInitialiseNewTimer+0x18>
 8009abe:	4606      	mov	r6, r0
 8009ac0:	4614      	mov	r4, r2
 8009ac2:	461d      	mov	r5, r3
 8009ac4:	4688      	mov	r8, r1
	if( pxNewTimer != NULL )
 8009ac6:	b18f      	cbz	r7, 8009aec <prvInitialiseNewTimer+0x48>
		prvCheckForValidListAndQueue();
 8009ac8:	f7ff ffbe 	bl	8009a48 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8009acc:	603e      	str	r6, [r7, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009ace:	f8c7 8018 	str.w	r8, [r7, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009ad2:	61fd      	str	r5, [r7, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009ad4:	9b06      	ldr	r3, [sp, #24]
 8009ad6:	623b      	str	r3, [r7, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009ad8:	1d38      	adds	r0, r7, #4
 8009ada:	f7fe fdf2 	bl	80086c2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009ade:	b12c      	cbz	r4, 8009aec <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009ae0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ae4:	f043 0304 	orr.w	r3, r3, #4
 8009ae8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
}
 8009aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009af0 <xTimerCreateTimerTask>:
{
 8009af0:	b500      	push	{lr}
 8009af2:	b083      	sub	sp, #12
	prvCheckForValidListAndQueue();
 8009af4:	f7ff ffa8 	bl	8009a48 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009af8:	4b0d      	ldr	r3, [pc, #52]	; (8009b30 <xTimerCreateTimerTask+0x40>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	b15b      	cbz	r3, 8009b16 <xTimerCreateTimerTask+0x26>
			xReturn = xTaskCreate(	prvTimerTask,
 8009afe:	4b0d      	ldr	r3, [pc, #52]	; (8009b34 <xTimerCreateTimerTask+0x44>)
 8009b00:	9301      	str	r3, [sp, #4]
 8009b02:	2306      	movs	r3, #6
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	2300      	movs	r3, #0
 8009b08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b0c:	490a      	ldr	r1, [pc, #40]	; (8009b38 <xTimerCreateTimerTask+0x48>)
 8009b0e:	480b      	ldr	r0, [pc, #44]	; (8009b3c <xTimerCreateTimerTask+0x4c>)
 8009b10:	f7ff fb54 	bl	80091bc <xTaskCreate>
	configASSERT( xReturn );
 8009b14:	b940      	cbnz	r0, 8009b28 <xTimerCreateTimerTask+0x38>
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	e7fe      	b.n	8009b26 <xTimerCreateTimerTask+0x36>
}
 8009b28:	b003      	add	sp, #12
 8009b2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b2e:	bf00      	nop
 8009b30:	20001f84 	.word	0x20001f84
 8009b34:	20001f88 	.word	0x20001f88
 8009b38:	0801304c 	.word	0x0801304c
 8009b3c:	08009e79 	.word	0x08009e79

08009b40 <xTimerCreate>:
	{
 8009b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b44:	b082      	sub	sp, #8
 8009b46:	4604      	mov	r4, r0
 8009b48:	4688      	mov	r8, r1
 8009b4a:	4617      	mov	r7, r2
 8009b4c:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009b4e:	202c      	movs	r0, #44	; 0x2c
 8009b50:	f000 fbd8 	bl	800a304 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8009b54:	4606      	mov	r6, r0
 8009b56:	b158      	cbz	r0, 8009b70 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009b5e:	9001      	str	r0, [sp, #4]
 8009b60:	9b08      	ldr	r3, [sp, #32]
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	462b      	mov	r3, r5
 8009b66:	463a      	mov	r2, r7
 8009b68:	4641      	mov	r1, r8
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f7ff ff9a 	bl	8009aa4 <prvInitialiseNewTimer>
	}
 8009b70:	4630      	mov	r0, r6
 8009b72:	b002      	add	sp, #8
 8009b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b78 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8009b78:	b1b8      	cbz	r0, 8009baa <xTimerGenericCommand+0x32>
 8009b7a:	469c      	mov	ip, r3
 8009b7c:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8009b7e:	4818      	ldr	r0, [pc, #96]	; (8009be0 <xTimerGenericCommand+0x68>)
 8009b80:	6800      	ldr	r0, [r0, #0]
 8009b82:	b358      	cbz	r0, 8009bdc <xTimerGenericCommand+0x64>
{
 8009b84:	b500      	push	{lr}
 8009b86:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8009b88:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b8a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b8c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b8e:	2905      	cmp	r1, #5
 8009b90:	dc1c      	bgt.n	8009bcc <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b92:	f7ff fea9 	bl	80098e8 <xTaskGetSchedulerState>
 8009b96:	2802      	cmp	r0, #2
 8009b98:	d010      	beq.n	8009bbc <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	4669      	mov	r1, sp
 8009ba0:	480f      	ldr	r0, [pc, #60]	; (8009be0 <xTimerGenericCommand+0x68>)
 8009ba2:	6800      	ldr	r0, [r0, #0]
 8009ba4:	f7fe fee2 	bl	800896c <xQueueGenericSend>
 8009ba8:	e015      	b.n	8009bd6 <xTimerGenericCommand+0x5e>
 8009baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8009bba:	e7fe      	b.n	8009bba <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	9a06      	ldr	r2, [sp, #24]
 8009bc0:	4669      	mov	r1, sp
 8009bc2:	4807      	ldr	r0, [pc, #28]	; (8009be0 <xTimerGenericCommand+0x68>)
 8009bc4:	6800      	ldr	r0, [r0, #0]
 8009bc6:	f7fe fed1 	bl	800896c <xQueueGenericSend>
 8009bca:	e004      	b.n	8009bd6 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009bcc:	2300      	movs	r3, #0
 8009bce:	4662      	mov	r2, ip
 8009bd0:	4669      	mov	r1, sp
 8009bd2:	f7fe ffad 	bl	8008b30 <xQueueGenericSendFromISR>
}
 8009bd6:	b005      	add	sp, #20
 8009bd8:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8009bdc:	2000      	movs	r0, #0
}
 8009bde:	4770      	bx	lr
 8009be0:	20001f84 	.word	0x20001f84

08009be4 <prvSwitchTimerLists>:
{
 8009be4:	b570      	push	{r4, r5, r6, lr}
 8009be6:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009be8:	4b1b      	ldr	r3, [pc, #108]	; (8009c58 <prvSwitchTimerLists+0x74>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	b362      	cbz	r2, 8009c4a <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bf6:	1d25      	adds	r5, r4, #4
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	f7fe fd89 	bl	8008710 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bfe:	6a23      	ldr	r3, [r4, #32]
 8009c00:	4620      	mov	r0, r4
 8009c02:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c04:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009c08:	f013 0f04 	tst.w	r3, #4
 8009c0c:	d0ec      	beq.n	8009be8 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c0e:	69a3      	ldr	r3, [r4, #24]
 8009c10:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009c12:	429e      	cmp	r6, r3
 8009c14:	d207      	bcs.n	8009c26 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c16:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c18:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	4b0e      	ldr	r3, [pc, #56]	; (8009c58 <prvSwitchTimerLists+0x74>)
 8009c1e:	6818      	ldr	r0, [r3, #0]
 8009c20:	f7fe fd5d 	bl	80086de <vListInsert>
 8009c24:	e7e0      	b.n	8009be8 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c26:	2100      	movs	r1, #0
 8009c28:	9100      	str	r1, [sp, #0]
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4632      	mov	r2, r6
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f7ff ffa2 	bl	8009b78 <xTimerGenericCommand>
				configASSERT( xResult );
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d1d7      	bne.n	8009be8 <prvSwitchTimerLists+0x4>
 8009c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	e7fe      	b.n	8009c48 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8009c4a:	4a04      	ldr	r2, [pc, #16]	; (8009c5c <prvSwitchTimerLists+0x78>)
 8009c4c:	6810      	ldr	r0, [r2, #0]
 8009c4e:	4902      	ldr	r1, [pc, #8]	; (8009c58 <prvSwitchTimerLists+0x74>)
 8009c50:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8009c52:	6013      	str	r3, [r2, #0]
}
 8009c54:	b002      	add	sp, #8
 8009c56:	bd70      	pop	{r4, r5, r6, pc}
 8009c58:	20001f50 	.word	0x20001f50
 8009c5c:	20001f54 	.word	0x20001f54

08009c60 <prvSampleTimeNow>:
{
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8009c64:	f7ff fb3c 	bl	80092e0 <xTaskGetTickCount>
 8009c68:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <prvSampleTimeNow+0x28>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4283      	cmp	r3, r0
 8009c70:	d805      	bhi.n	8009c7e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8009c72:	2300      	movs	r3, #0
 8009c74:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8009c76:	4b04      	ldr	r3, [pc, #16]	; (8009c88 <prvSampleTimeNow+0x28>)
 8009c78:	601c      	str	r4, [r3, #0]
}
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8009c7e:	f7ff ffb1 	bl	8009be4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c82:	2301      	movs	r3, #1
 8009c84:	602b      	str	r3, [r5, #0]
 8009c86:	e7f6      	b.n	8009c76 <prvSampleTimeNow+0x16>
 8009c88:	20001f80 	.word	0x20001f80

08009c8c <prvProcessExpiredTimer>:
{
 8009c8c:	b570      	push	{r4, r5, r6, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	4606      	mov	r6, r0
 8009c92:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c94:	4917      	ldr	r1, [pc, #92]	; (8009cf4 <prvProcessExpiredTimer+0x68>)
 8009c96:	6809      	ldr	r1, [r1, #0]
 8009c98:	68c9      	ldr	r1, [r1, #12]
 8009c9a:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c9c:	1d20      	adds	r0, r4, #4
 8009c9e:	f7fe fd37 	bl	8008710 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ca2:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 8009ca6:	f01c 0f04 	tst.w	ip, #4
 8009caa:	d108      	bne.n	8009cbe <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cac:	f02c 0c01 	bic.w	ip, ip, #1
 8009cb0:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cb4:	6a23      	ldr	r3, [r4, #32]
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	4798      	blx	r3
}
 8009cba:	b002      	add	sp, #8
 8009cbc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009cbe:	69a1      	ldr	r1, [r4, #24]
 8009cc0:	4633      	mov	r3, r6
 8009cc2:	462a      	mov	r2, r5
 8009cc4:	4431      	add	r1, r6
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f7ff fe9a 	bl	8009a00 <prvInsertTimerInActiveList>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d0f1      	beq.n	8009cb4 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	9100      	str	r1, [sp, #0]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	4632      	mov	r2, r6
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f7ff ff4d 	bl	8009b78 <xTimerGenericCommand>
			configASSERT( xResult );
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d1e8      	bne.n	8009cb4 <prvProcessExpiredTimer+0x28>
 8009ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce6:	f383 8811 	msr	BASEPRI, r3
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	e7fe      	b.n	8009cf2 <prvProcessExpiredTimer+0x66>
 8009cf4:	20001f50 	.word	0x20001f50

08009cf8 <prvProcessTimerOrBlockTask>:
{
 8009cf8:	b570      	push	{r4, r5, r6, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8009d00:	f7ff fae6 	bl	80092d0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d04:	a801      	add	r0, sp, #4
 8009d06:	f7ff ffab 	bl	8009c60 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009d0a:	9b01      	ldr	r3, [sp, #4]
 8009d0c:	bb33      	cbnz	r3, 8009d5c <prvProcessTimerOrBlockTask+0x64>
 8009d0e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d10:	b90c      	cbnz	r4, 8009d16 <prvProcessTimerOrBlockTask+0x1e>
 8009d12:	42b0      	cmp	r0, r6
 8009d14:	d219      	bcs.n	8009d4a <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
 8009d16:	b124      	cbz	r4, 8009d22 <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d18:	4a12      	ldr	r2, [pc, #72]	; (8009d64 <prvProcessTimerOrBlockTask+0x6c>)
 8009d1a:	6812      	ldr	r2, [r2, #0]
 8009d1c:	6812      	ldr	r2, [r2, #0]
 8009d1e:	b9da      	cbnz	r2, 8009d58 <prvProcessTimerOrBlockTask+0x60>
 8009d20:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d22:	4622      	mov	r2, r4
 8009d24:	1b71      	subs	r1, r6, r5
 8009d26:	4b10      	ldr	r3, [pc, #64]	; (8009d68 <prvProcessTimerOrBlockTask+0x70>)
 8009d28:	6818      	ldr	r0, [r3, #0]
 8009d2a:	f7ff f871 	bl	8008e10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d2e:	f7ff fb75 	bl	800941c <xTaskResumeAll>
 8009d32:	b9a8      	cbnz	r0, 8009d60 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8009d34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	e00a      	b.n	8009d60 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8009d4a:	f7ff fb67 	bl	800941c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d4e:	4629      	mov	r1, r5
 8009d50:	4630      	mov	r0, r6
 8009d52:	f7ff ff9b 	bl	8009c8c <prvProcessExpiredTimer>
 8009d56:	e003      	b.n	8009d60 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d58:	461c      	mov	r4, r3
 8009d5a:	e7e2      	b.n	8009d22 <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 8009d5c:	f7ff fb5e 	bl	800941c <xTaskResumeAll>
}
 8009d60:	b002      	add	sp, #8
 8009d62:	bd70      	pop	{r4, r5, r6, pc}
 8009d64:	20001f54 	.word	0x20001f54
 8009d68:	20001f84 	.word	0x20001f84

08009d6c <prvProcessReceivedCommands>:
{
 8009d6c:	b510      	push	{r4, lr}
 8009d6e:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d70:	e002      	b.n	8009d78 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d72:	9b04      	ldr	r3, [sp, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	da0f      	bge.n	8009d98 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d78:	2200      	movs	r2, #0
 8009d7a:	a904      	add	r1, sp, #16
 8009d7c:	4b3d      	ldr	r3, [pc, #244]	; (8009e74 <prvProcessReceivedCommands+0x108>)
 8009d7e:	6818      	ldr	r0, [r3, #0]
 8009d80:	f7fe ff4d 	bl	8008c1e <xQueueReceive>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d073      	beq.n	8009e70 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d88:	9b04      	ldr	r3, [sp, #16]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	daf1      	bge.n	8009d72 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d8e:	9907      	ldr	r1, [sp, #28]
 8009d90:	9806      	ldr	r0, [sp, #24]
 8009d92:	9b05      	ldr	r3, [sp, #20]
 8009d94:	4798      	blx	r3
 8009d96:	e7ec      	b.n	8009d72 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d98:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d9a:	6963      	ldr	r3, [r4, #20]
 8009d9c:	b113      	cbz	r3, 8009da4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d9e:	1d20      	adds	r0, r4, #4
 8009da0:	f7fe fcb6 	bl	8008710 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009da4:	a803      	add	r0, sp, #12
 8009da6:	f7ff ff5b 	bl	8009c60 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009daa:	9b04      	ldr	r3, [sp, #16]
 8009dac:	2b09      	cmp	r3, #9
 8009dae:	d8e3      	bhi.n	8009d78 <prvProcessReceivedCommands+0xc>
 8009db0:	e8df f003 	tbb	[pc, r3]
 8009db4:	30050505 	.word	0x30050505
 8009db8:	05055037 	.word	0x05055037
 8009dbc:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009dbe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009dc2:	f043 0301 	orr.w	r3, r3, #1
 8009dc6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009dca:	9b05      	ldr	r3, [sp, #20]
 8009dcc:	69a1      	ldr	r1, [r4, #24]
 8009dce:	4602      	mov	r2, r0
 8009dd0:	4419      	add	r1, r3
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f7ff fe14 	bl	8009a00 <prvInsertTimerInActiveList>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d0cd      	beq.n	8009d78 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ddc:	6a23      	ldr	r3, [r4, #32]
 8009dde:	4620      	mov	r0, r4
 8009de0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009de2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009de6:	f013 0f04 	tst.w	r3, #4
 8009dea:	d0c5      	beq.n	8009d78 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009dec:	69a2      	ldr	r2, [r4, #24]
 8009dee:	2100      	movs	r1, #0
 8009df0:	9100      	str	r1, [sp, #0]
 8009df2:	460b      	mov	r3, r1
 8009df4:	9805      	ldr	r0, [sp, #20]
 8009df6:	4402      	add	r2, r0
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f7ff febd 	bl	8009b78 <xTimerGenericCommand>
							configASSERT( xResult );
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d1ba      	bne.n	8009d78 <prvProcessReceivedCommands+0xc>
 8009e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	e7fe      	b.n	8009e12 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e14:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009e18:	f023 0301 	bic.w	r3, r3, #1
 8009e1c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8009e20:	e7aa      	b.n	8009d78 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e22:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009e26:	f043 0301 	orr.w	r3, r3, #1
 8009e2a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e2e:	9905      	ldr	r1, [sp, #20]
 8009e30:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e32:	b131      	cbz	r1, 8009e42 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e34:	4603      	mov	r3, r0
 8009e36:	4602      	mov	r2, r0
 8009e38:	4401      	add	r1, r0
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f7ff fde0 	bl	8009a00 <prvInsertTimerInActiveList>
					break;
 8009e40:	e79a      	b.n	8009d78 <prvProcessReceivedCommands+0xc>
 8009e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e52:	e7fe      	b.n	8009e52 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e54:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009e58:	f013 0f02 	tst.w	r3, #2
 8009e5c:	d004      	beq.n	8009e68 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e5e:	f023 0301 	bic.w	r3, r3, #1
 8009e62:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009e66:	e787      	b.n	8009d78 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f000 fac9 	bl	800a400 <vPortFree>
 8009e6e:	e783      	b.n	8009d78 <prvProcessReceivedCommands+0xc>
}
 8009e70:	b008      	add	sp, #32
 8009e72:	bd10      	pop	{r4, pc}
 8009e74:	20001f84 	.word	0x20001f84

08009e78 <prvTimerTask>:
{
 8009e78:	b500      	push	{lr}
 8009e7a:	b083      	sub	sp, #12
		vApplicationDaemonTaskStartupHook();
 8009e7c:	f7f6 fc1d 	bl	80006ba <vApplicationDaemonTaskStartupHook>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e80:	a801      	add	r0, sp, #4
 8009e82:	f7ff fdad 	bl	80099e0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e86:	9901      	ldr	r1, [sp, #4]
 8009e88:	f7ff ff36 	bl	8009cf8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8009e8c:	f7ff ff6e 	bl	8009d6c <prvProcessReceivedCommands>
	for( ;; )
 8009e90:	e7f6      	b.n	8009e80 <prvTimerTask+0x8>
	...

08009e94 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009e94:	b510      	push	{r4, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	4614      	mov	r4, r2
 8009e9a:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009e9c:	f06f 0301 	mvn.w	r3, #1
 8009ea0:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009ea2:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009ea4:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009ea6:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4669      	mov	r1, sp
 8009eac:	4802      	ldr	r0, [pc, #8]	; (8009eb8 <xTimerPendFunctionCallFromISR+0x24>)
 8009eae:	6800      	ldr	r0, [r0, #0]
 8009eb0:	f7fe fe3e 	bl	8008b30 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8009eb4:	b004      	add	sp, #16
 8009eb6:	bd10      	pop	{r4, pc}
 8009eb8:	20001f84 	.word	0x20001f84

08009ebc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ebc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ec2:	4b0d      	ldr	r3, [pc, #52]	; (8009ef8 <prvTaskExitError+0x3c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009eca:	d008      	beq.n	8009ede <prvTaskExitError+0x22>
 8009ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed0:	f383 8811 	msr	BASEPRI, r3
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	e7fe      	b.n	8009edc <prvTaskExitError+0x20>
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009eee:	9b01      	ldr	r3, [sp, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d0fc      	beq.n	8009eee <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ef4:	b002      	add	sp, #8
 8009ef6:	4770      	bx	lr
 8009ef8:	2000011c 	.word	0x2000011c

08009efc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009efc:	4808      	ldr	r0, [pc, #32]	; (8009f20 <prvPortStartFirstTask+0x24>)
 8009efe:	6800      	ldr	r0, [r0, #0]
 8009f00:	6800      	ldr	r0, [r0, #0]
 8009f02:	f380 8808 	msr	MSP, r0
 8009f06:	f04f 0000 	mov.w	r0, #0
 8009f0a:	f380 8814 	msr	CONTROL, r0
 8009f0e:	b662      	cpsie	i
 8009f10:	b661      	cpsie	f
 8009f12:	f3bf 8f4f 	dsb	sy
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	df00      	svc	0
 8009f1c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f1e:	0000      	.short	0x0000
 8009f20:	e000ed08 	.word	0xe000ed08

08009f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f34 <vPortEnableVFP+0x10>
 8009f28:	6801      	ldr	r1, [r0, #0]
 8009f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f2e:	6001      	str	r1, [r0, #0]
 8009f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f32:	0000      	.short	0x0000
 8009f34:	e000ed88 	.word	0xe000ed88

08009f38 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f3c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f40:	f021 0101 	bic.w	r1, r1, #1
 8009f44:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f48:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <pxPortInitialiseStack+0x28>)
 8009f4a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f4e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f52:	f06f 0302 	mvn.w	r3, #2
 8009f56:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8009f5a:	3844      	subs	r0, #68	; 0x44
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	08009ebd 	.word	0x08009ebd
	...

08009f70 <SVC_Handler>:
	__asm volatile (
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <pxCurrentTCBConst2>)
 8009f72:	6819      	ldr	r1, [r3, #0]
 8009f74:	6808      	ldr	r0, [r1, #0]
 8009f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7a:	f380 8809 	msr	PSP, r0
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f04f 0000 	mov.w	r0, #0
 8009f86:	f380 8811 	msr	BASEPRI, r0
 8009f8a:	4770      	bx	lr
 8009f8c:	f3af 8000 	nop.w

08009f90 <pxCurrentTCBConst2>:
 8009f90:	20001e1c 	.word	0x20001e1c

08009f94 <vPortEnterCritical>:
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009fa4:	4a0b      	ldr	r2, [pc, #44]	; (8009fd4 <vPortEnterCritical+0x40>)
 8009fa6:	6813      	ldr	r3, [r2, #0]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d000      	beq.n	8009fb2 <vPortEnterCritical+0x1e>
}
 8009fb0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fb2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009fb6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009fba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009fbe:	d0f7      	beq.n	8009fb0 <vPortEnterCritical+0x1c>
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	e7fe      	b.n	8009fd0 <vPortEnterCritical+0x3c>
 8009fd2:	bf00      	nop
 8009fd4:	2000011c 	.word	0x2000011c

08009fd8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009fd8:	4b09      	ldr	r3, [pc, #36]	; (800a000 <vPortExitCritical+0x28>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	b943      	cbnz	r3, 8009ff0 <vPortExitCritical+0x18>
 8009fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	e7fe      	b.n	8009fee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	4a03      	ldr	r2, [pc, #12]	; (800a000 <vPortExitCritical+0x28>)
 8009ff4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ff6:	b90b      	cbnz	r3, 8009ffc <vPortExitCritical+0x24>
	__asm volatile
 8009ff8:	f383 8811 	msr	BASEPRI, r3
}
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	2000011c 	.word	0x2000011c
	...

0800a010 <PendSV_Handler>:
	__asm volatile
 800a010:	f3ef 8009 	mrs	r0, PSP
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	4b15      	ldr	r3, [pc, #84]	; (800a070 <pxCurrentTCBConst>)
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	f01e 0f10 	tst.w	lr, #16
 800a020:	bf08      	it	eq
 800a022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02a:	6010      	str	r0, [r2, #0]
 800a02c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a030:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a034:	f380 8811 	msr	BASEPRI, r0
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f7ff fa94 	bl	800956c <vTaskSwitchContext>
 800a044:	f04f 0000 	mov.w	r0, #0
 800a048:	f380 8811 	msr	BASEPRI, r0
 800a04c:	bc09      	pop	{r0, r3}
 800a04e:	6819      	ldr	r1, [r3, #0]
 800a050:	6808      	ldr	r0, [r1, #0]
 800a052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a056:	f01e 0f10 	tst.w	lr, #16
 800a05a:	bf08      	it	eq
 800a05c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a060:	f380 8809 	msr	PSP, r0
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	f3af 8000 	nop.w

0800a070 <pxCurrentTCBConst>:
 800a070:	20001e1c 	.word	0x20001e1c

0800a074 <SysTick_Handler>:
{
 800a074:	b508      	push	{r3, lr}
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a086:	f7ff f939 	bl	80092fc <xTaskIncrementTick>
 800a08a:	b128      	cbz	r0, 800a098 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a08c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a094:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800a098:	2300      	movs	r3, #0
 800a09a:	f383 8811 	msr	BASEPRI, r3
}
 800a09e:	bd08      	pop	{r3, pc}

0800a0a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0a0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0a8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0aa:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <vPortSetupTimerInterrupt+0x20>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4905      	ldr	r1, [pc, #20]	; (800a0c4 <vPortSetupTimerInterrupt+0x24>)
 800a0b0:	fba1 1303 	umull	r1, r3, r1, r3
 800a0b4:	099b      	lsrs	r3, r3, #6
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0ba:	2307      	movs	r3, #7
 800a0bc:	6113      	str	r3, [r2, #16]
}
 800a0be:	4770      	bx	lr
 800a0c0:	20000000 	.word	0x20000000
 800a0c4:	10624dd3 	.word	0x10624dd3

0800a0c8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a0cc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800a0d0:	4b3d      	ldr	r3, [pc, #244]	; (800a1c8 <xPortStartScheduler+0x100>)
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d01c      	beq.n	800a110 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a0da:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800a0de:	4b3b      	ldr	r3, [pc, #236]	; (800a1cc <xPortStartScheduler+0x104>)
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d01e      	beq.n	800a122 <xPortStartScheduler+0x5a>
{
 800a0e4:	b530      	push	{r4, r5, lr}
 800a0e6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0e8:	4b39      	ldr	r3, [pc, #228]	; (800a1d0 <xPortStartScheduler+0x108>)
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	b2d2      	uxtb	r2, r2
 800a0ee:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0f0:	22ff      	movs	r2, #255	; 0xff
 800a0f2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a100:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a104:	4a33      	ldr	r2, [pc, #204]	; (800a1d4 <xPortStartScheduler+0x10c>)
 800a106:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a108:	4b33      	ldr	r3, [pc, #204]	; (800a1d8 <xPortStartScheduler+0x110>)
 800a10a:	2207      	movs	r2, #7
 800a10c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a10e:	e01b      	b.n	800a148 <xPortStartScheduler+0x80>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a120:	e7fe      	b.n	800a120 <xPortStartScheduler+0x58>
 800a122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a132:	e7fe      	b.n	800a132 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800a134:	4a28      	ldr	r2, [pc, #160]	; (800a1d8 <xPortStartScheduler+0x110>)
 800a136:	6813      	ldr	r3, [r2, #0]
 800a138:	3b01      	subs	r3, #1
 800a13a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a13c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a140:	005b      	lsls	r3, r3, #1
 800a142:	b2db      	uxtb	r3, r3
 800a144:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a148:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a14c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a150:	d1f0      	bne.n	800a134 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a152:	4b21      	ldr	r3, [pc, #132]	; (800a1d8 <xPortStartScheduler+0x110>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b03      	cmp	r3, #3
 800a158:	d008      	beq.n	800a16c <xPortStartScheduler+0xa4>
 800a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	e7fe      	b.n	800a16a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a16c:	021b      	lsls	r3, r3, #8
 800a16e:	4a1a      	ldr	r2, [pc, #104]	; (800a1d8 <xPortStartScheduler+0x110>)
 800a170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a172:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a176:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a178:	9b01      	ldr	r3, [sp, #4]
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	4a14      	ldr	r2, [pc, #80]	; (800a1d0 <xPortStartScheduler+0x108>)
 800a17e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a180:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800a184:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800a188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a18c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a190:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800a194:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a198:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800a19c:	f7ff ff80 	bl	800a0a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a1a0:	2500      	movs	r5, #0
 800a1a2:	4b0e      	ldr	r3, [pc, #56]	; (800a1dc <xPortStartScheduler+0x114>)
 800a1a4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800a1a6:	f7ff febd 	bl	8009f24 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1aa:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800a1ae:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a1b2:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800a1b6:	f7ff fea1 	bl	8009efc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a1ba:	f7ff f9d7 	bl	800956c <vTaskSwitchContext>
	prvTaskExitError();
 800a1be:	f7ff fe7d 	bl	8009ebc <prvTaskExitError>
}
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	b003      	add	sp, #12
 800a1c6:	bd30      	pop	{r4, r5, pc}
 800a1c8:	410fc271 	.word	0x410fc271
 800a1cc:	410fc270 	.word	0x410fc270
 800a1d0:	e000e400 	.word	0xe000e400
 800a1d4:	20001f8c 	.word	0x20001f8c
 800a1d8:	20001f90 	.word	0x20001f90
 800a1dc:	2000011c 	.word	0x2000011c

0800a1e0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1e0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1e4:	2b0f      	cmp	r3, #15
 800a1e6:	d90f      	bls.n	800a208 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1e8:	4a11      	ldr	r2, [pc, #68]	; (800a230 <vPortValidateInterruptPriority+0x50>)
 800a1ea:	5c9b      	ldrb	r3, [r3, r2]
 800a1ec:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1ee:	4a11      	ldr	r2, [pc, #68]	; (800a234 <vPortValidateInterruptPriority+0x54>)
 800a1f0:	7812      	ldrb	r2, [r2, #0]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d908      	bls.n	800a208 <vPortValidateInterruptPriority+0x28>
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	e7fe      	b.n	800a206 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a208:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a20c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800a210:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a214:	4a08      	ldr	r2, [pc, #32]	; (800a238 <vPortValidateInterruptPriority+0x58>)
 800a216:	6812      	ldr	r2, [r2, #0]
 800a218:	4293      	cmp	r3, r2
 800a21a:	d908      	bls.n	800a22e <vPortValidateInterruptPriority+0x4e>
 800a21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	e7fe      	b.n	800a22c <vPortValidateInterruptPriority+0x4c>
	}
 800a22e:	4770      	bx	lr
 800a230:	e000e3f0 	.word	0xe000e3f0
 800a234:	20001f8c 	.word	0x20001f8c
 800a238:	20001f90 	.word	0x20001f90

0800a23c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a23c:	4a12      	ldr	r2, [pc, #72]	; (800a288 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a23e:	f012 0f07 	tst.w	r2, #7
 800a242:	d01e      	beq.n	800a282 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a244:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a246:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a24a:	f5c1 43a0 	rsb	r3, r1, #20480	; 0x5000
 800a24e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a250:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a252:	480e      	ldr	r0, [pc, #56]	; (800a28c <prvHeapInit+0x50>)
 800a254:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a256:	2100      	movs	r1, #0
 800a258:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a25a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800a25c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a25e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800a262:	480b      	ldr	r0, [pc, #44]	; (800a290 <prvHeapInit+0x54>)
 800a264:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800a266:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a268:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a26a:	1a99      	subs	r1, r3, r2
 800a26c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a26e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a270:	4b08      	ldr	r3, [pc, #32]	; (800a294 <prvHeapInit+0x58>)
 800a272:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a274:	4b08      	ldr	r3, [pc, #32]	; (800a298 <prvHeapInit+0x5c>)
 800a276:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a278:	4b08      	ldr	r3, [pc, #32]	; (800a29c <prvHeapInit+0x60>)
 800a27a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a27e:	601a      	str	r2, [r3, #0]
}
 800a280:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a282:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800a286:	e7e4      	b.n	800a252 <prvHeapInit+0x16>
 800a288:	20001f98 	.word	0x20001f98
 800a28c:	20006fac 	.word	0x20006fac
 800a290:	20001f94 	.word	0x20001f94
 800a294:	20006fa0 	.word	0x20006fa0
 800a298:	20006f9c 	.word	0x20006f9c
 800a29c:	20006f98 	.word	0x20006f98

0800a2a0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2a0:	4b16      	ldr	r3, [pc, #88]	; (800a2fc <prvInsertBlockIntoFreeList+0x5c>)
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4283      	cmp	r3, r0
 800a2a8:	d3fb      	bcc.n	800a2a2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2aa:	6851      	ldr	r1, [r2, #4]
 800a2ac:	eb02 0c01 	add.w	ip, r2, r1
 800a2b0:	4584      	cmp	ip, r0
 800a2b2:	d009      	beq.n	800a2c8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a2b4:	6841      	ldr	r1, [r0, #4]
 800a2b6:	eb00 0c01 	add.w	ip, r0, r1
 800a2ba:	4563      	cmp	r3, ip
 800a2bc:	d009      	beq.n	800a2d2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a2be:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a2c0:	4290      	cmp	r0, r2
 800a2c2:	d019      	beq.n	800a2f8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2c4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800a2c6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2c8:	6840      	ldr	r0, [r0, #4]
 800a2ca:	4401      	add	r1, r0
 800a2cc:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	e7f0      	b.n	800a2b4 <prvInsertBlockIntoFreeList+0x14>
{
 800a2d2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a2d4:	4c0a      	ldr	r4, [pc, #40]	; (800a300 <prvInsertBlockIntoFreeList+0x60>)
 800a2d6:	6824      	ldr	r4, [r4, #0]
 800a2d8:	42a3      	cmp	r3, r4
 800a2da:	d00b      	beq.n	800a2f4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	4419      	add	r1, r3
 800a2e0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a2e2:	6813      	ldr	r3, [r2, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800a2e8:	4290      	cmp	r0, r2
 800a2ea:	d000      	beq.n	800a2ee <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2ec:	6010      	str	r0, [r2, #0]
	}
}
 800a2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2f2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a2f4:	6004      	str	r4, [r0, #0]
 800a2f6:	e7f7      	b.n	800a2e8 <prvInsertBlockIntoFreeList+0x48>
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	20006fac 	.word	0x20006fac
 800a300:	20001f94 	.word	0x20001f94

0800a304 <pvPortMalloc>:
{
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800a308:	f7fe ffe2 	bl	80092d0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a30c:	4b36      	ldr	r3, [pc, #216]	; (800a3e8 <pvPortMalloc+0xe4>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	b1a3      	cbz	r3, 800a33c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a312:	4b36      	ldr	r3, [pc, #216]	; (800a3ec <pvPortMalloc+0xe8>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	421d      	tst	r5, r3
 800a318:	d14e      	bne.n	800a3b8 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800a31a:	b135      	cbz	r5, 800a32a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800a31c:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a31e:	f015 0f07 	tst.w	r5, #7
 800a322:	d002      	beq.n	800a32a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a324:	f025 0507 	bic.w	r5, r5, #7
 800a328:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a32a:	2d00      	cmp	r5, #0
 800a32c:	d046      	beq.n	800a3bc <pvPortMalloc+0xb8>
 800a32e:	4b30      	ldr	r3, [pc, #192]	; (800a3f0 <pvPortMalloc+0xec>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	42ab      	cmp	r3, r5
 800a334:	d351      	bcc.n	800a3da <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 800a336:	4a2f      	ldr	r2, [pc, #188]	; (800a3f4 <pvPortMalloc+0xf0>)
 800a338:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a33a:	e004      	b.n	800a346 <pvPortMalloc+0x42>
			prvHeapInit();
 800a33c:	f7ff ff7e 	bl	800a23c <prvHeapInit>
 800a340:	e7e7      	b.n	800a312 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800a342:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800a344:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a346:	6863      	ldr	r3, [r4, #4]
 800a348:	42ab      	cmp	r3, r5
 800a34a:	d202      	bcs.n	800a352 <pvPortMalloc+0x4e>
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1f7      	bne.n	800a342 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800a352:	4b25      	ldr	r3, [pc, #148]	; (800a3e8 <pvPortMalloc+0xe4>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	42a3      	cmp	r3, r4
 800a358:	d041      	beq.n	800a3de <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a35a:	6816      	ldr	r6, [r2, #0]
 800a35c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a362:	6863      	ldr	r3, [r4, #4]
 800a364:	1b5b      	subs	r3, r3, r5
 800a366:	2b10      	cmp	r3, #16
 800a368:	d910      	bls.n	800a38c <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a36a:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a36c:	f010 0f07 	tst.w	r0, #7
 800a370:	d008      	beq.n	800a384 <pvPortMalloc+0x80>
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	e7fe      	b.n	800a382 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a384:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a386:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a388:	f7ff ff8a 	bl	800a2a0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a38c:	6862      	ldr	r2, [r4, #4]
 800a38e:	4918      	ldr	r1, [pc, #96]	; (800a3f0 <pvPortMalloc+0xec>)
 800a390:	680b      	ldr	r3, [r1, #0]
 800a392:	1a9b      	subs	r3, r3, r2
 800a394:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a396:	4918      	ldr	r1, [pc, #96]	; (800a3f8 <pvPortMalloc+0xf4>)
 800a398:	6809      	ldr	r1, [r1, #0]
 800a39a:	428b      	cmp	r3, r1
 800a39c:	d201      	bcs.n	800a3a2 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a39e:	4916      	ldr	r1, [pc, #88]	; (800a3f8 <pvPortMalloc+0xf4>)
 800a3a0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3a2:	4b12      	ldr	r3, [pc, #72]	; (800a3ec <pvPortMalloc+0xe8>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800a3ae:	4a13      	ldr	r2, [pc, #76]	; (800a3fc <pvPortMalloc+0xf8>)
 800a3b0:	6813      	ldr	r3, [r2, #0]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	6013      	str	r3, [r2, #0]
 800a3b6:	e002      	b.n	800a3be <pvPortMalloc+0xba>
void *pvReturn = NULL;
 800a3b8:	2600      	movs	r6, #0
 800a3ba:	e000      	b.n	800a3be <pvPortMalloc+0xba>
 800a3bc:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800a3be:	f7ff f82d 	bl	800941c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3c2:	f016 0f07 	tst.w	r6, #7
 800a3c6:	d00c      	beq.n	800a3e2 <pvPortMalloc+0xde>
 800a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	e7fe      	b.n	800a3d8 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 800a3da:	2600      	movs	r6, #0
 800a3dc:	e7ef      	b.n	800a3be <pvPortMalloc+0xba>
 800a3de:	2600      	movs	r6, #0
 800a3e0:	e7ed      	b.n	800a3be <pvPortMalloc+0xba>
}
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	bd70      	pop	{r4, r5, r6, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20001f94 	.word	0x20001f94
 800a3ec:	20006f98 	.word	0x20006f98
 800a3f0:	20006f9c 	.word	0x20006f9c
 800a3f4:	20006fac 	.word	0x20006fac
 800a3f8:	20006fa0 	.word	0x20006fa0
 800a3fc:	20006fa4 	.word	0x20006fa4

0800a400 <vPortFree>:
	if( pv != NULL )
 800a400:	2800      	cmp	r0, #0
 800a402:	d034      	beq.n	800a46e <vPortFree+0x6e>
{
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800a408:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a40c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a410:	4a17      	ldr	r2, [pc, #92]	; (800a470 <vPortFree+0x70>)
 800a412:	6812      	ldr	r2, [r2, #0]
 800a414:	4213      	tst	r3, r2
 800a416:	d108      	bne.n	800a42a <vPortFree+0x2a>
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	e7fe      	b.n	800a428 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a42a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a42e:	b141      	cbz	r1, 800a442 <vPortFree+0x42>
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	e7fe      	b.n	800a440 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a442:	ea23 0302 	bic.w	r3, r3, r2
 800a446:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a44a:	f7fe ff41 	bl	80092d0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a44e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800a452:	4a08      	ldr	r2, [pc, #32]	; (800a474 <vPortFree+0x74>)
 800a454:	6813      	ldr	r3, [r2, #0]
 800a456:	440b      	add	r3, r1
 800a458:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a45a:	4628      	mov	r0, r5
 800a45c:	f7ff ff20 	bl	800a2a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a460:	4a05      	ldr	r2, [pc, #20]	; (800a478 <vPortFree+0x78>)
 800a462:	6813      	ldr	r3, [r2, #0]
 800a464:	3301      	adds	r3, #1
 800a466:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800a468:	f7fe ffd8 	bl	800941c <xTaskResumeAll>
}
 800a46c:	bd38      	pop	{r3, r4, r5, pc}
 800a46e:	4770      	bx	lr
 800a470:	20006f98 	.word	0x20006f98
 800a474:	20006f9c 	.word	0x20006f9c
 800a478:	20006fa8 	.word	0x20006fa8

0800a47c <printf_debug_msg>:
   }
   return dlc;
}

static void printf_debug_msg(struct can_iso_tp_init_t *link, char *msg)
{
 800a47c:	b508      	push	{r3, lr}
   if (NULL != link->print_debug)
 800a47e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a480:	b10b      	cbz	r3, 800a486 <printf_debug_msg+0xa>
   {
      link->print_debug(msg);
 800a482:	4608      	mov	r0, r1
 800a484:	4798      	blx	r3
   }
}
 800a486:	bd08      	pop	{r3, pc}

0800a488 <rx_event_handle_poll>:
   tx_event_cf_frame(link);
   return 0;
}

static int rx_event_handle_poll(can_iso_tp_link_t_p link, unsigned int user_ms)
{
 800a488:	b570      	push	{r4, r5, r6, lr}
 800a48a:	4604      	mov	r4, r0
 800a48c:	460d      	mov	r5, r1
   if (link->rx_record.status == rx_wait_cf)
 800a48e:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800a492:	2b03      	cmp	r3, #3
 800a494:	d00d      	beq.n	800a4b2 <rx_event_handle_poll+0x2a>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_CR);
         }
         link->rx_record.status = rx_idle;
      }
   }
   if ((link->rx_record.status == rx_tx_fc_wait_confirm) || (link->rx_record.status == rx_tx_fc))
 800a496:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800a49a:	3b01      	subs	r3, #1
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d918      	bls.n	800a4d4 <rx_event_handle_poll+0x4c>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_A);
         }
         link->rx_record.status = rx_idle;
      }
   }
   if (link->rx_record.status == rx_tx_fc)
 800a4a2:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d026      	beq.n	800a4f8 <rx_event_handle_poll+0x70>
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
      {
         link->rx_record.status = rx_tx_fc_wait_confirm;
      }
   }
   else if (link->rx_record.status == rx_tx_fc_overrun)
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	d02f      	beq.n	800a50e <rx_event_handle_poll+0x86>
      {
         link->rx_record.status = rx_tx_fc_overrun_wait_confirm;
      }
   }
   return 0;
}
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	bd70      	pop	{r4, r5, r6, pc}
      if ((user_ms - link->rx_record.last_msg_time_ms) > link->init_info.N_Cr)
 800a4b2:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
 800a4b6:	1acb      	subs	r3, r1, r3
 800a4b8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d9eb      	bls.n	800a496 <rx_event_handle_poll+0xe>
         if (link->init_info.N_USData_indication)
 800a4be:	6946      	ldr	r6, [r0, #20]
 800a4c0:	b126      	cbz	r6, 800a4cc <rx_event_handle_poll+0x44>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_CR);
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 800a4c8:	69c1      	ldr	r1, [r0, #28]
 800a4ca:	47b0      	blx	r6
         link->rx_record.status = rx_idle;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800a4d2:	e7e0      	b.n	800a496 <rx_event_handle_poll+0xe>
      if ((user_ms - link->rx_record.last_msg_time_ms) > link->init_info.N_Ar)
 800a4d4:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
 800a4d8:	1ae9      	subs	r1, r5, r3
 800a4da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a4dc:	4299      	cmp	r1, r3
 800a4de:	d9e0      	bls.n	800a4a2 <rx_event_handle_poll+0x1a>
         if (link->init_info.N_USData_indication)
 800a4e0:	6965      	ldr	r5, [r4, #20]
 800a4e2:	b12d      	cbz	r5, 800a4f0 <rx_event_handle_poll+0x68>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_A);
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
 800a4ea:	69e1      	ldr	r1, [r4, #28]
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	47a8      	blx	r5
         link->rx_record.status = rx_idle;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800a4f6:	e7d4      	b.n	800a4a2 <rx_event_handle_poll+0x1a>
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 800a4f8:	6923      	ldr	r3, [r4, #16]
 800a4fa:	f504 71a4 	add.w	r1, r4, #328	; 0x148
 800a4fe:	4620      	mov	r0, r4
 800a500:	4798      	blx	r3
 800a502:	2800      	cmp	r0, #0
 800a504:	d1d3      	bne.n	800a4ae <rx_event_handle_poll+0x26>
         link->rx_record.status = rx_tx_fc_wait_confirm;
 800a506:	2302      	movs	r3, #2
 800a508:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800a50c:	e7cf      	b.n	800a4ae <rx_event_handle_poll+0x26>
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 800a50e:	6923      	ldr	r3, [r4, #16]
 800a510:	f504 71a4 	add.w	r1, r4, #328	; 0x148
 800a514:	4620      	mov	r0, r4
 800a516:	4798      	blx	r3
 800a518:	2800      	cmp	r0, #0
 800a51a:	d1c8      	bne.n	800a4ae <rx_event_handle_poll+0x26>
         link->rx_record.status = rx_tx_fc_overrun_wait_confirm;
 800a51c:	2305      	movs	r3, #5
 800a51e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800a522:	e7c4      	b.n	800a4ae <rx_event_handle_poll+0x26>

0800a524 <rx_event_L_Data_Confirm>:

static int rx_event_L_Data_Confirm(can_iso_tp_link_t_p link, int8_t error)
{
   if (link->rx_record.status == rx_tx_fc_wait_confirm)
 800a524:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d003      	beq.n	800a534 <rx_event_L_Data_Confirm+0x10>
   {
      link->rx_record.status = rx_wait_cf;
   }
   else if (link->rx_record.status == rx_tx_fc_overrun_wait_confirm)
 800a52c:	2b05      	cmp	r3, #5
 800a52e:	d005      	beq.n	800a53c <rx_event_L_Data_Confirm+0x18>
   {
      link->rx_record.status = rx_idle;
   }
   return 0;
}
 800a530:	2000      	movs	r0, #0
 800a532:	4770      	bx	lr
      link->rx_record.status = rx_wait_cf;
 800a534:	2303      	movs	r3, #3
 800a536:	f880 3138 	strb.w	r3, [r0, #312]	; 0x138
 800a53a:	e7f9      	b.n	800a530 <rx_event_L_Data_Confirm+0xc>
      link->rx_record.status = rx_idle;
 800a53c:	2300      	movs	r3, #0
 800a53e:	f880 3138 	strb.w	r3, [r0, #312]	; 0x138
 800a542:	e7f5      	b.n	800a530 <rx_event_L_Data_Confirm+0xc>

0800a544 <rx_event_poll_handle>:
   tx_event_L_Data_indication(par->link, &par->rx_msg);
   par->handle = (event_handle_t)0;
}

static void rx_event_poll_handle(void *par_src)
{
 800a544:	b510      	push	{r4, lr}
 800a546:	4604      	mov	r4, r0
   struct time_poll_par_t *par = (struct time_poll_par_t *)par_src;
   rx_event_handle_poll(par->link, par->user_ms);
 800a548:	6881      	ldr	r1, [r0, #8]
 800a54a:	6840      	ldr	r0, [r0, #4]
 800a54c:	f7ff ff9c 	bl	800a488 <rx_event_handle_poll>
   par->handle = (event_handle_t)0;
 800a550:	2300      	movs	r3, #0
 800a552:	6023      	str	r3, [r4, #0]
}
 800a554:	bd10      	pop	{r4, pc}

0800a556 <rx_event_L_Data_Confirm_handle>:

static void rx_event_L_Data_Confirm_handle(void *par_src)
{
 800a556:	b508      	push	{r3, lr}
   struct L_Data_confirm_par_t *par = (struct L_Data_confirm_par_t *)par_src;
   int8_t error = par->error;
   par->handle = (event_handle_t)0;
 800a558:	2300      	movs	r3, #0
 800a55a:	6003      	str	r3, [r0, #0]
   rx_event_L_Data_Confirm(par->link, error);
 800a55c:	f990 1008 	ldrsb.w	r1, [r0, #8]
 800a560:	6840      	ldr	r0, [r0, #4]
 800a562:	f7ff ffdf 	bl	800a524 <rx_event_L_Data_Confirm>
}
 800a566:	bd08      	pop	{r3, pc}

0800a568 <event_manage_block_init>:
{
 800a568:	b510      	push	{r4, lr}
 800a56a:	4604      	mov	r4, r0
   mcu_lock_init(&event->lock);
 800a56c:	f000 fec1 	bl	800b2f2 <mcu_lock_init>
   if (!QueueInit(&event->fifo, event->fifo_data, sizeof(event->fifo_data) / sizeof(event->fifo_data[0])))
 800a570:	2203      	movs	r2, #3
 800a572:	1d21      	adds	r1, r4, #4
 800a574:	f104 0010 	add.w	r0, r4, #16
 800a578:	f000 fe68 	bl	800b24c <QueueInit>
 800a57c:	b108      	cbz	r0, 800a582 <event_manage_block_init+0x1a>
   return 0;
 800a57e:	2000      	movs	r0, #0
}
 800a580:	bd10      	pop	{r4, pc}
      return -1;
 800a582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a586:	e7fb      	b.n	800a580 <event_manage_block_init+0x18>

0800a588 <tx_event_cf_frame>:
{
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if (link->tx_record.status == tx_cf_wait_tx)
 800a58a:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
 800a58e:	2b06      	cmp	r3, #6
 800a590:	d001      	beq.n	800a596 <tx_event_cf_frame+0xe>
}
 800a592:	2000      	movs	r0, #0
 800a594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a596:	4604      	mov	r4, r0
      if (link->tx_record.rx_Stmin != 0)
 800a598:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
 800a59c:	b12b      	cbz	r3, 800a5aa <tx_event_cf_frame+0x22>
         if ((link->current_time_ms - link->tx_record.last_msg_time_ms) < link->tx_record.rx_Stmin)
 800a59e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a5a0:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800a5a4:	1a52      	subs	r2, r2, r1
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d3f3      	bcc.n	800a592 <tx_event_cf_frame+0xa>
         uint32_t txLen = link->tx_record.current_size - link->tx_record.current_tx_index;
 800a5aa:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a5ae:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a5b2:	1a53      	subs	r3, r2, r1
         if (txLen > (uint32_t)(dlc2len(link->init_info.TX_DLC) - 1))
 800a5b4:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800a5b8:	f007 000f 	and.w	r0, r7, #15
 800a5bc:	4d34      	ldr	r5, [pc, #208]	; (800a690 <tx_event_cf_frame+0x108>)
 800a5be:	5c2e      	ldrb	r6, [r5, r0]
         if (txLen > (uint32_t)(dlc2len(link->init_info.TX_DLC) - 1))
 800a5c0:	1e75      	subs	r5, r6, #1
 800a5c2:	429d      	cmp	r5, r3
 800a5c4:	d300      	bcc.n	800a5c8 <tx_event_cf_frame+0x40>
         uint32_t txLen = link->tx_record.current_size - link->tx_record.current_tx_index;
 800a5c6:	461d      	mov	r5, r3
         if (txLen == 0)
 800a5c8:	b955      	cbnz	r5, 800a5e0 <tx_event_cf_frame+0x58>
            link->tx_record.status = tx_idle;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
            if (link->init_info.N_USData_confirm)
 800a5d0:	69a5      	ldr	r5, [r4, #24]
 800a5d2:	2d00      	cmp	r5, #0
 800a5d4:	d0dd      	beq.n	800a592 <tx_event_cf_frame+0xa>
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_OK);
 800a5d6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a5da:	4620      	mov	r0, r4
 800a5dc:	47a8      	blx	r5
 800a5de:	e7d8      	b.n	800a592 <tx_event_cf_frame+0xa>
            link->tx_record.last_msg.id = link->init_info.tx_id;
 800a5e0:	6863      	ldr	r3, [r4, #4]
 800a5e2:	6423      	str	r3, [r4, #64]	; 0x40
            link->tx_record.last_msg.data[0] = 0x20 | (link->tx_record.current_tx_SN & 0xf);
 800a5e4:	f994 3098 	ldrsb.w	r3, [r4, #152]	; 0x98
 800a5e8:	f003 030f 	and.w	r3, r3, #15
 800a5ec:	f043 0320 	orr.w	r3, r3, #32
 800a5f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            memcpy(&link->tx_record.last_msg.data[1], &link->tx_record.current_playload[link->tx_record.current_tx_index], txLen);
 800a5f4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a5f8:	462a      	mov	r2, r5
 800a5fa:	4419      	add	r1, r3
 800a5fc:	f104 0046 	add.w	r0, r4, #70	; 0x46
 800a600:	f007 fb82 	bl	8011d08 <memcpy>
            if (dlc2len(link->init_info.TX_DLC) > (1 + txLen))
 800a604:	1c6b      	adds	r3, r5, #1
 800a606:	429e      	cmp	r6, r3
 800a608:	d820      	bhi.n	800a64c <tx_event_cf_frame+0xc4>
               link->tx_record.last_msg.dlc = link->init_info.TX_DLC;
 800a60a:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
            link->tx_record.current_tx_index += txLen;
 800a60e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a612:	442b      	add	r3, r5
 800a614:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            link->tx_record.status = tx_cf_wait_tx;
 800a618:	2306      	movs	r3, #6
 800a61a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
            link->tx_record.last_msg_time_ms = link->current_time_ms;
 800a61e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a620:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
            if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800a624:	6923      	ldr	r3, [r4, #16]
 800a626:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800a62a:	4620      	mov	r0, r4
 800a62c:	4798      	blx	r3
 800a62e:	bb58      	cbnz	r0, 800a688 <tx_event_cf_frame+0x100>
               link->tx_record.rx_BS_tx++;
 800a630:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800a634:	3301      	adds	r3, #1
 800a636:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
               link->tx_record.current_tx_SN++;
 800a63a:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800a63e:	3301      	adds	r3, #1
 800a640:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
               link->tx_record.status = tx_cf_wait_confirm;
 800a644:	2308      	movs	r3, #8
 800a646:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a64a:	e7a2      	b.n	800a592 <tx_event_cf_frame+0xa>
               memset(&link->tx_record.last_msg.data[1 + txLen], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 1 - txLen);
 800a64c:	f105 0341 	add.w	r3, r5, #65	; 0x41
 800a650:	18e0      	adds	r0, r4, r3
 800a652:	1b72      	subs	r2, r6, r5
 800a654:	3a01      	subs	r2, #1
 800a656:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800a65a:	3005      	adds	r0, #5
 800a65c:	f007 fa96 	bl	8011b8c <memset>
               link->tx_record.last_msg.dlc = lenToMinDlc(txLen + 1);
 800a660:	1c69      	adds	r1, r5, #1
 800a662:	b289      	uxth	r1, r1
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800a664:	2300      	movs	r3, #0
 800a666:	2b10      	cmp	r3, #16
 800a668:	d805      	bhi.n	800a676 <tx_event_cf_frame+0xee>
      if (len <= dlc_len_table[dlc])
 800a66a:	4a09      	ldr	r2, [pc, #36]	; (800a690 <tx_event_cf_frame+0x108>)
 800a66c:	5cd2      	ldrb	r2, [r2, r3]
 800a66e:	4291      	cmp	r1, r2
 800a670:	d901      	bls.n	800a676 <tx_event_cf_frame+0xee>
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800a672:	3301      	adds	r3, #1
 800a674:	e7f7      	b.n	800a666 <tx_event_cf_frame+0xde>
               link->tx_record.last_msg.dlc = lenToMinDlc(txLen + 1);
 800a676:	b2db      	uxtb	r3, r3
 800a678:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
               if (link->tx_record.last_msg.dlc < 8)
 800a67c:	2b07      	cmp	r3, #7
 800a67e:	d8c6      	bhi.n	800a60e <tx_event_cf_frame+0x86>
                  link->tx_record.last_msg.dlc = 8;
 800a680:	2308      	movs	r3, #8
 800a682:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a686:	e7c2      	b.n	800a60e <tx_event_cf_frame+0x86>
               link->tx_record.status = tx_cf_wait_tx_retry;
 800a688:	2307      	movs	r3, #7
 800a68a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a68e:	e780      	b.n	800a592 <tx_event_cf_frame+0xa>
 800a690:	080134f8 	.word	0x080134f8

0800a694 <tx_event_poll>:
{
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4604      	mov	r4, r0
   if (link->tx_record.status != tx_idle)
 800a698:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
 800a69c:	b193      	cbz	r3, 800a6c4 <tx_event_poll+0x30>
      if ((user_ms - link->tx_record.last_msg_time_ms) > link->init_info.N_As)
 800a69e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800a6a2:	1a89      	subs	r1, r1, r2
 800a6a4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 800a6a6:	4291      	cmp	r1, r2
 800a6a8:	d918      	bls.n	800a6dc <tx_event_poll+0x48>
         if (link->init_info.N_USData_confirm)
 800a6aa:	6985      	ldr	r5, [r0, #24]
 800a6ac:	b13d      	cbz	r5, 800a6be <tx_event_poll+0x2a>
            if (link->tx_record.status == tx_wait_fc)
 800a6ae:	2b05      	cmp	r3, #5
 800a6b0:	d00d      	beq.n	800a6ce <tx_event_poll+0x3a>
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_TIMEOUT_A);
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a6b8:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800a6bc:	47a8      	blx	r5
         link->tx_record.status = tx_idle;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
   tx_event_cf_frame(link);
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f7ff ff5f 	bl	800a588 <tx_event_cf_frame>
}
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	bd38      	pop	{r3, r4, r5, pc}
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_TIMEOUT_BS);
 800a6ce:	2302      	movs	r3, #2
 800a6d0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a6d4:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800a6d8:	47a8      	blx	r5
 800a6da:	e7f0      	b.n	800a6be <tx_event_poll+0x2a>
      else if (link->tx_record.status == tx_sf_wait_tx)
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d017      	beq.n	800a710 <tx_event_poll+0x7c>
      else if (link->tx_record.status == tx_ff_wait_tx)
 800a6e0:	2b03      	cmp	r3, #3
 800a6e2:	d01f      	beq.n	800a724 <tx_event_poll+0x90>
      else if (link->tx_record.status == tx_cf_wait_tx_retry)
 800a6e4:	2b07      	cmp	r3, #7
 800a6e6:	d1ed      	bne.n	800a6c4 <tx_event_poll+0x30>
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800a6e8:	6903      	ldr	r3, [r0, #16]
 800a6ea:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800a6ee:	4798      	blx	r3
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d1e7      	bne.n	800a6c4 <tx_event_poll+0x30>
            link->tx_record.rx_BS_tx++;
 800a6f4:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
            link->tx_record.current_tx_SN++;
 800a6fe:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800a702:	3301      	adds	r3, #1
 800a704:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
            link->tx_record.status = tx_cf_wait_confirm;
 800a708:	2308      	movs	r3, #8
 800a70a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a70e:	e7d9      	b.n	800a6c4 <tx_event_poll+0x30>
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800a710:	6903      	ldr	r3, [r0, #16]
 800a712:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800a716:	4798      	blx	r3
 800a718:	2800      	cmp	r0, #0
 800a71a:	d1d3      	bne.n	800a6c4 <tx_event_poll+0x30>
            link->tx_record.status = tx_sf_wait_confirm;
 800a71c:	2302      	movs	r3, #2
 800a71e:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a722:	e7cf      	b.n	800a6c4 <tx_event_poll+0x30>
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800a724:	6903      	ldr	r3, [r0, #16]
 800a726:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800a72a:	4798      	blx	r3
 800a72c:	2800      	cmp	r0, #0
 800a72e:	d1c9      	bne.n	800a6c4 <tx_event_poll+0x30>
            link->tx_record.status = tx_ff_wait_confirm;
 800a730:	2304      	movs	r3, #4
 800a732:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a736:	e7c5      	b.n	800a6c4 <tx_event_poll+0x30>

0800a738 <tx_event_poll_handle>:
{
 800a738:	b510      	push	{r4, lr}
 800a73a:	4604      	mov	r4, r0
   tx_event_poll(par->link, par->user_ms);
 800a73c:	6881      	ldr	r1, [r0, #8]
 800a73e:	6840      	ldr	r0, [r0, #4]
 800a740:	f7ff ffa8 	bl	800a694 <tx_event_poll>
   par->handle = (event_handle_t)0;
 800a744:	2300      	movs	r3, #0
 800a746:	6023      	str	r3, [r4, #0]
}
 800a748:	bd10      	pop	{r4, pc}
	...

0800a74c <tx_event_L_Data_Confirm>:
{
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4604      	mov	r4, r0
   if (link->tx_record.status == tx_sf_wait_confirm)
 800a750:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
 800a754:	2b02      	cmp	r3, #2
 800a756:	d012      	beq.n	800a77e <tx_event_L_Data_Confirm+0x32>
   else if (link->tx_record.status == tx_ff_wait_confirm)
 800a758:	2b04      	cmp	r3, #4
 800a75a:	d025      	beq.n	800a7a8 <tx_event_L_Data_Confirm+0x5c>
   else if (link->tx_record.status == tx_cf_wait_confirm)
 800a75c:	2b08      	cmp	r3, #8
 800a75e:	d11a      	bne.n	800a796 <tx_event_L_Data_Confirm+0x4a>
      if (link->tx_record.rx_BS != 0)
 800a760:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
 800a764:	b11b      	cbz	r3, 800a76e <tx_event_L_Data_Confirm+0x22>
         if ((link->tx_record.rx_BS == link->tx_record.rx_BS_tx) && (link->tx_record.current_size != link->tx_record.current_tx_index))
 800a766:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d03b      	beq.n	800a7e6 <tx_event_L_Data_Confirm+0x9a>
      if (link->tx_record.status == tx_cf_wait_confirm)
 800a76e:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 800a772:	2b08      	cmp	r3, #8
 800a774:	d041      	beq.n	800a7fa <tx_event_L_Data_Confirm+0xae>
      tx_event_cf_frame(link);
 800a776:	4620      	mov	r0, r4
 800a778:	f7ff ff06 	bl	800a588 <tx_event_cf_frame>
 800a77c:	e00b      	b.n	800a796 <tx_event_L_Data_Confirm+0x4a>
      if (link->init_info.N_USData_confirm)
 800a77e:	6985      	ldr	r5, [r0, #24]
 800a780:	b135      	cbz	r5, 800a790 <tx_event_L_Data_Confirm+0x44>
         if (0 == error)
 800a782:	b951      	cbnz	r1, 800a79a <tx_event_L_Data_Confirm+0x4e>
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_OK);
 800a784:	2300      	movs	r3, #0
 800a786:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a78a:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800a78e:	47a8      	blx	r5
      link->tx_record.status = tx_idle;
 800a790:	2300      	movs	r3, #0
 800a792:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
}
 800a796:	2000      	movs	r0, #0
 800a798:	bd38      	pop	{r3, r4, r5, pc}
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_ERROR);
 800a79a:	2309      	movs	r3, #9
 800a79c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a7a0:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800a7a4:	47a8      	blx	r5
 800a7a6:	e7f3      	b.n	800a790 <tx_event_L_Data_Confirm+0x44>
      if (link->tx_record.current_size > 0xfff)
 800a7a8:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800a7ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7b0:	d30f      	bcc.n	800a7d2 <tx_event_L_Data_Confirm+0x86>
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 6;
 800a7b2:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800a7b6:	f003 030f 	and.w	r3, r3, #15
 800a7ba:	4a12      	ldr	r2, [pc, #72]	; (800a804 <tx_event_L_Data_Confirm+0xb8>)
 800a7bc:	5cd3      	ldrb	r3, [r2, r3]
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 6;
 800a7be:	3b06      	subs	r3, #6
 800a7c0:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      link->tx_record.current_tx_SN = 1;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      link->tx_record.status = tx_wait_fc;
 800a7ca:	2305      	movs	r3, #5
 800a7cc:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a7d0:	e7e1      	b.n	800a796 <tx_event_L_Data_Confirm+0x4a>
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 2;
 800a7d2:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800a7d6:	f003 030f 	and.w	r3, r3, #15
 800a7da:	4a0a      	ldr	r2, [pc, #40]	; (800a804 <tx_event_L_Data_Confirm+0xb8>)
 800a7dc:	5cd3      	ldrb	r3, [r2, r3]
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 2;
 800a7de:	3b02      	subs	r3, #2
 800a7e0:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800a7e4:	e7ee      	b.n	800a7c4 <tx_event_L_Data_Confirm+0x78>
         if ((link->tx_record.rx_BS == link->tx_record.rx_BS_tx) && (link->tx_record.current_size != link->tx_record.current_tx_index))
 800a7e6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a7ea:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d0bd      	beq.n	800a76e <tx_event_L_Data_Confirm+0x22>
            link->tx_record.status = tx_wait_fc;
 800a7f2:	2305      	movs	r3, #5
 800a7f4:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
 800a7f8:	e7b9      	b.n	800a76e <tx_event_L_Data_Confirm+0x22>
         link->tx_record.status = tx_cf_wait_tx;
 800a7fa:	2306      	movs	r3, #6
 800a7fc:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a800:	e7b9      	b.n	800a776 <tx_event_L_Data_Confirm+0x2a>
 800a802:	bf00      	nop
 800a804:	080134f8 	.word	0x080134f8

0800a808 <tx_event_L_Data_Confirm_handle>:
{
 800a808:	b508      	push	{r3, lr}
   par->handle = (event_handle_t)0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	6003      	str	r3, [r0, #0]
   tx_event_L_Data_Confirm(par->link, par->error);
 800a80e:	f990 1008 	ldrsb.w	r1, [r0, #8]
 800a812:	6840      	ldr	r0, [r0, #4]
 800a814:	f7ff ff9a 	bl	800a74c <tx_event_L_Data_Confirm>
}
 800a818:	bd08      	pop	{r3, pc}

0800a81a <tx_event_L_Data_indication>:
{
 800a81a:	b538      	push	{r3, r4, r5, lr}
 800a81c:	4604      	mov	r4, r0
   if (link->tx_record.status == tx_wait_fc)
 800a81e:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
 800a822:	2b05      	cmp	r3, #5
 800a824:	d004      	beq.n	800a830 <tx_event_L_Data_indication+0x16>
   tx_event_cf_frame(link);
 800a826:	4620      	mov	r0, r4
 800a828:	f7ff feae 	bl	800a588 <tx_event_cf_frame>
}
 800a82c:	2000      	movs	r0, #0
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
      if (rx_msg->data[0] != 0x31)
 800a830:	794b      	ldrb	r3, [r1, #5]
 800a832:	2b31      	cmp	r3, #49	; 0x31
 800a834:	d002      	beq.n	800a83c <tx_event_L_Data_indication+0x22>
         link->tx_record.N_WFT_cnt = 0;
 800a836:	2300      	movs	r3, #0
 800a838:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
      if (rx_msg->data[0] == 0x30)
 800a83c:	794b      	ldrb	r3, [r1, #5]
 800a83e:	2b30      	cmp	r3, #48	; 0x30
 800a840:	d010      	beq.n	800a864 <tx_event_L_Data_indication+0x4a>
      else if (rx_msg->data[0] == 0x32)
 800a842:	2b32      	cmp	r3, #50	; 0x32
 800a844:	d029      	beq.n	800a89a <tx_event_L_Data_indication+0x80>
      else if (rx_msg->data[0] == 0x31)
 800a846:	2b31      	cmp	r3, #49	; 0x31
 800a848:	d035      	beq.n	800a8b6 <tx_event_L_Data_indication+0x9c>
         if (link->init_info.N_USData_confirm)
 800a84a:	69a5      	ldr	r5, [r4, #24]
 800a84c:	b135      	cbz	r5, 800a85c <tx_event_L_Data_indication+0x42>
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_INVALID_FS);
 800a84e:	2305      	movs	r3, #5
 800a850:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a854:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a858:	4620      	mov	r0, r4
 800a85a:	47a8      	blx	r5
         link->tx_record.status = tx_idle;
 800a85c:	2300      	movs	r3, #0
 800a85e:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a862:	e7e0      	b.n	800a826 <tx_event_L_Data_indication+0xc>
         link->tx_record.status = tx_cf_wait_tx;
 800a864:	2306      	movs	r3, #6
 800a866:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
         link->tx_record.rx_BS = rx_msg->data[1];
 800a86a:	798b      	ldrb	r3, [r1, #6]
 800a86c:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
         link->tx_record.rx_BS_tx = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
         link->tx_record.rx_Stmin = rx_msg->data[2];
 800a876:	79cb      	ldrb	r3, [r1, #7]
 800a878:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
         if (link->tx_record.rx_Stmin > 0x7f)
 800a87c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a880:	d107      	bne.n	800a892 <tx_event_L_Data_indication+0x78>
         link->tx_record.last_msg_time_ms = link->current_time_ms - link->tx_record.rx_Stmin - 1;
 800a882:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a884:	f894 209b 	ldrb.w	r2, [r4, #155]	; 0x9b
 800a888:	1a9b      	subs	r3, r3, r2
 800a88a:	3b01      	subs	r3, #1
 800a88c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800a890:	e7c9      	b.n	800a826 <tx_event_L_Data_indication+0xc>
            link->tx_record.rx_Stmin = 1;
 800a892:	2301      	movs	r3, #1
 800a894:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 800a898:	e7f3      	b.n	800a882 <tx_event_L_Data_indication+0x68>
         link->tx_record.status = tx_idle;
 800a89a:	2300      	movs	r3, #0
 800a89c:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
         if (link->init_info.N_USData_confirm)
 800a8a0:	69a5      	ldr	r5, [r4, #24]
 800a8a2:	2d00      	cmp	r5, #0
 800a8a4:	d0bf      	beq.n	800a826 <tx_event_L_Data_indication+0xc>
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_BUFFER_OVFLW);
 800a8a6:	2308      	movs	r3, #8
 800a8a8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a8ac:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	47a8      	blx	r5
 800a8b4:	e7b7      	b.n	800a826 <tx_event_L_Data_indication+0xc>
         if (0 != link->init_info.N_WFTmax)
 800a8b6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800a8ba:	2a00      	cmp	r2, #0
 800a8bc:	d0b3      	beq.n	800a826 <tx_event_L_Data_indication+0xc>
            link->tx_record.N_WFT_cnt++;
 800a8be:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
            if (link->init_info.N_WFTmax <= link->tx_record.N_WFT_cnt)
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d8ab      	bhi.n	800a826 <tx_event_L_Data_indication+0xc>
               link->tx_record.N_WFT_cnt = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
               link->tx_record.status = tx_idle;
 800a8d4:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a8d8:	e7a5      	b.n	800a826 <tx_event_L_Data_indication+0xc>

0800a8da <tx_event_L_Data_indication_handle>:
{
 800a8da:	b510      	push	{r4, lr}
 800a8dc:	4604      	mov	r4, r0
   tx_event_L_Data_indication(par->link, &par->rx_msg);
 800a8de:	f100 0108 	add.w	r1, r0, #8
 800a8e2:	6840      	ldr	r0, [r0, #4]
 800a8e4:	f7ff ff99 	bl	800a81a <tx_event_L_Data_indication>
   par->handle = (event_handle_t)0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	6023      	str	r3, [r4, #0]
}
 800a8ec:	bd10      	pop	{r4, pc}
	...

0800a8f0 <rx_event_L_Data_indication>:
{
 800a8f0:	b570      	push	{r4, r5, r6, lr}
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	460d      	mov	r5, r1
   if ((rx_msg->data[0] & 0xf0) == 0)
 800a8f6:	794b      	ldrb	r3, [r1, #5]
 800a8f8:	f013 02f0 	ands.w	r2, r3, #240	; 0xf0
 800a8fc:	d13e      	bne.n	800a97c <rx_event_L_Data_indication+0x8c>
      if (rx_msg->data[0] != 0)
 800a8fe:	b1f3      	cbz	r3, 800a93e <rx_event_L_Data_indication+0x4e>
         if ((rx_msg->dlc <= 8) && (rx_msg->data[0] <= 7))
 800a900:	790a      	ldrb	r2, [r1, #4]
 800a902:	2a08      	cmp	r2, #8
 800a904:	d83e      	bhi.n	800a984 <rx_event_L_Data_indication+0x94>
 800a906:	2b07      	cmp	r3, #7
 800a908:	d83c      	bhi.n	800a984 <rx_event_L_Data_indication+0x94>
   return dlc_len_table[dlc & 0xf];
 800a90a:	f002 020f 	and.w	r2, r2, #15
 800a90e:	499d      	ldr	r1, [pc, #628]	; (800ab84 <rx_event_L_Data_indication+0x294>)
 800a910:	5c8a      	ldrb	r2, [r1, r2]
            if (rx_len >= (1 + len))
 800a912:	4293      	cmp	r3, r2
 800a914:	d236      	bcs.n	800a984 <rx_event_L_Data_indication+0x94>
               if (link->init_info.N_USData_indication)
 800a916:	6946      	ldr	r6, [r0, #20]
 800a918:	2e00      	cmp	r6, #0
 800a91a:	d033      	beq.n	800a984 <rx_event_L_Data_indication+0x94>
                  if (link->rx_record.status != rx_idle)
 800a91c:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800a920:	b123      	cbz	r3, 800a92c <rx_event_L_Data_indication+0x3c>
                     link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_UNEXP_PDU);
 800a922:	2306      	movs	r3, #6
 800a924:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 800a928:	69c1      	ldr	r1, [r0, #28]
 800a92a:	47b0      	blx	r6
                  link->rx_record.status = rx_idle;
 800a92c:	2300      	movs	r3, #0
 800a92e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
                  link->init_info.N_USData_indication(link, &rx_msg->data[1], rx_msg->data[0], N_OK);
 800a932:	6966      	ldr	r6, [r4, #20]
 800a934:	796a      	ldrb	r2, [r5, #5]
 800a936:	1da9      	adds	r1, r5, #6
 800a938:	4620      	mov	r0, r4
 800a93a:	47b0      	blx	r6
 800a93c:	e022      	b.n	800a984 <rx_event_L_Data_indication+0x94>
         if (rx_msg->dlc > 8)
 800a93e:	7909      	ldrb	r1, [r1, #4]
 800a940:	2908      	cmp	r1, #8
 800a942:	d91f      	bls.n	800a984 <rx_event_L_Data_indication+0x94>
            uint8_t len = rx_msg->data[1];
 800a944:	79aa      	ldrb	r2, [r5, #6]
            if (len > 0)
 800a946:	b1ea      	cbz	r2, 800a984 <rx_event_L_Data_indication+0x94>
   return dlc_len_table[dlc & 0xf];
 800a948:	f001 030f 	and.w	r3, r1, #15
 800a94c:	488d      	ldr	r0, [pc, #564]	; (800ab84 <rx_event_L_Data_indication+0x294>)
 800a94e:	5cc3      	ldrb	r3, [r0, r3]
               if (rx_len >= (2 + len))
 800a950:	1c50      	adds	r0, r2, #1
 800a952:	4298      	cmp	r0, r3
 800a954:	da16      	bge.n	800a984 <rx_event_L_Data_indication+0x94>
                  if (lenToMinDlc(len + 2) == rx_msg->dlc)
 800a956:	f102 0c02 	add.w	ip, r2, #2
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800a95a:	2300      	movs	r3, #0
 800a95c:	2b10      	cmp	r3, #16
 800a95e:	d805      	bhi.n	800a96c <rx_event_L_Data_indication+0x7c>
      if (len <= dlc_len_table[dlc])
 800a960:	4888      	ldr	r0, [pc, #544]	; (800ab84 <rx_event_L_Data_indication+0x294>)
 800a962:	5cc0      	ldrb	r0, [r0, r3]
 800a964:	4584      	cmp	ip, r0
 800a966:	d901      	bls.n	800a96c <rx_event_L_Data_indication+0x7c>
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800a968:	3301      	adds	r3, #1
 800a96a:	e7f7      	b.n	800a95c <rx_event_L_Data_indication+0x6c>
                  if (lenToMinDlc(len + 2) == rx_msg->dlc)
 800a96c:	4299      	cmp	r1, r3
 800a96e:	d109      	bne.n	800a984 <rx_event_L_Data_indication+0x94>
                     link->init_info.N_USData_indication(link, &rx_msg->data[2], len, N_OK);
 800a970:	6966      	ldr	r6, [r4, #20]
 800a972:	2300      	movs	r3, #0
 800a974:	1de9      	adds	r1, r5, #7
 800a976:	4620      	mov	r0, r4
 800a978:	47b0      	blx	r6
 800a97a:	e003      	b.n	800a984 <rx_event_L_Data_indication+0x94>
   else if ((rx_msg->data[0] & 0xf0) == 0x10)
 800a97c:	2a10      	cmp	r2, #16
 800a97e:	d00b      	beq.n	800a998 <rx_event_L_Data_indication+0xa8>
   else if ((rx_msg->data[0] & 0xf0) == 0x20)
 800a980:	2a20      	cmp	r2, #32
 800a982:	d049      	beq.n	800aa18 <rx_event_L_Data_indication+0x128>
   if (link->rx_record.status == rx_tx_fc)
 800a984:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800a988:	2b01      	cmp	r3, #1
 800a98a:	f000 80a6 	beq.w	800aada <rx_event_L_Data_indication+0x1ea>
   else if (link->rx_record.status == rx_tx_fc_overrun)
 800a98e:	2b04      	cmp	r3, #4
 800a990:	f000 80cf 	beq.w	800ab32 <rx_event_L_Data_indication+0x242>
}
 800a994:	2000      	movs	r0, #0
 800a996:	bd70      	pop	{r4, r5, r6, pc}
      if (link->rx_record.status != rx_idle)
 800a998:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800a99c:	b12b      	cbz	r3, 800a9aa <rx_event_L_Data_indication+0xba>
         link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_UNEXP_PDU);
 800a99e:	6946      	ldr	r6, [r0, #20]
 800a9a0:	2306      	movs	r3, #6
 800a9a2:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 800a9a6:	69c1      	ldr	r1, [r0, #28]
 800a9a8:	47b0      	blx	r6
      link->rx_record.rx_len = (rx_msg->data[0] & 0xf) * 256 + rx_msg->data[1];
 800a9aa:	796a      	ldrb	r2, [r5, #5]
 800a9ac:	f002 020f 	and.w	r2, r2, #15
 800a9b0:	79ab      	ldrb	r3, [r5, #6]
 800a9b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a9b6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
      if (0 == link->rx_record.rx_len)
 800a9ba:	b9ab      	cbnz	r3, 800a9e8 <rx_event_L_Data_indication+0xf8>
         link->rx_record.rx_len = (((uint32_t)rx_msg->data[2]) << 24) + (((uint32_t)rx_msg->data[3]) << 16) + (((uint32_t)rx_msg->data[4]) << 8) + (((uint32_t)rx_msg->data[5]));
 800a9bc:	79ea      	ldrb	r2, [r5, #7]
 800a9be:	7a2b      	ldrb	r3, [r5, #8]
 800a9c0:	041b      	lsls	r3, r3, #16
 800a9c2:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 800a9c6:	7a6a      	ldrb	r2, [r5, #9]
 800a9c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a9cc:	7aaa      	ldrb	r2, [r5, #10]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
         rx_index_offset = 6;
 800a9d4:	2106      	movs	r1, #6
      if (link->rx_record.rx_len <= link->init_info.rx_buff_len)
 800a9d6:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
 800a9da:	6a23      	ldr	r3, [r4, #32]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d905      	bls.n	800a9ec <rx_event_L_Data_indication+0xfc>
         link->rx_record.status = rx_tx_fc_overrun;
 800a9e0:	2304      	movs	r3, #4
 800a9e2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800a9e6:	e7cd      	b.n	800a984 <rx_event_L_Data_indication+0x94>
         rx_index_offset = 2;
 800a9e8:	2102      	movs	r1, #2
 800a9ea:	e7f4      	b.n	800a9d6 <rx_event_L_Data_indication+0xe6>
         link->rx_record.rx_index = dlc2len(rx_msg->dlc) - rx_index_offset;
 800a9ec:	792b      	ldrb	r3, [r5, #4]
   return dlc_len_table[dlc & 0xf];
 800a9ee:	f003 030f 	and.w	r3, r3, #15
 800a9f2:	4a64      	ldr	r2, [pc, #400]	; (800ab84 <rx_event_L_Data_indication+0x294>)
 800a9f4:	5cd2      	ldrb	r2, [r2, r3]
         link->rx_record.rx_index = dlc2len(rx_msg->dlc) - rx_index_offset;
 800a9f6:	1a52      	subs	r2, r2, r1
 800a9f8:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
         memcpy(link->init_info.rx_buff, &rx_msg->data[rx_index_offset], link->rx_record.rx_index);
 800a9fc:	4429      	add	r1, r5
 800a9fe:	3105      	adds	r1, #5
 800aa00:	69e0      	ldr	r0, [r4, #28]
 800aa02:	f007 f981 	bl	8011d08 <memcpy>
         link->rx_record.rx_SN = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
         link->rx_record.tx_BS_cnt = 0;
 800aa0c:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
         link->rx_record.status = rx_tx_fc;
 800aa10:	2301      	movs	r3, #1
 800aa12:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800aa16:	e7b5      	b.n	800a984 <rx_event_L_Data_indication+0x94>
      if (link->rx_record.status == rx_wait_cf)
 800aa18:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	d1b1      	bne.n	800a984 <rx_event_L_Data_indication+0x94>
         uint32_t rx_len = link->rx_record.rx_len - link->rx_record.rx_index;
 800aa20:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 800aa24:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 800aa28:	1a11      	subs	r1, r2, r0
         if (rx_len > (uint32_t)(dlc2len(rx_msg->dlc) - 1))
 800aa2a:	792b      	ldrb	r3, [r5, #4]
   return dlc_len_table[dlc & 0xf];
 800aa2c:	f003 030f 	and.w	r3, r3, #15
 800aa30:	4e54      	ldr	r6, [pc, #336]	; (800ab84 <rx_event_L_Data_indication+0x294>)
 800aa32:	5cf6      	ldrb	r6, [r6, r3]
         if (rx_len > (uint32_t)(dlc2len(rx_msg->dlc) - 1))
 800aa34:	3e01      	subs	r6, #1
 800aa36:	428e      	cmp	r6, r1
 800aa38:	d300      	bcc.n	800aa3c <rx_event_L_Data_indication+0x14c>
         uint32_t rx_len = link->rx_record.rx_len - link->rx_record.rx_index;
 800aa3a:	460e      	mov	r6, r1
         link->rx_record.rx_SN++;
 800aa3c:	f894 3144 	ldrb.w	r3, [r4, #324]	; 0x144
 800aa40:	3301      	adds	r3, #1
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
         link->rx_record.last_msg_time_ms = link->current_time_ms;
 800aa48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800aa4a:	f8c4 1190 	str.w	r1, [r4, #400]	; 0x190
         if ((link->rx_record.rx_SN & 0xf) == (rx_msg->data[0] & 0xf))
 800aa4e:	7969      	ldrb	r1, [r5, #5]
 800aa50:	404b      	eors	r3, r1
 800aa52:	f013 0f0f 	tst.w	r3, #15
 800aa56:	d008      	beq.n	800aa6a <rx_event_L_Data_indication+0x17a>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_WRONG_SN);
 800aa58:	6965      	ldr	r5, [r4, #20]
 800aa5a:	2304      	movs	r3, #4
 800aa5c:	69e1      	ldr	r1, [r4, #28]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	47a8      	blx	r5
            link->rx_record.status = rx_idle;
 800aa62:	2300      	movs	r3, #0
 800aa64:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800aa68:	e78c      	b.n	800a984 <rx_event_L_Data_indication+0x94>
            memcpy(&link->init_info.rx_buff[link->rx_record.rx_index], &rx_msg->data[1], rx_len);
 800aa6a:	69e3      	ldr	r3, [r4, #28]
 800aa6c:	4632      	mov	r2, r6
 800aa6e:	1da9      	adds	r1, r5, #6
 800aa70:	4418      	add	r0, r3
 800aa72:	f007 f949 	bl	8011d08 <memcpy>
            link->rx_record.rx_index += rx_len;
 800aa76:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800aa7a:	441e      	add	r6, r3
 800aa7c:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
            if (link->rx_record.status != rx_idle)
 800aa80:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f43f af7d 	beq.w	800a984 <rx_event_L_Data_indication+0x94>
               if (link->rx_record.rx_index >= link->rx_record.rx_len)
 800aa8a:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
 800aa8e:	4296      	cmp	r6, r2
 800aa90:	d309      	bcc.n	800aaa6 <rx_event_L_Data_indication+0x1b6>
                  if (link->init_info.N_USData_indication)
 800aa92:	6965      	ldr	r5, [r4, #20]
 800aa94:	b11d      	cbz	r5, 800aa9e <rx_event_L_Data_indication+0x1ae>
                     link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_OK);
 800aa96:	2300      	movs	r3, #0
 800aa98:	69e1      	ldr	r1, [r4, #28]
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	47a8      	blx	r5
                  link->rx_record.status = rx_idle;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800aaa4:	e76e      	b.n	800a984 <rx_event_L_Data_indication+0x94>
                  link->rx_record.tx_BS_cnt++;
 800aaa6:	f894 3145 	ldrb.w	r3, [r4, #325]	; 0x145
 800aaaa:	3301      	adds	r3, #1
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
                  if (link->init_info.FC_BS != 0)
 800aab2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800aab6:	2a00      	cmp	r2, #0
 800aab8:	f43f af64 	beq.w	800a984 <rx_event_L_Data_indication+0x94>
                     if ((link->rx_record.tx_BS_cnt % link->init_info.FC_BS) == 0)
 800aabc:	fbb3 f1f2 	udiv	r1, r3, r2
 800aac0:	fb02 3311 	mls	r3, r2, r1, r3
 800aac4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aac8:	f47f af5c 	bne.w	800a984 <rx_event_L_Data_indication+0x94>
                        link->rx_record.status = rx_tx_fc;
 800aacc:	2301      	movs	r3, #1
 800aace:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
                        link->rx_record.tx_BS_cnt = 0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 800aad8:	e754      	b.n	800a984 <rx_event_L_Data_indication+0x94>
      link->rx_record.last_msg.id = link->init_info.tx_id;
 800aada:	6863      	ldr	r3, [r4, #4]
 800aadc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
      link->rx_record.last_msg.data[0] = 0x30;
 800aae0:	2330      	movs	r3, #48	; 0x30
 800aae2:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
      link->rx_record.last_msg.data[1] = link->init_info.FC_BS;
 800aae6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800aaea:	f884 314e 	strb.w	r3, [r4, #334]	; 0x14e
      link->rx_record.last_msg.data[2] = link->init_info.STmin;
 800aaee:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800aaf2:	f884 314f 	strb.w	r3, [r4, #335]	; 0x14f
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 800aaf6:	f894 502f 	ldrb.w	r5, [r4, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800aafa:	f005 030f 	and.w	r3, r5, #15
 800aafe:	4a21      	ldr	r2, [pc, #132]	; (800ab84 <rx_event_L_Data_indication+0x294>)
 800ab00:	5cd2      	ldrb	r2, [r2, r3]
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 800ab02:	3a03      	subs	r2, #3
 800ab04:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800ab08:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800ab0c:	f007 f83e 	bl	8011b8c <memset>
      link->rx_record.last_msg.dlc = link->init_info.TX_DLC;
 800ab10:	f884 514c 	strb.w	r5, [r4, #332]	; 0x14c
      link->rx_record.last_msg_time_ms = link->current_time_ms;
 800ab14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ab16:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 800ab1a:	6923      	ldr	r3, [r4, #16]
 800ab1c:	f504 71a4 	add.w	r1, r4, #328	; 0x148
 800ab20:	4620      	mov	r0, r4
 800ab22:	4798      	blx	r3
 800ab24:	2800      	cmp	r0, #0
 800ab26:	f47f af35 	bne.w	800a994 <rx_event_L_Data_indication+0xa4>
         link->rx_record.status = rx_tx_fc_wait_confirm;
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800ab30:	e730      	b.n	800a994 <rx_event_L_Data_indication+0xa4>
      link->rx_record.last_msg.id = link->init_info.tx_id;
 800ab32:	6863      	ldr	r3, [r4, #4]
 800ab34:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
      link->rx_record.last_msg.data[0] = 0x32;
 800ab38:	2332      	movs	r3, #50	; 0x32
 800ab3a:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
      link->rx_record.last_msg.data[1] = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	f884 314e 	strb.w	r3, [r4, #334]	; 0x14e
      link->rx_record.last_msg.data[2] = 0;
 800ab44:	f884 314f 	strb.w	r3, [r4, #335]	; 0x14f
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 800ab48:	f894 502f 	ldrb.w	r5, [r4, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800ab4c:	f005 030f 	and.w	r3, r5, #15
 800ab50:	4a0c      	ldr	r2, [pc, #48]	; (800ab84 <rx_event_L_Data_indication+0x294>)
 800ab52:	5cd2      	ldrb	r2, [r2, r3]
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 800ab54:	3a03      	subs	r2, #3
 800ab56:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800ab5a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800ab5e:	f007 f815 	bl	8011b8c <memset>
      link->rx_record.last_msg.dlc = link->init_info.TX_DLC;
 800ab62:	f884 514c 	strb.w	r5, [r4, #332]	; 0x14c
      link->rx_record.last_msg_time_ms = link->current_time_ms;
 800ab66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ab68:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 800ab6c:	6923      	ldr	r3, [r4, #16]
 800ab6e:	f504 71a4 	add.w	r1, r4, #328	; 0x148
 800ab72:	4620      	mov	r0, r4
 800ab74:	4798      	blx	r3
 800ab76:	2800      	cmp	r0, #0
 800ab78:	f47f af0c 	bne.w	800a994 <rx_event_L_Data_indication+0xa4>
         link->rx_record.status = rx_tx_fc_overrun_wait_confirm;
 800ab7c:	2305      	movs	r3, #5
 800ab7e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800ab82:	e707      	b.n	800a994 <rx_event_L_Data_indication+0xa4>
 800ab84:	080134f8 	.word	0x080134f8

0800ab88 <rx_event_L_Data_indication_handle>:

static void rx_event_L_Data_indication_handle(void *par_src)
{
 800ab88:	b510      	push	{r4, lr}
 800ab8a:	4604      	mov	r4, r0
   struct L_Data_indication_par_t *par = (struct L_Data_indication_par_t *)par_src;
   rx_event_L_Data_indication(par->link, &par->rx_msg);
 800ab8c:	f100 0108 	add.w	r1, r0, #8
 800ab90:	6840      	ldr	r0, [r0, #4]
 800ab92:	f7ff fead 	bl	800a8f0 <rx_event_L_Data_indication>
   par->handle = (event_handle_t)0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	6023      	str	r3, [r4, #0]
}
 800ab9a:	bd10      	pop	{r4, pc}

0800ab9c <tx_event_N_USData_Request>:
{
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	4604      	mov	r4, r0
 800aba0:	4616      	mov	r6, r2
 800aba2:	461d      	mov	r5, r3
   if (link->init_info.TX_DLC > 8)
 800aba4:	f890 702f 	ldrb.w	r7, [r0, #47]	; 0x2f
 800aba8:	2f08      	cmp	r7, #8
 800abaa:	d914      	bls.n	800abd6 <tx_event_N_USData_Request+0x3a>
   return dlc_len_table[dlc & 0xf];
 800abac:	f007 030f 	and.w	r3, r7, #15
 800abb0:	4a5d      	ldr	r2, [pc, #372]	; (800ad28 <tx_event_N_USData_Request+0x18c>)
 800abb2:	5cd3      	ldrb	r3, [r2, r3]
      single_frame_max_len = dlc2len(link->init_info.TX_DLC) - 2;
 800abb4:	3b02      	subs	r3, #2
 800abb6:	b2db      	uxtb	r3, r3
   if (link->tx_record.status == tx_idle)
 800abb8:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 800abbc:	2a00      	cmp	r2, #0
 800abbe:	f040 80a5 	bne.w	800ad0c <tx_event_N_USData_Request+0x170>
      if (size <= single_frame_max_len)
 800abc2:	461a      	mov	r2, r3
 800abc4:	42ab      	cmp	r3, r5
 800abc6:	d353      	bcc.n	800ac70 <tx_event_N_USData_Request+0xd4>
         if (isFunction == 0)
 800abc8:	b939      	cbnz	r1, 800abda <tx_event_N_USData_Request+0x3e>
            link->tx_record.last_msg.id = link->init_info.tx_id;
 800abca:	6863      	ldr	r3, [r4, #4]
 800abcc:	6423      	str	r3, [r4, #64]	; 0x40
         if (size <= 7)
 800abce:	2d07      	cmp	r5, #7
 800abd0:	d90e      	bls.n	800abf0 <tx_event_N_USData_Request+0x54>
            for (i = 0; i < size; i++)
 800abd2:	2000      	movs	r0, #0
 800abd4:	e01f      	b.n	800ac16 <tx_event_N_USData_Request+0x7a>
   uint8_t single_frame_max_len = 7;
 800abd6:	2307      	movs	r3, #7
 800abd8:	e7ee      	b.n	800abb8 <tx_event_N_USData_Request+0x1c>
            link->tx_record.last_msg.id = link->init_info.funtion_id;
 800abda:	68e3      	ldr	r3, [r4, #12]
 800abdc:	6423      	str	r3, [r4, #64]	; 0x40
 800abde:	e7f6      	b.n	800abce <tx_event_N_USData_Request+0x32>
               link->tx_record.last_msg.data[i] = payload[i];
 800abe0:	5c31      	ldrb	r1, [r6, r0]
 800abe2:	1823      	adds	r3, r4, r0
 800abe4:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
            for (i = 0; i < size; i++)
 800abe8:	3001      	adds	r0, #1
 800abea:	42a8      	cmp	r0, r5
 800abec:	d3f8      	bcc.n	800abe0 <tx_event_N_USData_Request+0x44>
 800abee:	e007      	b.n	800ac00 <tx_event_N_USData_Request+0x64>
 800abf0:	2000      	movs	r0, #0
 800abf2:	e7fa      	b.n	800abea <tx_event_N_USData_Request+0x4e>
               link->tx_record.last_msg.data[i] = link->init_info.frame_pad;
 800abf4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800abf8:	1823      	adds	r3, r4, r0
 800abfa:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
            for (; i < single_frame_max_len; i++)
 800abfe:	3001      	adds	r0, #1
 800ac00:	4282      	cmp	r2, r0
 800ac02:	d8f7      	bhi.n	800abf4 <tx_event_N_USData_Request+0x58>
            link->tx_record.last_msg.dlc = 8;
 800ac04:	2308      	movs	r3, #8
 800ac06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ac0a:	e01c      	b.n	800ac46 <tx_event_N_USData_Request+0xaa>
               link->tx_record.last_msg.data[i] = payload[i];
 800ac0c:	5c31      	ldrb	r1, [r6, r0]
 800ac0e:	1823      	adds	r3, r4, r0
 800ac10:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
            for (i = 0; i < size; i++)
 800ac14:	3001      	adds	r0, #1
 800ac16:	42a8      	cmp	r0, r5
 800ac18:	d3f8      	bcc.n	800ac0c <tx_event_N_USData_Request+0x70>
 800ac1a:	e005      	b.n	800ac28 <tx_event_N_USData_Request+0x8c>
               link->tx_record.last_msg.data[i] = link->init_info.frame_pad;
 800ac1c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800ac20:	1823      	adds	r3, r4, r0
 800ac22:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
            for (; i < single_frame_max_len; i++)
 800ac26:	3001      	adds	r0, #1
 800ac28:	4282      	cmp	r2, r0
 800ac2a:	d8f7      	bhi.n	800ac1c <tx_event_N_USData_Request+0x80>
            link->tx_record.last_msg.dlc = lenToMinDlc(size + 2);
 800ac2c:	1ca9      	adds	r1, r5, #2
 800ac2e:	b289      	uxth	r1, r1
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800ac30:	2300      	movs	r3, #0
 800ac32:	2b10      	cmp	r3, #16
 800ac34:	d805      	bhi.n	800ac42 <tx_event_N_USData_Request+0xa6>
      if (len <= dlc_len_table[dlc])
 800ac36:	4a3c      	ldr	r2, [pc, #240]	; (800ad28 <tx_event_N_USData_Request+0x18c>)
 800ac38:	5cd2      	ldrb	r2, [r2, r3]
 800ac3a:	4291      	cmp	r1, r2
 800ac3c:	d901      	bls.n	800ac42 <tx_event_N_USData_Request+0xa6>
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800ac3e:	3301      	adds	r3, #1
 800ac40:	e7f7      	b.n	800ac32 <tx_event_N_USData_Request+0x96>
            link->tx_record.last_msg.dlc = lenToMinDlc(size + 2);
 800ac42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
         link->tx_record.status = tx_sf_wait_tx;
 800ac46:	2301      	movs	r3, #1
 800ac48:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
         link->tx_record.last_msg_time_ms = link->current_time_ms;
 800ac4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ac4e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
         link->tx_record.current_playload = payload;
 800ac52:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
         link->tx_record.current_size = size;
 800ac56:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800ac5a:	6923      	ldr	r3, [r4, #16]
 800ac5c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800ac60:	4620      	mov	r0, r4
 800ac62:	4798      	blx	r3
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d15c      	bne.n	800ad22 <tx_event_N_USData_Request+0x186>
            link->tx_record.status = tx_sf_wait_confirm;
 800ac68:	2302      	movs	r3, #2
 800ac6a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800ac6e:	e058      	b.n	800ad22 <tx_event_N_USData_Request+0x186>
         link->tx_record.N_WFT_cnt = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
         link->tx_record.last_msg.id = link->init_info.tx_id;
 800ac76:	6863      	ldr	r3, [r4, #4]
 800ac78:	6423      	str	r3, [r4, #64]	; 0x40
         if (size <= 0xfff)
 800ac7a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800ac7e:	d227      	bcs.n	800acd0 <tx_event_N_USData_Request+0x134>
            link->tx_record.last_msg.data[0] = 0x10 | ((uint8_t)(size >> 8));
 800ac80:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800ac84:	f043 0310 	orr.w	r3, r3, #16
 800ac88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            link->tx_record.last_msg.data[1] = (uint8_t)(size & 0xff);
 800ac8c:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
   return dlc_len_table[dlc & 0xf];
 800ac90:	f007 030f 	and.w	r3, r7, #15
 800ac94:	4a24      	ldr	r2, [pc, #144]	; (800ad28 <tx_event_N_USData_Request+0x18c>)
 800ac96:	5cd2      	ldrb	r2, [r2, r3]
            memcpy(&link->tx_record.last_msg.data[2], payload, dlc2len(link->init_info.TX_DLC) - 2);
 800ac98:	3a02      	subs	r2, #2
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	f104 0047 	add.w	r0, r4, #71	; 0x47
 800aca0:	f007 f832 	bl	8011d08 <memcpy>
         link->tx_record.last_msg.dlc = link->init_info.TX_DLC;
 800aca4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
         link->tx_record.status = tx_ff_wait_tx;
 800aca8:	2303      	movs	r3, #3
 800acaa:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
         link->tx_record.last_msg_time_ms = link->current_time_ms;
 800acae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800acb0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
         link->tx_record.current_playload = payload;
 800acb4:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
         link->tx_record.current_size = size;
 800acb8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800acbc:	6923      	ldr	r3, [r4, #16]
 800acbe:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800acc2:	4620      	mov	r0, r4
 800acc4:	4798      	blx	r3
 800acc6:	bb60      	cbnz	r0, 800ad22 <tx_event_N_USData_Request+0x186>
            link->tx_record.status = tx_ff_wait_confirm;
 800acc8:	2304      	movs	r3, #4
 800acca:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800acce:	e028      	b.n	800ad22 <tx_event_N_USData_Request+0x186>
            link->tx_record.last_msg.data[0] = 0x10;
 800acd0:	2310      	movs	r3, #16
 800acd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            link->tx_record.last_msg.data[1] = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
            link->tx_record.last_msg.data[2] = (uint8_t)(size >> 24);
 800acdc:	0e2b      	lsrs	r3, r5, #24
 800acde:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
            link->tx_record.last_msg.data[3] = (uint8_t)(size >> 16);
 800ace2:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800ace6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
            link->tx_record.last_msg.data[4] = (uint8_t)(size >> 8);
 800acea:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800acee:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
            link->tx_record.last_msg.data[5] = (uint8_t)(size);
 800acf2:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
   return dlc_len_table[dlc & 0xf];
 800acf6:	f007 030f 	and.w	r3, r7, #15
 800acfa:	4a0b      	ldr	r2, [pc, #44]	; (800ad28 <tx_event_N_USData_Request+0x18c>)
 800acfc:	5cd2      	ldrb	r2, [r2, r3]
            memcpy(&link->tx_record.last_msg.data[6], payload, dlc2len(link->init_info.TX_DLC) - 6);
 800acfe:	3a06      	subs	r2, #6
 800ad00:	4631      	mov	r1, r6
 800ad02:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 800ad06:	f006 ffff 	bl	8011d08 <memcpy>
 800ad0a:	e7cb      	b.n	800aca4 <tx_event_N_USData_Request+0x108>
      printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when last request is not done\n");
 800ad0c:	4907      	ldr	r1, [pc, #28]	; (800ad2c <tx_event_N_USData_Request+0x190>)
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f7ff fbb4 	bl	800a47c <printf_debug_msg>
      if (link->init_info.N_USData_confirm)
 800ad14:	69a7      	ldr	r7, [r4, #24]
 800ad16:	b127      	cbz	r7, 800ad22 <tx_event_N_USData_Request+0x186>
         link->init_info.N_USData_confirm(link, payload, size, N_ERROR);
 800ad18:	2309      	movs	r3, #9
 800ad1a:	462a      	mov	r2, r5
 800ad1c:	4631      	mov	r1, r6
 800ad1e:	4620      	mov	r0, r4
 800ad20:	47b8      	blx	r7
}
 800ad22:	2000      	movs	r0, #0
 800ad24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad26:	bf00      	nop
 800ad28:	080134f8 	.word	0x080134f8
 800ad2c:	08013054 	.word	0x08013054

0800ad30 <tx_event_N_USData_Request_handle>:
{
 800ad30:	b510      	push	{r4, lr}
 800ad32:	4604      	mov	r4, r0
   tx_event_N_USData_Request(par->link, par->isFunction, par->payload, par->size);
 800ad34:	68c3      	ldr	r3, [r0, #12]
 800ad36:	6902      	ldr	r2, [r0, #16]
 800ad38:	7a01      	ldrb	r1, [r0, #8]
 800ad3a:	6840      	ldr	r0, [r0, #4]
 800ad3c:	f7ff ff2e 	bl	800ab9c <tx_event_N_USData_Request>
   par->handle = (event_handle_t)0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	6023      	str	r3, [r4, #0]
}
 800ad44:	bd10      	pop	{r4, pc}

0800ad46 <report_event_to_manage_block>:
{
 800ad46:	b530      	push	{r4, r5, lr}
 800ad48:	b083      	sub	sp, #12
 800ad4a:	4604      	mov	r4, r0
   if (QueueOperateOk != QueueIn(&task->fifo, (ElemType)par_with_handle))
 800ad4c:	f100 0510 	add.w	r5, r0, #16
 800ad50:	4628      	mov	r0, r5
 800ad52:	f000 fa89 	bl	800b268 <QueueIn>
 800ad56:	2802      	cmp	r0, #2
 800ad58:	d002      	beq.n	800ad60 <report_event_to_manage_block+0x1a>
   int res = OP_NOK;
 800ad5a:	2001      	movs	r0, #1
}
 800ad5c:	b003      	add	sp, #12
 800ad5e:	bd30      	pop	{r4, r5, pc}
      if (mcu_lock_try_lock(&task->lock))
 800ad60:	4620      	mov	r0, r4
 800ad62:	f000 fac9 	bl	800b2f8 <mcu_lock_try_lock>
 800ad66:	b180      	cbz	r0, 800ad8a <report_event_to_manage_block+0x44>
            if (QueueOperateOk != QueueOut(&task->fifo, (ElemType *)&par))
 800ad68:	a901      	add	r1, sp, #4
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	f000 fa9f 	bl	800b2ae <QueueOut>
 800ad70:	2802      	cmp	r0, #2
 800ad72:	d105      	bne.n	800ad80 <report_event_to_manage_block+0x3a>
               if (par->handle)
 800ad74:	9801      	ldr	r0, [sp, #4]
 800ad76:	6803      	ldr	r3, [r0, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d0f5      	beq.n	800ad68 <report_event_to_manage_block+0x22>
                  par->handle((void *)par);
 800ad7c:	4798      	blx	r3
         {
 800ad7e:	e7f3      	b.n	800ad68 <report_event_to_manage_block+0x22>
         mcu_lock_unlock(&task->lock);
 800ad80:	4620      	mov	r0, r4
 800ad82:	f000 fac9 	bl	800b318 <mcu_lock_unlock>
      res = OP_OK;
 800ad86:	2000      	movs	r0, #0
 800ad88:	e7e8      	b.n	800ad5c <report_event_to_manage_block+0x16>
 800ad8a:	2000      	movs	r0, #0
   return res;
 800ad8c:	e7e6      	b.n	800ad5c <report_event_to_manage_block+0x16>
	...

0800ad90 <dlc2len>:
   return dlc_len_table[dlc & 0xf];
 800ad90:	f000 000f 	and.w	r0, r0, #15
}
 800ad94:	4b01      	ldr	r3, [pc, #4]	; (800ad9c <dlc2len+0xc>)
 800ad96:	5c18      	ldrb	r0, [r3, r0]
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	080134f8 	.word	0x080134f8

0800ada0 <lenToMinDlc>:
{
 800ada0:	4602      	mov	r2, r0
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800ada2:	2000      	movs	r0, #0
 800ada4:	e000      	b.n	800ada8 <lenToMinDlc+0x8>
 800ada6:	3001      	adds	r0, #1
 800ada8:	2810      	cmp	r0, #16
 800adaa:	d803      	bhi.n	800adb4 <lenToMinDlc+0x14>
      if (len <= dlc_len_table[dlc])
 800adac:	4b02      	ldr	r3, [pc, #8]	; (800adb8 <lenToMinDlc+0x18>)
 800adae:	5c1b      	ldrb	r3, [r3, r0]
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d3f8      	bcc.n	800ada6 <lenToMinDlc+0x6>
}
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	080134f8 	.word	0x080134f8

0800adbc <iso_can_tp_create>:

//---------------------call interface------------------------
int iso_can_tp_create(can_iso_tp_link_t_p link, struct can_iso_tp_init_t *init)
{
   if ((struct can_iso_tp_init_t *)0 == init)
 800adbc:	2900      	cmp	r1, #0
 800adbe:	f000 80a7 	beq.w	800af10 <iso_can_tp_create+0x154>
{
 800adc2:	b570      	push	{r4, r5, r6, lr}
 800adc4:	4605      	mov	r5, r0
 800adc6:	460c      	mov	r4, r1
   {
      return OP_NOK;
   }
   if ((can_iso_tp_link_t_p)0 == link)
 800adc8:	2800      	cmp	r0, #0
 800adca:	f000 80a3 	beq.w	800af14 <iso_can_tp_create+0x158>
   {
      return OP_NOK;
   }
   if ((uint8_t *)0 == init->rx_buff)
 800adce:	69cb      	ldr	r3, [r1, #28]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d04e      	beq.n	800ae72 <iso_can_tp_create+0xb6>
   {
      printf_debug_msg(init, MODULE_PRINT "null rx_buff\n");
      return OP_NOK;
   }
   if (init->rx_buff_len < 8)
 800add4:	6a0b      	ldr	r3, [r1, #32]
 800add6:	2b07      	cmp	r3, #7
 800add8:	d951      	bls.n	800ae7e <iso_can_tp_create+0xc2>
//   if (memcmp(&init->rx_id, &init->tx_id, sizeof(init->tx_id)) == 0)
//   {
//      printf_debug_msg(init, MODULE_PRINT "rx_id should not = tx_id\n");
//      return OP_NOK;
//   }
   if (memcmp(&init->funtion_id, &init->tx_id, sizeof(init->tx_id)) == 0)
 800adda:	f101 060c 	add.w	r6, r1, #12
 800adde:	2204      	movs	r2, #4
 800ade0:	4411      	add	r1, r2
 800ade2:	4630      	mov	r0, r6
 800ade4:	f006 fec2 	bl	8011b6c <memcmp>
 800ade8:	2800      	cmp	r0, #0
 800adea:	d04e      	beq.n	800ae8a <iso_can_tp_create+0xce>
   {
      printf_debug_msg(init, MODULE_PRINT "function_id should not = tx_id\n");
      return OP_NOK;
   }
   if (memcmp(&init->funtion_id, &init->rx_id, sizeof(init->tx_id)) == 0)
 800adec:	2204      	movs	r2, #4
 800adee:	f104 0108 	add.w	r1, r4, #8
 800adf2:	4630      	mov	r0, r6
 800adf4:	f006 feba 	bl	8011b6c <memcmp>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d04c      	beq.n	800ae96 <iso_can_tp_create+0xda>
   {
      printf_debug_msg(init, MODULE_PRINT "function_id should not = rx_id\n");
      return OP_NOK;
   }
   if (init->tx_id.isRemote != 0)
 800adfc:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	db4e      	blt.n	800aea2 <iso_can_tp_create+0xe6>
   {
      printf_debug_msg(init, MODULE_PRINT "tx frame should not be remote frame\n");
      init->tx_id.isRemote = 0;
   }
   if (init->funtion_id.isRemote != 0)
 800ae04:	f994 300f 	ldrsb.w	r3, [r4, #15]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	db53      	blt.n	800aeb4 <iso_can_tp_create+0xf8>
   {
      printf_debug_msg(init, MODULE_PRINT "function frame should not be remote frame\n");
      init->funtion_id.isRemote = 0;
   }
   if (init->rx_id.isRemote != 0)
 800ae0c:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	db58      	blt.n	800aec6 <iso_can_tp_create+0x10a>
   {
      printf_debug_msg(init, MODULE_PRINT "rx frame should not be remote frame\n");
      init->rx_id.isRemote = 0;
   }
#ifdef SUPPORT_CAN_FD
   if (init->TX_DLC < 8)
 800ae14:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ae18:	2b07      	cmp	r3, #7
 800ae1a:	d95d      	bls.n	800aed8 <iso_can_tp_create+0x11c>
   {
      printf_debug_msg(init, MODULE_PRINT "TX_DLC can not less than 8\n");
      init->TX_DLC = 8;
   }
   if (init->TX_DLC > 0xf)
 800ae1c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ae20:	2b0f      	cmp	r3, #15
 800ae22:	d861      	bhi.n	800aee8 <iso_can_tp_create+0x12c>
   {
      printf_debug_msg(init, MODULE_PRINT "rx frame can not have can-fd frame, compile with maro SUPPORT_CAN_FD if you need can-fd support\n");
      return OP_NOK;
   }
#endif
   memset(link, 0, sizeof(struct can_iso_tp_link_t));
 800ae24:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f006 feae 	bl	8011b8c <memset>
   link->init_info = *init;
 800ae30:	46ac      	mov	ip, r5
 800ae32:	46a6      	mov	lr, r4
 800ae34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ae38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ae3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ae40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ae44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ae48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ae4c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ae50:	e88c 0003 	stmia.w	ip, {r0, r1}
   if (0 != event_manage_block_init(&link->rx_events.event_manage))
 800ae54:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc
 800ae58:	f7ff fb86 	bl	800a568 <event_manage_block_init>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d14b      	bne.n	800aef8 <iso_can_tp_create+0x13c>
   {
      printf_debug_msg(init, MODULE_PRINT "can not create rx_events manage block\n");
      return OP_NOK;
   }
   if (0 != event_manage_block_init(&link->tx_events.event_manage))
 800ae60:	f505 708e 	add.w	r0, r5, #284	; 0x11c
 800ae64:	f7ff fb80 	bl	800a568 <event_manage_block_init>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d14b      	bne.n	800af04 <iso_can_tp_create+0x148>
   {
      printf_debug_msg(init, MODULE_PRINT "can not create tx_events manage block\n");
      return OP_NOK;
   }
   SET_INIT_DONE_FLAG(link);
 800ae6c:	4b2a      	ldr	r3, [pc, #168]	; (800af18 <iso_can_tp_create+0x15c>)
 800ae6e:	63ab      	str	r3, [r5, #56]	; 0x38
   return OP_OK;
}
 800ae70:	bd70      	pop	{r4, r5, r6, pc}
      printf_debug_msg(init, MODULE_PRINT "null rx_buff\n");
 800ae72:	492a      	ldr	r1, [pc, #168]	; (800af1c <iso_can_tp_create+0x160>)
 800ae74:	4620      	mov	r0, r4
 800ae76:	f7ff fb01 	bl	800a47c <printf_debug_msg>
      return OP_NOK;
 800ae7a:	2001      	movs	r0, #1
 800ae7c:	e7f8      	b.n	800ae70 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "rx_buff_len should not less than 8\n");
 800ae7e:	4928      	ldr	r1, [pc, #160]	; (800af20 <iso_can_tp_create+0x164>)
 800ae80:	4620      	mov	r0, r4
 800ae82:	f7ff fafb 	bl	800a47c <printf_debug_msg>
      return OP_NOK;
 800ae86:	2001      	movs	r0, #1
 800ae88:	e7f2      	b.n	800ae70 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "function_id should not = tx_id\n");
 800ae8a:	4926      	ldr	r1, [pc, #152]	; (800af24 <iso_can_tp_create+0x168>)
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f7ff faf5 	bl	800a47c <printf_debug_msg>
      return OP_NOK;
 800ae92:	2001      	movs	r0, #1
 800ae94:	e7ec      	b.n	800ae70 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "function_id should not = rx_id\n");
 800ae96:	4924      	ldr	r1, [pc, #144]	; (800af28 <iso_can_tp_create+0x16c>)
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f7ff faef 	bl	800a47c <printf_debug_msg>
      return OP_NOK;
 800ae9e:	2001      	movs	r0, #1
 800aea0:	e7e6      	b.n	800ae70 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "tx frame should not be remote frame\n");
 800aea2:	4922      	ldr	r1, [pc, #136]	; (800af2c <iso_can_tp_create+0x170>)
 800aea4:	4620      	mov	r0, r4
 800aea6:	f7ff fae9 	bl	800a47c <printf_debug_msg>
      init->tx_id.isRemote = 0;
 800aeaa:	79e3      	ldrb	r3, [r4, #7]
 800aeac:	f36f 13c7 	bfc	r3, #7, #1
 800aeb0:	71e3      	strb	r3, [r4, #7]
 800aeb2:	e7a7      	b.n	800ae04 <iso_can_tp_create+0x48>
      printf_debug_msg(init, MODULE_PRINT "function frame should not be remote frame\n");
 800aeb4:	491e      	ldr	r1, [pc, #120]	; (800af30 <iso_can_tp_create+0x174>)
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f7ff fae0 	bl	800a47c <printf_debug_msg>
      init->funtion_id.isRemote = 0;
 800aebc:	7be3      	ldrb	r3, [r4, #15]
 800aebe:	f36f 13c7 	bfc	r3, #7, #1
 800aec2:	73e3      	strb	r3, [r4, #15]
 800aec4:	e7a2      	b.n	800ae0c <iso_can_tp_create+0x50>
      printf_debug_msg(init, MODULE_PRINT "rx frame should not be remote frame\n");
 800aec6:	491b      	ldr	r1, [pc, #108]	; (800af34 <iso_can_tp_create+0x178>)
 800aec8:	4620      	mov	r0, r4
 800aeca:	f7ff fad7 	bl	800a47c <printf_debug_msg>
      init->rx_id.isRemote = 0;
 800aece:	7ae3      	ldrb	r3, [r4, #11]
 800aed0:	f36f 13c7 	bfc	r3, #7, #1
 800aed4:	72e3      	strb	r3, [r4, #11]
 800aed6:	e79d      	b.n	800ae14 <iso_can_tp_create+0x58>
      printf_debug_msg(init, MODULE_PRINT "TX_DLC can not less than 8\n");
 800aed8:	4917      	ldr	r1, [pc, #92]	; (800af38 <iso_can_tp_create+0x17c>)
 800aeda:	4620      	mov	r0, r4
 800aedc:	f7ff face 	bl	800a47c <printf_debug_msg>
      init->TX_DLC = 8;
 800aee0:	2308      	movs	r3, #8
 800aee2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800aee6:	e799      	b.n	800ae1c <iso_can_tp_create+0x60>
      printf_debug_msg(init, MODULE_PRINT "TX_DLC can not more than 0xf\n");
 800aee8:	4914      	ldr	r1, [pc, #80]	; (800af3c <iso_can_tp_create+0x180>)
 800aeea:	4620      	mov	r0, r4
 800aeec:	f7ff fac6 	bl	800a47c <printf_debug_msg>
      init->TX_DLC = 0xf;
 800aef0:	230f      	movs	r3, #15
 800aef2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800aef6:	e795      	b.n	800ae24 <iso_can_tp_create+0x68>
      printf_debug_msg(init, MODULE_PRINT "can not create rx_events manage block\n");
 800aef8:	4911      	ldr	r1, [pc, #68]	; (800af40 <iso_can_tp_create+0x184>)
 800aefa:	4620      	mov	r0, r4
 800aefc:	f7ff fabe 	bl	800a47c <printf_debug_msg>
      return OP_NOK;
 800af00:	2001      	movs	r0, #1
 800af02:	e7b5      	b.n	800ae70 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "can not create tx_events manage block\n");
 800af04:	490f      	ldr	r1, [pc, #60]	; (800af44 <iso_can_tp_create+0x188>)
 800af06:	4620      	mov	r0, r4
 800af08:	f7ff fab8 	bl	800a47c <printf_debug_msg>
      return OP_NOK;
 800af0c:	2001      	movs	r0, #1
 800af0e:	e7af      	b.n	800ae70 <iso_can_tp_create+0xb4>
      return OP_NOK;
 800af10:	2001      	movs	r0, #1
}
 800af12:	4770      	bx	lr
      return OP_NOK;
 800af14:	2001      	movs	r0, #1
 800af16:	e7ab      	b.n	800ae70 <iso_can_tp_create+0xb4>
 800af18:	74185295 	.word	0x74185295
 800af1c:	08013098 	.word	0x08013098
 800af20:	080130b4 	.word	0x080130b4
 800af24:	080130e4 	.word	0x080130e4
 800af28:	08013110 	.word	0x08013110
 800af2c:	0801313c 	.word	0x0801313c
 800af30:	08013170 	.word	0x08013170
 800af34:	080131a8 	.word	0x080131a8
 800af38:	080131dc 	.word	0x080131dc
 800af3c:	08013204 	.word	0x08013204
 800af40:	08013230 	.word	0x08013230
 800af44:	08013264 	.word	0x08013264

0800af48 <iso_can_tp_poll>:

void iso_can_tp_poll(can_iso_tp_link_t_p link, unsigned int user_ms)
{
 800af48:	b538      	push	{r3, r4, r5, lr}
   if (!CHECK_INIT_DONE_FLAG(link))
 800af4a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800af4c:	4b1e      	ldr	r3, [pc, #120]	; (800afc8 <iso_can_tp_poll+0x80>)
 800af4e:	429a      	cmp	r2, r3
 800af50:	d000      	beq.n	800af54 <iso_can_tp_poll+0xc>
   else
   {
      MCU_LOCK_EXIT_CRITICAL;
      printf_debug_msg(&link->init_info, "iso_can_tp_poll cannot insert new tx evnent when last is not done.\n");
   }
}
 800af52:	bd38      	pop	{r3, r4, r5, pc}
 800af54:	4604      	mov	r4, r0
 800af56:	460d      	mov	r5, r1
   link->current_time_ms = user_ms;
 800af58:	63c1      	str	r1, [r0, #60]	; 0x3c
   MCU_LOCK_ENTER_CRITICAL;
 800af5a:	f7ff f81b 	bl	8009f94 <vPortEnterCritical>
   if (link->rx_events.time_poll_par.handle == (event_handle_t)0)
 800af5e:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 800af62:	b18b      	cbz	r3, 800af88 <iso_can_tp_poll+0x40>
      MCU_LOCK_EXIT_CRITICAL;
 800af64:	f7ff f838 	bl	8009fd8 <vPortExitCritical>
      printf_debug_msg(&link->init_info, "iso_can_tp_poll cannot insert new rx evnent when last is not done.\n");
 800af68:	4918      	ldr	r1, [pc, #96]	; (800afcc <iso_can_tp_poll+0x84>)
 800af6a:	4620      	mov	r0, r4
 800af6c:	f7ff fa86 	bl	800a47c <printf_debug_msg>
   MCU_LOCK_ENTER_CRITICAL;
 800af70:	f7ff f810 	bl	8009f94 <vPortEnterCritical>
   if (link->tx_events.time_poll_par.handle == (event_handle_t)0)
 800af74:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800af78:	b1b3      	cbz	r3, 800afa8 <iso_can_tp_poll+0x60>
      MCU_LOCK_EXIT_CRITICAL;
 800af7a:	f7ff f82d 	bl	8009fd8 <vPortExitCritical>
      printf_debug_msg(&link->init_info, "iso_can_tp_poll cannot insert new tx evnent when last is not done.\n");
 800af7e:	4914      	ldr	r1, [pc, #80]	; (800afd0 <iso_can_tp_poll+0x88>)
 800af80:	4620      	mov	r0, r4
 800af82:	f7ff fa7b 	bl	800a47c <printf_debug_msg>
 800af86:	e7e4      	b.n	800af52 <iso_can_tp_poll+0xa>
      link->rx_events.time_poll_par.handle = rx_event_poll_handle;
 800af88:	4b12      	ldr	r3, [pc, #72]	; (800afd4 <iso_can_tp_poll+0x8c>)
 800af8a:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
      MCU_LOCK_EXIT_CRITICAL;
 800af8e:	f7ff f823 	bl	8009fd8 <vPortExitCritical>
      link->rx_events.time_poll_par.link = link;
 800af92:	f8c4 41f4 	str.w	r4, [r4, #500]	; 0x1f4
      link->rx_events.time_poll_par.user_ms = user_ms;
 800af96:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
      report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.time_poll_par);
 800af9a:	f504 71f8 	add.w	r1, r4, #496	; 0x1f0
 800af9e:	f504 70fe 	add.w	r0, r4, #508	; 0x1fc
 800afa2:	f7ff fed0 	bl	800ad46 <report_event_to_manage_block>
 800afa6:	e7e3      	b.n	800af70 <iso_can_tp_poll+0x28>
      link->tx_events.time_poll_par.handle = tx_event_poll_handle;
 800afa8:	4b0b      	ldr	r3, [pc, #44]	; (800afd8 <iso_can_tp_poll+0x90>)
 800afaa:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
      MCU_LOCK_EXIT_CRITICAL;
 800afae:	f7ff f813 	bl	8009fd8 <vPortExitCritical>
      link->tx_events.time_poll_par.link = link;
 800afb2:	f8c4 4100 	str.w	r4, [r4, #256]	; 0x100
      link->tx_events.time_poll_par.user_ms = user_ms;
 800afb6:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
      report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.time_poll_par);
 800afba:	f104 01fc 	add.w	r1, r4, #252	; 0xfc
 800afbe:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 800afc2:	f7ff fec0 	bl	800ad46 <report_event_to_manage_block>
 800afc6:	e7c4      	b.n	800af52 <iso_can_tp_poll+0xa>
 800afc8:	74185295 	.word	0x74185295
 800afcc:	08013298 	.word	0x08013298
 800afd0:	080132dc 	.word	0x080132dc
 800afd4:	0800a545 	.word	0x0800a545
 800afd8:	0800a739 	.word	0x0800a739

0800afdc <iso_can_tp_L_Data_confirm>:

int iso_can_tp_L_Data_confirm(can_iso_tp_link_t_p link, const struct CAN_msg *msg, int8_t error)
{
   int res = OP_NOK;
   if ((can_iso_tp_link_t_p)0 == link)
 800afdc:	2800      	cmp	r0, #0
 800afde:	d065      	beq.n	800b0ac <iso_can_tp_L_Data_confirm+0xd0>
{
 800afe0:	b538      	push	{r3, r4, r5, lr}
 800afe2:	460b      	mov	r3, r1
 800afe4:	4614      	mov	r4, r2
 800afe6:	4605      	mov	r5, r0
   {
      return OP_NOK;
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 800afe8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800afea:	4a34      	ldr	r2, [pc, #208]	; (800b0bc <iso_can_tp_L_Data_confirm+0xe0>)
 800afec:	4291      	cmp	r1, r2
 800afee:	d15f      	bne.n	800b0b0 <iso_can_tp_L_Data_confirm+0xd4>
   {
      return OP_NOK;
   }
   if (msg != (const struct CAN_msg *)0)
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d05f      	beq.n	800b0b4 <iso_can_tp_L_Data_confirm+0xd8>
   {
      // RX task only focuses on sending completed flow control messages, other messages regardless, TX task does not care about sending completed flow control messages
      if ((msg->data[0] & 0xf0) == 0x30)
 800aff4:	795a      	ldrb	r2, [r3, #5]
 800aff6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800affa:	2a30      	cmp	r2, #48	; 0x30
 800affc:	d007      	beq.n	800b00e <iso_can_tp_L_Data_confirm+0x32>
         }
      }
      else
      {
         if ((msg->id.isExt == link->tx_record.last_msg.id.isExt) 
             && (msg->id.id == link->tx_record.last_msg.id.id))
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6c02      	ldr	r2, [r0, #64]	; 0x40
         if ((msg->id.isExt == link->tx_record.last_msg.id.isExt) 
 800b002:	4053      	eors	r3, r2
 800b004:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 800b008:	d033      	beq.n	800b072 <iso_can_tp_L_Data_confirm+0x96>
   int res = OP_NOK;
 800b00a:	2001      	movs	r0, #1
 800b00c:	e051      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
             && (msg->id.id == link->rx_record.last_msg.id.id) 
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
         if ((msg->id.isExt == link->rx_record.last_msg.id.isExt) 
 800b014:	404a      	eors	r2, r1
 800b016:	f032 4240 	bics.w	r2, r2, #3221225472	; 0xc0000000
 800b01a:	d14d      	bne.n	800b0b8 <iso_can_tp_L_Data_confirm+0xdc>
             && (0 == memcmp(msg->data, link->rx_record.last_msg.data, dlc2len(link->rx_record.last_msg.dlc))))
 800b01c:	f890 214c 	ldrb.w	r2, [r0, #332]	; 0x14c
   return dlc_len_table[dlc & 0xf];
 800b020:	f002 020f 	and.w	r2, r2, #15
             && (0 == memcmp(msg->data, link->rx_record.last_msg.data, dlc2len(link->rx_record.last_msg.dlc))))
 800b024:	4926      	ldr	r1, [pc, #152]	; (800b0c0 <iso_can_tp_L_Data_confirm+0xe4>)
 800b026:	5c8a      	ldrb	r2, [r1, r2]
 800b028:	f200 114d 	addw	r1, r0, #333	; 0x14d
 800b02c:	1d58      	adds	r0, r3, #5
 800b02e:	f006 fd9d 	bl	8011b6c <memcmp>
 800b032:	b108      	cbz	r0, 800b038 <iso_can_tp_L_Data_confirm+0x5c>
   int res = OP_NOK;
 800b034:	2001      	movs	r0, #1
 800b036:	e03c      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
            MCU_LOCK_ENTER_CRITICAL;
 800b038:	f7fe ffac 	bl	8009f94 <vPortEnterCritical>
            if (link->rx_events.L_Data_confirm_par.handle == (event_handle_t)0)
 800b03c:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
 800b040:	b13b      	cbz	r3, 800b052 <iso_can_tp_L_Data_confirm+0x76>
               MCU_LOCK_EXIT_CRITICAL;
 800b042:	f7fe ffc9 	bl	8009fd8 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_confirm cannot insert new rx evnent when last is not done.\n");
 800b046:	491f      	ldr	r1, [pc, #124]	; (800b0c4 <iso_can_tp_L_Data_confirm+0xe8>)
 800b048:	4628      	mov	r0, r5
 800b04a:	f7ff fa17 	bl	800a47c <printf_debug_msg>
   int res = OP_NOK;
 800b04e:	2001      	movs	r0, #1
 800b050:	e02f      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
               link->rx_events.L_Data_confirm_par.handle = rx_event_L_Data_Confirm_handle;
 800b052:	4b1d      	ldr	r3, [pc, #116]	; (800b0c8 <iso_can_tp_L_Data_confirm+0xec>)
 800b054:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
               MCU_LOCK_EXIT_CRITICAL;
 800b058:	f7fe ffbe 	bl	8009fd8 <vPortExitCritical>
               link->rx_events.L_Data_confirm_par.link = link;
 800b05c:	f8c5 51e8 	str.w	r5, [r5, #488]	; 0x1e8
               link->rx_events.L_Data_confirm_par.error = error;
 800b060:	f885 41ec 	strb.w	r4, [r5, #492]	; 0x1ec
               res = report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.L_Data_confirm_par);
 800b064:	f505 71f2 	add.w	r1, r5, #484	; 0x1e4
 800b068:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc
 800b06c:	f7ff fe6b 	bl	800ad46 <report_event_to_manage_block>
 800b070:	e01f      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
         {
            MCU_LOCK_ENTER_CRITICAL;
 800b072:	f7fe ff8f 	bl	8009f94 <vPortEnterCritical>
            if (link->tx_events.L_Data_confirm_par.handle == (event_handle_t)0)
 800b076:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 800b07a:	b13b      	cbz	r3, 800b08c <iso_can_tp_L_Data_confirm+0xb0>
               link->tx_events.L_Data_confirm_par.error = error;
               res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.L_Data_confirm_par);
            }
            else
            {
               MCU_LOCK_EXIT_CRITICAL;
 800b07c:	f7fe ffac 	bl	8009fd8 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_confirm cannot insert new tx event when last is not done.\n");
 800b080:	4912      	ldr	r1, [pc, #72]	; (800b0cc <iso_can_tp_L_Data_confirm+0xf0>)
 800b082:	4628      	mov	r0, r5
 800b084:	f7ff f9fa 	bl	800a47c <printf_debug_msg>
   int res = OP_NOK;
 800b088:	2001      	movs	r0, #1
 800b08a:	e012      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
               link->tx_events.L_Data_confirm_par.handle = tx_event_L_Data_Confirm_handle;
 800b08c:	4b10      	ldr	r3, [pc, #64]	; (800b0d0 <iso_can_tp_L_Data_confirm+0xf4>)
 800b08e:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
               MCU_LOCK_EXIT_CRITICAL;
 800b092:	f7fe ffa1 	bl	8009fd8 <vPortExitCritical>
               link->tx_events.L_Data_confirm_par.link = link;
 800b096:	f8c5 50f4 	str.w	r5, [r5, #244]	; 0xf4
               link->tx_events.L_Data_confirm_par.error = error;
 800b09a:	f885 40f8 	strb.w	r4, [r5, #248]	; 0xf8
               res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.L_Data_confirm_par);
 800b09e:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
 800b0a2:	f505 708e 	add.w	r0, r5, #284	; 0x11c
 800b0a6:	f7ff fe4e 	bl	800ad46 <report_event_to_manage_block>
 800b0aa:	e002      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
      return OP_NOK;
 800b0ac:	2001      	movs	r0, #1
   else
   {
      // no need to print info
   }
   return res;
}
 800b0ae:	4770      	bx	lr
      return OP_NOK;
 800b0b0:	2001      	movs	r0, #1
}
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
   int res = OP_NOK;
 800b0b4:	2001      	movs	r0, #1
 800b0b6:	e7fc      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
 800b0b8:	2001      	movs	r0, #1
 800b0ba:	e7fa      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
 800b0bc:	74185295 	.word	0x74185295
 800b0c0:	080134f8 	.word	0x080134f8
 800b0c4:	08013320 	.word	0x08013320
 800b0c8:	0800a557 	.word	0x0800a557
 800b0cc:	08013364 	.word	0x08013364
 800b0d0:	0800a809 	.word	0x0800a809

0800b0d4 <iso_can_tp_L_Data_indication>:

int iso_can_tp_L_Data_indication(can_iso_tp_link_t_p link, const struct CAN_msg *msg)
{
   int res = OP_NOK;
   if ((can_iso_tp_link_t_p)0 == link)
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d05e      	beq.n	800b196 <iso_can_tp_L_Data_indication+0xc2>
{
 800b0d8:	b538      	push	{r3, r4, r5, lr}
 800b0da:	460c      	mov	r4, r1
 800b0dc:	4605      	mov	r5, r0
   {
      return OP_NOK;
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 800b0de:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b0e0:	4b32      	ldr	r3, [pc, #200]	; (800b1ac <iso_can_tp_L_Data_indication+0xd8>)
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d159      	bne.n	800b19a <iso_can_tp_L_Data_indication+0xc6>
   {
      return OP_NOK;
   }
   if (msg)
 800b0e6:	2900      	cmp	r1, #0
 800b0e8:	d059      	beq.n	800b19e <iso_can_tp_L_Data_indication+0xca>
   {
      // ignore remote frames
      if (msg->id.isRemote != 0)
 800b0ea:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	db57      	blt.n	800b1a2 <iso_can_tp_L_Data_indication+0xce>
      {
         printf_debug_msg(&link->init_info, "L_Data_indication cannot handle CANFD frame when SUPPORT_CAN_FD is not defined.\n");
         return OP_NOK;
      }
#endif
      if (((msg->id.isExt == link->init_info.rx_id.isExt) && (msg->id.id == link->init_info.rx_id.id)) 
 800b0f2:	680a      	ldr	r2, [r1, #0]
 800b0f4:	6883      	ldr	r3, [r0, #8]
 800b0f6:	4053      	eors	r3, r2
 800b0f8:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 800b0fc:	d004      	beq.n	800b108 <iso_can_tp_L_Data_indication+0x34>
          || ((msg->id.isExt == link->init_info.funtion_id.isExt) && (msg->id.id == link->init_info.funtion_id.id)))
 800b0fe:	68c3      	ldr	r3, [r0, #12]
 800b100:	405a      	eors	r2, r3
 800b102:	f032 4340 	bics.w	r3, r2, #3221225472	; 0xc0000000
 800b106:	d14e      	bne.n	800b1a6 <iso_can_tp_L_Data_indication+0xd2>
      {
         // TX task only pays attention to receiving flow control message, other receive message can be ignored, RX task no matter receiving flow control message
         if ((msg->data[0] & 0xf0) == 0x30)
 800b108:	7963      	ldrb	r3, [r4, #5]
 800b10a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b10e:	2b30      	cmp	r3, #48	; 0x30
 800b110:	d00c      	beq.n	800b12c <iso_can_tp_L_Data_indication+0x58>
               printf_debug_msg(&link->init_info, "L_Data_indication cannot insert new tx event when last is not done.\n");
            }
         }
         else
         {
            MCU_LOCK_ENTER_CRITICAL;
 800b112:	f7fe ff3f 	bl	8009f94 <vPortEnterCritical>
            if (link->rx_events.L_Data_indication_par.handle == (event_handle_t)0)
 800b116:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
 800b11a:	b343      	cbz	r3, 800b16e <iso_can_tp_L_Data_indication+0x9a>
               link->rx_events.L_Data_indication_par.rx_msg = *msg;
               res = report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.L_Data_indication_par);
            }
            else
            {
               MCU_LOCK_EXIT_CRITICAL;
 800b11c:	f7fe ff5c 	bl	8009fd8 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_indication cannot insert new rx event when last is not done.\n");
 800b120:	4923      	ldr	r1, [pc, #140]	; (800b1b0 <iso_can_tp_L_Data_indication+0xdc>)
 800b122:	4628      	mov	r0, r5
 800b124:	f7ff f9aa 	bl	800a47c <printf_debug_msg>
   int res = OP_NOK;
 800b128:	2001      	movs	r0, #1
 800b12a:	e037      	b.n	800b19c <iso_can_tp_L_Data_indication+0xc8>
            MCU_LOCK_ENTER_CRITICAL;
 800b12c:	f7fe ff32 	bl	8009f94 <vPortEnterCritical>
            if (link->tx_events.L_Data_indication_par.handle == (event_handle_t)0)
 800b130:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 800b134:	b13b      	cbz	r3, 800b146 <iso_can_tp_L_Data_indication+0x72>
               MCU_LOCK_EXIT_CRITICAL;
 800b136:	f7fe ff4f 	bl	8009fd8 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_indication cannot insert new tx event when last is not done.\n");
 800b13a:	491e      	ldr	r1, [pc, #120]	; (800b1b4 <iso_can_tp_L_Data_indication+0xe0>)
 800b13c:	4628      	mov	r0, r5
 800b13e:	f7ff f99d 	bl	800a47c <printf_debug_msg>
   int res = OP_NOK;
 800b142:	2001      	movs	r0, #1
 800b144:	e02a      	b.n	800b19c <iso_can_tp_L_Data_indication+0xc8>
               link->tx_events.L_Data_indication_par.handle = tx_event_L_Data_indication_handle;
 800b146:	4b1c      	ldr	r3, [pc, #112]	; (800b1b8 <iso_can_tp_L_Data_indication+0xe4>)
 800b148:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
               MCU_LOCK_EXIT_CRITICAL;
 800b14c:	f7fe ff44 	bl	8009fd8 <vPortExitCritical>
               link->tx_events.L_Data_indication_par.link = link;
 800b150:	f8c5 50a4 	str.w	r5, [r5, #164]	; 0xa4
               link->tx_events.L_Data_indication_par.rx_msg = *msg;
 800b154:	2248      	movs	r2, #72	; 0x48
 800b156:	4621      	mov	r1, r4
 800b158:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
 800b15c:	f006 fdd4 	bl	8011d08 <memcpy>
               res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.L_Data_indication_par);
 800b160:	f105 01a0 	add.w	r1, r5, #160	; 0xa0
 800b164:	f505 708e 	add.w	r0, r5, #284	; 0x11c
 800b168:	f7ff fded 	bl	800ad46 <report_event_to_manage_block>
 800b16c:	e016      	b.n	800b19c <iso_can_tp_L_Data_indication+0xc8>
               link->rx_events.L_Data_indication_par.handle = rx_event_L_Data_indication_handle;
 800b16e:	4b13      	ldr	r3, [pc, #76]	; (800b1bc <iso_can_tp_L_Data_indication+0xe8>)
 800b170:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
               MCU_LOCK_EXIT_CRITICAL;
 800b174:	f7fe ff30 	bl	8009fd8 <vPortExitCritical>
               link->rx_events.L_Data_indication_par.link = link;
 800b178:	f8c5 5198 	str.w	r5, [r5, #408]	; 0x198
               link->rx_events.L_Data_indication_par.rx_msg = *msg;
 800b17c:	2248      	movs	r2, #72	; 0x48
 800b17e:	4621      	mov	r1, r4
 800b180:	f505 70ce 	add.w	r0, r5, #412	; 0x19c
 800b184:	f006 fdc0 	bl	8011d08 <memcpy>
               res = report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.L_Data_indication_par);
 800b188:	f505 71ca 	add.w	r1, r5, #404	; 0x194
 800b18c:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc
 800b190:	f7ff fdd9 	bl	800ad46 <report_event_to_manage_block>
 800b194:	e002      	b.n	800b19c <iso_can_tp_L_Data_indication+0xc8>
      return OP_NOK;
 800b196:	2001      	movs	r0, #1
            }
         }
      }
   }
   return res;
}
 800b198:	4770      	bx	lr
      return OP_NOK;
 800b19a:	2001      	movs	r0, #1
}
 800b19c:	bd38      	pop	{r3, r4, r5, pc}
   int res = OP_NOK;
 800b19e:	2001      	movs	r0, #1
 800b1a0:	e7fc      	b.n	800b19c <iso_can_tp_L_Data_indication+0xc8>
         return OP_NOK;
 800b1a2:	2001      	movs	r0, #1
 800b1a4:	e7fa      	b.n	800b19c <iso_can_tp_L_Data_indication+0xc8>
   int res = OP_NOK;
 800b1a6:	2001      	movs	r0, #1
 800b1a8:	e7f8      	b.n	800b19c <iso_can_tp_L_Data_indication+0xc8>
 800b1aa:	bf00      	nop
 800b1ac:	74185295 	.word	0x74185295
 800b1b0:	080133f0 	.word	0x080133f0
 800b1b4:	080133a8 	.word	0x080133a8
 800b1b8:	0800a8db 	.word	0x0800a8db
 800b1bc:	0800ab89 	.word	0x0800ab89

0800b1c0 <iso_can_tp_N_USData_request>:

int iso_can_tp_N_USData_request(can_iso_tp_link_t_p link, uint8_t isFunction, const uint8_t payload[], uint32_t size)
{
   int res = OP_NOK;
   
   if ((can_iso_tp_link_t_p)0 == link)
 800b1c0:	b3a8      	cbz	r0, 800b22e <iso_can_tp_N_USData_request+0x6e>
{
 800b1c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c4:	460f      	mov	r7, r1
 800b1c6:	4616      	mov	r6, r2
 800b1c8:	461d      	mov	r5, r3
 800b1ca:	4604      	mov	r4, r0
   {
      return OP_NOK;
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 800b1cc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b1ce:	4b1a      	ldr	r3, [pc, #104]	; (800b238 <iso_can_tp_N_USData_request+0x78>)
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d12e      	bne.n	800b232 <iso_can_tp_N_USData_request+0x72>
   {
      return OP_NOK;
   }
   if ((const uint8_t *)0 == payload)
 800b1d4:	b12e      	cbz	r6, 800b1e2 <iso_can_tp_N_USData_request+0x22>
      res = OP_NOK;
      printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when payload == (const uint8_t*)0\n");
   }
   else
   {
      if (0 == size)
 800b1d6:	b94d      	cbnz	r5, 800b1ec <iso_can_tp_N_USData_request+0x2c>
      {
         res = OP_NOK;
         printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when size == 0\n");
 800b1d8:	4918      	ldr	r1, [pc, #96]	; (800b23c <iso_can_tp_N_USData_request+0x7c>)
 800b1da:	f7ff f94f 	bl	800a47c <printf_debug_msg>
         res = OP_NOK;
 800b1de:	2001      	movs	r0, #1
 800b1e0:	e028      	b.n	800b234 <iso_can_tp_N_USData_request+0x74>
      printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when payload == (const uint8_t*)0\n");
 800b1e2:	4917      	ldr	r1, [pc, #92]	; (800b240 <iso_can_tp_N_USData_request+0x80>)
 800b1e4:	f7ff f94a 	bl	800a47c <printf_debug_msg>
      res = OP_NOK;
 800b1e8:	2001      	movs	r0, #1
 800b1ea:	e023      	b.n	800b234 <iso_can_tp_N_USData_request+0x74>
      }
      else
      {
         MCU_LOCK_ENTER_CRITICAL;
 800b1ec:	f7fe fed2 	bl	8009f94 <vPortEnterCritical>
         if (link->tx_events.N_USData_request_par.handle == (event_handle_t)0)
 800b1f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800b1f4:	b13b      	cbz	r3, 800b206 <iso_can_tp_N_USData_request+0x46>
            link->tx_events.N_USData_request_par.size = size;
            res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.N_USData_request_par);
         }
         else
         {
            MCU_LOCK_EXIT_CRITICAL;
 800b1f6:	f7fe feef 	bl	8009fd8 <vPortExitCritical>
            printf_debug_msg(&link->init_info, "N_USData_request cannot insert new tx event when last is not done.\n");
 800b1fa:	4912      	ldr	r1, [pc, #72]	; (800b244 <iso_can_tp_N_USData_request+0x84>)
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f7ff f93d 	bl	800a47c <printf_debug_msg>
   int res = OP_NOK;
 800b202:	2001      	movs	r0, #1
 800b204:	e016      	b.n	800b234 <iso_can_tp_N_USData_request+0x74>
            link->tx_events.N_USData_request_par.handle = tx_event_N_USData_Request_handle;
 800b206:	4b10      	ldr	r3, [pc, #64]	; (800b248 <iso_can_tp_N_USData_request+0x88>)
 800b208:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            MCU_LOCK_EXIT_CRITICAL;
 800b20c:	f7fe fee4 	bl	8009fd8 <vPortExitCritical>
            link->tx_events.N_USData_request_par.link = link;
 800b210:	f8c4 410c 	str.w	r4, [r4, #268]	; 0x10c
            link->tx_events.N_USData_request_par.isFunction = isFunction;
 800b214:	f884 7110 	strb.w	r7, [r4, #272]	; 0x110
            link->tx_events.N_USData_request_par.payload = payload;
 800b218:	f8c4 6118 	str.w	r6, [r4, #280]	; 0x118
            link->tx_events.N_USData_request_par.size = size;
 800b21c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
            res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.N_USData_request_par);
 800b220:	f504 7184 	add.w	r1, r4, #264	; 0x108
 800b224:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 800b228:	f7ff fd8d 	bl	800ad46 <report_event_to_manage_block>
 800b22c:	e002      	b.n	800b234 <iso_can_tp_N_USData_request+0x74>
      return OP_NOK;
 800b22e:	2001      	movs	r0, #1
         }
      }
   }
   return res;
}
 800b230:	4770      	bx	lr
      return OP_NOK;
 800b232:	2001      	movs	r0, #1
}
 800b234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b236:	bf00      	nop
 800b238:	74185295 	.word	0x74185295
 800b23c:	08013480 	.word	0x08013480
 800b240:	08013438 	.word	0x08013438
 800b244:	080134b4 	.word	0x080134b4
 800b248:	0800ad31 	.word	0x0800ad31

0800b24c <QueueInit>:
/*Queue Init*/
uint8_t
QueueInit(struct FifoQueue *Queue, ElemType *dat, uint16_t queue_size)
{
   uint8_t ret = (0 == 1);
   Queue->queue_size = queue_size;
 800b24c:	8082      	strh	r2, [r0, #4]
   Queue->dat = dat;
 800b24e:	6001      	str	r1, [r0, #0]
   if ((Queue->dat != (ElemType *)0) && (Queue->queue_size != 0))
 800b250:	b131      	cbz	r1, 800b260 <QueueInit+0x14>
 800b252:	b13a      	cbz	r2, 800b264 <QueueInit+0x18>
   {
      Queue->front = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	80c3      	strh	r3, [r0, #6]
      Queue->rear = 0;
 800b258:	8103      	strh	r3, [r0, #8]
      ;
      Queue->count = 0;
 800b25a:	8143      	strh	r3, [r0, #10]
      ret = (1 == 1);
 800b25c:	2001      	movs	r0, #1
 800b25e:	4770      	bx	lr
   uint8_t ret = (0 == 1);
 800b260:	2000      	movs	r0, #0
 800b262:	4770      	bx	lr
 800b264:	2000      	movs	r0, #0
   }
   return ret;
}
 800b266:	4770      	bx	lr

0800b268 <QueueIn>:

/* Queue In */
uint8_t
QueueIn(register struct FifoQueue *Queue, ElemType sdat)
{
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	4604      	mov	r4, r0
 800b26c:	460d      	mov	r5, r1
   MCU_LOCK_ENTER_CRITICAL;
 800b26e:	f7fe fe91 	bl	8009f94 <vPortEnterCritical>
   if ((Queue->front == Queue->rear) && (Queue->count == Queue->queue_size))
 800b272:	88e2      	ldrh	r2, [r4, #6]
 800b274:	8923      	ldrh	r3, [r4, #8]
 800b276:	429a      	cmp	r2, r3
 800b278:	d103      	bne.n	800b282 <QueueIn+0x1a>
 800b27a:	8961      	ldrh	r1, [r4, #10]
 800b27c:	88a2      	ldrh	r2, [r4, #4]
 800b27e:	4291      	cmp	r1, r2
 800b280:	d011      	beq.n	800b2a6 <QueueIn+0x3e>
      MCU_LOCK_EXIT_CRITICAL;
      return QueueFull;
   }
   else
   {
      Queue->dat[Queue->rear] = sdat;
 800b282:	6822      	ldr	r2, [r4, #0]
 800b284:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
      Queue->rear = (Queue->rear + 1) % Queue->queue_size;
 800b288:	8923      	ldrh	r3, [r4, #8]
 800b28a:	3301      	adds	r3, #1
 800b28c:	88a2      	ldrh	r2, [r4, #4]
 800b28e:	fb93 f1f2 	sdiv	r1, r3, r2
 800b292:	fb02 3311 	mls	r3, r2, r1, r3
 800b296:	8123      	strh	r3, [r4, #8]
      Queue->count = Queue->count + 1;
 800b298:	8963      	ldrh	r3, [r4, #10]
 800b29a:	3301      	adds	r3, #1
 800b29c:	8163      	strh	r3, [r4, #10]
      MCU_LOCK_EXIT_CRITICAL;
 800b29e:	f7fe fe9b 	bl	8009fd8 <vPortExitCritical>
      return QueueOperateOk;
 800b2a2:	2002      	movs	r0, #2
   }
}
 800b2a4:	bd38      	pop	{r3, r4, r5, pc}
      MCU_LOCK_EXIT_CRITICAL;
 800b2a6:	f7fe fe97 	bl	8009fd8 <vPortExitCritical>
      return QueueFull;
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	e7fa      	b.n	800b2a4 <QueueIn+0x3c>

0800b2ae <QueueOut>:

/* Queue Out*/
uint8_t
QueueOut(register struct FifoQueue *Queue, ElemType *sdat)
{
 800b2ae:	b538      	push	{r3, r4, r5, lr}
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	460d      	mov	r5, r1
   MCU_LOCK_ENTER_CRITICAL;
 800b2b4:	f7fe fe6e 	bl	8009f94 <vPortEnterCritical>
   if ((Queue->front == Queue->rear) && (Queue->count == 0))
 800b2b8:	88e3      	ldrh	r3, [r4, #6]
 800b2ba:	8922      	ldrh	r2, [r4, #8]
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d101      	bne.n	800b2c4 <QueueOut+0x16>
 800b2c0:	8962      	ldrh	r2, [r4, #10]
 800b2c2:	b192      	cbz	r2, 800b2ea <QueueOut+0x3c>
      MCU_LOCK_EXIT_CRITICAL;
      return QueueEmpty;
   }
   else
   {
      *sdat = Queue->dat[Queue->front];
 800b2c4:	6822      	ldr	r2, [r4, #0]
 800b2c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ca:	602b      	str	r3, [r5, #0]
      Queue->front = (Queue->front + 1) % Queue->queue_size;
 800b2cc:	88e3      	ldrh	r3, [r4, #6]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	88a2      	ldrh	r2, [r4, #4]
 800b2d2:	fb93 f1f2 	sdiv	r1, r3, r2
 800b2d6:	fb02 3311 	mls	r3, r2, r1, r3
 800b2da:	80e3      	strh	r3, [r4, #6]
      Queue->count = Queue->count - 1;
 800b2dc:	8963      	ldrh	r3, [r4, #10]
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	8163      	strh	r3, [r4, #10]
      MCU_LOCK_EXIT_CRITICAL;
 800b2e2:	f7fe fe79 	bl	8009fd8 <vPortExitCritical>
      return QueueOperateOk;
 800b2e6:	2002      	movs	r0, #2
   }
 800b2e8:	bd38      	pop	{r3, r4, r5, pc}
      MCU_LOCK_EXIT_CRITICAL;
 800b2ea:	f7fe fe75 	bl	8009fd8 <vPortExitCritical>
      return QueueEmpty;
 800b2ee:	2001      	movs	r0, #1
 800b2f0:	e7fa      	b.n	800b2e8 <QueueOut+0x3a>

0800b2f2 <mcu_lock_init>:
#include <stdint.h>
#include "can_iso_tp_mcu_lock.h"

void mcu_lock_init(mcu_lock_t *lock)
{
   *lock = 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	6003      	str	r3, [r0, #0]
}
 800b2f6:	4770      	bx	lr

0800b2f8 <mcu_lock_try_lock>:

unsigned int mcu_lock_try_lock(register mcu_lock_t *lock)
{
 800b2f8:	b538      	push	{r3, r4, r5, lr}
   register volatile cpu_status_t cpu_sr;
   register unsigned int ret = (0 == 1);
   if (0 == *lock)
 800b2fa:	6805      	ldr	r5, [r0, #0]
 800b2fc:	b115      	cbz	r5, 800b304 <mcu_lock_try_lock+0xc>
   register unsigned int ret = (0 == 1);
 800b2fe:	2500      	movs	r5, #0
         ret = (1 == 1);
      }
      MCU_LOCK_EXIT_CRITICAL;
   }
   return ret;
}
 800b300:	4628      	mov	r0, r5
 800b302:	bd38      	pop	{r3, r4, r5, pc}
 800b304:	4604      	mov	r4, r0
      MCU_LOCK_ENTER_CRITICAL;
 800b306:	f7fe fe45 	bl	8009f94 <vPortEnterCritical>
      if (0 == *lock)
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	b90b      	cbnz	r3, 800b312 <mcu_lock_try_lock+0x1a>
         *lock = 1;
 800b30e:	2501      	movs	r5, #1
 800b310:	6025      	str	r5, [r4, #0]
      MCU_LOCK_EXIT_CRITICAL;
 800b312:	f7fe fe61 	bl	8009fd8 <vPortExitCritical>
 800b316:	e7f3      	b.n	800b300 <mcu_lock_try_lock+0x8>

0800b318 <mcu_lock_unlock>:
      {
         *lock = false;
      }
      MCU_LOCK_EXIT_CRITICAL;
   }*/
   *lock = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	6003      	str	r3, [r0, #0]
 800b31c:	4770      	bx	lr
	...

0800b320 <lan9252_cmd_read>:
#include "lan9252.h"
#include "spiDma.h"

static void lan9252_cmd_read(uint16_t address)
{
 800b320:	b500      	push	{lr}
 800b322:	b083      	sub	sp, #12
   uint8_t command[4] = {0u};
 800b324:	2300      	movs	r3, #0
 800b326:	9301      	str	r3, [sp, #4]

   /* Prepare the data structure contains read command. */
   command[0] = (uint8_t)LAN9252_ESC_CMD_SERIAL_FAST_READ;
 800b328:	230b      	movs	r3, #11
 800b32a:	f88d 3004 	strb.w	r3, [sp, #4]
   command[1] = (uint8_t)((address >> 8u) & 0xFF);
 800b32e:	0a03      	lsrs	r3, r0, #8
 800b330:	f88d 3005 	strb.w	r3, [sp, #5]
   command[2] = (uint8_t)(address & 0xFF);
 800b334:	f88d 0006 	strb.w	r0, [sp, #6]
   command[3] = (uint8_t)(0x01);
 800b338:	2301      	movs	r3, #1
 800b33a:	f88d 3007 	strb.w	r3, [sp, #7]

   /* Send the command to Lan9252. */
   SpiDma_write(&spiDmaModule, (uint8_t *)&command[0], sizeof(command));
 800b33e:	2204      	movs	r2, #4
 800b340:	eb0d 0102 	add.w	r1, sp, r2
 800b344:	4802      	ldr	r0, [pc, #8]	; (800b350 <lan9252_cmd_read+0x30>)
 800b346:	f003 fc79 	bl	800ec3c <SpiDma_write>
}
 800b34a:	b003      	add	sp, #12
 800b34c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b350:	20000120 	.word	0x20000120

0800b354 <lan9252_cmd_write>:

static void lan9252_cmd_write(uint16_t address)
{
 800b354:	b500      	push	{lr}
 800b356:	b083      	sub	sp, #12
   uint8_t command[3] = {0u};
 800b358:	4b0b      	ldr	r3, [pc, #44]	; (800b388 <lan9252_cmd_write+0x34>)
 800b35a:	881b      	ldrh	r3, [r3, #0]
 800b35c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800b360:	2300      	movs	r3, #0
 800b362:	f88d 3006 	strb.w	r3, [sp, #6]

   /* Prepare the data structure contains read command. */
   command[0] = (uint8_t)LAN9252_ESC_CMD_SERIAL_WRITE;
 800b366:	2302      	movs	r3, #2
 800b368:	f88d 3004 	strb.w	r3, [sp, #4]
   command[1] = (uint8_t)((address >> 8u) & 0xFF);
 800b36c:	0a03      	lsrs	r3, r0, #8
 800b36e:	f88d 3005 	strb.w	r3, [sp, #5]
   command[2] = (uint8_t)(address & 0xFF);
 800b372:	f88d 0006 	strb.w	r0, [sp, #6]

   /* Send the command to tmc slave. */
   SpiDma_write(&spiDmaModule, (uint8_t *)&command[0], sizeof(command));
 800b376:	2203      	movs	r2, #3
 800b378:	a901      	add	r1, sp, #4
 800b37a:	4804      	ldr	r0, [pc, #16]	; (800b38c <lan9252_cmd_write+0x38>)
 800b37c:	f003 fc5e 	bl	800ec3c <SpiDma_write>
}
 800b380:	b003      	add	sp, #12
 800b382:	f85d fb04 	ldr.w	pc, [sp], #4
 800b386:	bf00      	nop
 800b388:	08012d14 	.word	0x08012d14
 800b38c:	20000120 	.word	0x20000120

0800b390 <lan9252_Init>:

void lan9252_Init(void)
{
 800b390:	b508      	push	{r3, lr}
   /* Initialize the SPI DMA module. */
   SpiDma_Init(&spiDmaModule);
 800b392:	4802      	ldr	r0, [pc, #8]	; (800b39c <lan9252_Init+0xc>)
 800b394:	f003 fc28 	bl	800ebe8 <SpiDma_Init>

   /* Verify the connection with Lan9252. */

   /* Reset all register status of lan9252. */
}
 800b398:	bd08      	pop	{r3, pc}
 800b39a:	bf00      	nop
 800b39c:	20000120 	.word	0x20000120

0800b3a0 <lan9252_read_data>:
{
   SpiDma_Deinit(&spiDmaModule);
}

void lan9252_read_data(uint8_t *data_ptr, uint16_t address, uint16_t len)
{
 800b3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3a2:	b0a1      	sub	sp, #132	; 0x84
 800b3a4:	4605      	mov	r5, r0
 800b3a6:	460e      	mov	r6, r1
 800b3a8:	4614      	mov	r4, r2
   uint8_t iter = 0u;
   uint8_t tx_dummy_arr[128];

   /* Prepare the tx data dummy. */
   for (iter = 0U; iter < len; iter++)
 800b3aa:	f04f 0c00 	mov.w	ip, #0
 800b3ae:	e00a      	b.n	800b3c6 <lan9252_read_data+0x26>
   {
      tx_dummy_arr[iter] = 0xFFu;
 800b3b0:	f10c 0380 	add.w	r3, ip, #128	; 0x80
 800b3b4:	eb0d 0e03 	add.w	lr, sp, r3
 800b3b8:	23ff      	movs	r3, #255	; 0xff
 800b3ba:	f80e 3c80 	strb.w	r3, [lr, #-128]
   for (iter = 0U; iter < len; iter++)
 800b3be:	f10c 0c01 	add.w	ip, ip, #1
 800b3c2:	fa5f fc8c 	uxtb.w	ip, ip
 800b3c6:	fa1f fe8c 	uxth.w	lr, ip
 800b3ca:	45a6      	cmp	lr, r4
 800b3cc:	d3f0      	bcc.n	800b3b0 <lan9252_read_data+0x10>
   }

   /* Change the CS pin to active state. */
   SpiDma_CsPinChangeState(&spiDmaModule, true);
 800b3ce:	4f0a      	ldr	r7, [pc, #40]	; (800b3f8 <lan9252_read_data+0x58>)
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	f003 fc24 	bl	800ec20 <SpiDma_CsPinChangeState>

   /* Send Read command to address. */
   lan9252_cmd_read(address);
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7ff ffa1 	bl	800b320 <lan9252_cmd_read>

   /* Read data. */
   SpiDma_read(&spiDmaModule, data_ptr, tx_dummy_arr, len);
 800b3de:	4623      	mov	r3, r4
 800b3e0:	466a      	mov	r2, sp
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	4638      	mov	r0, r7
 800b3e6:	f003 fc65 	bl	800ecb4 <SpiDma_read>

   /* Change the CS pin to inactive state. */
   SpiDma_CsPinChangeState(&spiDmaModule, false);
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	f003 fc17 	bl	800ec20 <SpiDma_CsPinChangeState>
}
 800b3f2:	b021      	add	sp, #132	; 0x84
 800b3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20000120 	.word	0x20000120

0800b3fc <lan9252_read_32>:

   return ret;
}

uint32_t lan9252_read_32(uint16_t address)
{
 800b3fc:	b500      	push	{lr}
 800b3fe:	b083      	sub	sp, #12
 800b400:	4601      	mov	r1, r0
   uint32_t ret = 0u;
   uint8_t buffer[4] = {0u};
 800b402:	2300      	movs	r3, #0
 800b404:	9301      	str	r3, [sp, #4]

   lan9252_read_data(buffer, address, sizeof(buffer));
 800b406:	2204      	movs	r2, #4
 800b408:	eb0d 0002 	add.w	r0, sp, r2
 800b40c:	f7ff ffc8 	bl	800b3a0 <lan9252_read_data>

   ret = (((uint32_t)buffer[3] << 24u) |
 800b410:	f89d 2007 	ldrb.w	r2, [sp, #7]
          ((uint32_t)buffer[2] << 16u) |
 800b414:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b418:	041b      	lsls	r3, r3, #16
   ret = (((uint32_t)buffer[3] << 24u) |
 800b41a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          ((uint32_t)buffer[1] << 8u) |
 800b41e:	f89d 2005 	ldrb.w	r2, [sp, #5]
          ((uint32_t)buffer[2] << 16u) |
 800b422:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          ((uint32_t)buffer[0] << 0u));
 800b426:	f89d 0004 	ldrb.w	r0, [sp, #4]

   return ret;
}
 800b42a:	4318      	orrs	r0, r3
 800b42c:	b003      	add	sp, #12
 800b42e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b434 <lan9252_write_data>:

void lan9252_write_data(uint8_t *data_ptr, uint16_t address, uint16_t len)
{
 800b434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b436:	4605      	mov	r5, r0
 800b438:	460f      	mov	r7, r1
 800b43a:	4616      	mov	r6, r2
   /* Change the CS pin to active state. */
   SpiDma_CsPinChangeState(&spiDmaModule, true);
 800b43c:	4c08      	ldr	r4, [pc, #32]	; (800b460 <lan9252_write_data+0x2c>)
 800b43e:	2101      	movs	r1, #1
 800b440:	4620      	mov	r0, r4
 800b442:	f003 fbed 	bl	800ec20 <SpiDma_CsPinChangeState>

   /* Send request write. */
   lan9252_cmd_write(address);
 800b446:	4638      	mov	r0, r7
 800b448:	f7ff ff84 	bl	800b354 <lan9252_cmd_write>

   /* Send data to lan9252. */
   SpiDma_write (&spiDmaModule, data_ptr, len);
 800b44c:	4632      	mov	r2, r6
 800b44e:	4629      	mov	r1, r5
 800b450:	4620      	mov	r0, r4
 800b452:	f003 fbf3 	bl	800ec3c <SpiDma_write>

   /* Change the CS pin to inactive state. */
   SpiDma_CsPinChangeState(&spiDmaModule, false);
 800b456:	2100      	movs	r1, #0
 800b458:	4620      	mov	r0, r4
 800b45a:	f003 fbe1 	bl	800ec20 <SpiDma_CsPinChangeState>
}
 800b45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b460:	20000120 	.word	0x20000120

0800b464 <lan9252_write_32>:

   lan9252_write_data (data, address, 2);
}

void lan9252_write_32 (uint16_t address, uint32_t value)
{
 800b464:	b500      	push	{lr}
 800b466:	b083      	sub	sp, #12
   uint8_t data[4] = {0u};
 800b468:	2300      	movs	r3, #0
 800b46a:	9301      	str	r3, [sp, #4]

   data[0] = (uint8_t)(value & 0xFF);
 800b46c:	f88d 1004 	strb.w	r1, [sp, #4]
   data[1] = (uint8_t)((value >> 8u) & 0xFF);
 800b470:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800b474:	f88d 3005 	strb.w	r3, [sp, #5]
   data[2] = (uint8_t)((value >> 16u) & 0xFF);
 800b478:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800b47c:	f88d 3006 	strb.w	r3, [sp, #6]
   data[3] = (uint8_t)((value >> 24u) & 0xFF);
 800b480:	0e09      	lsrs	r1, r1, #24
 800b482:	f88d 1007 	strb.w	r1, [sp, #7]

   lan9252_write_data (data, address, 4u);
 800b486:	2204      	movs	r2, #4
 800b488:	4601      	mov	r1, r0
 800b48a:	eb0d 0002 	add.w	r0, sp, r2
 800b48e:	f7ff ffd1 	bl	800b434 <lan9252_write_data>
}
 800b492:	b003      	add	sp, #12
 800b494:	f85d fb04 	ldr.w	pc, [sp], #4

0800b498 <lwrb_init>:
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t *buff, void *buffdata, size_t size)
{
   if (buff == NULL || buffdata == NULL || size == 0)
 800b498:	4603      	mov	r3, r0
 800b49a:	b198      	cbz	r0, 800b4c4 <lwrb_init+0x2c>
 800b49c:	b1a1      	cbz	r1, 800b4c8 <lwrb_init+0x30>
 800b49e:	b90a      	cbnz	r2, 800b4a4 <lwrb_init+0xc>
   {
      return 0;
 800b4a0:	2000      	movs	r0, #0
   buff->magic1 = 0xDEADBEEF;
   buff->magic2 = ~0xDEADBEEF;
#endif /* LWRB_USE_MAGIC */

   return 1;
}
 800b4a2:	4770      	bx	lr
   BUF_MEMSET((void *)buff, 0x00, sizeof(*buff));
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	6018      	str	r0, [r3, #0]
 800b4a8:	6058      	str	r0, [r3, #4]
 800b4aa:	6098      	str	r0, [r3, #8]
 800b4ac:	60d8      	str	r0, [r3, #12]
 800b4ae:	6118      	str	r0, [r3, #16]
 800b4b0:	6158      	str	r0, [r3, #20]
 800b4b2:	6198      	str	r0, [r3, #24]
   buff->size = size;
 800b4b4:	609a      	str	r2, [r3, #8]
   buff->buff = buffdata;
 800b4b6:	6059      	str	r1, [r3, #4]
   buff->magic1 = 0xDEADBEEF;
 800b4b8:	4a04      	ldr	r2, [pc, #16]	; (800b4cc <lwrb_init+0x34>)
 800b4ba:	601a      	str	r2, [r3, #0]
   buff->magic2 = ~0xDEADBEEF;
 800b4bc:	4a04      	ldr	r2, [pc, #16]	; (800b4d0 <lwrb_init+0x38>)
 800b4be:	619a      	str	r2, [r3, #24]
   return 1;
 800b4c0:	2001      	movs	r0, #1
 800b4c2:	4770      	bx	lr
      return 0;
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	4770      	bx	lr
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	4770      	bx	lr
 800b4cc:	deadbeef 	.word	0xdeadbeef
 800b4d0:	21524110 	.word	0x21524110

0800b4d4 <lwrb_get_full>:
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t *buff)
{
   size_t w, r, size;

   if (!BUF_IS_VALID(buff))
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	b1b0      	cbz	r0, 800b506 <lwrb_get_full+0x32>
 800b4d8:	6801      	ldr	r1, [r0, #0]
 800b4da:	4a10      	ldr	r2, [pc, #64]	; (800b51c <lwrb_get_full+0x48>)
 800b4dc:	4291      	cmp	r1, r2
 800b4de:	d114      	bne.n	800b50a <lwrb_get_full+0x36>
 800b4e0:	6981      	ldr	r1, [r0, #24]
 800b4e2:	4a0f      	ldr	r2, [pc, #60]	; (800b520 <lwrb_get_full+0x4c>)
 800b4e4:	4291      	cmp	r1, r2
 800b4e6:	d112      	bne.n	800b50e <lwrb_get_full+0x3a>
 800b4e8:	6842      	ldr	r2, [r0, #4]
 800b4ea:	b192      	cbz	r2, 800b512 <lwrb_get_full+0x3e>
 800b4ec:	6880      	ldr	r0, [r0, #8]
 800b4ee:	b198      	cbz	r0, 800b518 <lwrb_get_full+0x44>
   {
      return 0;
   }

   /* Use temporary values in case they are changed during operations */
   w = buff->w;
 800b4f0:	691a      	ldr	r2, [r3, #16]
   r = buff->r;
 800b4f2:	68d9      	ldr	r1, [r3, #12]
   if (w == r)
 800b4f4:	428a      	cmp	r2, r1
 800b4f6:	d00e      	beq.n	800b516 <lwrb_get_full+0x42>
   {
      size = 0;
   }
   else if (w > r)
 800b4f8:	d901      	bls.n	800b4fe <lwrb_get_full+0x2a>
   {
      size = w - r;
 800b4fa:	1a50      	subs	r0, r2, r1
 800b4fc:	4770      	bx	lr
   }
   else
   {
      size = buff->size - (r - w);
 800b4fe:	6898      	ldr	r0, [r3, #8]
 800b500:	1a52      	subs	r2, r2, r1
 800b502:	4410      	add	r0, r2
 800b504:	4770      	bx	lr
      return 0;
 800b506:	2000      	movs	r0, #0
 800b508:	4770      	bx	lr
 800b50a:	2000      	movs	r0, #0
 800b50c:	4770      	bx	lr
 800b50e:	2000      	movs	r0, #0
 800b510:	4770      	bx	lr
 800b512:	2000      	movs	r0, #0
 800b514:	4770      	bx	lr
      size = 0;
 800b516:	2000      	movs	r0, #0
   }
   return size;
}
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	deadbeef 	.word	0xdeadbeef
 800b520:	21524110 	.word	0x21524110

0800b524 <lwrb_get_linear_block_read_address>:
 * \return          Linear buffer start address
 */
void *
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t *buff)
{
   if (!BUF_IS_VALID(buff))
 800b524:	4603      	mov	r3, r0
 800b526:	b178      	cbz	r0, 800b548 <lwrb_get_linear_block_read_address+0x24>
 800b528:	6801      	ldr	r1, [r0, #0]
 800b52a:	4a0b      	ldr	r2, [pc, #44]	; (800b558 <lwrb_get_linear_block_read_address+0x34>)
 800b52c:	4291      	cmp	r1, r2
 800b52e:	d10c      	bne.n	800b54a <lwrb_get_linear_block_read_address+0x26>
 800b530:	6981      	ldr	r1, [r0, #24]
 800b532:	4a0a      	ldr	r2, [pc, #40]	; (800b55c <lwrb_get_linear_block_read_address+0x38>)
 800b534:	4291      	cmp	r1, r2
 800b536:	d10a      	bne.n	800b54e <lwrb_get_linear_block_read_address+0x2a>
 800b538:	6840      	ldr	r0, [r0, #4]
 800b53a:	b158      	cbz	r0, 800b554 <lwrb_get_linear_block_read_address+0x30>
 800b53c:	689a      	ldr	r2, [r3, #8]
 800b53e:	b142      	cbz	r2, 800b552 <lwrb_get_linear_block_read_address+0x2e>
   {
      return NULL;
   }
   return &buff->buff[buff->r];
 800b540:	6858      	ldr	r0, [r3, #4]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	4418      	add	r0, r3
 800b546:	4770      	bx	lr
 800b548:	4770      	bx	lr
      return NULL;
 800b54a:	2000      	movs	r0, #0
 800b54c:	4770      	bx	lr
 800b54e:	2000      	movs	r0, #0
 800b550:	4770      	bx	lr
 800b552:	2000      	movs	r0, #0
}
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	deadbeef 	.word	0xdeadbeef
 800b55c:	21524110 	.word	0x21524110

0800b560 <lwrb_get_linear_block_read_length>:
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t *buff)
{
   size_t w, r, len;

   if (!BUF_IS_VALID(buff))
 800b560:	4603      	mov	r3, r0
 800b562:	b1b0      	cbz	r0, 800b592 <lwrb_get_linear_block_read_length+0x32>
 800b564:	6801      	ldr	r1, [r0, #0]
 800b566:	4a10      	ldr	r2, [pc, #64]	; (800b5a8 <lwrb_get_linear_block_read_length+0x48>)
 800b568:	4291      	cmp	r1, r2
 800b56a:	d114      	bne.n	800b596 <lwrb_get_linear_block_read_length+0x36>
 800b56c:	6981      	ldr	r1, [r0, #24]
 800b56e:	4a0f      	ldr	r2, [pc, #60]	; (800b5ac <lwrb_get_linear_block_read_length+0x4c>)
 800b570:	4291      	cmp	r1, r2
 800b572:	d112      	bne.n	800b59a <lwrb_get_linear_block_read_length+0x3a>
 800b574:	6842      	ldr	r2, [r0, #4]
 800b576:	b192      	cbz	r2, 800b59e <lwrb_get_linear_block_read_length+0x3e>
 800b578:	6880      	ldr	r0, [r0, #8]
 800b57a:	b198      	cbz	r0, 800b5a4 <lwrb_get_linear_block_read_length+0x44>
   {
      return 0;
   }

   /* Use temporary values in case they are changed during operations */
   w = buff->w;
 800b57c:	691a      	ldr	r2, [r3, #16]
   r = buff->r;
 800b57e:	68d8      	ldr	r0, [r3, #12]
   if (w > r)
 800b580:	4282      	cmp	r2, r0
 800b582:	d901      	bls.n	800b588 <lwrb_get_linear_block_read_length+0x28>
   {
      len = w - r;
 800b584:	1a10      	subs	r0, r2, r0
 800b586:	4770      	bx	lr
   }
   else if (r > w)
 800b588:	4282      	cmp	r2, r0
 800b58a:	d20a      	bcs.n	800b5a2 <lwrb_get_linear_block_read_length+0x42>
   {
      len = buff->size - r;
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	1a18      	subs	r0, r3, r0
 800b590:	4770      	bx	lr
      return 0;
 800b592:	2000      	movs	r0, #0
 800b594:	4770      	bx	lr
 800b596:	2000      	movs	r0, #0
 800b598:	4770      	bx	lr
 800b59a:	2000      	movs	r0, #0
 800b59c:	4770      	bx	lr
 800b59e:	2000      	movs	r0, #0
 800b5a0:	4770      	bx	lr
   }
   else
   {
      len = 0;
 800b5a2:	2000      	movs	r0, #0
   }
   return len;
}
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	deadbeef 	.word	0xdeadbeef
 800b5ac:	21524110 	.word	0x21524110

0800b5b0 <lwrb_skip>:
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t *buff, size_t len)
{
 800b5b0:	b570      	push	{r4, r5, r6, lr}
   size_t full;

   if (!BUF_IS_VALID(buff) || len == 0)
 800b5b2:	b348      	cbz	r0, 800b608 <lwrb_skip+0x58>
 800b5b4:	460d      	mov	r5, r1
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	6802      	ldr	r2, [r0, #0]
 800b5ba:	4b18      	ldr	r3, [pc, #96]	; (800b61c <lwrb_skip+0x6c>)
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d125      	bne.n	800b60c <lwrb_skip+0x5c>
 800b5c0:	6982      	ldr	r2, [r0, #24]
 800b5c2:	4b17      	ldr	r3, [pc, #92]	; (800b620 <lwrb_skip+0x70>)
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d124      	bne.n	800b612 <lwrb_skip+0x62>
 800b5c8:	6843      	ldr	r3, [r0, #4]
 800b5ca:	b323      	cbz	r3, 800b616 <lwrb_skip+0x66>
 800b5cc:	6884      	ldr	r4, [r0, #8]
 800b5ce:	b1f4      	cbz	r4, 800b60e <lwrb_skip+0x5e>
 800b5d0:	b909      	cbnz	r1, 800b5d6 <lwrb_skip+0x26>
   {
      return 0;
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	e01b      	b.n	800b60e <lwrb_skip+0x5e>
   }

   full = lwrb_get_full(buff);
 800b5d6:	f7ff ff7d 	bl	800b4d4 <lwrb_get_full>
   len = BUF_MIN(len, full);
 800b5da:	462c      	mov	r4, r5
 800b5dc:	4285      	cmp	r5, r0
 800b5de:	bf28      	it	cs
 800b5e0:	4604      	movcs	r4, r0
   buff->r += len;
 800b5e2:	68f3      	ldr	r3, [r6, #12]
 800b5e4:	4423      	add	r3, r4
 800b5e6:	60f3      	str	r3, [r6, #12]
   if (buff->r >= buff->size)
 800b5e8:	68f2      	ldr	r2, [r6, #12]
 800b5ea:	68b3      	ldr	r3, [r6, #8]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d303      	bcc.n	800b5f8 <lwrb_skip+0x48>
   {
      buff->r -= buff->size;
 800b5f0:	68b2      	ldr	r2, [r6, #8]
 800b5f2:	68f3      	ldr	r3, [r6, #12]
 800b5f4:	1a9b      	subs	r3, r3, r2
 800b5f6:	60f3      	str	r3, [r6, #12]
   }
   BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 800b5f8:	6973      	ldr	r3, [r6, #20]
 800b5fa:	b143      	cbz	r3, 800b60e <lwrb_skip+0x5e>
 800b5fc:	6973      	ldr	r3, [r6, #20]
 800b5fe:	4622      	mov	r2, r4
 800b600:	2100      	movs	r1, #0
 800b602:	4630      	mov	r0, r6
 800b604:	4798      	blx	r3
 800b606:	e002      	b.n	800b60e <lwrb_skip+0x5e>
      return 0;
 800b608:	2400      	movs	r4, #0
 800b60a:	e000      	b.n	800b60e <lwrb_skip+0x5e>
 800b60c:	2400      	movs	r4, #0
   return len;
}
 800b60e:	4620      	mov	r0, r4
 800b610:	bd70      	pop	{r4, r5, r6, pc}
      return 0;
 800b612:	2400      	movs	r4, #0
 800b614:	e7fb      	b.n	800b60e <lwrb_skip+0x5e>
 800b616:	2400      	movs	r4, #0
 800b618:	e7f9      	b.n	800b60e <lwrb_skip+0x5e>
 800b61a:	bf00      	nop
 800b61c:	deadbeef 	.word	0xdeadbeef
 800b620:	21524110 	.word	0x21524110

0800b624 <md80_PackImpedanceFrame>:
   return (me->local.isEnabled);
}

static void md80_PackImpedanceFrame(tMd80_Device *const me)
{
   me->local.command.toMd80.length = 32u;
 800b624:	2320      	movs	r3, #32
 800b626:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_IMP_CONTROL;
 800b62a:	2312      	movs	r3, #18
 800b62c:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b630:	2300      	movs	r3, #0
 800b632:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->config.impedanceController.kp;
 800b636:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b638:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = me->config.impedanceController.kd;
 800b63c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b63e:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = me->input.position;
 800b642:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b644:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
   *(float *)&me->local.command.toMd80.data[14] = me->input.velocity;
 800b648:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b64a:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
   *(float *)&me->local.command.toMd80.data[18] = me->input.torque;
 800b64e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b650:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
   *(float *)&me->local.command.toMd80.data[22] = me->config.torqueMax;
 800b654:	6843      	ldr	r3, [r0, #4]
 800b656:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
}
 800b65a:	4770      	bx	lr

0800b65c <md80_PackPositionFrame>:

static void md80_PackPositionFrame(tMd80_Device *const me)
{
   me->local.command.toMd80.length = 32;
 800b65c:	2320      	movs	r3, #32
 800b65e:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_POS_CONTROL;
 800b662:	2310      	movs	r3, #16
 800b664:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b668:	2300      	movs	r3, #0
 800b66a:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->config.positionController.kp;
 800b66e:	6a03      	ldr	r3, [r0, #32]
 800b670:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = me->config.positionController.ki;
 800b674:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b676:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = me->config.positionController.kd;
 800b67a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b67c:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
   *(float *)&me->local.command.toMd80.data[14] = me->config.positionController.i_windup;
 800b680:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b682:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
   *(float *)&me->local.command.toMd80.data[18] = me->config.velocityMax;
 800b686:	6883      	ldr	r3, [r0, #8]
 800b688:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
   *(float *)&me->local.command.toMd80.data[22] = me->input.position;
 800b68c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b68e:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
}
 800b692:	4770      	bx	lr

0800b694 <md80_PackVelocityFrame>:

static void md80_PackVelocityFrame(tMd80_Device *const me)
{
   me->local.command.toMd80.length = 32;
 800b694:	2320      	movs	r3, #32
 800b696:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_VEL_CONTROL;
 800b69a:	2311      	movs	r3, #17
 800b69c:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->config.velocityController.kp;
 800b6a6:	6903      	ldr	r3, [r0, #16]
 800b6a8:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = me->config.velocityController.ki;
 800b6ac:	6943      	ldr	r3, [r0, #20]
 800b6ae:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = me->config.velocityController.kd;
 800b6b2:	6983      	ldr	r3, [r0, #24]
 800b6b4:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
   *(float *)&me->local.command.toMd80.data[14] = me->config.velocityController.i_windup;
 800b6b8:	69c3      	ldr	r3, [r0, #28]
 800b6ba:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
   *(float *)&me->local.command.toMd80.data[18] = me->config.torqueMax;
 800b6be:	6843      	ldr	r3, [r0, #4]
 800b6c0:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
   *(float *)&me->local.command.toMd80.data[22] = me->input.velocity;
 800b6c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b6c6:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
}
 800b6ca:	4770      	bx	lr

0800b6cc <md80_PackMotionTargetsFrame>:

static void md80_PackMotionTargetsFrame(tMd80_Device *const me)
{
   me->local.command.toMd80.length = 24;
 800b6cc:	2318      	movs	r3, #24
 800b6ce:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_SET_MOTION_TARGETS;
 800b6d2:	2314      	movs	r3, #20
 800b6d4:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->input.velocity;
 800b6de:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b6e0:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = me->input.position;
 800b6e4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b6e6:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = me->input.torque;
 800b6ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b6ec:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
   *(float *)&me->local.command.toMd80.data[18] = (true == me->config.isTorqueMaxAdjust) ? me->config.velocityMax : 0;
 800b6f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b6f4:	b13b      	cbz	r3, 800b706 <md80_PackMotionTargetsFrame+0x3a>
 800b6f6:	6882      	ldr	r2, [r0, #8]
 800b6f8:	f8c0 21bc 	str.w	r2, [r0, #444]	; 0x1bc
   *(float *)&me->local.command.toMd80.data[14] = (true == me->config.isTorqueMaxAdjust) ? me->config.torqueMax : 0;
 800b6fc:	b12b      	cbz	r3, 800b70a <md80_PackMotionTargetsFrame+0x3e>
 800b6fe:	6843      	ldr	r3, [r0, #4]
 800b700:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
}
 800b704:	4770      	bx	lr
   *(float *)&me->local.command.toMd80.data[18] = (true == me->config.isTorqueMaxAdjust) ? me->config.velocityMax : 0;
 800b706:	2200      	movs	r2, #0
 800b708:	e7f6      	b.n	800b6f8 <md80_PackMotionTargetsFrame+0x2c>
   *(float *)&me->local.command.toMd80.data[14] = (true == me->config.isTorqueMaxAdjust) ? me->config.torqueMax : 0;
 800b70a:	2300      	movs	r3, #0
 800b70c:	e7f8      	b.n	800b700 <md80_PackMotionTargetsFrame+0x34>

0800b70e <md80_UpdateCommandFrame>:
{
 800b70e:	b510      	push	{r4, lr}
 800b710:	4604      	mov	r4, r0
   switch (me->local.mode)
 800b712:	f890 31ed 	ldrb.w	r3, [r0, #493]	; 0x1ed
 800b716:	2b04      	cmp	r3, #4
 800b718:	d80d      	bhi.n	800b736 <md80_UpdateCommandFrame+0x28>
 800b71a:	e8df f003 	tbb	[pc, r3]
 800b71e:	1903      	.short	0x1903
 800b720:	0c2e      	.short	0x0c2e
 800b722:	0d          	.byte	0x0d
 800b723:	00          	.byte	0x00
		  me->local.command.toMd80.length = 2u;
 800b724:	2302      	movs	r3, #2
 800b726:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
		  me->local.command.toMd80.data[0] = MD80_FRAME_GET_INFO;
 800b72a:	2305      	movs	r3, #5
 800b72c:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
		  me->local.command.toMd80.data[1] = 0x00;
 800b730:	2300      	movs	r3, #0
 800b732:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
}
 800b736:	bd10      	pop	{r4, pc}
		  if (true == me->config.isRegularsAdjust)
 800b738:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b73c:	b12b      	cbz	r3, 800b74a <md80_UpdateCommandFrame+0x3c>
			 md80_PackImpedanceFrame(me);
 800b73e:	f7ff ff71 	bl	800b624 <md80_PackImpedanceFrame>
			 me->config.isRegularsAdjust = false;
 800b742:	2300      	movs	r3, #0
 800b744:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b748:	e7f5      	b.n	800b736 <md80_UpdateCommandFrame+0x28>
			 md80_PackMotionTargetsFrame(me);
 800b74a:	f7ff ffbf 	bl	800b6cc <md80_PackMotionTargetsFrame>
 800b74e:	e7f2      	b.n	800b736 <md80_UpdateCommandFrame+0x28>
		  if (true == me->config.isRegularsAdjust)
 800b750:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b754:	b943      	cbnz	r3, 800b768 <md80_UpdateCommandFrame+0x5a>
		  else if (true == me->config.isVelocityRegulatorAdjust)
 800b756:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800b75a:	b15b      	cbz	r3, 800b774 <md80_UpdateCommandFrame+0x66>
			 md80_PackVelocityFrame(me);
 800b75c:	f7ff ff9a 	bl	800b694 <md80_PackVelocityFrame>
			 me->config.isVelocityRegulatorAdjust = false;
 800b760:	2300      	movs	r3, #0
 800b762:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b766:	e7e6      	b.n	800b736 <md80_UpdateCommandFrame+0x28>
			 md80_PackPositionFrame(me);
 800b768:	f7ff ff78 	bl	800b65c <md80_PackPositionFrame>
			 me->config.isRegularsAdjust = false;
 800b76c:	2300      	movs	r3, #0
 800b76e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b772:	e7e0      	b.n	800b736 <md80_UpdateCommandFrame+0x28>
			 md80_PackMotionTargetsFrame(me);
 800b774:	f7ff ffaa 	bl	800b6cc <md80_PackMotionTargetsFrame>
 800b778:	e7dd      	b.n	800b736 <md80_UpdateCommandFrame+0x28>
		  if (true == me->config.isVelocityRegulatorAdjust)
 800b77a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800b77e:	b12b      	cbz	r3, 800b78c <md80_UpdateCommandFrame+0x7e>
			 md80_PackVelocityFrame(me);
 800b780:	f7ff ff88 	bl	800b694 <md80_PackVelocityFrame>
			 me->config.isVelocityRegulatorAdjust = false;
 800b784:	2300      	movs	r3, #0
 800b786:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b78a:	e7d4      	b.n	800b736 <md80_UpdateCommandFrame+0x28>
			 md80_PackMotionTargetsFrame(me);
 800b78c:	f7ff ff9e 	bl	800b6cc <md80_PackMotionTargetsFrame>
}
 800b790:	e7d1      	b.n	800b736 <md80_UpdateCommandFrame+0x28>
	...

0800b794 <md80_Transmit>:
{
 800b794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b796:	4604      	mov	r4, r0
   uint32_t timeoutTemp = pdMS_TO_TICKS(timeout);
 800b798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b79c:	fb03 f601 	mul.w	r6, r3, r1
 800b7a0:	4b19      	ldr	r3, [pc, #100]	; (800b808 <md80_Transmit+0x74>)
 800b7a2:	fba3 3606 	umull	r3, r6, r3, r6
 800b7a6:	09b6      	lsrs	r6, r6, #6
 800b7a8:	4635      	mov	r5, r6
 800b7aa:	e000      	b.n	800b7ae <md80_Transmit+0x1a>
   } while (timeoutTemp--);
 800b7ac:	461d      	mov	r5, r3
      ret = canM_Send(me->config.canId, me->local.command.toMd80.data, me->local.command.toMd80.length);
 800b7ae:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
 800b7b2:	f504 71d5 	add.w	r1, r4, #426	; 0x1aa
 800b7b6:	7820      	ldrb	r0, [r4, #0]
 800b7b8:	f004 fcbc 	bl	8010134 <canM_Send>
      if (ret)
 800b7bc:	4607      	mov	r7, r0
 800b7be:	b928      	cbnz	r0, 800b7cc <md80_Transmit+0x38>
      vTaskDelay(1);
 800b7c0:	2001      	movs	r0, #1
 800b7c2:	f7fd fea9 	bl	8009518 <vTaskDelay>
   } while (timeoutTemp--);
 800b7c6:	1e6b      	subs	r3, r5, #1
 800b7c8:	2d00      	cmp	r5, #0
 800b7ca:	d1ef      	bne.n	800b7ac <md80_Transmit+0x18>
   if (true == ret)
 800b7cc:	b92f      	cbnz	r7, 800b7da <md80_Transmit+0x46>
}
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         vTaskDelay(1);
 800b7d2:	2001      	movs	r0, #1
 800b7d4:	f7fd fea0 	bl	8009518 <vTaskDelay>
      while (timeoutTemp--)
 800b7d8:	462e      	mov	r6, r5
 800b7da:	1e75      	subs	r5, r6, #1
 800b7dc:	2e00      	cmp	r6, #0
 800b7de:	d0f6      	beq.n	800b7ce <md80_Transmit+0x3a>
         if (true == canM_Read(&me->local.response.canId, me->local.response.fromMd80.data, (uint8_t *)&me->local.response.fromMd80.length))
 800b7e0:	f204 12cb 	addw	r2, r4, #459	; 0x1cb
 800b7e4:	f504 71e6 	add.w	r1, r4, #460	; 0x1cc
 800b7e8:	f504 70e5 	add.w	r0, r4, #458	; 0x1ca
 800b7ec:	f004 fcea 	bl	80101c4 <canM_Read>
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d0ed      	beq.n	800b7d2 <md80_Transmit+0x3e>
            ret = (me->local.response.canId == me->config.canId) ? true : false;
 800b7f6:	f894 21ca 	ldrb.w	r2, [r4, #458]	; 0x1ca
 800b7fa:	7823      	ldrb	r3, [r4, #0]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	bf0c      	ite	eq
 800b800:	2701      	moveq	r7, #1
 800b802:	2700      	movne	r7, #0
            if (ret)
 800b804:	d1e5      	bne.n	800b7d2 <md80_Transmit+0x3e>
 800b806:	e7e2      	b.n	800b7ce <md80_Transmit+0x3a>
 800b808:	10624dd3 	.word	0x10624dd3

0800b80c <md80_Init>:
}
 800b80c:	4770      	bx	lr

0800b80e <md80_UpdateRespondeData>:
   if ((me->config.canId != respFrame->canId) || (respFrame->fromMd80.data[0] != MD80_RESPONSE_DEFAULT))
 800b80e:	7802      	ldrb	r2, [r0, #0]
 800b810:	780b      	ldrb	r3, [r1, #0]
 800b812:	429a      	cmp	r2, r3
 800b814:	d11b      	bne.n	800b84e <md80_UpdateRespondeData+0x40>
 800b816:	788b      	ldrb	r3, [r1, #2]
 800b818:	2ba0      	cmp	r3, #160	; 0xa0
 800b81a:	d118      	bne.n	800b84e <md80_UpdateRespondeData+0x40>
   me->output.errorVector = *(uint16_t *)&respFrame->fromMd80.data[1];
 800b81c:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 800b820:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
   me->output.temperature = respFrame->fromMd80.data[3];
 800b824:	794b      	ldrb	r3, [r1, #5]
 800b826:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
   me->output.position = *(float *)&respFrame->fromMd80.data[4];
 800b82a:	1d8b      	adds	r3, r1, #6
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6543      	str	r3, [r0, #84]	; 0x54
   me->output.velocity = *(float *)&respFrame->fromMd80.data[8];
 800b830:	f101 030a 	add.w	r3, r1, #10
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6583      	str	r3, [r0, #88]	; 0x58
   me->output.torque = *(float *)&respFrame->fromMd80.data[12];
 800b838:	f101 030e 	add.w	r3, r1, #14
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	65c3      	str	r3, [r0, #92]	; 0x5c
   me->output.encoderPosition = *(float *)&respFrame->fromMd80.data[16];
 800b840:	f101 0312 	add.w	r3, r1, #18
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	6603      	str	r3, [r0, #96]	; 0x60
   me->output.encoderVelocity = *(float *)&respFrame->fromMd80.data[20];
 800b848:	3116      	adds	r1, #22
 800b84a:	680b      	ldr	r3, [r1, #0]
 800b84c:	6643      	str	r3, [r0, #100]	; 0x64
}
 800b84e:	4770      	bx	lr

0800b850 <md80_ConfigBlink>:
{
 800b850:	b508      	push	{r3, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_FLASH_LED;
 800b852:	2200      	movs	r2, #0
 800b854:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b858:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800b85c:	2202      	movs	r2, #2
 800b85e:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 500))
 800b862:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b866:	f7ff ff95 	bl	800b794 <md80_Transmit>
}
 800b86a:	bd08      	pop	{r3, pc}

0800b86c <md80_setupCalibration>:
{
 800b86c:	b508      	push	{r3, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_CALIBRATION;
 800b86e:	2270      	movs	r2, #112	; 0x70
 800b870:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b874:	2200      	movs	r2, #0
 800b876:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800b87a:	2202      	movs	r2, #2
 800b87c:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800b880:	2132      	movs	r1, #50	; 0x32
 800b882:	f7ff ff87 	bl	800b794 <md80_Transmit>
}
 800b886:	bd08      	pop	{r3, pc}

0800b888 <md80_setupCalibrationOutput>:
{
 800b888:	b508      	push	{r3, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_CALIBRATION_OUTPUT;
 800b88a:	2271      	movs	r2, #113	; 0x71
 800b88c:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b890:	2200      	movs	r2, #0
 800b892:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800b896:	2202      	movs	r2, #2
 800b898:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800b89c:	2132      	movs	r1, #50	; 0x32
 800b89e:	f7ff ff79 	bl	800b794 <md80_Transmit>
}
 800b8a2:	bd08      	pop	{r3, pc}

0800b8a4 <md80_Restart>:
{
 800b8a4:	b508      	push	{r3, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_RESTART;
 800b8a6:	2213      	movs	r2, #19
 800b8a8:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800b8b8:	2132      	movs	r1, #50	; 0x32
 800b8ba:	f7ff ff6b 	bl	800b794 <md80_Transmit>
}
 800b8be:	bd08      	pop	{r3, pc}

0800b8c0 <md80_ConfigMd80Can>:
{
 800b8c0:	b510      	push	{r4, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_CAN_CONFIG;
 800b8c2:	2420      	movs	r4, #32
 800b8c4:	f880 41aa 	strb.w	r4, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b8c8:	2400      	movs	r4, #0
 800b8ca:	f880 41ab 	strb.w	r4, [r0, #427]	; 0x1ab
   *(uint16_t *)&me->local.command.toMd80.data[2] = canM_Devices[me->config.canId].local.init_info.tx_id.id;
 800b8ce:	f890 c000 	ldrb.w	ip, [r0]
 800b8d2:	4c0e      	ldr	r4, [pc, #56]	; (800b90c <md80_ConfigMd80Can+0x4c>)
 800b8d4:	f44f 7e16 	mov.w	lr, #600	; 0x258
 800b8d8:	fb0e 4c0c 	mla	ip, lr, ip, r4
 800b8dc:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 800b8e0:	f8a0 41ac 	strh.w	r4, [r0, #428]	; 0x1ac
   *(uint32_t *)&me->local.command.toMd80.data[4] = newBaudrateMbps * 1000000;
 800b8e4:	4c0a      	ldr	r4, [pc, #40]	; (800b910 <md80_ConfigMd80Can+0x50>)
 800b8e6:	fb04 f101 	mul.w	r1, r4, r1
 800b8ea:	f8c0 11ae 	str.w	r1, [r0, #430]	; 0x1ae
   *(uint16_t *)&me->local.command.toMd80.data[8] = newTimeout;
 800b8ee:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
   *(uint16_t *)&me->local.command.toMd80.data[10] = (uint16_t)(true == canTermination) ? 1U : 0U;
 800b8f2:	b14b      	cbz	r3, 800b908 <md80_ConfigMd80Can+0x48>
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	f8a0 31b4 	strh.w	r3, [r0, #436]	; 0x1b4
   me->local.command.toMd80.length = 12u;
 800b8fa:	230c      	movs	r3, #12
 800b8fc:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 100))
 800b900:	2164      	movs	r1, #100	; 0x64
 800b902:	f7ff ff47 	bl	800b794 <md80_Transmit>
}
 800b906:	bd10      	pop	{r4, pc}
   *(uint16_t *)&me->local.command.toMd80.data[10] = (uint16_t)(true == canTermination) ? 1U : 0U;
 800b908:	2300      	movs	r3, #0
 800b90a:	e7f4      	b.n	800b8f6 <md80_ConfigMd80Can+0x36>
 800b90c:	2000016c 	.word	0x2000016c
 800b910:	000f4240 	.word	0x000f4240

0800b914 <md80_ConfigMd80Save>:
{
 800b914:	b508      	push	{r3, lr}
   me->local.command.toMd80.length = 2u;
 800b916:	2202      	movs	r2, #2
 800b918:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_CAN_SAVE;
 800b91c:	2221      	movs	r2, #33	; 0x21
 800b91e:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b922:	2200      	movs	r2, #0
 800b924:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   if (true == md80_Transmit(me, 100))
 800b928:	2164      	movs	r1, #100	; 0x64
 800b92a:	f7ff ff33 	bl	800b794 <md80_Transmit>
}
 800b92e:	bd08      	pop	{r3, pc}

0800b930 <md80_SendMotionCommand>:
{
 800b930:	b510      	push	{r4, lr}
 800b932:	4604      	mov	r4, r0
   me->local.command.toMd80.length = 16U;
 800b934:	2310      	movs	r3, #16
 800b936:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_SET_MOTION_TARGETS;
 800b93a:	2314      	movs	r3, #20
 800b93c:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b940:	2300      	movs	r3, #0
 800b942:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = vel;
 800b946:	edc0 0a6b 	vstr	s1, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = pos;
 800b94a:	ed80 0a6c 	vstr	s0, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = torque;
 800b94e:	ed80 1a6d 	vstr	s2, [r0, #436]	; 0x1b4
   if (true == md80_Transmit(me, 100))
 800b952:	2164      	movs	r1, #100	; 0x64
 800b954:	f7ff ff1e 	bl	800b794 <md80_Transmit>
 800b958:	b900      	cbnz	r0, 800b95c <md80_SendMotionCommand+0x2c>
}
 800b95a:	bd10      	pop	{r4, pc}
      md80_UpdateRespondeData(me, (tMd80_ResponseFrame *)&me->local.response);
 800b95c:	f504 71e5 	add.w	r1, r4, #458	; 0x1ca
 800b960:	4620      	mov	r0, r4
 800b962:	f7ff ff54 	bl	800b80e <md80_UpdateRespondeData>
}
 800b966:	e7f8      	b.n	800b95a <md80_SendMotionCommand+0x2a>

0800b968 <md80_SetCurrentLimit>:
{
 800b968:	b510      	push	{r4, lr}
 800b96a:	ed2d 8b02 	vpush	{d8}
 800b96e:	4604      	mov	r4, r0
   if (MD80_DRIVER_MAXCURRENT < currentLimit)
 800b970:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b9c4 <md80_SetCurrentLimit+0x5c>
 800b974:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b97c:	dc0b      	bgt.n	800b996 <md80_SetCurrentLimit+0x2e>
 800b97e:	eeb0 8a40 	vmov.f32	s16, s0
   else if (MD80_DRIVER_MINCURRENT > currentLimit)
 800b982:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b986:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b98e:	d504      	bpl.n	800b99a <md80_SetCurrentLimit+0x32>
      currentLimit = MD80_DRIVER_MINCURRENT;
 800b990:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800b994:	e001      	b.n	800b99a <md80_SetCurrentLimit+0x32>
      currentLimit = MD80_DRIVER_MAXCURRENT;
 800b996:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 800b9c4 <md80_SetCurrentLimit+0x5c>
   me->local.command.toMd80.data[0] = MD80_FRAME_BASE_CONFIG;
 800b99a:	2304      	movs	r3, #4
 800b99c:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
   me->local.command.toMd80.length = 6u;
 800b9a6:	2306      	movs	r3, #6
 800b9a8:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
   *(float *)&me->local.command.toMd80.data[2] = currentLimit;
 800b9ac:	ed84 8a6b 	vstr	s16, [r4, #428]	; 0x1ac
   if (true == md80_Transmit(me, 50))
 800b9b0:	2132      	movs	r1, #50	; 0x32
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f7ff feee 	bl	800b794 <md80_Transmit>
 800b9b8:	b108      	cbz	r0, 800b9be <md80_SetCurrentLimit+0x56>
      me->config.currentMax = currentLimit;
 800b9ba:	ed84 8a03 	vstr	s16, [r4, #12]
}
 800b9be:	ecbd 8b02 	vpop	{d8}
 800b9c2:	bd10      	pop	{r4, pc}
 800b9c4:	42200000 	.word	0x42200000

0800b9c8 <md80_ControlMd80Mode>:
{
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	460d      	mov	r5, r1
   me->local.command.toMd80.data[0] = MD80_FRAME_CONTROL_SELECT;
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   me->local.command.toMd80.data[2] = (uint8_t)mode;
 800b9da:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
   me->local.command.toMd80.length = 3u;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800b9e4:	2132      	movs	r1, #50	; 0x32
 800b9e6:	f7ff fed5 	bl	800b794 <md80_Transmit>
 800b9ea:	b108      	cbz	r0, 800b9f0 <md80_ControlMd80Mode+0x28>
      me->local.mode = mode;
 800b9ec:	f884 51ed 	strb.w	r5, [r4, #493]	; 0x1ed
}
 800b9f0:	bd38      	pop	{r3, r4, r5, pc}

0800b9f2 <md80_ControlMd80Enable>:
{
 800b9f2:	b538      	push	{r3, r4, r5, lr}
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	460d      	mov	r5, r1
   me->local.command.toMd80.data[0] = MD80_FRAME_MOTOR_ENABLE;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   me->local.command.toMd80.data[2] = (uint8_t)enable;
 800ba04:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
   me->local.command.toMd80.length = 3u;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800ba0e:	2132      	movs	r1, #50	; 0x32
 800ba10:	f7ff fec0 	bl	800b794 <md80_Transmit>
 800ba14:	b108      	cbz	r0, 800ba1a <md80_ControlMd80Enable+0x28>
      me->local.isEnabled = (enable == true) ? true : false;
 800ba16:	f884 51ec 	strb.w	r5, [r4, #492]	; 0x1ec
}
 800ba1a:	bd38      	pop	{r3, r4, r5, pc}

0800ba1c <md80_MainFunction>:
   if ((true == me->config.isMd80Detected) && (true == me->local.isEnabled))
 800ba1c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ba20:	b19b      	cbz	r3, 800ba4a <md80_MainFunction+0x2e>
{
 800ba22:	b510      	push	{r4, lr}
 800ba24:	4604      	mov	r4, r0
   if ((true == me->config.isMd80Detected) && (true == me->local.isEnabled))
 800ba26:	f890 31ec 	ldrb.w	r3, [r0, #492]	; 0x1ec
 800ba2a:	b903      	cbnz	r3, 800ba2e <md80_MainFunction+0x12>
}
 800ba2c:	bd10      	pop	{r4, pc}
      md80_UpdateCommandFrame(me);
 800ba2e:	f7ff fe6e 	bl	800b70e <md80_UpdateCommandFrame>
      if (true == md80_Transmit(me, 100))
 800ba32:	2164      	movs	r1, #100	; 0x64
 800ba34:	4620      	mov	r0, r4
 800ba36:	f7ff fead 	bl	800b794 <md80_Transmit>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d0f6      	beq.n	800ba2c <md80_MainFunction+0x10>
         md80_UpdateRespondeData(me, (tMd80_ResponseFrame *)&me->local.response);
 800ba3e:	f504 71e5 	add.w	r1, r4, #458	; 0x1ca
 800ba42:	4620      	mov	r0, r4
 800ba44:	f7ff fee3 	bl	800b80e <md80_UpdateRespondeData>
}
 800ba48:	e7f0      	b.n	800ba2c <md80_MainFunction+0x10>
 800ba4a:	4770      	bx	lr

0800ba4c <md80_SetPositionControllerParams>:
   me->config.isRegularsAdjust = true;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   me->config.positionController.kp = kp;
 800ba52:	ed80 0a08 	vstr	s0, [r0, #32]
   me->config.positionController.ki = ki;
 800ba56:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
   me->config.positionController.kd = kd;
 800ba5a:	ed80 1a0a 	vstr	s2, [r0, #40]	; 0x28
   me->config.positionController.i_windup = iWindup;
 800ba5e:	edc0 1a0b 	vstr	s3, [r0, #44]	; 0x2c
}
 800ba62:	4770      	bx	lr

0800ba64 <md80_SetVelocityControllerParams>:
   me->config.velocityController.kp = kp;
 800ba64:	ed80 0a04 	vstr	s0, [r0, #16]
   me->config.velocityController.ki = ki;
 800ba68:	edc0 0a05 	vstr	s1, [r0, #20]
   me->config.velocityController.kd = kd;
 800ba6c:	ed80 1a06 	vstr	s2, [r0, #24]
   me->config.velocityController.i_windup = iWindup;
 800ba70:	edc0 1a07 	vstr	s3, [r0, #28]
   me->config.isVelocityRegulatorAdjust = true;
 800ba74:	2301      	movs	r3, #1
 800ba76:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
}
 800ba7a:	4770      	bx	lr

0800ba7c <md80_SetImpedanceControllerParams>:
   me->config.impedanceController.kp = kp;
 800ba7c:	ed80 0a0c 	vstr	s0, [r0, #48]	; 0x30
   me->config.impedanceController.kd = kd;
 800ba80:	edc0 0a0d 	vstr	s1, [r0, #52]	; 0x34
   me->config.isRegularsAdjust = true;
 800ba84:	2301      	movs	r3, #1
 800ba86:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
}
 800ba8a:	4770      	bx	lr

0800ba8c <md80_SetMaxTorque>:
{
 800ba8c:	ee07 1a90 	vmov	s15, r1
   me->config.torqueMax = maxTorque;
 800ba90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba94:	edc0 7a01 	vstr	s15, [r0, #4]
   me->config.isTorqueMaxAdjust = true;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800ba9e:	4770      	bx	lr

0800baa0 <md80_SetTargetPosition>:
   me->input.position = pos;
 800baa0:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
}
 800baa4:	4770      	bx	lr
	...

0800baa8 <md80_SetEncoderZero>:
{
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	ed2d 8b02 	vpush	{d8}
 800baae:	4604      	mov	r4, r0
   me->local.command.toMd80.data[0] = MD80_FRAME_ZERO_ENCODER;
 800bab0:	2303      	movs	r3, #3
 800bab2:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800bab6:	2300      	movs	r3, #0
 800bab8:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800babc:	2302      	movs	r3, #2
 800babe:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800bac2:	2132      	movs	r1, #50	; 0x32
 800bac4:	f7ff fe66 	bl	800b794 <md80_Transmit>
 800bac8:	4605      	mov	r5, r0
 800baca:	b918      	cbnz	r0, 800bad4 <md80_SetEncoderZero+0x2c>
}
 800bacc:	4628      	mov	r0, r5
 800bace:	ecbd 8b02 	vpop	{d8}
 800bad2:	bd38      	pop	{r3, r4, r5, pc}
      md80_SendMotionCommand(me, 0.0f, 0.0f, 0.0f);
 800bad4:	ed9f 8a08 	vldr	s16, [pc, #32]	; 800baf8 <md80_SetEncoderZero+0x50>
 800bad8:	eeb0 1a48 	vmov.f32	s2, s16
 800badc:	eef0 0a48 	vmov.f32	s1, s16
 800bae0:	eeb0 0a48 	vmov.f32	s0, s16
 800bae4:	4620      	mov	r0, r4
 800bae6:	f7ff ff23 	bl	800b930 <md80_SendMotionCommand>
      md80_SetTargetPosition(me, 0.0f);
 800baea:	eeb0 0a48 	vmov.f32	s0, s16
 800baee:	4620      	mov	r0, r4
 800baf0:	f7ff ffd6 	bl	800baa0 <md80_SetTargetPosition>
      ret = true;
 800baf4:	e7ea      	b.n	800bacc <md80_SetEncoderZero+0x24>
 800baf6:	bf00      	nop
 800baf8:	00000000 	.word	0x00000000

0800bafc <md80_IsEnabled>:
}
 800bafc:	f890 01ec 	ldrb.w	r0, [r0, #492]	; 0x1ec
 800bb00:	4770      	bx	lr
	...

0800bb04 <ESC_download_pre_objecthandler>:
uint32_t ESC_download_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t size,
      uint16_t flags)
{
 800bb04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb08:	b083      	sub	sp, #12
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	460d      	mov	r5, r1
 800bb0e:	4616      	mov	r6, r2
 800bb10:	461f      	mov	r7, r3
 800bb12:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   if (IS_RXPDO (index) ||
 800bb16:	f5a0 51b0 	sub.w	r1, r0, #5632	; 0x1600
 800bb1a:	b289      	uxth	r1, r1
 800bb1c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bb20:	d30d      	bcc.n	800bb3e <ESC_download_pre_objecthandler+0x3a>
       IS_TXPDO (index) ||
 800bb22:	f5a0 53d0 	sub.w	r3, r0, #6656	; 0x1a00
 800bb26:	b29b      	uxth	r3, r3
   if (IS_RXPDO (index) ||
 800bb28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb2c:	d307      	bcc.n	800bb3e <ESC_download_pre_objecthandler+0x3a>
       IS_TXPDO (index) ||
 800bb2e:	f641 4312 	movw	r3, #7186	; 0x1c12
 800bb32:	4298      	cmp	r0, r3
 800bb34:	d003      	beq.n	800bb3e <ESC_download_pre_objecthandler+0x3a>
       index == RX_PDO_OBJIDX ||
 800bb36:	f641 4313 	movw	r3, #7187	; 0x1c13
 800bb3a:	4298      	cmp	r0, r3
 800bb3c:	d102      	bne.n	800bb44 <ESC_download_pre_objecthandler+0x40>
       index == TX_PDO_OBJIDX)
   {
      uint8_t minSub = ((flags & COMPLETE_ACCESS_FLAG) == 0) ? 0 : 1;
      if (subindex > minSub && COE_maxSub (index) != 0)
 800bb3e:	ebb5 3fd8 	cmp.w	r5, r8, lsr #15
 800bb42:	d80f      	bhi.n	800bb64 <ESC_download_pre_objecthandler+0x60>
      {
         return ABORT_SUBINDEX0_NOT_ZERO;
      }
   }

   if (ESCvar.pre_object_download_hook)
 800bb44:	4b0c      	ldr	r3, [pc, #48]	; (800bb78 <ESC_download_pre_objecthandler+0x74>)
 800bb46:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 800bb4a:	f1b9 0f00 	cmp.w	r9, #0
 800bb4e:	d010      	beq.n	800bb72 <ESC_download_pre_objecthandler+0x6e>
   {
      return (ESCvar.pre_object_download_hook) (index,
 800bb50:	f8cd 8000 	str.w	r8, [sp]
 800bb54:	463b      	mov	r3, r7
 800bb56:	4632      	mov	r2, r6
 800bb58:	4629      	mov	r1, r5
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	47c8      	blx	r9
            size,
            flags);
   }

   return 0;
}
 800bb5e:	b003      	add	sp, #12
 800bb60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (subindex > minSub && COE_maxSub (index) != 0)
 800bb64:	4620      	mov	r0, r4
 800bb66:	f002 fdfd 	bl	800e764 <COE_maxSub>
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	d0ea      	beq.n	800bb44 <ESC_download_pre_objecthandler+0x40>
         return ABORT_SUBINDEX0_NOT_ZERO;
 800bb6e:	4803      	ldr	r0, [pc, #12]	; (800bb7c <ESC_download_pre_objecthandler+0x78>)
 800bb70:	e7f5      	b.n	800bb5e <ESC_download_pre_objecthandler+0x5a>
   return 0;
 800bb72:	2000      	movs	r0, #0
 800bb74:	e7f3      	b.n	800bb5e <ESC_download_pre_objecthandler+0x5a>
 800bb76:	bf00      	nop
 800bb78:	20007f34 	.word	0x20007f34
 800bb7c:	06010003 	.word	0x06010003

0800bb80 <ESC_download_post_objecthandler>:
 * @param[in] index      = index of SDO download request to handle
 * @param[in] sub-index  = sub-index of SDO download request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_download_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 800bb80:	b508      	push	{r3, lr}
   if (ESCvar.post_object_download_hook != NULL)
 800bb82:	4b03      	ldr	r3, [pc, #12]	; (800bb90 <ESC_download_post_objecthandler+0x10>)
 800bb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb86:	b10b      	cbz	r3, 800bb8c <ESC_download_post_objecthandler+0xc>
   {
      return (ESCvar.post_object_download_hook)(index, subindex, flags);
 800bb88:	4798      	blx	r3
   }

   return 0;
}
 800bb8a:	bd08      	pop	{r3, pc}
   return 0;
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	e7fc      	b.n	800bb8a <ESC_download_post_objecthandler+0xa>
 800bb90:	20007f34 	.word	0x20007f34

0800bb94 <ESC_upload_pre_objecthandler>:
uint32_t ESC_upload_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t *size,
      uint16_t flags)
{
 800bb94:	b530      	push	{r4, r5, lr}
 800bb96:	b083      	sub	sp, #12
   if (ESCvar.pre_object_upload_hook != NULL)
 800bb98:	4c05      	ldr	r4, [pc, #20]	; (800bbb0 <ESC_upload_pre_objecthandler+0x1c>)
 800bb9a:	6c64      	ldr	r4, [r4, #68]	; 0x44
 800bb9c:	b12c      	cbz	r4, 800bbaa <ESC_upload_pre_objecthandler+0x16>
   {
      return (ESCvar.pre_object_upload_hook) (index,
 800bb9e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 800bba2:	9500      	str	r5, [sp, #0]
 800bba4:	47a0      	blx	r4
            size,
            flags);
   }

   return 0;
}
 800bba6:	b003      	add	sp, #12
 800bba8:	bd30      	pop	{r4, r5, pc}
   return 0;
 800bbaa:	2000      	movs	r0, #0
 800bbac:	e7fb      	b.n	800bba6 <ESC_upload_pre_objecthandler+0x12>
 800bbae:	bf00      	nop
 800bbb0:	20007f34 	.word	0x20007f34

0800bbb4 <ESC_upload_post_objecthandler>:
 * @param[in] index      = index of SDO upload request to handle
 * @param[in] sub-index  = sub-index of SDO upload request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_upload_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 800bbb4:	b508      	push	{r3, lr}
   if (ESCvar.post_object_upload_hook != NULL)
 800bbb6:	4b03      	ldr	r3, [pc, #12]	; (800bbc4 <ESC_upload_post_objecthandler+0x10>)
 800bbb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbba:	b10b      	cbz	r3, 800bbc0 <ESC_upload_post_objecthandler+0xc>
   {
      return (ESCvar.post_object_upload_hook)(index, subindex, flags);
 800bbbc:	4798      	blx	r3
   }

   return 0;
}
 800bbbe:	bd08      	pop	{r3, pc}
   return 0;
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	e7fc      	b.n	800bbbe <ESC_upload_post_objecthandler+0xa>
 800bbc4:	20007f34 	.word	0x20007f34

0800bbc8 <APP_safeoutput>:

/** Hook called from the slave stack ESC_stopoutputs to act on state changes
 * forcing us to stop outputs. Here we can set them to a safe state.
 */
void APP_safeoutput (void)
{
 800bbc8:	b508      	push	{r3, lr}
   DPRINT ("APP_safeoutput\n");

   if(ESCvar.safeoutput_override != NULL)
 800bbca:	4b02      	ldr	r3, [pc, #8]	; (800bbd4 <APP_safeoutput+0xc>)
 800bbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbce:	b103      	cbz	r3, 800bbd2 <APP_safeoutput+0xa>
   {
      (ESCvar.safeoutput_override)();
 800bbd0:	4798      	blx	r3
   }
}
 800bbd2:	bd08      	pop	{r3, pc}
 800bbd4:	20007f34 	.word	0x20007f34

0800bbd8 <TXPDO_update>:

/** Write local process data to Sync Manager 3, Master Inputs.
 */
void TXPDO_update (void)
{
 800bbd8:	b538      	push	{r3, r4, r5, lr}
	//TODO TOUCH HERE
   if(ESCvar.txpdo_override != NULL)
 800bbda:	4b0a      	ldr	r3, [pc, #40]	; (800bc04 <TXPDO_update+0x2c>)
 800bbdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbde:	b10b      	cbz	r3, 800bbe4 <TXPDO_update+0xc>
   {
      (ESCvar.txpdo_override)();
 800bbe0:	4798      	blx	r3
      {
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
      }
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
   }
}
 800bbe2:	bd38      	pop	{r3, r4, r5, pc}
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
 800bbe4:	4d07      	ldr	r5, [pc, #28]	; (800bc04 <TXPDO_update+0x2c>)
 800bbe6:	4c08      	ldr	r4, [pc, #32]	; (800bc08 <TXPDO_update+0x30>)
 800bbe8:	4a08      	ldr	r2, [pc, #32]	; (800bc0c <TXPDO_update+0x34>)
 800bbea:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f002 fd44 	bl	800e67c <COE_pdoPack>
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
 800bbf4:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800bbfe:	f002 ff79 	bl	800eaf4 <ESC_write>
}
 800bc02:	e7ee      	b.n	800bbe2 <TXPDO_update+0xa>
 800bc04:	20007f34 	.word	0x20007f34
 800bc08:	20009428 	.word	0x20009428
 800bc0c:	20008e64 	.word	0x20008e64

0800bc10 <RXPDO_update>:

/** Read Sync Manager 2 to local process data, Master Outputs.
 */
void RXPDO_update (void)
{
 800bc10:	b538      	push	{r3, r4, r5, lr}
   if(ESCvar.rxpdo_override != NULL)
 800bc12:	4b0a      	ldr	r3, [pc, #40]	; (800bc3c <RXPDO_update+0x2c>)
 800bc14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc16:	b10b      	cbz	r3, 800bc1c <RXPDO_update+0xc>
   {
      (ESCvar.rxpdo_override)();
 800bc18:	4798      	blx	r3
      if (MAX_MAPPINGS_SM2 > 0)
      {
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
      }
   }
}
 800bc1a:	bd38      	pop	{r3, r4, r5, pc}
      ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 800bc1c:	4d07      	ldr	r5, [pc, #28]	; (800bc3c <RXPDO_update+0x2c>)
 800bc1e:	4c08      	ldr	r4, [pc, #32]	; (800bc40 <RXPDO_update+0x30>)
 800bc20:	f8b5 2078 	ldrh.w	r2, [r5, #120]	; 0x78
 800bc24:	4621      	mov	r1, r4
 800bc26:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800bc2a:	f002 ff27 	bl	800ea7c <ESC_read>
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
 800bc2e:	4a05      	ldr	r2, [pc, #20]	; (800bc44 <RXPDO_update+0x34>)
 800bc30:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800bc34:	4620      	mov	r0, r4
 800bc36:	f002 fd5d 	bl	800e6f4 <COE_pdoUnpack>
}
 800bc3a:	e7ee      	b.n	800bc1a <RXPDO_update+0xa>
 800bc3c:	20007f34 	.word	0x20007f34
 800bc40:	20009228 	.word	0x20009228
 800bc44:	20008c24 	.word	0x20008c24

0800bc48 <DIG_process>:
/* Function to update local I/O, call read ethercat outputs, call
 * write ethercat inputs. Implement watch-dog counter to count-out if we have
 * made state change affecting the App.state.
 */
void DIG_process (uint8_t flags)
{
 800bc48:	b510      	push	{r4, lr}
 800bc4a:	4604      	mov	r4, r0
   /* Handle watchdog */
   if((flags & DIG_PROCESS_WD_FLAG) > 0)
 800bc4c:	f010 0f04 	tst.w	r0, #4
 800bc50:	d10d      	bne.n	800bc6e <DIG_process+0x26>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
      }
   }

   /* Handle Outputs */
   if ((flags & DIG_PROCESS_OUTPUTS_FLAG) > 0)
 800bc52:	f014 0f02 	tst.w	r4, #2
 800bc56:	d14e      	bne.n	800bcf6 <DIG_process+0xae>
         ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
      }
   }

   /* Call application */
   if ((flags & DIG_PROCESS_APP_HOOK_FLAG) > 0)
 800bc58:	f014 0f08 	tst.w	r4, #8
 800bc5c:	d003      	beq.n	800bc66 <DIG_process+0x1e>
   {
      /* Call application callback if set */
      if (ESCvar.application_hook != NULL)
 800bc5e:	4b43      	ldr	r3, [pc, #268]	; (800bd6c <DIG_process+0x124>)
 800bc60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc62:	b103      	cbz	r3, 800bc66 <DIG_process+0x1e>
      {
         (ESCvar.application_hook)();
 800bc64:	4798      	blx	r3
      }
   }

   /* Handle Inputs */
   if ((flags & DIG_PROCESS_INPUTS_FLAG) > 0)
 800bc66:	f014 0f01 	tst.w	r4, #1
 800bc6a:	d171      	bne.n	800bd50 <DIG_process+0x108>
         /* Update inputs */
         cb_get_inputs();
         TXPDO_update();
      }
   }
}
 800bc6c:	bd10      	pop	{r4, pc}
      if (CC_ATOMIC_GET(watchdog) > 0)
 800bc6e:	f3bf 8f5b 	dmb	ish
 800bc72:	4b3f      	ldr	r3, [pc, #252]	; (800bd70 <DIG_process+0x128>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f3bf 8f5b 	dmb	ish
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	dd0b      	ble.n	800bc96 <DIG_process+0x4e>
         CC_ATOMIC_SUB(watchdog, 1);
 800bc7e:	4b3c      	ldr	r3, [pc, #240]	; (800bd70 <DIG_process+0x128>)
 800bc80:	f3bf 8f5b 	dmb	ish
 800bc84:	e853 1f00 	ldrex	r1, [r3]
 800bc88:	3901      	subs	r1, #1
 800bc8a:	e843 1200 	strex	r2, r1, [r3]
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	d1f8      	bne.n	800bc84 <DIG_process+0x3c>
 800bc92:	f3bf 8f5b 	dmb	ish
      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 800bc96:	f3bf 8f5b 	dmb	ish
 800bc9a:	4b35      	ldr	r3, [pc, #212]	; (800bd70 <DIG_process+0x128>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f3bf 8f5b 	dmb	ish
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	dd13      	ble.n	800bcce <DIG_process+0x86>
      else if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) == 0))
 800bca6:	f3bf 8f5b 	dmb	ish
 800bcaa:	4b30      	ldr	r3, [pc, #192]	; (800bd6c <DIG_process+0x124>)
 800bcac:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800bcb0:	f3bf 8f5b 	dmb	ish
 800bcb4:	f013 0f02 	tst.w	r3, #2
 800bcb8:	d1cb      	bne.n	800bc52 <DIG_process+0xa>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 800bcba:	4b2c      	ldr	r3, [pc, #176]	; (800bd6c <DIG_process+0x124>)
 800bcbc:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800bcc0:	f3bf 8f5b 	dmb	ish
 800bcc4:	4b2a      	ldr	r3, [pc, #168]	; (800bd70 <DIG_process+0x128>)
 800bcc6:	601a      	str	r2, [r3, #0]
 800bcc8:	f3bf 8f5b 	dmb	ish
 800bccc:	e7c1      	b.n	800bc52 <DIG_process+0xa>
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800bcce:	f3bf 8f5b 	dmb	ish
 800bcd2:	4b26      	ldr	r3, [pc, #152]	; (800bd6c <DIG_process+0x124>)
 800bcd4:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800bcd8:	f3bf 8f5b 	dmb	ish
      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 800bcdc:	f013 0f02 	tst.w	r3, #2
 800bce0:	d0e1      	beq.n	800bca6 <DIG_process+0x5e>
           (ESCvar.ESC_SM2_sml > 0))
 800bce2:	4b22      	ldr	r3, [pc, #136]	; (800bd6c <DIG_process+0x124>)
 800bce4:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d0dc      	beq.n	800bca6 <DIG_process+0x5e>
         ESC_ALstatusgotoerror((ESCsafeop | ESCerror), ALERR_WATCHDOG);
 800bcec:	211b      	movs	r1, #27
 800bcee:	2014      	movs	r0, #20
 800bcf0:	f000 fe02 	bl	800c8f8 <ESC_ALstatusgotoerror>
 800bcf4:	e7ad      	b.n	800bc52 <DIG_process+0xa>
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800bcf6:	f3bf 8f5b 	dmb	ish
 800bcfa:	4b1c      	ldr	r3, [pc, #112]	; (800bd6c <DIG_process+0x124>)
 800bcfc:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800bd00:	f3bf 8f5b 	dmb	ish
 800bd04:	f013 0f02 	tst.w	r3, #2
 800bd08:	d005      	beq.n	800bd16 <DIG_process+0xce>
         (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
 800bd0a:	4b18      	ldr	r3, [pc, #96]	; (800bd6c <DIG_process+0x124>)
 800bd0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800bd10:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800bd14:	d10e      	bne.n	800bd34 <DIG_process+0xec>
      else if (ESCvar.ALevent & ESCREG_ALEVENT_SM2)
 800bd16:	4b15      	ldr	r3, [pc, #84]	; (800bd6c <DIG_process+0x124>)
 800bd18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bd1c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800bd20:	d09a      	beq.n	800bc58 <DIG_process+0x10>
         ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 800bd22:	4b12      	ldr	r3, [pc, #72]	; (800bd6c <DIG_process+0x124>)
 800bd24:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 800bd28:	4912      	ldr	r1, [pc, #72]	; (800bd74 <DIG_process+0x12c>)
 800bd2a:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800bd2e:	f002 fea5 	bl	800ea7c <ESC_read>
 800bd32:	e791      	b.n	800bc58 <DIG_process+0x10>
         RXPDO_update();
 800bd34:	f7ff ff6c 	bl	800bc10 <RXPDO_update>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 800bd38:	4b0c      	ldr	r3, [pc, #48]	; (800bd6c <DIG_process+0x124>)
 800bd3a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800bd3e:	f3bf 8f5b 	dmb	ish
 800bd42:	4b0b      	ldr	r3, [pc, #44]	; (800bd70 <DIG_process+0x128>)
 800bd44:	601a      	str	r2, [r3, #0]
 800bd46:	f3bf 8f5b 	dmb	ish
         cb_set_outputs();
 800bd4a:	f004 fb9c 	bl	8010486 <cb_set_outputs>
 800bd4e:	e783      	b.n	800bc58 <DIG_process+0x10>
      if(CC_ATOMIC_GET(ESCvar.App.state) > 0)
 800bd50:	f3bf 8f5b 	dmb	ish
 800bd54:	4b05      	ldr	r3, [pc, #20]	; (800bd6c <DIG_process+0x124>)
 800bd56:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800bd5a:	f3bf 8f5b 	dmb	ish
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d084      	beq.n	800bc6c <DIG_process+0x24>
         cb_get_inputs();
 800bd62:	f004 fb8f 	bl	8010484 <cb_get_inputs>
         TXPDO_update();
 800bd66:	f7ff ff37 	bl	800bbd8 <TXPDO_update>
}
 800bd6a:	e77f      	b.n	800bc6c <DIG_process+0x24>
 800bd6c:	20007f34 	.word	0x20007f34
 800bd70:	20009628 	.word	0x20009628
 800bd74:	20009228 	.word	0x20009228

0800bd78 <ecat_slv_poll>:
 * Polling function. It should be called periodically for an application 
 * when only SM2/DC interrupt is active.
 * Read and handle events for the EtherCAT state, status, mailbox and eeprom.
 */
void ecat_slv_poll (void)
{
 800bd78:	b510      	push	{r4, lr}

   /* Read local time from ESC*/
   sendMessage(ETHCat,1,0);
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	4608      	mov	r0, r1
 800bd80:	f7f4 fea6 	bl	8000ad0 <sendMessage>
   ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 800bd84:	4c18      	ldr	r4, [pc, #96]	; (800bde8 <ecat_slv_poll+0x70>)
 800bd86:	2204      	movs	r2, #4
 800bd88:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 800bd8c:	f44f 6011 	mov.w	r0, #2320	; 0x910
 800bd90:	f002 fe74 	bl	800ea7c <ESC_read>
   ESCvar.Time = etohl (ESCvar.Time);
 800bd94:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800bd98:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   sendMessage(ETHCat,1,1);
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	4611      	mov	r1, r2
 800bda0:	4610      	mov	r0, r2
 800bda2:	f7f4 fe95 	bl	8000ad0 <sendMessage>

   //cdc_printf("poll %u, %u %u\n", ESCvar.Time, (uint32_t)(reader>>32)  , (uint32_t)(reader&0xffffffff ));
   /* Check the state machine */
   ESC_state();
 800bda6:	f000 fe6f 	bl	800ca88 <ESC_state>
   sendMessage(ETHCat,1,2);
 800bdaa:	2202      	movs	r2, #2
 800bdac:	2101      	movs	r1, #1
 800bdae:	4608      	mov	r0, r1
 800bdb0:	f7f4 fe8e 	bl	8000ad0 <sendMessage>
   /* Check the SM activation event */
   ESC_sm_act_event();
 800bdb4:	f000 fdde 	bl	800c974 <ESC_sm_act_event>
   sendMessage(ETHCat,1,3);
 800bdb8:	2203      	movs	r2, #3
 800bdba:	2101      	movs	r1, #1
 800bdbc:	4608      	mov	r0, r1
 800bdbe:	f7f4 fe87 	bl	8000ad0 <sendMessage>
   /* Check mailboxes */
   if (ESC_mbxprocess())
 800bdc2:	f000 fb2d 	bl	800c420 <ESC_mbxprocess>
 800bdc6:	b920      	cbnz	r0, 800bdd2 <ecat_slv_poll+0x5a>
#if USE_EOE
   ESC_eoeprocess_tx();
#endif

   /* Call emulated eeprom handler if set */
   if (ESCvar.esc_hw_eep_handler != NULL)
 800bdc8:	4b07      	ldr	r3, [pc, #28]	; (800bde8 <ecat_slv_poll+0x70>)
 800bdca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdcc:	b103      	cbz	r3, 800bdd0 <ecat_slv_poll+0x58>
   {
      (ESCvar.esc_hw_eep_handler)();
 800bdce:	4798      	blx	r3
   }

}
 800bdd0:	bd10      	pop	{r4, pc}
	   sendMessage(ETHCat,1,5);
 800bdd2:	2205      	movs	r2, #5
 800bdd4:	2101      	movs	r1, #1
 800bdd6:	4608      	mov	r0, r1
 800bdd8:	f7f4 fe7a 	bl	8000ad0 <sendMessage>
      ESC_coeprocess();
 800bddc:	f002 fb70 	bl	800e4c0 <ESC_coeprocess>
      ESC_xoeprocess();
 800bde0:	f000 fc3a 	bl	800c658 <ESC_xoeprocess>
 800bde4:	e7f0      	b.n	800bdc8 <ecat_slv_poll+0x50>
 800bde6:	bf00      	nop
 800bde8:	20007f34 	.word	0x20007f34

0800bdec <ecat_slv>:

/*
 * Poll all events in a free-run application
 */
void ecat_slv (void)
{
 800bdec:	b508      	push	{r3, lr}
   ecat_slv_poll();
 800bdee:	f7ff ffc3 	bl	800bd78 <ecat_slv_poll>
   DIG_process(DIG_PROCESS_WD_FLAG | DIG_PROCESS_OUTPUTS_FLAG |
 800bdf2:	200f      	movs	r0, #15
 800bdf4:	f7ff ff28 	bl	800bc48 <DIG_process>
         DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
}
 800bdf8:	bd08      	pop	{r3, pc}
	...

0800bdfc <ecat_slv_init>:

/*
 * Initialize the slave stack.
 */
void ecat_slv_init (esc_cfg_t * config)
{
 800bdfc:	b510      	push	{r4, lr}
 800bdfe:	4604      	mov	r4, r0
   DPRINT ("Slave stack init started\n\n");

   /* Init watchdog */
   watchdog = config->watchdog_cnt;
 800be00:	6882      	ldr	r2, [r0, #8]
 800be02:	4b11      	ldr	r3, [pc, #68]	; (800be48 <ecat_slv_init+0x4c>)
 800be04:	601a      	str	r2, [r3, #0]

   /* Call stack configuration */
   ESC_config (config);
 800be06:	f001 f813 	bl	800ce30 <ESC_config>
   /* Call HW init */
   ESC_init (config);
 800be0a:	4620      	mov	r0, r4
 800be0c:	f002 feae 	bl	800eb6c <ESC_init>

   /*  wait until ESC is started up */
   while ((ESCvar.DLstatus & 0x0001) == 0)
 800be10:	e005      	b.n	800be1e <ecat_slv_init+0x22>
   {
      ESC_read (ESCREG_DLSTATUS, (void *) &ESCvar.DLstatus,
 800be12:	2202      	movs	r2, #2
 800be14:	490d      	ldr	r1, [pc, #52]	; (800be4c <ecat_slv_init+0x50>)
 800be16:	f44f 7088 	mov.w	r0, #272	; 0x110
 800be1a:	f002 fe2f 	bl	800ea7c <ESC_read>
   while ((ESCvar.DLstatus & 0x0001) == 0)
 800be1e:	4b0c      	ldr	r3, [pc, #48]	; (800be50 <ecat_slv_init+0x54>)
 800be20:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800be24:	f013 0f01 	tst.w	r3, #1
 800be28:	d0f3      	beq.n	800be12 <ecat_slv_init+0x16>
   /* Init EoE */
   EOE_init ();
#endif

   /* reset ESC to init state */
   ESC_ALstatus (ESCinit);
 800be2a:	2001      	movs	r0, #1
 800be2c:	f000 f86e 	bl	800bf0c <ESC_ALstatus>
   ESC_ALerror (ALERR_NONE);
 800be30:	2000      	movs	r0, #0
 800be32:	f000 f837 	bl	800bea4 <ESC_ALerror>
   ESC_stopmbx ();
 800be36:	f000 f9cd 	bl	800c1d4 <ESC_stopmbx>
   ESC_stopinput ();
 800be3a:	f000 fd0d 	bl	800c858 <ESC_stopinput>
   ESC_stopoutput ();
 800be3e:	f000 fd45 	bl	800c8cc <ESC_stopoutput>
   /* Init Object Dictionary default values */
   COE_initDefaultValues ();
 800be42:	f002 fbe5 	bl	800e610 <COE_initDefaultValues>
}
 800be46:	bd10      	pop	{r4, pc}
 800be48:	20009628 	.word	0x20009628
 800be4c:	20007fba 	.word	0x20007fba
 800be50:	20007f34 	.word	0x20007f34

0800be54 <ESC_check_id_request>:
   }
}

static bool ESC_check_id_request (uint16_t ALcontrol, uint8_t * an)
{
   if ((ALcontrol & ESCREG_AL_ID_REQUEST) != 0)
 800be54:	f010 0f20 	tst.w	r0, #32
 800be58:	d01f      	beq.n	800be9a <ESC_check_id_request+0x46>
   {
      uint8_t state = ALcontrol & ESCREG_AL_ERRACKMASK;
 800be5a:	b2c3      	uxtb	r3, r0
 800be5c:	f000 000f 	and.w	r0, r0, #15

      if ((state != ESCboot) &&
 800be60:	2803      	cmp	r0, #3
 800be62:	d01c      	beq.n	800be9e <ESC_check_id_request+0x4a>
 800be64:	f013 0f0c 	tst.w	r3, #12
 800be68:	d006      	beq.n	800be78 <ESC_check_id_request+0x24>
          ((state < ESCsafeop) || (*an == ESCsafeop) || (*an == ESCop)))
 800be6a:	780b      	ldrb	r3, [r1, #0]
 800be6c:	2b04      	cmp	r3, #4
 800be6e:	d003      	beq.n	800be78 <ESC_check_id_request+0x24>
 800be70:	2b08      	cmp	r3, #8
 800be72:	d001      	beq.n	800be78 <ESC_check_id_request+0x24>

         return (ALstatuscode == ALERR_NONE);
      }
   }

   return false;
 800be74:	2000      	movs	r0, #0
}
 800be76:	4770      	bx	lr
{
 800be78:	b500      	push	{lr}
 800be7a:	b083      	sub	sp, #12
         ESC_read (ESCREG_ALERROR,
 800be7c:	2202      	movs	r2, #2
 800be7e:	f10d 0106 	add.w	r1, sp, #6
 800be82:	f44f 709a 	mov.w	r0, #308	; 0x134
 800be86:	f002 fdf9 	bl	800ea7c <ESC_read>
         return (ALstatuscode == ALERR_NONE);
 800be8a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800be8e:	fab0 f080 	clz	r0, r0
 800be92:	0940      	lsrs	r0, r0, #5
}
 800be94:	b003      	add	sp, #12
 800be96:	f85d fb04 	ldr.w	pc, [sp], #4
   return false;
 800be9a:	2000      	movs	r0, #0
 800be9c:	4770      	bx	lr
 800be9e:	2000      	movs	r0, #0
 800bea0:	4770      	bx	lr
	...

0800bea4 <ESC_ALerror>:
{
 800bea4:	b500      	push	{lr}
 800bea6:	b083      	sub	sp, #12
   ESCvar.ALerror = errornumber;
 800bea8:	4b07      	ldr	r3, [pc, #28]	; (800bec8 <ESC_ALerror+0x24>)
 800beaa:	f8a3 0084 	strh.w	r0, [r3, #132]	; 0x84
   dummy = htoes (errornumber);
 800beae:	f8ad 0006 	strh.w	r0, [sp, #6]
   ESC_write (ESCREG_ALERROR, &dummy, sizeof (dummy));
 800beb2:	2202      	movs	r2, #2
 800beb4:	f10d 0106 	add.w	r1, sp, #6
 800beb8:	f44f 709a 	mov.w	r0, #308	; 0x134
 800bebc:	f002 fe1a 	bl	800eaf4 <ESC_write>
}
 800bec0:	b003      	add	sp, #12
 800bec2:	f85d fb04 	ldr.w	pc, [sp], #4
 800bec6:	bf00      	nop
 800bec8:	20007f34 	.word	0x20007f34

0800becc <ESC_load_device_id>:

static uint8_t ESC_load_device_id (void)
{
 800becc:	b500      	push	{lr}
 800bece:	b083      	sub	sp, #12
   uint16_t device_id;

   if (ESCvar.get_device_id != NULL)
 800bed0:	4b0d      	ldr	r3, [pc, #52]	; (800bf08 <ESC_load_device_id+0x3c>)
 800bed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bed4:	b16b      	cbz	r3, 800bef2 <ESC_load_device_id+0x26>
   {
      if (ESCvar.get_device_id (&device_id) != 0)
 800bed6:	f10d 0006 	add.w	r0, sp, #6
 800beda:	4798      	blx	r3
 800bedc:	b110      	cbz	r0, 800bee4 <ESC_load_device_id+0x18>
      {
         device_id = 0;
 800bede:	2300      	movs	r3, #0
 800bee0:	f8ad 3006 	strh.w	r3, [sp, #6]
      ESC_read (ESCREG_CONF_STATION_ALIAS,
                (void *)&device_id,
                sizeof (device_id));
   }

   if (device_id != 0)
 800bee4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800bee8:	b950      	cbnz	r0, 800bf00 <ESC_load_device_id+0x34>
      ESC_ALerror (device_id);

      return ESCREG_AL_ID_REQUEST;
   }

   return 0;
 800beea:	2000      	movs	r0, #0
}
 800beec:	b003      	add	sp, #12
 800beee:	f85d fb04 	ldr.w	pc, [sp], #4
      ESC_read (ESCREG_CONF_STATION_ALIAS,
 800bef2:	2202      	movs	r2, #2
 800bef4:	f10d 0106 	add.w	r1, sp, #6
 800bef8:	2012      	movs	r0, #18
 800befa:	f002 fdbf 	bl	800ea7c <ESC_read>
 800befe:	e7f1      	b.n	800bee4 <ESC_load_device_id+0x18>
      ESC_ALerror (device_id);
 800bf00:	f7ff ffd0 	bl	800bea4 <ESC_ALerror>
      return ESCREG_AL_ID_REQUEST;
 800bf04:	2020      	movs	r0, #32
 800bf06:	e7f1      	b.n	800beec <ESC_load_device_id+0x20>
 800bf08:	20007f34 	.word	0x20007f34

0800bf0c <ESC_ALstatus>:
{
 800bf0c:	b500      	push	{lr}
 800bf0e:	b083      	sub	sp, #12
   ESCvar.ALstatus = status;
 800bf10:	4b07      	ldr	r3, [pc, #28]	; (800bf30 <ESC_ALstatus+0x24>)
 800bf12:	f8a3 0080 	strh.w	r0, [r3, #128]	; 0x80
   dummy = htoes ((uint16_t) status);
 800bf16:	f8ad 0006 	strh.w	r0, [sp, #6]
   ESC_write (ESCREG_ALSTATUS, &dummy, sizeof (dummy));
 800bf1a:	2202      	movs	r2, #2
 800bf1c:	f10d 0106 	add.w	r1, sp, #6
 800bf20:	f44f 7098 	mov.w	r0, #304	; 0x130
 800bf24:	f002 fde6 	bl	800eaf4 <ESC_write>
}
 800bf28:	b003      	add	sp, #12
 800bf2a:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf2e:	bf00      	nop
 800bf30:	20007f34 	.word	0x20007f34

0800bf34 <ESC_ALeventmaskwrite>:
{
 800bf34:	b500      	push	{lr}
 800bf36:	b083      	sub	sp, #12
   aleventmask = htoel(mask);
 800bf38:	9001      	str	r0, [sp, #4]
   ESC_write (ESCREG_ALEVENTMASK, &aleventmask, sizeof(aleventmask));
 800bf3a:	2204      	movs	r2, #4
 800bf3c:	eb0d 0102 	add.w	r1, sp, r2
 800bf40:	f44f 7001 	mov.w	r0, #516	; 0x204
 800bf44:	f002 fdd6 	bl	800eaf4 <ESC_write>
}
 800bf48:	b003      	add	sp, #12
 800bf4a:	f85d fb04 	ldr.w	pc, [sp], #4

0800bf4e <ESC_SMack>:
{
 800bf4e:	b500      	push	{lr}
 800bf50:	b083      	sub	sp, #12
   ESC_read ((uint16_t)(ESCREG_SM0ACTIVATE + (n << 3)), &dummy, 1);
 800bf52:	00c0      	lsls	r0, r0, #3
 800bf54:	2201      	movs	r2, #1
 800bf56:	f10d 0107 	add.w	r1, sp, #7
 800bf5a:	f600 0006 	addw	r0, r0, #2054	; 0x806
 800bf5e:	f002 fd8d 	bl	800ea7c <ESC_read>
}
 800bf62:	b003      	add	sp, #12
 800bf64:	f85d fb04 	ldr.w	pc, [sp], #4

0800bf68 <ESC_SMstatus>:
{
 800bf68:	b508      	push	{r3, lr}
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800bf6a:	f100 0317 	add.w	r3, r0, #23
 800bf6e:	4905      	ldr	r1, [pc, #20]	; (800bf84 <ESC_SMstatus+0x1c>)
 800bf70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ESC_read ((uint16_t)(ESCREG_SM0STATUS + (n << 3)), &(sm->Status), 1);
 800bf74:	00c0      	lsls	r0, r0, #3
 800bf76:	2201      	movs	r2, #1
 800bf78:	3109      	adds	r1, #9
 800bf7a:	f600 0005 	addw	r0, r0, #2053	; 0x805
 800bf7e:	f002 fd7d 	bl	800ea7c <ESC_read>
}
 800bf82:	bd08      	pop	{r3, pc}
 800bf84:	20007f34 	.word	0x20007f34

0800bf88 <ESC_SMwritepdi>:
{
 800bf88:	b508      	push	{r3, lr}
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800bf8a:	f100 0317 	add.w	r3, r0, #23
 800bf8e:	4905      	ldr	r1, [pc, #20]	; (800bfa4 <ESC_SMwritepdi+0x1c>)
 800bf90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ESC_write ((uint16_t)(ESCREG_SM0PDI + (n << 3)), &(sm->ActPDI), 1);
 800bf94:	00c0      	lsls	r0, r0, #3
 800bf96:	2201      	movs	r2, #1
 800bf98:	310b      	adds	r1, #11
 800bf9a:	f600 0007 	addw	r0, r0, #2055	; 0x807
 800bf9e:	f002 fda9 	bl	800eaf4 <ESC_write>
}
 800bfa2:	bd08      	pop	{r3, pc}
 800bfa4:	20007f34 	.word	0x20007f34

0800bfa8 <ESC_SMenable>:
{
 800bfa8:	b508      	push	{r3, lr}
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800bfaa:	f100 0217 	add.w	r2, r0, #23
 800bfae:	4b05      	ldr	r3, [pc, #20]	; (800bfc4 <ESC_SMenable+0x1c>)
 800bfb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   sm->ActPDI &= (uint8_t)~ESCREG_SMENABLE_BIT;
 800bfb4:	7ada      	ldrb	r2, [r3, #11]
 800bfb6:	f022 0201 	bic.w	r2, r2, #1
 800bfba:	72da      	strb	r2, [r3, #11]
   ESC_SMwritepdi (n);
 800bfbc:	f7ff ffe4 	bl	800bf88 <ESC_SMwritepdi>
}
 800bfc0:	bd08      	pop	{r3, pc}
 800bfc2:	bf00      	nop
 800bfc4:	20007f34 	.word	0x20007f34

0800bfc8 <ESC_SMdisable>:
{
 800bfc8:	b508      	push	{r3, lr}
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800bfca:	f100 0217 	add.w	r2, r0, #23
 800bfce:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <ESC_SMdisable+0x1c>)
 800bfd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   sm->ActPDI |= ESCREG_SMENABLE_BIT;
 800bfd4:	7ada      	ldrb	r2, [r3, #11]
 800bfd6:	f042 0201 	orr.w	r2, r2, #1
 800bfda:	72da      	strb	r2, [r3, #11]
   ESC_SMwritepdi (n);
 800bfdc:	f7ff ffd4 	bl	800bf88 <ESC_SMwritepdi>
}
 800bfe0:	bd08      	pop	{r3, pc}
 800bfe2:	bf00      	nop
 800bfe4:	20007f34 	.word	0x20007f34

0800bfe8 <ESC_address>:
{
 800bfe8:	b508      	push	{r3, lr}
   ESC_read (ESCREG_ADDRESS, (void *) &ESCvar.address, sizeof (ESCvar.address));
 800bfea:	2202      	movs	r2, #2
 800bfec:	4902      	ldr	r1, [pc, #8]	; (800bff8 <ESC_address+0x10>)
 800bfee:	2010      	movs	r0, #16
 800bff0:	f002 fd44 	bl	800ea7c <ESC_read>
}
 800bff4:	bd08      	pop	{r3, pc}
 800bff6:	bf00      	nop
 800bff8:	20007fbc 	.word	0x20007fbc

0800bffc <ESC_SYNCactivation>:
{
 800bffc:	b500      	push	{lr}
 800bffe:	b083      	sub	sp, #12
   ESC_read (ESCREG_SYNC_ACT, &activation, sizeof(activation));
 800c000:	2201      	movs	r2, #1
 800c002:	f10d 0107 	add.w	r1, sp, #7
 800c006:	f640 1081 	movw	r0, #2433	; 0x981
 800c00a:	f002 fd37 	bl	800ea7c <ESC_read>
}
 800c00e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c012:	b003      	add	sp, #12
 800c014:	f85d fb04 	ldr.w	pc, [sp], #4

0800c018 <ESC_checkDC>:
{
 800c018:	b508      	push	{r3, lr}
   uint8_t sync_act = ESC_SYNCactivation();
 800c01a:	f7ff ffef 	bl	800bffc <ESC_SYNCactivation>
   if((sync_act & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_AUTO_ACTIVATED)) > 0)
 800c01e:	f010 0f09 	tst.w	r0, #9
 800c022:	d004      	beq.n	800c02e <ESC_checkDC+0x16>
      if(ESCvar.esc_check_dc_handler != NULL)
 800c024:	4b06      	ldr	r3, [pc, #24]	; (800c040 <ESC_checkDC+0x28>)
 800c026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c028:	b143      	cbz	r3, 800c03c <ESC_checkDC+0x24>
         ret = (ESCvar.esc_check_dc_handler)();
 800c02a:	4798      	blx	r3
 800c02c:	e005      	b.n	800c03a <ESC_checkDC+0x22>
      ESCvar.dcsync = 0;
 800c02e:	4b04      	ldr	r3, [pc, #16]	; (800c040 <ESC_checkDC+0x28>)
 800c030:	2000      	movs	r0, #0
 800c032:	f883 007c 	strb.w	r0, [r3, #124]	; 0x7c
      ESCvar.synccounter = 0;
 800c036:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
}
 800c03a:	bd08      	pop	{r3, pc}
      ret = ALERR_DCINVALIDSYNCCFG;
 800c03c:	2030      	movs	r0, #48	; 0x30
 800c03e:	e7fc      	b.n	800c03a <ESC_checkDC+0x22>
 800c040:	20007f34 	.word	0x20007f34

0800c044 <ESC_checkmbx>:
{
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	4605      	mov	r5, r0
   ESC_read (ESCREG_SM0, (void *) &ESCvar.SM[0], sizeof (ESCvar.SM[0]));
 800c048:	4c2b      	ldr	r4, [pc, #172]	; (800c0f8 <ESC_checkmbx+0xb4>)
 800c04a:	2208      	movs	r2, #8
 800c04c:	4621      	mov	r1, r4
 800c04e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c052:	f002 fd13 	bl	800ea7c <ESC_read>
   ESC_read (ESCREG_SM1, (void *) &ESCvar.SM[1], sizeof (ESCvar.SM[1]));
 800c056:	2208      	movs	r2, #8
 800c058:	18a1      	adds	r1, r4, r2
 800c05a:	f640 0008 	movw	r0, #2056	; 0x808
 800c05e:	f002 fd0d 	bl	800ea7c <ESC_read>
   if ((etohs (SM->PSA) != ESC_MBX0_sma) || (etohs (SM->Length) != ESC_MBX0_sml)
 800c062:	f834 19bc 	ldrh.w	r1, [r4], #-188
 800c066:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c068:	881a      	ldrh	r2, [r3, #0]
 800c06a:	4291      	cmp	r1, r2
 800c06c:	d12c      	bne.n	800c0c8 <ESC_checkmbx+0x84>
 800c06e:	4a23      	ldr	r2, [pc, #140]	; (800c0fc <ESC_checkmbx+0xb8>)
 800c070:	f8b2 10be 	ldrh.w	r1, [r2, #190]	; 0xbe
 800c074:	885a      	ldrh	r2, [r3, #2]
 800c076:	4291      	cmp	r1, r2
 800c078:	d126      	bne.n	800c0c8 <ESC_checkmbx+0x84>
       || (SM->Command != ESC_MBX0_smc) || (ESCvar.SM[0].ECsm == 0))
 800c07a:	4a20      	ldr	r2, [pc, #128]	; (800c0fc <ESC_checkmbx+0xb8>)
 800c07c:	f892 20c0 	ldrb.w	r2, [r2, #192]	; 0xc0
 800c080:	799b      	ldrb	r3, [r3, #6]
 800c082:	429a      	cmp	r2, r3
 800c084:	d120      	bne.n	800c0c8 <ESC_checkmbx+0x84>
 800c086:	4b1d      	ldr	r3, [pc, #116]	; (800c0fc <ESC_checkmbx+0xb8>)
 800c088:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800c08c:	f013 0f01 	tst.w	r3, #1
 800c090:	d01a      	beq.n	800c0c8 <ESC_checkmbx+0x84>
   if ((etohs (SM->PSA) != ESC_MBX1_sma) || (etohs (SM->Length) != ESC_MBX1_sml)
 800c092:	4b1a      	ldr	r3, [pc, #104]	; (800c0fc <ESC_checkmbx+0xb8>)
 800c094:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
 800c098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c09a:	881a      	ldrh	r2, [r3, #0]
 800c09c:	4291      	cmp	r1, r2
 800c09e:	d11f      	bne.n	800c0e0 <ESC_checkmbx+0x9c>
 800c0a0:	4a16      	ldr	r2, [pc, #88]	; (800c0fc <ESC_checkmbx+0xb8>)
 800c0a2:	f8b2 10c6 	ldrh.w	r1, [r2, #198]	; 0xc6
 800c0a6:	885a      	ldrh	r2, [r3, #2]
 800c0a8:	4291      	cmp	r1, r2
 800c0aa:	d119      	bne.n	800c0e0 <ESC_checkmbx+0x9c>
       || (SM->Command != ESC_MBX1_smc) || (ESCvar.SM[1].ECsm == 0))
 800c0ac:	4a13      	ldr	r2, [pc, #76]	; (800c0fc <ESC_checkmbx+0xb8>)
 800c0ae:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
 800c0b2:	799b      	ldrb	r3, [r3, #6]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d113      	bne.n	800c0e0 <ESC_checkmbx+0x9c>
 800c0b8:	4b10      	ldr	r3, [pc, #64]	; (800c0fc <ESC_checkmbx+0xb8>)
 800c0ba:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 800c0be:	f013 0f01 	tst.w	r3, #1
 800c0c2:	d00d      	beq.n	800c0e0 <ESC_checkmbx+0x9c>
   return state;
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	e00a      	b.n	800c0de <ESC_checkmbx+0x9a>
      ESCvar.SMtestresult = SMRESULT_ERRSM0;
 800c0c8:	2401      	movs	r4, #1
 800c0ca:	4b0c      	ldr	r3, [pc, #48]	; (800c0fc <ESC_checkmbx+0xb8>)
 800c0cc:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
      ESC_SMdisable (0);
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	f7ff ff79 	bl	800bfc8 <ESC_SMdisable>
      ESC_SMdisable (1);
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f7ff ff76 	bl	800bfc8 <ESC_SMdisable>
      return (uint8_t) (ESCinit | ESCerror);      //fail state change
 800c0dc:	2011      	movs	r0, #17
}
 800c0de:	bd38      	pop	{r3, r4, r5, pc}
      ESCvar.SMtestresult = SMRESULT_ERRSM1;
 800c0e0:	4b06      	ldr	r3, [pc, #24]	; (800c0fc <ESC_checkmbx+0xb8>)
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      ESC_SMdisable (0);
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	f7ff ff6d 	bl	800bfc8 <ESC_SMdisable>
      ESC_SMdisable (1);
 800c0ee:	2001      	movs	r0, #1
 800c0f0:	f7ff ff6a 	bl	800bfc8 <ESC_SMdisable>
      return ESCinit | ESCerror;        //fail state change
 800c0f4:	2011      	movs	r0, #17
 800c0f6:	e7f2      	b.n	800c0de <ESC_checkmbx+0x9a>
 800c0f8:	20007ff0 	.word	0x20007ff0
 800c0fc:	20007f34 	.word	0x20007f34

0800c100 <ESC_startmbx>:
{
 800c100:	b510      	push	{r4, lr}
 800c102:	4604      	mov	r4, r0
   ESCvar.activembxsize = MBXSIZE;
 800c104:	4b17      	ldr	r3, [pc, #92]	; (800c164 <ESC_startmbx+0x64>)
 800c106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c10a:	66da      	str	r2, [r3, #108]	; 0x6c
   ESCvar.activemb0 = &ESCvar.mb[0];
 800c10c:	1d1a      	adds	r2, r3, #4
 800c10e:	671a      	str	r2, [r3, #112]	; 0x70
   ESCvar.activemb1 = &ESCvar.mb[1];
 800c110:	f103 020c 	add.w	r2, r3, #12
 800c114:	675a      	str	r2, [r3, #116]	; 0x74
   ESC_SMenable (0);
 800c116:	2000      	movs	r0, #0
 800c118:	f7ff ff46 	bl	800bfa8 <ESC_SMenable>
   ESC_SMenable (1);
 800c11c:	2001      	movs	r0, #1
 800c11e:	f7ff ff43 	bl	800bfa8 <ESC_SMenable>
   ESC_SMstatus (0);
 800c122:	2000      	movs	r0, #0
 800c124:	f7ff ff20 	bl	800bf68 <ESC_SMstatus>
   ESC_SMstatus (1);
 800c128:	2001      	movs	r0, #1
 800c12a:	f7ff ff1d 	bl	800bf68 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 800c12e:	4620      	mov	r0, r4
 800c130:	f7ff ff88 	bl	800c044 <ESC_checkmbx>
 800c134:	4604      	mov	r4, r0
 800c136:	f010 0f10 	tst.w	r0, #16
 800c13a:	d10b      	bne.n	800c154 <ESC_startmbx+0x54>
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 800c13c:	4b09      	ldr	r3, [pc, #36]	; (800c164 <ESC_startmbx+0x64>)
 800c13e:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
 800c142:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800c146:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      ESCvar.MBXrun = 1;
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800c150:	4620      	mov	r0, r4
 800c152:	bd10      	pop	{r4, pc}
      ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 800c154:	2016      	movs	r0, #22
 800c156:	f7ff fea5 	bl	800bea4 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 800c15a:	4b02      	ldr	r3, [pc, #8]	; (800c164 <ESC_startmbx+0x64>)
 800c15c:	2200      	movs	r2, #0
 800c15e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c162:	e7f5      	b.n	800c150 <ESC_startmbx+0x50>
 800c164:	20007f34 	.word	0x20007f34

0800c168 <ESC_startmbxboot>:
{
 800c168:	b510      	push	{r4, lr}
 800c16a:	4604      	mov	r4, r0
   ESCvar.activembxsize = MBXSIZEBOOT;
 800c16c:	4b18      	ldr	r3, [pc, #96]	; (800c1d0 <ESC_startmbxboot+0x68>)
 800c16e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c172:	66da      	str	r2, [r3, #108]	; 0x6c
   ESCvar.activemb0 = &ESCvar.mbboot[0];
 800c174:	f103 0214 	add.w	r2, r3, #20
 800c178:	671a      	str	r2, [r3, #112]	; 0x70
   ESCvar.activemb1 = &ESCvar.mbboot[1];
 800c17a:	f103 021c 	add.w	r2, r3, #28
 800c17e:	675a      	str	r2, [r3, #116]	; 0x74
   ESC_SMenable (0);
 800c180:	2000      	movs	r0, #0
 800c182:	f7ff ff11 	bl	800bfa8 <ESC_SMenable>
   ESC_SMenable (1);
 800c186:	2001      	movs	r0, #1
 800c188:	f7ff ff0e 	bl	800bfa8 <ESC_SMenable>
   ESC_SMstatus (0);
 800c18c:	2000      	movs	r0, #0
 800c18e:	f7ff feeb 	bl	800bf68 <ESC_SMstatus>
   ESC_SMstatus (1);
 800c192:	2001      	movs	r0, #1
 800c194:	f7ff fee8 	bl	800bf68 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 800c198:	4620      	mov	r0, r4
 800c19a:	f7ff ff53 	bl	800c044 <ESC_checkmbx>
 800c19e:	4604      	mov	r4, r0
 800c1a0:	f010 0f10 	tst.w	r0, #16
 800c1a4:	d10b      	bne.n	800c1be <ESC_startmbxboot+0x56>
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 800c1a6:	4b0a      	ldr	r3, [pc, #40]	; (800c1d0 <ESC_startmbxboot+0x68>)
 800c1a8:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
 800c1ac:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800c1b0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      ESCvar.MBXrun = 1;
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	bd10      	pop	{r4, pc}
      ESC_ALerror (ALERR_INVALIDBOOTMBXCONFIG);
 800c1be:	2015      	movs	r0, #21
 800c1c0:	f7ff fe70 	bl	800bea4 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 800c1c4:	4b02      	ldr	r3, [pc, #8]	; (800c1d0 <ESC_startmbxboot+0x68>)
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c1cc:	e7f5      	b.n	800c1ba <ESC_startmbxboot+0x52>
 800c1ce:	bf00      	nop
 800c1d0:	20007f34 	.word	0x20007f34

0800c1d4 <ESC_stopmbx>:
{
 800c1d4:	b510      	push	{r4, lr}
   ESCvar.MBXrun = 0;
 800c1d6:	2400      	movs	r4, #0
 800c1d8:	4b17      	ldr	r3, [pc, #92]	; (800c238 <ESC_stopmbx+0x64>)
 800c1da:	f883 4068 	strb.w	r4, [r3, #104]	; 0x68
   ESC_SMdisable (0);
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f7ff fef2 	bl	800bfc8 <ESC_SMdisable>
   ESC_SMdisable (1);
 800c1e4:	2001      	movs	r0, #1
 800c1e6:	f7ff feef 	bl	800bfc8 <ESC_SMdisable>
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	e004      	b.n	800c1f8 <ESC_stopmbx+0x24>
      MBXcontrol[n].state = MBXstate_idle;
 800c1ee:	4b13      	ldr	r3, [pc, #76]	; (800c23c <ESC_stopmbx+0x68>)
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	541a      	strb	r2, [r3, r0]
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 800c1f4:	3001      	adds	r0, #1
 800c1f6:	b2c0      	uxtb	r0, r0
 800c1f8:	2802      	cmp	r0, #2
 800c1fa:	d9f8      	bls.n	800c1ee <ESC_stopmbx+0x1a>
   ESCvar.mbxoutpost = 0;
 800c1fc:	4b0e      	ldr	r3, [pc, #56]	; (800c238 <ESC_stopmbx+0x64>)
 800c1fe:	2200      	movs	r2, #0
 800c200:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
   ESCvar.mbxbackup = 0;
 800c204:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
   ESCvar.xoe = 0;
 800c208:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   ESCvar.mbxfree = 1;
 800c20c:	2101      	movs	r1, #1
 800c20e:	f883 1090 	strb.w	r1, [r3, #144]	; 0x90
   ESCvar.toggle = 0;
 800c212:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
   ESCvar.mbxincnt = 0;
 800c216:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
   ESCvar.segmented = 0;
 800c21a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
   ESCvar.frags = 0;
 800c21e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   ESCvar.fragsleft = 0;
 800c222:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   ESCvar.txcue = 0;
 800c226:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
   ESCvar.index = 0;
 800c22a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
   ESCvar.subindex = 0;
 800c22e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
   ESCvar.flags = 0;
 800c232:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 800c236:	bd10      	pop	{r4, pc}
 800c238:	20007f34 	.word	0x20007f34
 800c23c:	20008c20 	.word	0x20008c20

0800c240 <ESC_readmbx>:
{
 800c240:	b530      	push	{r4, r5, lr}
 800c242:	b083      	sub	sp, #12
   ESC_read (ESC_MBX0_sma, MB, ESC_MBXHSIZE);
 800c244:	4c17      	ldr	r4, [pc, #92]	; (800c2a4 <ESC_readmbx+0x64>)
 800c246:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c248:	4d17      	ldr	r5, [pc, #92]	; (800c2a8 <ESC_readmbx+0x68>)
 800c24a:	2206      	movs	r2, #6
 800c24c:	4629      	mov	r1, r5
 800c24e:	8818      	ldrh	r0, [r3, #0]
 800c250:	f002 fc14 	bl	800ea7c <ESC_read>
   length = etohs (MB->header.length);
 800c254:	882b      	ldrh	r3, [r5, #0]
 800c256:	b298      	uxth	r0, r3
 800c258:	f8ad 3006 	strh.w	r3, [sp, #6]
   if (length > (ESC_MBX0_sml - ESC_MBXHSIZE))
 800c25c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c25e:	8853      	ldrh	r3, [r2, #2]
 800c260:	1f99      	subs	r1, r3, #6
 800c262:	4288      	cmp	r0, r1
 800c264:	d901      	bls.n	800c26a <ESC_readmbx+0x2a>
      length = (uint16_t)(ESC_MBX0_sml - ESC_MBXHSIZE);
 800c266:	f8ad 1006 	strh.w	r1, [sp, #6]
   ESC_read ((uint16_t)(ESC_MBX0_sma + ESC_MBXHSIZE), MB->b, length);
 800c26a:	8810      	ldrh	r0, [r2, #0]
 800c26c:	3006      	adds	r0, #6
 800c26e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c272:	490e      	ldr	r1, [pc, #56]	; (800c2ac <ESC_readmbx+0x6c>)
 800c274:	b280      	uxth	r0, r0
 800c276:	f002 fc01 	bl	800ea7c <ESC_read>
   if (length + ESC_MBXHSIZE < ESC_MBX0_sml)
 800c27a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c27e:	3306      	adds	r3, #6
 800c280:	4a08      	ldr	r2, [pc, #32]	; (800c2a4 <ESC_readmbx+0x64>)
 800c282:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800c284:	8842      	ldrh	r2, [r0, #2]
 800c286:	4293      	cmp	r3, r2
 800c288:	d304      	bcc.n	800c294 <ESC_readmbx+0x54>
   MBXcontrol[0].state = MBXstate_inclaim;
 800c28a:	4b09      	ldr	r3, [pc, #36]	; (800c2b0 <ESC_readmbx+0x70>)
 800c28c:	2201      	movs	r2, #1
 800c28e:	701a      	strb	r2, [r3, #0]
}
 800c290:	b003      	add	sp, #12
 800c292:	bd30      	pop	{r4, r5, pc}
      ESC_read (ESC_MBX0_sme, &length, 1);
 800c294:	2201      	movs	r2, #1
 800c296:	f10d 0106 	add.w	r1, sp, #6
 800c29a:	8880      	ldrh	r0, [r0, #4]
 800c29c:	f002 fbee 	bl	800ea7c <ESC_read>
 800c2a0:	e7f3      	b.n	800c28a <ESC_readmbx+0x4a>
 800c2a2:	bf00      	nop
 800c2a4:	20007f34 	.word	0x20007f34
 800c2a8:	20008620 	.word	0x20008620
 800c2ac:	20008626 	.word	0x20008626
 800c2b0:	20008c20 	.word	0x20008c20

0800c2b4 <ESC_writembx>:
{
 800c2b4:	b510      	push	{r4, lr}
 800c2b6:	b082      	sub	sp, #8
   _MBXh *MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 800c2b8:	4a13      	ldr	r2, [pc, #76]	; (800c308 <ESC_writembx+0x54>)
 800c2ba:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 800c2bc:	fb03 f000 	mul.w	r0, r3, r0
 800c2c0:	4b12      	ldr	r3, [pc, #72]	; (800c30c <ESC_writembx+0x58>)
 800c2c2:	18c1      	adds	r1, r0, r3
   uint8_t dummy = 0;
 800c2c4:	2400      	movs	r4, #0
 800c2c6:	f88d 4007 	strb.w	r4, [sp, #7]
   length = etohs (MBh->length);
 800c2ca:	5a1b      	ldrh	r3, [r3, r0]
   if (length > (ESC_MBX1_sml - ESC_MBXHSIZE))
 800c2cc:	6f50      	ldr	r0, [r2, #116]	; 0x74
 800c2ce:	8842      	ldrh	r2, [r0, #2]
 800c2d0:	1f94      	subs	r4, r2, #6
 800c2d2:	42a3      	cmp	r3, r4
 800c2d4:	d900      	bls.n	800c2d8 <ESC_writembx+0x24>
      length = (uint16_t)(ESC_MBX1_sml - ESC_MBXHSIZE);
 800c2d6:	b2a3      	uxth	r3, r4
   ESC_write (ESC_MBX1_sma, MBh, (uint16_t)(ESC_MBXHSIZE + length));
 800c2d8:	1d9c      	adds	r4, r3, #6
 800c2da:	b2a2      	uxth	r2, r4
 800c2dc:	8800      	ldrh	r0, [r0, #0]
 800c2de:	f002 fc09 	bl	800eaf4 <ESC_write>
   if (length + ESC_MBXHSIZE < ESC_MBX1_sml)
 800c2e2:	4b09      	ldr	r3, [pc, #36]	; (800c308 <ESC_writembx+0x54>)
 800c2e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2e6:	885a      	ldrh	r2, [r3, #2]
 800c2e8:	4294      	cmp	r4, r2
 800c2ea:	d305      	bcc.n	800c2f8 <ESC_writembx+0x44>
   ESCvar.mbxfree = 0;
 800c2ec:	4b06      	ldr	r3, [pc, #24]	; (800c308 <ESC_writembx+0x54>)
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 800c2f4:	b002      	add	sp, #8
 800c2f6:	bd10      	pop	{r4, pc}
      ESC_write (ESC_MBX1_sme, &dummy, 1);
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	f10d 0107 	add.w	r1, sp, #7
 800c2fe:	8898      	ldrh	r0, [r3, #4]
 800c300:	f002 fbf8 	bl	800eaf4 <ESC_write>
 800c304:	e7f2      	b.n	800c2ec <ESC_writembx+0x38>
 800c306:	bf00      	nop
 800c308:	20007f34 	.word	0x20007f34
 800c30c:	20008620 	.word	0x20008620

0800c310 <ESC_ackmbxread>:
{
 800c310:	b510      	push	{r4, lr}
 800c312:	b082      	sub	sp, #8
   uint8_t dummy = 0;
 800c314:	2300      	movs	r3, #0
 800c316:	f88d 3007 	strb.w	r3, [sp, #7]
   ESC_write (ESC_MBX1_sma, &dummy, 1);
 800c31a:	4c06      	ldr	r4, [pc, #24]	; (800c334 <ESC_ackmbxread+0x24>)
 800c31c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c31e:	2201      	movs	r2, #1
 800c320:	f10d 0107 	add.w	r1, sp, #7
 800c324:	8818      	ldrh	r0, [r3, #0]
 800c326:	f002 fbe5 	bl	800eaf4 <ESC_write>
   ESCvar.mbxfree = 1;
 800c32a:	2301      	movs	r3, #1
 800c32c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800c330:	b002      	add	sp, #8
 800c332:	bd10      	pop	{r4, pc}
 800c334:	20007f34 	.word	0x20007f34

0800c338 <ESC_claimbuffer>:
   uint8_t n = ESC_MBXBUFFERS - 1;
 800c338:	2002      	movs	r0, #2
   while ((n > 0) && (MBXcontrol[n].state))
 800c33a:	e001      	b.n	800c340 <ESC_claimbuffer+0x8>
      n--;
 800c33c:	3801      	subs	r0, #1
 800c33e:	b2c0      	uxtb	r0, r0
   while ((n > 0) && (MBXcontrol[n].state))
 800c340:	b118      	cbz	r0, 800c34a <ESC_claimbuffer+0x12>
 800c342:	4b1a      	ldr	r3, [pc, #104]	; (800c3ac <ESC_claimbuffer+0x74>)
 800c344:	5c1b      	ldrb	r3, [r3, r0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1f8      	bne.n	800c33c <ESC_claimbuffer+0x4>
   if (n)
 800c34a:	b368      	cbz	r0, 800c3a8 <ESC_claimbuffer+0x70>
      MBXcontrol[n].state = MBXstate_outclaim;
 800c34c:	4b17      	ldr	r3, [pc, #92]	; (800c3ac <ESC_claimbuffer+0x74>)
 800c34e:	2202      	movs	r2, #2
 800c350:	541a      	strb	r2, [r3, r0]
      MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 800c352:	4917      	ldr	r1, [pc, #92]	; (800c3b0 <ESC_claimbuffer+0x78>)
 800c354:	6eca      	ldr	r2, [r1, #108]	; 0x6c
 800c356:	4b17      	ldr	r3, [pc, #92]	; (800c3b4 <ESC_claimbuffer+0x7c>)
 800c358:	fb02 3300 	mla	r3, r2, r0, r3
      ESCvar.mbxcnt++;
 800c35c:	f891 208a 	ldrb.w	r2, [r1, #138]	; 0x8a
 800c360:	3201      	adds	r2, #1
 800c362:	b2d2      	uxtb	r2, r2
 800c364:	f881 208a 	strb.w	r2, [r1, #138]	; 0x8a
      ESCvar.mbxcnt = (ESCvar.mbxcnt & 0x07);
 800c368:	f002 0207 	and.w	r2, r2, #7
 800c36c:	f881 208a 	strb.w	r2, [r1, #138]	; 0x8a
      if (ESCvar.mbxcnt == 0)
 800c370:	b91a      	cbnz	r2, 800c37a <ESC_claimbuffer+0x42>
         ESCvar.mbxcnt = 1;
 800c372:	460a      	mov	r2, r1
 800c374:	2101      	movs	r1, #1
 800c376:	f882 108a 	strb.w	r1, [r2, #138]	; 0x8a
      MBh->address = htoes (0x0000);      // destination is master
 800c37a:	2200      	movs	r2, #0
 800c37c:	709a      	strb	r2, [r3, #2]
 800c37e:	70da      	strb	r2, [r3, #3]
      MBh->channel = 0;
 800c380:	7919      	ldrb	r1, [r3, #4]
 800c382:	f362 0105 	bfi	r1, r2, #0, #6
 800c386:	7119      	strb	r1, [r3, #4]
      MBh->priority = 0;
 800c388:	b2c9      	uxtb	r1, r1
 800c38a:	f362 1187 	bfi	r1, r2, #6, #2
 800c38e:	7119      	strb	r1, [r3, #4]
      MBh->mbxcnt = ESCvar.mbxcnt & 0xFU;
 800c390:	4a07      	ldr	r2, [pc, #28]	; (800c3b0 <ESC_claimbuffer+0x78>)
 800c392:	f892 c08a 	ldrb.w	ip, [r2, #138]	; 0x8a
 800c396:	7959      	ldrb	r1, [r3, #5]
 800c398:	f36c 1107 	bfi	r1, ip, #4, #4
 800c39c:	7159      	strb	r1, [r3, #5]
      ESCvar.txcue++;
 800c39e:	f892 308f 	ldrb.w	r3, [r2, #143]	; 0x8f
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	f882 308f 	strb.w	r3, [r2, #143]	; 0x8f
}
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	20008c20 	.word	0x20008c20
 800c3b0:	20007f34 	.word	0x20007f34
 800c3b4:	20008620 	.word	0x20008620

0800c3b8 <ESC_outreqbuffer>:
   uint8_t n = ESC_MBXBUFFERS - 1;
 800c3b8:	2002      	movs	r0, #2
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 800c3ba:	e001      	b.n	800c3c0 <ESC_outreqbuffer+0x8>
      n--;
 800c3bc:	3801      	subs	r0, #1
 800c3be:	b2c0      	uxtb	r0, r0
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 800c3c0:	b118      	cbz	r0, 800c3ca <ESC_outreqbuffer+0x12>
 800c3c2:	4b02      	ldr	r3, [pc, #8]	; (800c3cc <ESC_outreqbuffer+0x14>)
 800c3c4:	5c1b      	ldrb	r3, [r3, r0]
 800c3c6:	2b03      	cmp	r3, #3
 800c3c8:	d1f8      	bne.n	800c3bc <ESC_outreqbuffer+0x4>
}
 800c3ca:	4770      	bx	lr
 800c3cc:	20008c20 	.word	0x20008c20

0800c3d0 <MBX_error>:
{
 800c3d0:	b510      	push	{r4, lr}
 800c3d2:	4604      	mov	r4, r0
   MBXout = ESC_claimbuffer ();
 800c3d4:	f7ff ffb0 	bl	800c338 <ESC_claimbuffer>
   if (MBXout)
 800c3d8:	b1d0      	cbz	r0, 800c410 <MBX_error+0x40>
 800c3da:	4601      	mov	r1, r0
      mbxerr = (_MBXerr *) &MBX[MBXout * ESC_MBXSIZE];
 800c3dc:	4b0d      	ldr	r3, [pc, #52]	; (800c414 <MBX_error+0x44>)
 800c3de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c3e0:	fb00 f202 	mul.w	r2, r0, r2
 800c3e4:	480c      	ldr	r0, [pc, #48]	; (800c418 <MBX_error+0x48>)
 800c3e6:	1813      	adds	r3, r2, r0
      mbxerr->mbxheader.length = htoes ((uint16_t) 0x04);
 800c3e8:	f04f 0c00 	mov.w	ip, #0
 800c3ec:	f04f 0e04 	mov.w	lr, #4
 800c3f0:	f800 e002 	strb.w	lr, [r0, r2]
 800c3f4:	f883 c001 	strb.w	ip, [r3, #1]
      mbxerr->mbxheader.mbxtype = MBXERR;
 800c3f8:	795a      	ldrb	r2, [r3, #5]
 800c3fa:	f36c 0203 	bfi	r2, ip, #0, #4
 800c3fe:	715a      	strb	r2, [r3, #5]
      mbxerr->type = htoes ((uint16_t) 0x01);
 800c400:	2201      	movs	r2, #1
 800c402:	719a      	strb	r2, [r3, #6]
 800c404:	f883 c007 	strb.w	ip, [r3, #7]
      mbxerr->detail = htoes (error);
 800c408:	811c      	strh	r4, [r3, #8]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800c40a:	4b04      	ldr	r3, [pc, #16]	; (800c41c <MBX_error+0x4c>)
 800c40c:	2203      	movs	r2, #3
 800c40e:	545a      	strb	r2, [r3, r1]
}
 800c410:	bd10      	pop	{r4, pc}
 800c412:	bf00      	nop
 800c414:	20007f34 	.word	0x20007f34
 800c418:	20008620 	.word	0x20008620
 800c41c:	20008c20 	.word	0x20008c20

0800c420 <ESC_mbxprocess>:
{
 800c420:	b510      	push	{r4, lr}
 800c422:	b082      	sub	sp, #8
   sendMessage(ETHCat,2,4,1);
 800c424:	2301      	movs	r3, #1
 800c426:	2204      	movs	r2, #4
 800c428:	2102      	movs	r1, #2
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7f4 fb50 	bl	8000ad0 <sendMessage>
   if (ESCvar.MBXrun == 0)
 800c430:	4b86      	ldr	r3, [pc, #536]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c432:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
 800c436:	2800      	cmp	r0, #0
 800c438:	d043      	beq.n	800c4c2 <ESC_mbxprocess+0xa2>
   if (ESCvar.ALevent & (ESCREG_ALEVENT_SM0 | ESCREG_ALEVENT_SM1))
 800c43a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c43e:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c442:	d140      	bne.n	800c4c6 <ESC_mbxprocess+0xa6>
   sendMessage(ETHCat,2,4,2);
 800c444:	2302      	movs	r3, #2
 800c446:	2204      	movs	r2, #4
 800c448:	4619      	mov	r1, r3
 800c44a:	2001      	movs	r0, #1
 800c44c:	f7f4 fb40 	bl	8000ad0 <sendMessage>
   if (ESCvar.mbxoutpost && (ESCvar.ALevent & ESCREG_ALEVENT_SM1))
 800c450:	4b7e      	ldr	r3, [pc, #504]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c452:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c456:	b12b      	cbz	r3, 800c464 <ESC_mbxprocess+0x44>
 800c458:	4b7c      	ldr	r3, [pc, #496]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c45a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c45e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800c462:	d137      	bne.n	800c4d4 <ESC_mbxprocess+0xb4>
   sendMessage(ETHCat,2,4,3);
 800c464:	2303      	movs	r3, #3
 800c466:	2204      	movs	r2, #4
 800c468:	2102      	movs	r1, #2
 800c46a:	2001      	movs	r0, #1
 800c46c:	f7f4 fb30 	bl	8000ad0 <sendMessage>
   if (ESCvar.SM[1].ECrep != ESCvar.toggle)
 800c470:	4a76      	ldr	r2, [pc, #472]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c472:	f892 30ca 	ldrb.w	r3, [r2, #202]	; 0xca
 800c476:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c47a:	f892 20aa 	ldrb.w	r2, [r2, #170]	; 0xaa
 800c47e:	4293      	cmp	r3, r2
 800c480:	d06d      	beq.n	800c55e <ESC_mbxprocess+0x13e>
      if (ESCvar.mbxoutpost || ESCvar.mbxbackup)
 800c482:	4b72      	ldr	r3, [pc, #456]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c484:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800c488:	b1d3      	cbz	r3, 800c4c0 <ESC_mbxprocess+0xa0>
         if (ESCvar.mbxoutpost == 0)
 800c48a:	4b70      	ldr	r3, [pc, #448]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c48c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c490:	2b00      	cmp	r3, #0
 800c492:	d153      	bne.n	800c53c <ESC_mbxprocess+0x11c>
            ESC_writembx (ESCvar.mbxbackup);
 800c494:	4b6d      	ldr	r3, [pc, #436]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c496:	f893 008d 	ldrb.w	r0, [r3, #141]	; 0x8d
 800c49a:	f7ff ff0b 	bl	800c2b4 <ESC_writembx>
         ESCvar.toggle = ESCvar.SM[1].ECrep;
 800c49e:	4b6b      	ldr	r3, [pc, #428]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c4a0:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
 800c4a4:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800c4a8:	460a      	mov	r2, r1
 800c4aa:	f883 10aa 	strb.w	r1, [r3, #170]	; 0xaa
         ESCvar.SM[1].PDIrep = ESCvar.toggle & 0x1U;
 800c4ae:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
 800c4b2:	f362 0141 	bfi	r1, r2, #1, #1
 800c4b6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
         ESC_SMwritepdi (1);
 800c4ba:	2001      	movs	r0, #1
 800c4bc:	f7ff fd64 	bl	800bf88 <ESC_SMwritepdi>
      return 0;
 800c4c0:	2000      	movs	r0, #0
}
 800c4c2:	b002      	add	sp, #8
 800c4c4:	bd10      	pop	{r4, pc}
      ESC_SMstatus (0);
 800c4c6:	2000      	movs	r0, #0
 800c4c8:	f7ff fd4e 	bl	800bf68 <ESC_SMstatus>
      ESC_SMstatus (1);
 800c4cc:	2001      	movs	r0, #1
 800c4ce:	f7ff fd4b 	bl	800bf68 <ESC_SMstatus>
 800c4d2:	e7b7      	b.n	800c444 <ESC_mbxprocess+0x24>
	   sendMessage(ETHCat,3,4,2,1);
 800c4d4:	2401      	movs	r4, #1
 800c4d6:	9400      	str	r4, [sp, #0]
 800c4d8:	2302      	movs	r3, #2
 800c4da:	2204      	movs	r2, #4
 800c4dc:	2103      	movs	r1, #3
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f7f4 faf6 	bl	8000ad0 <sendMessage>
      ESC_ackmbxread ();
 800c4e4:	f7ff ff14 	bl	800c310 <ESC_ackmbxread>
      sendMessage(ETHCat,3,4,4,2);
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	2304      	movs	r3, #4
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	2103      	movs	r1, #3
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f7f4 faec 	bl	8000ad0 <sendMessage>
      if (ESCvar.mbxbackup)
 800c4f8:	4b54      	ldr	r3, [pc, #336]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c4fa:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800c4fe:	b113      	cbz	r3, 800c506 <ESC_mbxprocess+0xe6>
         MBXcontrol[ESCvar.mbxbackup].state = MBXstate_idle;
 800c500:	4a53      	ldr	r2, [pc, #332]	; (800c650 <ESC_mbxprocess+0x230>)
 800c502:	2100      	movs	r1, #0
 800c504:	54d1      	strb	r1, [r2, r3]
      if (MBXcontrol[ESCvar.mbxoutpost].state == MBXstate_again)
 800c506:	4b51      	ldr	r3, [pc, #324]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c508:	f893 008c 	ldrb.w	r0, [r3, #140]	; 0x8c
 800c50c:	4b50      	ldr	r3, [pc, #320]	; (800c650 <ESC_mbxprocess+0x230>)
 800c50e:	5c1b      	ldrb	r3, [r3, r0]
 800c510:	2b06      	cmp	r3, #6
 800c512:	d010      	beq.n	800c536 <ESC_mbxprocess+0x116>
      MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_backup;
 800c514:	4b4d      	ldr	r3, [pc, #308]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c516:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800c51a:	494d      	ldr	r1, [pc, #308]	; (800c650 <ESC_mbxprocess+0x230>)
 800c51c:	2005      	movs	r0, #5
 800c51e:	5488      	strb	r0, [r1, r2]
      ESCvar.mbxbackup = ESCvar.mbxoutpost;
 800c520:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
      ESCvar.mbxoutpost = 0;
 800c524:	2200      	movs	r2, #0
 800c526:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      if(ESCvar.xoe > 0)
 800c52a:	f893 008e 	ldrb.w	r0, [r3, #142]	; 0x8e
 800c52e:	2800      	cmp	r0, #0
 800c530:	d0c7      	beq.n	800c4c2 <ESC_mbxprocess+0xa2>
         return 1;
 800c532:	2001      	movs	r0, #1
 800c534:	e7c5      	b.n	800c4c2 <ESC_mbxprocess+0xa2>
         ESC_writembx (ESCvar.mbxoutpost);
 800c536:	f7ff febd 	bl	800c2b4 <ESC_writembx>
 800c53a:	e7eb      	b.n	800c514 <ESC_mbxprocess+0xf4>
            ESC_SMdisable (1);
 800c53c:	2001      	movs	r0, #1
 800c53e:	f7ff fd43 	bl	800bfc8 <ESC_SMdisable>
            MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_again;
 800c542:	4c42      	ldr	r4, [pc, #264]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c544:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800c548:	4a41      	ldr	r2, [pc, #260]	; (800c650 <ESC_mbxprocess+0x230>)
 800c54a:	2106      	movs	r1, #6
 800c54c:	54d1      	strb	r1, [r2, r3]
            ESC_SMenable (1);
 800c54e:	2001      	movs	r0, #1
 800c550:	f7ff fd2a 	bl	800bfa8 <ESC_SMenable>
            ESC_writembx (ESCvar.mbxbackup);
 800c554:	f894 008d 	ldrb.w	r0, [r4, #141]	; 0x8d
 800c558:	f7ff feac 	bl	800c2b4 <ESC_writembx>
 800c55c:	e79f      	b.n	800c49e <ESC_mbxprocess+0x7e>
   sendMessage(ETHCat,2,4,4);
 800c55e:	2304      	movs	r3, #4
 800c560:	461a      	mov	r2, r3
 800c562:	2102      	movs	r1, #2
 800c564:	2001      	movs	r0, #1
 800c566:	f7f4 fab3 	bl	8000ad0 <sendMessage>
   if (ESCvar.txcue && (ESCvar.mbxfree || !ESCvar.SM[1].MBXstat))
 800c56a:	4b38      	ldr	r3, [pc, #224]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c56c:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800c570:	b16b      	cbz	r3, 800c58e <ESC_mbxprocess+0x16e>
 800c572:	4b36      	ldr	r3, [pc, #216]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c574:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c578:	b92b      	cbnz	r3, 800c586 <ESC_mbxprocess+0x166>
 800c57a:	4b34      	ldr	r3, [pc, #208]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c57c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c580:	f013 0f08 	tst.w	r3, #8
 800c584:	d103      	bne.n	800c58e <ESC_mbxprocess+0x16e>
      mbxhandle = ESC_outreqbuffer ();
 800c586:	f7ff ff17 	bl	800c3b8 <ESC_outreqbuffer>
      if (mbxhandle)
 800c58a:	4604      	mov	r4, r0
 800c58c:	b9e0      	cbnz	r0, 800c5c8 <ESC_mbxprocess+0x1a8>
   sendMessage(ETHCat,2,4,5);
 800c58e:	2305      	movs	r3, #5
 800c590:	2204      	movs	r2, #4
 800c592:	2102      	movs	r1, #2
 800c594:	2001      	movs	r0, #1
 800c596:	f7f4 fa9b 	bl	8000ad0 <sendMessage>
   if ((ESCvar.SM[0].MBXstat != 0) && (MBXcontrol[0].state == 0)
 800c59a:	4b2c      	ldr	r3, [pc, #176]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c59c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800c5a0:	f013 0f08 	tst.w	r3, #8
 800c5a4:	d008      	beq.n	800c5b8 <ESC_mbxprocess+0x198>
 800c5a6:	4b2a      	ldr	r3, [pc, #168]	; (800c650 <ESC_mbxprocess+0x230>)
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	b92b      	cbnz	r3, 800c5b8 <ESC_mbxprocess+0x198>
         && (ESCvar.mbxoutpost == 0) && (ESCvar.xoe == 0))
 800c5ac:	4b27      	ldr	r3, [pc, #156]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c5ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5b2:	f013 1fff 	tst.w	r3, #16711935	; 0xff00ff
 800c5b6:	d01b      	beq.n	800c5f0 <ESC_mbxprocess+0x1d0>
   sendMessage(ETHCat,2,4,6);
 800c5b8:	2306      	movs	r3, #6
 800c5ba:	2204      	movs	r2, #4
 800c5bc:	2102      	movs	r1, #2
 800c5be:	2001      	movs	r0, #1
 800c5c0:	f7f4 fa86 	bl	8000ad0 <sendMessage>
   return 0;
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	e77c      	b.n	800c4c2 <ESC_mbxprocess+0xa2>
         ESC_writembx (mbxhandle);
 800c5c8:	f7ff fe74 	bl	800c2b4 <ESC_writembx>
         ESC_SMstatus (1);
 800c5cc:	2001      	movs	r0, #1
 800c5ce:	f7ff fccb 	bl	800bf68 <ESC_SMstatus>
         MBXcontrol[mbxhandle].state = MBXstate_outpost;
 800c5d2:	4b1f      	ldr	r3, [pc, #124]	; (800c650 <ESC_mbxprocess+0x230>)
 800c5d4:	2204      	movs	r2, #4
 800c5d6:	551a      	strb	r2, [r3, r4]
         ESCvar.mbxoutpost = mbxhandle;
 800c5d8:	4b1c      	ldr	r3, [pc, #112]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c5da:	f883 408c 	strb.w	r4, [r3, #140]	; 0x8c
         if (ESCvar.txcue)
 800c5de:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d0d3      	beq.n	800c58e <ESC_mbxprocess+0x16e>
            ESCvar.txcue--;
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	4a18      	ldr	r2, [pc, #96]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c5ea:	f882 308f 	strb.w	r3, [r2, #143]	; 0x8f
 800c5ee:	e7ce      	b.n	800c58e <ESC_mbxprocess+0x16e>
      ESC_readmbx ();
 800c5f0:	f7ff fe26 	bl	800c240 <ESC_readmbx>
      ESCvar.SM[0].MBXstat = 0;
 800c5f4:	4b15      	ldr	r3, [pc, #84]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c5f6:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
 800c5fa:	f36f 02c3 	bfc	r2, #3, #1
 800c5fe:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
      if (etohs (MBh->length) == 0)
 800c602:	4b14      	ldr	r3, [pc, #80]	; (800c654 <ESC_mbxprocess+0x234>)
 800c604:	881b      	ldrh	r3, [r3, #0]
 800c606:	b1ab      	cbz	r3, 800c634 <ESC_mbxprocess+0x214>
      if ((MBh->mbxcnt != 0) && (MBh->mbxcnt == ESCvar.mbxincnt))
 800c608:	4b12      	ldr	r3, [pc, #72]	; (800c654 <ESC_mbxprocess+0x234>)
 800c60a:	795b      	ldrb	r3, [r3, #5]
 800c60c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800c610:	d007      	beq.n	800c622 <ESC_mbxprocess+0x202>
 800c612:	4b10      	ldr	r3, [pc, #64]	; (800c654 <ESC_mbxprocess+0x234>)
 800c614:	795a      	ldrb	r2, [r3, #5]
 800c616:	4b0d      	ldr	r3, [pc, #52]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c618:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800c61c:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 800c620:	d00f      	beq.n	800c642 <ESC_mbxprocess+0x222>
      ESCvar.mbxincnt = MBh->mbxcnt;
 800c622:	4b0c      	ldr	r3, [pc, #48]	; (800c654 <ESC_mbxprocess+0x234>)
 800c624:	795b      	ldrb	r3, [r3, #5]
 800c626:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c62a:	4a08      	ldr	r2, [pc, #32]	; (800c64c <ESC_mbxprocess+0x22c>)
 800c62c:	f882 308b 	strb.w	r3, [r2, #139]	; 0x8b
      return 1;
 800c630:	2001      	movs	r0, #1
 800c632:	e746      	b.n	800c4c2 <ESC_mbxprocess+0xa2>
         MBX_error (MBXERR_INVALIDHEADER);
 800c634:	2005      	movs	r0, #5
 800c636:	f7ff fecb 	bl	800c3d0 <MBX_error>
         MBXcontrol[0].state = MBXstate_idle;
 800c63a:	4b05      	ldr	r3, [pc, #20]	; (800c650 <ESC_mbxprocess+0x230>)
 800c63c:	2200      	movs	r2, #0
 800c63e:	701a      	strb	r2, [r3, #0]
 800c640:	e7e2      	b.n	800c608 <ESC_mbxprocess+0x1e8>
         MBXcontrol[0].state = MBXstate_idle;
 800c642:	4b03      	ldr	r3, [pc, #12]	; (800c650 <ESC_mbxprocess+0x230>)
 800c644:	2200      	movs	r2, #0
 800c646:	701a      	strb	r2, [r3, #0]
 800c648:	e7eb      	b.n	800c622 <ESC_mbxprocess+0x202>
 800c64a:	bf00      	nop
 800c64c:	20007f34 	.word	0x20007f34
 800c650:	20008c20 	.word	0x20008c20
 800c654:	20008620 	.word	0x20008620

0800c658 <ESC_xoeprocess>:
{
 800c658:	b508      	push	{r3, lr}
   if (ESCvar.MBXrun == 0)
 800c65a:	4b10      	ldr	r3, [pc, #64]	; (800c69c <ESC_xoeprocess+0x44>)
 800c65c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c660:	b13b      	cbz	r3, 800c672 <ESC_xoeprocess+0x1a>
   if ((ESCvar.xoe == 0) && (MBXcontrol[0].state == MBXstate_inclaim))
 800c662:	4b0e      	ldr	r3, [pc, #56]	; (800c69c <ESC_xoeprocess+0x44>)
 800c664:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800c668:	b91b      	cbnz	r3, 800c672 <ESC_xoeprocess+0x1a>
 800c66a:	4b0d      	ldr	r3, [pc, #52]	; (800c6a0 <ESC_xoeprocess+0x48>)
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d000      	beq.n	800c674 <ESC_xoeprocess+0x1c>
}
 800c672:	bd08      	pop	{r3, pc}
      if ((mbh->mbxtype == 0) || (etohs (mbh->length) == 0))
 800c674:	4b0b      	ldr	r3, [pc, #44]	; (800c6a4 <ESC_xoeprocess+0x4c>)
 800c676:	795b      	ldrb	r3, [r3, #5]
 800c678:	f013 0f0f 	tst.w	r3, #15
 800c67c:	d002      	beq.n	800c684 <ESC_xoeprocess+0x2c>
 800c67e:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <ESC_xoeprocess+0x4c>)
 800c680:	881b      	ldrh	r3, [r3, #0]
 800c682:	b933      	cbnz	r3, 800c692 <ESC_xoeprocess+0x3a>
         MBX_error (MBXERR_INVALIDHEADER);
 800c684:	2005      	movs	r0, #5
 800c686:	f7ff fea3 	bl	800c3d0 <MBX_error>
      MBXcontrol[0].state = MBXstate_idle;
 800c68a:	4b05      	ldr	r3, [pc, #20]	; (800c6a0 <ESC_xoeprocess+0x48>)
 800c68c:	2200      	movs	r2, #0
 800c68e:	701a      	strb	r2, [r3, #0]
 800c690:	e7ef      	b.n	800c672 <ESC_xoeprocess+0x1a>
         MBX_error (MBXERR_UNSUPPORTEDPROTOCOL);
 800c692:	2002      	movs	r0, #2
 800c694:	f7ff fe9c 	bl	800c3d0 <MBX_error>
 800c698:	e7f7      	b.n	800c68a <ESC_xoeprocess+0x32>
 800c69a:	bf00      	nop
 800c69c:	20007f34 	.word	0x20007f34
 800c6a0:	20008c20 	.word	0x20008c20
 800c6a4:	20008620 	.word	0x20008620

0800c6a8 <ESC_checkSM23>:
{
 800c6a8:	b538      	push	{r3, r4, r5, lr}
 800c6aa:	4605      	mov	r5, r0
   ESC_read (ESCREG_SM2, (void *) &ESCvar.SM[2], sizeof (ESCvar.SM[2]));
 800c6ac:	4c38      	ldr	r4, [pc, #224]	; (800c790 <ESC_checkSM23+0xe8>)
 800c6ae:	2208      	movs	r2, #8
 800c6b0:	4621      	mov	r1, r4
 800c6b2:	f44f 6001 	mov.w	r0, #2064	; 0x810
 800c6b6:	f002 f9e1 	bl	800ea7c <ESC_read>
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 800c6ba:	8823      	ldrh	r3, [r4, #0]
 800c6bc:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 800c6c0:	d139      	bne.n	800c736 <ESC_checkSM23+0x8e>
       (SM->Command != ESC_SM2_smc))
 800c6c2:	f1a4 03cc 	sub.w	r3, r4, #204	; 0xcc
 800c6c6:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 800c6ca:	2b24      	cmp	r3, #36	; 0x24
 800c6cc:	d133      	bne.n	800c736 <ESC_checkSM23+0x8e>
   else if (etohs (SM->Length) != ESCvar.ESC_SM2_sml)
 800c6ce:	4a31      	ldr	r2, [pc, #196]	; (800c794 <ESC_checkSM23+0xec>)
 800c6d0:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
 800c6d4:	f8b2 2078 	ldrh.w	r2, [r2, #120]	; 0x78
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d132      	bne.n	800c742 <ESC_checkSM23+0x9a>
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800c6dc:	492d      	ldr	r1, [pc, #180]	; (800c794 <ESC_checkSM23+0xec>)
 800c6de:	f891 10d2 	ldrb.w	r1, [r1, #210]	; 0xd2
   else if (((ESC_SM2_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 800c6e2:	f011 0f01 	tst.w	r1, #1
 800c6e6:	d100      	bne.n	800c6ea <ESC_checkSM23+0x42>
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800c6e8:	bb8a      	cbnz	r2, 800c74e <ESC_checkSM23+0xa6>
   if ((ESC_SM2_sma + (etohs (SM->Length) * 3)) > ESC_SM3_sma)
 800c6ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c6ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6f2:	dc32      	bgt.n	800c75a <ESC_checkSM23+0xb2>
   ESC_read (ESCREG_SM3, (void *) &ESCvar.SM[3], sizeof (ESCvar.SM[3]));
 800c6f4:	4c28      	ldr	r4, [pc, #160]	; (800c798 <ESC_checkSM23+0xf0>)
 800c6f6:	2208      	movs	r2, #8
 800c6f8:	4621      	mov	r1, r4
 800c6fa:	f640 0018 	movw	r0, #2072	; 0x818
 800c6fe:	f002 f9bd 	bl	800ea7c <ESC_read>
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 800c702:	8823      	ldrh	r3, [r4, #0]
 800c704:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 800c708:	d12d      	bne.n	800c766 <ESC_checkSM23+0xbe>
       (SM->Command != ESC_SM3_smc))
 800c70a:	f1a4 03d4 	sub.w	r3, r4, #212	; 0xd4
 800c70e:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 800c712:	2b20      	cmp	r3, #32
 800c714:	d127      	bne.n	800c766 <ESC_checkSM23+0xbe>
   else if (etohs (SM->Length) != ESCvar.ESC_SM3_sml)
 800c716:	4b1f      	ldr	r3, [pc, #124]	; (800c794 <ESC_checkSM23+0xec>)
 800c718:	f8b3 20d6 	ldrh.w	r2, [r3, #214]	; 0xd6
 800c71c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800c720:	429a      	cmp	r2, r3
 800c722:	d126      	bne.n	800c772 <ESC_checkSM23+0xca>
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800c724:	4a1b      	ldr	r2, [pc, #108]	; (800c794 <ESC_checkSM23+0xec>)
 800c726:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
   else if (((ESC_SM3_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 800c72a:	f012 0f01 	tst.w	r2, #1
 800c72e:	d12c      	bne.n	800c78a <ESC_checkSM23+0xe2>
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800c730:	bb2b      	cbnz	r3, 800c77e <ESC_checkSM23+0xd6>
   return state;
 800c732:	4628      	mov	r0, r5
 800c734:	e004      	b.n	800c740 <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800c736:	4b17      	ldr	r3, [pc, #92]	; (800c794 <ESC_checkSM23+0xec>)
 800c738:	2204      	movs	r2, #4
 800c73a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c73e:	2012      	movs	r0, #18
}
 800c740:	bd38      	pop	{r3, r4, r5, pc}
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800c742:	4b14      	ldr	r3, [pc, #80]	; (800c794 <ESC_checkSM23+0xec>)
 800c744:	2204      	movs	r2, #4
 800c746:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c74a:	2012      	movs	r0, #18
 800c74c:	e7f8      	b.n	800c740 <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800c74e:	4b11      	ldr	r3, [pc, #68]	; (800c794 <ESC_checkSM23+0xec>)
 800c750:	2204      	movs	r2, #4
 800c752:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c756:	2012      	movs	r0, #18
 800c758:	e7f2      	b.n	800c740 <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800c75a:	4b0e      	ldr	r3, [pc, #56]	; (800c794 <ESC_checkSM23+0xec>)
 800c75c:	2204      	movs	r2, #4
 800c75e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c762:	2012      	movs	r0, #18
 800c764:	e7ec      	b.n	800c740 <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800c766:	4b0b      	ldr	r3, [pc, #44]	; (800c794 <ESC_checkSM23+0xec>)
 800c768:	2208      	movs	r2, #8
 800c76a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c76e:	2012      	movs	r0, #18
 800c770:	e7e6      	b.n	800c740 <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800c772:	4b08      	ldr	r3, [pc, #32]	; (800c794 <ESC_checkSM23+0xec>)
 800c774:	2208      	movs	r2, #8
 800c776:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c77a:	2012      	movs	r0, #18
 800c77c:	e7e0      	b.n	800c740 <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800c77e:	4b05      	ldr	r3, [pc, #20]	; (800c794 <ESC_checkSM23+0xec>)
 800c780:	2208      	movs	r2, #8
 800c782:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c786:	2012      	movs	r0, #18
 800c788:	e7da      	b.n	800c740 <ESC_checkSM23+0x98>
   return state;
 800c78a:	4628      	mov	r0, r5
 800c78c:	e7d8      	b.n	800c740 <ESC_checkSM23+0x98>
 800c78e:	bf00      	nop
 800c790:	20008000 	.word	0x20008000
 800c794:	20007f34 	.word	0x20007f34
 800c798:	20008008 	.word	0x20008008

0800c79c <ESC_startinput>:
{
 800c79c:	b510      	push	{r4, lr}
   state = ESC_checkSM23 (state);
 800c79e:	f7ff ff83 	bl	800c6a8 <ESC_checkSM23>
 800c7a2:	4604      	mov	r4, r0
   if (state != (ESCpreop | ESCerror))
 800c7a4:	2812      	cmp	r0, #18
 800c7a6:	d015      	beq.n	800c7d4 <ESC_startinput+0x38>
      if (ESCvar.ESC_SM3_sml > 0)
 800c7a8:	4b29      	ldr	r3, [pc, #164]	; (800c850 <ESC_startinput+0xb4>)
 800c7aa:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800c7ae:	b96b      	cbnz	r3, 800c7cc <ESC_startinput+0x30>
      CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_INPUT);
 800c7b0:	f3bf 8f5b 	dmb	ish
 800c7b4:	4b27      	ldr	r3, [pc, #156]	; (800c854 <ESC_startinput+0xb8>)
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	701a      	strb	r2, [r3, #0]
 800c7ba:	f3bf 8f5b 	dmb	ish
   if (ESCvar.use_interrupt == 0)
 800c7be:	4b24      	ldr	r3, [pc, #144]	; (800c850 <ESC_startinput+0xb4>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	b10b      	cbz	r3, 800c7c8 <ESC_startinput+0x2c>
   if (state != (ESCpreop | ESCerror))
 800c7c4:	2c12      	cmp	r4, #18
 800c7c6:	d119      	bne.n	800c7fc <ESC_startinput+0x60>
}
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	bd10      	pop	{r4, pc}
         ESC_SMenable (3);
 800c7cc:	2003      	movs	r0, #3
 800c7ce:	f7ff fbeb 	bl	800bfa8 <ESC_SMenable>
 800c7d2:	e7ed      	b.n	800c7b0 <ESC_startinput+0x14>
      ESC_SMdisable (2);
 800c7d4:	2002      	movs	r0, #2
 800c7d6:	f7ff fbf7 	bl	800bfc8 <ESC_SMdisable>
      ESC_SMdisable (3);
 800c7da:	2003      	movs	r0, #3
 800c7dc:	f7ff fbf4 	bl	800bfc8 <ESC_SMdisable>
      if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 800c7e0:	4b1b      	ldr	r3, [pc, #108]	; (800c850 <ESC_startinput+0xb4>)
 800c7e2:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800c7e6:	f013 0f08 	tst.w	r3, #8
 800c7ea:	d003      	beq.n	800c7f4 <ESC_startinput+0x58>
         ESC_ALerror (ALERR_INVALIDINPUTSM);
 800c7ec:	201e      	movs	r0, #30
 800c7ee:	f7ff fb59 	bl	800bea4 <ESC_ALerror>
 800c7f2:	e7e4      	b.n	800c7be <ESC_startinput+0x22>
         ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800c7f4:	201d      	movs	r0, #29
 800c7f6:	f7ff fb55 	bl	800bea4 <ESC_ALerror>
 800c7fa:	e7e0      	b.n	800c7be <ESC_startinput+0x22>
      dc_check_result = ESC_checkDC();
 800c7fc:	f7ff fc0c 	bl	800c018 <ESC_checkDC>
      if(dc_check_result > 0)
 800c800:	b988      	cbnz	r0, 800c826 <ESC_startinput+0x8a>
         if (ESCvar.esc_hw_interrupt_enable != NULL)
 800c802:	4b13      	ldr	r3, [pc, #76]	; (800c850 <ESC_startinput+0xb4>)
 800c804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c806:	2b00      	cmp	r3, #0
 800c808:	d0de      	beq.n	800c7c8 <ESC_startinput+0x2c>
            if (ESCvar.ESC_SM2_sml == 0)
 800c80a:	4a11      	ldr	r2, [pc, #68]	; (800c850 <ESC_startinput+0xb4>)
 800c80c:	f8b2 2078 	ldrh.w	r2, [r2, #120]	; 0x78
 800c810:	b9d2      	cbnz	r2, 800c848 <ESC_startinput+0xac>
               int_mask = ESCREG_ALEVENT_SM3;
 800c812:	f44f 6000 	mov.w	r0, #2048	; 0x800
            if (ESCvar.dcsync > 0)
 800c816:	4a0e      	ldr	r2, [pc, #56]	; (800c850 <ESC_startinput+0xb4>)
 800c818:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 800c81c:	b10a      	cbz	r2, 800c822 <ESC_startinput+0x86>
               int_mask |= ESCREG_ALEVENT_DC_SYNC0;
 800c81e:	f040 0004 	orr.w	r0, r0, #4
            ESCvar.esc_hw_interrupt_enable (int_mask);
 800c822:	4798      	blx	r3
 800c824:	e7d0      	b.n	800c7c8 <ESC_startinput+0x2c>
         ESC_ALerror (dc_check_result);
 800c826:	f7ff fb3d 	bl	800bea4 <ESC_ALerror>
         ESC_SMdisable (2);
 800c82a:	2002      	movs	r0, #2
 800c82c:	f7ff fbcc 	bl	800bfc8 <ESC_SMdisable>
         ESC_SMdisable (3);
 800c830:	2003      	movs	r0, #3
 800c832:	f7ff fbc9 	bl	800bfc8 <ESC_SMdisable>
         CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 800c836:	f3bf 8f5b 	dmb	ish
 800c83a:	4b06      	ldr	r3, [pc, #24]	; (800c854 <ESC_startinput+0xb8>)
 800c83c:	2200      	movs	r2, #0
 800c83e:	701a      	strb	r2, [r3, #0]
 800c840:	f3bf 8f5b 	dmb	ish
         state = (ESCpreop | ESCerror);
 800c844:	2412      	movs	r4, #18
 800c846:	e7bf      	b.n	800c7c8 <ESC_startinput+0x2c>
               int_mask = ESCREG_ALEVENT_SM2;
 800c848:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c84c:	e7e3      	b.n	800c816 <ESC_startinput+0x7a>
 800c84e:	bf00      	nop
 800c850:	20007f34 	.word	0x20007f34
 800c854:	2000801d 	.word	0x2000801d

0800c858 <ESC_stopinput>:
{
 800c858:	b510      	push	{r4, lr}
   CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 800c85a:	4c0c      	ldr	r4, [pc, #48]	; (800c88c <ESC_stopinput+0x34>)
 800c85c:	f3bf 8f5b 	dmb	ish
 800c860:	2300      	movs	r3, #0
 800c862:	7023      	strb	r3, [r4, #0]
 800c864:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (3);
 800c868:	2003      	movs	r0, #3
 800c86a:	f7ff fbad 	bl	800bfc8 <ESC_SMdisable>
   ESC_SMdisable (2);
 800c86e:	2002      	movs	r0, #2
 800c870:	f7ff fbaa 	bl	800bfc8 <ESC_SMdisable>
   if ((ESCvar.use_interrupt != 0) &&
 800c874:	f854 3ce9 	ldr.w	r3, [r4, #-233]
 800c878:	b133      	cbz	r3, 800c888 <ESC_stopinput+0x30>
         (ESCvar.esc_hw_interrupt_disable != NULL))
 800c87a:	f1a4 03e9 	sub.w	r3, r4, #233	; 0xe9
 800c87e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   if ((ESCvar.use_interrupt != 0) &&
 800c880:	b113      	cbz	r3, 800c888 <ESC_stopinput+0x30>
      ESCvar.esc_hw_interrupt_disable (ESCREG_ALEVENT_DC_SYNC0 |
 800c882:	f640 4004 	movw	r0, #3076	; 0xc04
 800c886:	4798      	blx	r3
}
 800c888:	bd10      	pop	{r4, pc}
 800c88a:	bf00      	nop
 800c88c:	2000801d 	.word	0x2000801d

0800c890 <ESC_startoutput>:
{
 800c890:	b510      	push	{r4, lr}
 800c892:	4604      	mov	r4, r0
   if (ESCvar.ESC_SM2_sml > 0)
 800c894:	4b0b      	ldr	r3, [pc, #44]	; (800c8c4 <ESC_startoutput+0x34>)
 800c896:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800c89a:	b973      	cbnz	r3, 800c8ba <ESC_startoutput+0x2a>
   CC_ATOMIC_OR(ESCvar.App.state, APPSTATE_OUTPUT);
 800c89c:	4b0a      	ldr	r3, [pc, #40]	; (800c8c8 <ESC_startoutput+0x38>)
 800c89e:	f3bf 8f5b 	dmb	ish
 800c8a2:	e8d3 1f4f 	ldrexb	r1, [r3]
 800c8a6:	f041 0102 	orr.w	r1, r1, #2
 800c8aa:	e8c3 1f42 	strexb	r2, r1, [r3]
 800c8ae:	2a00      	cmp	r2, #0
 800c8b0:	d1f7      	bne.n	800c8a2 <ESC_startoutput+0x12>
 800c8b2:	f3bf 8f5b 	dmb	ish
}
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	bd10      	pop	{r4, pc}
      ESC_SMenable (2);
 800c8ba:	2002      	movs	r0, #2
 800c8bc:	f7ff fb74 	bl	800bfa8 <ESC_SMenable>
 800c8c0:	e7ec      	b.n	800c89c <ESC_startoutput+0xc>
 800c8c2:	bf00      	nop
 800c8c4:	20007f34 	.word	0x20007f34
 800c8c8:	2000801d 	.word	0x2000801d

0800c8cc <ESC_stopoutput>:
{
 800c8cc:	b508      	push	{r3, lr}
   CC_ATOMIC_AND(ESCvar.App.state, APPSTATE_INPUT);
 800c8ce:	4b09      	ldr	r3, [pc, #36]	; (800c8f4 <ESC_stopoutput+0x28>)
 800c8d0:	f3bf 8f5b 	dmb	ish
 800c8d4:	e8d3 1f4f 	ldrexb	r1, [r3]
 800c8d8:	f001 0101 	and.w	r1, r1, #1
 800c8dc:	e8c3 1f42 	strexb	r2, r1, [r3]
 800c8e0:	2a00      	cmp	r2, #0
 800c8e2:	d1f7      	bne.n	800c8d4 <ESC_stopoutput+0x8>
 800c8e4:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (2);
 800c8e8:	2002      	movs	r0, #2
 800c8ea:	f7ff fb6d 	bl	800bfc8 <ESC_SMdisable>
   APP_safeoutput ();
 800c8ee:	f7ff f96b 	bl	800bbc8 <APP_safeoutput>
}
 800c8f2:	bd08      	pop	{r3, pc}
 800c8f4:	2000801d 	.word	0x2000801d

0800c8f8 <ESC_ALstatusgotoerror>:
   if(status & ESCop)
 800c8f8:	f010 0f08 	tst.w	r0, #8
 800c8fc:	d135      	bne.n	800c96a <ESC_ALstatusgotoerror+0x72>
{
 800c8fe:	b530      	push	{r4, r5, lr}
 800c900:	b083      	sub	sp, #12
 800c902:	4604      	mov	r4, r0
 800c904:	460d      	mov	r5, r1
   as = ESCvar.ALstatus & ESCREG_AL_ERRACKMASK;
 800c906:	4a19      	ldr	r2, [pc, #100]	; (800c96c <ESC_ALstatusgotoerror+0x74>)
 800c908:	f8b2 3080 	ldrh.w	r3, [r2, #128]	; 0x80
 800c90c:	f003 030f 	and.w	r3, r3, #15
 800c910:	f88d 3006 	strb.w	r3, [sp, #6]
   an = as;
 800c914:	f88d 3007 	strb.w	r3, [sp, #7]
   as = (uint8_t)(((status & ESCREG_AL_ERRACKMASK) << 4) | (as & 0x0f));
 800c918:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800c91c:	f88d 3006 	strb.w	r3, [sp, #6]
   if (ESCvar.pre_state_change_hook != NULL)
 800c920:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c922:	b123      	cbz	r3, 800c92e <ESC_ALstatusgotoerror+0x36>
      ESCvar.pre_state_change_hook (&as, &an);
 800c924:	f10d 0107 	add.w	r1, sp, #7
 800c928:	f10d 0006 	add.w	r0, sp, #6
 800c92c:	4798      	blx	r3
   if ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 800c92e:	f3bf 8f5b 	dmb	ish
 800c932:	4b0f      	ldr	r3, [pc, #60]	; (800c970 <ESC_ALstatusgotoerror+0x78>)
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	f3bf 8f5b 	dmb	ish
 800c93a:	f013 0f02 	tst.w	r3, #2
 800c93e:	d111      	bne.n	800c964 <ESC_ALstatusgotoerror+0x6c>
   ESC_ALerror(errornumber);
 800c940:	4628      	mov	r0, r5
 800c942:	f7ff faaf 	bl	800bea4 <ESC_ALerror>
   ESC_ALstatus(status);
 800c946:	4620      	mov	r0, r4
 800c948:	f7ff fae0 	bl	800bf0c <ESC_ALstatus>
   an = status;
 800c94c:	f88d 4007 	strb.w	r4, [sp, #7]
   if (ESCvar.post_state_change_hook != NULL)
 800c950:	4b06      	ldr	r3, [pc, #24]	; (800c96c <ESC_ALstatusgotoerror+0x74>)
 800c952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c954:	b123      	cbz	r3, 800c960 <ESC_ALstatusgotoerror+0x68>
      ESCvar.post_state_change_hook (&as, &an);
 800c956:	f10d 0107 	add.w	r1, sp, #7
 800c95a:	f10d 0006 	add.w	r0, sp, #6
 800c95e:	4798      	blx	r3
}
 800c960:	b003      	add	sp, #12
 800c962:	bd30      	pop	{r4, r5, pc}
      ESC_stopoutput();
 800c964:	f7ff ffb2 	bl	800c8cc <ESC_stopoutput>
 800c968:	e7ea      	b.n	800c940 <ESC_ALstatusgotoerror+0x48>
 800c96a:	4770      	bx	lr
 800c96c:	20007f34 	.word	0x20007f34
 800c970:	2000801d 	.word	0x2000801d

0800c974 <ESC_sm_act_event>:
{
 800c974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if ((ESCvar.ALevent & ESCREG_ALEVENT_SMCHANGE) == 0)
 800c976:	4b42      	ldr	r3, [pc, #264]	; (800ca80 <ESC_sm_act_event+0x10c>)
 800c978:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c97c:	f013 0f10 	tst.w	r3, #16
 800c980:	d034      	beq.n	800c9ec <ESC_sm_act_event+0x78>
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 800c982:	4b3f      	ldr	r3, [pc, #252]	; (800ca80 <ESC_sm_act_event+0x10c>)
 800c984:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800c988:	f002 051f 	and.w	r5, r2, #31
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 800c98c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c990:	f003 041f 	and.w	r4, r3, #31
   if (((ac & ESCerror) || (ac == ESCinit)))
 800c994:	f012 0f10 	tst.w	r2, #16
 800c998:	d103      	bne.n	800c9a2 <ESC_sm_act_event+0x2e>
 800c99a:	2d01      	cmp	r5, #1
 800c99c:	d001      	beq.n	800c9a2 <ESC_sm_act_event+0x2e>
   an = as;
 800c99e:	4626      	mov	r6, r4
 800c9a0:	e003      	b.n	800c9aa <ESC_sm_act_event+0x36>
      ac &= ESCREG_AL_ERRACKMASK;
 800c9a2:	f002 050f 	and.w	r5, r2, #15
      an &= ESCREG_AL_ERRACKMASK;
 800c9a6:	f003 060f 	and.w	r6, r3, #15
   if ((as & ESCREG_AL_ALLBUTINITMASK) &&
 800c9aa:	f013 0f0e 	tst.w	r3, #14
 800c9ae:	d005      	beq.n	800c9bc <ESC_sm_act_event+0x48>
 800c9b0:	2c03      	cmp	r4, #3
 800c9b2:	d003      	beq.n	800c9bc <ESC_sm_act_event+0x48>
       ((as == ESCboot) == 0) && ESCvar.MBXrun)
 800c9b4:	4b32      	ldr	r3, [pc, #200]	; (800ca80 <ESC_sm_act_event+0x10c>)
 800c9b6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c9ba:	b9c3      	cbnz	r3, 800c9ee <ESC_sm_act_event+0x7a>
      ESC_SMack (0);
 800c9bc:	2000      	movs	r0, #0
 800c9be:	f7ff fac6 	bl	800bf4e <ESC_SMack>
      ESC_SMack (1);
 800c9c2:	2001      	movs	r0, #1
 800c9c4:	f7ff fac3 	bl	800bf4e <ESC_SMack>
      ESC_SMack (2);
 800c9c8:	2002      	movs	r0, #2
 800c9ca:	f7ff fac0 	bl	800bf4e <ESC_SMack>
      ESC_SMack (3);
 800c9ce:	2003      	movs	r0, #3
 800c9d0:	f7ff fabd 	bl	800bf4e <ESC_SMack>
      ESC_SMack (4);
 800c9d4:	2004      	movs	r0, #4
 800c9d6:	f7ff faba 	bl	800bf4e <ESC_SMack>
      ESC_SMack (5);
 800c9da:	2005      	movs	r0, #5
 800c9dc:	f7ff fab7 	bl	800bf4e <ESC_SMack>
      ESC_SMack (6);
 800c9e0:	2006      	movs	r0, #6
 800c9e2:	f7ff fab4 	bl	800bf4e <ESC_SMack>
      ESC_SMack (7);
 800c9e6:	2007      	movs	r0, #7
 800c9e8:	f7ff fab1 	bl	800bf4e <ESC_SMack>
}
 800c9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ax = ESC_checkmbx (as);
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f7ff fb28 	bl	800c044 <ESC_checkmbx>
 800c9f4:	4607      	mov	r7, r0
      ax23 = ESC_checkSM23 (as);
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	f7ff fe56 	bl	800c6a8 <ESC_checkSM23>
 800c9fc:	4604      	mov	r4, r0
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800c9fe:	f016 0f10 	tst.w	r6, #16
 800ca02:	d002      	beq.n	800ca0a <ESC_sm_act_event+0x96>
 800ca04:	f015 0f10 	tst.w	r5, #16
 800ca08:	d0f0      	beq.n	800c9ec <ESC_sm_act_event+0x78>
      else if (ax == (ESCinit | ESCerror))
 800ca0a:	2f11      	cmp	r7, #17
 800ca0c:	d01a      	beq.n	800ca44 <ESC_sm_act_event+0xd0>
      else if (CC_ATOMIC_GET(ESCvar.App.state) && (ax23 == (ESCpreop | ESCerror)))
 800ca0e:	f3bf 8f5b 	dmb	ish
 800ca12:	4b1c      	ldr	r3, [pc, #112]	; (800ca84 <ESC_sm_act_event+0x110>)
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	f3bf 8f5b 	dmb	ish
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d0e6      	beq.n	800c9ec <ESC_sm_act_event+0x78>
 800ca1e:	2c12      	cmp	r4, #18
 800ca20:	d1e4      	bne.n	800c9ec <ESC_sm_act_event+0x78>
         ESC_stopoutput ();
 800ca22:	f7ff ff53 	bl	800c8cc <ESC_stopoutput>
         ESC_stopinput ();
 800ca26:	f7ff ff17 	bl	800c858 <ESC_stopinput>
         if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 800ca2a:	4b15      	ldr	r3, [pc, #84]	; (800ca80 <ESC_sm_act_event+0x10c>)
 800ca2c:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800ca30:	f013 0f08 	tst.w	r3, #8
 800ca34:	d01f      	beq.n	800ca76 <ESC_sm_act_event+0x102>
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 800ca36:	201e      	movs	r0, #30
 800ca38:	f7ff fa34 	bl	800bea4 <ESC_ALerror>
         ESC_ALstatus (ax23);
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f7ff fa65 	bl	800bf0c <ESC_ALstatus>
 800ca42:	e7d3      	b.n	800c9ec <ESC_sm_act_event+0x78>
         if (CC_ATOMIC_GET(ESCvar.App.state))
 800ca44:	f3bf 8f5b 	dmb	ish
 800ca48:	4b0e      	ldr	r3, [pc, #56]	; (800ca84 <ESC_sm_act_event+0x110>)
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	f3bf 8f5b 	dmb	ish
 800ca50:	b963      	cbnz	r3, 800ca6c <ESC_sm_act_event+0xf8>
         ESC_stopmbx ();
 800ca52:	f7ff fbbf 	bl	800c1d4 <ESC_stopmbx>
         ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 800ca56:	2016      	movs	r0, #22
 800ca58:	f7ff fa24 	bl	800bea4 <ESC_ALerror>
         ESCvar.MBXrun = 0;
 800ca5c:	4b08      	ldr	r3, [pc, #32]	; (800ca80 <ESC_sm_act_event+0x10c>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
         ESC_ALstatus (ax);
 800ca64:	4638      	mov	r0, r7
 800ca66:	f7ff fa51 	bl	800bf0c <ESC_ALstatus>
         return;
 800ca6a:	e7bf      	b.n	800c9ec <ESC_sm_act_event+0x78>
            ESC_stopoutput ();
 800ca6c:	f7ff ff2e 	bl	800c8cc <ESC_stopoutput>
            ESC_stopinput ();
 800ca70:	f7ff fef2 	bl	800c858 <ESC_stopinput>
 800ca74:	e7ed      	b.n	800ca52 <ESC_sm_act_event+0xde>
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800ca76:	201d      	movs	r0, #29
 800ca78:	f7ff fa14 	bl	800bea4 <ESC_ALerror>
 800ca7c:	e7de      	b.n	800ca3c <ESC_sm_act_event+0xc8>
 800ca7e:	bf00      	nop
 800ca80:	20007f34 	.word	0x20007f34
 800ca84:	2000801d 	.word	0x2000801d

0800ca88 <ESC_state>:
void ESC_state (void)
{
   uint8_t ac, an, as;

   /* Do we have a state change request pending */
   if (ESCvar.ALevent & ESCREG_ALEVENT_CONTROL)
 800ca88:	4ba5      	ldr	r3, [pc, #660]	; (800cd20 <ESC_state+0x298>)
 800ca8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ca8e:	f013 0f01 	tst.w	r3, #1
 800ca92:	d100      	bne.n	800ca96 <ESC_state+0xe>
 800ca94:	4770      	bx	lr
{
 800ca96:	b530      	push	{r4, r5, lr}
 800ca98:	b083      	sub	sp, #12
   {
      ESC_read (ESCREG_ALCONTROL, (void *) &ESCvar.ALcontrol,
 800ca9a:	4ca2      	ldr	r4, [pc, #648]	; (800cd24 <ESC_state+0x29c>)
 800ca9c:	2202      	movs	r2, #2
 800ca9e:	4621      	mov	r1, r4
 800caa0:	f44f 7090 	mov.w	r0, #288	; 0x120
 800caa4:	f001 ffea 	bl	800ea7c <ESC_read>
                sizeof (ESCvar.ALcontrol));
      ESCvar.ALcontrol = etohs (ESCvar.ALcontrol);
 800caa8:	4621      	mov	r1, r4
   {
      /* nothing to do */
      return;
   }
   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 800caaa:	f811 2982 	ldrb.w	r2, [r1], #-130
 800caae:	f002 041f 	and.w	r4, r2, #31
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 800cab2:	f8b1 3080 	ldrh.w	r3, [r1, #128]	; 0x80
 800cab6:	f003 031f 	and.w	r3, r3, #31
 800caba:	f88d 3006 	strb.w	r3, [sp, #6]
   an = as;
 800cabe:	f88d 3007 	strb.w	r3, [sp, #7]
   if (((ac & ESCerror) || (ac == ESCinit)))
 800cac2:	f012 0f10 	tst.w	r2, #16
 800cac6:	d101      	bne.n	800cacc <ESC_state+0x44>
 800cac8:	2c01      	cmp	r4, #1
 800caca:	d105      	bne.n	800cad8 <ESC_state+0x50>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 800cacc:	f002 040f 	and.w	r4, r2, #15
      an &= ESCREG_AL_ERRACKMASK;
 800cad0:	f003 020f 	and.w	r2, r3, #15
 800cad4:	f88d 2007 	strb.w	r2, [sp, #7]
   }

   /* Error state not acked, leave original */
   if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800cad8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cadc:	f012 0f10 	tst.w	r2, #16
 800cae0:	d003      	beq.n	800caea <ESC_state+0x62>
 800cae2:	f014 0f10 	tst.w	r4, #16
 800cae6:	f000 80b6 	beq.w	800cc56 <ESC_state+0x1ce>
   {
      return;
   }

   /* Mask high bits ALcommand, low bits ALstatus */
   as = (uint8_t)((ac << 4) | (as & 0x0f));
 800caea:	f003 030f 	and.w	r3, r3, #15
 800caee:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800caf2:	f88d 3006 	strb.w	r3, [sp, #6]

   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 800caf6:	4b8a      	ldr	r3, [pc, #552]	; (800cd20 <ESC_state+0x298>)
 800caf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafa:	b123      	cbz	r3, 800cb06 <ESC_state+0x7e>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 800cafc:	f10d 0107 	add.w	r1, sp, #7
 800cb00:	f10d 0006 	add.w	r0, sp, #6
 800cb04:	4798      	blx	r3
   }

   /* Switch through the state change requested via AlControl from
    * current state read in AL status
    */
   switch (as)
 800cb06:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cb0a:	3b11      	subs	r3, #17
 800cb0c:	2b77      	cmp	r3, #119	; 0x77
 800cb0e:	f200 815a 	bhi.w	800cdc6 <ESC_state+0x33e>
 800cb12:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cb16:	007f      	.short	0x007f
 800cb18:	00c800c2 	.word	0x00c800c2
 800cb1c:	015800ba 	.word	0x015800ba
 800cb20:	01580158 	.word	0x01580158
 800cb24:	015800b0 	.word	0x015800b0
 800cb28:	01580158 	.word	0x01580158
 800cb2c:	01580158 	.word	0x01580158
 800cb30:	01580158 	.word	0x01580158
 800cb34:	00780158 	.word	0x00780158
 800cb38:	00ce007f 	.word	0x00ce007f
 800cb3c:	01580127 	.word	0x01580127
 800cb40:	01580158 	.word	0x01580158
 800cb44:	0158011f 	.word	0x0158011f
 800cb48:	01580158 	.word	0x01580158
 800cb4c:	01580158 	.word	0x01580158
 800cb50:	01580158 	.word	0x01580158
 800cb54:	00a20158 	.word	0x00a20158
 800cb58:	00a200ce 	.word	0x00a200ce
 800cb5c:	0158012d 	.word	0x0158012d
 800cb60:	01580158 	.word	0x01580158
 800cb64:	0158013a 	.word	0x0158013a
 800cb68:	01580158 	.word	0x01580158
 800cb6c:	01580158 	.word	0x01580158
 800cb70:	01580158 	.word	0x01580158
 800cb74:	00aa0158 	.word	0x00aa0158
 800cb78:	00ce00d5 	.word	0x00ce00d5
 800cb7c:	015800d5 	.word	0x015800d5
 800cb80:	01580158 	.word	0x01580158
 800cb84:	01580152 	.word	0x01580152
 800cb88:	01580158 	.word	0x01580158
 800cb8c:	01580158 	.word	0x01580158
 800cb90:	01580158 	.word	0x01580158
 800cb94:	01580158 	.word	0x01580158
 800cb98:	01580158 	.word	0x01580158
 800cb9c:	01580158 	.word	0x01580158
 800cba0:	01580158 	.word	0x01580158
 800cba4:	01580158 	.word	0x01580158
 800cba8:	01580158 	.word	0x01580158
 800cbac:	01580158 	.word	0x01580158
 800cbb0:	01580158 	.word	0x01580158
 800cbb4:	01580158 	.word	0x01580158
 800cbb8:	01580158 	.word	0x01580158
 800cbbc:	01580158 	.word	0x01580158
 800cbc0:	01580158 	.word	0x01580158
 800cbc4:	01580158 	.word	0x01580158
 800cbc8:	01580158 	.word	0x01580158
 800cbcc:	01580158 	.word	0x01580158
 800cbd0:	01580158 	.word	0x01580158
 800cbd4:	01580158 	.word	0x01580158
 800cbd8:	01580158 	.word	0x01580158
 800cbdc:	01580158 	.word	0x01580158
 800cbe0:	01580158 	.word	0x01580158
 800cbe4:	01580158 	.word	0x01580158
 800cbe8:	01580158 	.word	0x01580158
 800cbec:	01580158 	.word	0x01580158
 800cbf0:	01580158 	.word	0x01580158
 800cbf4:	00aa0158 	.word	0x00aa0158
 800cbf8:	00ce0118 	.word	0x00ce0118
 800cbfc:	01580134 	.word	0x01580134
 800cc00:	01580158 	.word	0x01580158
 800cc04:	007f      	.short	0x007f
         break;
      }
      case INIT_TO_PREOP:
      {
         /* get station address */
         ESC_address ();
 800cc06:	f7ff f9ef 	bl	800bfe8 <ESC_address>
         an = ESC_startmbx (ac);
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f7ff fa78 	bl	800c100 <ESC_startmbx>
 800cc10:	f88d 0007 	strb.w	r0, [sp, #7]
         break;
      }
   }

   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 800cc14:	4b42      	ldr	r3, [pc, #264]	; (800cd20 <ESC_state+0x298>)
 800cc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc18:	b123      	cbz	r3, 800cc24 <ESC_state+0x19c>
   {
      ESCvar.post_state_change_hook (&as, &an);
 800cc1a:	f10d 0107 	add.w	r1, sp, #7
 800cc1e:	f10d 0006 	add.w	r0, sp, #6
 800cc22:	4798      	blx	r3
   }

   if (!(an & ESCerror) && (ESCvar.ALerror))
 800cc24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cc28:	f013 0f10 	tst.w	r3, #16
 800cc2c:	d105      	bne.n	800cc3a <ESC_state+0x1b2>
 800cc2e:	4b3c      	ldr	r3, [pc, #240]	; (800cd20 <ESC_state+0x298>)
 800cc30:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f040 80ed 	bne.w	800ce14 <ESC_state+0x38c>
   {
      /* clear error */
      ESC_ALerror (ALERR_NONE);
   }

   if (ESC_check_id_request (ESCvar.ALcontrol, &an))
 800cc3a:	f10d 0107 	add.w	r1, sp, #7
 800cc3e:	4b38      	ldr	r3, [pc, #224]	; (800cd20 <ESC_state+0x298>)
 800cc40:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800cc44:	f7ff f906 	bl	800be54 <ESC_check_id_request>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	f040 80e7 	bne.w	800ce1c <ESC_state+0x394>
   {
      an |= ESC_load_device_id ();
   }

   ESC_ALstatus (an);
 800cc4e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800cc52:	f7ff f95b 	bl	800bf0c <ESC_ALstatus>

#ifdef ESC_DEBUG
   DPRINT ("state %s\n", ESC_state_to_string (an & 0xF));
#endif
}
 800cc56:	b003      	add	sp, #12
 800cc58:	bd30      	pop	{r4, r5, pc}
         ESC_address ();
 800cc5a:	f7ff f9c5 	bl	800bfe8 <ESC_address>
         an = ESC_startmbxboot (ac);
 800cc5e:	4620      	mov	r0, r4
 800cc60:	f7ff fa82 	bl	800c168 <ESC_startmbxboot>
 800cc64:	f88d 0007 	strb.w	r0, [sp, #7]
         break;
 800cc68:	e7d4      	b.n	800cc14 <ESC_state+0x18c>
         an = ESCinit | ESCerror;
 800cc6a:	2011      	movs	r0, #17
 800cc6c:	f88d 0007 	strb.w	r0, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800cc70:	f7ff f918 	bl	800bea4 <ESC_ALerror>
         break;
 800cc74:	e7ce      	b.n	800cc14 <ESC_state+0x18c>
         ESC_stopoutput ();
 800cc76:	f7ff fe29 	bl	800c8cc <ESC_stopoutput>
         ESC_stopinput ();
 800cc7a:	f7ff fded 	bl	800c858 <ESC_stopinput>
         ESC_stopmbx ();
 800cc7e:	f7ff faa9 	bl	800c1d4 <ESC_stopmbx>
         an = ESCinit;
 800cc82:	2301      	movs	r3, #1
 800cc84:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800cc88:	e7c4      	b.n	800cc14 <ESC_state+0x18c>
         ESC_stopinput ();
 800cc8a:	f7ff fde5 	bl	800c858 <ESC_stopinput>
         ESC_stopmbx ();
 800cc8e:	f7ff faa1 	bl	800c1d4 <ESC_stopmbx>
         an = ESCinit;
 800cc92:	2301      	movs	r3, #1
 800cc94:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800cc98:	e7bc      	b.n	800cc14 <ESC_state+0x18c>
         ESC_stopmbx ();
 800cc9a:	f7ff fa9b 	bl	800c1d4 <ESC_stopmbx>
         an = ESCinit;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800cca4:	e7b6      	b.n	800cc14 <ESC_state+0x18c>
         ESC_stopmbx ();
 800cca6:	f7ff fa95 	bl	800c1d4 <ESC_stopmbx>
         an = ESCinit;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800ccb0:	e7b0      	b.n	800cc14 <ESC_state+0x18c>
         an = ESCpreop | ESCerror;
 800ccb2:	2312      	movs	r3, #18
 800ccb4:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800ccb8:	2011      	movs	r0, #17
 800ccba:	f7ff f8f3 	bl	800bea4 <ESC_ALerror>
         break;
 800ccbe:	e7a9      	b.n	800cc14 <ESC_state+0x18c>
         ESCvar.ESC_SM2_sml = sizeOfPDO (RX_PDO_OBJIDX, &ESCvar.sm2mappings,
 800ccc0:	4d19      	ldr	r5, [pc, #100]	; (800cd28 <ESC_state+0x2a0>)
 800ccc2:	2330      	movs	r3, #48	; 0x30
 800ccc4:	4a19      	ldr	r2, [pc, #100]	; (800cd2c <ESC_state+0x2a4>)
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	f641 4012 	movw	r0, #7186	; 0x1c12
 800cccc:	f001 fb34 	bl	800e338 <sizeOfPDO>
 800ccd0:	f825 0c34 	strh.w	r0, [r5, #-52]
 800ccd4:	3dac      	subs	r5, #172	; 0xac
         if (ESCvar.sm2mappings < 0)
 800ccd6:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	db19      	blt.n	800cd12 <ESC_state+0x28a>
         ESCvar.ESC_SM3_sml = sizeOfPDO (TX_PDO_OBJIDX, &ESCvar.sm3mappings,
 800ccde:	4d14      	ldr	r5, [pc, #80]	; (800cd30 <ESC_state+0x2a8>)
 800cce0:	2350      	movs	r3, #80	; 0x50
 800cce2:	4a14      	ldr	r2, [pc, #80]	; (800cd34 <ESC_state+0x2ac>)
 800cce4:	4629      	mov	r1, r5
 800cce6:	f641 4013 	movw	r0, #7187	; 0x1c13
 800ccea:	f001 fb25 	bl	800e338 <sizeOfPDO>
 800ccee:	f825 0c36 	strh.w	r0, [r5, #-54]
 800ccf2:	3db0      	subs	r5, #176	; 0xb0
         if (ESCvar.sm3mappings < 0)
 800ccf4:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	db1d      	blt.n	800cd38 <ESC_state+0x2b0>
         an = ESC_startinput (ac);
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f7ff fd4d 	bl	800c79c <ESC_startinput>
 800cd02:	f88d 0007 	strb.w	r0, [sp, #7]
         if (an == ac)
 800cd06:	42a0      	cmp	r0, r4
 800cd08:	d184      	bne.n	800cc14 <ESC_state+0x18c>
            ESC_SMenable (2);
 800cd0a:	2002      	movs	r0, #2
 800cd0c:	f7ff f94c 	bl	800bfa8 <ESC_SMenable>
 800cd10:	e780      	b.n	800cc14 <ESC_state+0x18c>
            an = ESCpreop | ESCerror;
 800cd12:	2312      	movs	r3, #18
 800cd14:	f88d 3007 	strb.w	r3, [sp, #7]
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800cd18:	201d      	movs	r0, #29
 800cd1a:	f7ff f8c3 	bl	800bea4 <ESC_ALerror>
            break;
 800cd1e:	e779      	b.n	800cc14 <ESC_state+0x18c>
 800cd20:	20007f34 	.word	0x20007f34
 800cd24:	20007fb6 	.word	0x20007fb6
 800cd28:	20007fe0 	.word	0x20007fe0
 800cd2c:	20008c24 	.word	0x20008c24
 800cd30:	20007fe4 	.word	0x20007fe4
 800cd34:	20008e64 	.word	0x20008e64
            an = ESCpreop | ESCerror;
 800cd38:	2312      	movs	r3, #18
 800cd3a:	f88d 3007 	strb.w	r3, [sp, #7]
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 800cd3e:	201e      	movs	r0, #30
 800cd40:	f7ff f8b0 	bl	800bea4 <ESC_ALerror>
            break;
 800cd44:	e766      	b.n	800cc14 <ESC_state+0x18c>
         an = ESCpreop | ESCerror;
 800cd46:	2312      	movs	r3, #18
 800cd48:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800cd4c:	2011      	movs	r0, #17
 800cd4e:	f7ff f8a9 	bl	800bea4 <ESC_ALerror>
         break;
 800cd52:	e75f      	b.n	800cc14 <ESC_state+0x18c>
         ESC_stopoutput ();
 800cd54:	f7ff fdba 	bl	800c8cc <ESC_stopoutput>
         ESC_stopinput ();
 800cd58:	f7ff fd7e 	bl	800c858 <ESC_stopinput>
         an = ESCpreop;
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800cd62:	e757      	b.n	800cc14 <ESC_state+0x18c>
         ESC_stopinput ();
 800cd64:	f7ff fd78 	bl	800c858 <ESC_stopinput>
         an = ESCpreop;
 800cd68:	2302      	movs	r3, #2
 800cd6a:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800cd6e:	e751      	b.n	800cc14 <ESC_state+0x18c>
         an = ESCsafeop | ESCerror;
 800cd70:	2314      	movs	r3, #20
 800cd72:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800cd76:	2011      	movs	r0, #17
 800cd78:	f7ff f894 	bl	800bea4 <ESC_ALerror>
         break;
 800cd7c:	e74a      	b.n	800cc14 <ESC_state+0x18c>
         an = ESC_startoutput (ac);
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f7ff fd86 	bl	800c890 <ESC_startoutput>
 800cd84:	f88d 0007 	strb.w	r0, [sp, #7]
         break;
 800cd88:	e744      	b.n	800cc14 <ESC_state+0x18c>
         an = ESCsafeop | ESCerror;
 800cd8a:	2314      	movs	r3, #20
 800cd8c:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800cd90:	2011      	movs	r0, #17
 800cd92:	f7ff f887 	bl	800bea4 <ESC_ALerror>
         ESC_stopoutput ();
 800cd96:	f7ff fd99 	bl	800c8cc <ESC_stopoutput>
         if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 800cd9a:	4b24      	ldr	r3, [pc, #144]	; (800ce2c <ESC_state+0x3a4>)
 800cd9c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f47f af37 	bne.w	800cc14 <ESC_state+0x18c>
 800cda6:	4b21      	ldr	r3, [pc, #132]	; (800ce2c <ESC_state+0x3a4>)
 800cda8:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f43f af31 	beq.w	800cc14 <ESC_state+0x18c>
            ESC_SMdisable (3);
 800cdb2:	2003      	movs	r0, #3
 800cdb4:	f7ff f908 	bl	800bfc8 <ESC_SMdisable>
 800cdb8:	e72c      	b.n	800cc14 <ESC_state+0x18c>
         an = ESCsafeop;
 800cdba:	2304      	movs	r3, #4
 800cdbc:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_stopoutput ();
 800cdc0:	f7ff fd84 	bl	800c8cc <ESC_stopoutput>
         break;
 800cdc4:	e726      	b.n	800cc14 <ESC_state+0x18c>
         if (an == ESCop)
 800cdc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cdca:	2b08      	cmp	r3, #8
 800cdcc:	d00d      	beq.n	800cdea <ESC_state+0x362>
         if (as == ESCsafeop)
 800cdce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cdd2:	2b04      	cmp	r3, #4
 800cdd4:	d01b      	beq.n	800ce0e <ESC_state+0x386>
         an |= ESCerror;
 800cdd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cdda:	f043 0310 	orr.w	r3, r3, #16
 800cdde:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_UNKNOWNSTATE);
 800cde2:	2012      	movs	r0, #18
 800cde4:	f7ff f85e 	bl	800bea4 <ESC_ALerror>
         break;
 800cde8:	e714      	b.n	800cc14 <ESC_state+0x18c>
            ESC_stopoutput ();
 800cdea:	f7ff fd6f 	bl	800c8cc <ESC_stopoutput>
            if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 800cdee:	4b0f      	ldr	r3, [pc, #60]	; (800ce2c <ESC_state+0x3a4>)
 800cdf0:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800cdf4:	b91b      	cbnz	r3, 800cdfe <ESC_state+0x376>
 800cdf6:	4b0d      	ldr	r3, [pc, #52]	; (800ce2c <ESC_state+0x3a4>)
 800cdf8:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800cdfc:	b91b      	cbnz	r3, 800ce06 <ESC_state+0x37e>
            an = ESCsafeop;
 800cdfe:	2304      	movs	r3, #4
 800ce00:	f88d 3007 	strb.w	r3, [sp, #7]
 800ce04:	e7e3      	b.n	800cdce <ESC_state+0x346>
               ESC_SMdisable (3);
 800ce06:	2003      	movs	r0, #3
 800ce08:	f7ff f8de 	bl	800bfc8 <ESC_SMdisable>
 800ce0c:	e7f7      	b.n	800cdfe <ESC_state+0x376>
            ESC_stopinput ();
 800ce0e:	f7ff fd23 	bl	800c858 <ESC_stopinput>
 800ce12:	e7e0      	b.n	800cdd6 <ESC_state+0x34e>
      ESC_ALerror (ALERR_NONE);
 800ce14:	2000      	movs	r0, #0
 800ce16:	f7ff f845 	bl	800bea4 <ESC_ALerror>
 800ce1a:	e70e      	b.n	800cc3a <ESC_state+0x1b2>
      an |= ESC_load_device_id ();
 800ce1c:	f7ff f856 	bl	800becc <ESC_load_device_id>
 800ce20:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ce24:	4318      	orrs	r0, r3
 800ce26:	f88d 0007 	strb.w	r0, [sp, #7]
 800ce2a:	e710      	b.n	800cc4e <ESC_state+0x1c6>
 800ce2c:	20007f34 	.word	0x20007f34

0800ce30 <ESC_config>:
 *
 * @param[in] cfg   = Pointer to the Application configuration variable
 * holding application specific details. Data is copied.
 */
void ESC_config (esc_cfg_t * cfg)
{
 800ce30:	4602      	mov	r2, r0
   static sm_cfg_t mb1 = {MBX1_sma, MBX1_sml, MBX1_sme, MBX1_smc, 0};
   static sm_cfg_t mbboot0 = {MBX0_sma_b, MBX0_sml_b, MBX0_sme_b, MBX0_smc_b, 0};
   static sm_cfg_t mbboot1 = {MBX1_sma_b, MBX1_sml_b, MBX1_sme_b, MBX1_smc_b, 0};

   /* Configure stack */
   ESCvar.use_interrupt = cfg->use_interrupt;
 800ce32:	6841      	ldr	r1, [r0, #4]
 800ce34:	4b20      	ldr	r3, [pc, #128]	; (800ceb8 <ESC_config+0x88>)
 800ce36:	6019      	str	r1, [r3, #0]
   ESCvar.watchdogcnt = cfg->watchdog_cnt;
 800ce38:	6881      	ldr	r1, [r0, #8]
 800ce3a:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc

   ESCvar.mb[0] = mb0;
 800ce3e:	491f      	ldr	r1, [pc, #124]	; (800cebc <ESC_config+0x8c>)
 800ce40:	f103 0c04 	add.w	ip, r3, #4
 800ce44:	c903      	ldmia	r1, {r0, r1}
 800ce46:	e88c 0003 	stmia.w	ip, {r0, r1}
   ESCvar.mb[1] = mb1;
 800ce4a:	491d      	ldr	r1, [pc, #116]	; (800cec0 <ESC_config+0x90>)
 800ce4c:	f103 0c0c 	add.w	ip, r3, #12
 800ce50:	c903      	ldmia	r1, {r0, r1}
 800ce52:	e88c 0003 	stmia.w	ip, {r0, r1}
   ESCvar.mbboot[0] = mbboot0;
 800ce56:	491b      	ldr	r1, [pc, #108]	; (800cec4 <ESC_config+0x94>)
 800ce58:	f103 0c14 	add.w	ip, r3, #20
 800ce5c:	c903      	ldmia	r1, {r0, r1}
 800ce5e:	e88c 0003 	stmia.w	ip, {r0, r1}
   ESCvar.mbboot[1] = mbboot1;
 800ce62:	4919      	ldr	r1, [pc, #100]	; (800cec8 <ESC_config+0x98>)
 800ce64:	f103 0c1c 	add.w	ip, r3, #28
 800ce68:	c903      	ldmia	r1, {r0, r1}
 800ce6a:	e88c 0003 	stmia.w	ip, {r0, r1}

   ESCvar.skip_default_initialization = cfg->skip_default_initialization;
 800ce6e:	7b11      	ldrb	r1, [r2, #12]
 800ce70:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
   ESCvar.set_defaults_hook = cfg->set_defaults_hook;
 800ce74:	6911      	ldr	r1, [r2, #16]
 800ce76:	6299      	str	r1, [r3, #40]	; 0x28
   ESCvar.pre_state_change_hook = cfg->pre_state_change_hook;
 800ce78:	6951      	ldr	r1, [r2, #20]
 800ce7a:	62d9      	str	r1, [r3, #44]	; 0x2c
   ESCvar.post_state_change_hook = cfg->post_state_change_hook;
 800ce7c:	6991      	ldr	r1, [r2, #24]
 800ce7e:	6319      	str	r1, [r3, #48]	; 0x30
   ESCvar.application_hook = cfg->application_hook;
 800ce80:	69d1      	ldr	r1, [r2, #28]
 800ce82:	6359      	str	r1, [r3, #52]	; 0x34
   ESCvar.safeoutput_override = cfg->safeoutput_override;
 800ce84:	6a11      	ldr	r1, [r2, #32]
 800ce86:	6399      	str	r1, [r3, #56]	; 0x38
   ESCvar.pre_object_download_hook = cfg->pre_object_download_hook;
 800ce88:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800ce8a:	63d9      	str	r1, [r3, #60]	; 0x3c
   ESCvar.post_object_download_hook = cfg->post_object_download_hook;
 800ce8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ce8e:	6419      	str	r1, [r3, #64]	; 0x40
   ESCvar.pre_object_upload_hook = cfg->pre_object_upload_hook;
 800ce90:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ce92:	6459      	str	r1, [r3, #68]	; 0x44
   ESCvar.post_object_upload_hook = cfg->post_object_upload_hook;
 800ce94:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800ce96:	6499      	str	r1, [r3, #72]	; 0x48
   ESCvar.rxpdo_override = cfg->rxpdo_override;
 800ce98:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800ce9a:	64d9      	str	r1, [r3, #76]	; 0x4c
   ESCvar.txpdo_override = cfg->txpdo_override;
 800ce9c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800ce9e:	6519      	str	r1, [r3, #80]	; 0x50
   ESCvar.esc_hw_interrupt_enable = cfg->esc_hw_interrupt_enable;
 800cea0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800cea2:	6559      	str	r1, [r3, #84]	; 0x54
   ESCvar.esc_hw_interrupt_disable = cfg->esc_hw_interrupt_disable;
 800cea4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800cea6:	6599      	str	r1, [r3, #88]	; 0x58
   ESCvar.esc_hw_eep_handler = cfg->esc_hw_eep_handler;
 800cea8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800ceaa:	65d9      	str	r1, [r3, #92]	; 0x5c
   ESCvar.esc_check_dc_handler = cfg->esc_check_dc_handler;
 800ceac:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800ceae:	6619      	str	r1, [r3, #96]	; 0x60
   ESCvar.get_device_id = cfg->get_device_id;
 800ceb0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ceb2:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ceb4:	4770      	bx	lr
 800ceb6:	bf00      	nop
 800ceb8:	20007f34 	.word	0x20007f34
 800cebc:	08013508 	.word	0x08013508
 800cec0:	08013510 	.word	0x08013510
 800cec4:	08013518 	.word	0x08013518
 800cec8:	08013520 	.word	0x08013520

0800cecc <init_coesdo>:
static void init_coesdo(_COEsdo *coesdo,
                        uint8_t sdoservice,
                        uint8_t command,
                        uint16_t index,
                        uint8_t subindex)
{
 800cecc:	b500      	push	{lr}
   coesdo->mbxheader.length = htoes(COE_DEFAULTLENGTH);
 800cece:	f04f 0c0a 	mov.w	ip, #10
 800ced2:	f8a0 c000 	strh.w	ip, [r0]
   coesdo->mbxheader.mbxtype = MBXCOE;
 800ced6:	f890 c005 	ldrb.w	ip, [r0, #5]
 800ceda:	f04f 0e03 	mov.w	lr, #3
 800cede:	f36e 0c03 	bfi	ip, lr, #0, #4
 800cee2:	f880 c005 	strb.w	ip, [r0, #5]
   coesdo->coeheader.numberservice = htoes(sdoservice << 12);
 800cee6:	0309      	lsls	r1, r1, #12
 800cee8:	80c1      	strh	r1, [r0, #6]
   coesdo->command = command;
 800ceea:	7202      	strb	r2, [r0, #8]
   coesdo->index = htoes(index);
 800ceec:	f8a0 3009 	strh.w	r3, [r0, #9]
   coesdo->subindex = subindex;
 800cef0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cef4:	72c3      	strb	r3, [r0, #11]
}
 800cef6:	f85d fb04 	ldr.w	pc, [sp], #4

0800cefa <COE_bitsliceGet>:
 * @param[in] offset = start offset
 * @param[in] length = number of bits to get
 * @return bitslice value
 */
static uint64_t COE_bitsliceGet (uint64_t * bitmap, unsigned int offset, unsigned int length)
{
 800cefa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   const unsigned int word_offset = offset / 64;
 800cefe:	098d      	lsrs	r5, r1, #6
   const unsigned int bit_offset = offset % 64;
 800cf00:	f001 033f 	and.w	r3, r1, #63	; 0x3f
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800cf04:	2a40      	cmp	r2, #64	; 0x40
 800cf06:	d043      	beq.n	800cf90 <COE_bitsliceGet+0x96>
 800cf08:	f04f 0e01 	mov.w	lr, #1
 800cf0c:	f1a2 0120 	sub.w	r1, r2, #32
 800cf10:	f1c2 0420 	rsb	r4, r2, #32
 800cf14:	fa0e f101 	lsl.w	r1, lr, r1
 800cf18:	fa2e f404 	lsr.w	r4, lr, r4
 800cf1c:	4321      	orrs	r1, r4
 800cf1e:	fa0e fe02 	lsl.w	lr, lr, r2
 800cf22:	f11e 3eff 	adds.w	lr, lr, #4294967295	; 0xffffffff
 800cf26:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
   uint64_t w0;
   uint64_t w1 = 0;

   /* Get the least significant word */
   w0 = bitmap[word_offset];
 800cf2a:	eb00 04c5 	add.w	r4, r0, r5, lsl #3
 800cf2e:	6864      	ldr	r4, [r4, #4]
   w0 = w0 >> bit_offset;
 800cf30:	f1c3 0720 	rsb	r7, r3, #32
 800cf34:	f1a3 0620 	sub.w	r6, r3, #32
 800cf38:	f850 1035 	ldr.w	r1, [r0, r5, lsl #3]
 800cf3c:	fa21 fc03 	lsr.w	ip, r1, r3
 800cf40:	fa04 f707 	lsl.w	r7, r4, r7
 800cf44:	ea4c 0c07 	orr.w	ip, ip, r7
 800cf48:	fa24 f606 	lsr.w	r6, r4, r6
 800cf4c:	ea4c 0c06 	orr.w	ip, ip, r6
 800cf50:	40dc      	lsrs	r4, r3

   /* Get the most significant word, if required */
   if (length + bit_offset > 64)
 800cf52:	441a      	add	r2, r3
 800cf54:	2a40      	cmp	r2, #64	; 0x40
 800cf56:	d91f      	bls.n	800cf98 <COE_bitsliceGet+0x9e>
   {
      w1 = bitmap[word_offset + 1];
 800cf58:	3501      	adds	r5, #1
 800cf5a:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 800cf5e:	f850 0035 	ldr.w	r0, [r0, r5, lsl #3]
 800cf62:	6852      	ldr	r2, [r2, #4]
      w1 = w1 << (64 - bit_offset);
 800cf64:	f1c3 0640 	rsb	r6, r3, #64	; 0x40
 800cf68:	f1c3 0520 	rsb	r5, r3, #32
 800cf6c:	3b20      	subs	r3, #32
 800cf6e:	40b2      	lsls	r2, r6
 800cf70:	fa00 f505 	lsl.w	r5, r0, r5
 800cf74:	432a      	orrs	r2, r5
 800cf76:	fa20 f303 	lsr.w	r3, r0, r3
 800cf7a:	431a      	orrs	r2, r3
 800cf7c:	40b0      	lsls	r0, r6
   }

   w0 = (w1 | w0);
 800cf7e:	ea40 000c 	orr.w	r0, r0, ip
 800cf82:	4322      	orrs	r2, r4
   return (w0 & mask);
}
 800cf84:	ea0e 0000 	and.w	r0, lr, r0
 800cf88:	ea08 0102 	and.w	r1, r8, r2
 800cf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800cf90:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800cf94:	46f0      	mov	r8, lr
 800cf96:	e7c8      	b.n	800cf2a <COE_bitsliceGet+0x30>
   uint64_t w1 = 0;
 800cf98:	2000      	movs	r0, #0
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	e7ef      	b.n	800cf7e <COE_bitsliceGet+0x84>

0800cf9e <COE_bitsliceSet>:
 * @param[in] length = number of bits to set
 * @param[in] value  = value to set
 */
static void COE_bitsliceSet (uint64_t * bitmap, unsigned int offset, unsigned int length,
                             uint64_t value)
{
 800cf9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cfa6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   const unsigned int word_offset = offset / 64;
 800cfa8:	098e      	lsrs	r6, r1, #6
   const unsigned int bit_offset = offset % 64;
 800cfaa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800cfae:	2a40      	cmp	r2, #64	; 0x40
 800cfb0:	d079      	beq.n	800d0a6 <COE_bitsliceSet+0x108>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	f1a2 0e20 	sub.w	lr, r2, #32
 800cfb8:	f1c2 0520 	rsb	r5, r2, #32
 800cfbc:	fa03 fe0e 	lsl.w	lr, r3, lr
 800cfc0:	fa23 f505 	lsr.w	r5, r3, r5
 800cfc4:	ea4e 0e05 	orr.w	lr, lr, r5
 800cfc8:	4093      	lsls	r3, r2
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
   const uint64_t mask0 = mask << bit_offset;
 800cfd0:	f1a1 0c20 	sub.w	ip, r1, #32
 800cfd4:	f1c1 0520 	rsb	r5, r1, #32
 800cfd8:	fa0e f801 	lsl.w	r8, lr, r1
 800cfdc:	fa03 fc0c 	lsl.w	ip, r3, ip
 800cfe0:	ea48 080c 	orr.w	r8, r8, ip
 800cfe4:	fa23 f505 	lsr.w	r5, r3, r5
 800cfe8:	ea48 0805 	orr.w	r8, r8, r5
 800cfec:	fa03 f501 	lsl.w	r5, r3, r1
 800cff0:	9501      	str	r5, [sp, #4]
   uint64_t v0 = value << bit_offset;
 800cff2:	f1a1 0a20 	sub.w	sl, r1, #32
 800cff6:	f1c1 0920 	rsb	r9, r1, #32
 800cffa:	fa07 fc01 	lsl.w	ip, r7, r1
 800cffe:	fa04 fa0a 	lsl.w	sl, r4, sl
 800d002:	ea4c 0c0a 	orr.w	ip, ip, sl
 800d006:	fa24 f909 	lsr.w	r9, r4, r9
 800d00a:	ea4c 0c09 	orr.w	ip, ip, r9
 800d00e:	fa04 f901 	lsl.w	r9, r4, r1
   uint64_t w0 = bitmap[word_offset];
 800d012:	eb00 0ac6 	add.w	sl, r0, r6, lsl #3
 800d016:	f850 b036 	ldr.w	fp, [r0, r6, lsl #3]

   /* Set the least significant word */
   w0 = (w0 & ~mask0) | (v0 & mask0);
 800d01a:	ea89 090b 	eor.w	r9, r9, fp
 800d01e:	f8da 5004 	ldr.w	r5, [sl, #4]
 800d022:	ea8c 0c05 	eor.w	ip, ip, r5
 800d026:	9d01      	ldr	r5, [sp, #4]
 800d028:	ea09 0505 	and.w	r5, r9, r5
 800d02c:	ea0c 0c08 	and.w	ip, ip, r8
 800d030:	ea85 0b0b 	eor.w	fp, r5, fp
 800d034:	f8da 5004 	ldr.w	r5, [sl, #4]
 800d038:	ea8c 0505 	eor.w	r5, ip, r5
   bitmap[word_offset] = w0;
 800d03c:	f840 b036 	str.w	fp, [r0, r6, lsl #3]
 800d040:	f8ca 5004 	str.w	r5, [sl, #4]

   /* Set the most significant word, if required */
   if (length + bit_offset > 64)
 800d044:	440a      	add	r2, r1
 800d046:	2a40      	cmp	r2, #64	; 0x40
 800d048:	d92a      	bls.n	800d0a0 <COE_bitsliceSet+0x102>
   {
      const uint64_t mask1 = mask >> (64 - bit_offset);
 800d04a:	f1c1 0240 	rsb	r2, r1, #64	; 0x40
 800d04e:	f1a1 0520 	sub.w	r5, r1, #32
 800d052:	f1c1 0120 	rsb	r1, r1, #32
 800d056:	40d3      	lsrs	r3, r2
 800d058:	fa0e f505 	lsl.w	r5, lr, r5
 800d05c:	432b      	orrs	r3, r5
 800d05e:	fa2e f101 	lsr.w	r1, lr, r1
 800d062:	430b      	orrs	r3, r1
 800d064:	fa2e fe02 	lsr.w	lr, lr, r2
      uint64_t v1 = value >> (64 - bit_offset);
 800d068:	f1c2 0520 	rsb	r5, r2, #32
 800d06c:	f1a2 0120 	sub.w	r1, r2, #32
 800d070:	40d4      	lsrs	r4, r2
 800d072:	fa07 f505 	lsl.w	r5, r7, r5
 800d076:	432c      	orrs	r4, r5
 800d078:	fa27 f101 	lsr.w	r1, r7, r1
 800d07c:	430c      	orrs	r4, r1
 800d07e:	40d7      	lsrs	r7, r2
      uint64_t w1 = bitmap[word_offset + 1];
 800d080:	3601      	adds	r6, #1
 800d082:	eb00 05c6 	add.w	r5, r0, r6, lsl #3
 800d086:	f850 1036 	ldr.w	r1, [r0, r6, lsl #3]
 800d08a:	686a      	ldr	r2, [r5, #4]

      w1 = (w1 & ~mask1) | (v1 & mask1);
 800d08c:	404c      	eors	r4, r1
 800d08e:	4057      	eors	r7, r2
 800d090:	401c      	ands	r4, r3
 800d092:	ea07 070e 	and.w	r7, r7, lr
 800d096:	4061      	eors	r1, r4
 800d098:	407a      	eors	r2, r7
      bitmap[word_offset + 1] = w1;
 800d09a:	f840 1036 	str.w	r1, [r0, r6, lsl #3]
 800d09e:	606a      	str	r2, [r5, #4]
   }
}
 800d0a0:	b003      	add	sp, #12
 800d0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800d0a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0aa:	469e      	mov	lr, r3
 800d0ac:	e790      	b.n	800cfd0 <COE_bitsliceSet+0x32>

0800d0ae <COE_setValue>:
 * @param[in] obj   = object description
 * @param[in] value = new value
 */
static void COE_setValue (const _objd * obj, uint64_t value)
{
   switch(obj->datatype)
 800d0ae:	8841      	ldrh	r1, [r0, #2]
 800d0b0:	3901      	subs	r1, #1
 800d0b2:	2936      	cmp	r1, #54	; 0x36
 800d0b4:	d829      	bhi.n	800d10a <COE_setValue+0x5c>
 800d0b6:	e8df f001 	tbb	[pc, r1]
 800d0ba:	1c1c      	.short	0x1c1c
 800d0bc:	1f1c221f 	.word	0x1f1c221f
 800d0c0:	28282222 	.word	0x28282222
 800d0c4:	28282828 	.word	0x28282828
 800d0c8:	28252828 	.word	0x28252828
 800d0cc:	28252828 	.word	0x28252828
 800d0d0:	28282828 	.word	0x28282828
 800d0d4:	28282825 	.word	0x28282825
 800d0d8:	28282828 	.word	0x28282828
 800d0dc:	28282828 	.word	0x28282828
 800d0e0:	28282828 	.word	0x28282828
 800d0e4:	1f1c2828 	.word	0x1f1c2828
 800d0e8:	1c1c1c22 	.word	0x1c1c1c22
 800d0ec:	1c1c1c1c 	.word	0x1c1c1c1c
 800d0f0:	1c          	.byte	0x1c
 800d0f1:	00          	.byte	0x00
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
   case DTYPE_BITARR8:
      *(uint8_t *)obj->data = value & UINT8_MAX;
 800d0f2:	6903      	ldr	r3, [r0, #16]
 800d0f4:	701a      	strb	r2, [r3, #0]
      break;
 800d0f6:	4770      	bx	lr

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
   case DTYPE_BITARR16:
      *(uint16_t *)obj->data = value & UINT16_MAX;
 800d0f8:	6903      	ldr	r3, [r0, #16]
 800d0fa:	801a      	strh	r2, [r3, #0]
      break;
 800d0fc:	4770      	bx	lr

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
   case DTYPE_BITARR32:
      *(uint32_t *)obj->data = value & UINT32_MAX;
 800d0fe:	6903      	ldr	r3, [r0, #16]
 800d100:	601a      	str	r2, [r3, #0]
      break;
 800d102:	4770      	bx	lr

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      *(uint64_t *)obj->data = value;
 800d104:	6901      	ldr	r1, [r0, #16]
 800d106:	600a      	str	r2, [r1, #0]
 800d108:	604b      	str	r3, [r1, #4]

   default:
      DPRINT ("ignored\n");
      break;
   }
}
 800d10a:	4770      	bx	lr

0800d10c <SDO_getodlistcont>:
{
 800d10c:	b570      	push	{r4, r5, r6, lr}
   MBXout = ESC_claimbuffer ();
 800d10e:	f7ff f913 	bl	800c338 <ESC_claimbuffer>
   if (MBXout)
 800d112:	2800      	cmp	r0, #0
 800d114:	d059      	beq.n	800d1ca <SDO_getodlistcont+0xbe>
 800d116:	4686      	mov	lr, r0
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800d118:	492c      	ldr	r1, [pc, #176]	; (800d1cc <SDO_getodlistcont+0xc0>)
 800d11a:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
 800d11c:	fb03 fc00 	mul.w	ip, r3, r0
 800d120:	4c2b      	ldr	r4, [pc, #172]	; (800d1d0 <SDO_getodlistcont+0xc4>)
 800d122:	eb0c 0204 	add.w	r2, ip, r4
      coel->mbxheader.mbxtype = MBXCOE;
 800d126:	7953      	ldrb	r3, [r2, #5]
 800d128:	2003      	movs	r0, #3
 800d12a:	f360 0303 	bfi	r3, r0, #0, #4
 800d12e:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 800d130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d134:	80d3      	strh	r3, [r2, #6]
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 800d136:	7a13      	ldrb	r3, [r2, #8]
 800d138:	2002      	movs	r0, #2
 800d13a:	f360 0306 	bfi	r3, r0, #0, #7
 800d13e:	7213      	strb	r3, [r2, #8]
      s = (uint16_t)((ESCvar.frags - ESCvar.fragsleft) * (ODLISTSIZE >> 1));
 800d140:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 800d144:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 800d148:	1a1e      	subs	r6, r3, r0
 800d14a:	b2b6      	uxth	r6, r6
 800d14c:	6f49      	ldr	r1, [r1, #116]	; 0x74
 800d14e:	884b      	ldrh	r3, [r1, #2]
 800d150:	3b0e      	subs	r3, #14
 800d152:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800d156:	fb16 f603 	smulbb	r6, r6, r3
 800d15a:	b2b6      	uxth	r6, r6
      if (ESCvar.fragsleft > 1)
 800d15c:	2801      	cmp	r0, #1
 800d15e:	d913      	bls.n	800d188 <SDO_getodlistcont+0x7c>
         coel->infoheader.incomplete = 1;
 800d160:	7a13      	ldrb	r3, [r2, #8]
 800d162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d166:	7213      	strb	r3, [r2, #8]
         n = (uint16_t)(s + (ODLISTSIZE >> 1));
 800d168:	8849      	ldrh	r1, [r1, #2]
 800d16a:	390e      	subs	r1, #14
 800d16c:	f3c1 014e 	ubfx	r1, r1, #1, #15
 800d170:	4431      	add	r1, r6
 800d172:	b289      	uxth	r1, r1
      coel->infoheader.reserved = 0x00;
 800d174:	2300      	movs	r3, #0
 800d176:	7253      	strb	r3, [r2, #9]
      ESCvar.fragsleft--;
 800d178:	3801      	subs	r0, #1
 800d17a:	4b14      	ldr	r3, [pc, #80]	; (800d1cc <SDO_getodlistcont+0xc0>)
 800d17c:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
      coel->infoheader.fragmentsleft = htoes ((uint16_t)ESCvar.fragsleft);
 800d180:	8150      	strh	r0, [r2, #10]
      p = &(coel->index);
 800d182:	320c      	adds	r2, #12
      for (i = s; i < n; i++)
 800d184:	4633      	mov	r3, r6
 800d186:	e013      	b.n	800d1b0 <SDO_getodlistcont+0xa4>
         coel->infoheader.incomplete = 0;
 800d188:	7a13      	ldrb	r3, [r2, #8]
 800d18a:	f36f 13c7 	bfc	r3, #7, #1
 800d18e:	7213      	strb	r3, [r2, #8]
         MBXcontrol[0].state = MBXstate_idle;
 800d190:	2100      	movs	r1, #0
 800d192:	4b10      	ldr	r3, [pc, #64]	; (800d1d4 <SDO_getodlistcont+0xc8>)
 800d194:	7019      	strb	r1, [r3, #0]
         ESCvar.xoe = 0;
 800d196:	4b0d      	ldr	r3, [pc, #52]	; (800d1cc <SDO_getodlistcont+0xc0>)
 800d198:	f883 108e 	strb.w	r1, [r3, #142]	; 0x8e
         n = ESCvar.entries;
 800d19c:	f8b3 1098 	ldrh.w	r1, [r3, #152]	; 0x98
 800d1a0:	e7e8      	b.n	800d174 <SDO_getodlistcont+0x68>
         *p = htoes (SDOobjects[i].index);
 800d1a2:	0118      	lsls	r0, r3, #4
 800d1a4:	4d0c      	ldr	r5, [pc, #48]	; (800d1d8 <SDO_getodlistcont+0xcc>)
 800d1a6:	5a28      	ldrh	r0, [r5, r0]
 800d1a8:	f822 0b02 	strh.w	r0, [r2], #2
      for (i = s; i < n; i++)
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	428b      	cmp	r3, r1
 800d1b2:	d3f6      	bcc.n	800d1a2 <SDO_getodlistcont+0x96>
      coel->mbxheader.length = htoes (0x06 + ((n - s) << 1));
 800d1b4:	1b8b      	subs	r3, r1, r6
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	005b      	lsls	r3, r3, #1
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	3306      	adds	r3, #6
 800d1be:	f824 300c 	strh.w	r3, [r4, ip]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d1c2:	4b04      	ldr	r3, [pc, #16]	; (800d1d4 <SDO_getodlistcont+0xc8>)
 800d1c4:	2203      	movs	r2, #3
 800d1c6:	f803 200e 	strb.w	r2, [r3, lr]
}
 800d1ca:	bd70      	pop	{r4, r5, r6, pc}
 800d1cc:	20007f34 	.word	0x20007f34
 800d1d0:	20008620 	.word	0x20008620
 800d1d4:	20008c20 	.word	0x20008c20
 800d1d8:	0801546c 	.word	0x0801546c

0800d1dc <SDO_infoerror>:
{
 800d1dc:	b538      	push	{r3, r4, r5, lr}
 800d1de:	4604      	mov	r4, r0
   MBXout = ESC_claimbuffer ();
 800d1e0:	f7ff f8aa 	bl	800c338 <ESC_claimbuffer>
   if (MBXout)
 800d1e4:	b340      	cbz	r0, 800d238 <SDO_infoerror+0x5c>
 800d1e6:	4601      	mov	r1, r0
      coeres = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800d1e8:	4814      	ldr	r0, [pc, #80]	; (800d23c <SDO_infoerror+0x60>)
 800d1ea:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800d1ec:	fb01 f202 	mul.w	r2, r1, r2
 800d1f0:	4d13      	ldr	r5, [pc, #76]	; (800d240 <SDO_infoerror+0x64>)
 800d1f2:	1953      	adds	r3, r2, r5
      coeres->mbxheader.length = htoes (COE_HEADERSIZE);
 800d1f4:	f04f 0c0a 	mov.w	ip, #10
 800d1f8:	f825 c002 	strh.w	ip, [r5, r2]
      coeres->mbxheader.mbxtype = MBXCOE;
 800d1fc:	795a      	ldrb	r2, [r3, #5]
 800d1fe:	f04f 0c03 	mov.w	ip, #3
 800d202:	f36c 0203 	bfi	r2, ip, #0, #4
 800d206:	715a      	strb	r2, [r3, #5]
      coeres->coeheader.numberservice =
 800d208:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d20c:	80da      	strh	r2, [r3, #6]
      coeres->infoheader.opcode = COE_INFOERROR;
 800d20e:	7a1a      	ldrb	r2, [r3, #8]
 800d210:	2507      	movs	r5, #7
 800d212:	f365 0206 	bfi	r2, r5, #0, #7
 800d216:	721a      	strb	r2, [r3, #8]
      coeres->infoheader.incomplete = 0;
 800d218:	b2d2      	uxtb	r2, r2
 800d21a:	f36f 12c7 	bfc	r2, #7, #1
 800d21e:	721a      	strb	r2, [r3, #8]
      coeres->infoheader.reserved = 0x00;
 800d220:	2200      	movs	r2, #0
 800d222:	725a      	strb	r2, [r3, #9]
      coeres->infoheader.fragmentsleft = 0;
 800d224:	815a      	strh	r2, [r3, #10]
      coeres->index = (uint16_t)htoel (abortcode);
 800d226:	819c      	strh	r4, [r3, #12]
      coeres->datatype = (uint16_t)(htoel (abortcode) >> 16);
 800d228:	0c24      	lsrs	r4, r4, #16
 800d22a:	81dc      	strh	r4, [r3, #14]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d22c:	4b05      	ldr	r3, [pc, #20]	; (800d244 <SDO_infoerror+0x68>)
 800d22e:	f803 c001 	strb.w	ip, [r3, r1]
      MBXcontrol[0].state = MBXstate_idle;
 800d232:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 800d234:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
}
 800d238:	bd38      	pop	{r3, r4, r5, pc}
 800d23a:	bf00      	nop
 800d23c:	20007f34 	.word	0x20007f34
 800d240:	20008620 	.word	0x20008620
 800d244:	20008c20 	.word	0x20008c20

0800d248 <SDO_getodlist>:
{
 800d248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t entries = 0;
 800d24a:	2400      	movs	r4, #0
   while (SDOobjects[entries].index != 0xffff)
 800d24c:	e001      	b.n	800d252 <SDO_getodlist+0xa>
      entries++;
 800d24e:	3401      	adds	r4, #1
 800d250:	b2a4      	uxth	r4, r4
   while (SDOobjects[entries].index != 0xffff)
 800d252:	0123      	lsls	r3, r4, #4
 800d254:	4a46      	ldr	r2, [pc, #280]	; (800d370 <SDO_getodlist+0x128>)
 800d256:	5ad2      	ldrh	r2, [r2, r3]
 800d258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d1f6      	bne.n	800d24e <SDO_getodlist+0x6>
   ESCvar.entries = entries;
 800d260:	4b44      	ldr	r3, [pc, #272]	; (800d374 <SDO_getodlist+0x12c>)
 800d262:	f8a3 4098 	strh.w	r4, [r3, #152]	; 0x98
   frags = ((uint32_t)(entries << 1) + ODLISTSIZE - 1U);
 800d266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d268:	885b      	ldrh	r3, [r3, #2]
 800d26a:	3b0e      	subs	r3, #14
 800d26c:	f023 0301 	bic.w	r3, r3, #1
 800d270:	041b      	lsls	r3, r3, #16
 800d272:	0c1b      	lsrs	r3, r3, #16
 800d274:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800d278:	3901      	subs	r1, #1
   frags /= ODLISTSIZE;
 800d27a:	fbb1 f5f3 	udiv	r5, r1, r3
   if (etohs (coer->index) > 0x01)
 800d27e:	4b3e      	ldr	r3, [pc, #248]	; (800d378 <SDO_getodlist+0x130>)
 800d280:	899b      	ldrh	r3, [r3, #12]
 800d282:	2b01      	cmp	r3, #1
 800d284:	d903      	bls.n	800d28e <SDO_getodlist+0x46>
      SDO_infoerror (ABORT_UNSUPPORTED);
 800d286:	483d      	ldr	r0, [pc, #244]	; (800d37c <SDO_getodlist+0x134>)
 800d288:	f7ff ffa8 	bl	800d1dc <SDO_infoerror>
}
 800d28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MBXout = ESC_claimbuffer ();
 800d28e:	f7ff f853 	bl	800c338 <ESC_claimbuffer>
   if (MBXout)
 800d292:	4684      	mov	ip, r0
 800d294:	2800      	cmp	r0, #0
 800d296:	d0f9      	beq.n	800d28c <SDO_getodlist+0x44>
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800d298:	4b36      	ldr	r3, [pc, #216]	; (800d374 <SDO_getodlist+0x12c>)
 800d29a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d29c:	fb00 f00c 	mul.w	r0, r0, ip
 800d2a0:	4e35      	ldr	r6, [pc, #212]	; (800d378 <SDO_getodlist+0x130>)
 800d2a2:	1983      	adds	r3, r0, r6
      coel->mbxheader.mbxtype = MBXCOE;
 800d2a4:	795a      	ldrb	r2, [r3, #5]
 800d2a6:	2103      	movs	r1, #3
 800d2a8:	f361 0203 	bfi	r2, r1, #0, #4
 800d2ac:	715a      	strb	r2, [r3, #5]
      coel->coeheader.numberservice =
 800d2ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d2b2:	80da      	strh	r2, [r3, #6]
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 800d2b4:	7a1a      	ldrb	r2, [r3, #8]
 800d2b6:	2102      	movs	r1, #2
 800d2b8:	f361 0206 	bfi	r2, r1, #0, #7
 800d2bc:	721a      	strb	r2, [r3, #8]
      if (etohs (coer->index) == 0x00)
 800d2be:	89b2      	ldrh	r2, [r6, #12]
 800d2c0:	b9ba      	cbnz	r2, 800d2f2 <SDO_getodlist+0xaa>
         coel->index = htoes (0x00);
 800d2c2:	819a      	strh	r2, [r3, #12]
         coel->infoheader.incomplete = 0;
 800d2c4:	7a19      	ldrb	r1, [r3, #8]
 800d2c6:	f362 11c7 	bfi	r1, r2, #7, #1
 800d2ca:	7219      	strb	r1, [r3, #8]
         coel->infoheader.reserved = 0x00;
 800d2cc:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 800d2ce:	815a      	strh	r2, [r3, #10]
         MBXcontrol[0].state = MBXstate_idle;
 800d2d0:	492b      	ldr	r1, [pc, #172]	; (800d380 <SDO_getodlist+0x138>)
 800d2d2:	700a      	strb	r2, [r1, #0]
         ESCvar.xoe = 0;
 800d2d4:	4927      	ldr	r1, [pc, #156]	; (800d374 <SDO_getodlist+0x12c>)
 800d2d6:	f881 208e 	strb.w	r2, [r1, #142]	; 0x8e
         ESCvar.frags = frags;
 800d2da:	f8c1 509c 	str.w	r5, [r1, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 800d2de:	1e6f      	subs	r7, r5, #1
 800d2e0:	f8c1 70a0 	str.w	r7, [r1, #160]	; 0xa0
         *p = htoes (entries);
 800d2e4:	81dc      	strh	r4, [r3, #14]
         *p = 0;
 800d2e6:	821a      	strh	r2, [r3, #16]
         *p = 0;
 800d2e8:	825a      	strh	r2, [r3, #18]
         *p = 0;
 800d2ea:	829a      	strh	r2, [r3, #20]
         *p = 0;
 800d2ec:	82da      	strh	r2, [r3, #22]
         coel->mbxheader.length = htoes (0x08 + (5 << 1));
 800d2ee:	2212      	movs	r2, #18
 800d2f0:	5232      	strh	r2, [r6, r0]
      if (etohs (coer->index) == 0x01)
 800d2f2:	4a21      	ldr	r2, [pc, #132]	; (800d378 <SDO_getodlist+0x130>)
 800d2f4:	8992      	ldrh	r2, [r2, #12]
 800d2f6:	2a01      	cmp	r2, #1
 800d2f8:	d004      	beq.n	800d304 <SDO_getodlist+0xbc>
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d2fa:	4b21      	ldr	r3, [pc, #132]	; (800d380 <SDO_getodlist+0x138>)
 800d2fc:	2203      	movs	r2, #3
 800d2fe:	f803 200c 	strb.w	r2, [r3, ip]
}
 800d302:	e7c3      	b.n	800d28c <SDO_getodlist+0x44>
         if (frags > 1)
 800d304:	2d01      	cmp	r5, #1
 800d306:	d919      	bls.n	800d33c <SDO_getodlist+0xf4>
            coel->infoheader.incomplete = 1;
 800d308:	7a1a      	ldrb	r2, [r3, #8]
 800d30a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d30e:	721a      	strb	r2, [r3, #8]
            ESCvar.xoe = MBXCOE + MBXODL;
 800d310:	4a18      	ldr	r2, [pc, #96]	; (800d374 <SDO_getodlist+0x12c>)
 800d312:	2113      	movs	r1, #19
 800d314:	f882 108e 	strb.w	r1, [r2, #142]	; 0x8e
            n = ODLISTSIZE >> 1;
 800d318:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d31a:	8854      	ldrh	r4, [r2, #2]
 800d31c:	3c0e      	subs	r4, #14
 800d31e:	f3c4 044e 	ubfx	r4, r4, #1, #15
         coel->infoheader.reserved = 0x00;
 800d322:	2200      	movs	r2, #0
 800d324:	725a      	strb	r2, [r3, #9]
         ESCvar.frags = frags;
 800d326:	4f13      	ldr	r7, [pc, #76]	; (800d374 <SDO_getodlist+0x12c>)
 800d328:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 800d32c:	3d01      	subs	r5, #1
 800d32e:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
         coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 800d332:	815d      	strh	r5, [r3, #10]
         coel->index = htoes (0x01);
 800d334:	2101      	movs	r1, #1
 800d336:	8199      	strh	r1, [r3, #12]
         p = &(coel->datatype);
 800d338:	330e      	adds	r3, #14
         for (i = 0; i < n; i++)
 800d33a:	e011      	b.n	800d360 <SDO_getodlist+0x118>
            coel->infoheader.incomplete = 0;
 800d33c:	7a1a      	ldrb	r2, [r3, #8]
 800d33e:	f36f 12c7 	bfc	r2, #7, #1
 800d342:	721a      	strb	r2, [r3, #8]
            MBXcontrol[0].state = MBXstate_idle;
 800d344:	2200      	movs	r2, #0
 800d346:	490e      	ldr	r1, [pc, #56]	; (800d380 <SDO_getodlist+0x138>)
 800d348:	700a      	strb	r2, [r1, #0]
            ESCvar.xoe = 0;
 800d34a:	490a      	ldr	r1, [pc, #40]	; (800d374 <SDO_getodlist+0x12c>)
 800d34c:	f881 208e 	strb.w	r2, [r1, #142]	; 0x8e
            n = entries;
 800d350:	e7e7      	b.n	800d322 <SDO_getodlist+0xda>
            *p = htoes (SDOobjects[i].index);
 800d352:	0111      	lsls	r1, r2, #4
 800d354:	4d06      	ldr	r5, [pc, #24]	; (800d370 <SDO_getodlist+0x128>)
 800d356:	5a69      	ldrh	r1, [r5, r1]
 800d358:	f823 1b02 	strh.w	r1, [r3], #2
         for (i = 0; i < n; i++)
 800d35c:	3201      	adds	r2, #1
 800d35e:	b292      	uxth	r2, r2
 800d360:	42a2      	cmp	r2, r4
 800d362:	d3f6      	bcc.n	800d352 <SDO_getodlist+0x10a>
         coel->mbxheader.length = htoes (0x08 + (n << 1));
 800d364:	0063      	lsls	r3, r4, #1
 800d366:	b29b      	uxth	r3, r3
 800d368:	3308      	adds	r3, #8
 800d36a:	5233      	strh	r3, [r6, r0]
 800d36c:	e7c5      	b.n	800d2fa <SDO_getodlist+0xb2>
 800d36e:	bf00      	nop
 800d370:	0801546c 	.word	0x0801546c
 800d374:	20007f34 	.word	0x20007f34
 800d378:	20008620 	.word	0x20008620
 800d37c:	06010000 	.word	0x06010000
 800d380:	20008c20 	.word	0x20008c20

0800d384 <SDO_abort>:
{
 800d384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d386:	460e      	mov	r6, r1
 800d388:	4615      	mov	r5, r2
 800d38a:	461f      	mov	r7, r3
   if (reusembx)
 800d38c:	4604      	mov	r4, r0
 800d38e:	b300      	cbz	r0, 800d3d2 <SDO_abort+0x4e>
   if (MBXout)
 800d390:	b1f4      	cbz	r4, 800d3d0 <SDO_abort+0x4c>
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800d392:	4b12      	ldr	r3, [pc, #72]	; (800d3dc <SDO_abort+0x58>)
 800d394:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d396:	fb04 f000 	mul.w	r0, r4, r0
 800d39a:	4b11      	ldr	r3, [pc, #68]	; (800d3e0 <SDO_abort+0x5c>)
 800d39c:	eb00 0c03 	add.w	ip, r0, r3
      coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800d3a0:	220a      	movs	r2, #10
 800d3a2:	521a      	strh	r2, [r3, r0]
      coeres->mbxheader.mbxtype = MBXCOE;
 800d3a4:	f89c 2005 	ldrb.w	r2, [ip, #5]
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	f363 0203 	bfi	r2, r3, #0, #4
 800d3ae:	f88c 2005 	strb.w	r2, [ip, #5]
      coeres->coeheader.numberservice =
 800d3b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d3b6:	f8ac 2006 	strh.w	r2, [ip, #6]
      coeres->index = htoes (index);
 800d3ba:	f8ac 6009 	strh.w	r6, [ip, #9]
      coeres->subindex = subindex;
 800d3be:	f88c 500b 	strb.w	r5, [ip, #11]
      coeres->command = COE_COMMAND_SDOABORT;
 800d3c2:	2280      	movs	r2, #128	; 0x80
 800d3c4:	f88c 2008 	strb.w	r2, [ip, #8]
      coeres->size = htoel (abortcode);
 800d3c8:	f8cc 700c 	str.w	r7, [ip, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d3cc:	4a05      	ldr	r2, [pc, #20]	; (800d3e4 <SDO_abort+0x60>)
 800d3ce:	5513      	strb	r3, [r2, r4]
}
 800d3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MBXout = ESC_claimbuffer ();
 800d3d2:	f7fe ffb1 	bl	800c338 <ESC_claimbuffer>
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	e7da      	b.n	800d390 <SDO_abort+0xc>
 800d3da:	bf00      	nop
 800d3dc:	20007f34 	.word	0x20007f34
 800d3e0:	20008620 	.word	0x20008620
 800d3e4:	20008c20 	.word	0x20008c20

0800d3e8 <set_state_idle>:
{
 800d3e8:	b508      	push	{r3, lr}
   if (abortcode != 0)
 800d3ea:	b933      	cbnz	r3, 800d3fa <set_state_idle+0x12>
   MBXcontrol[0].state = MBXstate_idle;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	4a04      	ldr	r2, [pc, #16]	; (800d400 <set_state_idle+0x18>)
 800d3f0:	7013      	strb	r3, [r2, #0]
   ESCvar.xoe = 0;
 800d3f2:	4a04      	ldr	r2, [pc, #16]	; (800d404 <set_state_idle+0x1c>)
 800d3f4:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
}
 800d3f8:	bd08      	pop	{r3, pc}
      SDO_abort (reusembx, index, subindex, abortcode);
 800d3fa:	f7ff ffc3 	bl	800d384 <SDO_abort>
 800d3fe:	e7f5      	b.n	800d3ec <set_state_idle+0x4>
 800d400:	20008c20 	.word	0x20008c20
 800d404:	20007f34 	.word	0x20007f34

0800d408 <copy2mbx>:
{
 800d408:	b508      	push	{r3, lr}
 800d40a:	460b      	mov	r3, r1
   memcpy (dest, source, size);
 800d40c:	4601      	mov	r1, r0
 800d40e:	4618      	mov	r0, r3
 800d410:	f004 fc7a 	bl	8011d08 <memcpy>
}
 800d414:	bd08      	pop	{r3, pc}
	...

0800d418 <SDO_uploadsegment>:
{
 800d418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d41c:	b082      	sub	sp, #8
   MBXout = ESC_claimbuffer ();
 800d41e:	f7fe ff8b 	bl	800c338 <ESC_claimbuffer>
   if (MBXout)
 800d422:	b940      	cbnz	r0, 800d436 <SDO_uploadsegment+0x1e>
   MBXcontrol[0].state = MBXstate_idle;
 800d424:	2300      	movs	r3, #0
 800d426:	4a39      	ldr	r2, [pc, #228]	; (800d50c <SDO_uploadsegment+0xf4>)
 800d428:	7013      	strb	r3, [r2, #0]
   ESCvar.xoe = 0;
 800d42a:	4a39      	ldr	r2, [pc, #228]	; (800d510 <SDO_uploadsegment+0xf8>)
 800d42c:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
}
 800d430:	b002      	add	sp, #8
 800d432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d436:	4606      	mov	r6, r0
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800d438:	4f35      	ldr	r7, [pc, #212]	; (800d510 <SDO_uploadsegment+0xf8>)
 800d43a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d43c:	fb03 f800 	mul.w	r8, r3, r0
 800d440:	4d34      	ldr	r5, [pc, #208]	; (800d514 <SDO_uploadsegment+0xfc>)
 800d442:	eb08 0905 	add.w	r9, r8, r5
      offset = ESCvar.fragsleft;
 800d446:	f8d7 a0a0 	ldr.w	sl, [r7, #160]	; 0xa0
      size = ESCvar.frags - ESCvar.fragsleft;
 800d44a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800d44e:	eba4 040a 	sub.w	r4, r4, sl
            (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 800d452:	7a2a      	ldrb	r2, [r5, #8]
      init_coesdo(coeres, COE_SDORESPONSE, command,
 800d454:	7aeb      	ldrb	r3, [r5, #11]
 800d456:	9300      	str	r3, [sp, #0]
 800d458:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800d45c:	f002 0210 	and.w	r2, r2, #16
 800d460:	2103      	movs	r1, #3
 800d462:	4648      	mov	r0, r9
 800d464:	f7ff fd32 	bl	800cecc <init_coesdo>
      if ((size + COE_SEGMENTHEADERSIZE) > ESC_MBXDSIZE)
 800d468:	1ce1      	adds	r1, r4, #3
 800d46a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d46c:	1f9a      	subs	r2, r3, #6
 800d46e:	4291      	cmp	r1, r2
 800d470:	d919      	bls.n	800d4a6 <SDO_uploadsegment+0x8e>
         size = ESC_MBXDSIZE - COE_SEGMENTHEADERSIZE;
 800d472:	f1a3 0409 	sub.w	r4, r3, #9
         ESCvar.fragsleft += size;
 800d476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d47a:	4423      	add	r3, r4
 800d47c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
         coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 800d480:	1ce3      	adds	r3, r4, #3
 800d482:	f825 3008 	strh.w	r3, [r5, r8]
      copy2mbx ((uint8_t *) ESCvar.data + offset, (&(coeres->command)) + 1,
 800d486:	4d22      	ldr	r5, [pc, #136]	; (800d510 <SDO_uploadsegment+0xf8>)
 800d488:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 800d48c:	4622      	mov	r2, r4
 800d48e:	f109 0109 	add.w	r1, r9, #9
 800d492:	4450      	add	r0, sl
 800d494:	f7ff ffb8 	bl	800d408 <copy2mbx>
      if (ESCvar.segmented == 0)
 800d498:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
 800d49c:	b31b      	cbz	r3, 800d4e6 <SDO_uploadsegment+0xce>
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d49e:	4b1b      	ldr	r3, [pc, #108]	; (800d50c <SDO_uploadsegment+0xf4>)
 800d4a0:	2203      	movs	r2, #3
 800d4a2:	559a      	strb	r2, [r3, r6]
 800d4a4:	e7be      	b.n	800d424 <SDO_uploadsegment+0xc>
         ESCvar.segmented = 0;
 800d4a6:	4b1a      	ldr	r3, [pc, #104]	; (800d510 <SDO_uploadsegment+0xf8>)
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.frags = 0;
 800d4ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = 0;
 800d4b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         coeres->command |= COE_COMMAND_LASTSEGMENTBIT;
 800d4b6:	f899 3008 	ldrb.w	r3, [r9, #8]
 800d4ba:	f043 0301 	orr.w	r3, r3, #1
 800d4be:	f889 3008 	strb.w	r3, [r9, #8]
         if (size >= 7)
 800d4c2:	2c06      	cmp	r4, #6
 800d4c4:	d903      	bls.n	800d4ce <SDO_uploadsegment+0xb6>
            coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 800d4c6:	1ce3      	adds	r3, r4, #3
 800d4c8:	f825 3008 	strh.w	r3, [r5, r8]
 800d4cc:	e7db      	b.n	800d486 <SDO_uploadsegment+0x6e>
            coeres->command |= (uint8_t)((7U - size) << 1);
 800d4ce:	f1c4 0207 	rsb	r2, r4, #7
 800d4d2:	b2d2      	uxtb	r2, r2
 800d4d4:	0052      	lsls	r2, r2, #1
 800d4d6:	b2d2      	uxtb	r2, r2
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	f889 3008 	strb.w	r3, [r9, #8]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800d4de:	230a      	movs	r3, #10
 800d4e0:	f825 3008 	strh.w	r3, [r5, r8]
 800d4e4:	e7cf      	b.n	800d486 <SDO_uploadsegment+0x6e>
         abort = ESC_upload_post_objecthandler (etohs (coesdo->index),
 800d4e6:	4b0b      	ldr	r3, [pc, #44]	; (800d514 <SDO_uploadsegment+0xfc>)
 800d4e8:	f8b5 20a8 	ldrh.w	r2, [r5, #168]	; 0xa8
 800d4ec:	7ad9      	ldrb	r1, [r3, #11]
 800d4ee:	f8b3 0009 	ldrh.w	r0, [r3, #9]
 800d4f2:	f7fe fb5f 	bl	800bbb4 <ESC_upload_post_objecthandler>
         if (abort != 0)
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d0d0      	beq.n	800d49e <SDO_uploadsegment+0x86>
            set_state_idle (MBXout, etohs (coesdo->index), coesdo->subindex, abort);
 800d4fc:	4905      	ldr	r1, [pc, #20]	; (800d514 <SDO_uploadsegment+0xfc>)
 800d4fe:	7aca      	ldrb	r2, [r1, #11]
 800d500:	f8b1 1009 	ldrh.w	r1, [r1, #9]
 800d504:	4630      	mov	r0, r6
 800d506:	f7ff ff6f 	bl	800d3e8 <set_state_idle>
            return;
 800d50a:	e791      	b.n	800d430 <SDO_uploadsegment+0x18>
 800d50c:	20008c20 	.word	0x20008c20
 800d510:	20007f34 	.word	0x20007f34
 800d514:	20008620 	.word	0x20008620

0800d518 <complete_access_subindex_loop>:
{
 800d518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51c:	461f      	mov	r7, r3
 800d51e:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
 800d522:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 800d526:	8843      	ldrh	r3, [r0, #2]
       (objd->datatype == DTYPE_OCTET_STRING)   ||
 800d528:	3b09      	subs	r3, #9
 800d52a:	b29b      	uxth	r3, r3
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	f240 80a0 	bls.w	800d672 <complete_access_subindex_loop+0x15a>
 800d532:	4681      	mov	r9, r0
 800d534:	468a      	mov	sl, r1
 800d536:	4614      	mov	r4, r2
   if ((load_type == UPLOAD) && (mbxdata != NULL))
 800d538:	f1bb 0f00 	cmp.w	fp, #0
 800d53c:	d102      	bne.n	800d544 <complete_access_subindex_loop+0x2c>
 800d53e:	b10f      	cbz	r7, 800d544 <complete_access_subindex_loop+0x2c>
      mbxdata[1] = 0;
 800d540:	2300      	movs	r3, #0
 800d542:	707b      	strb	r3, [r7, #1]
      size += (nsub == 0) ? 16 : bitlen;
 800d544:	2600      	movs	r6, #0
 800d546:	e049      	b.n	800d5dc <complete_access_subindex_loop+0xc4>
            (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800d548:	f103 010c 	add.w	r1, r3, #12
 800d54c:	e055      	b.n	800d5fa <complete_access_subindex_loop+0xe2>
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 800d54e:	1df0      	adds	r0, r6, #7
                        BITS2BYTES(bitlen));
 800d550:	1dea      	adds	r2, r5, #7
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 800d552:	08d2      	lsrs	r2, r2, #3
 800d554:	eb07 00d0 	add.w	r0, r7, r0, lsr #3
 800d558:	f004 fbd6 	bl	8011d08 <memcpy>
 800d55c:	e032      	b.n	800d5c4 <complete_access_subindex_loop+0xac>
            else if (WRITE_ACCESS(access, state))
 800d55e:	f01c 0f08 	tst.w	ip, #8
 800d562:	d001      	beq.n	800d568 <complete_access_subindex_loop+0x50>
 800d564:	2b02      	cmp	r3, #2
 800d566:	d009      	beq.n	800d57c <complete_access_subindex_loop+0x64>
 800d568:	f01c 0f10 	tst.w	ip, #16
 800d56c:	d001      	beq.n	800d572 <complete_access_subindex_loop+0x5a>
 800d56e:	2b04      	cmp	r3, #4
 800d570:	d004      	beq.n	800d57c <complete_access_subindex_loop+0x64>
 800d572:	f01c 0f20 	tst.w	ip, #32
 800d576:	d025      	beq.n	800d5c4 <complete_access_subindex_loop+0xac>
 800d578:	2b08      	cmp	r3, #8
 800d57a:	d123      	bne.n	800d5c4 <complete_access_subindex_loop+0xac>
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 800d57c:	1df1      	adds	r1, r6, #7
                     BITS2BYTES(bitlen));
 800d57e:	1dea      	adds	r2, r5, #7
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 800d580:	08d2      	lsrs	r2, r2, #3
 800d582:	eb07 01d1 	add.w	r1, r7, r1, lsr #3
 800d586:	f004 fbbf 	bl	8011d08 <memcpy>
 800d58a:	e01b      	b.n	800d5c4 <complete_access_subindex_loop+0xac>
      else if ((load_type == UPLOAD) && (mbxdata != NULL))
 800d58c:	f1bb 0f00 	cmp.w	fp, #0
 800d590:	d118      	bne.n	800d5c4 <complete_access_subindex_loop+0xac>
 800d592:	b1bf      	cbz	r7, 800d5c4 <complete_access_subindex_loop+0xac>
         uint32_t bitmask = (1U << bitlen) - 1U;
 800d594:	2001      	movs	r0, #1
 800d596:	40a8      	lsls	r0, r5
 800d598:	3801      	subs	r0, #1
         if (READ_ACCESS(access, state))
 800d59a:	f01c 0f01 	tst.w	ip, #1
 800d59e:	d001      	beq.n	800d5a4 <complete_access_subindex_loop+0x8c>
 800d5a0:	2b02      	cmp	r3, #2
 800d5a2:	d057      	beq.n	800d654 <complete_access_subindex_loop+0x13c>
 800d5a4:	f01c 0f02 	tst.w	ip, #2
 800d5a8:	d001      	beq.n	800d5ae <complete_access_subindex_loop+0x96>
 800d5aa:	2b04      	cmp	r3, #4
 800d5ac:	d052      	beq.n	800d654 <complete_access_subindex_loop+0x13c>
 800d5ae:	f01c 0f04 	tst.w	ip, #4
 800d5b2:	d001      	beq.n	800d5b8 <complete_access_subindex_loop+0xa0>
 800d5b4:	2b08      	cmp	r3, #8
 800d5b6:	d04d      	beq.n	800d654 <complete_access_subindex_loop+0x13c>
            tempmask = ~(bitmask << bitoffset);
 800d5b8:	4090      	lsls	r0, r2
            mbxdata[BITSPOS2BYTESOFFSET(size)] &= (uint8_t)tempmask;
 800d5ba:	08f2      	lsrs	r2, r6, #3
 800d5bc:	5cbb      	ldrb	r3, [r7, r2]
 800d5be:	ea23 0300 	bic.w	r3, r3, r0
 800d5c2:	54bb      	strb	r3, [r7, r2]
      size += (nsub == 0) ? 16 : bitlen;
 800d5c4:	b904      	cbnz	r4, 800d5c8 <complete_access_subindex_loop+0xb0>
 800d5c6:	2510      	movs	r5, #16
 800d5c8:	442e      	add	r6, r5
      nsub++;
 800d5ca:	3401      	adds	r4, #1
 800d5cc:	b224      	sxth	r4, r4
      if ((max_bytes > 0) && (BITS2BYTES(size) >= max_bytes))
 800d5ce:	f1b8 0f00 	cmp.w	r8, #0
 800d5d2:	d003      	beq.n	800d5dc <complete_access_subindex_loop+0xc4>
 800d5d4:	1df3      	adds	r3, r6, #7
 800d5d6:	ebb8 0fd3 	cmp.w	r8, r3, lsr #3
 800d5da:	d94b      	bls.n	800d674 <complete_access_subindex_loop+0x15c>
   while (nsub <= SDOobjects[nidx].maxsub)
 800d5dc:	4b27      	ldr	r3, [pc, #156]	; (800d67c <complete_access_subindex_loop+0x164>)
 800d5de:	eb03 130a 	add.w	r3, r3, sl, lsl #4
 800d5e2:	791b      	ldrb	r3, [r3, #4]
 800d5e4:	429c      	cmp	r4, r3
 800d5e6:	dc45      	bgt.n	800d674 <complete_access_subindex_loop+0x15c>
      uint16_t bitlen = (objd + nsub)->bitlength;
 800d5e8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800d5ec:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d5f0:	889d      	ldrh	r5, [r3, #4]
      void *ul_source = ((objd + nsub)->data != NULL) ?
 800d5f2:	6918      	ldr	r0, [r3, #16]
            (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d0a7      	beq.n	800d548 <complete_access_subindex_loop+0x30>
 800d5f8:	4601      	mov	r1, r0
      uint8_t bitoffset = size % 8;
 800d5fa:	f006 0207 	and.w	r2, r6, #7
      uint8_t access = (objd + nsub)->flags & 0x3f;
 800d5fe:	f893 c006 	ldrb.w	ip, [r3, #6]
      uint8_t state = ESCvar.ALstatus & 0x0f;
 800d602:	4b1f      	ldr	r3, [pc, #124]	; (800d680 <complete_access_subindex_loop+0x168>)
 800d604:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d608:	f003 030f 	and.w	r3, r3, #15
      if ((bitlen % 8) == 0)
 800d60c:	f015 0f07 	tst.w	r5, #7
 800d610:	d1bc      	bne.n	800d58c <complete_access_subindex_loop+0x74>
         if (bitoffset != 0)
 800d612:	b112      	cbz	r2, 800d61a <complete_access_subindex_loop+0x102>
            size += (8U - bitoffset);
 800d614:	1ab2      	subs	r2, r6, r2
 800d616:	f102 0608 	add.w	r6, r2, #8
         if (mbxdata != NULL)
 800d61a:	2f00      	cmp	r7, #0
 800d61c:	d0d2      	beq.n	800d5c4 <complete_access_subindex_loop+0xac>
            if (load_type == UPLOAD)
 800d61e:	f1bb 0f00 	cmp.w	fp, #0
 800d622:	d19c      	bne.n	800d55e <complete_access_subindex_loop+0x46>
               if (READ_ACCESS(access, state))
 800d624:	f01c 0f01 	tst.w	ip, #1
 800d628:	d001      	beq.n	800d62e <complete_access_subindex_loop+0x116>
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d08f      	beq.n	800d54e <complete_access_subindex_loop+0x36>
 800d62e:	f01c 0f02 	tst.w	ip, #2
 800d632:	d001      	beq.n	800d638 <complete_access_subindex_loop+0x120>
 800d634:	2b04      	cmp	r3, #4
 800d636:	d08a      	beq.n	800d54e <complete_access_subindex_loop+0x36>
 800d638:	f01c 0f04 	tst.w	ip, #4
 800d63c:	d001      	beq.n	800d642 <complete_access_subindex_loop+0x12a>
 800d63e:	2b08      	cmp	r3, #8
 800d640:	d085      	beq.n	800d54e <complete_access_subindex_loop+0x36>
                  memset(&mbxdata[BITS2BYTES(size)], 0, BITS2BYTES(bitlen));
 800d642:	1df0      	adds	r0, r6, #7
 800d644:	1dea      	adds	r2, r5, #7
 800d646:	08d2      	lsrs	r2, r2, #3
 800d648:	2100      	movs	r1, #0
 800d64a:	eb07 00d0 	add.w	r0, r7, r0, lsr #3
 800d64e:	f004 fa9d 	bl	8011b8c <memset>
 800d652:	e7b7      	b.n	800d5c4 <complete_access_subindex_loop+0xac>
            if (bitoffset == 0)
 800d654:	b922      	cbnz	r2, 800d660 <complete_access_subindex_loop+0x148>
               mbxdata[BITSPOS2BYTESOFFSET(size)] = 0;
 800d656:	08f3      	lsrs	r3, r6, #3
 800d658:	f04f 0c00 	mov.w	ip, #0
 800d65c:	f807 c003 	strb.w	ip, [r7, r3]
            tempmask = (*(uint8_t *)ul_source & bitmask) << bitoffset;
 800d660:	780b      	ldrb	r3, [r1, #0]
 800d662:	4003      	ands	r3, r0
 800d664:	4093      	lsls	r3, r2
            mbxdata[BITSPOS2BYTESOFFSET(size)] |= (uint8_t)tempmask;
 800d666:	08f2      	lsrs	r2, r6, #3
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	5cb9      	ldrb	r1, [r7, r2]
 800d66c:	430b      	orrs	r3, r1
 800d66e:	54bb      	strb	r3, [r7, r2]
 800d670:	e7a8      	b.n	800d5c4 <complete_access_subindex_loop+0xac>
      return ABORT_CA_NOT_SUPPORTED;
 800d672:	4e04      	ldr	r6, [pc, #16]	; (800d684 <complete_access_subindex_loop+0x16c>)
}
 800d674:	4630      	mov	r0, r6
 800d676:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d67a:	bf00      	nop
 800d67c:	0801546c 	.word	0x0801546c
 800d680:	20007f34 	.word	0x20007f34
 800d684:	06010004 	.word	0x06010004

0800d688 <COE_getValue>:
{
 800d688:	b508      	push	{r3, lr}
   switch(obj->datatype)
 800d68a:	8843      	ldrh	r3, [r0, #2]
 800d68c:	3b01      	subs	r3, #1
 800d68e:	2b36      	cmp	r3, #54	; 0x36
 800d690:	d82d      	bhi.n	800d6ee <COE_getValue+0x66>
 800d692:	e8df f003 	tbb	[pc, r3]
 800d696:	1c1c      	.short	0x1c1c
 800d698:	201c2420 	.word	0x201c2420
 800d69c:	2c2c2424 	.word	0x2c2c2424
 800d6a0:	2c2c2c2c 	.word	0x2c2c2c2c
 800d6a4:	2c282c2c 	.word	0x2c282c2c
 800d6a8:	2c282c2c 	.word	0x2c282c2c
 800d6ac:	2c2c2c2c 	.word	0x2c2c2c2c
 800d6b0:	2c2c2c28 	.word	0x2c2c2c28
 800d6b4:	2c2c2c2c 	.word	0x2c2c2c2c
 800d6b8:	2c2c2c2c 	.word	0x2c2c2c2c
 800d6bc:	2c2c2c2c 	.word	0x2c2c2c2c
 800d6c0:	201c2c2c 	.word	0x201c2c2c
 800d6c4:	1c1c1c24 	.word	0x1c1c1c24
 800d6c8:	1c1c1c1c 	.word	0x1c1c1c1c
 800d6cc:	1c          	.byte	0x1c
 800d6cd:	00          	.byte	0x00
      value = *(uint8_t *)obj->data;
 800d6ce:	6903      	ldr	r3, [r0, #16]
 800d6d0:	7818      	ldrb	r0, [r3, #0]
 800d6d2:	2100      	movs	r1, #0
}
 800d6d4:	bd08      	pop	{r3, pc}
      value = *(uint16_t *)obj->data;
 800d6d6:	6903      	ldr	r3, [r0, #16]
 800d6d8:	8818      	ldrh	r0, [r3, #0]
 800d6da:	2100      	movs	r1, #0
      break;
 800d6dc:	e7fa      	b.n	800d6d4 <COE_getValue+0x4c>
      value = *(uint32_t *)obj->data;
 800d6de:	6903      	ldr	r3, [r0, #16]
 800d6e0:	6818      	ldr	r0, [r3, #0]
 800d6e2:	2100      	movs	r1, #0
      break;
 800d6e4:	e7f6      	b.n	800d6d4 <COE_getValue+0x4c>
      value = *(uint64_t *)obj->data;
 800d6e6:	6903      	ldr	r3, [r0, #16]
 800d6e8:	6818      	ldr	r0, [r3, #0]
 800d6ea:	6859      	ldr	r1, [r3, #4]
      break;
 800d6ec:	e7f2      	b.n	800d6d4 <COE_getValue+0x4c>
      CC_ASSERT (0);
 800d6ee:	4b03      	ldr	r3, [pc, #12]	; (800d6fc <COE_getValue+0x74>)
 800d6f0:	4a03      	ldr	r2, [pc, #12]	; (800d700 <COE_getValue+0x78>)
 800d6f2:	f240 618d 	movw	r1, #1677	; 0x68d
 800d6f6:	4803      	ldr	r0, [pc, #12]	; (800d704 <COE_getValue+0x7c>)
 800d6f8:	f004 f8c2 	bl	8011880 <__assert_func>
 800d6fc:	08013528 	.word	0x08013528
 800d700:	08013580 	.word	0x08013580
 800d704:	0801352c 	.word	0x0801352c

0800d708 <SDO_findsubindex>:
{
 800d708:	b410      	push	{r4}
   objd = SDOobjects[nidx].objdesc;
 800d70a:	4b14      	ldr	r3, [pc, #80]	; (800d75c <SDO_findsubindex+0x54>)
 800d70c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800d710:	68c4      	ldr	r4, [r0, #12]
   maxsub = SDOobjects[nidx].maxsub;
 800d712:	f890 c004 	ldrb.w	ip, [r0, #4]
   if ((subindex <= maxsub) && ((objd + subindex)->subindex == subindex))
 800d716:	458c      	cmp	ip, r1
 800d718:	d20c      	bcs.n	800d734 <SDO_findsubindex+0x2c>
 800d71a:	2000      	movs	r0, #0
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 800d71c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800d720:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 800d724:	b28b      	uxth	r3, r1
 800d726:	429a      	cmp	r2, r3
 800d728:	d20f      	bcs.n	800d74a <SDO_findsubindex+0x42>
 800d72a:	4560      	cmp	r0, ip
 800d72c:	da0d      	bge.n	800d74a <SDO_findsubindex+0x42>
      n++;
 800d72e:	3001      	adds	r0, #1
 800d730:	b200      	sxth	r0, r0
 800d732:	e7f3      	b.n	800d71c <SDO_findsubindex+0x14>
   if ((subindex <= maxsub) && ((objd + subindex)->subindex == subindex))
 800d734:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d738:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 800d73c:	b28b      	uxth	r3, r1
 800d73e:	429a      	cmp	r2, r3
 800d740:	d001      	beq.n	800d746 <SDO_findsubindex+0x3e>
 800d742:	2000      	movs	r0, #0
 800d744:	e7ea      	b.n	800d71c <SDO_findsubindex+0x14>
      return subindex;
 800d746:	b208      	sxth	r0, r1
 800d748:	e001      	b.n	800d74e <SDO_findsubindex+0x46>
   if ((objd + n)->subindex != subindex)
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d102      	bne.n	800d754 <SDO_findsubindex+0x4c>
}
 800d74e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d752:	4770      	bx	lr
      return -1;
 800d754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d758:	e7f9      	b.n	800d74e <SDO_findsubindex+0x46>
 800d75a:	bf00      	nop
 800d75c:	0801546c 	.word	0x0801546c

0800d760 <SDO_findobject>:
{
 800d760:	4601      	mov	r1, r0
   int32_t n = 0;
 800d762:	2000      	movs	r0, #0
   while (SDOobjects[n].index < index)
 800d764:	e000      	b.n	800d768 <SDO_findobject+0x8>
      n++;
 800d766:	3001      	adds	r0, #1
   while (SDOobjects[n].index < index)
 800d768:	0103      	lsls	r3, r0, #4
 800d76a:	4a04      	ldr	r2, [pc, #16]	; (800d77c <SDO_findobject+0x1c>)
 800d76c:	5ad3      	ldrh	r3, [r2, r3]
 800d76e:	428b      	cmp	r3, r1
 800d770:	d3f9      	bcc.n	800d766 <SDO_findobject+0x6>
   if (SDOobjects[n].index != index)
 800d772:	d100      	bne.n	800d776 <SDO_findobject+0x16>
}
 800d774:	4770      	bx	lr
      return -1;
 800d776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d77a:	e7fb      	b.n	800d774 <SDO_findobject+0x14>
 800d77c:	0801546c 	.word	0x0801546c

0800d780 <complete_access_get_variables>:
{
 800d780:	b538      	push	{r3, r4, r5, lr}
 800d782:	461d      	mov	r5, r3
   *index = etohs (coesdo->index);
 800d784:	f8b0 3009 	ldrh.w	r3, [r0, #9]
 800d788:	800b      	strh	r3, [r1, #0]
   *subindex = coesdo->subindex;
 800d78a:	7ac3      	ldrb	r3, [r0, #11]
 800d78c:	7013      	strb	r3, [r2, #0]
   if (*subindex > 1)
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d80f      	bhi.n	800d7b2 <complete_access_get_variables+0x32>
 800d792:	4614      	mov	r4, r2
   *nidx = SDO_findobject (*index);
 800d794:	8808      	ldrh	r0, [r1, #0]
 800d796:	f7ff ffe3 	bl	800d760 <SDO_findobject>
 800d79a:	6028      	str	r0, [r5, #0]
   if (*nidx < 0)
 800d79c:	2800      	cmp	r0, #0
 800d79e:	db0a      	blt.n	800d7b6 <complete_access_get_variables+0x36>
   *nsub = SDO_findsubindex (*nidx, *subindex);
 800d7a0:	7821      	ldrb	r1, [r4, #0]
 800d7a2:	f7ff ffb1 	bl	800d708 <SDO_findsubindex>
 800d7a6:	9b04      	ldr	r3, [sp, #16]
 800d7a8:	8018      	strh	r0, [r3, #0]
   if (*nsub < 0)
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	db05      	blt.n	800d7ba <complete_access_get_variables+0x3a>
   return 0;
 800d7ae:	2000      	movs	r0, #0
}
 800d7b0:	bd38      	pop	{r3, r4, r5, pc}
      return ABORT_UNSUPPORTED;
 800d7b2:	4803      	ldr	r0, [pc, #12]	; (800d7c0 <complete_access_get_variables+0x40>)
 800d7b4:	e7fc      	b.n	800d7b0 <complete_access_get_variables+0x30>
      return ABORT_NOOBJECT;
 800d7b6:	4803      	ldr	r0, [pc, #12]	; (800d7c4 <complete_access_get_variables+0x44>)
 800d7b8:	e7fa      	b.n	800d7b0 <complete_access_get_variables+0x30>
      return ABORT_NOSUBINDEX;
 800d7ba:	4803      	ldr	r0, [pc, #12]	; (800d7c8 <complete_access_get_variables+0x48>)
 800d7bc:	e7f8      	b.n	800d7b0 <complete_access_get_variables+0x30>
 800d7be:	bf00      	nop
 800d7c0:	06010000 	.word	0x06010000
 800d7c4:	06020000 	.word	0x06020000
 800d7c8:	06090011 	.word	0x06090011

0800d7cc <SDO_upload_complete_access>:
{
 800d7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d0:	b087      	sub	sp, #28
   uint32_t abortcode = complete_access_get_variables
 800d7d2:	f10d 030e 	add.w	r3, sp, #14
 800d7d6:	9300      	str	r3, [sp, #0]
 800d7d8:	ab04      	add	r3, sp, #16
 800d7da:	f10d 0215 	add.w	r2, sp, #21
 800d7de:	f10d 0116 	add.w	r1, sp, #22
 800d7e2:	4876      	ldr	r0, [pc, #472]	; (800d9bc <SDO_upload_complete_access+0x1f0>)
 800d7e4:	f7ff ffcc 	bl	800d780 <complete_access_get_variables>
   if (abortcode != 0)
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	f040 80a1 	bne.w	800d930 <SDO_upload_complete_access+0x164>
   uint8_t MBXout = ESC_claimbuffer ();
 800d7ee:	f7fe fda3 	bl	800c338 <ESC_claimbuffer>
   if (MBXout == 0)
 800d7f2:	4606      	mov	r6, r0
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	f000 80a6 	beq.w	800d946 <SDO_upload_complete_access+0x17a>
   const _objd *objd = SDOobjects[nidx].objdesc;
 800d7fa:	9904      	ldr	r1, [sp, #16]
 800d7fc:	4b70      	ldr	r3, [pc, #448]	; (800d9c0 <SDO_upload_complete_access+0x1f4>)
 800d7fe:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d802:	68dd      	ldr	r5, [r3, #12]
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, UPLOAD, 0);
 800d804:	2300      	movs	r3, #0
 800d806:	9301      	str	r3, [sp, #4]
 800d808:	9300      	str	r3, [sp, #0]
 800d80a:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800d80e:	4628      	mov	r0, r5
 800d810:	f7ff fe82 	bl	800d518 <complete_access_subindex_loop>
 800d814:	9002      	str	r0, [sp, #8]
   uint8_t dss = (size > 24) ? 0 : (uint8_t)(4U * (3U - ((size - 1U) >> 3)));
 800d816:	2818      	cmp	r0, #24
 800d818:	f200 809e 	bhi.w	800d958 <SDO_upload_complete_access+0x18c>
 800d81c:	1e44      	subs	r4, r0, #1
 800d81e:	08e4      	lsrs	r4, r4, #3
 800d820:	f1c4 0403 	rsb	r4, r4, #3
 800d824:	b2e4      	uxtb	r4, r4
 800d826:	00a4      	lsls	r4, r4, #2
 800d828:	b2e4      	uxtb	r4, r4
   size = BITS2BYTES(size);
 800d82a:	3007      	adds	r0, #7
 800d82c:	08c3      	lsrs	r3, r0, #3
 800d82e:	9302      	str	r3, [sp, #8]
   if (size > 0xffff)
 800d830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d834:	f080 8092 	bcs.w	800d95c <SDO_upload_complete_access+0x190>
   if ((size + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 800d838:	331e      	adds	r3, #30
 800d83a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d83e:	f200 8095 	bhi.w	800d96c <SDO_upload_complete_access+0x1a0>
         objd->data, (size_t *)&size, objd->flags | COMPLETE_ACCESS_FLAG);
 800d842:	692a      	ldr	r2, [r5, #16]
 800d844:	88eb      	ldrh	r3, [r5, #6]
   abortcode = ESC_upload_pre_objecthandler(index, subindex,
 800d846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	ab02      	add	r3, sp, #8
 800d84e:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800d852:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800d856:	f7fe f99d 	bl	800bb94 <ESC_upload_pre_objecthandler>
   if (abortcode != 0)
 800d85a:	4603      	mov	r3, r0
 800d85c:	2800      	cmp	r0, #0
 800d85e:	f040 808e 	bne.w	800d97e <SDO_upload_complete_access+0x1b2>
   complete_access_subindex_loop(objd, nidx, nsub, ESCvar.mbxdata, UPLOAD, 0);
 800d862:	4f58      	ldr	r7, [pc, #352]	; (800d9c4 <SDO_upload_complete_access+0x1f8>)
 800d864:	f04f 0a00 	mov.w	sl, #0
 800d868:	f8cd a004 	str.w	sl, [sp, #4]
 800d86c:	f8cd a000 	str.w	sl, [sp]
 800d870:	463b      	mov	r3, r7
 800d872:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800d876:	9904      	ldr	r1, [sp, #16]
 800d878:	4628      	mov	r0, r5
 800d87a:	f7ff fe4d 	bl	800d518 <complete_access_subindex_loop>
   _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800d87e:	f857 3c7e 	ldr.w	r3, [r7, #-126]
 800d882:	fb03 f806 	mul.w	r8, r3, r6
 800d886:	f8df b134 	ldr.w	fp, [pc, #308]	; 800d9bc <SDO_upload_complete_access+0x1f0>
 800d88a:	eb08 090b 	add.w	r9, r8, fp
   init_coesdo(coeres, COE_SDORESPONSE,
 800d88e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800d898:	2251      	movs	r2, #81	; 0x51
 800d89a:	2103      	movs	r1, #3
 800d89c:	4648      	mov	r0, r9
 800d89e:	f7ff fb15 	bl	800cecc <init_coesdo>
   ESCvar.segmented = 0;
 800d8a2:	f807 ac59 	strb.w	sl, [r7, #-89]
   _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800d8a6:	3fea      	subs	r7, #234	; 0xea
   if (size <= 4)
 800d8a8:	9a02      	ldr	r2, [sp, #8]
 800d8aa:	2a04      	cmp	r2, #4
 800d8ac:	d96f      	bls.n	800d98e <SDO_upload_complete_access+0x1c2>
      coeres->size = htoel (size);
 800d8ae:	f8c9 200c 	str.w	r2, [r9, #12]
      if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 800d8b2:	f102 030a 	add.w	r3, r2, #10
 800d8b6:	4944      	ldr	r1, [pc, #272]	; (800d9c8 <SDO_upload_complete_access+0x1fc>)
 800d8b8:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 800d8ba:	1f88      	subs	r0, r1, #6
 800d8bc:	4283      	cmp	r3, r0
 800d8be:	d911      	bls.n	800d8e4 <SDO_upload_complete_access+0x118>
         ESCvar.frags = size;
 800d8c0:	4b41      	ldr	r3, [pc, #260]	; (800d9c8 <SDO_upload_complete_access+0x1fc>)
 800d8c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800d8c6:	3910      	subs	r1, #16
 800d8c8:	9102      	str	r1, [sp, #8]
         ESCvar.fragsleft = size;
 800d8ca:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
         ESCvar.segmented = MBXSEU;
 800d8ce:	2240      	movs	r2, #64	; 0x40
 800d8d0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.data = ESCvar.mbxdata;
 800d8d4:	f103 02ea 	add.w	r2, r3, #234	; 0xea
 800d8d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 800d8dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d8e0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
      coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 800d8e4:	9a02      	ldr	r2, [sp, #8]
 800d8e6:	f102 030a 	add.w	r3, r2, #10
 800d8ea:	f82b 3008 	strh.w	r3, [fp, r8]
      memcpy((&(coeres->size)) + 1, ESCvar.mbxdata, size);
 800d8ee:	4935      	ldr	r1, [pc, #212]	; (800d9c4 <SDO_upload_complete_access+0x1f8>)
 800d8f0:	f109 0010 	add.w	r0, r9, #16
 800d8f4:	f004 fa08 	bl	8011d08 <memcpy>
   if (ESCvar.segmented == 0)
 800d8f8:	4b33      	ldr	r3, [pc, #204]	; (800d9c8 <SDO_upload_complete_access+0x1fc>)
 800d8fa:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d8fe:	b95b      	cbnz	r3, 800d918 <SDO_upload_complete_access+0x14c>
            objd->flags | COMPLETE_ACCESS_FLAG);
 800d900:	88ea      	ldrh	r2, [r5, #6]
      abortcode = ESC_upload_post_objecthandler (index, subindex,
 800d902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d906:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800d90a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800d90e:	f7fe f951 	bl	800bbb4 <ESC_upload_post_objecthandler>
      if (abortcode != 0)
 800d912:	4603      	mov	r3, r0
 800d914:	2800      	cmp	r0, #0
 800d916:	d148      	bne.n	800d9aa <SDO_upload_complete_access+0x1de>
   MBXcontrol[MBXout].state = MBXstate_outreq;
 800d918:	4b2c      	ldr	r3, [pc, #176]	; (800d9cc <SDO_upload_complete_access+0x200>)
 800d91a:	2203      	movs	r2, #3
 800d91c:	559a      	strb	r2, [r3, r6]
   set_state_idle (MBXout, index, subindex, 0);
 800d91e:	2300      	movs	r3, #0
 800d920:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d924:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d928:	4630      	mov	r0, r6
 800d92a:	f7ff fd5d 	bl	800d3e8 <set_state_idle>
 800d92e:	e007      	b.n	800d940 <SDO_upload_complete_access+0x174>
 800d930:	4603      	mov	r3, r0
      set_state_idle (0, index, subindex, abortcode);
 800d932:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d936:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d93a:	2000      	movs	r0, #0
 800d93c:	f7ff fd54 	bl	800d3e8 <set_state_idle>
}
 800d940:	b007      	add	sp, #28
 800d942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      set_state_idle (0, index, subindex, 0);
 800d946:	2300      	movs	r3, #0
 800d948:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d94c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d950:	4618      	mov	r0, r3
 800d952:	f7ff fd49 	bl	800d3e8 <set_state_idle>
      return;
 800d956:	e7f3      	b.n	800d940 <SDO_upload_complete_access+0x174>
   uint8_t dss = (size > 24) ? 0 : (uint8_t)(4U * (3U - ((size - 1U) >> 3)));
 800d958:	2400      	movs	r4, #0
 800d95a:	e766      	b.n	800d82a <SDO_upload_complete_access+0x5e>
      set_state_idle (MBXout, index, subindex, size);
 800d95c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d960:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d964:	4630      	mov	r0, r6
 800d966:	f7ff fd3f 	bl	800d3e8 <set_state_idle>
      return;
 800d96a:	e7e9      	b.n	800d940 <SDO_upload_complete_access+0x174>
      set_state_idle (MBXout, index, subindex, ABORT_CA_NOT_SUPPORTED);
 800d96c:	4b18      	ldr	r3, [pc, #96]	; (800d9d0 <SDO_upload_complete_access+0x204>)
 800d96e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d972:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d976:	4630      	mov	r0, r6
 800d978:	f7ff fd36 	bl	800d3e8 <set_state_idle>
      return;
 800d97c:	e7e0      	b.n	800d940 <SDO_upload_complete_access+0x174>
      set_state_idle (MBXout, index, subindex, abortcode);
 800d97e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d982:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d986:	4630      	mov	r0, r6
 800d988:	f7ff fd2e 	bl	800d3e8 <set_state_idle>
      return;
 800d98c:	e7d8      	b.n	800d940 <SDO_upload_complete_access+0x174>
      coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 800d98e:	f899 3008 	ldrb.w	r3, [r9, #8]
 800d992:	431c      	orrs	r4, r3
 800d994:	f044 0402 	orr.w	r4, r4, #2
 800d998:	f889 4008 	strb.w	r4, [r9, #8]
      memcpy(&(coeres->size), ESCvar.mbxdata, size);
 800d99c:	f107 01ea 	add.w	r1, r7, #234	; 0xea
 800d9a0:	f109 000c 	add.w	r0, r9, #12
 800d9a4:	f004 f9b0 	bl	8011d08 <memcpy>
 800d9a8:	e7a6      	b.n	800d8f8 <SDO_upload_complete_access+0x12c>
         set_state_idle (MBXout, index, subindex, abortcode);
 800d9aa:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d9ae:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	f7ff fd18 	bl	800d3e8 <set_state_idle>
         return;
 800d9b8:	e7c2      	b.n	800d940 <SDO_upload_complete_access+0x174>
 800d9ba:	bf00      	nop
 800d9bc:	20008620 	.word	0x20008620
 800d9c0:	0801546c 	.word	0x0801546c
 800d9c4:	2000801e 	.word	0x2000801e
 800d9c8:	20007f34 	.word	0x20007f34
 800d9cc:	20008c20 	.word	0x20008c20
 800d9d0:	06010004 	.word	0x06010004

0800d9d4 <SDO_download_complete_access>:
{
 800d9d4:	b570      	push	{r4, r5, r6, lr}
 800d9d6:	b086      	sub	sp, #24
   uint32_t abortcode = complete_access_get_variables
 800d9d8:	f10d 030e 	add.w	r3, sp, #14
 800d9dc:	9300      	str	r3, [sp, #0]
 800d9de:	ab04      	add	r3, sp, #16
 800d9e0:	f10d 0215 	add.w	r2, sp, #21
 800d9e4:	f10d 0116 	add.w	r1, sp, #22
 800d9e8:	4869      	ldr	r0, [pc, #420]	; (800db90 <SDO_download_complete_access+0x1bc>)
 800d9ea:	f7ff fec9 	bl	800d780 <complete_access_get_variables>
   if (abortcode != 0)
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d166      	bne.n	800dac0 <SDO_download_complete_access+0xec>
   if (coesdo->command & COE_EXPEDITED_INDICATOR)
 800d9f2:	4b67      	ldr	r3, [pc, #412]	; (800db90 <SDO_download_complete_access+0x1bc>)
 800d9f4:	7a1c      	ldrb	r4, [r3, #8]
 800d9f6:	f014 0f02 	tst.w	r4, #2
 800d9fa:	d06a      	beq.n	800dad2 <SDO_download_complete_access+0xfe>
      bytes = 4U - ((coesdo->command & 0x0CU) >> 2);
 800d9fc:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800da00:	f1c4 0404 	rsb	r4, r4, #4
   uint32_t *mbxdata = &(coesdo->size);
 800da04:	f103 050c 	add.w	r5, r3, #12
   const _objd *objd = SDOobjects[nidx].objdesc;
 800da08:	9904      	ldr	r1, [sp, #16]
 800da0a:	4b62      	ldr	r3, [pc, #392]	; (800db94 <SDO_download_complete_access+0x1c0>)
 800da0c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800da10:	68de      	ldr	r6, [r3, #12]
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, DOWNLOAD, 0);
 800da12:	2300      	movs	r3, #0
 800da14:	9301      	str	r3, [sp, #4]
 800da16:	2201      	movs	r2, #1
 800da18:	9200      	str	r2, [sp, #0]
 800da1a:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800da1e:	4630      	mov	r0, r6
 800da20:	f7ff fd7a 	bl	800d518 <complete_access_subindex_loop>
   size = BITS2BYTES(size);
 800da24:	3007      	adds	r0, #7
 800da26:	08c3      	lsrs	r3, r0, #3
   if (size > 0xffff)
 800da28:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800da2c:	d256      	bcs.n	800dadc <SDO_download_complete_access+0x108>
   else if (bytes <= size)
 800da2e:	429c      	cmp	r4, r3
 800da30:	f200 808f 	bhi.w	800db52 <SDO_download_complete_access+0x17e>
            size, objd->flags | COMPLETE_ACCESS_FLAG);
 800da34:	88f2      	ldrh	r2, [r6, #6]
      abortcode = ESC_download_pre_objecthandler(index, subindex, mbxdata,
 800da36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800da3a:	9200      	str	r2, [sp, #0]
 800da3c:	462a      	mov	r2, r5
 800da3e:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800da42:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800da46:	f7fe f85d 	bl	800bb04 <ESC_download_pre_objecthandler>
      if (abortcode != 0)
 800da4a:	4603      	mov	r3, r0
 800da4c:	2800      	cmp	r0, #0
 800da4e:	d14d      	bne.n	800daec <SDO_download_complete_access+0x118>
      if ((bytes + COE_HEADERSIZE) > ESC_MBXDSIZE)
 800da50:	f104 030a 	add.w	r3, r4, #10
 800da54:	4a50      	ldr	r2, [pc, #320]	; (800db98 <SDO_download_complete_access+0x1c4>)
 800da56:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800da58:	1f91      	subs	r1, r2, #6
 800da5a:	428b      	cmp	r3, r1
 800da5c:	d957      	bls.n	800db0e <SDO_download_complete_access+0x13a>
         if ((bytes + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 800da5e:	f104 031e 	add.w	r3, r4, #30
 800da62:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800da66:	d849      	bhi.n	800dafc <SDO_download_complete_access+0x128>
         ESCvar.frags = bytes;
 800da68:	4b4b      	ldr	r3, [pc, #300]	; (800db98 <SDO_download_complete_access+0x1c4>)
 800da6a:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800da6e:	3a10      	subs	r2, #16
         ESCvar.fragsleft = size;
 800da70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         ESCvar.segmented = MBXSED;
 800da74:	2150      	movs	r1, #80	; 0x50
 800da76:	f883 1091 	strb.w	r1, [r3, #145]	; 0x91
         ESCvar.data = ESCvar.mbxdata + size;
 800da7a:	f103 01ea 	add.w	r1, r3, #234	; 0xea
 800da7e:	1850      	adds	r0, r2, r1
 800da80:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
         ESCvar.index = index;
 800da84:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800da88:	f8a3 00a4 	strh.w	r0, [r3, #164]	; 0xa4
         ESCvar.subindex = subindex;
 800da8c:	f89d 0015 	ldrb.w	r0, [sp, #21]
 800da90:	f883 00a6 	strb.w	r0, [r3, #166]	; 0xa6
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 800da94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800da98:	f8a3 00a8 	strh.w	r0, [r3, #168]	; 0xa8
         copy2mbx (mbxdata, ESCvar.mbxdata, size);
 800da9c:	4628      	mov	r0, r5
 800da9e:	f7ff fcb3 	bl	800d408 <copy2mbx>
   uint8_t MBXout = ESC_claimbuffer ();
 800daa2:	f7fe fc49 	bl	800c338 <ESC_claimbuffer>
   if (MBXout > 0)
 800daa6:	4604      	mov	r4, r0
 800daa8:	2800      	cmp	r0, #0
 800daaa:	d15b      	bne.n	800db64 <SDO_download_complete_access+0x190>
   set_state_idle (MBXout, index, subindex, 0);
 800daac:	2300      	movs	r3, #0
 800daae:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800dab2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800dab6:	4620      	mov	r0, r4
 800dab8:	f7ff fc96 	bl	800d3e8 <set_state_idle>
}
 800dabc:	b006      	add	sp, #24
 800dabe:	bd70      	pop	{r4, r5, r6, pc}
 800dac0:	4603      	mov	r3, r0
      set_state_idle (0, index, subindex, abortcode);
 800dac2:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800dac6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800daca:	2000      	movs	r0, #0
 800dacc:	f7ff fc8c 	bl	800d3e8 <set_state_idle>
      return;
 800dad0:	e7f4      	b.n	800dabc <SDO_download_complete_access+0xe8>
      bytes = (etohl (coesdo->size) & 0xffff);
 800dad2:	4d2f      	ldr	r5, [pc, #188]	; (800db90 <SDO_download_complete_access+0x1bc>)
 800dad4:	68ec      	ldr	r4, [r5, #12]
 800dad6:	b2a4      	uxth	r4, r4
      mbxdata++;
 800dad8:	3510      	adds	r5, #16
 800dada:	e795      	b.n	800da08 <SDO_download_complete_access+0x34>
      set_state_idle (0, index, subindex, size);
 800dadc:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800dae0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800dae4:	2000      	movs	r0, #0
 800dae6:	f7ff fc7f 	bl	800d3e8 <set_state_idle>
      return;
 800daea:	e7e7      	b.n	800dabc <SDO_download_complete_access+0xe8>
         set_state_idle (0, index, subindex, abortcode);
 800daec:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800daf0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800daf4:	2000      	movs	r0, #0
 800daf6:	f7ff fc77 	bl	800d3e8 <set_state_idle>
         return;
 800dafa:	e7df      	b.n	800dabc <SDO_download_complete_access+0xe8>
             set_state_idle(0, index, subindex, ABORT_CA_NOT_SUPPORTED);
 800dafc:	4b27      	ldr	r3, [pc, #156]	; (800db9c <SDO_download_complete_access+0x1c8>)
 800dafe:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800db02:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800db06:	2000      	movs	r0, #0
 800db08:	f7ff fc6e 	bl	800d3e8 <set_state_idle>
             return;
 800db0c:	e7d6      	b.n	800dabc <SDO_download_complete_access+0xe8>
         ESCvar.segmented = 0;
 800db0e:	4b22      	ldr	r3, [pc, #136]	; (800db98 <SDO_download_complete_access+0x1c4>)
 800db10:	2200      	movs	r2, #0
 800db12:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         complete_access_subindex_loop(objd, nidx, nsub, (uint8_t *)mbxdata, DOWNLOAD, bytes);
 800db16:	9401      	str	r4, [sp, #4]
 800db18:	2301      	movs	r3, #1
 800db1a:	9300      	str	r3, [sp, #0]
 800db1c:	462b      	mov	r3, r5
 800db1e:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800db22:	9904      	ldr	r1, [sp, #16]
 800db24:	4630      	mov	r0, r6
 800db26:	f7ff fcf7 	bl	800d518 <complete_access_subindex_loop>
               objd->flags | COMPLETE_ACCESS_FLAG);
 800db2a:	88f2      	ldrh	r2, [r6, #6]
         abortcode = ESC_download_post_objecthandler(index, subindex,
 800db2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800db30:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800db34:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800db38:	f7fe f822 	bl	800bb80 <ESC_download_post_objecthandler>
         if (abortcode != 0)
 800db3c:	4603      	mov	r3, r0
 800db3e:	2800      	cmp	r0, #0
 800db40:	d0af      	beq.n	800daa2 <SDO_download_complete_access+0xce>
            set_state_idle (0, index, subindex, abortcode);
 800db42:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800db46:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800db4a:	2000      	movs	r0, #0
 800db4c:	f7ff fc4c 	bl	800d3e8 <set_state_idle>
            return;
 800db50:	e7b4      	b.n	800dabc <SDO_download_complete_access+0xe8>
      set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 800db52:	4b13      	ldr	r3, [pc, #76]	; (800dba0 <SDO_download_complete_access+0x1cc>)
 800db54:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800db58:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800db5c:	2000      	movs	r0, #0
 800db5e:	f7ff fc43 	bl	800d3e8 <set_state_idle>
      return;
 800db62:	e7ab      	b.n	800dabc <SDO_download_complete_access+0xe8>
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800db64:	4b0c      	ldr	r3, [pc, #48]	; (800db98 <SDO_download_complete_access+0x1c4>)
 800db66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db68:	4d09      	ldr	r5, [pc, #36]	; (800db90 <SDO_download_complete_access+0x1bc>)
 800db6a:	fb03 5500 	mla	r5, r3, r0, r5
      init_coesdo(coeres, COE_SDORESPONSE,
 800db6e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800db72:	9300      	str	r3, [sp, #0]
 800db74:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800db78:	2270      	movs	r2, #112	; 0x70
 800db7a:	2103      	movs	r1, #3
 800db7c:	4628      	mov	r0, r5
 800db7e:	f7ff f9a5 	bl	800cecc <init_coesdo>
      coeres->size = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	60eb      	str	r3, [r5, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800db86:	4b07      	ldr	r3, [pc, #28]	; (800dba4 <SDO_download_complete_access+0x1d0>)
 800db88:	2203      	movs	r2, #3
 800db8a:	551a      	strb	r2, [r3, r4]
 800db8c:	e78e      	b.n	800daac <SDO_download_complete_access+0xd8>
 800db8e:	bf00      	nop
 800db90:	20008620 	.word	0x20008620
 800db94:	0801546c 	.word	0x0801546c
 800db98:	20007f34 	.word	0x20007f34
 800db9c:	06010004 	.word	0x06010004
 800dba0:	06070010 	.word	0x06070010
 800dba4:	20008c20 	.word	0x20008c20

0800dba8 <SDO_upload>:
{
 800dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbac:	b085      	sub	sp, #20
   index = etohs (coesdo->index);
 800dbae:	4b7c      	ldr	r3, [pc, #496]	; (800dda0 <SDO_upload+0x1f8>)
 800dbb0:	f8b3 6009 	ldrh.w	r6, [r3, #9]
 800dbb4:	b2b5      	uxth	r5, r6
   subindex = coesdo->subindex;
 800dbb6:	7adf      	ldrb	r7, [r3, #11]
   nidx = SDO_findobject (index);
 800dbb8:	4628      	mov	r0, r5
 800dbba:	f7ff fdd1 	bl	800d760 <SDO_findobject>
   if (nidx >= 0)
 800dbbe:	1e04      	subs	r4, r0, #0
 800dbc0:	f2c0 80de 	blt.w	800dd80 <SDO_upload+0x1d8>
      nsub = SDO_findsubindex (nidx, subindex);
 800dbc4:	4639      	mov	r1, r7
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f7ff fd9e 	bl	800d708 <SDO_findsubindex>
      if (nsub >= 0)
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	f2c0 80d0 	blt.w	800dd72 <SDO_upload+0x1ca>
         objd = SDOobjects[nidx].objdesc;
 800dbd2:	4b74      	ldr	r3, [pc, #464]	; (800dda4 <SDO_upload+0x1fc>)
 800dbd4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800dbd8:	68dc      	ldr	r4, [r3, #12]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 800dbda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dbde:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800dbe2:	79a2      	ldrb	r2, [r4, #6]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 800dbe4:	4b70      	ldr	r3, [pc, #448]	; (800dda8 <SDO_upload+0x200>)
 800dbe6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbea:	f003 030f 	and.w	r3, r3, #15
         if (!READ_ACCESS(access, state))
 800dbee:	f012 0f01 	tst.w	r2, #1
 800dbf2:	d001      	beq.n	800dbf8 <SDO_upload+0x50>
 800dbf4:	2b02      	cmp	r3, #2
 800dbf6:	d010      	beq.n	800dc1a <SDO_upload+0x72>
 800dbf8:	f012 0f02 	tst.w	r2, #2
 800dbfc:	d001      	beq.n	800dc02 <SDO_upload+0x5a>
 800dbfe:	2b04      	cmp	r3, #4
 800dc00:	d00b      	beq.n	800dc1a <SDO_upload+0x72>
 800dc02:	f012 0f04 	tst.w	r2, #4
 800dc06:	d001      	beq.n	800dc0c <SDO_upload+0x64>
 800dc08:	2b08      	cmp	r3, #8
 800dc0a:	d006      	beq.n	800dc1a <SDO_upload+0x72>
            set_state_idle (0, index, subindex, ABORT_WRITEONLY);
 800dc0c:	4b67      	ldr	r3, [pc, #412]	; (800ddac <SDO_upload+0x204>)
 800dc0e:	463a      	mov	r2, r7
 800dc10:	4629      	mov	r1, r5
 800dc12:	2000      	movs	r0, #0
 800dc14:	f7ff fbe8 	bl	800d3e8 <set_state_idle>
            return;
 800dc18:	e0be      	b.n	800dd98 <SDO_upload+0x1f0>
         MBXout = ESC_claimbuffer ();
 800dc1a:	f7fe fb8d 	bl	800c338 <ESC_claimbuffer>
         if (MBXout)
 800dc1e:	4682      	mov	sl, r0
 800dc20:	2800      	cmp	r0, #0
 800dc22:	f000 80b3 	beq.w	800dd8c <SDO_upload+0x1e4>
            coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800dc26:	4b60      	ldr	r3, [pc, #384]	; (800dda8 <SDO_upload+0x200>)
 800dc28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc2a:	fb03 f900 	mul.w	r9, r3, r0
 800dc2e:	f8df b170 	ldr.w	fp, [pc, #368]	; 800dda0 <SDO_upload+0x1f8>
 800dc32:	eb09 080b 	add.w	r8, r9, fp
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800dc36:	230a      	movs	r3, #10
 800dc38:	f82b 3009 	strh.w	r3, [fp, r9]
            coeres->mbxheader.mbxtype = MBXCOE;
 800dc3c:	f898 3005 	ldrb.w	r3, [r8, #5]
 800dc40:	2203      	movs	r2, #3
 800dc42:	f362 0303 	bfi	r3, r2, #0, #4
 800dc46:	f888 3005 	strb.w	r3, [r8, #5]
            coeres->coeheader.numberservice =
 800dc4a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800dc4e:	f8a8 3006 	strh.w	r3, [r8, #6]
            size = (objd + nsub)->bitlength;
 800dc52:	88a3      	ldrh	r3, [r4, #4]
 800dc54:	9303      	str	r3, [sp, #12]
            if (size > 8)
 800dc56:	2b08      	cmp	r3, #8
 800dc58:	d833      	bhi.n	800dcc2 <SDO_upload+0x11a>
            dss = 0x0c;
 800dc5a:	220c      	movs	r2, #12
            if (size > 16)
 800dc5c:	2b10      	cmp	r3, #16
 800dc5e:	d900      	bls.n	800dc62 <SDO_upload+0xba>
               dss = 0x04;
 800dc60:	2204      	movs	r2, #4
            if (size > 24)
 800dc62:	2b18      	cmp	r3, #24
 800dc64:	d900      	bls.n	800dc68 <SDO_upload+0xc0>
               dss = 0x00;
 800dc66:	2200      	movs	r2, #0
            coeres->index = htoes (index);
 800dc68:	f8a8 6009 	strh.w	r6, [r8, #9]
            coeres->subindex = subindex;
 800dc6c:	f888 700b 	strb.w	r7, [r8, #11]
            coeres->command = COE_COMMAND_UPLOADRESPONSE |
 800dc70:	2141      	movs	r1, #65	; 0x41
 800dc72:	f888 1008 	strb.w	r1, [r8, #8]
            size = BITS2BYTES(size);
 800dc76:	3307      	adds	r3, #7
 800dc78:	08db      	lsrs	r3, r3, #3
 800dc7a:	9303      	str	r3, [sp, #12]
            if (size <= 4)
 800dc7c:	2b04      	cmp	r3, #4
 800dc7e:	d830      	bhi.n	800dce2 <SDO_upload+0x13a>
               coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 800dc80:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 800dc84:	f888 2008 	strb.w	r2, [r8, #8]
               void *dataptr = ((objd + nsub)->data) ?
 800dc88:	6922      	ldr	r2, [r4, #16]
                     (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800dc8a:	b1e2      	cbz	r2, 800dcc6 <SDO_upload+0x11e>
                     dataptr, (size_t *)&size, (objd + nsub)->flags);
 800dc8c:	88e3      	ldrh	r3, [r4, #6]
               abort = ESC_upload_pre_objecthandler (index, subindex,
 800dc8e:	9300      	str	r3, [sp, #0]
 800dc90:	ab03      	add	r3, sp, #12
 800dc92:	4639      	mov	r1, r7
 800dc94:	4628      	mov	r0, r5
 800dc96:	f7fd ff7d 	bl	800bb94 <ESC_upload_pre_objecthandler>
               if (abort == 0)
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	b9d0      	cbnz	r0, 800dcd4 <SDO_upload+0x12c>
                  if ((objd + nsub)->data == NULL)
 800dc9e:	6920      	ldr	r0, [r4, #16]
 800dca0:	b1a0      	cbz	r0, 800dccc <SDO_upload+0x124>
                     copy2mbx ((objd + nsub)->data, &(coeres->size), size);
 800dca2:	9a03      	ldr	r2, [sp, #12]
 800dca4:	f108 010c 	add.w	r1, r8, #12
 800dca8:	f7ff fbae 	bl	800d408 <copy2mbx>
            if ((abort == 0) && (ESCvar.segmented == 0))
 800dcac:	b926      	cbnz	r6, 800dcb8 <SDO_upload+0x110>
 800dcae:	4b3e      	ldr	r3, [pc, #248]	; (800dda8 <SDO_upload+0x200>)
 800dcb0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d04e      	beq.n	800dd56 <SDO_upload+0x1ae>
            MBXcontrol[MBXout].state = MBXstate_outreq;
 800dcb8:	4b3d      	ldr	r3, [pc, #244]	; (800ddb0 <SDO_upload+0x208>)
 800dcba:	2203      	movs	r2, #3
 800dcbc:	f803 200a 	strb.w	r2, [r3, sl]
 800dcc0:	e064      	b.n	800dd8c <SDO_upload+0x1e4>
               dss = 0x08;
 800dcc2:	2208      	movs	r2, #8
 800dcc4:	e7ca      	b.n	800dc5c <SDO_upload+0xb4>
                     (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800dcc6:	f104 020c 	add.w	r2, r4, #12
 800dcca:	e7df      	b.n	800dc8c <SDO_upload+0xe4>
                     coeres->size = htoel ((objd + nsub)->value);
 800dccc:	68e3      	ldr	r3, [r4, #12]
 800dcce:	f8c8 300c 	str.w	r3, [r8, #12]
 800dcd2:	e7eb      	b.n	800dcac <SDO_upload+0x104>
                  set_state_idle (MBXout, index, subindex, abort);
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	463a      	mov	r2, r7
 800dcd8:	4629      	mov	r1, r5
 800dcda:	4650      	mov	r0, sl
 800dcdc:	f7ff fb84 	bl	800d3e8 <set_state_idle>
                  return;
 800dce0:	e05a      	b.n	800dd98 <SDO_upload+0x1f0>
                     (objd + nsub)->data, (size_t *)&size, (objd + nsub)->flags);
 800dce2:	6922      	ldr	r2, [r4, #16]
 800dce4:	88e3      	ldrh	r3, [r4, #6]
               abort = ESC_upload_pre_objecthandler (index, subindex,
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	ab03      	add	r3, sp, #12
 800dcea:	4639      	mov	r1, r7
 800dcec:	4628      	mov	r0, r5
 800dcee:	f7fd ff51 	bl	800bb94 <ESC_upload_pre_objecthandler>
               if (abort == 0)
 800dcf2:	4606      	mov	r6, r0
 800dcf4:	bb40      	cbnz	r0, 800dd48 <SDO_upload+0x1a0>
                  ESCvar.frags = size;
 800dcf6:	9b03      	ldr	r3, [sp, #12]
 800dcf8:	4a2b      	ldr	r2, [pc, #172]	; (800dda8 <SDO_upload+0x200>)
 800dcfa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                  coeres->size = htoel (size);
 800dcfe:	f8c8 300c 	str.w	r3, [r8, #12]
                  if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 800dd02:	330a      	adds	r3, #10
 800dd04:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800dd06:	1f91      	subs	r1, r2, #6
 800dd08:	428b      	cmp	r3, r1
 800dd0a:	d918      	bls.n	800dd3e <SDO_upload+0x196>
                     size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800dd0c:	3a10      	subs	r2, #16
 800dd0e:	9203      	str	r2, [sp, #12]
                     ESCvar.fragsleft = size;
 800dd10:	4b25      	ldr	r3, [pc, #148]	; (800dda8 <SDO_upload+0x200>)
 800dd12:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                     ESCvar.segmented = MBXSEU;
 800dd16:	2240      	movs	r2, #64	; 0x40
 800dd18:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                     ESCvar.data = (objd + nsub)->data;
 800dd1c:	6922      	ldr	r2, [r4, #16]
 800dd1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                     ESCvar.flags = (objd + nsub)->flags;
 800dd22:	88e2      	ldrh	r2, [r4, #6]
 800dd24:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
                  coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 800dd28:	9a03      	ldr	r2, [sp, #12]
 800dd2a:	f102 030a 	add.w	r3, r2, #10
 800dd2e:	f82b 3009 	strh.w	r3, [fp, r9]
                  copy2mbx ((objd + nsub)->data, (&(coeres->size)) + 1, size);
 800dd32:	f108 0110 	add.w	r1, r8, #16
 800dd36:	6920      	ldr	r0, [r4, #16]
 800dd38:	f7ff fb66 	bl	800d408 <copy2mbx>
 800dd3c:	e7b6      	b.n	800dcac <SDO_upload+0x104>
                     ESCvar.segmented = 0;
 800dd3e:	4b1a      	ldr	r3, [pc, #104]	; (800dda8 <SDO_upload+0x200>)
 800dd40:	2200      	movs	r2, #0
 800dd42:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800dd46:	e7ef      	b.n	800dd28 <SDO_upload+0x180>
                  set_state_idle (MBXout, index, subindex, abort);
 800dd48:	4603      	mov	r3, r0
 800dd4a:	463a      	mov	r2, r7
 800dd4c:	4629      	mov	r1, r5
 800dd4e:	4650      	mov	r0, sl
 800dd50:	f7ff fb4a 	bl	800d3e8 <set_state_idle>
                  return;
 800dd54:	e020      	b.n	800dd98 <SDO_upload+0x1f0>
               abort = ESC_upload_post_objecthandler (index, subindex,
 800dd56:	88e2      	ldrh	r2, [r4, #6]
 800dd58:	4639      	mov	r1, r7
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	f7fd ff2a 	bl	800bbb4 <ESC_upload_post_objecthandler>
               if (abort != 0)
 800dd60:	4603      	mov	r3, r0
 800dd62:	2800      	cmp	r0, #0
 800dd64:	d0a8      	beq.n	800dcb8 <SDO_upload+0x110>
                  set_state_idle (MBXout, index, subindex, abort);
 800dd66:	463a      	mov	r2, r7
 800dd68:	4629      	mov	r1, r5
 800dd6a:	4650      	mov	r0, sl
 800dd6c:	f7ff fb3c 	bl	800d3e8 <set_state_idle>
                  return;
 800dd70:	e012      	b.n	800dd98 <SDO_upload+0x1f0>
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 800dd72:	4b10      	ldr	r3, [pc, #64]	; (800ddb4 <SDO_upload+0x20c>)
 800dd74:	463a      	mov	r2, r7
 800dd76:	4629      	mov	r1, r5
 800dd78:	2000      	movs	r0, #0
 800dd7a:	f7ff fb03 	bl	800d384 <SDO_abort>
 800dd7e:	e005      	b.n	800dd8c <SDO_upload+0x1e4>
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 800dd80:	4b0d      	ldr	r3, [pc, #52]	; (800ddb8 <SDO_upload+0x210>)
 800dd82:	463a      	mov	r2, r7
 800dd84:	4629      	mov	r1, r5
 800dd86:	2000      	movs	r0, #0
 800dd88:	f7ff fafc 	bl	800d384 <SDO_abort>
   MBXcontrol[0].state = MBXstate_idle;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	4a08      	ldr	r2, [pc, #32]	; (800ddb0 <SDO_upload+0x208>)
 800dd90:	7013      	strb	r3, [r2, #0]
   ESCvar.xoe = 0;
 800dd92:	4a05      	ldr	r2, [pc, #20]	; (800dda8 <SDO_upload+0x200>)
 800dd94:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
}
 800dd98:	b005      	add	sp, #20
 800dd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9e:	bf00      	nop
 800dda0:	20008620 	.word	0x20008620
 800dda4:	0801546c 	.word	0x0801546c
 800dda8:	20007f34 	.word	0x20007f34
 800ddac:	06010001 	.word	0x06010001
 800ddb0:	20008c20 	.word	0x20008c20
 800ddb4:	06090011 	.word	0x06090011
 800ddb8:	06020000 	.word	0x06020000

0800ddbc <SDO_download>:
{
 800ddbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddc0:	b083      	sub	sp, #12
   index = etohs (coesdo->index);
 800ddc2:	4b77      	ldr	r3, [pc, #476]	; (800dfa0 <SDO_download+0x1e4>)
 800ddc4:	f8b3 7009 	ldrh.w	r7, [r3, #9]
 800ddc8:	b2bd      	uxth	r5, r7
   subindex = coesdo->subindex;
 800ddca:	7ade      	ldrb	r6, [r3, #11]
   nidx = SDO_findobject (index);
 800ddcc:	4628      	mov	r0, r5
 800ddce:	f7ff fcc7 	bl	800d760 <SDO_findobject>
   if (nidx >= 0)
 800ddd2:	1e04      	subs	r4, r0, #0
 800ddd4:	f2c0 80d5 	blt.w	800df82 <SDO_download+0x1c6>
      nsub = SDO_findsubindex (nidx, subindex);
 800ddd8:	4631      	mov	r1, r6
 800ddda:	4620      	mov	r0, r4
 800dddc:	f7ff fc94 	bl	800d708 <SDO_findsubindex>
      if (nsub >= 0)
 800dde0:	2800      	cmp	r0, #0
 800dde2:	f2c0 80c7 	blt.w	800df74 <SDO_download+0x1b8>
         objd = SDOobjects[nidx].objdesc;
 800dde6:	4b6f      	ldr	r3, [pc, #444]	; (800dfa4 <SDO_download+0x1e8>)
 800dde8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800ddec:	68dc      	ldr	r4, [r3, #12]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 800ddee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ddf2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800ddf6:	79a3      	ldrb	r3, [r4, #6]
 800ddf8:	f003 013f 	and.w	r1, r3, #63	; 0x3f
         uint8_t state = ESCvar.ALstatus & 0x0f;
 800ddfc:	4a6a      	ldr	r2, [pc, #424]	; (800dfa8 <SDO_download+0x1ec>)
 800ddfe:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800de02:	f002 020f 	and.w	r2, r2, #15
         if (WRITE_ACCESS(access, state))
 800de06:	f013 0f08 	tst.w	r3, #8
 800de0a:	d001      	beq.n	800de10 <SDO_download+0x54>
 800de0c:	2a02      	cmp	r2, #2
 800de0e:	d013      	beq.n	800de38 <SDO_download+0x7c>
 800de10:	f013 0f10 	tst.w	r3, #16
 800de14:	d001      	beq.n	800de1a <SDO_download+0x5e>
 800de16:	2a04      	cmp	r2, #4
 800de18:	d00e      	beq.n	800de38 <SDO_download+0x7c>
 800de1a:	f013 0f20 	tst.w	r3, #32
 800de1e:	d001      	beq.n	800de24 <SDO_download+0x68>
 800de20:	2a08      	cmp	r2, #8
 800de22:	d009      	beq.n	800de38 <SDO_download+0x7c>
            if (access == ATYPE_RO)
 800de24:	2907      	cmp	r1, #7
 800de26:	f000 809e 	beq.w	800df66 <SDO_download+0x1aa>
               SDO_abort (0, index, subindex, ABORT_NOTINTHISSTATE);
 800de2a:	4b60      	ldr	r3, [pc, #384]	; (800dfac <SDO_download+0x1f0>)
 800de2c:	4632      	mov	r2, r6
 800de2e:	4629      	mov	r1, r5
 800de30:	2000      	movs	r0, #0
 800de32:	f7ff faa7 	bl	800d384 <SDO_abort>
 800de36:	e0aa      	b.n	800df8e <SDO_download+0x1d2>
            if (coesdo->command & COE_EXPEDITED_INDICATOR)
 800de38:	4b59      	ldr	r3, [pc, #356]	; (800dfa0 <SDO_download+0x1e4>)
 800de3a:	f893 8008 	ldrb.w	r8, [r3, #8]
 800de3e:	f018 0f02 	tst.w	r8, #2
 800de42:	d019      	beq.n	800de78 <SDO_download+0xbc>
               size = 4U - ((coesdo->command & 0x0CU) >> 2);
 800de44:	f3c8 0881 	ubfx	r8, r8, #2, #2
 800de48:	f1c8 0804 	rsb	r8, r8, #4
               mbxdata = &(coesdo->size);
 800de4c:	f103 090c 	add.w	r9, r3, #12
            actsize = BITS2BYTES((objd + nsub)->bitlength);
 800de50:	88a3      	ldrh	r3, [r4, #4]
 800de52:	3307      	adds	r3, #7
 800de54:	08da      	lsrs	r2, r3, #3
            if (actsize != size)
 800de56:	ebb8 0fd3 	cmp.w	r8, r3, lsr #3
 800de5a:	d022      	beq.n	800dea2 <SDO_download+0xe6>
               uint16_t type = (objd + nsub)->datatype;
 800de5c:	8863      	ldrh	r3, [r4, #2]
               if (type == DTYPE_VISIBLE_STRING)
 800de5e:	2b09      	cmp	r3, #9
 800de60:	d012      	beq.n	800de88 <SDO_download+0xcc>
               else if ((type != DTYPE_OCTET_STRING) &&
 800de62:	2b0b      	cmp	r3, #11
 800de64:	d818      	bhi.n	800de98 <SDO_download+0xdc>
 800de66:	2b0a      	cmp	r3, #10
 800de68:	d21b      	bcs.n	800dea2 <SDO_download+0xe6>
                  set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 800de6a:	4b51      	ldr	r3, [pc, #324]	; (800dfb0 <SDO_download+0x1f4>)
 800de6c:	4632      	mov	r2, r6
 800de6e:	4629      	mov	r1, r5
 800de70:	2000      	movs	r0, #0
 800de72:	f7ff fab9 	bl	800d3e8 <set_state_idle>
                  return;
 800de76:	e090      	b.n	800df9a <SDO_download+0x1de>
               size = (etohl (coesdo->size) & 0xffff);
 800de78:	4b49      	ldr	r3, [pc, #292]	; (800dfa0 <SDO_download+0x1e4>)
 800de7a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800de7e:	fa1f f888 	uxth.w	r8, r8
               mbxdata = (&(coesdo->size)) + 1;
 800de82:	f103 0910 	add.w	r9, r3, #16
 800de86:	e7e3      	b.n	800de50 <SDO_download+0x94>
                  memset((objd + nsub)->data + size, 0, actsize - size);
 800de88:	6920      	ldr	r0, [r4, #16]
 800de8a:	eba2 0208 	sub.w	r2, r2, r8
 800de8e:	2100      	movs	r1, #0
 800de90:	4440      	add	r0, r8
 800de92:	f003 fe7b 	bl	8011b8c <memset>
 800de96:	e004      	b.n	800dea2 <SDO_download+0xe6>
 800de98:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	2b03      	cmp	r3, #3
 800dea0:	d8e3      	bhi.n	800de6a <SDO_download+0xae>
                  (objd + nsub)->flags
 800dea2:	88e3      	ldrh	r3, [r4, #6]
            abort = ESC_download_pre_objecthandler (
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	4643      	mov	r3, r8
 800dea8:	464a      	mov	r2, r9
 800deaa:	4631      	mov	r1, r6
 800deac:	4628      	mov	r0, r5
 800deae:	f7fd fe29 	bl	800bb04 <ESC_download_pre_objecthandler>
            if (abort == 0)
 800deb2:	4603      	mov	r3, r0
 800deb4:	2800      	cmp	r0, #0
 800deb6:	d150      	bne.n	800df5a <SDO_download+0x19e>
               if ((size > 4) &&
 800deb8:	f1b8 0f04 	cmp.w	r8, #4
 800debc:	d915      	bls.n	800deea <SDO_download+0x12e>
                     (size > (coesdo->mbxheader.length - COE_HEADERSIZE)))
 800debe:	4b38      	ldr	r3, [pc, #224]	; (800dfa0 <SDO_download+0x1e4>)
 800dec0:	881b      	ldrh	r3, [r3, #0]
 800dec2:	3b0a      	subs	r3, #10
               if ((size > 4) &&
 800dec4:	4543      	cmp	r3, r8
 800dec6:	d210      	bcs.n	800deea <SDO_download+0x12e>
                  ESCvar.segmented = MBXSED;
 800dec8:	4a37      	ldr	r2, [pc, #220]	; (800dfa8 <SDO_download+0x1ec>)
 800deca:	2150      	movs	r1, #80	; 0x50
 800decc:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
                  ESCvar.data = (objd + nsub)->data + size;
 800ded0:	6921      	ldr	r1, [r4, #16]
 800ded2:	4419      	add	r1, r3
 800ded4:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
                  ESCvar.index = index;
 800ded8:	f8a2 70a4 	strh.w	r7, [r2, #164]	; 0xa4
                  ESCvar.subindex = subindex;
 800dedc:	f882 60a6 	strb.w	r6, [r2, #166]	; 0xa6
                  ESCvar.flags = (objd + nsub)->flags;
 800dee0:	88e1      	ldrh	r1, [r4, #6]
 800dee2:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
                  size = coesdo->mbxheader.length - COE_HEADERSIZE;
 800dee6:	4698      	mov	r8, r3
                  ESCvar.flags = (objd + nsub)->flags;
 800dee8:	e003      	b.n	800def2 <SDO_download+0x136>
                  ESCvar.segmented = 0;
 800deea:	4b2f      	ldr	r3, [pc, #188]	; (800dfa8 <SDO_download+0x1ec>)
 800deec:	2200      	movs	r2, #0
 800deee:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
               copy2mbx (mbxdata, (objd + nsub)->data, size);
 800def2:	4642      	mov	r2, r8
 800def4:	6921      	ldr	r1, [r4, #16]
 800def6:	4648      	mov	r0, r9
 800def8:	f7ff fa86 	bl	800d408 <copy2mbx>
               MBXout = ESC_claimbuffer ();
 800defc:	f7fe fa1c 	bl	800c338 <ESC_claimbuffer>
               if (MBXout)
 800df00:	4680      	mov	r8, r0
 800df02:	b1c8      	cbz	r0, 800df38 <SDO_download+0x17c>
                  coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800df04:	4b28      	ldr	r3, [pc, #160]	; (800dfa8 <SDO_download+0x1ec>)
 800df06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800df08:	fb02 f200 	mul.w	r2, r2, r0
 800df0c:	4924      	ldr	r1, [pc, #144]	; (800dfa0 <SDO_download+0x1e4>)
 800df0e:	1853      	adds	r3, r2, r1
                  coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800df10:	200a      	movs	r0, #10
 800df12:	5288      	strh	r0, [r1, r2]
                  coeres->mbxheader.mbxtype = MBXCOE;
 800df14:	7959      	ldrb	r1, [r3, #5]
 800df16:	2203      	movs	r2, #3
 800df18:	f362 0103 	bfi	r1, r2, #0, #4
 800df1c:	7159      	strb	r1, [r3, #5]
                  coeres->coeheader.numberservice =
 800df1e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800df22:	80d9      	strh	r1, [r3, #6]
                  coeres->index = htoes (index);
 800df24:	f8a3 7009 	strh.w	r7, [r3, #9]
                  coeres->subindex = subindex;
 800df28:	72de      	strb	r6, [r3, #11]
                  coeres->command = COE_COMMAND_DOWNLOADRESPONSE;
 800df2a:	2160      	movs	r1, #96	; 0x60
 800df2c:	7219      	strb	r1, [r3, #8]
                  coeres->size = htoel (0);
 800df2e:	2100      	movs	r1, #0
 800df30:	60d9      	str	r1, [r3, #12]
                  MBXcontrol[MBXout].state = MBXstate_outreq;
 800df32:	4b20      	ldr	r3, [pc, #128]	; (800dfb4 <SDO_download+0x1f8>)
 800df34:	f803 2008 	strb.w	r2, [r3, r8]
               if (ESCvar.segmented == 0)
 800df38:	4b1b      	ldr	r3, [pc, #108]	; (800dfa8 <SDO_download+0x1ec>)
 800df3a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800df3e:	bb33      	cbnz	r3, 800df8e <SDO_download+0x1d2>
                  abort = ESC_download_post_objecthandler (index, subindex, (objd + nsub)->flags);
 800df40:	88e2      	ldrh	r2, [r4, #6]
 800df42:	4631      	mov	r1, r6
 800df44:	4628      	mov	r0, r5
 800df46:	f7fd fe1b 	bl	800bb80 <ESC_download_post_objecthandler>
                  if (abort != 0)
 800df4a:	4603      	mov	r3, r0
 800df4c:	b1f8      	cbz	r0, 800df8e <SDO_download+0x1d2>
                     SDO_abort (MBXout, index, subindex, abort);
 800df4e:	4632      	mov	r2, r6
 800df50:	4629      	mov	r1, r5
 800df52:	4640      	mov	r0, r8
 800df54:	f7ff fa16 	bl	800d384 <SDO_abort>
 800df58:	e019      	b.n	800df8e <SDO_download+0x1d2>
               SDO_abort (0, index, subindex, abort);
 800df5a:	4632      	mov	r2, r6
 800df5c:	4629      	mov	r1, r5
 800df5e:	2000      	movs	r0, #0
 800df60:	f7ff fa10 	bl	800d384 <SDO_abort>
 800df64:	e013      	b.n	800df8e <SDO_download+0x1d2>
               SDO_abort (0, index, subindex, ABORT_READONLY);
 800df66:	4b14      	ldr	r3, [pc, #80]	; (800dfb8 <SDO_download+0x1fc>)
 800df68:	4632      	mov	r2, r6
 800df6a:	4629      	mov	r1, r5
 800df6c:	2000      	movs	r0, #0
 800df6e:	f7ff fa09 	bl	800d384 <SDO_abort>
 800df72:	e00c      	b.n	800df8e <SDO_download+0x1d2>
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 800df74:	4b11      	ldr	r3, [pc, #68]	; (800dfbc <SDO_download+0x200>)
 800df76:	4632      	mov	r2, r6
 800df78:	4629      	mov	r1, r5
 800df7a:	2000      	movs	r0, #0
 800df7c:	f7ff fa02 	bl	800d384 <SDO_abort>
 800df80:	e005      	b.n	800df8e <SDO_download+0x1d2>
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 800df82:	4b0f      	ldr	r3, [pc, #60]	; (800dfc0 <SDO_download+0x204>)
 800df84:	4632      	mov	r2, r6
 800df86:	4629      	mov	r1, r5
 800df88:	2000      	movs	r0, #0
 800df8a:	f7ff f9fb 	bl	800d384 <SDO_abort>
   MBXcontrol[0].state = MBXstate_idle;
 800df8e:	2300      	movs	r3, #0
 800df90:	4a08      	ldr	r2, [pc, #32]	; (800dfb4 <SDO_download+0x1f8>)
 800df92:	7013      	strb	r3, [r2, #0]
   ESCvar.xoe = 0;
 800df94:	4a04      	ldr	r2, [pc, #16]	; (800dfa8 <SDO_download+0x1ec>)
 800df96:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
}
 800df9a:	b003      	add	sp, #12
 800df9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfa0:	20008620 	.word	0x20008620
 800dfa4:	0801546c 	.word	0x0801546c
 800dfa8:	20007f34 	.word	0x20007f34
 800dfac:	08000022 	.word	0x08000022
 800dfb0:	06070010 	.word	0x06070010
 800dfb4:	20008c20 	.word	0x20008c20
 800dfb8:	06010002 	.word	0x06010002
 800dfbc:	06090011 	.word	0x06090011
 800dfc0:	06020000 	.word	0x06020000

0800dfc4 <SDO_downloadsegment>:
{
 800dfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc8:	b082      	sub	sp, #8
   uint8_t MBXout = ESC_claimbuffer ();
 800dfca:	f7fe f9b5 	bl	800c338 <ESC_claimbuffer>
   if (MBXout)
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	f000 808c 	beq.w	800e0ec <SDO_downloadsegment+0x128>
 800dfd4:	4606      	mov	r6, r0
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800dfd6:	4b4a      	ldr	r3, [pc, #296]	; (800e100 <SDO_downloadsegment+0x13c>)
 800dfd8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800dfda:	4b4a      	ldr	r3, [pc, #296]	; (800e104 <SDO_downloadsegment+0x140>)
 800dfdc:	fb00 3006 	mla	r0, r0, r6, r3
      uint32_t size = coesdo->mbxheader.length - 3U;
 800dfe0:	881b      	ldrh	r3, [r3, #0]
 800dfe2:	1edc      	subs	r4, r3, #3
      if (size == 7)
 800dfe4:	2b0a      	cmp	r3, #10
 800dfe6:	d05b      	beq.n	800e0a0 <SDO_downloadsegment+0xdc>
      uint8_t command2 = (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 800dfe8:	4d46      	ldr	r5, [pc, #280]	; (800e104 <SDO_downloadsegment+0x140>)
 800dfea:	7a2a      	ldrb	r2, [r5, #8]
 800dfec:	f002 0210 	and.w	r2, r2, #16
      init_coesdo(coeres, COE_SDORESPONSE, command, 0, 0);
 800dff0:	2300      	movs	r3, #0
 800dff2:	9300      	str	r3, [sp, #0]
 800dff4:	f042 0220 	orr.w	r2, r2, #32
 800dff8:	2103      	movs	r1, #3
 800dffa:	f7fe ff67 	bl	800cecc <init_coesdo>
      copy2mbx (mbxdata, ESCvar.data, size);
 800dffe:	4622      	mov	r2, r4
 800e000:	4b3f      	ldr	r3, [pc, #252]	; (800e100 <SDO_downloadsegment+0x13c>)
 800e002:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e006:	f105 0009 	add.w	r0, r5, #9
 800e00a:	f7ff f9fd 	bl	800d408 <copy2mbx>
      if (coesdo->command & COE_COMMAND_LASTSEGMENTBIT)
 800e00e:	7a2b      	ldrb	r3, [r5, #8]
 800e010:	f013 0f01 	tst.w	r3, #1
 800e014:	d05c      	beq.n	800e0d0 <SDO_downloadsegment+0x10c>
         if(ESCvar.flags == COMPLETE_ACCESS_FLAG)
 800e016:	4b3a      	ldr	r3, [pc, #232]	; (800e100 <SDO_downloadsegment+0x13c>)
 800e018:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800e01c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e020:	d123      	bne.n	800e06a <SDO_downloadsegment+0xa6>
            if(ESCvar.frags > ESCvar.fragsleft + size)
 800e022:	4b37      	ldr	r3, [pc, #220]	; (800e100 <SDO_downloadsegment+0x13c>)
 800e024:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 800e028:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e02c:	4423      	add	r3, r4
 800e02e:	429d      	cmp	r5, r3
 800e030:	d83d      	bhi.n	800e0ae <SDO_downloadsegment+0xea>
            nidx = SDO_findobject(ESCvar.index);
 800e032:	4f33      	ldr	r7, [pc, #204]	; (800e100 <SDO_downloadsegment+0x13c>)
 800e034:	f8b7 80a4 	ldrh.w	r8, [r7, #164]	; 0xa4
 800e038:	4640      	mov	r0, r8
 800e03a:	f7ff fb91 	bl	800d760 <SDO_findobject>
 800e03e:	4604      	mov	r4, r0
            nsub = SDO_findsubindex (nidx, ESCvar.subindex);
 800e040:	f897 70a6 	ldrb.w	r7, [r7, #166]	; 0xa6
 800e044:	4639      	mov	r1, r7
 800e046:	f7ff fb5f 	bl	800d708 <SDO_findsubindex>
 800e04a:	4602      	mov	r2, r0
            if ((nidx < 0) || (nsub < 0))
 800e04c:	2c00      	cmp	r4, #0
 800e04e:	db38      	blt.n	800e0c2 <SDO_downloadsegment+0xfe>
 800e050:	2800      	cmp	r0, #0
 800e052:	db36      	blt.n	800e0c2 <SDO_downloadsegment+0xfe>
            const _objd *objd = SDOobjects[nidx].objdesc;
 800e054:	482c      	ldr	r0, [pc, #176]	; (800e108 <SDO_downloadsegment+0x144>)
 800e056:	eb00 1004 	add.w	r0, r0, r4, lsl #4
            complete_access_subindex_loop(objd,
 800e05a:	9501      	str	r5, [sp, #4]
 800e05c:	2301      	movs	r3, #1
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	4b2a      	ldr	r3, [pc, #168]	; (800e10c <SDO_downloadsegment+0x148>)
 800e062:	4621      	mov	r1, r4
 800e064:	68c0      	ldr	r0, [r0, #12]
 800e066:	f7ff fa57 	bl	800d518 <complete_access_subindex_loop>
         ESCvar.segmented = 0;
 800e06a:	4b25      	ldr	r3, [pc, #148]	; (800e100 <SDO_downloadsegment+0x13c>)
 800e06c:	2200      	movs	r2, #0
 800e06e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.frags = 0;
 800e072:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = 0;
 800e076:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         uint32_t abort = ESC_download_post_objecthandler
 800e07a:	f8b3 20a8 	ldrh.w	r2, [r3, #168]	; 0xa8
 800e07e:	f893 10a6 	ldrb.w	r1, [r3, #166]	; 0xa6
 800e082:	f8b3 00a4 	ldrh.w	r0, [r3, #164]	; 0xa4
 800e086:	f7fd fd7b 	bl	800bb80 <ESC_download_post_objecthandler>
         if (abort != 0)
 800e08a:	4603      	mov	r3, r0
 800e08c:	b358      	cbz	r0, 800e0e6 <SDO_downloadsegment+0x122>
            set_state_idle (MBXout, ESCvar.index, ESCvar.subindex, abort);
 800e08e:	491c      	ldr	r1, [pc, #112]	; (800e100 <SDO_downloadsegment+0x13c>)
 800e090:	f891 20a6 	ldrb.w	r2, [r1, #166]	; 0xa6
 800e094:	f8b1 10a4 	ldrh.w	r1, [r1, #164]	; 0xa4
 800e098:	4630      	mov	r0, r6
 800e09a:	f7ff f9a5 	bl	800d3e8 <set_state_idle>
            return;
 800e09e:	e02b      	b.n	800e0f8 <SDO_downloadsegment+0x134>
         size = 7 - ((coesdo->command >> 1) & 7);
 800e0a0:	4b18      	ldr	r3, [pc, #96]	; (800e104 <SDO_downloadsegment+0x140>)
 800e0a2:	7a1c      	ldrb	r4, [r3, #8]
 800e0a4:	ea6f 0454 	mvn.w	r4, r4, lsr #1
 800e0a8:	f004 0407 	and.w	r4, r4, #7
 800e0ac:	e79c      	b.n	800dfe8 <SDO_downloadsegment+0x24>
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_TYPEMISMATCH);
 800e0ae:	4914      	ldr	r1, [pc, #80]	; (800e100 <SDO_downloadsegment+0x13c>)
 800e0b0:	4b17      	ldr	r3, [pc, #92]	; (800e110 <SDO_downloadsegment+0x14c>)
 800e0b2:	f891 20a6 	ldrb.w	r2, [r1, #166]	; 0xa6
 800e0b6:	f8b1 10a4 	ldrh.w	r1, [r1, #164]	; 0xa4
 800e0ba:	2000      	movs	r0, #0
 800e0bc:	f7ff f994 	bl	800d3e8 <set_state_idle>
               return;
 800e0c0:	e01a      	b.n	800e0f8 <SDO_downloadsegment+0x134>
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_NOOBJECT);
 800e0c2:	4b14      	ldr	r3, [pc, #80]	; (800e114 <SDO_downloadsegment+0x150>)
 800e0c4:	463a      	mov	r2, r7
 800e0c6:	4641      	mov	r1, r8
 800e0c8:	2000      	movs	r0, #0
 800e0ca:	f7ff f98d 	bl	800d3e8 <set_state_idle>
               return;
 800e0ce:	e013      	b.n	800e0f8 <SDO_downloadsegment+0x134>
         ESCvar.data += size;
 800e0d0:	4b0b      	ldr	r3, [pc, #44]	; (800e100 <SDO_downloadsegment+0x13c>)
 800e0d2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e0d6:	4422      	add	r2, r4
 800e0d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
         ESCvar.fragsleft += size;
 800e0dc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e0e0:	4422      	add	r2, r4
 800e0e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800e0e6:	4b0c      	ldr	r3, [pc, #48]	; (800e118 <SDO_downloadsegment+0x154>)
 800e0e8:	2203      	movs	r2, #3
 800e0ea:	559a      	strb	r2, [r3, r6]
   set_state_idle (0, 0, 0, 0);
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7ff f978 	bl	800d3e8 <set_state_idle>
}
 800e0f8:	b002      	add	sp, #8
 800e0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0fe:	bf00      	nop
 800e100:	20007f34 	.word	0x20007f34
 800e104:	20008620 	.word	0x20008620
 800e108:	0801546c 	.word	0x0801546c
 800e10c:	2000801e 	.word	0x2000801e
 800e110:	06070010 	.word	0x06070010
 800e114:	06020000 	.word	0x06020000
 800e118:	20008c20 	.word	0x20008c20

0800e11c <SDO_getod>:
{
 800e11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   index = etohs (coer->index);
 800e120:	4b44      	ldr	r3, [pc, #272]	; (800e234 <SDO_getod+0x118>)
 800e122:	f8b3 900c 	ldrh.w	r9, [r3, #12]
   nidx = SDO_findobject (index);
 800e126:	fa1f f089 	uxth.w	r0, r9
 800e12a:	f7ff fb19 	bl	800d760 <SDO_findobject>
   if (nidx >= 0)
 800e12e:	f1b0 0800 	subs.w	r8, r0, #0
 800e132:	db7a      	blt.n	800e22a <SDO_getod+0x10e>
      MBXout = ESC_claimbuffer ();
 800e134:	f7fe f900 	bl	800c338 <ESC_claimbuffer>
      if (MBXout)
 800e138:	4605      	mov	r5, r0
 800e13a:	2800      	cmp	r0, #0
 800e13c:	d078      	beq.n	800e230 <SDO_getod+0x114>
         coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800e13e:	4b3e      	ldr	r3, [pc, #248]	; (800e238 <SDO_getod+0x11c>)
 800e140:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800e142:	fb00 f404 	mul.w	r4, r0, r4
 800e146:	4e3b      	ldr	r6, [pc, #236]	; (800e234 <SDO_getod+0x118>)
 800e148:	19a7      	adds	r7, r4, r6
         coel->mbxheader.mbxtype = MBXCOE;
 800e14a:	797b      	ldrb	r3, [r7, #5]
 800e14c:	2203      	movs	r2, #3
 800e14e:	f362 0303 	bfi	r3, r2, #0, #4
 800e152:	717b      	strb	r3, [r7, #5]
         coel->coeheader.numberservice =
 800e154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e158:	80fb      	strh	r3, [r7, #6]
         coel->infoheader.opcode = COE_GETODRESPONSE;
 800e15a:	7a3b      	ldrb	r3, [r7, #8]
 800e15c:	2204      	movs	r2, #4
 800e15e:	f362 0306 	bfi	r3, r2, #0, #7
 800e162:	723b      	strb	r3, [r7, #8]
         coel->infoheader.incomplete = 0;
 800e164:	b2db      	uxtb	r3, r3
 800e166:	f36f 13c7 	bfc	r3, #7, #1
 800e16a:	723b      	strb	r3, [r7, #8]
         coel->infoheader.reserved = 0x00;
 800e16c:	2300      	movs	r3, #0
 800e16e:	727b      	strb	r3, [r7, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 800e170:	817b      	strh	r3, [r7, #10]
         coel->index = htoes (index);
 800e172:	f8a7 900c 	strh.w	r9, [r7, #12]
         if (SDOobjects[nidx].objtype == OTYPE_VAR)
 800e176:	4b31      	ldr	r3, [pc, #196]	; (800e23c <SDO_getod+0x120>)
 800e178:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e17c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e180:	f1b9 0f07 	cmp.w	r9, #7
 800e184:	d015      	beq.n	800e1b2 <SDO_getod+0x96>
         else if (SDOobjects[nidx].objtype == OTYPE_ARRAY)
 800e186:	f1b9 0f08 	cmp.w	r9, #8
 800e18a:	d023      	beq.n	800e1d4 <SDO_getod+0xb8>
            coel->datatype = htoes (0);
 800e18c:	2300      	movs	r3, #0
 800e18e:	81fb      	strh	r3, [r7, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 800e190:	4b2a      	ldr	r3, [pc, #168]	; (800e23c <SDO_getod+0x120>)
 800e192:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	7b1b      	ldrb	r3, [r3, #12]
 800e19a:	743b      	strb	r3, [r7, #16]
         coel->objectcode = (uint8_t)SDOobjects[nidx].objtype;
 800e19c:	f887 9011 	strb.w	r9, [r7, #17]
         s = (uint8_t *) SDOobjects[nidx].name;
 800e1a0:	4b26      	ldr	r3, [pc, #152]	; (800e23c <SDO_getod+0x120>)
 800e1a2:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e1a6:	f8d3 c008 	ldr.w	ip, [r3, #8]
         d = (uint8_t *) &(coel->name);
 800e1aa:	f107 0112 	add.w	r1, r7, #18
   uint8_t n = 0;
 800e1ae:	2300      	movs	r3, #0
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 800e1b0:	e027      	b.n	800e202 <SDO_getod+0xe6>
            int32_t nsub = SDO_findsubindex (nidx, 0);
 800e1b2:	2100      	movs	r1, #0
 800e1b4:	4640      	mov	r0, r8
 800e1b6:	f7ff faa7 	bl	800d708 <SDO_findsubindex>
            const _objd *objd = SDOobjects[nidx].objdesc;
 800e1ba:	4b20      	ldr	r3, [pc, #128]	; (800e23c <SDO_getod+0x120>)
 800e1bc:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e1c0:	68da      	ldr	r2, [r3, #12]
            coel->datatype = htoes ((objd + nsub)->datatype);
 800e1c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e1c6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e1ca:	8852      	ldrh	r2, [r2, #2]
 800e1cc:	81fa      	strh	r2, [r7, #14]
            coel->maxsub = SDOobjects[nidx].maxsub;
 800e1ce:	791b      	ldrb	r3, [r3, #4]
 800e1d0:	743b      	strb	r3, [r7, #16]
 800e1d2:	e7e3      	b.n	800e19c <SDO_getod+0x80>
            int32_t nsub = SDO_findsubindex (nidx, 0);
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	f7ff fa96 	bl	800d708 <SDO_findsubindex>
            const _objd *objd = SDOobjects[nidx].objdesc;
 800e1dc:	4b17      	ldr	r3, [pc, #92]	; (800e23c <SDO_getod+0x120>)
 800e1de:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e1e2:	68db      	ldr	r3, [r3, #12]
            coel->datatype = htoes ((objd + nsub)->datatype);
 800e1e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e1e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e1ec:	8842      	ldrh	r2, [r0, #2]
 800e1ee:	81fa      	strh	r2, [r7, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 800e1f0:	7b1b      	ldrb	r3, [r3, #12]
 800e1f2:	743b      	strb	r3, [r7, #16]
 800e1f4:	e7d2      	b.n	800e19c <SDO_getod+0x80>
            *d = *s;
 800e1f6:	f801 0b01 	strb.w	r0, [r1], #1
            n++;
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	b2db      	uxtb	r3, r3
            s++;
 800e1fe:	f10c 0c01 	add.w	ip, ip, #1
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 800e202:	f89c 0000 	ldrb.w	r0, [ip]
 800e206:	b120      	cbz	r0, 800e212 <SDO_getod+0xf6>
 800e208:	4a0b      	ldr	r2, [pc, #44]	; (800e238 <SDO_getod+0x11c>)
 800e20a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e20c:	3a12      	subs	r2, #18
 800e20e:	4293      	cmp	r3, r2
 800e210:	d3f1      	bcc.n	800e1f6 <SDO_getod+0xda>
         *d = *s;
 800e212:	7008      	strb	r0, [r1, #0]
         coel->mbxheader.length = htoes (0x0C + n);
 800e214:	330c      	adds	r3, #12
 800e216:	5333      	strh	r3, [r6, r4]
         MBXcontrol[MBXout].state = MBXstate_outreq;
 800e218:	4a09      	ldr	r2, [pc, #36]	; (800e240 <SDO_getod+0x124>)
 800e21a:	2303      	movs	r3, #3
 800e21c:	5553      	strb	r3, [r2, r5]
         MBXcontrol[0].state = MBXstate_idle;
 800e21e:	2300      	movs	r3, #0
 800e220:	7013      	strb	r3, [r2, #0]
         ESCvar.xoe = 0;
 800e222:	4a05      	ldr	r2, [pc, #20]	; (800e238 <SDO_getod+0x11c>)
 800e224:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 800e228:	e002      	b.n	800e230 <SDO_getod+0x114>
      SDO_infoerror (ABORT_NOOBJECT);
 800e22a:	4806      	ldr	r0, [pc, #24]	; (800e244 <SDO_getod+0x128>)
 800e22c:	f7fe ffd6 	bl	800d1dc <SDO_infoerror>
}
 800e230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e234:	20008620 	.word	0x20008620
 800e238:	20007f34 	.word	0x20007f34
 800e23c:	0801546c 	.word	0x0801546c
 800e240:	20008c20 	.word	0x20008c20
 800e244:	06020000 	.word	0x06020000

0800e248 <SDO_geted>:
{
 800e248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   index = etohs (coer->index);
 800e24c:	4b34      	ldr	r3, [pc, #208]	; (800e320 <SDO_geted+0xd8>)
 800e24e:	899d      	ldrh	r5, [r3, #12]
   subindex = coer->subindex;
 800e250:	7b9e      	ldrb	r6, [r3, #14]
   nidx = SDO_findobject (index);
 800e252:	b2a8      	uxth	r0, r5
 800e254:	f7ff fa84 	bl	800d760 <SDO_findobject>
   if (nidx >= 0)
 800e258:	1e07      	subs	r7, r0, #0
 800e25a:	db5d      	blt.n	800e318 <SDO_geted+0xd0>
      nsub = SDO_findsubindex (nidx, subindex);
 800e25c:	4631      	mov	r1, r6
 800e25e:	4638      	mov	r0, r7
 800e260:	f7ff fa52 	bl	800d708 <SDO_findsubindex>
      if (nsub >= 0)
 800e264:	1e04      	subs	r4, r0, #0
 800e266:	db52      	blt.n	800e30e <SDO_geted+0xc6>
         objd = SDOobjects[nidx].objdesc;
 800e268:	4b2e      	ldr	r3, [pc, #184]	; (800e324 <SDO_geted+0xdc>)
 800e26a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800e26e:	68df      	ldr	r7, [r3, #12]
         MBXout = ESC_claimbuffer ();
 800e270:	f7fe f862 	bl	800c338 <ESC_claimbuffer>
         if (MBXout)
 800e274:	4684      	mov	ip, r0
 800e276:	2800      	cmp	r0, #0
 800e278:	d04c      	beq.n	800e314 <SDO_geted+0xcc>
            coel = (_COEentdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800e27a:	4b2b      	ldr	r3, [pc, #172]	; (800e328 <SDO_geted+0xe0>)
 800e27c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e27e:	fb00 f00c 	mul.w	r0, r0, ip
 800e282:	f8df e09c 	ldr.w	lr, [pc, #156]	; 800e320 <SDO_geted+0xd8>
 800e286:	eb00 020e 	add.w	r2, r0, lr
            coel->mbxheader.mbxtype = MBXCOE;
 800e28a:	7953      	ldrb	r3, [r2, #5]
 800e28c:	2103      	movs	r1, #3
 800e28e:	f361 0303 	bfi	r3, r1, #0, #4
 800e292:	7153      	strb	r3, [r2, #5]
            coel->coeheader.numberservice =
 800e294:	2300      	movs	r3, #0
 800e296:	7193      	strb	r3, [r2, #6]
 800e298:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800e29c:	71d1      	strb	r1, [r2, #7]
            coel->infoheader.opcode = COE_ENTRYDESCRIPTIONRESPONSE;
 800e29e:	7a11      	ldrb	r1, [r2, #8]
 800e2a0:	f04f 0806 	mov.w	r8, #6
 800e2a4:	f368 0106 	bfi	r1, r8, #0, #7
 800e2a8:	7211      	strb	r1, [r2, #8]
            coel->infoheader.incomplete = 0;
 800e2aa:	b2c9      	uxtb	r1, r1
 800e2ac:	f363 11c7 	bfi	r1, r3, #7, #1
 800e2b0:	7211      	strb	r1, [r2, #8]
            coel->infoheader.reserved = 0x00;
 800e2b2:	7253      	strb	r3, [r2, #9]
            coel->infoheader.fragmentsleft = htoes (0);
 800e2b4:	7293      	strb	r3, [r2, #10]
 800e2b6:	72d3      	strb	r3, [r2, #11]
            coel->index = htoes (index);
 800e2b8:	8195      	strh	r5, [r2, #12]
            coel->subindex = subindex;
 800e2ba:	7396      	strb	r6, [r2, #14]
            coel->valueinfo = COE_VALUEINFO_ACCESS +
 800e2bc:	2107      	movs	r1, #7
 800e2be:	73d1      	strb	r1, [r2, #15]
            coel->datatype = htoes ((objd + nsub)->datatype);
 800e2c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e2c4:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 800e2c8:	8879      	ldrh	r1, [r7, #2]
 800e2ca:	8211      	strh	r1, [r2, #16]
            coel->bitlength = htoes ((objd + nsub)->bitlength);
 800e2cc:	88b9      	ldrh	r1, [r7, #4]
 800e2ce:	8251      	strh	r1, [r2, #18]
            coel->access = htoes ((objd + nsub)->flags);
 800e2d0:	88f9      	ldrh	r1, [r7, #6]
 800e2d2:	8291      	strh	r1, [r2, #20]
            s = (uint8_t *) (objd + nsub)->name;
 800e2d4:	68bd      	ldr	r5, [r7, #8]
            d = (uint8_t *) &(coel->name);
 800e2d6:	3216      	adds	r2, #22
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 800e2d8:	782c      	ldrb	r4, [r5, #0]
 800e2da:	b154      	cbz	r4, 800e2f2 <SDO_geted+0xaa>
 800e2dc:	4912      	ldr	r1, [pc, #72]	; (800e328 <SDO_geted+0xe0>)
 800e2de:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 800e2e0:	3916      	subs	r1, #22
 800e2e2:	428b      	cmp	r3, r1
 800e2e4:	d205      	bcs.n	800e2f2 <SDO_geted+0xaa>
               *d = *s;
 800e2e6:	f802 4b01 	strb.w	r4, [r2], #1
               n++;
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	b2db      	uxtb	r3, r3
               s++;
 800e2ee:	3501      	adds	r5, #1
               d++;
 800e2f0:	e7f2      	b.n	800e2d8 <SDO_geted+0x90>
            *d = *s;
 800e2f2:	7014      	strb	r4, [r2, #0]
            coel->mbxheader.length = htoes (0x10 + n);
 800e2f4:	3310      	adds	r3, #16
 800e2f6:	f82e 3000 	strh.w	r3, [lr, r0]
            MBXcontrol[MBXout].state = MBXstate_outreq;
 800e2fa:	4a0c      	ldr	r2, [pc, #48]	; (800e32c <SDO_geted+0xe4>)
 800e2fc:	2303      	movs	r3, #3
 800e2fe:	f802 300c 	strb.w	r3, [r2, ip]
            MBXcontrol[0].state = MBXstate_idle;
 800e302:	2300      	movs	r3, #0
 800e304:	7013      	strb	r3, [r2, #0]
            ESCvar.xoe = 0;
 800e306:	4a08      	ldr	r2, [pc, #32]	; (800e328 <SDO_geted+0xe0>)
 800e308:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 800e30c:	e002      	b.n	800e314 <SDO_geted+0xcc>
         SDO_infoerror (ABORT_NOSUBINDEX);
 800e30e:	4808      	ldr	r0, [pc, #32]	; (800e330 <SDO_geted+0xe8>)
 800e310:	f7fe ff64 	bl	800d1dc <SDO_infoerror>
}
 800e314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SDO_infoerror (ABORT_NOOBJECT);
 800e318:	4806      	ldr	r0, [pc, #24]	; (800e334 <SDO_geted+0xec>)
 800e31a:	f7fe ff5f 	bl	800d1dc <SDO_infoerror>
}
 800e31e:	e7f9      	b.n	800e314 <SDO_geted+0xcc>
 800e320:	20008620 	.word	0x20008620
 800e324:	0801546c 	.word	0x0801546c
 800e328:	20007f34 	.word	0x20007f34
 800e32c:	20008c20 	.word	0x20008c20
 800e330:	06090011 	.word	0x06090011
 800e334:	06020000 	.word	0x06020000

0800e338 <sizeOfPDO>:
{
 800e338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e33c:	b087      	sub	sp, #28
 800e33e:	9105      	str	r1, [sp, #20]
 800e340:	9201      	str	r2, [sp, #4]
 800e342:	469b      	mov	fp, r3
   if ((index != RX_PDO_OBJIDX) && (index != TX_PDO_OBJIDX))
 800e344:	f5a0 53e0 	sub.w	r3, r0, #7168	; 0x1c00
 800e348:	3b12      	subs	r3, #18
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	f200 80ae 	bhi.w	800e4ae <sizeOfPDO+0x176>
   nidx = SDO_findobject (index);
 800e352:	f7ff fa05 	bl	800d760 <SDO_findobject>
   if(nidx < 0)
 800e356:	2800      	cmp	r0, #0
 800e358:	f2c0 80ad 	blt.w	800e4b6 <sizeOfPDO+0x17e>
   objd1c1x = SDOobjects[nidx].objdesc;
 800e35c:	4b57      	ldr	r3, [pc, #348]	; (800e4bc <sizeOfPDO+0x184>)
 800e35e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	9304      	str	r3, [sp, #16]
   si = OBJ_VALUE_FETCH (si, objd1c1x[0]);
 800e366:	691b      	ldr	r3, [r3, #16]
 800e368:	b19b      	cbz	r3, 800e392 <sizeOfPDO+0x5a>
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	9303      	str	r3, [sp, #12]
   if (si)
 800e36e:	9b03      	ldr	r3, [sp, #12]
 800e370:	2b00      	cmp	r3, #0
 800e372:	f040 8092 	bne.w	800e49a <sizeOfPDO+0x162>
   int mapIx = 0;
 800e376:	f04f 0800 	mov.w	r8, #0
   uint32_t offset = 0;
 800e37a:	4647      	mov	r7, r8
   if (max_mappings > 0)
 800e37c:	f1bb 0f00 	cmp.w	fp, #0
 800e380:	f340 8091 	ble.w	800e4a6 <sizeOfPDO+0x16e>
      *nmappings = mapIx;
 800e384:	9b05      	ldr	r3, [sp, #20]
 800e386:	f8c3 8000 	str.w	r8, [r3]
   return BITS2BYTES (offset) & 0xFFFF;
 800e38a:	1df8      	adds	r0, r7, #7
 800e38c:	f3c0 00cf 	ubfx	r0, r0, #3, #16
 800e390:	e08e      	b.n	800e4b0 <sizeOfPDO+0x178>
   si = OBJ_VALUE_FETCH (si, objd1c1x[0]);
 800e392:	9b04      	ldr	r3, [sp, #16]
 800e394:	7b1b      	ldrb	r3, [r3, #12]
 800e396:	9303      	str	r3, [sp, #12]
 800e398:	e7e9      	b.n	800e36e <sizeOfPDO+0x36>
         hobj = OBJ_VALUE_FETCH (hobj, objd1c1x[sic]);
 800e39a:	8998      	ldrh	r0, [r3, #12]
 800e39c:	e06c      	b.n	800e478 <sizeOfPDO+0x140>
            maxsub = OBJ_VALUE_FETCH (maxsub, objd[0]);
 800e39e:	f89a 300c 	ldrb.w	r3, [sl, #12]
 800e3a2:	9300      	str	r3, [sp, #0]
 800e3a4:	e077      	b.n	800e496 <sizeOfPDO+0x15e>
               uint32_t value = OBJ_VALUE_FETCH (value, objd[c]);
 800e3a6:	68de      	ldr	r6, [r3, #12]
 800e3a8:	e036      	b.n	800e418 <sizeOfPDO+0xe0>
                     *nmappings = -1;
 800e3aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3ae:	9a05      	ldr	r2, [sp, #20]
 800e3b0:	6013      	str	r3, [r2, #0]
                     return 0;
 800e3b2:	2000      	movs	r0, #0
 800e3b4:	e07c      	b.n	800e4b0 <sizeOfPDO+0x178>
                     nidx = SDO_findobject (index);
 800e3b6:	f7ff f9d3 	bl	800d760 <SDO_findobject>
                     if (nidx >= 0)
 800e3ba:	1e05      	subs	r5, r0, #0
 800e3bc:	db41      	blt.n	800e442 <sizeOfPDO+0x10a>
                        nsub = SDO_findsubindex (nidx, subindex);
 800e3be:	4649      	mov	r1, r9
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	f7ff f9a1 	bl	800d708 <SDO_findsubindex>
                        if (nsub < 0)
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	db35      	blt.n	800e436 <sizeOfPDO+0xfe>
                        mapping = &SDOobjects[nidx].objdesc[nsub];
 800e3ca:	4b3c      	ldr	r3, [pc, #240]	; (800e4bc <sizeOfPDO+0x184>)
 800e3cc:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e3d6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
                  mappings[mapIx].obj = mapping;
 800e3da:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800e3de:	9801      	ldr	r0, [sp, #4]
 800e3e0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800e3e4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
                  if(mapping != NULL)
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d030      	beq.n	800e44e <sizeOfPDO+0x116>
                     mappings[mapIx].objectlistitem = &SDOobjects[nidx];
 800e3ec:	4b33      	ldr	r3, [pc, #204]	; (800e4bc <sizeOfPDO+0x184>)
 800e3ee:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800e3f2:	604b      	str	r3, [r1, #4]
                  mappings[mapIx++].offset = offset;
 800e3f4:	f108 0801 	add.w	r8, r8, #1
 800e3f8:	608f      	str	r7, [r1, #8]
               offset += bitlength;
 800e3fa:	fa57 f786 	uxtab	r7, r7, r6
            for (c = 1; c <= maxsub; c++)
 800e3fe:	3401      	adds	r4, #1
 800e400:	b2e4      	uxtb	r4, r4
 800e402:	9b00      	ldr	r3, [sp, #0]
 800e404:	429c      	cmp	r4, r3
 800e406:	d825      	bhi.n	800e454 <sizeOfPDO+0x11c>
               uint32_t value = OBJ_VALUE_FETCH (value, objd[c]);
 800e408:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e40c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800e410:	691a      	ldr	r2, [r3, #16]
 800e412:	2a00      	cmp	r2, #0
 800e414:	d0c7      	beq.n	800e3a6 <sizeOfPDO+0x6e>
 800e416:	6816      	ldr	r6, [r2, #0]
               if (max_mappings > 0)
 800e418:	f1bb 0f00 	cmp.w	fp, #0
 800e41c:	dded      	ble.n	800e3fa <sizeOfPDO+0xc2>
                  uint16_t index = (uint16_t)(value >> 16);
 800e41e:	0c30      	lsrs	r0, r6, #16
                  uint8_t subindex = (value >> 8) & 0xFF;
 800e420:	f3c6 2907 	ubfx	r9, r6, #8, #8
                  if (mapIx == max_mappings)
 800e424:	45d8      	cmp	r8, fp
 800e426:	d0c0      	beq.n	800e3aa <sizeOfPDO+0x72>
                  if (index == 0 && subindex == 0)
 800e428:	2800      	cmp	r0, #0
 800e42a:	d1c4      	bne.n	800e3b6 <sizeOfPDO+0x7e>
 800e42c:	f1b9 0f00 	cmp.w	r9, #0
 800e430:	d1c1      	bne.n	800e3b6 <sizeOfPDO+0x7e>
                     mapping = NULL;
 800e432:	2300      	movs	r3, #0
 800e434:	e7d1      	b.n	800e3da <sizeOfPDO+0xa2>
                           *nmappings = -1;
 800e436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e43a:	9a05      	ldr	r2, [sp, #20]
 800e43c:	6013      	str	r3, [r2, #0]
                           return 0;
 800e43e:	2000      	movs	r0, #0
 800e440:	e036      	b.n	800e4b0 <sizeOfPDO+0x178>
                        *nmappings = -1;
 800e442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e446:	9a05      	ldr	r2, [sp, #20]
 800e448:	6013      	str	r3, [r2, #0]
                        return 0;
 800e44a:	2000      	movs	r0, #0
 800e44c:	e030      	b.n	800e4b0 <sizeOfPDO+0x178>
                     mappings[mapIx].objectlistitem = NULL;
 800e44e:	2300      	movs	r3, #0
 800e450:	604b      	str	r3, [r1, #4]
 800e452:	e7cf      	b.n	800e3f4 <sizeOfPDO+0xbc>
      for (sic = 1; sic <= si; sic++)
 800e454:	9b02      	ldr	r3, [sp, #8]
 800e456:	3301      	adds	r3, #1
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	9302      	str	r3, [sp, #8]
 800e45c:	9b02      	ldr	r3, [sp, #8]
 800e45e:	9a03      	ldr	r2, [sp, #12]
 800e460:	4293      	cmp	r3, r2
 800e462:	d88b      	bhi.n	800e37c <sizeOfPDO+0x44>
         hobj = OBJ_VALUE_FETCH (hobj, objd1c1x[sic]);
 800e464:	9b02      	ldr	r3, [sp, #8]
 800e466:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e46a:	9a04      	ldr	r2, [sp, #16]
 800e46c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e470:	691a      	ldr	r2, [r3, #16]
 800e472:	2a00      	cmp	r2, #0
 800e474:	d091      	beq.n	800e39a <sizeOfPDO+0x62>
 800e476:	8810      	ldrh	r0, [r2, #0]
         nidx = SDO_findobject (hobj);
 800e478:	f7ff f972 	bl	800d760 <SDO_findobject>
         if (nidx >= 0)
 800e47c:	1e05      	subs	r5, r0, #0
 800e47e:	dbe9      	blt.n	800e454 <sizeOfPDO+0x11c>
            objd = SDOobjects[nidx].objdesc;
 800e480:	4b0e      	ldr	r3, [pc, #56]	; (800e4bc <sizeOfPDO+0x184>)
 800e482:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800e486:	f8d3 a00c 	ldr.w	sl, [r3, #12]
            maxsub = OBJ_VALUE_FETCH (maxsub, objd[0]);
 800e48a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d085      	beq.n	800e39e <sizeOfPDO+0x66>
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	9300      	str	r3, [sp, #0]
            for (c = 1; c <= maxsub; c++)
 800e496:	2401      	movs	r4, #1
 800e498:	e7b3      	b.n	800e402 <sizeOfPDO+0xca>
   int mapIx = 0;
 800e49a:	f04f 0800 	mov.w	r8, #0
      for (sic = 1; sic <= si; sic++)
 800e49e:	2301      	movs	r3, #1
 800e4a0:	9302      	str	r3, [sp, #8]
   uint32_t offset = 0;
 800e4a2:	4647      	mov	r7, r8
 800e4a4:	e7da      	b.n	800e45c <sizeOfPDO+0x124>
      *nmappings = 0;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	9a05      	ldr	r2, [sp, #20]
 800e4aa:	6013      	str	r3, [r2, #0]
 800e4ac:	e76d      	b.n	800e38a <sizeOfPDO+0x52>
      return 0;
 800e4ae:	2000      	movs	r0, #0
}
 800e4b0:	b007      	add	sp, #28
 800e4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return 0;
 800e4b6:	2000      	movs	r0, #0
 800e4b8:	e7fa      	b.n	800e4b0 <sizeOfPDO+0x178>
 800e4ba:	bf00      	nop
 800e4bc:	0801546c 	.word	0x0801546c

0800e4c0 <ESC_coeprocess>:
{
 800e4c0:	b508      	push	{r3, lr}
   if (ESCvar.MBXrun == 0)
 800e4c2:	4b4f      	ldr	r3, [pc, #316]	; (800e600 <ESC_coeprocess+0x140>)
 800e4c4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800e4c8:	b1a3      	cbz	r3, 800e4f4 <ESC_coeprocess+0x34>
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 800e4ca:	4b4d      	ldr	r3, [pc, #308]	; (800e600 <ESC_coeprocess+0x140>)
 800e4cc:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800e4d0:	b91b      	cbnz	r3, 800e4da <ESC_coeprocess+0x1a>
 800e4d2:	4b4c      	ldr	r3, [pc, #304]	; (800e604 <ESC_coeprocess+0x144>)
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d00d      	beq.n	800e4f6 <ESC_coeprocess+0x36>
   if ((ESCvar.xoe == (MBXCOE + MBXODL)) && (!ESCvar.mbxoutpost))
 800e4da:	4b49      	ldr	r3, [pc, #292]	; (800e600 <ESC_coeprocess+0x140>)
 800e4dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800e4e4:	f5b3 1f98 	cmp.w	r3, #1245184	; 0x130000
 800e4e8:	d018      	beq.n	800e51c <ESC_coeprocess+0x5c>
   if (ESCvar.xoe == MBXCOE)   {
 800e4ea:	4b45      	ldr	r3, [pc, #276]	; (800e600 <ESC_coeprocess+0x140>)
 800e4ec:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800e4f0:	2b03      	cmp	r3, #3
 800e4f2:	d016      	beq.n	800e522 <ESC_coeprocess+0x62>
}
 800e4f4:	bd08      	pop	{r3, pc}
      if (mbh->mbxtype == MBXCOE)
 800e4f6:	4b44      	ldr	r3, [pc, #272]	; (800e608 <ESC_coeprocess+0x148>)
 800e4f8:	795b      	ldrb	r3, [r3, #5]
 800e4fa:	f003 030f 	and.w	r3, r3, #15
 800e4fe:	2b03      	cmp	r3, #3
 800e500:	d1eb      	bne.n	800e4da <ESC_coeprocess+0x1a>
         if (etohs (mbh->length) < COE_MINIMUM_LENGTH)
 800e502:	4b41      	ldr	r3, [pc, #260]	; (800e608 <ESC_coeprocess+0x148>)
 800e504:	881b      	ldrh	r3, [r3, #0]
 800e506:	2b07      	cmp	r3, #7
 800e508:	d904      	bls.n	800e514 <ESC_coeprocess+0x54>
            ESCvar.xoe = MBXCOE;
 800e50a:	4b3d      	ldr	r3, [pc, #244]	; (800e600 <ESC_coeprocess+0x140>)
 800e50c:	2203      	movs	r2, #3
 800e50e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 800e512:	e7e2      	b.n	800e4da <ESC_coeprocess+0x1a>
            MBX_error (MBXERR_INVALIDSIZE);
 800e514:	2008      	movs	r0, #8
 800e516:	f7fd ff5b 	bl	800c3d0 <MBX_error>
 800e51a:	e7de      	b.n	800e4da <ESC_coeprocess+0x1a>
      SDO_getodlistcont ();
 800e51c:	f7fe fdf6 	bl	800d10c <SDO_getodlistcont>
 800e520:	e7e3      	b.n	800e4ea <ESC_coeprocess+0x2a>
      service = etohs (coesdo->coeheader.numberservice) >> 12;
 800e522:	4b39      	ldr	r3, [pc, #228]	; (800e608 <ESC_coeprocess+0x148>)
 800e524:	88db      	ldrh	r3, [r3, #6]
 800e526:	0b1b      	lsrs	r3, r3, #12
      if (service == COE_SDOREQUEST)
 800e528:	2b02      	cmp	r3, #2
 800e52a:	d011      	beq.n	800e550 <ESC_coeprocess+0x90>
         if ((service == COE_SDOINFORMATION)
 800e52c:	2b08      	cmp	r3, #8
 800e52e:	d042      	beq.n	800e5b6 <ESC_coeprocess+0xf6>
            if ((service == COE_SDOINFORMATION)
 800e530:	2b08      	cmp	r3, #8
 800e532:	d049      	beq.n	800e5c8 <ESC_coeprocess+0x108>
               if ((service == COE_SDOINFORMATION)
 800e534:	2b08      	cmp	r3, #8
 800e536:	d050      	beq.n	800e5da <ESC_coeprocess+0x11a>
                     if (service == 0)
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d157      	bne.n	800e5ec <ESC_coeprocess+0x12c>
                        MBX_error (MBXERR_INVALIDHEADER);
 800e53c:	2005      	movs	r0, #5
 800e53e:	f7fd ff47 	bl	800c3d0 <MBX_error>
                     MBXcontrol[0].state = MBXstate_idle;
 800e542:	2300      	movs	r3, #0
 800e544:	4a2f      	ldr	r2, [pc, #188]	; (800e604 <ESC_coeprocess+0x144>)
 800e546:	7013      	strb	r3, [r2, #0]
                     ESCvar.xoe = 0;
 800e548:	4a2d      	ldr	r2, [pc, #180]	; (800e600 <ESC_coeprocess+0x140>)
 800e54a:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 800e54e:	e7d1      	b.n	800e4f4 <ESC_coeprocess+0x34>
         if ((SDO_COMMAND(coesdo->command) == COE_COMMAND_UPLOADREQUEST)
 800e550:	4b2d      	ldr	r3, [pc, #180]	; (800e608 <ESC_coeprocess+0x148>)
 800e552:	7a1a      	ldrb	r2, [r3, #8]
 800e554:	f002 03e0 	and.w	r3, r2, #224	; 0xe0
 800e558:	2b40      	cmp	r3, #64	; 0x40
 800e55a:	d00a      	beq.n	800e572 <ESC_coeprocess+0xb2>
         else if (((coesdo->command & 0xef) == COE_COMMAND_UPLOADSEGREQ)
 800e55c:	f002 01ef 	and.w	r1, r2, #239	; 0xef
 800e560:	2960      	cmp	r1, #96	; 0x60
 800e562:	d013      	beq.n	800e58c <ESC_coeprocess+0xcc>
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADREQUEST)
 800e564:	2b20      	cmp	r3, #32
 800e566:	d01d      	beq.n	800e5a4 <ESC_coeprocess+0xe4>
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADSEGREQ)
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d1c3      	bne.n	800e4f4 <ESC_coeprocess+0x34>
            SDO_downloadsegment ();
 800e56c:	f7ff fd2a 	bl	800dfc4 <SDO_downloadsegment>
 800e570:	e7c0      	b.n	800e4f4 <ESC_coeprocess+0x34>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE))
 800e572:	4925      	ldr	r1, [pc, #148]	; (800e608 <ESC_coeprocess+0x148>)
 800e574:	8809      	ldrh	r1, [r1, #0]
 800e576:	290a      	cmp	r1, #10
 800e578:	d1f0      	bne.n	800e55c <ESC_coeprocess+0x9c>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 800e57a:	f012 0f10 	tst.w	r2, #16
 800e57e:	d002      	beq.n	800e586 <ESC_coeprocess+0xc6>
               SDO_upload_complete_access ();
 800e580:	f7ff f924 	bl	800d7cc <SDO_upload_complete_access>
 800e584:	e7b6      	b.n	800e4f4 <ESC_coeprocess+0x34>
               SDO_upload ();
 800e586:	f7ff fb0f 	bl	800dba8 <SDO_upload>
 800e58a:	e7b3      	b.n	800e4f4 <ESC_coeprocess+0x34>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE)
 800e58c:	491e      	ldr	r1, [pc, #120]	; (800e608 <ESC_coeprocess+0x148>)
 800e58e:	8809      	ldrh	r1, [r1, #0]
 800e590:	290a      	cmp	r1, #10
 800e592:	d1e7      	bne.n	800e564 <ESC_coeprocess+0xa4>
               && (ESCvar.segmented == MBXSEU))
 800e594:	491a      	ldr	r1, [pc, #104]	; (800e600 <ESC_coeprocess+0x140>)
 800e596:	f891 1091 	ldrb.w	r1, [r1, #145]	; 0x91
 800e59a:	2940      	cmp	r1, #64	; 0x40
 800e59c:	d1e2      	bne.n	800e564 <ESC_coeprocess+0xa4>
            SDO_uploadsegment ();
 800e59e:	f7fe ff3b 	bl	800d418 <SDO_uploadsegment>
 800e5a2:	e7a7      	b.n	800e4f4 <ESC_coeprocess+0x34>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 800e5a4:	f012 0f10 	tst.w	r2, #16
 800e5a8:	d002      	beq.n	800e5b0 <ESC_coeprocess+0xf0>
               SDO_download_complete_access ();
 800e5aa:	f7ff fa13 	bl	800d9d4 <SDO_download_complete_access>
 800e5ae:	e7a1      	b.n	800e4f4 <ESC_coeprocess+0x34>
               SDO_download ();
 800e5b0:	f7ff fc04 	bl	800ddbc <SDO_download>
 800e5b4:	e79e      	b.n	800e4f4 <ESC_coeprocess+0x34>
               && (coeobjdesc->infoheader.opcode == 0x01))
 800e5b6:	4a14      	ldr	r2, [pc, #80]	; (800e608 <ESC_coeprocess+0x148>)
 800e5b8:	7a12      	ldrb	r2, [r2, #8]
 800e5ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e5be:	2a01      	cmp	r2, #1
 800e5c0:	d1b6      	bne.n	800e530 <ESC_coeprocess+0x70>
            SDO_getodlist ();
 800e5c2:	f7fe fe41 	bl	800d248 <SDO_getodlist>
 800e5c6:	e795      	b.n	800e4f4 <ESC_coeprocess+0x34>
                  && (coeobjdesc->infoheader.opcode == 0x03))
 800e5c8:	4a0f      	ldr	r2, [pc, #60]	; (800e608 <ESC_coeprocess+0x148>)
 800e5ca:	7a12      	ldrb	r2, [r2, #8]
 800e5cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e5d0:	2a03      	cmp	r2, #3
 800e5d2:	d1af      	bne.n	800e534 <ESC_coeprocess+0x74>
               SDO_getod ();
 800e5d4:	f7ff fda2 	bl	800e11c <SDO_getod>
 800e5d8:	e78c      	b.n	800e4f4 <ESC_coeprocess+0x34>
                     && (coeobjdesc->infoheader.opcode == 0x05))
 800e5da:	4a0b      	ldr	r2, [pc, #44]	; (800e608 <ESC_coeprocess+0x148>)
 800e5dc:	7a12      	ldrb	r2, [r2, #8]
 800e5de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e5e2:	2a05      	cmp	r2, #5
 800e5e4:	d1a8      	bne.n	800e538 <ESC_coeprocess+0x78>
                  SDO_geted ();
 800e5e6:	f7ff fe2f 	bl	800e248 <SDO_geted>
 800e5ea:	e783      	b.n	800e4f4 <ESC_coeprocess+0x34>
                        SDO_abort (0, etohs (coesdo->index), coesdo->subindex, ABORT_UNSUPPORTED);
 800e5ec:	4906      	ldr	r1, [pc, #24]	; (800e608 <ESC_coeprocess+0x148>)
 800e5ee:	4b07      	ldr	r3, [pc, #28]	; (800e60c <ESC_coeprocess+0x14c>)
 800e5f0:	7aca      	ldrb	r2, [r1, #11]
 800e5f2:	f8b1 1009 	ldrh.w	r1, [r1, #9]
 800e5f6:	2000      	movs	r0, #0
 800e5f8:	f7fe fec4 	bl	800d384 <SDO_abort>
 800e5fc:	e7a1      	b.n	800e542 <ESC_coeprocess+0x82>
 800e5fe:	bf00      	nop
 800e600:	20007f34 	.word	0x20007f34
 800e604:	20008c20 	.word	0x20008c20
 800e608:	20008620 	.word	0x20008620
 800e60c:	06010000 	.word	0x06010000

0800e610 <COE_initDefaultValues>:
   const _objd *objd;
   int n;
   uint8_t maxsub;

   /* Let application decide if initialization will be skipped */
   if (ESCvar.skip_default_initialization)
 800e610:	4b18      	ldr	r3, [pc, #96]	; (800e674 <COE_initDefaultValues+0x64>)
 800e612:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e616:	bb63      	cbnz	r3, 800e672 <COE_initDefaultValues+0x62>
{
 800e618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   {
      return;
   }

   /* Set default values from object descriptor */
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 800e61c:	f04f 0800 	mov.w	r8, #0
 800e620:	e012      	b.n	800e648 <COE_initDefaultValues+0x38>
      i = 0;
      do
      {
         if (objd[i].data != NULL)
         {
            COE_setValue (&objd[i], objd[i].value);
 800e622:	68c2      	ldr	r2, [r0, #12]
 800e624:	2300      	movs	r3, #0
 800e626:	f7fe fd42 	bl	800d0ae <COE_setValue>
            DPRINT ("%04x:%02x = %x\n", SDOobjects[n].index, objd[i].subindex, objd[i].value);
         }
      } while (objd[i++].subindex < maxsub);
 800e62a:	3401      	adds	r4, #1
 800e62c:	5b72      	ldrh	r2, [r6, r5]
 800e62e:	b2bb      	uxth	r3, r7
 800e630:	429a      	cmp	r2, r3
 800e632:	d207      	bcs.n	800e644 <COE_initDefaultValues+0x34>
         if (objd[i].data != NULL)
 800e634:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e638:	009d      	lsls	r5, r3, #2
 800e63a:	1970      	adds	r0, r6, r5
 800e63c:	6903      	ldr	r3, [r0, #16]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d1ef      	bne.n	800e622 <COE_initDefaultValues+0x12>
 800e642:	e7f2      	b.n	800e62a <COE_initDefaultValues+0x1a>
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 800e644:	f108 0801 	add.w	r8, r8, #1
 800e648:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800e64c:	4a0a      	ldr	r2, [pc, #40]	; (800e678 <COE_initDefaultValues+0x68>)
 800e64e:	5ad2      	ldrh	r2, [r2, r3]
 800e650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e654:	429a      	cmp	r2, r3
 800e656:	d006      	beq.n	800e666 <COE_initDefaultValues+0x56>
      objd = SDOobjects[n].objdesc;
 800e658:	4b07      	ldr	r3, [pc, #28]	; (800e678 <COE_initDefaultValues+0x68>)
 800e65a:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e65e:	68de      	ldr	r6, [r3, #12]
      maxsub = SDOobjects[n].maxsub;
 800e660:	791f      	ldrb	r7, [r3, #4]
      i = 0;
 800e662:	2400      	movs	r4, #0
 800e664:	e7e6      	b.n	800e634 <COE_initDefaultValues+0x24>
   }

   /* Let application override default values */
   if (ESCvar.set_defaults_hook != NULL)
 800e666:	4b03      	ldr	r3, [pc, #12]	; (800e674 <COE_initDefaultValues+0x64>)
 800e668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e66a:	b103      	cbz	r3, 800e66e <COE_initDefaultValues+0x5e>
   {
      ESCvar.set_defaults_hook();
 800e66c:	4798      	blx	r3
   }
}
 800e66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e672:	4770      	bx	lr
 800e674:	20007f34 	.word	0x20007f34
 800e678:	0801546c 	.word	0x0801546c

0800e67c <COE_pdoPack>:
 * @param[in] buffer     = input process data
 * @param[in] nmappings  = number of mappings in sync manager
 * @param[in] mappings   = list of mapped objects in sync manager
 */
void COE_pdoPack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 800e67c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e680:	b083      	sub	sp, #12
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 800e682:	f010 0f07 	tst.w	r0, #7
 800e686:	d104      	bne.n	800e692 <COE_pdoPack+0x16>
 800e688:	4680      	mov	r8, r0
 800e68a:	460f      	mov	r7, r1
 800e68c:	4616      	mov	r6, r2

   for (ix = 0; ix < nmappings; ix++)
 800e68e:	2400      	movs	r4, #0
 800e690:	e010      	b.n	800e6b4 <COE_pdoPack+0x38>
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 800e692:	4b15      	ldr	r3, [pc, #84]	; (800e6e8 <COE_pdoPack+0x6c>)
 800e694:	4a15      	ldr	r2, [pc, #84]	; (800e6ec <COE_pdoPack+0x70>)
 800e696:	f240 61ff 	movw	r1, #1791	; 0x6ff
 800e69a:	4815      	ldr	r0, [pc, #84]	; (800e6f0 <COE_pdoPack+0x74>)
 800e69c:	f003 f8f0 	bl	8011880 <__assert_func>
            );
         }
         else
         {
            /* Atomically get object value */
            uint64_t value = COE_getValue (obj);
 800e6a0:	f7fe fff2 	bl	800d688 <COE_getValue>
            COE_bitsliceSet (
 800e6a4:	e9cd 0100 	strd	r0, r1, [sp]
 800e6a8:	462a      	mov	r2, r5
 800e6aa:	4649      	mov	r1, r9
 800e6ac:	4640      	mov	r0, r8
 800e6ae:	f7fe fc76 	bl	800cf9e <COE_bitsliceSet>
   for (ix = 0; ix < nmappings; ix++)
 800e6b2:	3401      	adds	r4, #1
 800e6b4:	42bc      	cmp	r4, r7
 800e6b6:	da14      	bge.n	800e6e2 <COE_pdoPack+0x66>
      const _objd * obj = mappings[ix].obj;
 800e6b8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e6bc:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800e6c0:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
      uint32_t offset = mappings[ix].offset;
 800e6c4:	f8d2 9008 	ldr.w	r9, [r2, #8]
      if (obj != NULL)
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	d0f2      	beq.n	800e6b2 <COE_pdoPack+0x36>
         if (obj->bitlength > 64)
 800e6cc:	8885      	ldrh	r5, [r0, #4]
 800e6ce:	2d40      	cmp	r5, #64	; 0x40
 800e6d0:	d9e6      	bls.n	800e6a0 <COE_pdoPack+0x24>
               BITS2BYTES (obj->bitlength)
 800e6d2:	1dea      	adds	r2, r5, #7
            memcpy (
 800e6d4:	08d2      	lsrs	r2, r2, #3
 800e6d6:	6901      	ldr	r1, [r0, #16]
 800e6d8:	eb08 00d9 	add.w	r0, r8, r9, lsr #3
 800e6dc:	f003 fb14 	bl	8011d08 <memcpy>
 800e6e0:	e7e7      	b.n	800e6b2 <COE_pdoPack+0x36>
               value
            );
         }
      }
   }
}
 800e6e2:	b003      	add	sp, #12
 800e6e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6e8:	08013550 	.word	0x08013550
 800e6ec:	08013590 	.word	0x08013590
 800e6f0:	0801352c 	.word	0x0801352c

0800e6f4 <COE_pdoUnpack>:
 * @param[in] buffer    = output process data
 * @param[in] nmappings = number of mappings in sync manager
 * @param[in] mappings  = list of mapped objects in sync manager
 */
void COE_pdoUnpack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 800e6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 800e6f8:	f010 0f07 	tst.w	r0, #7
 800e6fc:	d104      	bne.n	800e708 <COE_pdoUnpack+0x14>
 800e6fe:	4680      	mov	r8, r0
 800e700:	460f      	mov	r7, r1
 800e702:	4616      	mov	r6, r2

   for (ix = 0; ix < nmappings; ix++)
 800e704:	2400      	movs	r4, #0
 800e706:	e00f      	b.n	800e728 <COE_pdoUnpack+0x34>
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 800e708:	4b13      	ldr	r3, [pc, #76]	; (800e758 <COE_pdoUnpack+0x64>)
 800e70a:	4a14      	ldr	r2, [pc, #80]	; (800e75c <COE_pdoUnpack+0x68>)
 800e70c:	f240 712e 	movw	r1, #1838	; 0x72e
 800e710:	4813      	ldr	r0, [pc, #76]	; (800e760 <COE_pdoUnpack+0x6c>)
 800e712:	f003 f8b5 	bl	8011880 <__assert_func>
            );
         }
         else
         {
            /* Atomically set object value */
            uint64_t value = COE_bitsliceGet (
 800e716:	4640      	mov	r0, r8
 800e718:	f7fe fbef 	bl	800cefa <COE_bitsliceGet>
 800e71c:	4602      	mov	r2, r0
 800e71e:	460b      	mov	r3, r1
               (uint64_t *)buffer,
               offset,
               obj->bitlength
            );
            COE_setValue (obj, value);
 800e720:	4628      	mov	r0, r5
 800e722:	f7fe fcc4 	bl	800d0ae <COE_setValue>
   for (ix = 0; ix < nmappings; ix++)
 800e726:	3401      	adds	r4, #1
 800e728:	42bc      	cmp	r4, r7
 800e72a:	da13      	bge.n	800e754 <COE_pdoUnpack+0x60>
      const _objd * obj = mappings[ix].obj;
 800e72c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e730:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800e734:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
      uint32_t offset = mappings[ix].offset;
 800e738:	6891      	ldr	r1, [r2, #8]
      if (obj != NULL)
 800e73a:	2d00      	cmp	r5, #0
 800e73c:	d0f3      	beq.n	800e726 <COE_pdoUnpack+0x32>
         if (obj->bitlength > 64)
 800e73e:	88aa      	ldrh	r2, [r5, #4]
 800e740:	2a40      	cmp	r2, #64	; 0x40
 800e742:	d9e8      	bls.n	800e716 <COE_pdoUnpack+0x22>
               BITS2BYTES (obj->bitlength)
 800e744:	3207      	adds	r2, #7
            memcpy (
 800e746:	08d2      	lsrs	r2, r2, #3
 800e748:	eb08 01d1 	add.w	r1, r8, r1, lsr #3
 800e74c:	6928      	ldr	r0, [r5, #16]
 800e74e:	f003 fadb 	bl	8011d08 <memcpy>
 800e752:	e7e8      	b.n	800e726 <COE_pdoUnpack+0x32>
         }
      }
   }
}
 800e754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e758:	08013550 	.word	0x08013550
 800e75c:	08013570 	.word	0x08013570
 800e760:	0801352c 	.word	0x0801352c

0800e764 <COE_maxSub>:
 * This function fetches the value of subindex 0 (max subindex).
 *
 * @param[in] index = object index
 */
uint8_t COE_maxSub (uint16_t index)
{
 800e764:	b508      	push	{r3, lr}
   int32_t nidx;
   uint8_t maxsub;

   nidx = SDO_findobject (index);
 800e766:	f7fe fffb 	bl	800d760 <SDO_findobject>
   if (nidx == -1)
 800e76a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e76e:	d009      	beq.n	800e784 <COE_maxSub+0x20>
      return 0;

   maxsub = OBJ_VALUE_FETCH (maxsub, SDOobjects[nidx].objdesc[0]);
 800e770:	4b05      	ldr	r3, [pc, #20]	; (800e788 <COE_maxSub+0x24>)
 800e772:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800e776:	68da      	ldr	r2, [r3, #12]
 800e778:	6913      	ldr	r3, [r2, #16]
 800e77a:	b10b      	cbz	r3, 800e780 <COE_maxSub+0x1c>
 800e77c:	7818      	ldrb	r0, [r3, #0]
   return maxsub;
}
 800e77e:	bd08      	pop	{r3, pc}
   maxsub = OBJ_VALUE_FETCH (maxsub, SDOobjects[nidx].objdesc[0]);
 800e780:	7b10      	ldrb	r0, [r2, #12]
 800e782:	e7fc      	b.n	800e77e <COE_maxSub+0x1a>
      return 0;
 800e784:	2000      	movs	r0, #0
 800e786:	e7fa      	b.n	800e77e <COE_maxSub+0x1a>
 800e788:	0801546c 	.word	0x0801546c

0800e78c <ESC_read_pram>:
   } while(value & LAN9252_ESC_CSR_CMD_BUSY);
}

/* ESC read process data ram function */
static void ESC_read_pram (uint16_t address, void *buf, uint16_t len)
{
 800e78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e790:	b0c2      	sub	sp, #264	; 0x108
 800e792:	4607      	mov	r7, r0
 800e794:	4688      	mov	r8, r1
 800e796:	4615      	mov	r5, r2
   uint32_t value;
   uint8_t * temp_buf = buf;
   uint16_t quotient, remainder, byte_offset = 0;
   uint8_t fifo_cnt, fifo_size, fifo_range, first_byte_position, temp_len;
   uint8_t buffer[256] = {0};
 800e798:	2100      	movs	r1, #0
 800e79a:	9101      	str	r1, [sp, #4]
 800e79c:	22fc      	movs	r2, #252	; 0xfc
 800e79e:	a802      	add	r0, sp, #8
 800e7a0:	f003 f9f4 	bl	8011b8c <memset>
   int i, size;

   lan9252_write_32 (LAN9252_ESC_PRAM_RD_CMD_REG, LAN9252_ESC_PRAM_CMD_ABORT);
 800e7a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e7a8:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800e7ac:	f7fc fe5a 	bl	800b464 <lan9252_write_32>

   do
   {
      value = lan9252_read_32 (LAN9252_ESC_PRAM_RD_CMD_REG);
 800e7b0:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800e7b4:	f7fc fe22 	bl	800b3fc <lan9252_read_32>
 800e7b8:	9041      	str	r0, [sp, #260]	; 0x104
   } while(value & LAN9252_ESC_PRAM_CMD_BUSY);
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	dbf8      	blt.n	800e7b0 <ESC_read_pram+0x24>

   lan9252_write_32 (LAN9252_ESC_PRAM_RD_ADDR_LEN_REG, (LAN9252_ESC_PRAM_SIZE(len) | LAN9252_ESC_PRAM_ADDR(address)));
 800e7be:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800e7c2:	f44f 7042 	mov.w	r0, #776	; 0x308
 800e7c6:	f7fc fe4d 	bl	800b464 <lan9252_write_32>
   lan9252_write_32 (LAN9252_ESC_PRAM_RD_CMD_REG, LAN9252_ESC_PRAM_CMD_BUSY);
 800e7ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e7ce:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800e7d2:	f7fc fe47 	bl	800b464 <lan9252_write_32>

   /* Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet and MicroChip SDK code
    */
   first_byte_position = (address & 0x03);
 800e7d6:	f007 0703 	and.w	r7, r7, #3
   uint16_t quotient, remainder, byte_offset = 0;
 800e7da:	2600      	movs	r6, #0

   /* Transfer data */
   while (len > 0)
 800e7dc:	2d00      	cmp	r5, #0
 800e7de:	d06f      	beq.n	800e8c0 <ESC_read_pram+0x134>
   {
      /* Wait for read availability */
      if (byte_offset > 0)
 800e7e0:	b346      	cbz	r6, 800e834 <ESC_read_pram+0xa8>
      {
         quotient = len/4;
 800e7e2:	08ac      	lsrs	r4, r5, #2
         remainder = len - quotient*4;
 800e7e4:	f005 0303 	and.w	r3, r5, #3
      {
         quotient = (len + first_byte_position)/4;
         remainder = (len + first_byte_position) - quotient*4;
      }

      if (remainder != 0)
 800e7e8:	b10b      	cbz	r3, 800e7ee <ESC_read_pram+0x62>
      {
         quotient++;
 800e7ea:	3401      	adds	r4, #1
 800e7ec:	b2a4      	uxth	r4, r4
      }

      fifo_range = MIN(quotient,16);
 800e7ee:	2c10      	cmp	r4, #16
 800e7f0:	bf28      	it	cs
 800e7f2:	2410      	movcs	r4, #16
 800e7f4:	b2e4      	uxtb	r4, r4

      do
      {
         value = lan9252_read_32 (LAN9252_ESC_PRAM_RD_CMD_REG);
 800e7f6:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800e7fa:	f7fc fdff 	bl	800b3fc <lan9252_read_32>
 800e7fe:	9041      	str	r0, [sp, #260]	; 0x104
      }while(!(value & LAN9252_ESC_PRAM_CMD_AVAIL) || (LAN9252_ESC_PRAM_CMD_CNT(value) < fifo_range));
 800e800:	f010 0f01 	tst.w	r0, #1
 800e804:	d0f7      	beq.n	800e7f6 <ESC_read_pram+0x6a>
 800e806:	ea4f 2910 	mov.w	r9, r0, lsr #8
 800e80a:	f3c0 2004 	ubfx	r0, r0, #8, #5
 800e80e:	42a0      	cmp	r0, r4
 800e810:	d3f1      	bcc.n	800e7f6 <ESC_read_pram+0x6a>

      /* Fifo size */
      fifo_size = LAN9252_ESC_PRAM_CMD_CNT(value);
 800e812:	f009 091f 	and.w	r9, r9, #31

      /* Transfer data size */
      size = 4*fifo_size;
 800e816:	ea4f 0489 	mov.w	r4, r9, lsl #2

      /* Reset fifo count */
      fifo_cnt = fifo_size;

      /* Reset buffer */
      memset(buffer,0,size);
 800e81a:	4622      	mov	r2, r4
 800e81c:	2100      	movs	r1, #0
 800e81e:	a801      	add	r0, sp, #4
 800e820:	f003 f9b4 	bl	8011b8c <memset>

      /* Transfer batch of data */
      lan9252_read_data ((uint8_t *)buffer, LAN9252_ESC_PRAM_RD_FIFO_REG, size);
 800e824:	4622      	mov	r2, r4
 800e826:	2100      	movs	r1, #0
 800e828:	a801      	add	r0, sp, #4
 800e82a:	f7fc fdb9 	bl	800b3a0 <lan9252_read_data>

      i = 0;
 800e82e:	f04f 0a00 	mov.w	sl, #0
      while (fifo_cnt > 0 && len > 0)
 800e832:	e01f      	b.n	800e874 <ESC_read_pram+0xe8>
         quotient = (len + first_byte_position)/4;
 800e834:	19ec      	adds	r4, r5, r7
 800e836:	f3c4 048f 	ubfx	r4, r4, #2, #16
         remainder = (len + first_byte_position) - quotient*4;
 800e83a:	19eb      	adds	r3, r5, r7
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	00a2      	lsls	r2, r4, #2
 800e840:	b292      	uxth	r2, r2
 800e842:	1a9b      	subs	r3, r3, r2
 800e844:	b29b      	uxth	r3, r3
 800e846:	e7cf      	b.n	800e7e8 <ESC_read_pram+0x5c>
            temp_len = (len > 4) ? 4: len;
            memcpy(temp_buf + byte_offset ,&value, temp_len);
         }
         else
         {
            temp_len = (len > (4 - first_byte_position)) ? (4 - first_byte_position) : len;
 800e848:	f1c7 0404 	rsb	r4, r7, #4
 800e84c:	42ac      	cmp	r4, r5
 800e84e:	bfa8      	it	ge
 800e850:	462c      	movge	r4, r5
 800e852:	b2e4      	uxtb	r4, r4
            memcpy(temp_buf ,((uint8_t *)&value + first_byte_position), temp_len);
 800e854:	4622      	mov	r2, r4
 800e856:	ab41      	add	r3, sp, #260	; 0x104
 800e858:	19d9      	adds	r1, r3, r7
 800e85a:	4640      	mov	r0, r8
 800e85c:	f003 fa54 	bl	8011d08 <memcpy>
         }

         i += 4;
 800e860:	f10a 0a04 	add.w	sl, sl, #4
         fifo_cnt--;
 800e864:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e868:	fa5f f989 	uxtb.w	r9, r9
         len -= temp_len;
 800e86c:	1b2d      	subs	r5, r5, r4
 800e86e:	b2ad      	uxth	r5, r5
         byte_offset += temp_len;
 800e870:	4434      	add	r4, r6
 800e872:	b2a6      	uxth	r6, r4
      while (fifo_cnt > 0 && len > 0)
 800e874:	f1b9 0f00 	cmp.w	r9, #0
 800e878:	d0b0      	beq.n	800e7dc <ESC_read_pram+0x50>
 800e87a:	2d00      	cmp	r5, #0
 800e87c:	d0ae      	beq.n	800e7dc <ESC_read_pram+0x50>
         value = buffer[i] | (buffer[i+1] << 8) | (buffer[i+2] << 16) | (buffer[i+3] << 24);
 800e87e:	aa01      	add	r2, sp, #4
 800e880:	f812 300a 	ldrb.w	r3, [r2, sl]
 800e884:	f10a 0101 	add.w	r1, sl, #1
 800e888:	5c51      	ldrb	r1, [r2, r1]
 800e88a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e88e:	f10a 0102 	add.w	r1, sl, #2
 800e892:	5c51      	ldrb	r1, [r2, r1]
 800e894:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800e898:	f10a 0103 	add.w	r1, sl, #3
 800e89c:	5c52      	ldrb	r2, [r2, r1]
 800e89e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e8a2:	9341      	str	r3, [sp, #260]	; 0x104
         if (byte_offset > 0)
 800e8a4:	2e00      	cmp	r6, #0
 800e8a6:	d0cf      	beq.n	800e848 <ESC_read_pram+0xbc>
            temp_len = (len > 4) ? 4: len;
 800e8a8:	462c      	mov	r4, r5
 800e8aa:	2d04      	cmp	r5, #4
 800e8ac:	bf28      	it	cs
 800e8ae:	2404      	movcs	r4, #4
 800e8b0:	b2e4      	uxtb	r4, r4
            memcpy(temp_buf + byte_offset ,&value, temp_len);
 800e8b2:	4622      	mov	r2, r4
 800e8b4:	a941      	add	r1, sp, #260	; 0x104
 800e8b6:	eb08 0006 	add.w	r0, r8, r6
 800e8ba:	f003 fa25 	bl	8011d08 <memcpy>
 800e8be:	e7cf      	b.n	800e860 <ESC_read_pram+0xd4>
      }

      // vPortFree(buffer);
   }
}
 800e8c0:	b042      	add	sp, #264	; 0x108
 800e8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e8c6 <ESC_read_csr>:
{
 800e8c6:	b530      	push	{r4, r5, lr}
 800e8c8:	b083      	sub	sp, #12
 800e8ca:	460d      	mov	r5, r1
 800e8cc:	4614      	mov	r4, r2
   value = (LAN9252_ESC_CSR_CMD_READ | LAN9252_ESC_CSR_CMD_SIZE(len) | address);
 800e8ce:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e8d2:	f040 4140 	orr.w	r1, r0, #3221225472	; 0xc0000000
 800e8d6:	9101      	str	r1, [sp, #4]
   lan9252_write_32 (LAN9252_ESC_CSR_CMD_REG, value);
 800e8d8:	f44f 7041 	mov.w	r0, #772	; 0x304
 800e8dc:	f7fc fdc2 	bl	800b464 <lan9252_write_32>
      value = lan9252_read_32 (LAN9252_ESC_CSR_CMD_REG);
 800e8e0:	f44f 7041 	mov.w	r0, #772	; 0x304
 800e8e4:	f7fc fd8a 	bl	800b3fc <lan9252_read_32>
 800e8e8:	9001      	str	r0, [sp, #4]
   } while (value & LAN9252_ESC_CSR_CMD_BUSY);
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	dbf8      	blt.n	800e8e0 <ESC_read_csr+0x1a>
   value = lan9252_read_32 (LAN9252_ESC_CSR_DATA_REG);
 800e8ee:	f44f 7040 	mov.w	r0, #768	; 0x300
 800e8f2:	f7fc fd83 	bl	800b3fc <lan9252_read_32>
 800e8f6:	9001      	str	r0, [sp, #4]
   memcpy(buf, (uint8_t *)&value, len);
 800e8f8:	4622      	mov	r2, r4
 800e8fa:	a901      	add	r1, sp, #4
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	f003 fa03 	bl	8011d08 <memcpy>
}
 800e902:	b003      	add	sp, #12
 800e904:	bd30      	pop	{r4, r5, pc}

0800e906 <ESC_write_csr>:
{
 800e906:	b530      	push	{r4, r5, lr}
 800e908:	b083      	sub	sp, #12
 800e90a:	4604      	mov	r4, r0
 800e90c:	4615      	mov	r5, r2
   memcpy((uint8_t*)&value, buf,len);
 800e90e:	a801      	add	r0, sp, #4
 800e910:	f003 f9fa 	bl	8011d08 <memcpy>
   lan9252_write_32 (LAN9252_ESC_CSR_DATA_REG, value);
 800e914:	9901      	ldr	r1, [sp, #4]
 800e916:	f44f 7040 	mov.w	r0, #768	; 0x300
 800e91a:	f7fc fda3 	bl	800b464 <lan9252_write_32>
   value = (LAN9252_ESC_CSR_CMD_WRITE | LAN9252_ESC_CSR_CMD_SIZE(len) | address);
 800e91e:	ea44 4105 	orr.w	r1, r4, r5, lsl #16
 800e922:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800e926:	9101      	str	r1, [sp, #4]
   lan9252_write_32 (LAN9252_ESC_CSR_CMD_REG, value);
 800e928:	f44f 7041 	mov.w	r0, #772	; 0x304
 800e92c:	f7fc fd9a 	bl	800b464 <lan9252_write_32>
      value = lan9252_read_32 (LAN9252_ESC_CSR_CMD_REG);
 800e930:	f44f 7041 	mov.w	r0, #772	; 0x304
 800e934:	f7fc fd62 	bl	800b3fc <lan9252_read_32>
 800e938:	9001      	str	r0, [sp, #4]
   } while(value & LAN9252_ESC_CSR_CMD_BUSY);
 800e93a:	2800      	cmp	r0, #0
 800e93c:	dbf8      	blt.n	800e930 <ESC_write_csr+0x2a>
}
 800e93e:	b003      	add	sp, #12
 800e940:	bd30      	pop	{r4, r5, pc}

0800e942 <ESC_write_pram>:

/* ESC write process data ram function */
static void ESC_write_pram (uint16_t address, void *buf, uint16_t len)
{
 800e942:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e946:	b0c3      	sub	sp, #268	; 0x10c
 800e948:	4607      	mov	r7, r0
 800e94a:	4688      	mov	r8, r1
 800e94c:	4615      	mov	r5, r2
   uint32_t value;
   uint8_t * temp_buf = buf;
   uint16_t quotient, remainder, byte_offset = 0;
   uint8_t fifo_cnt, fifo_size, fifo_range, first_byte_position, temp_len;
   uint8_t buffer[256] = {0};
 800e94e:	2100      	movs	r1, #0
 800e950:	9101      	str	r1, [sp, #4]
 800e952:	22fc      	movs	r2, #252	; 0xfc
 800e954:	a802      	add	r0, sp, #8
 800e956:	f003 f919 	bl	8011b8c <memset>
   int i, size;

   lan9252_write_32 (LAN9252_ESC_PRAM_WR_CMD_REG, LAN9252_ESC_PRAM_CMD_ABORT);
 800e95a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e95e:	f44f 7045 	mov.w	r0, #788	; 0x314
 800e962:	f7fc fd7f 	bl	800b464 <lan9252_write_32>

   do
   {
      value = lan9252_read_32 (LAN9252_ESC_PRAM_WR_CMD_REG);
 800e966:	f44f 7045 	mov.w	r0, #788	; 0x314
 800e96a:	f7fc fd47 	bl	800b3fc <lan9252_read_32>
 800e96e:	9041      	str	r0, [sp, #260]	; 0x104
   } while(value & LAN9252_ESC_PRAM_CMD_BUSY);
 800e970:	2800      	cmp	r0, #0
 800e972:	dbf8      	blt.n	800e966 <ESC_write_pram+0x24>

   lan9252_write_32 (LAN9252_ESC_PRAM_WR_ADDR_LEN_REG, (LAN9252_ESC_PRAM_SIZE(len) | LAN9252_ESC_PRAM_ADDR(address)));
 800e974:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800e978:	f44f 7044 	mov.w	r0, #784	; 0x310
 800e97c:	f7fc fd72 	bl	800b464 <lan9252_write_32>
   lan9252_write_32 (LAN9252_ESC_PRAM_WR_CMD_REG, LAN9252_ESC_PRAM_CMD_BUSY);
 800e980:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e984:	f44f 7045 	mov.w	r0, #788	; 0x314
 800e988:	f7fc fd6c 	bl	800b464 <lan9252_write_32>

   /* Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet and MicroChip SDK code
    */
   first_byte_position = (address & 0x03);
 800e98c:	f007 0703 	and.w	r7, r7, #3
   uint16_t quotient, remainder, byte_offset = 0;
 800e990:	2600      	movs	r6, #0

   /* Transfer data */
   while (len > 0)
 800e992:	e048      	b.n	800ea26 <ESC_write_pram+0xe4>
         quotient = len/4;
         remainder = len - quotient*4;
      }
      else
      {
         quotient = (len + first_byte_position)/4;
 800e994:	19ec      	adds	r4, r5, r7
 800e996:	f3c4 048f 	ubfx	r4, r4, #2, #16
         remainder = (len + first_byte_position) - quotient*4;
 800e99a:	19eb      	adds	r3, r5, r7
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	00a2      	lsls	r2, r4, #2
 800e9a0:	b292      	uxth	r2, r2
 800e9a2:	1a9b      	subs	r3, r3, r2
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	e044      	b.n	800ea32 <ESC_write_pram+0xf0>
            temp_len = (len > 4) ? 4: len;
            memcpy(&value, (temp_buf + byte_offset), temp_len);
         }
         else
         {
            temp_len = (len > (4 - first_byte_position)) ? (4 - first_byte_position) : len;
 800e9a8:	f1c7 0404 	rsb	r4, r7, #4
 800e9ac:	42ac      	cmp	r4, r5
 800e9ae:	bfa8      	it	ge
 800e9b0:	462c      	movge	r4, r5
 800e9b2:	b2e4      	uxtb	r4, r4
            memcpy(((uint8_t *)&value + first_byte_position), temp_buf, temp_len);
 800e9b4:	4622      	mov	r2, r4
 800e9b6:	4641      	mov	r1, r8
 800e9b8:	ab41      	add	r3, sp, #260	; 0x104
 800e9ba:	19d8      	adds	r0, r3, r7
 800e9bc:	f003 f9a4 	bl	8011d08 <memcpy>
         }

         buffer[i] = (value & 0xFF);
 800e9c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e9c2:	aa01      	add	r2, sp, #4
 800e9c4:	f802 300a 	strb.w	r3, [r2, sl]
         buffer[i+1] = ((value >> 8) & 0xFF);
 800e9c8:	0a18      	lsrs	r0, r3, #8
 800e9ca:	f10a 0101 	add.w	r1, sl, #1
 800e9ce:	5450      	strb	r0, [r2, r1]
         buffer[i+2] = ((value >> 16) & 0xFF);
 800e9d0:	0c18      	lsrs	r0, r3, #16
 800e9d2:	f10a 0102 	add.w	r1, sl, #2
 800e9d6:	5450      	strb	r0, [r2, r1]
         buffer[i+3] = ((value >> 24) & 0xFF);
 800e9d8:	0e1b      	lsrs	r3, r3, #24
 800e9da:	f10a 0103 	add.w	r1, sl, #3
 800e9de:	5453      	strb	r3, [r2, r1]

         i += 4;
 800e9e0:	f10a 0a04 	add.w	sl, sl, #4
         fifo_cnt--;
 800e9e4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e9e8:	fa5f f989 	uxtb.w	r9, r9
         len -= temp_len;
 800e9ec:	1b2d      	subs	r5, r5, r4
 800e9ee:	b2ad      	uxth	r5, r5
         byte_offset += temp_len;
 800e9f0:	4434      	add	r4, r6
 800e9f2:	b2a6      	uxth	r6, r4
      while (fifo_cnt > 0 && len > 0)
 800e9f4:	f1b9 0f00 	cmp.w	r9, #0
 800e9f8:	d010      	beq.n	800ea1c <ESC_write_pram+0xda>
 800e9fa:	b17d      	cbz	r5, 800ea1c <ESC_write_pram+0xda>
         value = 0;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	9341      	str	r3, [sp, #260]	; 0x104
         if (byte_offset > 0)
 800ea00:	2e00      	cmp	r6, #0
 800ea02:	d0d1      	beq.n	800e9a8 <ESC_write_pram+0x66>
            temp_len = (len > 4) ? 4: len;
 800ea04:	462c      	mov	r4, r5
 800ea06:	2d04      	cmp	r5, #4
 800ea08:	bf28      	it	cs
 800ea0a:	2404      	movcs	r4, #4
 800ea0c:	b2e4      	uxtb	r4, r4
            memcpy(&value, (temp_buf + byte_offset), temp_len);
 800ea0e:	4622      	mov	r2, r4
 800ea10:	eb08 0106 	add.w	r1, r8, r6
 800ea14:	a841      	add	r0, sp, #260	; 0x104
 800ea16:	f003 f977 	bl	8011d08 <memcpy>
 800ea1a:	e7d1      	b.n	800e9c0 <ESC_write_pram+0x7e>
      }

      /* Transfer batch of data */
      lan9252_write_data ((uint8_t *)buffer, LAN9252_ESC_PRAM_WR_FIFO_REG, size);
 800ea1c:	465a      	mov	r2, fp
 800ea1e:	2120      	movs	r1, #32
 800ea20:	a801      	add	r0, sp, #4
 800ea22:	f7fc fd07 	bl	800b434 <lan9252_write_data>
   while (len > 0)
 800ea26:	b32d      	cbz	r5, 800ea74 <ESC_write_pram+0x132>
      if (byte_offset > 0)
 800ea28:	2e00      	cmp	r6, #0
 800ea2a:	d0b3      	beq.n	800e994 <ESC_write_pram+0x52>
         quotient = len/4;
 800ea2c:	08ac      	lsrs	r4, r5, #2
         remainder = len - quotient*4;
 800ea2e:	f005 0303 	and.w	r3, r5, #3
      if (remainder != 0)
 800ea32:	b10b      	cbz	r3, 800ea38 <ESC_write_pram+0xf6>
         quotient++;
 800ea34:	3401      	adds	r4, #1
 800ea36:	b2a4      	uxth	r4, r4
      fifo_range = MIN(quotient,16);
 800ea38:	2c10      	cmp	r4, #16
 800ea3a:	bf28      	it	cs
 800ea3c:	2410      	movcs	r4, #16
 800ea3e:	b2e4      	uxtb	r4, r4
         value = lan9252_read_32 (LAN9252_ESC_PRAM_WR_CMD_REG);
 800ea40:	f44f 7045 	mov.w	r0, #788	; 0x314
 800ea44:	f7fc fcda 	bl	800b3fc <lan9252_read_32>
 800ea48:	9041      	str	r0, [sp, #260]	; 0x104
      }while(!(value & LAN9252_ESC_PRAM_CMD_AVAIL) || (LAN9252_ESC_PRAM_CMD_CNT(value) < fifo_range));
 800ea4a:	f010 0f01 	tst.w	r0, #1
 800ea4e:	d0f7      	beq.n	800ea40 <ESC_write_pram+0xfe>
 800ea50:	ea4f 2910 	mov.w	r9, r0, lsr #8
 800ea54:	f3c0 2004 	ubfx	r0, r0, #8, #5
 800ea58:	42a0      	cmp	r0, r4
 800ea5a:	d3f1      	bcc.n	800ea40 <ESC_write_pram+0xfe>
      fifo_size = LAN9252_ESC_PRAM_CMD_CNT(value);
 800ea5c:	f009 091f 	and.w	r9, r9, #31
      size = 4*fifo_size;
 800ea60:	ea4f 0b89 	mov.w	fp, r9, lsl #2
      memset(buffer,0,size);
 800ea64:	465a      	mov	r2, fp
 800ea66:	2100      	movs	r1, #0
 800ea68:	a801      	add	r0, sp, #4
 800ea6a:	f003 f88f 	bl	8011b8c <memset>
      i = 0;
 800ea6e:	f04f 0a00 	mov.w	sl, #0
      while (fifo_cnt > 0 && len > 0)
 800ea72:	e7bf      	b.n	800e9f4 <ESC_write_pram+0xb2>
      // vPortFree(buffer);
   }
}
 800ea74:	b043      	add	sp, #268	; 0x10c
 800ea76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ea7c <ESC_read>:
 * @param[in]   address     = address of ESC register to read
 * @param[out]  buf         = pointer to buffer to read in
 * @param[in]   len         = number of bytes to read
 */
void ESC_read (uint16_t address, void *buf, uint16_t len)
{
 800ea7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea7e:	4604      	mov	r4, r0
 800ea80:	460f      	mov	r7, r1
 800ea82:	4615      	mov	r5, r2
   /* Select Read function depending on address, process data ram or not */
   if (address >= 0x1000)
 800ea84:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800ea88:	d31e      	bcc.n	800eac8 <ESC_read+0x4c>
   {
      ESC_read_pram (address, buf, len);
 800ea8a:	f7ff fe7f 	bl	800e78c <ESC_read_pram>
         temp_buf += size;
         address += size;
      }
   }
   /* To mimic the ET1100 always providing AlEvent on every read or write */
   ESC_read_csr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
 800ea8e:	4c18      	ldr	r4, [pc, #96]	; (800eaf0 <ESC_read+0x74>)
 800ea90:	2204      	movs	r2, #4
 800ea92:	4621      	mov	r1, r4
 800ea94:	f44f 7008 	mov.w	r0, #544	; 0x220
 800ea98:	f7ff ff15 	bl	800e8c6 <ESC_read_csr>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 800ea9c:	4621      	mov	r1, r4
 800ea9e:	f851 39e4 	ldr.w	r3, [r1], #-228
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4

}
 800eaa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         else if (size == 3)
 800eaaa:	2d03      	cmp	r5, #3
 800eaac:	d102      	bne.n	800eab4 <ESC_read+0x38>
            size = 1;
 800eaae:	2601      	movs	r6, #1
 800eab0:	e000      	b.n	800eab4 <ESC_read+0x38>
            size = 1;
 800eab2:	2601      	movs	r6, #1
         ESC_read_csr(address, temp_buf, size);
 800eab4:	4632      	mov	r2, r6
 800eab6:	4639      	mov	r1, r7
 800eab8:	4620      	mov	r0, r4
 800eaba:	f7ff ff04 	bl	800e8c6 <ESC_read_csr>
         len -= size;
 800eabe:	1bad      	subs	r5, r5, r6
 800eac0:	b2ad      	uxth	r5, r5
         temp_buf += size;
 800eac2:	4437      	add	r7, r6
         address += size;
 800eac4:	4434      	add	r4, r6
 800eac6:	b2a4      	uxth	r4, r4
      while(len > 0)
 800eac8:	2d00      	cmp	r5, #0
 800eaca:	d0e0      	beq.n	800ea8e <ESC_read+0x12>
         size = (len > 4) ? 4 : len;
 800eacc:	462e      	mov	r6, r5
 800eace:	2d04      	cmp	r5, #4
 800ead0:	bf28      	it	cs
 800ead2:	2604      	movcs	r6, #4
         if(address & BIT(0))
 800ead4:	f014 0f01 	tst.w	r4, #1
 800ead8:	d1eb      	bne.n	800eab2 <ESC_read+0x36>
         else if (address & BIT(1))
 800eada:	f014 0f02 	tst.w	r4, #2
 800eade:	d0e4      	beq.n	800eaaa <ESC_read+0x2e>
            size = (size & BIT(0)) ? 1 : 2;
 800eae0:	f016 0f01 	tst.w	r6, #1
 800eae4:	d001      	beq.n	800eaea <ESC_read+0x6e>
 800eae6:	2601      	movs	r6, #1
 800eae8:	e7e4      	b.n	800eab4 <ESC_read+0x38>
 800eaea:	2602      	movs	r6, #2
 800eaec:	e7e2      	b.n	800eab4 <ESC_read+0x38>
 800eaee:	bf00      	nop
 800eaf0:	20008018 	.word	0x20008018

0800eaf4 <ESC_write>:
 * @param[in]   address     = address of ESC register to write
 * @param[out]  buf         = pointer to buffer to write from
 * @param[in]   len         = number of bytes to write
 */
void ESC_write (uint16_t address, void *buf, uint16_t len)
{
 800eaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	460f      	mov	r7, r1
 800eafa:	4615      	mov	r5, r2
   /* Select Write function depending on address, process data ram or not */
   if (address >= 0x1000)
 800eafc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800eb00:	d31e      	bcc.n	800eb40 <ESC_write+0x4c>
   {
      ESC_write_pram(address, buf, len);
 800eb02:	f7ff ff1e 	bl	800e942 <ESC_write_pram>
         address += size;
      }
   }

   /* To mimic the ET1x00 always providing AlEvent on every read or write */
   ESC_read_csr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
 800eb06:	4c18      	ldr	r4, [pc, #96]	; (800eb68 <ESC_write+0x74>)
 800eb08:	2204      	movs	r2, #4
 800eb0a:	4621      	mov	r1, r4
 800eb0c:	f44f 7008 	mov.w	r0, #544	; 0x220
 800eb10:	f7ff fed9 	bl	800e8c6 <ESC_read_csr>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 800eb14:	4621      	mov	r1, r4
 800eb16:	f851 39e4 	ldr.w	r3, [r1], #-228
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
}
 800eb20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         else if (size == 3)
 800eb22:	2d03      	cmp	r5, #3
 800eb24:	d102      	bne.n	800eb2c <ESC_write+0x38>
            size = 1;
 800eb26:	2601      	movs	r6, #1
 800eb28:	e000      	b.n	800eb2c <ESC_write+0x38>
            size = 1;
 800eb2a:	2601      	movs	r6, #1
         ESC_write_csr(address, temp_buf, size);
 800eb2c:	4632      	mov	r2, r6
 800eb2e:	4639      	mov	r1, r7
 800eb30:	4620      	mov	r0, r4
 800eb32:	f7ff fee8 	bl	800e906 <ESC_write_csr>
         len -= size;
 800eb36:	1bad      	subs	r5, r5, r6
 800eb38:	b2ad      	uxth	r5, r5
         temp_buf += size;
 800eb3a:	4437      	add	r7, r6
         address += size;
 800eb3c:	4434      	add	r4, r6
 800eb3e:	b2a4      	uxth	r4, r4
      while(len > 0)
 800eb40:	2d00      	cmp	r5, #0
 800eb42:	d0e0      	beq.n	800eb06 <ESC_write+0x12>
         size = (len > 4) ? 4 : len;
 800eb44:	462e      	mov	r6, r5
 800eb46:	2d04      	cmp	r5, #4
 800eb48:	bf28      	it	cs
 800eb4a:	2604      	movcs	r6, #4
         if(address & BIT(0))
 800eb4c:	f014 0f01 	tst.w	r4, #1
 800eb50:	d1eb      	bne.n	800eb2a <ESC_write+0x36>
         else if (address & BIT(1))
 800eb52:	f014 0f02 	tst.w	r4, #2
 800eb56:	d0e4      	beq.n	800eb22 <ESC_write+0x2e>
            size = (size & BIT(0)) ? 1 : 2;
 800eb58:	f016 0f01 	tst.w	r6, #1
 800eb5c:	d001      	beq.n	800eb62 <ESC_write+0x6e>
 800eb5e:	2601      	movs	r6, #1
 800eb60:	e7e4      	b.n	800eb2c <ESC_write+0x38>
 800eb62:	2602      	movs	r6, #2
 800eb64:	e7e2      	b.n	800eb2c <ESC_write+0x38>
 800eb66:	bf00      	nop
 800eb68:	20008018 	.word	0x20008018

0800eb6c <ESC_init>:
{

}

void ESC_init (const esc_cfg_t * config)
{
 800eb6c:	b510      	push	{r4, lr}
   uint32_t counter = 0;
   uint32_t timeout = 1000; // wait 100msec

   // start initialization
   // Reset the ecat core here due to evb-lan9252-digio not having any GPIO for that purpose.
   lan9252_write_32(LAN9252_ESC_CMD_RESET_CTL, LAN9252_ESC_RESET_CTRL_RST);
 800eb6e:	2141      	movs	r1, #65	; 0x41
 800eb70:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 800eb74:	f7fc fc76 	bl	800b464 <lan9252_write_32>
   uint32_t counter = 0;
 800eb78:	2400      	movs	r4, #0

   // Wait until reset command has been executed
   do
   {
      osDelay(100);
 800eb7a:	2064      	movs	r0, #100	; 0x64
 800eb7c:	f7f9 fc89 	bl	8008492 <osDelay>
      counter++;
 800eb80:	3401      	adds	r4, #1
      value = lan9252_read_32(LAN9252_ESC_CMD_RESET_CTL);
 800eb82:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 800eb86:	f7fc fc39 	bl	800b3fc <lan9252_read_32>
   } while ((value & LAN9252_ESC_RESET_CTRL_RST) && (counter < timeout));
 800eb8a:	f010 0f41 	tst.w	r0, #65	; 0x41
 800eb8e:	d002      	beq.n	800eb96 <ESC_init+0x2a>
 800eb90:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800eb94:	d3f1      	bcc.n	800eb7a <ESC_init+0xe>

   // Perform byte test
   do
   {
      osDelay(100);
 800eb96:	2064      	movs	r0, #100	; 0x64
 800eb98:	f7f9 fc7b 	bl	8008492 <osDelay>
      counter++;
 800eb9c:	3401      	adds	r4, #1
      value = lan9252_read_32(LAN9252_ESC_CMD_BYTE_TEST);
 800eb9e:	2064      	movs	r0, #100	; 0x64
 800eba0:	f7fc fc2c 	bl	800b3fc <lan9252_read_32>
   } while ((value != LAN9252_ESC_BYTE_TEST_OK) && (counter < timeout));
 800eba4:	4b0f      	ldr	r3, [pc, #60]	; (800ebe4 <ESC_init+0x78>)
 800eba6:	4298      	cmp	r0, r3
 800eba8:	d002      	beq.n	800ebb0 <ESC_init+0x44>
 800ebaa:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800ebae:	d3f2      	bcc.n	800eb96 <ESC_init+0x2a>

   // Check hardware is ready
   do
   {
      osDelay(100);
 800ebb0:	2064      	movs	r0, #100	; 0x64
 800ebb2:	f7f9 fc6e 	bl	8008492 <osDelay>
      counter++;
 800ebb6:	3401      	adds	r4, #1
      value = lan9252_read_32(LAN9252_ESC_CMD_HW_CFG);
 800ebb8:	2074      	movs	r0, #116	; 0x74
 800ebba:	f7fc fc1f 	bl	800b3fc <lan9252_read_32>
   } while (!(value & LAN9252_ESC_HW_CFG_READY) && (counter < timeout));
 800ebbe:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 800ebc2:	d102      	bne.n	800ebca <ESC_init+0x5e>
 800ebc4:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800ebc8:	d3f2      	bcc.n	800ebb0 <ESC_init+0x44>

   // Check if timeout occured
   if (counter < timeout)
 800ebca:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800ebce:	d300      	bcc.n	800ebd2 <ESC_init+0x66>
   }
   else
   {
      DPRINT("Timeout occurred during reset \n");
   }
}
 800ebd0:	bd10      	pop	{r4, pc}
      value = lan9252_read_32(LAN9252_ESC_CMD_ID_REV);
 800ebd2:	2050      	movs	r0, #80	; 0x50
 800ebd4:	f7fc fc12 	bl	800b3fc <lan9252_read_32>
      ESC_ALeventmaskwrite(value);
 800ebd8:	f240 3011 	movw	r0, #785	; 0x311
 800ebdc:	f7fd f9aa 	bl	800bf34 <ESC_ALeventmaskwrite>
}
 800ebe0:	e7f6      	b.n	800ebd0 <ESC_init+0x64>
 800ebe2:	bf00      	nop
 800ebe4:	87654321 	.word	0x87654321

0800ebe8 <SpiDma_Init>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

bool SpiDma_Init (tSpiDmaModule * const me)
{
 800ebe8:	b570      	push	{r4, r5, r6, lr}
   bool ret = true;

   /* Create the spiDma event group. */
   spiDma_event = xEventGroupCreate();
 800ebea:	f7f9 fc7a 	bl	80084e2 <xEventGroupCreate>
 800ebee:	4b0a      	ldr	r3, [pc, #40]	; (800ec18 <SpiDma_Init+0x30>)
 800ebf0:	6018      	str	r0, [r3, #0]
   
   /* Was the event group created successfully? */
   if (NULL == spiDma_event) {
 800ebf2:	b178      	cbz	r0, 800ec14 <SpiDma_Init+0x2c>
   bool ret = true;
 800ebf4:	2601      	movs	r6, #1
      ret = false;
   }

   /* Clear the buffer. */
   bzero (SPIDMA_Rx_Buffer, SPIDMA_RX_SIZE);
 800ebf6:	4c09      	ldr	r4, [pc, #36]	; (800ec1c <SpiDma_Init+0x34>)
 800ebf8:	f44f 7580 	mov.w	r5, #256	; 0x100
 800ebfc:	462a      	mov	r2, r5
 800ebfe:	2100      	movs	r1, #0
 800ec00:	4620      	mov	r0, r4
 800ec02:	f002 ffc3 	bl	8011b8c <memset>
   bzero (SPIDMA_Tx_Buffer, SPIDMA_TX_SIZE);
 800ec06:	462a      	mov	r2, r5
 800ec08:	2100      	movs	r1, #0
 800ec0a:	1960      	adds	r0, r4, r5
 800ec0c:	f002 ffbe 	bl	8011b8c <memset>

   return ret;
}
 800ec10:	4630      	mov	r0, r6
 800ec12:	bd70      	pop	{r4, r5, r6, pc}
      ret = false;
 800ec14:	2600      	movs	r6, #0
 800ec16:	e7ee      	b.n	800ebf6 <SpiDma_Init+0xe>
 800ec18:	2000962c 	.word	0x2000962c
 800ec1c:	2000cf40 	.word	0x2000cf40

0800ec20 <SpiDma_CsPinChangeState>:
{
   return ((me->states != SPIDMA_IDLE) ? true : false);
}

void SpiDma_CsPinChangeState (tSpiDmaModule * const me, bool state)
{
 800ec20:	b508      	push	{r3, lr}
   GPIO_PinState pinSt = GPIO_PIN_RESET;

   pinSt = (true == state) ? (me->config.csActiveLevel) : 
 800ec22:	b129      	cbz	r1, 800ec30 <SpiDma_CsPinChangeState+0x10>
 800ec24:	7802      	ldrb	r2, [r0, #0]
      ((GPIO_PIN_RESET == me->config.csActiveLevel) ? GPIO_PIN_SET : GPIO_PIN_RESET);
   
   HAL_GPIO_WritePin (me->config.csPort, me->config.csPin, pinSt);
 800ec26:	8901      	ldrh	r1, [r0, #8]
 800ec28:	6840      	ldr	r0, [r0, #4]
 800ec2a:	f7f3 fc9b 	bl	8002564 <HAL_GPIO_WritePin>
}
 800ec2e:	bd08      	pop	{r3, pc}
      ((GPIO_PIN_RESET == me->config.csActiveLevel) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800ec30:	7802      	ldrb	r2, [r0, #0]
 800ec32:	fab2 f282 	clz	r2, r2
 800ec36:	0952      	lsrs	r2, r2, #5
 800ec38:	e7f5      	b.n	800ec26 <SpiDma_CsPinChangeState+0x6>
	...

0800ec3c <SpiDma_write>:
{
   bool ret = true;
   EventBits_t bits = (EventBits_t)0U; 

   /* Verify the parameters input. */
   if (NULL == me)
 800ec3c:	b378      	cbz	r0, 800ec9e <SpiDma_write+0x62>
{
 800ec3e:	b570      	push	{r4, r5, r6, lr}
 800ec40:	b082      	sub	sp, #8
 800ec42:	460c      	mov	r4, r1
 800ec44:	4615      	mov	r5, r2
 800ec46:	4606      	mov	r6, r0
   {
      /* Pointer to the module SpiDma is NULL. */
      ret = false;
   }
   else if (NULL == data_ptr)
 800ec48:	b359      	cbz	r1, 800eca2 <SpiDma_write+0x66>
   {
      /* Pointer to data array is NULL. */
      ret = false;
   }
   else if (0 >= len)
 800ec4a:	b912      	cbnz	r2, 800ec52 <SpiDma_write+0x16>
   {
      /* The length of data input is equal 0. */
      ret = false;
 800ec4c:	2000      	movs	r0, #0
      }
   }

   /* Return state. */
   return ret;
}
 800ec4e:	b002      	add	sp, #8
 800ec50:	bd70      	pop	{r4, r5, r6, pc}
      taskENTER_CRITICAL();
 800ec52:	f7fb f99f 	bl	8009f94 <vPortEnterCritical>
      memcpy (me->ptrTxArr, data_ptr, len);
 800ec56:	462a      	mov	r2, r5
 800ec58:	4621      	mov	r1, r4
 800ec5a:	69b0      	ldr	r0, [r6, #24]
 800ec5c:	f003 f854 	bl	8011d08 <memcpy>
      HAL_SPI_Transmit_DMA (me->spiModule, me->ptrTxArr, len);
 800ec60:	462a      	mov	r2, r5
 800ec62:	69b1      	ldr	r1, [r6, #24]
 800ec64:	6970      	ldr	r0, [r6, #20]
 800ec66:	f7f6 f851 	bl	8004d0c <HAL_SPI_Transmit_DMA>
      me->states = SPIDMA_TX;
 800ec6a:	2401      	movs	r4, #1
 800ec6c:	7434      	strb	r4, [r6, #16]
      taskEXIT_CRITICAL();
 800ec6e:	f7fb f9b3 	bl	8009fd8 <vPortExitCritical>
      bits = xEventGroupWaitBits (spiDma_event, SPIDMA_TX_DONE, pdTRUE, pdFALSE, pdMS_TO_TICKS(me->timeOut));
 800ec72:	8c33      	ldrh	r3, [r6, #32]
 800ec74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec78:	fb02 f303 	mul.w	r3, r2, r3
 800ec7c:	4a0b      	ldr	r2, [pc, #44]	; (800ecac <SpiDma_write+0x70>)
 800ec7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ec82:	099b      	lsrs	r3, r3, #6
 800ec84:	9300      	str	r3, [sp, #0]
 800ec86:	2300      	movs	r3, #0
 800ec88:	4622      	mov	r2, r4
 800ec8a:	4621      	mov	r1, r4
 800ec8c:	4808      	ldr	r0, [pc, #32]	; (800ecb0 <SpiDma_write+0x74>)
 800ec8e:	6800      	ldr	r0, [r0, #0]
 800ec90:	f7f9 fc34 	bl	80084fc <xEventGroupWaitBits>
      if (SPIDMA_TX_DONE != (bits & SPIDMA_TX_DONE))
 800ec94:	f010 0f01 	tst.w	r0, #1
 800ec98:	d005      	beq.n	800eca6 <SpiDma_write+0x6a>
   bool ret = true;
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	e7d7      	b.n	800ec4e <SpiDma_write+0x12>
      ret = false;
 800ec9e:	2000      	movs	r0, #0
}
 800eca0:	4770      	bx	lr
      ret = false;
 800eca2:	2000      	movs	r0, #0
 800eca4:	e7d3      	b.n	800ec4e <SpiDma_write+0x12>
         ret = false;
 800eca6:	2000      	movs	r0, #0
 800eca8:	e7d1      	b.n	800ec4e <SpiDma_write+0x12>
 800ecaa:	bf00      	nop
 800ecac:	10624dd3 	.word	0x10624dd3
 800ecb0:	2000962c 	.word	0x2000962c

0800ecb4 <SpiDma_read>:

bool SpiDma_read (tSpiDmaModule * const me, uint8_t * data_rx_ptr, uint8_t * data_tx_dummy, uint16_t len)
{
 800ecb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecb6:	b083      	sub	sp, #12
   bool ret = true;
   EventBits_t bits = (EventBits_t)0U; 

   /* Verify the parameters input. */
   if (NULL == me)
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	d038      	beq.n	800ed2e <SpiDma_read+0x7a>
 800ecbc:	460e      	mov	r6, r1
 800ecbe:	4614      	mov	r4, r2
 800ecc0:	461d      	mov	r5, r3
 800ecc2:	4607      	mov	r7, r0
   {
      /* Pointer to the module SpiDma is NULL. */
      ret = false;
   }
   else if ((NULL == data_rx_ptr) || (NULL == data_tx_dummy))
 800ecc4:	2900      	cmp	r1, #0
 800ecc6:	d036      	beq.n	800ed36 <SpiDma_read+0x82>
 800ecc8:	2a00      	cmp	r2, #0
 800ecca:	d036      	beq.n	800ed3a <SpiDma_read+0x86>
   {
      /* Pointer to data array is NULL. */
      ret = false;
   }
   else if (0 >= len)
 800eccc:	b90b      	cbnz	r3, 800ecd2 <SpiDma_read+0x1e>
   {
      /* The length of data input is equal 0. */
      ret = false;
 800ecce:	2400      	movs	r4, #0
 800ecd0:	e02e      	b.n	800ed30 <SpiDma_read+0x7c>
   
   /* If the params input are valid, send data to DMA to transfer dummy to read data from slave.*/
   if (ret)
   {
      /* Enter Critical section. */
      taskENTER_CRITICAL();
 800ecd2:	f7fb f95f 	bl	8009f94 <vPortEnterCritical>

      /* Copy the data to TX buffer. */
      memcpy (me->ptrTxArr, data_tx_dummy, len);
 800ecd6:	462a      	mov	r2, r5
 800ecd8:	4621      	mov	r1, r4
 800ecda:	69b8      	ldr	r0, [r7, #24]
 800ecdc:	f003 f814 	bl	8011d08 <memcpy>

      /* Start transmit data via DMA. */
      HAL_SPI_TransmitReceive_DMA (me->spiModule, me->ptrTxArr, me->ptrRxArr, len);
 800ece0:	462b      	mov	r3, r5
 800ece2:	69fa      	ldr	r2, [r7, #28]
 800ece4:	69b9      	ldr	r1, [r7, #24]
 800ece6:	6978      	ldr	r0, [r7, #20]
 800ece8:	f7f6 f8c6 	bl	8004e78 <HAL_SPI_TransmitReceive_DMA>

      /* Change state into TX. */
      me->states = SPIDMA_RX;
 800ecec:	2402      	movs	r4, #2
 800ecee:	743c      	strb	r4, [r7, #16]

      /* Exit Critical section. */
      taskEXIT_CRITICAL();
 800ecf0:	f7fb f972 	bl	8009fd8 <vPortExitCritical>

      /* Blocking the currently executing task until SPI transmit data is finished. */
      bits = xEventGroupWaitBits (spiDma_event, SPIDMA_RX_DONE, pdTRUE, pdFALSE, pdMS_TO_TICKS(me->timeOut));
 800ecf4:	8c3b      	ldrh	r3, [r7, #32]
 800ecf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ecfa:	fb02 f303 	mul.w	r3, r2, r3
 800ecfe:	4a10      	ldr	r2, [pc, #64]	; (800ed40 <SpiDma_read+0x8c>)
 800ed00:	fba2 2303 	umull	r2, r3, r2, r3
 800ed04:	099b      	lsrs	r3, r3, #6
 800ed06:	9300      	str	r3, [sp, #0]
 800ed08:	2300      	movs	r3, #0
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	4621      	mov	r1, r4
 800ed0e:	480d      	ldr	r0, [pc, #52]	; (800ed44 <SpiDma_read+0x90>)
 800ed10:	6800      	ldr	r0, [r0, #0]
 800ed12:	f7f9 fbf3 	bl	80084fc <xEventGroupWaitBits>

      /* Update new state. */
      if (SPIDMA_RX_DONE != (bits & SPIDMA_RX_DONE))
 800ed16:	f010 0f02 	tst.w	r0, #2
 800ed1a:	d006      	beq.n	800ed2a <SpiDma_read+0x76>
   bool ret = true;
 800ed1c:	2401      	movs	r4, #1
      {
         ret = false;
      }

      /* Copy data to data array return. */
      memcpy (data_rx_ptr, me->ptrRxArr, len);
 800ed1e:	462a      	mov	r2, r5
 800ed20:	69f9      	ldr	r1, [r7, #28]
 800ed22:	4630      	mov	r0, r6
 800ed24:	f002 fff0 	bl	8011d08 <memcpy>
 800ed28:	e002      	b.n	800ed30 <SpiDma_read+0x7c>
         ret = false;
 800ed2a:	2400      	movs	r4, #0
 800ed2c:	e7f7      	b.n	800ed1e <SpiDma_read+0x6a>
      ret = false;
 800ed2e:	2400      	movs	r4, #0
   }

   /* Return state. */
   return ret;
}
 800ed30:	4620      	mov	r0, r4
 800ed32:	b003      	add	sp, #12
 800ed34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = false;
 800ed36:	2400      	movs	r4, #0
 800ed38:	e7fa      	b.n	800ed30 <SpiDma_read+0x7c>
 800ed3a:	2400      	movs	r4, #0
 800ed3c:	e7f8      	b.n	800ed30 <SpiDma_read+0x7c>
 800ed3e:	bf00      	nop
 800ed40:	10624dd3 	.word	0x10624dd3
 800ed44:	2000962c 	.word	0x2000962c

0800ed48 <SpiDma_WriteCompleteIrq>:


void SpiDma_WriteCompleteIrq (tSpiDmaModule * const me)
{
 800ed48:	b500      	push	{lr}
 800ed4a:	b083      	sub	sp, #12
   /* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	9301      	str	r3, [sp, #4]

   /* Write data complete, change the state of this module to TxEnd. */
   me->states = SPIDMA_IDLE;
 800ed50:	7403      	strb	r3, [r0, #16]

   /* Set bit to inform the TX is finish. */
   xEventGroupSetBitsFromISR (spiDma_event, SPIDMA_TX_DONE, &xHigherPriorityTaskWoken);
 800ed52:	aa01      	add	r2, sp, #4
 800ed54:	2101      	movs	r1, #1
 800ed56:	4b03      	ldr	r3, [pc, #12]	; (800ed64 <SpiDma_WriteCompleteIrq+0x1c>)
 800ed58:	6818      	ldr	r0, [r3, #0]
 800ed5a:	f7f9 fc9d 	bl	8008698 <xEventGroupSetBitsFromISR>
}  
 800ed5e:	b003      	add	sp, #12
 800ed60:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed64:	2000962c 	.word	0x2000962c

0800ed68 <SpiDma_ReadCompleteIrq>:

void SpiDma_ReadCompleteIrq (tSpiDmaModule * const me)
{
 800ed68:	b500      	push	{lr}
 800ed6a:	b083      	sub	sp, #12
   /* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	9301      	str	r3, [sp, #4]

   /* Read data complete, change the state of this module to RxEnd. */
   me->states = SPIDMA_IDLE;
 800ed70:	7403      	strb	r3, [r0, #16]

   /* Set bit to inform the RX is finish. */
   xEventGroupSetBitsFromISR (spiDma_event, SPIDMA_RX_DONE, &xHigherPriorityTaskWoken);
 800ed72:	aa01      	add	r2, sp, #4
 800ed74:	2102      	movs	r1, #2
 800ed76:	4b03      	ldr	r3, [pc, #12]	; (800ed84 <SpiDma_ReadCompleteIrq+0x1c>)
 800ed78:	6818      	ldr	r0, [r3, #0]
 800ed7a:	f7f9 fc8d 	bl	8008698 <xEventGroupSetBitsFromISR>
}
 800ed7e:	b003      	add	sp, #12
 800ed80:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed84:	2000962c 	.word	0x2000962c

0800ed88 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ed88:	b508      	push	{r3, lr}
   SpiDma_WriteCompleteIrq (&spiDmaModule);
 800ed8a:	4802      	ldr	r0, [pc, #8]	; (800ed94 <HAL_SPI_TxCpltCallback+0xc>)
 800ed8c:	f7ff ffdc 	bl	800ed48 <SpiDma_WriteCompleteIrq>
}
 800ed90:	bd08      	pop	{r3, pc}
 800ed92:	bf00      	nop
 800ed94:	20000120 	.word	0x20000120

0800ed98 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ed98:	b508      	push	{r3, lr}
   SpiDma_ReadCompleteIrq (&spiDmaModule);
 800ed9a:	4802      	ldr	r0, [pc, #8]	; (800eda4 <HAL_SPI_TxRxCpltCallback+0xc>)
 800ed9c:	f7ff ffe4 	bl	800ed68 <SpiDma_ReadCompleteIrq>
}
 800eda0:	bd08      	pop	{r3, pc}
 800eda2:	bf00      	nop
 800eda4:	20000120 	.word	0x20000120

0800eda8 <uartDma_init>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

void  uartDma_init (void)
{
 800eda8:	b508      	push	{r3, lr}
   /* Initialize ringbuffer. */
   lwrb_init((volatile lwrb_t *)&uartDmaModule.tx_buff, uartDmaModule.p_tx_buff_data, UARTDMA_TX_SIZE);
 800edaa:	4804      	ldr	r0, [pc, #16]	; (800edbc <uartDma_init+0x14>)
 800edac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800edb0:	6a01      	ldr	r1, [r0, #32]
 800edb2:	3004      	adds	r0, #4
 800edb4:	f7fc fb70 	bl	800b498 <lwrb_init>
}
 800edb8:	bd08      	pop	{r3, pc}
 800edba:	bf00      	nop
 800edbc:	20000144 	.word	0x20000144

0800edc0 <uartDma_start_tx_dma_transfer>:

#endif 
}

uint8_t  uartDma_start_tx_dma_transfer(void)
{
 800edc0:	b538      	push	{r3, r4, r5, lr}
   uint8_t started = 0;
   if (uartDmaModule.tx_dma_current_len == 0)
 800edc2:	4b11      	ldr	r3, [pc, #68]	; (800ee08 <uartDma_start_tx_dma_transfer+0x48>)
 800edc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc6:	b10b      	cbz	r3, 800edcc <uartDma_start_tx_dma_transfer+0xc>
   uint8_t started = 0;
 800edc8:	2000      	movs	r0, #0
                               uartDmaModule.tx_dma_current_len);
      }
   }

   return started;
}
 800edca:	bd38      	pop	{r3, r4, r5, pc}
      uartDmaModule.tx_dma_current_len = lwrb_get_linear_block_read_length(&uartDmaModule.tx_buff);
 800edcc:	4c0e      	ldr	r4, [pc, #56]	; (800ee08 <uartDma_start_tx_dma_transfer+0x48>)
 800edce:	1d20      	adds	r0, r4, #4
 800edd0:	f7fc fbc6 	bl	800b560 <lwrb_get_linear_block_read_length>
 800edd4:	6260      	str	r0, [r4, #36]	; 0x24
      if (uartDmaModule.tx_dma_current_len > 0)
 800edd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edd8:	b19b      	cbz	r3, 800ee02 <uartDma_start_tx_dma_transfer+0x42>
            (uartDmaModule.tx_dma_current_len > 32) ? 32 : uartDmaModule.tx_dma_current_len;
 800edda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eddc:	2b20      	cmp	r3, #32
 800edde:	d80e      	bhi.n	800edfe <uartDma_start_tx_dma_transfer+0x3e>
 800ede0:	6a63      	ldr	r3, [r4, #36]	; 0x24
         uartDmaModule.tx_dma_current_len = 
 800ede2:	4c09      	ldr	r4, [pc, #36]	; (800ee08 <uartDma_start_tx_dma_transfer+0x48>)
 800ede4:	6263      	str	r3, [r4, #36]	; 0x24
         started = HAL_UART_Transmit_DMA((UART_HandleTypeDef *)uartDmaModule.huart,
 800ede6:	4620      	mov	r0, r4
 800ede8:	f850 5b04 	ldr.w	r5, [r0], #4
                               (uint8_t *) lwrb_get_linear_block_read_address(&uartDmaModule.tx_buff),
 800edec:	f7fc fb9a 	bl	800b524 <lwrb_get_linear_block_read_address>
 800edf0:	4601      	mov	r1, r0
                               uartDmaModule.tx_dma_current_len);
 800edf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
         started = HAL_UART_Transmit_DMA((UART_HandleTypeDef *)uartDmaModule.huart,
 800edf4:	b292      	uxth	r2, r2
 800edf6:	4628      	mov	r0, r5
 800edf8:	f7f6 fd14 	bl	8005824 <HAL_UART_Transmit_DMA>
 800edfc:	e7e5      	b.n	800edca <uartDma_start_tx_dma_transfer+0xa>
            (uartDmaModule.tx_dma_current_len > 32) ? 32 : uartDmaModule.tx_dma_current_len;
 800edfe:	2320      	movs	r3, #32
 800ee00:	e7ef      	b.n	800ede2 <uartDma_start_tx_dma_transfer+0x22>
   uint8_t started = 0;
 800ee02:	2000      	movs	r0, #0
 800ee04:	e7e1      	b.n	800edca <uartDma_start_tx_dma_transfer+0xa>
 800ee06:	bf00      	nop
 800ee08:	20000144 	.word	0x20000144

0800ee0c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ee0c:	b510      	push	{r4, lr}
   lwrb_skip(&uartDmaModule.tx_buff, uartDmaModule.tx_dma_current_len);
 800ee0e:	4c05      	ldr	r4, [pc, #20]	; (800ee24 <HAL_UART_TxCpltCallback+0x18>)
 800ee10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ee12:	1d20      	adds	r0, r4, #4
 800ee14:	f7fc fbcc 	bl	800b5b0 <lwrb_skip>
   uartDmaModule.tx_dma_current_len = 0;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	6263      	str	r3, [r4, #36]	; 0x24

   /* Send next data remaining in tx buffer. */
   uartDma_start_tx_dma_transfer();
 800ee1c:	f7ff ffd0 	bl	800edc0 <uartDma_start_tx_dma_transfer>
}
 800ee20:	bd10      	pop	{r4, pc}
 800ee22:	bf00      	nop
 800ee24:	20000144 	.word	0x20000144

0800ee28 <canIdle_Begin>:
   }
}

static void canIdle_Begin(tCanIdle_Data *const app)
{
   if (app->workState == CANIDLE_STOP)
 800ee28:	7f03      	ldrb	r3, [r0, #28]
 800ee2a:	b90b      	cbnz	r3, 800ee30 <canIdle_Begin+0x8>
   {
	  //cdc_printf("[Command]@%u:\t inputs: %d %d\r\n",GetCycleCount(),app->cmd.frId, app->cmd.motorId)
      app->workState = CANIDLE_RUN;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	7703      	strb	r3, [r0, #28]
   }
}
 800ee30:	4770      	bx	lr

0800ee32 <canIdle_End>:

static void canIdle_End (tCanIdle_Data *const app)
{
   if (app->workState == CANIDLE_RUN)
 800ee32:	7f03      	ldrb	r3, [r0, #28]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d000      	beq.n	800ee3a <canIdle_End+0x8>
   {
      app->workState = CANIDLE_STOP;
   }
}
 800ee38:	4770      	bx	lr
      app->workState = CANIDLE_STOP;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	7703      	strb	r3, [r0, #28]
}
 800ee3e:	e7fb      	b.n	800ee38 <canIdle_End+0x6>

0800ee40 <canIdle_EventHandle>:
static tCanIdle_States canIdle_EventHandle(tCanIdle_Data *const app)
{
   tCanIdle_States nextState = CANIDLE_IDLE;

   /** Determine if there has new command. */
   if (true == app->isNewCommand)
 800ee40:	7f43      	ldrb	r3, [r0, #29]
 800ee42:	b11b      	cbz	r3, 800ee4c <canIdle_EventHandle+0xc>
   {
      /* Update next state to Command. */
      nextState = CANIDLE_COMMAND_ENTER;

      /* Clear the flag.*/
      app->isNewCommand = false;
 800ee44:	2300      	movs	r3, #0
 800ee46:	7743      	strb	r3, [r0, #29]
      nextState = CANIDLE_COMMAND_ENTER;
 800ee48:	2001      	movs	r0, #1
 800ee4a:	4770      	bx	lr
   tCanIdle_States nextState = CANIDLE_IDLE;
 800ee4c:	2000      	movs	r0, #0
   {
      /* Keep is in Control state. */
   }

   return (nextState);
}
 800ee4e:	4770      	bx	lr

0800ee50 <canIdle_Command_Enter>:

static tCanIdle_States canIdle_Command_Enter(tCanIdle_Data *const app)
{
 800ee50:	b508      	push	{r3, lr}
   tCanIdle_States nextState = CANIDLE_COMMAND_ENTER;

   /* Copy data to local. */
   app->cmd.frId = app->hostReq.frId;
 800ee52:	7843      	ldrb	r3, [r0, #1]
 800ee54:	77c3      	strb	r3, [r0, #31]
   app->cmd.motorId = app->hostReq.motorId;
 800ee56:	7803      	ldrb	r3, [r0, #0]
 800ee58:	7783      	strb	r3, [r0, #30]
   app->cmd.size = app->hostReq.size;
 800ee5a:	7882      	ldrb	r2, [r0, #2]
 800ee5c:	f880 2020 	strb.w	r2, [r0, #32]

   memcpy((uint8_t *)app->cmd.data, (uint8_t *)app->hostReq.data, app->cmd.size);
 800ee60:	1cc1      	adds	r1, r0, #3
 800ee62:	3021      	adds	r0, #33	; 0x21
 800ee64:	f002 ff50 	bl	8011d08 <memcpy>
   /* Go to next state. */
   nextState = CANIDLE_COMMAND;

   /* Update next state. */
   return nextState;
}
 800ee68:	2002      	movs	r0, #2
 800ee6a:	bd08      	pop	{r3, pc}

0800ee6c <canIdle_ConfigBaudrate>:

static void canIdle_ConfigBaudrate (tCanIdle_Data * const app)
{
 800ee6c:	b510      	push	{r4, lr}
 800ee6e:	4604      	mov	r4, r0
   uint8_t md80Id = 0u;

   /* Get baudrate. */
   newBaudrate = app->cmd.data[0];

   app->rsp.frId = app->cmd.frId;
 800ee70:	7fc3      	ldrb	r3, [r0, #31]
 800ee72:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   
   /* Configure new baudrate. */
   if (true == canM_SetNewBaudrate(newBaudrate))
 800ee76:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 800ee7a:	f001 f8f5 	bl	8010068 <canM_SetNewBaudrate>
 800ee7e:	b118      	cbz	r0, 800ee88 <canIdle_ConfigBaudrate+0x1c>
   {
      app->rsp.data[0] = true;
 800ee80:	2301      	movs	r3, #1
 800ee82:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   }
   else 
   {
      app->rsp.data[0] = false;
   }
}
 800ee86:	bd10      	pop	{r4, pc}
      app->rsp.data[0] = false;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ee8e:	e7fa      	b.n	800ee86 <canIdle_ConfigBaudrate+0x1a>

0800ee90 <canIdle_UpdateDataControl>:
{
 800ee90:	b570      	push	{r4, r5, r6, lr}
   for (md80idx = 0u; md80idx < canIdle_Module.numMd80Det; md80idx ++)
 800ee92:	2400      	movs	r4, #0
 800ee94:	e074      	b.n	800ef80 <canIdle_UpdateDataControl+0xf0>
      cdc_printf("@%u\t[Motor packet]:\tid:%d\tpos:%d\r\n", GetCycleCount(),md80idx,pEcatObj->md80_0_DataControl.Position  );
 800ee96:	f7f1 fe83 	bl	8000ba0 <GetCycleCount>
 800ee9a:	4601      	mov	r1, r0
 800ee9c:	4eb6      	ldr	r6, [pc, #728]	; (800f178 <canIdle_UpdateDataControl+0x2e8>)
 800ee9e:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
 800eea2:	4622      	mov	r2, r4
 800eea4:	48b5      	ldr	r0, [pc, #724]	; (800f17c <canIdle_UpdateDataControl+0x2ec>)
 800eea6:	f7f1 fe4f 	bl	8000b48 <cdc_printf>
      old_position = pEcatObj->md80_0_DataControl.Position;
 800eeaa:	f8b6 20c4 	ldrh.w	r2, [r6, #196]	; 0xc4
 800eeae:	4bb4      	ldr	r3, [pc, #720]	; (800f180 <canIdle_UpdateDataControl+0x2f0>)
 800eeb0:	801a      	strh	r2, [r3, #0]
 800eeb2:	e07d      	b.n	800efb0 <canIdle_UpdateDataControl+0x120>
            taskENTER_CRITICAL();
 800eeb4:	f7fb f86e 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_0_DataControl.Velocity);
 800eeb8:	4eaf      	ldr	r6, [pc, #700]	; (800f178 <canIdle_UpdateDataControl+0x2e8>)
 800eeba:	f8b6 30c6 	ldrh.w	r3, [r6, #198]	; 0xc6
 800eebe:	ee07 3a10 	vmov	s14, r3
 800eec2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eec6:	eddf 7aaf 	vldr	s15, [pc, #700]	; 800f184 <canIdle_UpdateDataControl+0x2f4>
 800eeca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800eece:	49ae      	ldr	r1, [pc, #696]	; (800f188 <canIdle_UpdateDataControl+0x2f8>)
 800eed0:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800eed4:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800eed8:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_0_DataControl.Position);
 800eedc:	f8b6 20c4 	ldrh.w	r2, [r6, #196]	; 0xc4
 800eee0:	ee07 2a10 	vmov	s14, r2
 800eee4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eee8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800eeec:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_0_DataControl.Torque);
 800eef0:	f8b6 20c8 	ldrh.w	r2, [r6, #200]	; 0xc8
 800eef4:	ee07 2a10 	vmov	s14, r2
 800eef8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eefc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ef00:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_0_DataReturn.enabled = true;
 800ef04:	2201      	movs	r2, #1
 800ef06:	f886 202e 	strb.w	r2, [r6, #46]	; 0x2e
            pEcatObj->md80_0_DataReturn.Mode = pMd80dev->local.mode;
 800ef0a:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800ef0e:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
            pEcatObj->md80_0_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800ef12:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800ef16:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef1a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ef1e:	ee17 2a10 	vmov	r2, s14
 800ef22:	84f2      	strh	r2, [r6, #38]	; 0x26
            pEcatObj->md80_0_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800ef24:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800ef28:	ee07 2a10 	vmov	s14, r2
 800ef2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ef30:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef34:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ef38:	ee17 2a10 	vmov	r2, s14
 800ef3c:	f886 202c 	strb.w	r2, [r6, #44]	; 0x2c
            pEcatObj->md80_0_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800ef40:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800ef44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef48:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ef4c:	ee17 3a10 	vmov	r3, s14
 800ef50:	8573      	strh	r3, [r6, #42]	; 0x2a
            pEcatObj->md80_0_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800ef52:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800ef56:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800ef5a:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800ef5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef66:	ee17 3a90 	vmov	r3, s15
 800ef6a:	8533      	strh	r3, [r6, #40]	; 0x28
            pEcatObj->md80_0_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800ef6c:	f7fa f9b8 	bl	80092e0 <xTaskGetTickCount>
 800ef70:	6370      	str	r0, [r6, #52]	; 0x34
            pEcatObj->md80_0_DataReturn.counter++;
 800ef72:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800ef74:	3301      	adds	r3, #1
 800ef76:	6333      	str	r3, [r6, #48]	; 0x30
            taskEXIT_CRITICAL();
 800ef78:	f7fb f82e 	bl	8009fd8 <vPortExitCritical>
   for (md80idx = 0u; md80idx < canIdle_Module.numMd80Det; md80idx ++)
 800ef7c:	3401      	adds	r4, #1
 800ef7e:	b2e4      	uxtb	r4, r4
 800ef80:	4b82      	ldr	r3, [pc, #520]	; (800f18c <canIdle_UpdateDataControl+0x2fc>)
 800ef82:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ef86:	42a3      	cmp	r3, r4
 800ef88:	f240 831d 	bls.w	800f5c6 <canIdle_UpdateDataControl+0x736>
      pMd80dev = (tMd80_Device *)&md80Dev[md80idx];
 800ef8c:	4625      	mov	r5, r4
      if (true == pMd80dev->local.isEnabled)
 800ef8e:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
 800ef92:	4b7d      	ldr	r3, [pc, #500]	; (800f188 <canIdle_UpdateDataControl+0x2f8>)
 800ef94:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800ef98:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d0ed      	beq.n	800ef7c <canIdle_UpdateDataControl+0xec>
    	  if(old_position != pEcatObj->md80_0_DataControl.Position ){
 800efa0:	4b75      	ldr	r3, [pc, #468]	; (800f178 <canIdle_UpdateDataControl+0x2e8>)
 800efa2:	f8b3 20c4 	ldrh.w	r2, [r3, #196]	; 0xc4
 800efa6:	4b76      	ldr	r3, [pc, #472]	; (800f180 <canIdle_UpdateDataControl+0x2f0>)
 800efa8:	881b      	ldrh	r3, [r3, #0]
 800efaa:	429a      	cmp	r2, r3
 800efac:	f47f af73 	bne.w	800ee96 <canIdle_UpdateDataControl+0x6>
         switch (md80idx)
 800efb0:	2c07      	cmp	r4, #7
 800efb2:	d8e3      	bhi.n	800ef7c <canIdle_UpdateDataControl+0xec>
 800efb4:	a301      	add	r3, pc, #4	; (adr r3, 800efbc <canIdle_UpdateDataControl+0x12c>)
 800efb6:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800efba:	bf00      	nop
 800efbc:	0800eeb5 	.word	0x0800eeb5
 800efc0:	0800efdd 	.word	0x0800efdd
 800efc4:	0800f0a7 	.word	0x0800f0a7
 800efc8:	0800f191 	.word	0x0800f191
 800efcc:	0800f261 	.word	0x0800f261
 800efd0:	0800f337 	.word	0x0800f337
 800efd4:	0800f40d 	.word	0x0800f40d
 800efd8:	0800f4f1 	.word	0x0800f4f1
            taskENTER_CRITICAL();
 800efdc:	f7fa ffda 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_1_DataControl.Velocity);
 800efe0:	4e65      	ldr	r6, [pc, #404]	; (800f178 <canIdle_UpdateDataControl+0x2e8>)
 800efe2:	f8b6 30d2 	ldrh.w	r3, [r6, #210]	; 0xd2
 800efe6:	ee07 3a10 	vmov	s14, r3
 800efea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800efee:	eddf 7a65 	vldr	s15, [pc, #404]	; 800f184 <canIdle_UpdateDataControl+0x2f4>
 800eff2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800eff6:	4964      	ldr	r1, [pc, #400]	; (800f188 <canIdle_UpdateDataControl+0x2f8>)
 800eff8:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800effc:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f000:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_1_DataControl.Position);
 800f004:	f8b6 20d0 	ldrh.w	r2, [r6, #208]	; 0xd0
 800f008:	ee07 2a10 	vmov	s14, r2
 800f00c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f010:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f014:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_1_DataControl.Torque);
 800f018:	f8b6 20d4 	ldrh.w	r2, [r6, #212]	; 0xd4
 800f01c:	ee07 2a10 	vmov	s14, r2
 800f020:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f024:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f028:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_1_DataReturn.enabled = true;
 800f02c:	2201      	movs	r2, #1
 800f02e:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
            pEcatObj->md80_1_DataReturn.Mode = pMd80dev->local.mode;
 800f032:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f036:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
            pEcatObj->md80_1_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f03a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f03e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f042:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f046:	ee17 2a10 	vmov	r2, s14
 800f04a:	8772      	strh	r2, [r6, #58]	; 0x3a
            pEcatObj->md80_1_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f04c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f050:	ee07 2a10 	vmov	s14, r2
 800f054:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f05c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f060:	ee17 2a10 	vmov	r2, s14
 800f064:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
            pEcatObj->md80_1_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f068:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f06c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f070:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f074:	ee17 3a10 	vmov	r3, s14
 800f078:	87f3      	strh	r3, [r6, #62]	; 0x3e
            pEcatObj->md80_1_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f07a:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f07e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f082:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f08a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f08e:	ee17 3a90 	vmov	r3, s15
 800f092:	87b3      	strh	r3, [r6, #60]	; 0x3c
            pEcatObj->md80_1_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f094:	f7fa f924 	bl	80092e0 <xTaskGetTickCount>
 800f098:	64b0      	str	r0, [r6, #72]	; 0x48
            pEcatObj->md80_1_DataReturn.counter++;
 800f09a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f09c:	3301      	adds	r3, #1
 800f09e:	6473      	str	r3, [r6, #68]	; 0x44
            taskEXIT_CRITICAL();
 800f0a0:	f7fa ff9a 	bl	8009fd8 <vPortExitCritical>
            break;
 800f0a4:	e76a      	b.n	800ef7c <canIdle_UpdateDataControl+0xec>
            taskENTER_CRITICAL();
 800f0a6:	f7fa ff75 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_2_DataControl.Velocity);
 800f0aa:	4e33      	ldr	r6, [pc, #204]	; (800f178 <canIdle_UpdateDataControl+0x2e8>)
 800f0ac:	f8b6 30de 	ldrh.w	r3, [r6, #222]	; 0xde
 800f0b0:	ee07 3a10 	vmov	s14, r3
 800f0b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f0b8:	eddf 7a32 	vldr	s15, [pc, #200]	; 800f184 <canIdle_UpdateDataControl+0x2f4>
 800f0bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f0c0:	4931      	ldr	r1, [pc, #196]	; (800f188 <canIdle_UpdateDataControl+0x2f8>)
 800f0c2:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f0c6:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f0ca:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_2_DataControl.Position);
 800f0ce:	f8b6 20dc 	ldrh.w	r2, [r6, #220]	; 0xdc
 800f0d2:	ee07 2a10 	vmov	s14, r2
 800f0d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f0da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f0de:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_2_DataControl.Torque);
 800f0e2:	f8b6 20e0 	ldrh.w	r2, [r6, #224]	; 0xe0
 800f0e6:	ee07 2a10 	vmov	s14, r2
 800f0ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f0ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f0f2:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_2_DataReturn.enabled = true;
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	f886 2056 	strb.w	r2, [r6, #86]	; 0x56
            pEcatObj->md80_2_DataReturn.Mode = pMd80dev->local.mode;
 800f0fc:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f100:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
            pEcatObj->md80_2_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f104:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f10c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f110:	ee17 2a10 	vmov	r2, s14
 800f114:	f8a6 204e 	strh.w	r2, [r6, #78]	; 0x4e
            pEcatObj->md80_2_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f118:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f11c:	ee07 2a10 	vmov	s14, r2
 800f120:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f124:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f128:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f12c:	ee17 2a10 	vmov	r2, s14
 800f130:	f886 2054 	strb.w	r2, [r6, #84]	; 0x54
            pEcatObj->md80_2_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f134:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f13c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f140:	ee17 3a10 	vmov	r3, s14
 800f144:	f8a6 3052 	strh.w	r3, [r6, #82]	; 0x52
            pEcatObj->md80_2_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f148:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f14c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f150:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f154:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f15c:	ee17 3a90 	vmov	r3, s15
 800f160:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
            pEcatObj->md80_2_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f164:	f7fa f8bc 	bl	80092e0 <xTaskGetTickCount>
 800f168:	65f0      	str	r0, [r6, #92]	; 0x5c
            pEcatObj->md80_2_DataReturn.counter++;
 800f16a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800f16c:	3301      	adds	r3, #1
 800f16e:	65b3      	str	r3, [r6, #88]	; 0x58
            taskEXIT_CRITICAL();
 800f170:	f7fa ff32 	bl	8009fd8 <vPortExitCritical>
            break;
 800f174:	e702      	b.n	800ef7c <canIdle_UpdateDataControl+0xec>
 800f176:	bf00      	nop
 800f178:	2000d140 	.word	0x2000d140
 800f17c:	0801359c 	.word	0x0801359c
 800f180:	20009630 	.word	0x20009630
 800f184:	42c80000 	.word	0x42c80000
 800f188:	20006fb4 	.word	0x20006fb4
 800f18c:	20009634 	.word	0x20009634
            taskENTER_CRITICAL();
 800f190:	f7fa ff00 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_3_DataControl.Velocity);
 800f194:	4ed3      	ldr	r6, [pc, #844]	; (800f4e4 <canIdle_UpdateDataControl+0x654>)
 800f196:	f8b6 30ea 	ldrh.w	r3, [r6, #234]	; 0xea
 800f19a:	ee07 3a10 	vmov	s14, r3
 800f19e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f1a2:	eddf 7ad1 	vldr	s15, [pc, #836]	; 800f4e8 <canIdle_UpdateDataControl+0x658>
 800f1a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f1aa:	49d0      	ldr	r1, [pc, #832]	; (800f4ec <canIdle_UpdateDataControl+0x65c>)
 800f1ac:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f1b0:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f1b4:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_3_DataControl.Position);
 800f1b8:	f8b6 20e8 	ldrh.w	r2, [r6, #232]	; 0xe8
 800f1bc:	ee07 2a10 	vmov	s14, r2
 800f1c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f1c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f1c8:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_3_DataControl.Torque);
 800f1cc:	f8b6 20ec 	ldrh.w	r2, [r6, #236]	; 0xec
 800f1d0:	ee07 2a10 	vmov	s14, r2
 800f1d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f1d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f1dc:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_3_DataReturn.enabled = true;
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	f886 206a 	strb.w	r2, [r6, #106]	; 0x6a
            pEcatObj->md80_3_DataReturn.Mode = pMd80dev->local.mode;
 800f1e6:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f1ea:	f886 2060 	strb.w	r2, [r6, #96]	; 0x60
            pEcatObj->md80_3_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f1ee:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f1f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f1f6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f1fa:	ee17 2a10 	vmov	r2, s14
 800f1fe:	f8a6 2062 	strh.w	r2, [r6, #98]	; 0x62
            pEcatObj->md80_3_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f202:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f206:	ee07 2a10 	vmov	s14, r2
 800f20a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f20e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f212:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f216:	ee17 2a10 	vmov	r2, s14
 800f21a:	f886 2068 	strb.w	r2, [r6, #104]	; 0x68
            pEcatObj->md80_3_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f21e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f222:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f226:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f22a:	ee17 3a10 	vmov	r3, s14
 800f22e:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
            pEcatObj->md80_3_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f232:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f236:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f23a:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f246:	ee17 3a90 	vmov	r3, s15
 800f24a:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            pEcatObj->md80_3_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f24e:	f7fa f847 	bl	80092e0 <xTaskGetTickCount>
 800f252:	6730      	str	r0, [r6, #112]	; 0x70
            pEcatObj->md80_3_DataReturn.counter++;
 800f254:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 800f256:	3301      	adds	r3, #1
 800f258:	66f3      	str	r3, [r6, #108]	; 0x6c
            taskEXIT_CRITICAL();
 800f25a:	f7fa febd 	bl	8009fd8 <vPortExitCritical>
            break;
 800f25e:	e68d      	b.n	800ef7c <canIdle_UpdateDataControl+0xec>
            taskENTER_CRITICAL();
 800f260:	f7fa fe98 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_4_DataControl.Velocity);
 800f264:	4e9f      	ldr	r6, [pc, #636]	; (800f4e4 <canIdle_UpdateDataControl+0x654>)
 800f266:	f8b6 30f6 	ldrh.w	r3, [r6, #246]	; 0xf6
 800f26a:	ee07 3a10 	vmov	s14, r3
 800f26e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f272:	eddf 7a9d 	vldr	s15, [pc, #628]	; 800f4e8 <canIdle_UpdateDataControl+0x658>
 800f276:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f27a:	499c      	ldr	r1, [pc, #624]	; (800f4ec <canIdle_UpdateDataControl+0x65c>)
 800f27c:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f280:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f284:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_4_DataControl.Position);
 800f288:	f8b6 20f4 	ldrh.w	r2, [r6, #244]	; 0xf4
 800f28c:	ee07 2a10 	vmov	s14, r2
 800f290:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f294:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f298:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_4_DataControl.Torque);
 800f29c:	f8b6 20f8 	ldrh.w	r2, [r6, #248]	; 0xf8
 800f2a0:	ee07 2a10 	vmov	s14, r2
 800f2a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f2a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f2ac:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_4_DataReturn.enabled = true;
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	f886 207e 	strb.w	r2, [r6, #126]	; 0x7e
            pEcatObj->md80_4_DataReturn.Mode = pMd80dev->local.mode;
 800f2b6:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f2ba:	f886 2074 	strb.w	r2, [r6, #116]	; 0x74
            pEcatObj->md80_4_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f2be:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f2c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2c6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f2ca:	ee17 2a10 	vmov	r2, s14
 800f2ce:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
            pEcatObj->md80_4_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f2d2:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f2d6:	ee07 2a10 	vmov	s14, r2
 800f2da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f2de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2e2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f2e6:	ee17 2a10 	vmov	r2, s14
 800f2ea:	f886 207c 	strb.w	r2, [r6, #124]	; 0x7c
            pEcatObj->md80_4_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f2ee:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f2f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2f6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f2fa:	ee17 3a10 	vmov	r3, s14
 800f2fe:	f8a6 307a 	strh.w	r3, [r6, #122]	; 0x7a
            pEcatObj->md80_4_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f302:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f306:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f30a:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f316:	ee17 3a90 	vmov	r3, s15
 800f31a:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
            pEcatObj->md80_4_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f31e:	f7f9 ffdf 	bl	80092e0 <xTaskGetTickCount>
 800f322:	f8c6 0084 	str.w	r0, [r6, #132]	; 0x84
            pEcatObj->md80_4_DataReturn.counter++;
 800f326:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f32a:	3301      	adds	r3, #1
 800f32c:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
            taskEXIT_CRITICAL();
 800f330:	f7fa fe52 	bl	8009fd8 <vPortExitCritical>
            break;
 800f334:	e622      	b.n	800ef7c <canIdle_UpdateDataControl+0xec>
            taskENTER_CRITICAL();
 800f336:	f7fa fe2d 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_5_DataControl.Velocity);
 800f33a:	4e6a      	ldr	r6, [pc, #424]	; (800f4e4 <canIdle_UpdateDataControl+0x654>)
 800f33c:	f8b6 3102 	ldrh.w	r3, [r6, #258]	; 0x102
 800f340:	ee07 3a10 	vmov	s14, r3
 800f344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f348:	eddf 7a67 	vldr	s15, [pc, #412]	; 800f4e8 <canIdle_UpdateDataControl+0x658>
 800f34c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f350:	4966      	ldr	r1, [pc, #408]	; (800f4ec <canIdle_UpdateDataControl+0x65c>)
 800f352:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f356:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f35a:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_5_DataControl.Position);
 800f35e:	f8b6 2100 	ldrh.w	r2, [r6, #256]	; 0x100
 800f362:	ee07 2a10 	vmov	s14, r2
 800f366:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f36a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f36e:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_5_DataControl.Torque);
 800f372:	f8b6 2104 	ldrh.w	r2, [r6, #260]	; 0x104
 800f376:	ee07 2a10 	vmov	s14, r2
 800f37a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f37e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f382:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_5_DataReturn.enabled = true;
 800f386:	2201      	movs	r2, #1
 800f388:	f886 2092 	strb.w	r2, [r6, #146]	; 0x92
            pEcatObj->md80_5_DataReturn.Mode = pMd80dev->local.mode;
 800f38c:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f390:	f886 2088 	strb.w	r2, [r6, #136]	; 0x88
            pEcatObj->md80_5_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f394:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f39c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f3a0:	ee17 2a10 	vmov	r2, s14
 800f3a4:	f8a6 208a 	strh.w	r2, [r6, #138]	; 0x8a
            pEcatObj->md80_5_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f3a8:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f3ac:	ee07 2a10 	vmov	s14, r2
 800f3b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f3b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3b8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f3bc:	ee17 2a10 	vmov	r2, s14
 800f3c0:	f886 2090 	strb.w	r2, [r6, #144]	; 0x90
            pEcatObj->md80_5_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f3c4:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f3c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3cc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f3d0:	ee17 3a10 	vmov	r3, s14
 800f3d4:	f8a6 308e 	strh.w	r3, [r6, #142]	; 0x8e
            pEcatObj->md80_5_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f3d8:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f3dc:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f3e0:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f3e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f3ec:	ee17 3a90 	vmov	r3, s15
 800f3f0:	f8a6 308c 	strh.w	r3, [r6, #140]	; 0x8c
            pEcatObj->md80_5_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f3f4:	f7f9 ff74 	bl	80092e0 <xTaskGetTickCount>
 800f3f8:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
            pEcatObj->md80_5_DataReturn.counter++;
 800f3fc:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800f400:	3301      	adds	r3, #1
 800f402:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
            taskEXIT_CRITICAL();
 800f406:	f7fa fde7 	bl	8009fd8 <vPortExitCritical>
            break;
 800f40a:	e5b7      	b.n	800ef7c <canIdle_UpdateDataControl+0xec>
            taskENTER_CRITICAL();
 800f40c:	f7fa fdc2 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_6_DataControl.Velocity);
 800f410:	4e34      	ldr	r6, [pc, #208]	; (800f4e4 <canIdle_UpdateDataControl+0x654>)
 800f412:	f8b6 310e 	ldrh.w	r3, [r6, #270]	; 0x10e
 800f416:	ee07 3a10 	vmov	s14, r3
 800f41a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f41e:	eddf 7a32 	vldr	s15, [pc, #200]	; 800f4e8 <canIdle_UpdateDataControl+0x658>
 800f422:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f426:	4931      	ldr	r1, [pc, #196]	; (800f4ec <canIdle_UpdateDataControl+0x65c>)
 800f428:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f42c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f430:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_6_DataControl.Position);
 800f434:	f8b6 210c 	ldrh.w	r2, [r6, #268]	; 0x10c
 800f438:	ee07 2a10 	vmov	s14, r2
 800f43c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f440:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f444:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_6_DataControl.Torque);
 800f448:	f8b6 2110 	ldrh.w	r2, [r6, #272]	; 0x110
 800f44c:	ee07 2a10 	vmov	s14, r2
 800f450:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f454:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f458:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_6_DataReturn.enabled = true;
 800f45c:	2201      	movs	r2, #1
 800f45e:	f886 20a6 	strb.w	r2, [r6, #166]	; 0xa6
            pEcatObj->md80_6_DataReturn.Mode = pMd80dev->local.mode;
 800f462:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f466:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
            pEcatObj->md80_6_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f46a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f46e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f472:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f476:	ee17 2a10 	vmov	r2, s14
 800f47a:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
            pEcatObj->md80_6_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f47e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f482:	ee07 2a10 	vmov	s14, r2
 800f486:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f48a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f48e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f492:	ee17 2a10 	vmov	r2, s14
 800f496:	f886 20a4 	strb.w	r2, [r6, #164]	; 0xa4
            pEcatObj->md80_6_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f49a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f49e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4a2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f4a6:	ee17 3a10 	vmov	r3, s14
 800f4aa:	f8a6 30a2 	strh.w	r3, [r6, #162]	; 0xa2
            pEcatObj->md80_6_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f4ae:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f4b2:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f4b6:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f4c2:	ee17 3a90 	vmov	r3, s15
 800f4c6:	f8a6 30a0 	strh.w	r3, [r6, #160]	; 0xa0
            pEcatObj->md80_6_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f4ca:	f7f9 ff09 	bl	80092e0 <xTaskGetTickCount>
 800f4ce:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
            pEcatObj->md80_6_DataReturn.counter++;
 800f4d2:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
            taskEXIT_CRITICAL();
 800f4dc:	f7fa fd7c 	bl	8009fd8 <vPortExitCritical>
            break;
 800f4e0:	e54c      	b.n	800ef7c <canIdle_UpdateDataControl+0xec>
 800f4e2:	bf00      	nop
 800f4e4:	2000d140 	.word	0x2000d140
 800f4e8:	42c80000 	.word	0x42c80000
 800f4ec:	20006fb4 	.word	0x20006fb4
            taskENTER_CRITICAL();
 800f4f0:	f7fa fd50 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_7_DataControl.Velocity);
 800f4f4:	4e34      	ldr	r6, [pc, #208]	; (800f5c8 <canIdle_UpdateDataControl+0x738>)
 800f4f6:	f8b6 311a 	ldrh.w	r3, [r6, #282]	; 0x11a
 800f4fa:	ee07 3a10 	vmov	s14, r3
 800f4fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f502:	eddf 7a32 	vldr	s15, [pc, #200]	; 800f5cc <canIdle_UpdateDataControl+0x73c>
 800f506:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f50a:	4931      	ldr	r1, [pc, #196]	; (800f5d0 <canIdle_UpdateDataControl+0x740>)
 800f50c:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f510:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f514:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_7_DataControl.Position);
 800f518:	f8b6 2118 	ldrh.w	r2, [r6, #280]	; 0x118
 800f51c:	ee07 2a10 	vmov	s14, r2
 800f520:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f524:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f528:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_7_DataControl.Torque);
 800f52c:	f8b6 211c 	ldrh.w	r2, [r6, #284]	; 0x11c
 800f530:	ee07 2a10 	vmov	s14, r2
 800f534:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f538:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f53c:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_7_DataReturn.enabled = true;
 800f540:	2201      	movs	r2, #1
 800f542:	f886 20ba 	strb.w	r2, [r6, #186]	; 0xba
            pEcatObj->md80_7_DataReturn.Mode = pMd80dev->local.mode;
 800f546:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f54a:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
            pEcatObj->md80_7_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f54e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f552:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f556:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f55a:	ee17 2a10 	vmov	r2, s14
 800f55e:	f8a6 20b2 	strh.w	r2, [r6, #178]	; 0xb2
            pEcatObj->md80_7_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f562:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f566:	ee07 2a10 	vmov	s14, r2
 800f56a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f56e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f572:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f576:	ee17 2a10 	vmov	r2, s14
 800f57a:	f886 20b8 	strb.w	r2, [r6, #184]	; 0xb8
            pEcatObj->md80_7_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f57e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f582:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f586:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f58a:	ee17 3a10 	vmov	r3, s14
 800f58e:	f8a6 30b6 	strh.w	r3, [r6, #182]	; 0xb6
            pEcatObj->md80_7_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f592:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f596:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f59a:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f59e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f5a6:	ee17 3a90 	vmov	r3, s15
 800f5aa:	f8a6 30b4 	strh.w	r3, [r6, #180]	; 0xb4
            pEcatObj->md80_7_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f5ae:	f7f9 fe97 	bl	80092e0 <xTaskGetTickCount>
 800f5b2:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
            pEcatObj->md80_7_DataReturn.counter++;
 800f5b6:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
            taskEXIT_CRITICAL();
 800f5c0:	f7fa fd0a 	bl	8009fd8 <vPortExitCritical>
            break;
 800f5c4:	e4da      	b.n	800ef7c <canIdle_UpdateDataControl+0xec>
}
 800f5c6:	bd70      	pop	{r4, r5, r6, pc}
 800f5c8:	2000d140 	.word	0x2000d140
 800f5cc:	42c80000 	.word	0x42c80000
 800f5d0:	20006fb4 	.word	0x20006fb4

0800f5d4 <canIdle_ScanDevice>:
{
 800f5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5d8:	b096      	sub	sp, #88	; 0x58
 800f5da:	4607      	mov	r7, r0
   uint8_t data[2u] = {0u};
 800f5dc:	2600      	movs	r6, #0
 800f5de:	f8ad 6054 	strh.w	r6, [sp, #84]	; 0x54
   uint8_t dataResp[64u] = {0};
 800f5e2:	9605      	str	r6, [sp, #20]
 800f5e4:	223c      	movs	r2, #60	; 0x3c
 800f5e6:	4631      	mov	r1, r6
 800f5e8:	a806      	add	r0, sp, #24
 800f5ea:	f002 facf 	bl	8011b8c <memset>
   uint8_t dataSize = 0;
 800f5ee:	f88d 6013 	strb.w	r6, [sp, #19]
   uint16_t md80Addr[CANIDLE_TOTAL_DEV_SUPPORT] = {0};
 800f5f2:	9600      	str	r6, [sp, #0]
 800f5f4:	9601      	str	r6, [sp, #4]
 800f5f6:	9602      	str	r6, [sp, #8]
 800f5f8:	9603      	str	r6, [sp, #12]
   data[0] = MD80_FRAME_GET_INFO;
 800f5fa:	2305      	movs	r3, #5
 800f5fc:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
   for (addr = CANIDLE_START_ADDR; addr <= CANIDLE_END_ADDR; addr++)
 800f600:	240a      	movs	r4, #10
 800f602:	e00e      	b.n	800f622 <canIdle_ScanDevice+0x4e>
		 cdc_printf("@%u\t[scan adder] addr: %d id %d\n",xTaskGetTickCount()/portTICK_PERIOD_MS, addr,md80Addr[md80num] );
 800f604:	f7f9 fe6c 	bl	80092e0 <xTaskGetTickCount>
 800f608:	4601      	mov	r1, r0
 800f60a:	ab16      	add	r3, sp, #88	; 0x58
 800f60c:	eb03 0846 	add.w	r8, r3, r6, lsl #1
 800f610:	f838 3c58 	ldrh.w	r3, [r8, #-88]
 800f614:	4622      	mov	r2, r4
 800f616:	481a      	ldr	r0, [pc, #104]	; (800f680 <canIdle_ScanDevice+0xac>)
 800f618:	f7f1 fa96 	bl	8000b48 <cdc_printf>
               md80num++;
 800f61c:	3601      	adds	r6, #1
 800f61e:	b2f6      	uxtb	r6, r6
   for (addr = CANIDLE_START_ADDR; addr <= CANIDLE_END_ADDR; addr++)
 800f620:	3401      	adds	r4, #1
 800f622:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 800f626:	d81b      	bhi.n	800f660 <canIdle_ScanDevice+0x8c>
      if (true == canM_SendToAddr(addr, data, 2u))
 800f628:	2202      	movs	r2, #2
 800f62a:	a915      	add	r1, sp, #84	; 0x54
 800f62c:	4620      	mov	r0, r4
 800f62e:	f000 fd9f 	bl	8010170 <canM_SendToAddr>
 800f632:	2800      	cmp	r0, #0
 800f634:	d0f4      	beq.n	800f620 <canIdle_ScanDevice+0x4c>
 800f636:	2201      	movs	r2, #1
         while (timeout--)
 800f638:	1e53      	subs	r3, r2, #1
 800f63a:	b2dd      	uxtb	r5, r3
 800f63c:	2a00      	cmp	r2, #0
 800f63e:	d0ef      	beq.n	800f620 <canIdle_ScanDevice+0x4c>
            if (true == canM_ReadAddr((uint32_t *)&md80Addr[md80num], (uint8_t *)dataResp, (uint8_t *)&dataSize))
 800f640:	f10d 0213 	add.w	r2, sp, #19
 800f644:	a905      	add	r1, sp, #20
 800f646:	eb0d 0046 	add.w	r0, sp, r6, lsl #1
 800f64a:	f000 fddb 	bl	8010204 <canM_ReadAddr>
 800f64e:	2800      	cmp	r0, #0
 800f650:	d1d8      	bne.n	800f604 <canIdle_ScanDevice+0x30>
            if (md80num >= CANIDLE_TOTAL_DEV_SUPPORT)
 800f652:	2e07      	cmp	r6, #7
 800f654:	d8e4      	bhi.n	800f620 <canIdle_ScanDevice+0x4c>
            osDelay(1);
 800f656:	2001      	movs	r0, #1
 800f658:	f7f8 ff1b 	bl	8008492 <osDelay>
         while (timeout--)
 800f65c:	462a      	mov	r2, r5
 800f65e:	e7eb      	b.n	800f638 <canIdle_ScanDevice+0x64>
   if (md80num > 0)
 800f660:	b916      	cbnz	r6, 800f668 <canIdle_ScanDevice+0x94>
}
 800f662:	b016      	add	sp, #88	; 0x58
 800f664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      memcpy(app->rsp.data, md80Addr, md80num * 2u);
 800f668:	0074      	lsls	r4, r6, #1
 800f66a:	4622      	mov	r2, r4
 800f66c:	4669      	mov	r1, sp
 800f66e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800f672:	f002 fb49 	bl	8011d08 <memcpy>
      app->rsp.size = md80num * 2u;
 800f676:	f887 403b 	strb.w	r4, [r7, #59]	; 0x3b
      app->numMd80Det = md80num;
 800f67a:	f887 6054 	strb.w	r6, [r7, #84]	; 0x54
}
 800f67e:	e7f0      	b.n	800f662 <canIdle_ScanDevice+0x8e>
 800f680:	080135c0 	.word	0x080135c0

0800f684 <canIdle_AddMd80>:
{
 800f684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f688:	b082      	sub	sp, #8
   uint16_t canTxAddr = 0u;
 800f68a:	2300      	movs	r3, #0
 800f68c:	f8ad 3006 	strh.w	r3, [sp, #6]
   uint16_t canRxAddr = 0u;
 800f690:	f8ad 3004 	strh.w	r3, [sp, #4]
   if (app->cmd.size > 2u)
 800f694:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f698:	2b02      	cmp	r3, #2
 800f69a:	d91c      	bls.n	800f6d6 <canIdle_AddMd80+0x52>
      canAddr = (((uint16_t)app->cmd.data[1] << 8u) & 0xFF00U) | (((uint16_t)app->cmd.data[0]) & 0x00FFU);
 800f69c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800f6a0:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
 800f6a4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
      for (iter = 0u; iter < CANIDLE_TOTAL_DEV_SUPPORT; iter++)
 800f6a8:	2400      	movs	r4, #0
 800f6aa:	e019      	b.n	800f6e0 <canIdle_AddMd80+0x5c>
            md80_Init((tMd80_Device *)pMd80dev);
 800f6ac:	f7fc f8ae 	bl	800b80c <md80_Init>
            pMd80dev->config.canId = iter;
 800f6b0:	4f18      	ldr	r7, [pc, #96]	; (800f714 <canIdle_AddMd80+0x90>)
 800f6b2:	ea4f 1844 	mov.w	r8, r4, lsl #5
 800f6b6:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 800f6ba:	011b      	lsls	r3, r3, #4
 800f6bc:	54fc      	strb	r4, [r7, r3]
            canM_SetAddrTxRxDev(iter, canAddr, canAddr);
 800f6be:	462a      	mov	r2, r5
 800f6c0:	4629      	mov	r1, r5
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	f000 fd10 	bl	80100e8 <canM_SetAddrTxRxDev>
            pMd80dev->config.isMd80Detected = true;
 800f6c8:	eba8 0804 	sub.w	r8, r8, r4
 800f6cc:	eb07 1708 	add.w	r7, r7, r8, lsl #4
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
}
 800f6d6:	b002      	add	sp, #8
 800f6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      for (iter = 0u; iter < CANIDLE_TOTAL_DEV_SUPPORT; iter++)
 800f6dc:	3401      	adds	r4, #1
 800f6de:	b2e4      	uxtb	r4, r4
 800f6e0:	2c07      	cmp	r4, #7
 800f6e2:	d8f8      	bhi.n	800f6d6 <canIdle_AddMd80+0x52>
         pMd80dev = (tMd80_Device *)&md80Dev[iter];
 800f6e4:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 800f6e8:	480a      	ldr	r0, [pc, #40]	; (800f714 <canIdle_AddMd80+0x90>)
 800f6ea:	eb00 1003 	add.w	r0, r0, r3, lsl #4
         if (false == pMd80dev->config.isMd80Detected)
 800f6ee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d0da      	beq.n	800f6ac <canIdle_AddMd80+0x28>
            canM_GetAddrTxRxDev(iter, &canTxAddr, &canRxAddr);
 800f6f6:	aa01      	add	r2, sp, #4
 800f6f8:	f10d 0106 	add.w	r1, sp, #6
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f000 fd09 	bl	8010114 <canM_GetAddrTxRxDev>
            if ((canAddr == canTxAddr) && (canAddr == canRxAddr))
 800f702:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f706:	42ab      	cmp	r3, r5
 800f708:	d1e8      	bne.n	800f6dc <canIdle_AddMd80+0x58>
 800f70a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f70e:	42ab      	cmp	r3, r5
 800f710:	d1e4      	bne.n	800f6dc <canIdle_AddMd80+0x58>
 800f712:	e7e0      	b.n	800f6d6 <canIdle_AddMd80+0x52>
 800f714:	20006fb4 	.word	0x20006fb4

0800f718 <canIdle_Reset>:
{
 800f718:	b570      	push	{r4, r5, r6, lr}
 800f71a:	4606      	mov	r6, r0
   canIdle_End(app);
 800f71c:	f7ff fb89 	bl	800ee32 <canIdle_End>
   taskENTER_CRITICAL();
 800f720:	f7fa fc38 	bl	8009f94 <vPortEnterCritical>
   if (app->numMd80Det > 0)
 800f724:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
 800f728:	b9fb      	cbnz	r3, 800f76a <canIdle_Reset+0x52>
   app->numMd80Det = 0;
 800f72a:	2300      	movs	r3, #0
 800f72c:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   app->state = CANIDLE_IDLE;
 800f730:	76f3      	strb	r3, [r6, #27]
   app->isNewCommand = false;
 800f732:	7773      	strb	r3, [r6, #29]
   taskEXIT_CRITICAL();
 800f734:	f7fa fc50 	bl	8009fd8 <vPortExitCritical>
}
 800f738:	bd70      	pop	{r4, r5, r6, pc}
      for (md80Idx = 0u; md80Idx < app->numMd80Det; md80Idx ++)
 800f73a:	3401      	adds	r4, #1
 800f73c:	b2e4      	uxtb	r4, r4
 800f73e:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
 800f742:	42a3      	cmp	r3, r4
 800f744:	d913      	bls.n	800f76e <canIdle_Reset+0x56>
         pMd80dev = (tMd80_Device *)&md80Dev[md80Idx];
 800f746:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 800f74a:	4d0f      	ldr	r5, [pc, #60]	; (800f788 <canIdle_Reset+0x70>)
 800f74c:	eb05 1503 	add.w	r5, r5, r3, lsl #4
         if (true == md80_IsEnabled(pMd80dev))
 800f750:	4628      	mov	r0, r5
 800f752:	f7fc f9d3 	bl	800bafc <md80_IsEnabled>
 800f756:	2800      	cmp	r0, #0
 800f758:	d0ef      	beq.n	800f73a <canIdle_Reset+0x22>
            md80_ControlMd80Enable (pMd80dev, false);
 800f75a:	2100      	movs	r1, #0
 800f75c:	4628      	mov	r0, r5
 800f75e:	f7fc f948 	bl	800b9f2 <md80_ControlMd80Enable>
            pMd80dev->config.isMd80Detected = false;
 800f762:	2200      	movs	r2, #0
 800f764:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
 800f768:	e7e7      	b.n	800f73a <canIdle_Reset+0x22>
      for (md80Idx = 0u; md80Idx < app->numMd80Det; md80Idx ++)
 800f76a:	2400      	movs	r4, #0
 800f76c:	e7e7      	b.n	800f73e <canIdle_Reset+0x26>
      for (md80Idx = 0u; md80Idx < CANIDLE_TOTAL_DEV_SUPPORT; md80Idx ++)
 800f76e:	2300      	movs	r3, #0
 800f770:	e006      	b.n	800f780 <canIdle_Reset+0x68>
         Obj.md80_addrs[md80Idx] = 0x00;
 800f772:	4a06      	ldr	r2, [pc, #24]	; (800f78c <canIdle_Reset+0x74>)
 800f774:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f778:	2100      	movs	r1, #0
 800f77a:	6051      	str	r1, [r2, #4]
      for (md80Idx = 0u; md80Idx < CANIDLE_TOTAL_DEV_SUPPORT; md80Idx ++)
 800f77c:	3301      	adds	r3, #1
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	2b07      	cmp	r3, #7
 800f782:	d9f6      	bls.n	800f772 <canIdle_Reset+0x5a>
 800f784:	e7d1      	b.n	800f72a <canIdle_Reset+0x12>
 800f786:	bf00      	nop
 800f788:	20006fb4 	.word	0x20006fb4
 800f78c:	2000d140 	.word	0x2000d140

0800f790 <canIdle_Control>:
   /* Update state. */
   return nextState;
}

static void canIdle_Control(tCanIdle_Data * const app)
{
 800f790:	b538      	push	{r3, r4, r5, lr}
 800f792:	4605      	mov	r5, r0
   uint8_t iter = 0u;
   tMd80_Device *pMd80dev = NULL;

   for (iter = 0u; iter < app->numMd80Det; iter++)
 800f794:	2400      	movs	r4, #0
 800f796:	e008      	b.n	800f7aa <canIdle_Control+0x1a>
   {
      /* Get the data structure of md80. */
      pMd80dev = (tMd80_Device *)&md80Dev[iter];
 800f798:	ebc4 1044 	rsb	r0, r4, r4, lsl #5

      /* Run the main function. */
      md80_MainFunction(pMd80dev);
 800f79c:	4b05      	ldr	r3, [pc, #20]	; (800f7b4 <canIdle_Control+0x24>)
 800f79e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800f7a2:	f7fc f93b 	bl	800ba1c <md80_MainFunction>
   for (iter = 0u; iter < app->numMd80Det; iter++)
 800f7a6:	3401      	adds	r4, #1
 800f7a8:	b2e4      	uxtb	r4, r4
 800f7aa:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 800f7ae:	42a3      	cmp	r3, r4
 800f7b0:	d8f2      	bhi.n	800f798 <canIdle_Control+0x8>
   }
}
 800f7b2:	bd38      	pop	{r3, r4, r5, pc}
 800f7b4:	20006fb4 	.word	0x20006fb4

0800f7b8 <frameTypeName>:
	switch (idType){
 800f7b8:	2871      	cmp	r0, #113	; 0x71
 800f7ba:	d83e      	bhi.n	800f83a <frameTypeName+0x82>
 800f7bc:	2871      	cmp	r0, #113	; 0x71
 800f7be:	d862      	bhi.n	800f886 <frameTypeName+0xce>
 800f7c0:	e8df f000 	tbb	[pc, r0]
 800f7c4:	413f6339 	.word	0x413f6339
 800f7c8:	61474543 	.word	0x61474543
 800f7cc:	61616161 	.word	0x61616161
 800f7d0:	61616161 	.word	0x61616161
 800f7d4:	4f4d4b49 	.word	0x4f4d4b49
 800f7d8:	61616151 	.word	0x61616151
 800f7dc:	61616161 	.word	0x61616161
 800f7e0:	61616161 	.word	0x61616161
 800f7e4:	61615553 	.word	0x61615553
 800f7e8:	61616161 	.word	0x61616161
 800f7ec:	61616161 	.word	0x61616161
 800f7f0:	61616161 	.word	0x61616161
 800f7f4:	61616161 	.word	0x61616161
 800f7f8:	61616161 	.word	0x61616161
 800f7fc:	61616161 	.word	0x61616161
 800f800:	61616161 	.word	0x61616161
 800f804:	61615957 	.word	0x61615957
 800f808:	61616161 	.word	0x61616161
 800f80c:	61616161 	.word	0x61616161
 800f810:	61616161 	.word	0x61616161
 800f814:	61616161 	.word	0x61616161
 800f818:	61616161 	.word	0x61616161
 800f81c:	61616161 	.word	0x61616161
 800f820:	61616161 	.word	0x61616161
 800f824:	61616161 	.word	0x61616161
 800f828:	61616161 	.word	0x61616161
 800f82c:	61615b61 	.word	0x61615b61
 800f830:	61616161 	.word	0x61616161
 800f834:	5f5d      	.short	0x5f5d
 800f836:	4817      	ldr	r0, [pc, #92]	; (800f894 <frameTypeName+0xdc>)
 800f838:	4770      	bx	lr
 800f83a:	28a0      	cmp	r0, #160	; 0xa0
 800f83c:	d127      	bne.n	800f88e <frameTypeName+0xd6>
				return "RESPONSE_DEFAULT";
 800f83e:	4816      	ldr	r0, [pc, #88]	; (800f898 <frameTypeName+0xe0>)
 800f840:	4770      	bx	lr
				return "CONTROL_SELECT";
 800f842:	4816      	ldr	r0, [pc, #88]	; (800f89c <frameTypeName+0xe4>)
 800f844:	4770      	bx	lr
				return "ZERO_ENCODER";
 800f846:	4816      	ldr	r0, [pc, #88]	; (800f8a0 <frameTypeName+0xe8>)
 800f848:	4770      	bx	lr
				return "BASE_CONFIG";
 800f84a:	4816      	ldr	r0, [pc, #88]	; (800f8a4 <frameTypeName+0xec>)
 800f84c:	4770      	bx	lr
				return "GET_INFO";
 800f84e:	4816      	ldr	r0, [pc, #88]	; (800f8a8 <frameTypeName+0xf0>)
 800f850:	4770      	bx	lr
				return "SET_TORQUE_BW";
 800f852:	4816      	ldr	r0, [pc, #88]	; (800f8ac <frameTypeName+0xf4>)
 800f854:	4770      	bx	lr
				return "POS_CONTROL";
 800f856:	4816      	ldr	r0, [pc, #88]	; (800f8b0 <frameTypeName+0xf8>)
 800f858:	4770      	bx	lr
				return "VEL_CONTROL";
 800f85a:	4816      	ldr	r0, [pc, #88]	; (800f8b4 <frameTypeName+0xfc>)
 800f85c:	4770      	bx	lr
				return "IMP_CONTROL";
 800f85e:	4816      	ldr	r0, [pc, #88]	; (800f8b8 <frameTypeName+0x100>)
 800f860:	4770      	bx	lr
				return "RESTART";
 800f862:	4816      	ldr	r0, [pc, #88]	; (800f8bc <frameTypeName+0x104>)
 800f864:	4770      	bx	lr
				return "SET_MOTION_TARGETS";
 800f866:	4816      	ldr	r0, [pc, #88]	; (800f8c0 <frameTypeName+0x108>)
 800f868:	4770      	bx	lr
				return "CAN_CONFIG";
 800f86a:	4816      	ldr	r0, [pc, #88]	; (800f8c4 <frameTypeName+0x10c>)
 800f86c:	4770      	bx	lr
				return "CAN_SAVE";
 800f86e:	4816      	ldr	r0, [pc, #88]	; (800f8c8 <frameTypeName+0x110>)
 800f870:	4770      	bx	lr
				return "WRITE_REGISTER";
 800f872:	4816      	ldr	r0, [pc, #88]	; (800f8cc <frameTypeName+0x114>)
 800f874:	4770      	bx	lr
				return "READ_REGISTER";
 800f876:	4816      	ldr	r0, [pc, #88]	; (800f8d0 <frameTypeName+0x118>)
 800f878:	4770      	bx	lr
				return "DIAGNOSTIC";
 800f87a:	4816      	ldr	r0, [pc, #88]	; (800f8d4 <frameTypeName+0x11c>)
 800f87c:	4770      	bx	lr
				return "CALIBRATION";
 800f87e:	4816      	ldr	r0, [pc, #88]	; (800f8d8 <frameTypeName+0x120>)
 800f880:	4770      	bx	lr
				return "CALIBRATION_OUTPUT";
 800f882:	4816      	ldr	r0, [pc, #88]	; (800f8dc <frameTypeName+0x124>)
 800f884:	4770      	bx	lr
			return "Unknown command";
 800f886:	4816      	ldr	r0, [pc, #88]	; (800f8e0 <frameTypeName+0x128>)
 800f888:	4770      	bx	lr
				return "MOTOR_ENABLE";
 800f88a:	4816      	ldr	r0, [pc, #88]	; (800f8e4 <frameTypeName+0x12c>)
 800f88c:	4770      	bx	lr
			return "Unknown command";
 800f88e:	4814      	ldr	r0, [pc, #80]	; (800f8e0 <frameTypeName+0x128>)
}
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	08013704 	.word	0x08013704
 800f898:	080136f0 	.word	0x080136f0
 800f89c:	08013604 	.word	0x08013604
 800f8a0:	08013614 	.word	0x08013614
 800f8a4:	08013624 	.word	0x08013624
 800f8a8:	08013630 	.word	0x08013630
 800f8ac:	0801363c 	.word	0x0801363c
 800f8b0:	0801364c 	.word	0x0801364c
 800f8b4:	08013658 	.word	0x08013658
 800f8b8:	08013664 	.word	0x08013664
 800f8bc:	08013670 	.word	0x08013670
 800f8c0:	08013678 	.word	0x08013678
 800f8c4:	0801368c 	.word	0x0801368c
 800f8c8:	08013698 	.word	0x08013698
 800f8cc:	080136a4 	.word	0x080136a4
 800f8d0:	080136b4 	.word	0x080136b4
 800f8d4:	080136c4 	.word	0x080136c4
 800f8d8:	080136d0 	.word	0x080136d0
 800f8dc:	080136dc 	.word	0x080136dc
 800f8e0:	080135e4 	.word	0x080135e4
 800f8e4:	080135f4 	.word	0x080135f4

0800f8e8 <canIdle_GenericFrame>:
{
 800f8e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8ec:	b083      	sub	sp, #12
 800f8ee:	4605      	mov	r5, r0
   cmd = app->cmd.data[0];
 800f8f0:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
   md80Id = app->cmd.motorId;
 800f8f4:	7f86      	ldrb	r6, [r0, #30]
   pMd80dev = (tMd80_Device *)&md80Dev[md80Id];
 800f8f6:	ebc6 1246 	rsb	r2, r6, r6, lsl #5
 800f8fa:	4b56      	ldr	r3, [pc, #344]	; (800fa54 <canIdle_GenericFrame+0x16c>)
 800f8fc:	eb03 1902 	add.w	r9, r3, r2, lsl #4
   sendMessage(canIde_bringUp_motor, 2, cmd, md80Id);
 800f900:	4633      	mov	r3, r6
 800f902:	4622      	mov	r2, r4
 800f904:	2102      	movs	r1, #2
 800f906:	2004      	movs	r0, #4
 800f908:	f7f1 f8e2 	bl	8000ad0 <sendMessage>
   cdc_printf("@%u\t[Bring up Motor Command]:\t %s for %d\r\n",xTaskGetTickCount()/portTICK_PERIOD_MS,frameTypeName((tMd80_FrameId) cmd) ,md80Id);
 800f90c:	f7f9 fce8 	bl	80092e0 <xTaskGetTickCount>
 800f910:	4607      	mov	r7, r0
 800f912:	4620      	mov	r0, r4
 800f914:	f7ff ff50 	bl	800f7b8 <frameTypeName>
 800f918:	4602      	mov	r2, r0
 800f91a:	4633      	mov	r3, r6
 800f91c:	4639      	mov	r1, r7
 800f91e:	484e      	ldr	r0, [pc, #312]	; (800fa58 <canIdle_GenericFrame+0x170>)
 800f920:	f7f1 f912 	bl	8000b48 <cdc_printf>
   switch (cmd)
 800f924:	2c21      	cmp	r4, #33	; 0x21
 800f926:	d816      	bhi.n	800f956 <canIdle_GenericFrame+0x6e>
 800f928:	f04f 0800 	mov.w	r8, #0
 800f92c:	2c21      	cmp	r4, #33	; 0x21
 800f92e:	d81d      	bhi.n	800f96c <canIdle_GenericFrame+0x84>
 800f930:	e8df f004 	tbb	[pc, r4]
 800f934:	192c231f 	.word	0x192c231f
 800f938:	1c3a1c32 	.word	0x1c3a1c32
 800f93c:	1c1c1c1c 	.word	0x1c1c1c1c
 800f940:	1c1c1c1c 	.word	0x1c1c1c1c
 800f944:	8c67533f 	.word	0x8c67533f
 800f948:	1c1c1c1c 	.word	0x1c1c1c1c
 800f94c:	1c1c1c1c 	.word	0x1c1c1c1c
 800f950:	1c1c1c1c 	.word	0x1c1c1c1c
 800f954:	8877      	.short	0x8877
 800f956:	2c70      	cmp	r4, #112	; 0x70
 800f958:	d05f      	beq.n	800fa1a <canIdle_GenericFrame+0x132>
 800f95a:	2c71      	cmp	r4, #113	; 0x71
 800f95c:	d106      	bne.n	800f96c <canIdle_GenericFrame+0x84>
      md80_setupCalibrationOutput(pMd80dev);
 800f95e:	4648      	mov	r0, r9
 800f960:	f7fb ff92 	bl	800b888 <md80_setupCalibrationOutput>
      break;
 800f964:	e002      	b.n	800f96c <canIdle_GenericFrame+0x84>
      md80_SetEncoderZero(pMd80dev);
 800f966:	4648      	mov	r0, r9
 800f968:	f7fc f89e 	bl	800baa8 <md80_SetEncoderZero>
}
 800f96c:	b003      	add	sp, #12
 800f96e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      md80_ConfigBlink(pMd80dev);
 800f972:	4648      	mov	r0, r9
 800f974:	f7fb ff6c 	bl	800b850 <md80_ConfigBlink>
      break;
 800f978:	e7f8      	b.n	800f96c <canIdle_GenericFrame+0x84>
      md80En = app->cmd.data[1];
 800f97a:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
      md80_ControlMd80Enable(pMd80dev, md80En);
 800f97e:	3900      	subs	r1, #0
 800f980:	bf18      	it	ne
 800f982:	2101      	movne	r1, #1
 800f984:	4648      	mov	r0, r9
 800f986:	f7fc f834 	bl	800b9f2 <md80_ControlMd80Enable>
      break;
 800f98a:	e7ef      	b.n	800f96c <canIdle_GenericFrame+0x84>
      md80_ControlMd80Mode(pMd80dev, md80Mode);
 800f98c:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
 800f990:	4648      	mov	r0, r9
 800f992:	f7fc f819 	bl	800b9c8 <md80_ControlMd80Mode>
      break;
 800f996:	e7e9      	b.n	800f96c <canIdle_GenericFrame+0x84>
      md80_SetCurrentLimit(pMd80dev, currentLimit);
 800f998:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
 800f99c:	ee00 3a10 	vmov	s0, r3
 800f9a0:	4648      	mov	r0, r9
 800f9a2:	f7fb ffe1 	bl	800b968 <md80_SetCurrentLimit>
      break;
 800f9a6:	e7e1      	b.n	800f96c <canIdle_GenericFrame+0x84>
      md80_SetMaxTorque(pMd80dev, torqueBandwidth);
 800f9a8:	8c69      	ldrh	r1, [r5, #34]	; 0x22
 800f9aa:	4648      	mov	r0, r9
 800f9ac:	f7fc f86e 	bl	800ba8c <md80_SetMaxTorque>
      break;
 800f9b0:	e7dc      	b.n	800f96c <canIdle_GenericFrame+0x84>
      md80_SetPositionControllerParams(pMd80dev, kp, ki, kd, iWindup);
 800f9b2:	f8d5 302e 	ldr.w	r3, [r5, #46]	; 0x2e
 800f9b6:	ee01 3a90 	vmov	s3, r3
 800f9ba:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
 800f9be:	ee01 3a10 	vmov	s2, r3
 800f9c2:	f8d5 3026 	ldr.w	r3, [r5, #38]	; 0x26
 800f9c6:	ee00 3a90 	vmov	s1, r3
 800f9ca:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
 800f9ce:	ee00 3a10 	vmov	s0, r3
 800f9d2:	4648      	mov	r0, r9
 800f9d4:	f7fc f83a 	bl	800ba4c <md80_SetPositionControllerParams>
      break;
 800f9d8:	e7c8      	b.n	800f96c <canIdle_GenericFrame+0x84>
      md80_SetVelocityControllerParams(pMd80dev, kp, ki, kd, iWindup);
 800f9da:	f8d5 302e 	ldr.w	r3, [r5, #46]	; 0x2e
 800f9de:	ee01 3a90 	vmov	s3, r3
 800f9e2:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
 800f9e6:	ee01 3a10 	vmov	s2, r3
 800f9ea:	f8d5 3026 	ldr.w	r3, [r5, #38]	; 0x26
 800f9ee:	ee00 3a90 	vmov	s1, r3
 800f9f2:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
 800f9f6:	ee00 3a10 	vmov	s0, r3
 800f9fa:	4648      	mov	r0, r9
 800f9fc:	f7fc f832 	bl	800ba64 <md80_SetVelocityControllerParams>
      break;
 800fa00:	e7b4      	b.n	800f96c <canIdle_GenericFrame+0x84>
      md80_SetImpedanceControllerParams(pMd80dev, kp, kd);
 800fa02:	f8d5 3026 	ldr.w	r3, [r5, #38]	; 0x26
 800fa06:	ee00 3a90 	vmov	s1, r3
 800fa0a:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
 800fa0e:	ee00 3a10 	vmov	s0, r3
 800fa12:	4648      	mov	r0, r9
 800fa14:	f7fc f832 	bl	800ba7c <md80_SetImpedanceControllerParams>
      break;
 800fa18:	e7a8      	b.n	800f96c <canIdle_GenericFrame+0x84>
      md80_setupCalibration(pMd80dev);
 800fa1a:	4648      	mov	r0, r9
 800fa1c:	f7fb ff26 	bl	800b86c <md80_setupCalibration>
      break;
 800fa20:	e7a4      	b.n	800f96c <canIdle_GenericFrame+0x84>
      memcpy((void *)&newBaudrate, (void *)&app->cmd.data[2], sizeof(uint32_t));
 800fa22:	f8d5 3023 	ldr.w	r3, [r5, #35]	; 0x23
 800fa26:	f8cd 3007 	str.w	r3, [sp, #7]
      memcpy((void *)&newTimeout, (void *)&app->cmd.data[6], sizeof(uint16_t));
 800fa2a:	f8b5 3027 	ldrh.w	r3, [r5, #39]	; 0x27
 800fa2e:	f363 080f 	bfi	r8, r3, #0, #16
      md80_ConfigMd80Can(pMd80dev, newBaudrate, newTimeout, canTermination);
 800fa32:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800fa36:	4642      	mov	r2, r8
 800fa38:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fa3c:	4648      	mov	r0, r9
 800fa3e:	f7fb ff3f 	bl	800b8c0 <md80_ConfigMd80Can>
      break;
 800fa42:	e793      	b.n	800f96c <canIdle_GenericFrame+0x84>
      md80_ConfigMd80Save(pMd80dev);
 800fa44:	4648      	mov	r0, r9
 800fa46:	f7fb ff65 	bl	800b914 <md80_ConfigMd80Save>
      break;
 800fa4a:	e78f      	b.n	800f96c <canIdle_GenericFrame+0x84>
      md80_Restart(pMd80dev);
 800fa4c:	4648      	mov	r0, r9
 800fa4e:	f7fb ff29 	bl	800b8a4 <md80_Restart>
}
 800fa52:	e78b      	b.n	800f96c <canIdle_GenericFrame+0x84>
 800fa54:	20006fb4 	.word	0x20006fb4
 800fa58:	08013710 	.word	0x08013710

0800fa5c <busFrameName>:
	switch (state){
 800fa5c:	280a      	cmp	r0, #10
 800fa5e:	d81b      	bhi.n	800fa98 <busFrameName+0x3c>
 800fa60:	e8df f000 	tbb	[pc, r0]
 800fa64:	0a081c06 	.word	0x0a081c06
 800fa68:	12100e0c 	.word	0x12100e0c
 800fa6c:	1614      	.short	0x1614
 800fa6e:	18          	.byte	0x18
 800fa6f:	00          	.byte	0x00
 800fa70:	480b      	ldr	r0, [pc, #44]	; (800faa0 <busFrameName+0x44>)
 800fa72:	4770      	bx	lr
				return "CANDLE_CFG_BR";
 800fa74:	480b      	ldr	r0, [pc, #44]	; (800faa4 <busFrameName+0x48>)
 800fa76:	4770      	bx	lr
				return "MD80_ADD";
 800fa78:	480b      	ldr	r0, [pc, #44]	; (800faa8 <busFrameName+0x4c>)
 800fa7a:	4770      	bx	lr
				return "GENERIC_FRAME";
 800fa7c:	480b      	ldr	r0, [pc, #44]	; (800faac <busFrameName+0x50>)
 800fa7e:	4770      	bx	lr
				return "CONFIG_CAN";
 800fa80:	480b      	ldr	r0, [pc, #44]	; (800fab0 <busFrameName+0x54>)
 800fa82:	4770      	bx	lr
				return "B_F_BEGIN";
 800fa84:	480b      	ldr	r0, [pc, #44]	; (800fab4 <busFrameName+0x58>)
 800fa86:	4770      	bx	lr
				return "B_F_END";
 800fa88:	480b      	ldr	r0, [pc, #44]	; (800fab8 <busFrameName+0x5c>)
 800fa8a:	4770      	bx	lr
				return "B_F_UPDATE";
 800fa8c:	480b      	ldr	r0, [pc, #44]	; (800fabc <busFrameName+0x60>)
 800fa8e:	4770      	bx	lr
				return "B_F_RESET";
 800fa90:	480b      	ldr	r0, [pc, #44]	; (800fac0 <busFrameName+0x64>)
 800fa92:	4770      	bx	lr
				return "B_F_INVALID";
 800fa94:	480b      	ldr	r0, [pc, #44]	; (800fac4 <busFrameName+0x68>)
 800fa96:	4770      	bx	lr
			return "Unknown command";
 800fa98:	480b      	ldr	r0, [pc, #44]	; (800fac8 <busFrameName+0x6c>)
 800fa9a:	4770      	bx	lr
				return "PING_START";
 800fa9c:	480b      	ldr	r0, [pc, #44]	; (800facc <busFrameName+0x70>)
}
 800fa9e:	4770      	bx	lr
 800faa0:	0801373c 	.word	0x0801373c
 800faa4:	08013754 	.word	0x08013754
 800faa8:	08013764 	.word	0x08013764
 800faac:	08013770 	.word	0x08013770
 800fab0:	08013780 	.word	0x08013780
 800fab4:	0801378c 	.word	0x0801378c
 800fab8:	08013798 	.word	0x08013798
 800fabc:	080137a0 	.word	0x080137a0
 800fac0:	080137ac 	.word	0x080137ac
 800fac4:	080137b8 	.word	0x080137b8
 800fac8:	080135e4 	.word	0x080135e4
 800facc:	08013748 	.word	0x08013748

0800fad0 <canIdle_Command>:
{
 800fad0:	b538      	push	{r3, r4, r5, lr}
 800fad2:	4604      	mov	r4, r0
   cdc_printf("@%u\t[canIdle]:\tH:%s for %d\r\n",xTaskGetTickCount()/portTICK_PERIOD_MS,busFrameName(app->hostReq.frId), app->cmd.motorId );
 800fad4:	f7f9 fc04 	bl	80092e0 <xTaskGetTickCount>
 800fad8:	4605      	mov	r5, r0
 800fada:	7860      	ldrb	r0, [r4, #1]
 800fadc:	f7ff ffbe 	bl	800fa5c <busFrameName>
 800fae0:	4602      	mov	r2, r0
 800fae2:	7fa3      	ldrb	r3, [r4, #30]
 800fae4:	4629      	mov	r1, r5
 800fae6:	481b      	ldr	r0, [pc, #108]	; (800fb54 <canIdle_Command+0x84>)
 800fae8:	f7f1 f82e 	bl	8000b48 <cdc_printf>
   switch (app->hostReq.frId)
 800faec:	7863      	ldrb	r3, [r4, #1]
 800faee:	2b09      	cmp	r3, #9
 800faf0:	d823      	bhi.n	800fb3a <canIdle_Command+0x6a>
 800faf2:	e8df f003 	tbb	[pc, r3]
 800faf6:	0508      	.short	0x0508
 800faf8:	220e0a1e 	.word	0x220e0a1e
 800fafc:	1a221612 	.word	0x1a221612
      canIdle_ScanDevice(app);
 800fb00:	4620      	mov	r0, r4
 800fb02:	f7ff fd67 	bl	800f5d4 <canIdle_ScanDevice>
}
 800fb06:	2003      	movs	r0, #3
 800fb08:	bd38      	pop	{r3, r4, r5, pc}
      canIdle_AddMd80(app);
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	f7ff fdba 	bl	800f684 <canIdle_AddMd80>
      break;
 800fb10:	e7f9      	b.n	800fb06 <canIdle_Command+0x36>
      canIdle_GenericFrame(app);
 800fb12:	4620      	mov	r0, r4
 800fb14:	f7ff fee8 	bl	800f8e8 <canIdle_GenericFrame>
      break;
 800fb18:	e7f5      	b.n	800fb06 <canIdle_Command+0x36>
      canIdle_Begin(app);
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	f7ff f984 	bl	800ee28 <canIdle_Begin>
      break;
 800fb20:	e7f1      	b.n	800fb06 <canIdle_Command+0x36>
      canIdle_End(app);
 800fb22:	4620      	mov	r0, r4
 800fb24:	f7ff f985 	bl	800ee32 <canIdle_End>
      break;
 800fb28:	e7ed      	b.n	800fb06 <canIdle_Command+0x36>
      canIdle_Reset(app);
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	f7ff fdf4 	bl	800f718 <canIdle_Reset>
      break;
 800fb30:	e7e9      	b.n	800fb06 <canIdle_Command+0x36>
      canIdle_ConfigBaudrate(app);
 800fb32:	4620      	mov	r0, r4
 800fb34:	f7ff f99a 	bl	800ee6c <canIdle_ConfigBaudrate>
      break;
 800fb38:	e7e5      	b.n	800fb06 <canIdle_Command+0x36>
      cdc_printf("[canIdle_Command]@%u:\t unhandled command %s\r\n",GetCycleCount(),busFrameName(nextState) );
 800fb3a:	f7f1 f831 	bl	8000ba0 <GetCycleCount>
 800fb3e:	4604      	mov	r4, r0
 800fb40:	2002      	movs	r0, #2
 800fb42:	f7ff ff8b 	bl	800fa5c <busFrameName>
 800fb46:	4602      	mov	r2, r0
 800fb48:	4621      	mov	r1, r4
 800fb4a:	4803      	ldr	r0, [pc, #12]	; (800fb58 <canIdle_Command+0x88>)
 800fb4c:	f7f0 fffc 	bl	8000b48 <cdc_printf>
      break;
 800fb50:	e7d9      	b.n	800fb06 <canIdle_Command+0x36>
 800fb52:	bf00      	nop
 800fb54:	080137c4 	.word	0x080137c4
 800fb58:	080137e4 	.word	0x080137e4

0800fb5c <busFrameTypeName>:


const char* busFrameTypeName(tMd80_BusFrameId type){
	switch(type){
 800fb5c:	280a      	cmp	r0, #10
 800fb5e:	d81b      	bhi.n	800fb98 <busFrameTypeName+0x3c>
 800fb60:	e8df f000 	tbb	[pc, r0]
 800fb64:	0a081c06 	.word	0x0a081c06
 800fb68:	12100e0c 	.word	0x12100e0c
 800fb6c:	1614      	.short	0x1614
 800fb6e:	18          	.byte	0x18
 800fb6f:	00          	.byte	0x00
 800fb70:	480b      	ldr	r0, [pc, #44]	; (800fba0 <busFrameTypeName+0x44>)
 800fb72:	4770      	bx	lr
	case(BUS_FRAME_NONE ):
		return "NONE";
	case(BUS_FRAME_PING_START ):
		return "PING_START";
	case(BUS_FRAME_CANDLE_CONFIG_BAUDRATE ):
		return "CANDLE_CONF_BAUDRATE";
 800fb74:	480b      	ldr	r0, [pc, #44]	; (800fba4 <busFrameTypeName+0x48>)
 800fb76:	4770      	bx	lr
	case(BUS_FRAME_MD80_ADD ):
		return "MD80_ADD";
 800fb78:	480b      	ldr	r0, [pc, #44]	; (800fba8 <busFrameTypeName+0x4c>)
 800fb7a:	4770      	bx	lr
	case(BUS_FRAME_MD80_GENERIC_FRAME ):
		return "MD80_GENERIC_FRAME";
 800fb7c:	480b      	ldr	r0, [pc, #44]	; (800fbac <busFrameTypeName+0x50>)
 800fb7e:	4770      	bx	lr
	case(BUS_FRAME_MD80_CONFIG_CAN ):
		return "MD80_CONFIG_CAN";
 800fb80:	480b      	ldr	r0, [pc, #44]	; (800fbb0 <busFrameTypeName+0x54>)
 800fb82:	4770      	bx	lr
	case(BUS_FRAME_BEGIN ):
		return "BEGIN";
 800fb84:	480b      	ldr	r0, [pc, #44]	; (800fbb4 <busFrameTypeName+0x58>)
 800fb86:	4770      	bx	lr
	case(BUS_FRAME_END ):
		return "END";
 800fb88:	480b      	ldr	r0, [pc, #44]	; (800fbb8 <busFrameTypeName+0x5c>)
 800fb8a:	4770      	bx	lr
	case(BUS_FRAME_UPDATE ):
		return "UPDATE";
 800fb8c:	480b      	ldr	r0, [pc, #44]	; (800fbbc <busFrameTypeName+0x60>)
 800fb8e:	4770      	bx	lr
	case(BUS_FRAME_RESET ):
		return "RESET";
 800fb90:	480b      	ldr	r0, [pc, #44]	; (800fbc0 <busFrameTypeName+0x64>)
 800fb92:	4770      	bx	lr
	case(BUS_FRAME_INVALID):
		return "INVALID";
 800fb94:	480b      	ldr	r0, [pc, #44]	; (800fbc4 <busFrameTypeName+0x68>)
 800fb96:	4770      	bx	lr
	default:
		return "Unknown";
 800fb98:	480b      	ldr	r0, [pc, #44]	; (800fbc8 <busFrameTypeName+0x6c>)
 800fb9a:	4770      	bx	lr
		return "PING_START";
 800fb9c:	480b      	ldr	r0, [pc, #44]	; (800fbcc <busFrameTypeName+0x70>)
	}

}
 800fb9e:	4770      	bx	lr
 800fba0:	08013740 	.word	0x08013740
 800fba4:	08013814 	.word	0x08013814
 800fba8:	08013764 	.word	0x08013764
 800fbac:	0801382c 	.word	0x0801382c
 800fbb0:	08013840 	.word	0x08013840
 800fbb4:	08013790 	.word	0x08013790
 800fbb8:	0801379c 	.word	0x0801379c
 800fbbc:	080137a4 	.word	0x080137a4
 800fbc0:	080137b0 	.word	0x080137b0
 800fbc4:	080137bc 	.word	0x080137bc
 800fbc8:	08013850 	.word	0x08013850
 800fbcc:	08013748 	.word	0x08013748

0800fbd0 <canIdle_UpdateResp>:

static void canIdle_UpdateResp (tCanIdle_Data * const app)
{
 800fbd0:	b570      	push	{r4, r5, r6, lr}
 800fbd2:	4604      	mov	r4, r0
   uint8_t iter = 0u;
   uint8_t md80Id = 0u;
   tMd80_Device *pMd80dev = NULL;

   if (app->rsp.frId == BUS_FRAME_PING_START)
 800fbd4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d05a      	beq.n	800fc92 <canIdle_UpdateResp+0xc2>
         {
            Obj.md80_addrs[iter] = 0U;
         }
      }
   }
   else if (app->rsp.frId == BUS_FRAME_CANDLE_CONFIG_BAUDRATE)
 800fbdc:	2b02      	cmp	r3, #2
 800fbde:	d02d      	beq.n	800fc3c <canIdle_UpdateResp+0x6c>
   }
   /* Another command. */
   else
   {
      /* Get the data structure of md80. */
      pMd80dev = (tMd80_Device *)&md80Dev[app->cmd.motorId];
 800fbe0:	7f83      	ldrb	r3, [r0, #30]

      memcpy((void *)&app->rsp.data[0], (void *)&pMd80dev->output.errorVector, sizeof(uint16_t));
 800fbe2:	4942      	ldr	r1, [pc, #264]	; (800fcec <canIdle_UpdateResp+0x11c>)
 800fbe4:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800fbe8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800fbec:	f8b2 006a 	ldrh.w	r0, [r2, #106]	; 0x6a
 800fbf0:	87a0      	strh	r0, [r4, #60]	; 0x3c
      memcpy((void *)&app->rsp.data[2], (void *)&pMd80dev->output.temperature, sizeof(uint8_t));
 800fbf2:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 800fbf6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      memcpy((void *)&app->rsp.data[3], (void *)&pMd80dev->output.position, sizeof(float));
 800fbfa:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800fbfe:	0112      	lsls	r2, r2, #4
 800fc00:	3250      	adds	r2, #80	; 0x50
 800fc02:	440a      	add	r2, r1
 800fc04:	6850      	ldr	r0, [r2, #4]
 800fc06:	f8c4 003f 	str.w	r0, [r4, #63]	; 0x3f
      memcpy((void *)&app->rsp.data[7], (void *)&pMd80dev->output.velocity, sizeof(float));
 800fc0a:	6892      	ldr	r2, [r2, #8]
 800fc0c:	f8c4 2043 	str.w	r2, [r4, #67]	; 0x43
      memcpy((void *)&app->rsp.data[11], (void *)&pMd80dev->output.torque, sizeof(float));
 800fc10:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800fc14:	0112      	lsls	r2, r2, #4
 800fc16:	3258      	adds	r2, #88	; 0x58
 800fc18:	440a      	add	r2, r1
 800fc1a:	6850      	ldr	r0, [r2, #4]
 800fc1c:	f8c4 0047 	str.w	r0, [r4, #71]	; 0x47
      memcpy((void *)&app->rsp.data[15], (void *)&pMd80dev->output.encoderPosition, sizeof(float));
 800fc20:	6892      	ldr	r2, [r2, #8]
 800fc22:	f8c4 204b 	str.w	r2, [r4, #75]	; 0x4b
      memcpy((void *)&app->rsp.data[19], (void *)&pMd80dev->output.encoderVelocity, sizeof(float));
 800fc26:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800fc2a:	011b      	lsls	r3, r3, #4
 800fc2c:	3360      	adds	r3, #96	; 0x60
 800fc2e:	440b      	add	r3, r1
 800fc30:	685b      	ldr	r3, [r3, #4]
 800fc32:	f8c4 304f 	str.w	r3, [r4, #79]	; 0x4f
      app->rsp.size = 23u;
 800fc36:	2317      	movs	r3, #23
 800fc38:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   }

   /* Update to object. */
   Obj.md80_Respond.md80_dev_no = app->rsp.motorId;
 800fc3c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800fc40:	4d2b      	ldr	r5, [pc, #172]	; (800fcf0 <canIdle_UpdateResp+0x120>)
 800fc42:	f885 3124 	strb.w	r3, [r5, #292]	; 0x124
   Obj.md80_Respond.command = app->rsp.frId;
 800fc46:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800fc4a:	f885 3125 	strb.w	r3, [r5, #293]	; 0x125
   Obj.md80_Respond.size = app->rsp.size;
 800fc4e:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 800fc52:	f885 3126 	strb.w	r3, [r5, #294]	; 0x126
   Obj.md80_Respond.timestamp = xTaskGetTickCount()/portTICK_PERIOD_MS;
 800fc56:	f7f9 fb43 	bl	80092e0 <xTaskGetTickCount>
 800fc5a:	4606      	mov	r6, r0
 800fc5c:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
   //cdc_printf("response@%u: %d\r\n", GetCycleCount(), Obj.md80_Respond.command);
   cdc_printf("@%u\t[canM response]:\t%s\r\n", Obj.md80_Respond.timestamp, busFrameTypeName(Obj.md80_Respond.command));
 800fc60:	f895 0125 	ldrb.w	r0, [r5, #293]	; 0x125
 800fc64:	f7ff ff7a 	bl	800fb5c <busFrameTypeName>
 800fc68:	4602      	mov	r2, r0
 800fc6a:	4631      	mov	r1, r6
 800fc6c:	4821      	ldr	r0, [pc, #132]	; (800fcf4 <canIdle_UpdateResp+0x124>)
 800fc6e:	f7f0 ff6b 	bl	8000b48 <cdc_printf>
   memcpy((void *)&Obj.md80_Respond.dataRet0, (void *)&app->rsp.data[0], 4);
 800fc72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fc74:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
   memcpy((void *)&Obj.md80_Respond.dataRet1, (void *)&app->rsp.data[4], 4);
 800fc78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc7a:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
   memcpy((void *)&Obj.md80_Respond.dataRet2, (void *)&app->rsp.data[8], 4);
 800fc7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc80:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
   memcpy((void *)&Obj.md80_Respond.dataRet3, (void *)&app->rsp.data[12], 4);
 800fc84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fc86:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
   memcpy((void *)&Obj.md80_Respond.dataRet4, (void *)&app->rsp.data[16], 4);
 800fc8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800fc8c:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
}
 800fc90:	bd70      	pop	{r4, r5, r6, pc}
      if (app->numMd80Det > 0u)
 800fc92:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 800fc96:	b330      	cbz	r0, 800fce6 <canIdle_UpdateResp+0x116>
         for (iter = 0u; iter < app->numMd80Det; iter++)
 800fc98:	2300      	movs	r3, #0
 800fc9a:	e010      	b.n	800fcbe <canIdle_UpdateResp+0xee>
            Obj.md80_addrs[iter] = (uint32_t)app->rsp.data[iter * 2u] + ((uint32_t)app->rsp.data[(iter * 2u) + 1u] << 8);
 800fc9c:	005a      	lsls	r2, r3, #1
 800fc9e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 800fca2:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 800fca6:	3201      	adds	r2, #1
 800fca8:	4422      	add	r2, r4
 800fcaa:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800fcae:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 800fcb2:	4a0f      	ldr	r2, [pc, #60]	; (800fcf0 <canIdle_UpdateResp+0x120>)
 800fcb4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fcb8:	6051      	str	r1, [r2, #4]
         for (iter = 0u; iter < app->numMd80Det; iter++)
 800fcba:	3301      	adds	r3, #1
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	4298      	cmp	r0, r3
 800fcc0:	d8ec      	bhi.n	800fc9c <canIdle_UpdateResp+0xcc>
 800fcc2:	e006      	b.n	800fcd2 <canIdle_UpdateResp+0x102>
            Obj.md80_addrs[iter] = 0U;
 800fcc4:	4a0a      	ldr	r2, [pc, #40]	; (800fcf0 <canIdle_UpdateResp+0x120>)
 800fcc6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fcca:	2100      	movs	r1, #0
 800fccc:	6051      	str	r1, [r2, #4]
         for (;iter < CANIDLE_TOTAL_DEV_SUPPORT; iter++)
 800fcce:	3301      	adds	r3, #1
 800fcd0:	b2db      	uxtb	r3, r3
 800fcd2:	2b07      	cmp	r3, #7
 800fcd4:	d9f6      	bls.n	800fcc4 <canIdle_UpdateResp+0xf4>
 800fcd6:	e7b1      	b.n	800fc3c <canIdle_UpdateResp+0x6c>
            Obj.md80_addrs[iter] = 0U;
 800fcd8:	4b05      	ldr	r3, [pc, #20]	; (800fcf0 <canIdle_UpdateResp+0x120>)
 800fcda:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800fcde:	2200      	movs	r2, #0
 800fce0:	605a      	str	r2, [r3, #4]
         for (iter = 0u; iter < CANIDLE_TOTAL_DEV_SUPPORT; iter++)
 800fce2:	3001      	adds	r0, #1
 800fce4:	b2c0      	uxtb	r0, r0
 800fce6:	2807      	cmp	r0, #7
 800fce8:	d9f6      	bls.n	800fcd8 <canIdle_UpdateResp+0x108>
 800fcea:	e7a7      	b.n	800fc3c <canIdle_UpdateResp+0x6c>
 800fcec:	20006fb4 	.word	0x20006fb4
 800fcf0:	2000d140 	.word	0x2000d140
 800fcf4:	08013858 	.word	0x08013858

0800fcf8 <canIdle_Command_Exit>:
{
 800fcf8:	b510      	push	{r4, lr}
 800fcfa:	4604      	mov	r4, r0
   taskENTER_CRITICAL();
 800fcfc:	f7fa f94a 	bl	8009f94 <vPortEnterCritical>
   app->rsp.frId = app->cmd.frId;
 800fd00:	7fe3      	ldrb	r3, [r4, #31]
 800fd02:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   app->rsp.motorId = app->cmd.motorId;
 800fd06:	7fa3      	ldrb	r3, [r4, #30]
 800fd08:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   app->rsp.size = app->cmd.size;
 800fd0c:	f894 3020 	ldrb.w	r3, [r4, #32]
 800fd10:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   canIdle_UpdateResp(app);
 800fd14:	4620      	mov	r0, r4
 800fd16:	f7ff ff5b 	bl	800fbd0 <canIdle_UpdateResp>
   taskEXIT_CRITICAL();
 800fd1a:	f7fa f95d 	bl	8009fd8 <vPortExitCritical>
}
 800fd1e:	2000      	movs	r0, #0
 800fd20:	bd10      	pop	{r4, pc}
	...

0800fd24 <canIdle_UpdateCmd>:

void canIdle_UpdateCmd (uint8_t md80id, uint8_t command, uint8_t size, uint8_t *cmd)
{
 800fd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd28:	b082      	sub	sp, #8
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	460e      	mov	r6, r1
 800fd2e:	4617      	mov	r7, r2
 800fd30:	4698      	mov	r8, r3
   isMd80IdExist = true;

   if (true == isMd80IdExist)
   {
      /* Enter critical section. */
      taskENTER_CRITICAL();
 800fd32:	f7fa f92f 	bl	8009f94 <vPortEnterCritical>

      /* Save the cmd. */
      pCanIdleM->hostReq.motorId = md80id;
 800fd36:	4d12      	ldr	r5, [pc, #72]	; (800fd80 <canIdle_UpdateCmd+0x5c>)
 800fd38:	702c      	strb	r4, [r5, #0]
      pCanIdleM->hostReq.frId = command;
 800fd3a:	706e      	strb	r6, [r5, #1]
      pCanIdleM->hostReq.size = size;
 800fd3c:	70af      	strb	r7, [r5, #2]
      memcpy((uint8_t *)&pCanIdleM->hostReq.data[0], (uint8_t *)cmd, size);
 800fd3e:	463a      	mov	r2, r7
 800fd40:	4641      	mov	r1, r8
 800fd42:	1ce8      	adds	r0, r5, #3
 800fd44:	f001 ffe0 	bl	8011d08 <memcpy>

      /* Set flag determine it having new command.*/
      pCanIdleM->isNewCommand = true;
 800fd48:	2301      	movs	r3, #1
 800fd4a:	776b      	strb	r3, [r5, #29]

      /* Exit critical section. */
      taskEXIT_CRITICAL();
 800fd4c:	f7fa f944 	bl	8009fd8 <vPortExitCritical>

      cdc_printf("@%u\t[canM command]:\t%s for %d\r\n", Obj.md80_Respond.timestamp, busFrameTypeName(command), md80id);
 800fd50:	4f0c      	ldr	r7, [pc, #48]	; (800fd84 <canIdle_UpdateCmd+0x60>)
 800fd52:	f8d7 8128 	ldr.w	r8, [r7, #296]	; 0x128
 800fd56:	4630      	mov	r0, r6
 800fd58:	f7ff ff00 	bl	800fb5c <busFrameTypeName>
 800fd5c:	4605      	mov	r5, r0
 800fd5e:	4623      	mov	r3, r4
 800fd60:	4602      	mov	r2, r0
 800fd62:	4641      	mov	r1, r8
 800fd64:	4808      	ldr	r0, [pc, #32]	; (800fd88 <canIdle_UpdateCmd+0x64>)
 800fd66:	f7f0 feef 	bl	8000b48 <cdc_printf>
      sendMessage(canM_command, 3, Obj.md80_Respond.timestamp, busFrameTypeName(command), md80id);
 800fd6a:	9400      	str	r4, [sp, #0]
 800fd6c:	462b      	mov	r3, r5
 800fd6e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800fd72:	2103      	movs	r1, #3
 800fd74:	2006      	movs	r0, #6
 800fd76:	f7f0 feab 	bl	8000ad0 <sendMessage>
   }
   else
   {
      /* Do nothing. */
   }
}
 800fd7a:	b002      	add	sp, #8
 800fd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd80:	20009634 	.word	0x20009634
 800fd84:	2000d140 	.word	0x2000d140
 800fd88:	08013874 	.word	0x08013874

0800fd8c <canIdle_Init>:

void canIdle_Init()
{
 800fd8c:	b508      	push	{r3, lr}
   /* Configuration the baudrate of CAN to 1M. */
   canM_SetNewBaudrate(CAN_BAUD_1M);
 800fd8e:	2001      	movs	r0, #1
 800fd90:	f000 f96a 	bl	8010068 <canM_SetNewBaudrate>
}
 800fd94:	bd08      	pop	{r3, pc}
	...

0800fd98 <canIdle_MainFunction>:
	}
	return ret;
}

void canIdle_MainFunction()
{
 800fd98:	b510      	push	{r4, lr}
   tCanIdle_Data * const pCanIdleM = (tCanIdle_Data *)&canIdle_Module;
   tCanIdle_States nextState = pCanIdleM->state;
 800fd9a:	4b12      	ldr	r3, [pc, #72]	; (800fde4 <canIdle_MainFunction+0x4c>)
 800fd9c:	7edc      	ldrb	r4, [r3, #27]

   /* Update data control. */
   //if(nextState != CANIDLE_IDLE) cdc_printf("[can2motor]@%u:\t %s\n",GetCycleCount(), tCanIdle_StatesName(nextState));
   canIdle_UpdateDataControl();
 800fd9e:	f7ff f877 	bl	800ee90 <canIdle_UpdateDataControl>

   /* Run mode. */
   switch (nextState)
 800fda2:	2c03      	cmp	r4, #3
 800fda4:	d818      	bhi.n	800fdd8 <canIdle_MainFunction+0x40>
 800fda6:	e8df f004 	tbb	[pc, r4]
 800fdaa:	0b02      	.short	0x0b02
 800fdac:	130f      	.short	0x130f
   {
   case CANIDLE_IDLE:
      nextState = canIdle_EventHandle(pCanIdleM);
 800fdae:	480d      	ldr	r0, [pc, #52]	; (800fde4 <canIdle_MainFunction+0x4c>)
 800fdb0:	f7ff f846 	bl	800ee40 <canIdle_EventHandle>
   default:
      nextState = CANIDLE_IDLE;
      break;
   }

   pCanIdleM->state = nextState;
 800fdb4:	4b0b      	ldr	r3, [pc, #44]	; (800fde4 <canIdle_MainFunction+0x4c>)
 800fdb6:	76d8      	strb	r0, [r3, #27]

   if (CANIDLE_RUN == pCanIdleM->workState)
 800fdb8:	7f1b      	ldrb	r3, [r3, #28]
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d00e      	beq.n	800fddc <canIdle_MainFunction+0x44>
   {
	  //we switched to running mode and from now on commands will run constantly - position/impedance commands only change the targets.
      canIdle_Control(pCanIdleM);
   }
}
 800fdbe:	bd10      	pop	{r4, pc}
      nextState = canIdle_Command_Enter(pCanIdleM);
 800fdc0:	4808      	ldr	r0, [pc, #32]	; (800fde4 <canIdle_MainFunction+0x4c>)
 800fdc2:	f7ff f845 	bl	800ee50 <canIdle_Command_Enter>
      break;
 800fdc6:	e7f5      	b.n	800fdb4 <canIdle_MainFunction+0x1c>
      nextState = canIdle_Command(pCanIdleM);
 800fdc8:	4806      	ldr	r0, [pc, #24]	; (800fde4 <canIdle_MainFunction+0x4c>)
 800fdca:	f7ff fe81 	bl	800fad0 <canIdle_Command>
      break;
 800fdce:	e7f1      	b.n	800fdb4 <canIdle_MainFunction+0x1c>
      nextState = canIdle_Command_Exit(pCanIdleM);
 800fdd0:	4804      	ldr	r0, [pc, #16]	; (800fde4 <canIdle_MainFunction+0x4c>)
 800fdd2:	f7ff ff91 	bl	800fcf8 <canIdle_Command_Exit>
      break;
 800fdd6:	e7ed      	b.n	800fdb4 <canIdle_MainFunction+0x1c>
   switch (nextState)
 800fdd8:	2000      	movs	r0, #0
 800fdda:	e7eb      	b.n	800fdb4 <canIdle_MainFunction+0x1c>
      canIdle_Control(pCanIdleM);
 800fddc:	4801      	ldr	r0, [pc, #4]	; (800fde4 <canIdle_MainFunction+0x4c>)
 800fdde:	f7ff fcd7 	bl	800f790 <canIdle_Control>
}
 800fde2:	e7ec      	b.n	800fdbe <canIdle_MainFunction+0x26>
 800fde4:	20009634 	.word	0x20009634

0800fde8 <canM_getDeviceId>:
 * @param id - Device Can id.
 * 
 * @return the device ID as a uint8_t value.
 */
static uint8_t canM_getDeviceId(tCanM_DeviceId id)
{
 800fde8:	4601      	mov	r1, r0
   uint8_t iter = 0u;
   uint8_t deviceId = CAN_DEV_ID_INVALID;

   for (iter = 0u; iter < CAN_DEV_TOTAL; iter++)
 800fdea:	2000      	movs	r0, #0
 800fdec:	e001      	b.n	800fdf2 <canM_getDeviceId+0xa>
 800fdee:	3001      	adds	r0, #1
 800fdf0:	b2c0      	uxtb	r0, r0
 800fdf2:	2807      	cmp	r0, #7
 800fdf4:	d80a      	bhi.n	800fe0c <canM_getDeviceId+0x24>
   {
      if ((id == canM_Devices[iter].deviceId) && (CAN_DEV_ID_INVALID != canM_Devices[iter].deviceId))
 800fdf6:	f44f 7316 	mov.w	r3, #600	; 0x258
 800fdfa:	fb00 f303 	mul.w	r3, r0, r3
 800fdfe:	4a04      	ldr	r2, [pc, #16]	; (800fe10 <canM_getDeviceId+0x28>)
 800fe00:	5cd3      	ldrb	r3, [r2, r3]
 800fe02:	428b      	cmp	r3, r1
 800fe04:	d1f3      	bne.n	800fdee <canM_getDeviceId+0x6>
 800fe06:	2b0a      	cmp	r3, #10
 800fe08:	d0f1      	beq.n	800fdee <canM_getDeviceId+0x6>
 800fe0a:	e000      	b.n	800fe0e <canM_getDeviceId+0x26>
   uint8_t deviceId = CAN_DEV_ID_INVALID;
 800fe0c:	200a      	movs	r0, #10
         break;
      }
   }

   return (deviceId);
}
 800fe0e:	4770      	bx	lr
 800fe10:	2000016c 	.word	0x2000016c

0800fe14 <canM_N_USData_indication>:
                                    uint32_t size,
                                    CAN_ISO_TP_RESAULT error)
{
   int ret = 0;

   if (N_TIMEOUT_CR == error)
 800fe14:	2b03      	cmp	r3, #3
 800fe16:	d001      	beq.n	800fe1c <canM_N_USData_indication+0x8>
   {
      canM_Module.local.state = CANM_IDLE;
   }

   return ret;
}
 800fe18:	2000      	movs	r0, #0
 800fe1a:	4770      	bx	lr
      canM_Module.local.state = CANM_IDLE;
 800fe1c:	4b02      	ldr	r3, [pc, #8]	; (800fe28 <canM_N_USData_indication+0x14>)
 800fe1e:	2200      	movs	r2, #0
 800fe20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800fe24:	e7f8      	b.n	800fe18 <canM_N_USData_indication+0x4>
 800fe26:	bf00      	nop
 800fe28:	2000142c 	.word	0x2000142c

0800fe2c <canM_N_USData_confirm>:
                                 uint32_t size,
                                 CAN_ISO_TP_RESAULT error)
{
   int ret = 0;

   if (N_TIMEOUT_A == error)
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d001      	beq.n	800fe34 <canM_N_USData_confirm+0x8>
   {
      canM_Module.local.state = CANM_IDLE;
   }

   return ret;
}
 800fe30:	2000      	movs	r0, #0
 800fe32:	4770      	bx	lr
      canM_Module.local.state = CANM_IDLE;
 800fe34:	4b02      	ldr	r3, [pc, #8]	; (800fe40 <canM_N_USData_confirm+0x14>)
 800fe36:	2200      	movs	r2, #0
 800fe38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800fe3c:	e7f8      	b.n	800fe30 <canM_N_USData_confirm+0x4>
 800fe3e:	bf00      	nop
 800fe40:	2000142c 	.word	0x2000142c

0800fe44 <canM_WaitingEvent>:
 * @param module A pointer to a structure of type tCanM_Module, which contains various variables and flags related to the CAN module.
 * 
 * @return the value of the variable "nextState".
 */
static tCanM_State canM_WaitingEvent(tCanM_Module *const module)
{
 800fe44:	b538      	push	{r3, r4, r5, lr}
   tCanM_State nextState = CANM_IDLE;
   uint8_t idx = CAN_DEV_ID_INVALID;

   if (true == module->local.isNewReq)
 800fe46:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 800fe4a:	b19b      	cbz	r3, 800fe74 <canM_WaitingEvent+0x30>
 800fe4c:	4604      	mov	r4, r0
   {
      /* Reset flag. */
      module->local.isNewReq = false;
 800fe4e:	2500      	movs	r5, #0
 800fe50:	f880 5049 	strb.w	r5, [r0, #73]	; 0x49
      module->local.isRecMsg = false;
 800fe54:	f880 504a 	strb.w	r5, [r0, #74]	; 0x4a
      module->output.isNewResp = false;
 800fe58:	f880 511a 	strb.w	r5, [r0, #282]	; 0x11a

      /* Verify the can id before module jump to next state. */
      idx = canM_getDeviceId (module->input.id);
 800fe5c:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800fe60:	f7ff ffc2 	bl	800fde8 <canM_getDeviceId>
      module->local.isFunction = false;
 800fe64:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b

      if (CAN_DEV_ID_INVALID != idx)
 800fe68:	280a      	cmp	r0, #10
 800fe6a:	d005      	beq.n	800fe78 <canM_WaitingEvent+0x34>
      {
         module->local.idx = idx;
 800fe6c:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
         /* Change mode to next state. */
         nextState = CANM_PROCESS_ENTRY;
 800fe70:	2001      	movs	r0, #1
 800fe72:	e000      	b.n	800fe76 <canM_WaitingEvent+0x32>
   tCanM_State nextState = CANM_IDLE;
 800fe74:	2000      	movs	r0, #0
      }
   }

   return (nextState);
}
 800fe76:	bd38      	pop	{r3, r4, r5, pc}
   tCanM_State nextState = CANM_IDLE;
 800fe78:	2000      	movs	r0, #0
 800fe7a:	e7fc      	b.n	800fe76 <canM_WaitingEvent+0x32>

0800fe7c <canM_Process>:
}

static tCanM_State canM_Process (tCanM_Module *const module)
{
   tCanM_State nextState = CANM_PROCESS;
   uint8_t idx = module->local.idx;
 800fe7c:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c

   if (CAN_DEV_ID_INVALID != idx)
 800fe80:	2b0a      	cmp	r3, #10
 800fe82:	d007      	beq.n	800fe94 <canM_Process+0x18>
   {
      /* FIXME - Consider add the code to manage the state timeout, device can not send data and receive data from
      Device can on bus after command sent. */

      if (true == module->local.isRecMsg)
 800fe84:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 800fe88:	b133      	cbz	r3, 800fe98 <canM_Process+0x1c>
      {
         /* Update new state. */
         nextState = CANM_PROCESS_POST;

         /* Reset flag. */
         module->local.isRecMsg = false;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
         nextState = CANM_PROCESS_POST;
 800fe90:	2003      	movs	r0, #3
 800fe92:	4770      	bx	lr
   tCanM_State nextState = CANM_PROCESS;
 800fe94:	2002      	movs	r0, #2
 800fe96:	4770      	bx	lr
 800fe98:	2002      	movs	r0, #2
//      }
   }


   return (nextState);
}
 800fe9a:	4770      	bx	lr

0800fe9c <canM_FDCanSend>:
{
 800fe9c:	b530      	push	{r4, r5, lr}
 800fe9e:	b08b      	sub	sp, #44	; 0x2c
 800fea0:	4605      	mov	r5, r0
 800fea2:	460c      	mov	r4, r1
   FDCAN_TxHeaderTypeDef txHeader = {0};
 800fea4:	2224      	movs	r2, #36	; 0x24
 800fea6:	2100      	movs	r1, #0
 800fea8:	a801      	add	r0, sp, #4
 800feaa:	f001 fe6f 	bl	8011b8c <memset>
   txHeader.Identifier = msg->id.id;
 800feae:	6823      	ldr	r3, [r4, #0]
 800feb0:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800feb4:	9301      	str	r3, [sp, #4]
   txHeader.IdType = (true == msg->id.isExt) ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 800feb6:	78e3      	ldrb	r3, [r4, #3]
 800feb8:	065a      	lsls	r2, r3, #25
 800feba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800febe:	9202      	str	r2, [sp, #8]
   txHeader.DataLength = (FDCAN_DLC_BYTES_0 | ((uint32_t)CANM_DLC_OFF(msg->dlc)));
 800fec0:	7922      	ldrb	r2, [r4, #4]
 800fec2:	0412      	lsls	r2, r2, #16
 800fec4:	9204      	str	r2, [sp, #16]
   txHeader.FDFormat = (true == msg->id.isCANFD) ? FDCAN_FD_CAN : FDCAN_CLASSIC_CAN;
 800fec6:	03da      	lsls	r2, r3, #15
 800fec8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800fecc:	9207      	str	r2, [sp, #28]
   txHeader.TxFrameType = (true == msg->id.isRemote) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 800fece:	059b      	lsls	r3, r3, #22
 800fed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fed4:	9303      	str	r3, [sp, #12]
   if (HAL_OK == HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, (uint8_t *)msg->data))
 800fed6:	1d62      	adds	r2, r4, #5
 800fed8:	a901      	add	r1, sp, #4
 800feda:	4807      	ldr	r0, [pc, #28]	; (800fef8 <canM_FDCanSend+0x5c>)
 800fedc:	f7f1 ff0c 	bl	8001cf8 <HAL_FDCAN_AddMessageToTxFifoQ>
 800fee0:	b928      	cbnz	r0, 800feee <canM_FDCanSend+0x52>
      if (NULL != link->init_info.print_debug)
 800fee2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800fee4:	b133      	cbz	r3, 800fef4 <canM_FDCanSend+0x58>
         link->init_info.print_debug(canM_msg);
 800fee6:	4805      	ldr	r0, [pc, #20]	; (800fefc <canM_FDCanSend+0x60>)
 800fee8:	4798      	blx	r3
      ret = OP_OK;
 800feea:	2000      	movs	r0, #0
 800feec:	e000      	b.n	800fef0 <canM_FDCanSend+0x54>
   int ret = OP_NOK;
 800feee:	2001      	movs	r0, #1
}
 800fef0:	b00b      	add	sp, #44	; 0x2c
 800fef2:	bd30      	pop	{r4, r5, pc}
      ret = OP_OK;
 800fef4:	2000      	movs	r0, #0
   return (ret);
 800fef6:	e7fb      	b.n	800fef0 <canM_FDCanSend+0x54>
 800fef8:	20001a8c 	.word	0x20001a8c
 800fefc:	2000968c 	.word	0x2000968c

0800ff00 <canM_getCurrentTimeInMillis>:
{
 800ff00:	b508      	push	{r3, lr}
   uint32_t milliseconds = (uint32_t)(xTaskGetTickCount()/portTICK_PERIOD_MS);
 800ff02:	f7f9 f9ed 	bl	80092e0 <xTaskGetTickCount>
}
 800ff06:	bd08      	pop	{r3, pc}

0800ff08 <canM_pollEvent>:
{
 800ff08:	b510      	push	{r4, lr}
   uint8_t idx = module->input.id;
 800ff0a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
      currTimeMs = canM_getCurrentTimeInMillis();
 800ff0e:	f7ff fff7 	bl	800ff00 <canM_getCurrentTimeInMillis>
 800ff12:	4601      	mov	r1, r0
      link = (can_iso_tp_link_t_p)&canM_Devices[idx].local;
 800ff14:	f44f 7316 	mov.w	r3, #600	; 0x258
 800ff18:	fb03 f404 	mul.w	r4, r3, r4
 800ff1c:	3438      	adds	r4, #56	; 0x38
 800ff1e:	4b03      	ldr	r3, [pc, #12]	; (800ff2c <canM_pollEvent+0x24>)
 800ff20:	441c      	add	r4, r3
      iso_can_tp_poll(link, currTimeMs);
 800ff22:	1d20      	adds	r0, r4, #4
 800ff24:	f7fb f810 	bl	800af48 <iso_can_tp_poll>
}
 800ff28:	bd10      	pop	{r4, pc}
 800ff2a:	bf00      	nop
 800ff2c:	2000016c 	.word	0x2000016c

0800ff30 <canM_ProcessEntry>:
{
 800ff30:	b508      	push	{r3, lr}
   uint8_t idx = module->local.idx;
 800ff32:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   uint8_t isFunctionId = (uint8_t)module->local.isFunction;
 800ff36:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
   if (CAN_DEV_ID_INVALID != idx)
 800ff3a:	2b0a      	cmp	r3, #10
 800ff3c:	d101      	bne.n	800ff42 <canM_ProcessEntry+0x12>
   tCanM_State nextState = CANM_PROCESS_ENTRY;
 800ff3e:	2001      	movs	r0, #1
}
 800ff40:	bd08      	pop	{r3, pc}
      link = (can_iso_tp_link_t_p)&canM_Devices[idx].local;
 800ff42:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ff46:	fb02 fc03 	mul.w	ip, r2, r3
 800ff4a:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 800ff4e:	4b05      	ldr	r3, [pc, #20]	; (800ff64 <canM_ProcessEntry+0x34>)
 800ff50:	449c      	add	ip, r3
      if (OP_OK != iso_can_tp_N_USData_request (link, isFunctionId, (uint8_t *)module->input.dataReq, module->input.size))
 800ff52:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800ff56:	1d02      	adds	r2, r0, #4
 800ff58:	f10c 0004 	add.w	r0, ip, #4
 800ff5c:	f7fb f930 	bl	800b1c0 <iso_can_tp_N_USData_request>
      nextState = CANM_PROCESS;
 800ff60:	2002      	movs	r0, #2
 800ff62:	e7ed      	b.n	800ff40 <canM_ProcessEntry+0x10>
 800ff64:	2000016c 	.word	0x2000016c

0800ff68 <canM_ProcessPost>:

static tCanM_State canM_ProcessPost(tCanM_Module *const module)
{
 800ff68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff6a:	4605      	mov	r5, r0
   tCanM_State nextState = CANM_PROCESS_POST;
   can_iso_tp_link_t_p link = NULL;
   uint8_t idx = module->local.idx;
 800ff6c:	f890 604c 	ldrb.w	r6, [r0, #76]	; 0x4c

   /* Get the link and config of device. */
   link = (can_iso_tp_link_t_p)&canM_Devices[idx].local;
 800ff70:	f44f 7416 	mov.w	r4, #600	; 0x258
 800ff74:	fb06 f404 	mul.w	r4, r6, r4
 800ff78:	3438      	adds	r4, #56	; 0x38
 800ff7a:	4b20      	ldr	r3, [pc, #128]	; (800fffc <canM_ProcessPost+0x94>)
 800ff7c:	441c      	add	r4, r3
 800ff7e:	3404      	adds	r4, #4

   if (OP_OK == iso_can_tp_L_Data_indication(link, (struct CAN_msg *)&module->local.canResp))
 800ff80:	f100 0790 	add.w	r7, r0, #144	; 0x90
 800ff84:	4639      	mov	r1, r7
 800ff86:	4620      	mov	r0, r4
 800ff88:	f7fb f8a4 	bl	800b0d4 <iso_can_tp_L_Data_indication>
 800ff8c:	b108      	cbz	r0, 800ff92 <canM_ProcessPost+0x2a>

   /* Back to IDLE state. */
   nextState = CANM_IDLE;

   return (nextState);
}
 800ff8e:	2000      	movs	r0, #0
 800ff90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      iso_can_tp_L_Data_confirm(link, (struct CAN_msg *)&module->local.canResp, N_OK);
 800ff92:	2200      	movs	r2, #0
 800ff94:	4639      	mov	r1, r7
 800ff96:	4620      	mov	r0, r4
 800ff98:	f7fb f820 	bl	800afdc <iso_can_tp_L_Data_confirm>
      taskENTER_CRITICAL();
 800ff9c:	f7f9 fffa 	bl	8009f94 <vPortEnterCritical>
      memcpy((uint8_t *)module->output.dataResp, (uint8_t *)module->local.canResp.data, dlc2len(module->local.canResp.dlc));
 800ffa0:	f105 04d8 	add.w	r4, r5, #216	; 0xd8
 800ffa4:	f105 0795 	add.w	r7, r5, #149	; 0x95
 800ffa8:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
 800ffac:	f7fa fef0 	bl	800ad90 <dlc2len>
 800ffb0:	4602      	mov	r2, r0
 800ffb2:	4639      	mov	r1, r7
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	f001 fea7 	bl	8011d08 <memcpy>
      module->output.size = dlc2len(module->local.canResp.dlc);
 800ffba:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
 800ffbe:	f7fa fee7 	bl	800ad90 <dlc2len>
 800ffc2:	f885 0118 	strb.w	r0, [r5, #280]	; 0x118
      module->output.id = canM_Devices[idx].deviceId;
 800ffc6:	f44f 7416 	mov.w	r4, #600	; 0x258
 800ffca:	fb04 f306 	mul.w	r3, r4, r6
 800ffce:	4a0b      	ldr	r2, [pc, #44]	; (800fffc <canM_ProcessPost+0x94>)
 800ffd0:	5cd3      	ldrb	r3, [r2, r3]
 800ffd2:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
      module->output.isNewResp = true;
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	f885 311a 	strb.w	r3, [r5, #282]	; 0x11a
      taskEXIT_CRITICAL();
 800ffdc:	f7f9 fffc 	bl	8009fd8 <vPortExitCritical>
      if (NULL != module->dev[idx].funIrq)
 800ffe0:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 800ffe4:	fb04 3306 	mla	r3, r4, r6, r3
 800ffe8:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d0ce      	beq.n	800ff8e <canM_ProcessPost+0x26>
         module->dev[idx].funIrq(module->local.dataResp, module->output.size);
 800fff0:	f895 1118 	ldrb.w	r1, [r5, #280]	; 0x118
 800fff4:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 800fff8:	4798      	blx	r3
 800fffa:	e7c8      	b.n	800ff8e <canM_ProcessPost+0x26>
 800fffc:	2000016c 	.word	0x2000016c

08010000 <canM_Start>:

   return ret;
}

bool canM_Start (void)
{
 8010000:	b510      	push	{r4, lr}
   bool ret = false;
   tCanM_Module * pModule = (tCanM_Module *)&canM_Module;

   /* Enter critical section. */
   taskENTER_CRITICAL();
 8010002:	f7f9 ffc7 	bl	8009f94 <vPortEnterCritical>

   /* Active notify when receive new msg. */
   HAL_FDCAN_ActivateNotification (pModule->config.phfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8010006:	4c0b      	ldr	r4, [pc, #44]	; (8010034 <canM_Start+0x34>)
 8010008:	2200      	movs	r2, #0
 801000a:	2101      	movs	r1, #1
 801000c:	6820      	ldr	r0, [r4, #0]
 801000e:	f7f1 ffcd 	bl	8001fac <HAL_FDCAN_ActivateNotification>

   /* Start FDCAN core. */
   if (HAL_OK == HAL_FDCAN_Start (pModule->config.phfdcan))
 8010012:	6820      	ldr	r0, [r4, #0]
 8010014:	f7f1 fe14 	bl	8001c40 <HAL_FDCAN_Start>
 8010018:	b948      	cbnz	r0, 801002e <canM_Start+0x2e>
   {
      /* Reset state of module to Idle. */
      pModule->local.isNewReq = false;
 801001a:	2200      	movs	r2, #0
 801001c:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
      pModule->local.state = CANM_IDLE;
 8010020:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48

      ret = true;
 8010024:	2401      	movs	r4, #1
   }

   /* Exit critical section. */
   taskEXIT_CRITICAL();
 8010026:	f7f9 ffd7 	bl	8009fd8 <vPortExitCritical>

   return (ret);
}
 801002a:	4620      	mov	r0, r4
 801002c:	bd10      	pop	{r4, pc}
   bool ret = false;
 801002e:	2400      	movs	r4, #0
 8010030:	e7f9      	b.n	8010026 <canM_Start+0x26>
 8010032:	bf00      	nop
 8010034:	2000142c 	.word	0x2000142c

08010038 <canM_Stop>:

bool canM_Stop (void)
{
 8010038:	b510      	push	{r4, lr}
   bool ret = false;
   tCanM_Module * pModule = (tCanM_Module *)&canM_Module;

   /* Enter critical section. */
   taskENTER_CRITICAL();
 801003a:	f7f9 ffab 	bl	8009f94 <vPortEnterCritical>

   if (HAL_OK == HAL_FDCAN_Stop (pModule->config.phfdcan))
 801003e:	4b09      	ldr	r3, [pc, #36]	; (8010064 <canM_Stop+0x2c>)
 8010040:	6818      	ldr	r0, [r3, #0]
 8010042:	f7f1 fe14 	bl	8001c6e <HAL_FDCAN_Stop>
 8010046:	b950      	cbnz	r0, 801005e <canM_Stop+0x26>
   {
      /* Reset state of module to Idle. */
      pModule->local.isNewReq = false;
 8010048:	4b06      	ldr	r3, [pc, #24]	; (8010064 <canM_Stop+0x2c>)
 801004a:	2200      	movs	r2, #0
 801004c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
      pModule->local.state = CANM_IDLE;
 8010050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

      ret = true;
 8010054:	2401      	movs	r4, #1
   }

   /* Exit critical section. */
   taskEXIT_CRITICAL();
 8010056:	f7f9 ffbf 	bl	8009fd8 <vPortExitCritical>

   return (ret);
}
 801005a:	4620      	mov	r0, r4
 801005c:	bd10      	pop	{r4, pc}
   bool ret = false;
 801005e:	2400      	movs	r4, #0
 8010060:	e7f9      	b.n	8010056 <canM_Stop+0x1e>
 8010062:	bf00      	nop
 8010064:	2000142c 	.word	0x2000142c

08010068 <canM_SetNewBaudrate>:
{
 8010068:	b570      	push	{r4, r5, r6, lr}
   if (pModule->local.state == CANM_IDLE)
 801006a:	4b1d      	ldr	r3, [pc, #116]	; (80100e0 <canM_SetNewBaudrate+0x78>)
 801006c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010070:	2b00      	cmp	r3, #0
 8010072:	d12f      	bne.n	80100d4 <canM_SetNewBaudrate+0x6c>
 8010074:	4604      	mov	r4, r0
      switch (newBaudrateMbps)
 8010076:	2808      	cmp	r0, #8
 8010078:	bf94      	ite	ls
 801007a:	2600      	movls	r6, #0
 801007c:	2601      	movhi	r6, #1
 801007e:	bb66      	cbnz	r6, 80100da <canM_SetNewBaudrate+0x72>
 8010080:	f44f 709b 	mov.w	r0, #310	; 0x136
 8010084:	40e0      	lsrs	r0, r4
 8010086:	f010 0501 	ands.w	r5, r0, #1
 801008a:	d024      	beq.n	80100d6 <canM_SetNewBaudrate+0x6e>
         taskENTER_CRITICAL();
 801008c:	f7f9 ff82 	bl	8009f94 <vPortEnterCritical>
         canM_Stop();
 8010090:	f7ff ffd2 	bl	8010038 <canM_Stop>
         pModule->config.phfdcan->Init.NominalPrescaler = pBusTiming[newBaudrateMbps].nominal.prescaler;
 8010094:	0122      	lsls	r2, r4, #4
 8010096:	4b13      	ldr	r3, [pc, #76]	; (80100e4 <canM_SetNewBaudrate+0x7c>)
 8010098:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801009c:	4910      	ldr	r1, [pc, #64]	; (80100e0 <canM_SetNewBaudrate+0x78>)
 801009e:	6808      	ldr	r0, [r1, #0]
 80100a0:	5a9b      	ldrh	r3, [r3, r2]
 80100a2:	6143      	str	r3, [r0, #20]
         pModule->config.phfdcan->Init.NominalSyncJumpWidth = pBusTiming[newBaudrateMbps].nominal.syncJumpWidth;
 80100a4:	8863      	ldrh	r3, [r4, #2]
 80100a6:	6183      	str	r3, [r0, #24]
         pModule->config.phfdcan->Init.NominalTimeSeg1 = pBusTiming[newBaudrateMbps].nominal.timeSeq1;
 80100a8:	88a3      	ldrh	r3, [r4, #4]
 80100aa:	61c3      	str	r3, [r0, #28]
         pModule->config.phfdcan->Init.NominalTimeSeg2 = pBusTiming[newBaudrateMbps].nominal.timeSeq2;
 80100ac:	88e3      	ldrh	r3, [r4, #6]
 80100ae:	6203      	str	r3, [r0, #32]
         pModule->config.phfdcan->Init.DataPrescaler = pBusTiming[newBaudrateMbps].data.prescaler;
 80100b0:	8923      	ldrh	r3, [r4, #8]
 80100b2:	6243      	str	r3, [r0, #36]	; 0x24
         pModule->config.phfdcan->Init.DataSyncJumpWidth = pBusTiming[newBaudrateMbps].data.syncJumpWidth;
 80100b4:	8963      	ldrh	r3, [r4, #10]
 80100b6:	6283      	str	r3, [r0, #40]	; 0x28
         pModule->config.phfdcan->Init.DataTimeSeg1 = pBusTiming[newBaudrateMbps].data.timeSeq1;
 80100b8:	89a3      	ldrh	r3, [r4, #12]
 80100ba:	62c3      	str	r3, [r0, #44]	; 0x2c
         pModule->config.phfdcan->Init.DataTimeSeg2 = pBusTiming[newBaudrateMbps].data.timeSeq2;
 80100bc:	89e3      	ldrh	r3, [r4, #14]
 80100be:	6303      	str	r3, [r0, #48]	; 0x30
         if (HAL_OK != HAL_FDCAN_Init(pModule->config.phfdcan))
 80100c0:	f7f1 fc06 	bl	80018d0 <HAL_FDCAN_Init>
 80100c4:	b900      	cbnz	r0, 80100c8 <canM_SetNewBaudrate+0x60>
 80100c6:	462e      	mov	r6, r5
         canM_Start();
 80100c8:	f7ff ff9a 	bl	8010000 <canM_Start>
         taskEXIT_CRITICAL();
 80100cc:	f7f9 ff84 	bl	8009fd8 <vPortExitCritical>
 80100d0:	4635      	mov	r5, r6
 80100d2:	e000      	b.n	80100d6 <canM_SetNewBaudrate+0x6e>
   bool ret = false;
 80100d4:	2500      	movs	r5, #0
}
 80100d6:	4628      	mov	r0, r5
 80100d8:	bd70      	pop	{r4, r5, r6, pc}
      switch (newBaudrateMbps)
 80100da:	2500      	movs	r5, #0
 80100dc:	e7fb      	b.n	80100d6 <canM_SetNewBaudrate+0x6e>
 80100de:	bf00      	nop
 80100e0:	2000142c 	.word	0x2000142c
 80100e4:	08013894 	.word	0x08013894

080100e8 <canM_SetAddrTxRxDev>:

void canM_SetAddrTxRxDev (tCanM_DeviceId id, uint16_t addrTx, uint16_t addrRx)
{
   uint8_t idx = id;

   if (CAN_DEV_ID_INVALID != idx)
 80100e8:	280a      	cmp	r0, #10
 80100ea:	d010      	beq.n	801010e <canM_SetAddrTxRxDev+0x26>
{
 80100ec:	b410      	push	{r4}
   {
      canM_Devices[idx].local.init_info.tx_id.id = addrTx;
 80100ee:	4b08      	ldr	r3, [pc, #32]	; (8010110 <canM_SetAddrTxRxDev+0x28>)
 80100f0:	f44f 7416 	mov.w	r4, #600	; 0x258
 80100f4:	fb04 3300 	mla	r3, r4, r0, r3
 80100f8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80100fa:	f361 041c 	bfi	r4, r1, #0, #29
 80100fe:	641c      	str	r4, [r3, #64]	; 0x40
      canM_Devices[idx].local.init_info.rx_id.id = addrRx;
 8010100:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8010102:	f362 011c 	bfi	r1, r2, #0, #29
 8010106:	6459      	str	r1, [r3, #68]	; 0x44
   }
}
 8010108:	f85d 4b04 	ldr.w	r4, [sp], #4
 801010c:	4770      	bx	lr
 801010e:	4770      	bx	lr
 8010110:	2000016c 	.word	0x2000016c

08010114 <canM_GetAddrTxRxDev>:

void canM_GetAddrTxRxDev(tCanM_DeviceId id, uint16_t * addrTx, uint16_t * addrRx)
{
	uint8_t idx = id;

	if (CAN_DEV_ID_INVALID != idx)
 8010114:	280a      	cmp	r0, #10
 8010116:	d00a      	beq.n	801012e <canM_GetAddrTxRxDev+0x1a>
	{
	  *addrTx = (uint16_t)canM_Devices[idx].local.init_info.tx_id.id;
 8010118:	4b05      	ldr	r3, [pc, #20]	; (8010130 <canM_GetAddrTxRxDev+0x1c>)
 801011a:	f44f 7c16 	mov.w	ip, #600	; 0x258
 801011e:	fb0c 3300 	mla	r3, ip, r0, r3
 8010122:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
 8010126:	8008      	strh	r0, [r1, #0]
	  *addrRx = (uint16_t)canM_Devices[idx].local.init_info.rx_id.id;
 8010128:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801012c:	8013      	strh	r3, [r2, #0]
	}
}
 801012e:	4770      	bx	lr
 8010130:	2000016c 	.word	0x2000016c

08010134 <canM_Send>:

bool canM_Send (tCanM_DeviceId id, const uint8_t *payload, uint8_t size)
{
 8010134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bool ret = false;

   if (CANM_IDLE == canM_Module.local.state)
 8010136:	4b0d      	ldr	r3, [pc, #52]	; (801016c <canM_Send+0x38>)
 8010138:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801013c:	b10b      	cbz	r3, 8010142 <canM_Send+0xe>
   bool ret = false;
 801013e:	2000      	movs	r0, #0

      ret = true;
   }

   return (ret);
}
 8010140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010142:	4606      	mov	r6, r0
 8010144:	460d      	mov	r5, r1
 8010146:	4614      	mov	r4, r2
      taskENTER_CRITICAL();
 8010148:	f7f9 ff24 	bl	8009f94 <vPortEnterCritical>
      canM_Module.input.id = id;
 801014c:	4f07      	ldr	r7, [pc, #28]	; (801016c <canM_Send+0x38>)
 801014e:	f887 6045 	strb.w	r6, [r7, #69]	; 0x45
      canM_Module.input.size = size;
 8010152:	f887 4044 	strb.w	r4, [r7, #68]	; 0x44
      memcpy((void *)canM_Module.input.dataReq, (void *)payload, size);
 8010156:	4622      	mov	r2, r4
 8010158:	4629      	mov	r1, r5
 801015a:	1d38      	adds	r0, r7, #4
 801015c:	f001 fdd4 	bl	8011d08 <memcpy>
      taskEXIT_CRITICAL();
 8010160:	f7f9 ff3a 	bl	8009fd8 <vPortExitCritical>
      canM_Module.local.isNewReq = true;
 8010164:	2001      	movs	r0, #1
 8010166:	f887 0049 	strb.w	r0, [r7, #73]	; 0x49
      ret = true;
 801016a:	e7e9      	b.n	8010140 <canM_Send+0xc>
 801016c:	2000142c 	.word	0x2000142c

08010170 <canM_SendToAddr>:

bool canM_SendToAddr (uint32_t addrTx, const uint8_t * payload, uint8_t size)
{
 8010170:	b570      	push	{r4, r5, r6, lr}
 8010172:	b092      	sub	sp, #72	; 0x48
 8010174:	4606      	mov	r6, r0
 8010176:	460d      	mov	r5, r1
 8010178:	4614      	mov	r4, r2
   bool ret = false;

   struct CAN_msg msg = {
 801017a:	2248      	movs	r2, #72	; 0x48
 801017c:	2100      	movs	r1, #0
 801017e:	4668      	mov	r0, sp
 8010180:	f001 fd04 	bl	8011b8c <memset>
 8010184:	9b00      	ldr	r3, [sp, #0]
 8010186:	f366 031c 	bfi	r3, r6, #0, #29
 801018a:	9300      	str	r3, [sp, #0]
 801018c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010194:	f88d 3003 	strb.w	r3, [sp, #3]
      .id.id = addrTx,
      .id.isCANFD = true,
      .id.isExt = false,
      .id.isRemote = false,
      .dlc = lenToMinDlc(size),
 8010198:	4620      	mov	r0, r4
 801019a:	f7fa fe01 	bl	800ada0 <lenToMinDlc>
   struct CAN_msg msg = {
 801019e:	f88d 0004 	strb.w	r0, [sp, #4]
   };

   memcpy((uint8_t *)msg.data, (uint8_t *)payload, size);
 80101a2:	4622      	mov	r2, r4
 80101a4:	4629      	mov	r1, r5
 80101a6:	f10d 0005 	add.w	r0, sp, #5
 80101aa:	f001 fdad 	bl	8011d08 <memcpy>

   if (OP_OK == canM_FDCanSend (NULL, (struct CAN_msg *)&msg))
 80101ae:	4669      	mov	r1, sp
 80101b0:	2000      	movs	r0, #0
 80101b2:	f7ff fe73 	bl	800fe9c <canM_FDCanSend>
 80101b6:	b110      	cbz	r0, 80101be <canM_SendToAddr+0x4e>
   bool ret = false;
 80101b8:	2000      	movs	r0, #0
   {
      ret = true;
   }

   return (ret);
}
 80101ba:	b012      	add	sp, #72	; 0x48
 80101bc:	bd70      	pop	{r4, r5, r6, pc}
      ret = true;
 80101be:	2001      	movs	r0, #1
 80101c0:	e7fb      	b.n	80101ba <canM_SendToAddr+0x4a>
	...

080101c4 <canM_Read>:

bool canM_Read (tCanM_DeviceId * const id, const uint8_t *payload, uint8_t *size)
{
 80101c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bool ret = false;
   uint8_t lenDataRet = 0u;

   if (true == canM_Module.output.isNewResp)
 80101c8:	4b0d      	ldr	r3, [pc, #52]	; (8010200 <canM_Read+0x3c>)
 80101ca:	f893 511a 	ldrb.w	r5, [r3, #282]	; 0x11a
 80101ce:	b915      	cbnz	r5, 80101d6 <canM_Read+0x12>

      ret = true;
   }

   return ret;
}
 80101d0:	4628      	mov	r0, r5
 80101d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101d6:	4606      	mov	r6, r0
 80101d8:	4608      	mov	r0, r1
 80101da:	4614      	mov	r4, r2
      lenDataRet = canM_Module.output.size;
 80101dc:	461f      	mov	r7, r3
 80101de:	f893 8118 	ldrb.w	r8, [r3, #280]	; 0x118
      memcpy((uint8_t *)payload, (uint8_t *)canM_Module.output.dataResp, lenDataRet);
 80101e2:	4642      	mov	r2, r8
 80101e4:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 80101e8:	f001 fd8e 	bl	8011d08 <memcpy>
      *size = lenDataRet;
 80101ec:	f884 8000 	strb.w	r8, [r4]
      canM_Module.output.isNewResp = false;
 80101f0:	2300      	movs	r3, #0
 80101f2:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
      *id = canM_Module.output.id;
 80101f6:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80101fa:	7033      	strb	r3, [r6, #0]
      ret = true;
 80101fc:	e7e8      	b.n	80101d0 <canM_Read+0xc>
 80101fe:	bf00      	nop
 8010200:	2000142c 	.word	0x2000142c

08010204 <canM_ReadAddr>:


bool canM_ReadAddr (uint32_t * const id, const uint8_t *payload, uint8_t *size)
{
 8010204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bool ret = false;
   uint8_t lenDataRet = 0u;

   if (true == canM_Module.local.isRecMsg)
 8010208:	4b10      	ldr	r3, [pc, #64]	; (801024c <canM_ReadAddr+0x48>)
 801020a:	f893 604a 	ldrb.w	r6, [r3, #74]	; 0x4a
 801020e:	b916      	cbnz	r6, 8010216 <canM_ReadAddr+0x12>

      ret = true;
   }

   return ret;
}
 8010210:	4630      	mov	r0, r6
 8010212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010216:	4607      	mov	r7, r0
 8010218:	460d      	mov	r5, r1
 801021a:	4614      	mov	r4, r2
      lenDataRet = dlc2len(canM_Module.local.canResp.dlc);
 801021c:	4699      	mov	r9, r3
 801021e:	f893 0094 	ldrb.w	r0, [r3, #148]	; 0x94
 8010222:	f7fa fdb5 	bl	800ad90 <dlc2len>
 8010226:	4680      	mov	r8, r0
      memcpy((uint8_t *)payload, (uint8_t *)canM_Module.local.canResp.data, lenDataRet);
 8010228:	4602      	mov	r2, r0
 801022a:	f109 0195 	add.w	r1, r9, #149	; 0x95
 801022e:	4628      	mov	r0, r5
 8010230:	f001 fd6a 	bl	8011d08 <memcpy>
      canM_Module.local.isRecMsg = false;
 8010234:	2300      	movs	r3, #0
 8010236:	f889 304a 	strb.w	r3, [r9, #74]	; 0x4a
      *id = canM_Module.local.canResp.id.id;
 801023a:	f8d9 3090 	ldr.w	r3, [r9, #144]	; 0x90
 801023e:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8010242:	603b      	str	r3, [r7, #0]
      *size = lenDataRet;
 8010244:	f884 8000 	strb.w	r8, [r4]
      ret = true;
 8010248:	e7e2      	b.n	8010210 <canM_ReadAddr+0xc>
 801024a:	bf00      	nop
 801024c:	2000142c 	.word	0x2000142c

08010250 <canM_Init>:

   return (ret);
}

void canM_Init (tCanM_Module *const module)
{
 8010250:	b538      	push	{r3, r4, r5, lr}
 8010252:	4605      	mov	r5, r0
   uint8_t iter = 0u;

   /* Enable the CAN TP layer. */
   for (iter = 0u; iter < CAN_DEV_TOTAL; iter++)
 8010254:	2400      	movs	r4, #0
 8010256:	e009      	b.n	801026c <canM_Init+0x1c>
         canM_Module.dev[iter].config.rx_buff = module->local.dataResp;
         canM_Module.dev[iter].config.rx_buff_len = CANM_RX_SIZE;
      }

      /* Link configuration of each device on bus can. */
      iso_can_tp_create(&canM_Module.dev[iter].local, &canM_Module.dev[iter].config);
 8010258:	4a19      	ldr	r2, [pc, #100]	; (80102c0 <canM_Init+0x70>)
 801025a:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
 801025e:	4418      	add	r0, r3
 8010260:	1d01      	adds	r1, r0, #4
 8010262:	303c      	adds	r0, #60	; 0x3c
 8010264:	f7fa fdaa 	bl	800adbc <iso_can_tp_create>
   for (iter = 0u; iter < CAN_DEV_TOTAL; iter++)
 8010268:	3401      	adds	r4, #1
 801026a:	b2e4      	uxtb	r4, r4
 801026c:	2c07      	cmp	r4, #7
 801026e:	d823      	bhi.n	80102b8 <canM_Init+0x68>
      if (false != canM_Module.dev[iter].isActive)
 8010270:	4b13      	ldr	r3, [pc, #76]	; (80102c0 <canM_Init+0x70>)
 8010272:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8010276:	f44f 7316 	mov.w	r3, #600	; 0x258
 801027a:	fb04 f303 	mul.w	r3, r4, r3
 801027e:	441a      	add	r2, r3
 8010280:	7851      	ldrb	r1, [r2, #1]
 8010282:	2900      	cmp	r1, #0
 8010284:	d0e8      	beq.n	8010258 <canM_Init+0x8>
         canM_Module.dev[iter].config.L_Data_request = canM_FDCanSend;
 8010286:	490f      	ldr	r1, [pc, #60]	; (80102c4 <canM_Init+0x74>)
 8010288:	6151      	str	r1, [r2, #20]
         canM_Module.dev[iter].config.N_USData_indication = (void *)canM_N_USData_indication;
 801028a:	4a0d      	ldr	r2, [pc, #52]	; (80102c0 <canM_Init+0x70>)
 801028c:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
 8010290:	4419      	add	r1, r3
 8010292:	480d      	ldr	r0, [pc, #52]	; (80102c8 <canM_Init+0x78>)
 8010294:	6188      	str	r0, [r1, #24]
         canM_Module.dev[iter].config.N_USData_confirm = (void *)canM_N_USData_confirm;
 8010296:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
 801029a:	4419      	add	r1, r3
 801029c:	480b      	ldr	r0, [pc, #44]	; (80102cc <canM_Init+0x7c>)
 801029e:	61c8      	str	r0, [r1, #28]
         canM_Module.dev[iter].config.rx_buff = module->local.dataResp;
 80102a0:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
 80102a4:	4419      	add	r1, r3
 80102a6:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 80102aa:	6208      	str	r0, [r1, #32]
         canM_Module.dev[iter].config.rx_buff_len = CANM_RX_SIZE;
 80102ac:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
 80102b0:	441a      	add	r2, r3
 80102b2:	2140      	movs	r1, #64	; 0x40
 80102b4:	6251      	str	r1, [r2, #36]	; 0x24
 80102b6:	e7cf      	b.n	8010258 <canM_Init+0x8>
   }

   /* Start CanM. */
   canM_Start();
 80102b8:	f7ff fea2 	bl	8010000 <canM_Start>
}
 80102bc:	bd38      	pop	{r3, r4, r5, pc}
 80102be:	bf00      	nop
 80102c0:	2000142c 	.word	0x2000142c
 80102c4:	0800fe9d 	.word	0x0800fe9d
 80102c8:	0800fe15 	.word	0x0800fe15
 80102cc:	0800fe2d 	.word	0x0800fe2d

080102d0 <canM_MainFunction>:
	return ret;
}


void canM_MainFunction(tCanM_Module *const module)
{
 80102d0:	b538      	push	{r3, r4, r5, lr}
 80102d2:	4604      	mov	r4, r0
   tCanM_State nextState = module->local.state;
 80102d4:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48

   canM_pollEvent(module);
 80102d8:	f7ff fe16 	bl	800ff08 <canM_pollEvent>

   //cdc_printf("@%d: canM stage: %d\r\n",HAL_GetTick(), module->local.state);
   //cdc_printf("@%d: canM stage: %d\r\n",osKernelSysTick(), module->local.state);
   //if (nextState!= CANM_IDLE) cdc_printf("[can2Master]@%u:\t %s\n",GetCycleCount(), tCanM_State_StatesName(nextState));
   switch (module->local.state)
 80102dc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80102e0:	2b03      	cmp	r3, #3
 80102e2:	d807      	bhi.n	80102f4 <canM_MainFunction+0x24>
 80102e4:	e8df f003 	tbb	[pc, r3]
 80102e8:	130e0902 	.word	0x130e0902
   {
   case CANM_IDLE:
      nextState = canM_WaitingEvent(module);
 80102ec:	4620      	mov	r0, r4
 80102ee:	f7ff fda9 	bl	800fe44 <canM_WaitingEvent>
 80102f2:	4605      	mov	r5, r0

   default:
      break;
   }

   module->local.state = nextState;
 80102f4:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
 80102f8:	bd38      	pop	{r3, r4, r5, pc}
      nextState = canM_ProcessEntry(module);
 80102fa:	4620      	mov	r0, r4
 80102fc:	f7ff fe18 	bl	800ff30 <canM_ProcessEntry>
 8010300:	4605      	mov	r5, r0
      break;
 8010302:	e7f7      	b.n	80102f4 <canM_MainFunction+0x24>
      nextState = canM_Process(module);
 8010304:	4620      	mov	r0, r4
 8010306:	f7ff fdb9 	bl	800fe7c <canM_Process>
 801030a:	4605      	mov	r5, r0
      break;
 801030c:	e7f2      	b.n	80102f4 <canM_MainFunction+0x24>
      nextState = canM_ProcessPost(module);
 801030e:	4620      	mov	r0, r4
 8010310:	f7ff fe2a 	bl	800ff68 <canM_ProcessPost>
 8010314:	4605      	mov	r5, r0
      break;
 8010316:	e7ed      	b.n	80102f4 <canM_MainFunction+0x24>

08010318 <HAL_FDCAN_RxFifo0Callback>:
 * 
 * @param hfdcan The parameter `hfdcan` is a pointer to the FDCAN handle structure. It is used to identify the FDCAN peripheral and its associated configuration and status.
 * @param RxFifo0ITs RxFifo0ITs is a bitmask that indicates which interrupt flags are set for the Rx FIFO 0. The function checks if the FDCAN_IT_RX_FIFO0_NEW_MESSAGE flag is set in the bitmask to determine if a new message has been received in Rx FIFO 0.
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8010318:	b530      	push	{r4, r5, lr}
 801031a:	b08b      	sub	sp, #44	; 0x2c
 801031c:	4605      	mov	r5, r0
 801031e:	460c      	mov	r4, r1
   FDCAN_RxHeaderTypeDef rxHeader = {0u};
 8010320:	2228      	movs	r2, #40	; 0x28
 8010322:	2100      	movs	r1, #0
 8010324:	4668      	mov	r0, sp
 8010326:	f001 fc31 	bl	8011b8c <memset>
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;

   if (FDCAN_IT_RX_FIFO0_NEW_MESSAGE == (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE))   {
 801032a:	f014 0f01 	tst.w	r4, #1
 801032e:	d101      	bne.n	8010334 <HAL_FDCAN_RxFifo0Callback+0x1c>
      /* Exit critical section. */
      taskEXIT_CRITICAL_FROM_ISR(xHigherPriorityTaskWoken);
      if(0) cdc_printf("HAL_FDCAN_RxFifo0Callback @%u\r\n", GetCycleCount());
   }
   return;
}
 8010330:	b00b      	add	sp, #44	; 0x2c
 8010332:	bd30      	pop	{r4, r5, pc}
	__asm volatile
 8010334:	f3ef 8311 	mrs	r3, BASEPRI
 8010338:	f04f 0250 	mov.w	r2, #80	; 0x50
 801033c:	f382 8811 	msr	BASEPRI, r2
 8010340:	f3bf 8f6f 	isb	sy
 8010344:	f3bf 8f4f 	dsb	sy
      if (HAL_OK == HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, (FDCAN_RxHeaderTypeDef *)&rxHeader, (uint8_t *)canM_Module.local.canResp.data))
 8010348:	4b1e      	ldr	r3, [pc, #120]	; (80103c4 <HAL_FDCAN_RxFifo0Callback+0xac>)
 801034a:	466a      	mov	r2, sp
 801034c:	2140      	movs	r1, #64	; 0x40
 801034e:	4628      	mov	r0, r5
 8010350:	f7f1 fd98 	bl	8001e84 <HAL_FDCAN_GetRxMessage>
 8010354:	2800      	cmp	r0, #0
 8010356:	d130      	bne.n	80103ba <HAL_FDCAN_RxFifo0Callback+0xa2>
         canM_Module.local.canResp.id.id = rxHeader.Identifier;
 8010358:	4b1b      	ldr	r3, [pc, #108]	; (80103c8 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 801035a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801035e:	9900      	ldr	r1, [sp, #0]
 8010360:	f361 021c 	bfi	r2, r1, #0, #29
 8010364:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         canM_Module.local.canResp.id.isCANFD = (FDCAN_FD_CAN == rxHeader.FDFormat) ? true : false;
 8010368:	9a06      	ldr	r2, [sp, #24]
 801036a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 801036e:	bf14      	ite	ne
 8010370:	2200      	movne	r2, #0
 8010372:	2201      	moveq	r2, #1
 8010374:	f893 1093 	ldrb.w	r1, [r3, #147]	; 0x93
 8010378:	f362 1186 	bfi	r1, r2, #6, #1
 801037c:	f883 1093 	strb.w	r1, [r3, #147]	; 0x93
         canM_Module.local.canResp.id.isExt = (FDCAN_EXTENDED_ID == rxHeader.IdType) ? true : false;
 8010380:	9a01      	ldr	r2, [sp, #4]
 8010382:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8010386:	bf14      	ite	ne
 8010388:	2200      	movne	r2, #0
 801038a:	2201      	moveq	r2, #1
 801038c:	b2c9      	uxtb	r1, r1
 801038e:	f362 1145 	bfi	r1, r2, #5, #1
 8010392:	f883 1093 	strb.w	r1, [r3, #147]	; 0x93
         canM_Module.local.canResp.id.isRemote = (FDCAN_REMOTE_FRAME == rxHeader.RxFrameType) ? true : false;
 8010396:	9a02      	ldr	r2, [sp, #8]
 8010398:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 801039c:	bf14      	ite	ne
 801039e:	2200      	movne	r2, #0
 80103a0:	2201      	moveq	r2, #1
 80103a2:	b2c9      	uxtb	r1, r1
 80103a4:	f362 11c7 	bfi	r1, r2, #7, #1
 80103a8:	f883 1093 	strb.w	r1, [r3, #147]	; 0x93
         canM_Module.local.canResp.dlc = (uint8_t)(rxHeader.DataLength >> 16U);
 80103ac:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80103b0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
         canM_Module.local.isRecMsg = true;
 80103b4:	2201      	movs	r2, #1
 80103b6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	__asm volatile
 80103ba:	2300      	movs	r3, #0
 80103bc:	f383 8811 	msr	BASEPRI, r3
   return;
 80103c0:	e7b6      	b.n	8010330 <HAL_FDCAN_RxFifo0Callback+0x18>
 80103c2:	bf00      	nop
 80103c4:	200014c1 	.word	0x200014c1
 80103c8:	2000142c 	.word	0x2000142c

080103cc <ethCat_check_dc_handler>:
uint16_t ethCat_check_dc_handler (void)
{
   uint16_t ret = 0u;

   return ret;
}
 80103cc:	2000      	movs	r0, #0
 80103ce:	4770      	bx	lr

080103d0 <ethCat_hw_eep_handler>:

void ethCat_hw_eep_handler (void)
{

}
 80103d0:	4770      	bx	lr
	...

080103d4 <ethCat_object_download_hook>:
{
 80103d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103d8:	b086      	sub	sp, #24
   uint8_t md80id = Obj.md80_Command.md80_dev_no;
 80103da:	4b28      	ldr	r3, [pc, #160]	; (801047c <ethCat_object_download_hook+0xa8>)
 80103dc:	f893 6140 	ldrb.w	r6, [r3, #320]	; 0x140
   uint8_t cmd = Obj.md80_Command.command;
 80103e0:	f893 5141 	ldrb.w	r5, [r3, #321]	; 0x141
   uint8_t length = Obj.md80_Command.size;
 80103e4:	f893 7142 	ldrb.w	r7, [r3, #322]	; 0x142
   uint8_t dataCmd[ETHCAT_LENGTH_DATAMAX] = {0u};
 80103e8:	2300      	movs	r3, #0
 80103ea:	9300      	str	r3, [sp, #0]
 80103ec:	9301      	str	r3, [sp, #4]
 80103ee:	9302      	str	r3, [sp, #8]
 80103f0:	9303      	str	r3, [sp, #12]
 80103f2:	9304      	str	r3, [sp, #16]
 80103f4:	9305      	str	r3, [sp, #20]
   switch (index)
 80103f6:	f242 0301 	movw	r3, #8193	; 0x2001
 80103fa:	4298      	cmp	r0, r3
 80103fc:	d003      	beq.n	8010406 <ethCat_object_download_hook+0x32>
}
 80103fe:	2000      	movs	r0, #0
 8010400:	b006      	add	sp, #24
 8010402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((cmd != BUS_FRAME_NONE) && (cmd < BUS_FRAME_INVALID) && (subindex == 9))
 8010406:	1e6b      	subs	r3, r5, #1
 8010408:	b2db      	uxtb	r3, r3
 801040a:	2b08      	cmp	r3, #8
 801040c:	d8f7      	bhi.n	80103fe <ethCat_object_download_hook+0x2a>
 801040e:	2909      	cmp	r1, #9
 8010410:	d1f5      	bne.n	80103fe <ethCat_object_download_hook+0x2a>
         memcpy(&dataCmd[0],  (uint8_t *)&Obj.md80_Command.dataSet0, sizeof(Obj.md80_Command.dataSet0));
 8010412:	f8df 8068 	ldr.w	r8, [pc, #104]	; 801047c <ethCat_object_download_hook+0xa8>
 8010416:	f8d8 3148 	ldr.w	r3, [r8, #328]	; 0x148
 801041a:	9300      	str	r3, [sp, #0]
         memcpy(&dataCmd[4],  (uint8_t *)&Obj.md80_Command.dataSet1, sizeof(Obj.md80_Command.dataSet1));
 801041c:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
 8010420:	9301      	str	r3, [sp, #4]
         memcpy(&dataCmd[8],  (uint8_t *)&Obj.md80_Command.dataSet2, sizeof(Obj.md80_Command.dataSet2));
 8010422:	f8d8 3150 	ldr.w	r3, [r8, #336]	; 0x150
 8010426:	9302      	str	r3, [sp, #8]
         memcpy(&dataCmd[12], (uint8_t *)&Obj.md80_Command.dataSet3, sizeof(Obj.md80_Command.dataSet3));
 8010428:	f8d8 3154 	ldr.w	r3, [r8, #340]	; 0x154
 801042c:	9303      	str	r3, [sp, #12]
         memcpy(&dataCmd[16], (uint8_t *)&Obj.md80_Command.dataSet4, sizeof(Obj.md80_Command.dataSet4));
 801042e:	f8d8 3158 	ldr.w	r3, [r8, #344]	; 0x158
 8010432:	9304      	str	r3, [sp, #16]
         Obj.md80_Last_Command_Received.command = cmd;
 8010434:	f8c8 515c 	str.w	r5, [r8, #348]	; 0x15c
         Obj.md80_Last_Command_Received.counter = Obj.md80_Command.counter;
 8010438:	f8d8 3144 	ldr.w	r3, [r8, #324]	; 0x144
 801043c:	f8c8 3160 	str.w	r3, [r8, #352]	; 0x160
         Obj.md80_Last_Command_Received.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 8010440:	f7f8 ff4e 	bl	80092e0 <xTaskGetTickCount>
 8010444:	f8c8 0164 	str.w	r0, [r8, #356]	; 0x164
         Obj.md80_Command.command = BUS_FRAME_NONE;
 8010448:	2400      	movs	r4, #0
 801044a:	f888 4141 	strb.w	r4, [r8, #321]	; 0x141
         for (int i = 0; i < sizeof(dataCmd); i++)
 801044e:	e008      	b.n	8010462 <ethCat_object_download_hook+0x8e>
            printf("%02X", dataCmd[i]);
 8010450:	f104 0318 	add.w	r3, r4, #24
 8010454:	446b      	add	r3, sp
 8010456:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801045a:	4809      	ldr	r0, [pc, #36]	; (8010480 <ethCat_object_download_hook+0xac>)
 801045c:	f001 faf0 	bl	8011a40 <iprintf>
         for (int i = 0; i < sizeof(dataCmd); i++)
 8010460:	3401      	adds	r4, #1
 8010462:	2c17      	cmp	r4, #23
 8010464:	d9f4      	bls.n	8010450 <ethCat_object_download_hook+0x7c>
         printf("\n");
 8010466:	200a      	movs	r0, #10
 8010468:	f001 fafc 	bl	8011a64 <putchar>
         canIdle_UpdateCmd(md80id, cmd, length, dataCmd);
 801046c:	466b      	mov	r3, sp
 801046e:	463a      	mov	r2, r7
 8010470:	4629      	mov	r1, r5
 8010472:	4630      	mov	r0, r6
 8010474:	f7ff fc56 	bl	800fd24 <canIdle_UpdateCmd>
 8010478:	e7c1      	b.n	80103fe <ethCat_object_download_hook+0x2a>
 801047a:	bf00      	nop
 801047c:	2000d140 	.word	0x2000d140
 8010480:	08013914 	.word	0x08013914

08010484 <cb_get_inputs>:
}
 8010484:	4770      	bx	lr

08010486 <cb_set_outputs>:
}
 8010486:	4770      	bx	lr

08010488 <ethCat_Init>:

void ethCat_Init (void)
{
 8010488:	b510      	push	{r4, lr}
      .esc_hw_eep_handler = ethCat_hw_eep_handler,
      .esc_check_dc_handler = ethCat_check_dc_handler,
   };

   /* Turn off etherCat. */
   HAL_GPIO_WritePin (LAN_Reset_CMD_GPIO_Port, LAN_Reset_CMD_Pin, GPIO_PIN_RESET);
 801048a:	4c0a      	ldr	r4, [pc, #40]	; (80104b4 <ethCat_Init+0x2c>)
 801048c:	2200      	movs	r2, #0
 801048e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010492:	4620      	mov	r0, r4
 8010494:	f7f2 f866 	bl	8002564 <HAL_GPIO_WritePin>

   /* Delay */
   osDelay(ETHCAT_DELAY_MS);
 8010498:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801049c:	f7f7 fff9 	bl	8008492 <osDelay>

   /* Turn on etherCat. */
   HAL_GPIO_WritePin (LAN_Reset_CMD_GPIO_Port, LAN_Reset_CMD_Pin, GPIO_PIN_SET);
 80104a0:	2201      	movs	r2, #1
 80104a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80104a6:	4620      	mov	r0, r4
 80104a8:	f7f2 f85c 	bl	8002564 <HAL_GPIO_WritePin>

   /* Initialize the EtherCat module. */
   ecat_slv_init (&ethCat_cfg);
 80104ac:	4802      	ldr	r0, [pc, #8]	; (80104b8 <ethCat_Init+0x30>)
 80104ae:	f7fb fca5 	bl	800bdfc <ecat_slv_init>
}
 80104b2:	bd10      	pop	{r4, pc}
 80104b4:	48000400 	.word	0x48000400
 80104b8:	2000154c 	.word	0x2000154c

080104bc <ethCat_MainFunction>:

void ethCat_MainFunction (void)
{
 80104bc:	b510      	push	{r4, lr}
	static uint32_t start=0;
	static uint32_t end =0;
	start = DWT->CYCCNT;//GetCycleCount();
 80104be:	4c05      	ldr	r4, [pc, #20]	; (80104d4 <ethCat_MainFunction+0x18>)
 80104c0:	6862      	ldr	r2, [r4, #4]
 80104c2:	4b05      	ldr	r3, [pc, #20]	; (80104d8 <ethCat_MainFunction+0x1c>)
 80104c4:	601a      	str	r2, [r3, #0]

	ecat_slv();
 80104c6:	f7fb fc91 	bl	800bdec <ecat_slv>
	end= DWT->CYCCNT;//GetCycleCount();
 80104ca:	6862      	ldr	r2, [r4, #4]
 80104cc:	4b03      	ldr	r3, [pc, #12]	; (80104dc <ethCat_MainFunction+0x20>)
 80104ce:	601a      	str	r2, [r3, #0]



}
 80104d0:	bd10      	pop	{r4, pc}
 80104d2:	bf00      	nop
 80104d4:	e0001000 	.word	0xe0001000
 80104d8:	20009790 	.word	0x20009790
 80104dc:	2000978c 	.word	0x2000978c

080104e0 <timerCounterCb>:

void timerCounterCb(void const * argument)
{
 80104e0:	b510      	push	{r4, lr}
#if ETHCAT_DUMMYDATA_500US == 1
   /* Update the counter dummy for md80: 1ms */
   Obj.md80_0_DataReturn.counter++;
 80104e2:	4c04      	ldr	r4, [pc, #16]	; (80104f4 <timerCounterCb+0x14>)
 80104e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80104e6:	3301      	adds	r3, #1
 80104e8:	6323      	str	r3, [r4, #48]	; 0x30
   Obj.md80_0_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount()/portTICK_PERIOD_MS);
 80104ea:	f7f8 fef9 	bl	80092e0 <xTaskGetTickCount>
 80104ee:	6360      	str	r0, [r4, #52]	; 0x34
#endif
}
 80104f0:	bd10      	pop	{r4, pc}
 80104f2:	bf00      	nop
 80104f4:	2000d140 	.word	0x2000d140

080104f8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80104f8:	b508      	push	{r3, lr}
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80104fa:	4803      	ldr	r0, [pc, #12]	; (8010508 <_cbSendSystemDesc+0x10>)
 80104fc:	f000 fe5a 	bl	80111b4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8010500:	4802      	ldr	r0, [pc, #8]	; (801050c <_cbSendSystemDesc+0x14>)
 8010502:	f000 fe57 	bl	80111b4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8010506:	bd08      	pop	{r3, pc}
 8010508:	08016928 	.word	0x08016928
 801050c:	0801694c 	.word	0x0801694c

08010510 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8010510:	b508      	push	{r3, lr}
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8010512:	4b06      	ldr	r3, [pc, #24]	; (801052c <SEGGER_SYSVIEW_Conf+0x1c>)
 8010514:	6818      	ldr	r0, [r3, #0]
 8010516:	4b06      	ldr	r3, [pc, #24]	; (8010530 <SEGGER_SYSVIEW_Conf+0x20>)
 8010518:	4a06      	ldr	r2, [pc, #24]	; (8010534 <SEGGER_SYSVIEW_Conf+0x24>)
 801051a:	4601      	mov	r1, r0
 801051c:	f000 faaa 	bl	8010a74 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8010520:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8010524:	f000 fadc 	bl	8010ae0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8010528:	bd08      	pop	{r3, pc}
 801052a:	bf00      	nop
 801052c:	20000000 	.word	0x20000000
 8010530:	080104f9 	.word	0x080104f9
 8010534:	080169ac 	.word	0x080169ac

08010538 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8010538:	b508      	push	{r3, lr}
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 801053a:	f7f8 fed7 	bl	80092ec <xTaskGetTickCountFromISR>
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 801053e:	0ec3      	lsrs	r3, r0, #27
 8010540:	0141      	lsls	r1, r0, #5
 8010542:	1a09      	subs	r1, r1, r0
 8010544:	f163 0300 	sbc.w	r3, r3, #0
 8010548:	009b      	lsls	r3, r3, #2
 801054a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801054e:	0089      	lsls	r1, r1, #2
 8010550:	1809      	adds	r1, r1, r0
 8010552:	f143 0300 	adc.w	r3, r3, #0
 8010556:	00db      	lsls	r3, r3, #3
  return Time;
}
 8010558:	00c8      	lsls	r0, r1, #3
 801055a:	ea43 7151 	orr.w	r1, r3, r1, lsr #29
 801055e:	bd08      	pop	{r3, pc}

08010560 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8010560:	b510      	push	{r4, lr}
 8010562:	b086      	sub	sp, #24
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8010564:	2400      	movs	r4, #0
 8010566:	9401      	str	r4, [sp, #4]
 8010568:	9402      	str	r4, [sp, #8]
 801056a:	9403      	str	r4, [sp, #12]
 801056c:	9404      	str	r4, [sp, #16]
 801056e:	9405      	str	r4, [sp, #20]
  TaskInfo.TaskID     = TaskID;
 8010570:	9001      	str	r0, [sp, #4]
  TaskInfo.sName      = sName;
 8010572:	9102      	str	r1, [sp, #8]
  TaskInfo.Prio       = Prio;
 8010574:	9203      	str	r2, [sp, #12]
  TaskInfo.StackBase  = StackBase;
 8010576:	9304      	str	r3, [sp, #16]
  TaskInfo.StackSize  = StackSize;
 8010578:	9b08      	ldr	r3, [sp, #32]
 801057a:	9305      	str	r3, [sp, #20]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 801057c:	a801      	add	r0, sp, #4
 801057e:	f000 fdb7 	bl	80110f0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8010582:	b006      	add	sp, #24
 8010584:	bd10      	pop	{r4, pc}
	...

08010588 <SYSVIEW_AddTask>:
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8010588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801058a:	b083      	sub	sp, #12
 801058c:	4605      	mov	r5, r0
 801058e:	460c      	mov	r4, r1
 8010590:	4616      	mov	r6, r2
 8010592:	461f      	mov	r7, r3
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8010594:	2205      	movs	r2, #5
 8010596:	4913      	ldr	r1, [pc, #76]	; (80105e4 <SYSVIEW_AddTask+0x5c>)
 8010598:	4620      	mov	r0, r4
 801059a:	f001 fae7 	bl	8011b6c <memcmp>
 801059e:	b1d0      	cbz	r0, 80105d6 <SYSVIEW_AddTask+0x4e>
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80105a0:	4b11      	ldr	r3, [pc, #68]	; (80105e8 <SYSVIEW_AddTask+0x60>)
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	2a07      	cmp	r2, #7
 80105a6:	d818      	bhi.n	80105da <SYSVIEW_AddTask+0x52>
  _aTasks[_NumTasks].xHandle = xHandle;
 80105a8:	4b10      	ldr	r3, [pc, #64]	; (80105ec <SYSVIEW_AddTask+0x64>)
 80105aa:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80105ae:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 80105b2:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80105b6:	604c      	str	r4, [r1, #4]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80105b8:	608e      	str	r6, [r1, #8]
  _aTasks[_NumTasks].pxStack = pxStack;
 80105ba:	60cf      	str	r7, [r1, #12]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80105bc:	9b08      	ldr	r3, [sp, #32]
 80105be:	610b      	str	r3, [r1, #16]
  _NumTasks++;
 80105c0:	3201      	adds	r2, #1
 80105c2:	4b09      	ldr	r3, [pc, #36]	; (80105e8 <SYSVIEW_AddTask+0x60>)
 80105c4:	601a      	str	r2, [r3, #0]
  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80105c6:	9b08      	ldr	r3, [sp, #32]
 80105c8:	9300      	str	r3, [sp, #0]
 80105ca:	463b      	mov	r3, r7
 80105cc:	4632      	mov	r2, r6
 80105ce:	4621      	mov	r1, r4
 80105d0:	4628      	mov	r0, r5
 80105d2:	f7ff ffc5 	bl	8010560 <SYSVIEW_SendTaskInfo>
}
 80105d6:	b003      	add	sp, #12
 80105d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80105da:	4805      	ldr	r0, [pc, #20]	; (80105f0 <SYSVIEW_AddTask+0x68>)
 80105dc:	f000 fec0 	bl	8011360 <SEGGER_SYSVIEW_Warn>
    return;
 80105e0:	e7f9      	b.n	80105d6 <SYSVIEW_AddTask+0x4e>
 80105e2:	bf00      	nop
 80105e4:	0801303c 	.word	0x0801303c
 80105e8:	20009794 	.word	0x20009794
 80105ec:	20009798 	.word	0x20009798
 80105f0:	0801695c 	.word	0x0801695c

080105f4 <_cbSendTaskList>:
static void _cbSendTaskList(void) {
 80105f4:	b530      	push	{r4, r5, lr}
 80105f6:	b083      	sub	sp, #12
  for (n = 0; n < _NumTasks; n++) {
 80105f8:	2400      	movs	r4, #0
 80105fa:	e00d      	b.n	8010618 <_cbSendTaskList+0x24>
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80105fc:	4d09      	ldr	r5, [pc, #36]	; (8010624 <_cbSendTaskList+0x30>)
 80105fe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8010602:	0098      	lsls	r0, r3, #2
 8010604:	1829      	adds	r1, r5, r0
 8010606:	690b      	ldr	r3, [r1, #16]
 8010608:	9300      	str	r3, [sp, #0]
 801060a:	68cb      	ldr	r3, [r1, #12]
 801060c:	688a      	ldr	r2, [r1, #8]
 801060e:	6849      	ldr	r1, [r1, #4]
 8010610:	5828      	ldr	r0, [r5, r0]
 8010612:	f7ff ffa5 	bl	8010560 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8010616:	3401      	adds	r4, #1
 8010618:	4b03      	ldr	r3, [pc, #12]	; (8010628 <_cbSendTaskList+0x34>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	42a3      	cmp	r3, r4
 801061e:	d8ed      	bhi.n	80105fc <_cbSendTaskList+0x8>
}
 8010620:	b003      	add	sp, #12
 8010622:	bd30      	pop	{r4, r5, pc}
 8010624:	20009798 	.word	0x20009798
 8010628:	20009794 	.word	0x20009794

0801062c <_DoInit>:
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 801062c:	4a12      	ldr	r2, [pc, #72]	; (8010678 <_DoInit+0x4c>)
 801062e:	2303      	movs	r3, #3
 8010630:	6113      	str	r3, [r2, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8010632:	6153      	str	r3, [r2, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8010634:	4911      	ldr	r1, [pc, #68]	; (801067c <_DoInit+0x50>)
 8010636:	6191      	str	r1, [r2, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8010638:	4b11      	ldr	r3, [pc, #68]	; (8010680 <_DoInit+0x54>)
 801063a:	61d3      	str	r3, [r2, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 801063c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010640:	6213      	str	r3, [r2, #32]
  p->aUp[0].RdOff         = 0u;
 8010642:	2300      	movs	r3, #0
 8010644:	6293      	str	r3, [r2, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8010646:	6253      	str	r3, [r2, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8010648:	62d3      	str	r3, [r2, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 801064a:	6611      	str	r1, [r2, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 801064c:	490d      	ldr	r1, [pc, #52]	; (8010684 <_DoInit+0x58>)
 801064e:	6651      	str	r1, [r2, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8010650:	2110      	movs	r1, #16
 8010652:	6691      	str	r1, [r2, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8010654:	6713      	str	r3, [r2, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8010656:	66d3      	str	r3, [r2, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8010658:	6753      	str	r3, [r2, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 801065a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 801065e:	e006      	b.n	801066e <_DoInit+0x42>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8010660:	f1c3 020f 	rsb	r2, r3, #15
 8010664:	4908      	ldr	r1, [pc, #32]	; (8010688 <_DoInit+0x5c>)
 8010666:	5c89      	ldrb	r1, [r1, r2]
 8010668:	4a03      	ldr	r2, [pc, #12]	; (8010678 <_DoInit+0x4c>)
 801066a:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 801066c:	3301      	adds	r3, #1
 801066e:	2b0f      	cmp	r3, #15
 8010670:	d9f6      	bls.n	8010660 <_DoInit+0x34>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8010672:	f3bf 8f5f 	dmb	sy
}
 8010676:	4770      	bx	lr
 8010678:	20009838 	.word	0x20009838
 801067c:	080169b4 	.word	0x080169b4
 8010680:	200098f0 	.word	0x200098f0
 8010684:	200098e0 	.word	0x200098e0
 8010688:	080169c0 	.word	0x080169c0

0801068c <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 801068c:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 801068e:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 8010690:	4293      	cmp	r3, r2
 8010692:	d804      	bhi.n	801069e <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8010694:	6881      	ldr	r1, [r0, #8]
 8010696:	1a8a      	subs	r2, r1, r2
 8010698:	4413      	add	r3, r2
 801069a:	1e58      	subs	r0, r3, #1
 801069c:	4770      	bx	lr
  } else {
    r = RdOff - WrOff - 1u;
 801069e:	1a98      	subs	r0, r3, r2
 80106a0:	3801      	subs	r0, #1
  }
  return r;
}
 80106a2:	4770      	bx	lr

080106a4 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80106a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106a8:	4604      	mov	r4, r0
 80106aa:	4688      	mov	r8, r1
 80106ac:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
 80106ae:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
 80106b0:	6887      	ldr	r7, [r0, #8]
 80106b2:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
 80106b6:	4591      	cmp	r9, r2
 80106b8:	d909      	bls.n	80106ce <_WriteNoCheck+0x2a>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80106ba:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80106bc:	4428      	add	r0, r5
 80106be:	f001 fb23 	bl	8011d08 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80106c2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80106c6:	4435      	add	r5, r6
 80106c8:	60e5      	str	r5, [r4, #12]
}
 80106ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80106ce:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80106d0:	464a      	mov	r2, r9
 80106d2:	4428      	add	r0, r5
 80106d4:	f001 fb18 	bl	8011d08 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80106d8:	1bed      	subs	r5, r5, r7
 80106da:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80106dc:	462a      	mov	r2, r5
 80106de:	eb08 0109 	add.w	r1, r8, r9
 80106e2:	6860      	ldr	r0, [r4, #4]
 80106e4:	f001 fb10 	bl	8011d08 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80106e8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80106ec:	60e5      	str	r5, [r4, #12]
}
 80106ee:	e7ec      	b.n	80106ca <_WriteNoCheck+0x26>

080106f0 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80106f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106f4:	4606      	mov	r6, r0
 80106f6:	4688      	mov	r8, r1
 80106f8:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
 80106fa:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
 80106fc:	f04f 0900 	mov.w	r9, #0
 8010700:	e01a      	b.n	8010738 <_WriteBlocking+0x48>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8010702:	1b5b      	subs	r3, r3, r5
 8010704:	1e5a      	subs	r2, r3, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8010706:	68b3      	ldr	r3, [r6, #8]
 8010708:	1b5c      	subs	r4, r3, r5
 801070a:	4294      	cmp	r4, r2
 801070c:	bf28      	it	cs
 801070e:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8010710:	42bc      	cmp	r4, r7
 8010712:	bf28      	it	cs
 8010714:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8010716:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8010718:	4622      	mov	r2, r4
 801071a:	4641      	mov	r1, r8
 801071c:	4428      	add	r0, r5
 801071e:	f001 faf3 	bl	8011d08 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8010722:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
 8010724:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
 8010726:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
 8010728:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
 801072a:	68b3      	ldr	r3, [r6, #8]
 801072c:	42ab      	cmp	r3, r5
 801072e:	d00b      	beq.n	8010748 <_WriteBlocking+0x58>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8010730:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8010734:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 8010736:	b14f      	cbz	r7, 801074c <_WriteBlocking+0x5c>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8010738:	6933      	ldr	r3, [r6, #16]
    if (RdOff > WrOff) {
 801073a:	429d      	cmp	r5, r3
 801073c:	d3e1      	bcc.n	8010702 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 801073e:	68b2      	ldr	r2, [r6, #8]
 8010740:	1b5b      	subs	r3, r3, r5
 8010742:	441a      	add	r2, r3
 8010744:	3a01      	subs	r2, #1
 8010746:	e7de      	b.n	8010706 <_WriteBlocking+0x16>
      WrOff = 0u;
 8010748:	2500      	movs	r5, #0
 801074a:	e7f1      	b.n	8010730 <_WriteBlocking+0x40>
}
 801074c:	4648      	mov	r0, r9
 801074e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08010754 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8010754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010758:	4604      	mov	r4, r0
 801075a:	4688      	mov	r8, r1
 801075c:	4691      	mov	r9, r2
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 801075e:	4b24      	ldr	r3, [pc, #144]	; (80107f0 <SEGGER_RTT_ReadNoLock+0x9c>)
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	b1c3      	cbz	r3, 8010796 <SEGGER_RTT_ReadNoLock+0x42>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  pBuffer = (unsigned char*)pData;
  RdOff = pRing->RdOff;
 8010764:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8010768:	4b21      	ldr	r3, [pc, #132]	; (80107f0 <SEGGER_RTT_ReadNoLock+0x9c>)
 801076a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801076e:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  WrOff = pRing->WrOff;
 8010770:	6edd      	ldr	r5, [r3, #108]	; 0x6c
  NumBytesRead = 0u;
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8010772:	42af      	cmp	r7, r5
 8010774:	d812      	bhi.n	801079c <SEGGER_RTT_ReadNoLock+0x48>
  NumBytesRead = 0u;
 8010776:	2600      	movs	r6, #0
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8010778:	1bed      	subs	r5, r5, r7
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 801077a:	454d      	cmp	r5, r9
 801077c:	bf28      	it	cs
 801077e:	464d      	movcs	r5, r9
  if (NumBytesRem > 0u) {
 8010780:	bb3d      	cbnz	r5, 80107d2 <SEGGER_RTT_ReadNoLock+0x7e>
    pBuffer      += NumBytesRem;
    BufferSize   -= NumBytesRem;
    RdOff        += NumBytesRem;
#endif
  }
  if (NumBytesRead) {
 8010782:	b12e      	cbz	r6, 8010790 <SEGGER_RTT_ReadNoLock+0x3c>
    pRing->RdOff = RdOff;
 8010784:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010788:	4b19      	ldr	r3, [pc, #100]	; (80107f0 <SEGGER_RTT_ReadNoLock+0x9c>)
 801078a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801078e:	671f      	str	r7, [r3, #112]	; 0x70
  }
  //
  return NumBytesRead;
}
 8010790:	4630      	mov	r0, r6
 8010792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INIT();
 8010796:	f7ff ff49 	bl	801062c <_DoInit>
 801079a:	e7e3      	b.n	8010764 <SEGGER_RTT_ReadNoLock+0x10>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 801079c:	4613      	mov	r3, r2
 801079e:	4a14      	ldr	r2, [pc, #80]	; (80107f0 <SEGGER_RTT_ReadNoLock+0x9c>)
 80107a0:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80107a4:	f8da 6068 	ldr.w	r6, [sl, #104]	; 0x68
 80107a8:	1bf6      	subs	r6, r6, r7
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80107aa:	454e      	cmp	r6, r9
 80107ac:	bf28      	it	cs
 80107ae:	464e      	movcs	r6, r9
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80107b0:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80107b4:	4632      	mov	r2, r6
 80107b6:	4439      	add	r1, r7
 80107b8:	4640      	mov	r0, r8
 80107ba:	f001 faa5 	bl	8011d08 <memcpy>
    pBuffer      += NumBytesRem;
 80107be:	44b0      	add	r8, r6
    BufferSize   -= NumBytesRem;
 80107c0:	eba9 0906 	sub.w	r9, r9, r6
    RdOff        += NumBytesRem;
 80107c4:	4437      	add	r7, r6
    if (RdOff == pRing->SizeOfBuffer) {
 80107c6:	f8da 3068 	ldr.w	r3, [sl, #104]	; 0x68
 80107ca:	42bb      	cmp	r3, r7
 80107cc:	d1d4      	bne.n	8010778 <SEGGER_RTT_ReadNoLock+0x24>
      RdOff = 0u;
 80107ce:	2700      	movs	r7, #0
 80107d0:	e7d2      	b.n	8010778 <SEGGER_RTT_ReadNoLock+0x24>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80107d2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80107d6:	4b06      	ldr	r3, [pc, #24]	; (80107f0 <SEGGER_RTT_ReadNoLock+0x9c>)
 80107d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107dc:	6e59      	ldr	r1, [r3, #100]	; 0x64
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80107de:	462a      	mov	r2, r5
 80107e0:	4439      	add	r1, r7
 80107e2:	4640      	mov	r0, r8
 80107e4:	f001 fa90 	bl	8011d08 <memcpy>
    NumBytesRead += NumBytesRem;
 80107e8:	442e      	add	r6, r5
    RdOff        += NumBytesRem;
 80107ea:	442f      	add	r7, r5
 80107ec:	e7c9      	b.n	8010782 <SEGGER_RTT_ReadNoLock+0x2e>
 80107ee:	bf00      	nop
 80107f0:	20009838 	.word	0x20009838

080107f4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80107f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107f6:	460f      	mov	r7, r1
 80107f8:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80107fa:	4b18      	ldr	r3, [pc, #96]	; (801085c <SEGGER_RTT_WriteNoLock+0x68>)
 80107fc:	1c45      	adds	r5, r0, #1
 80107fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010802:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8010806:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801080a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801080e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010810:	2c01      	cmp	r4, #1
 8010812:	d011      	beq.n	8010838 <SEGGER_RTT_WriteNoLock+0x44>
 8010814:	2c02      	cmp	r4, #2
 8010816:	d01c      	beq.n	8010852 <SEGGER_RTT_WriteNoLock+0x5e>
 8010818:	b114      	cbz	r4, 8010820 <SEGGER_RTT_WriteNoLock+0x2c>
 801081a:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
 801081c:	4620      	mov	r0, r4
 801081e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
 8010820:	4628      	mov	r0, r5
 8010822:	f7ff ff33 	bl	801068c <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 8010826:	4286      	cmp	r6, r0
 8010828:	d8f8      	bhi.n	801081c <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
 801082a:	4632      	mov	r2, r6
 801082c:	4639      	mov	r1, r7
 801082e:	4628      	mov	r0, r5
 8010830:	f7ff ff38 	bl	80106a4 <_WriteNoCheck>
      Status = NumBytes;
 8010834:	4634      	mov	r4, r6
 8010836:	e7f1      	b.n	801081c <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
 8010838:	4628      	mov	r0, r5
 801083a:	f7ff ff27 	bl	801068c <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 801083e:	4634      	mov	r4, r6
 8010840:	4286      	cmp	r6, r0
 8010842:	bf28      	it	cs
 8010844:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 8010846:	4622      	mov	r2, r4
 8010848:	4639      	mov	r1, r7
 801084a:	4628      	mov	r0, r5
 801084c:	f7ff ff2a 	bl	80106a4 <_WriteNoCheck>
    break;
 8010850:	e7e4      	b.n	801081c <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8010852:	4628      	mov	r0, r5
 8010854:	f7ff ff4c 	bl	80106f0 <_WriteBlocking>
 8010858:	4604      	mov	r4, r0
    break;
 801085a:	e7df      	b.n	801081c <SEGGER_RTT_WriteNoLock+0x28>
 801085c:	20009838 	.word	0x20009838

08010860 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8010860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010862:	4604      	mov	r4, r0
 8010864:	460d      	mov	r5, r1
 8010866:	4616      	mov	r6, r2
  unsigned Status;

  INIT();
 8010868:	4b09      	ldr	r3, [pc, #36]	; (8010890 <SEGGER_RTT_Write+0x30>)
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	b16b      	cbz	r3, 801088a <SEGGER_RTT_Write+0x2a>
  SEGGER_RTT_LOCK();
 801086e:	f3ef 8711 	mrs	r7, BASEPRI
 8010872:	f04f 0120 	mov.w	r1, #32
 8010876:	f381 8811 	msr	BASEPRI, r1
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 801087a:	4632      	mov	r2, r6
 801087c:	4629      	mov	r1, r5
 801087e:	4620      	mov	r0, r4
 8010880:	f7ff ffb8 	bl	80107f4 <SEGGER_RTT_WriteNoLock>
  SEGGER_RTT_UNLOCK();
 8010884:	f387 8811 	msr	BASEPRI, r7
  return Status;
}
 8010888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  INIT();
 801088a:	f7ff fecf 	bl	801062c <_DoInit>
 801088e:	e7ee      	b.n	801086e <SEGGER_RTT_Write+0xe>
 8010890:	20009838 	.word	0x20009838

08010894 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8010894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010896:	4607      	mov	r7, r0
 8010898:	460e      	mov	r6, r1
 801089a:	4615      	mov	r5, r2
 801089c:	461c      	mov	r4, r3
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 801089e:	4b1f      	ldr	r3, [pc, #124]	; (801091c <SEGGER_RTT_AllocUpBuffer+0x88>)
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d034      	beq.n	8010910 <SEGGER_RTT_AllocUpBuffer+0x7c>
  SEGGER_RTT_LOCK();
 80108a6:	f3ef 8211 	mrs	r2, BASEPRI
 80108aa:	f04f 0120 	mov.w	r1, #32
 80108ae:	f381 8811 	msr	BASEPRI, r1
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  BufferIndex = 0;
 80108b2:	2000      	movs	r0, #0
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80108b4:	f100 0c01 	add.w	ip, r0, #1
 80108b8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80108bc:	4b17      	ldr	r3, [pc, #92]	; (801091c <SEGGER_RTT_AllocUpBuffer+0x88>)
 80108be:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 80108c2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80108c6:	b123      	cbz	r3, 80108d2 <SEGGER_RTT_AllocUpBuffer+0x3e>
      break;
    }
    BufferIndex++;
 80108c8:	3001      	adds	r0, #1
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80108ca:	4b14      	ldr	r3, [pc, #80]	; (801091c <SEGGER_RTT_AllocUpBuffer+0x88>)
 80108cc:	691b      	ldr	r3, [r3, #16]
 80108ce:	4283      	cmp	r3, r0
 80108d0:	dcf0      	bgt.n	80108b4 <SEGGER_RTT_AllocUpBuffer+0x20>
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80108d2:	4b12      	ldr	r3, [pc, #72]	; (801091c <SEGGER_RTT_AllocUpBuffer+0x88>)
 80108d4:	691b      	ldr	r3, [r3, #16]
 80108d6:	4283      	cmp	r3, r0
 80108d8:	dd1d      	ble.n	8010916 <SEGGER_RTT_AllocUpBuffer+0x82>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80108da:	4b10      	ldr	r3, [pc, #64]	; (801091c <SEGGER_RTT_AllocUpBuffer+0x88>)
 80108dc:	1c41      	adds	r1, r0, #1
 80108de:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 80108e2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80108e6:	f843 700c 	str.w	r7, [r3, ip]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80108ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80108ee:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80108f2:	604e      	str	r6, [r1, #4]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80108f4:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80108f8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80108fc:	621d      	str	r5, [r3, #32]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80108fe:	2100      	movs	r1, #0
 8010900:	6299      	str	r1, [r3, #40]	; 0x28
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8010902:	6259      	str	r1, [r3, #36]	; 0x24
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8010904:	62dc      	str	r4, [r3, #44]	; 0x2c
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8010906:	f3bf 8f5f 	dmb	sy
  } else {
    BufferIndex = -1;
  }
  SEGGER_RTT_UNLOCK();
 801090a:	f382 8811 	msr	BASEPRI, r2
  return BufferIndex;
}
 801090e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  INIT();
 8010910:	f7ff fe8c 	bl	801062c <_DoInit>
 8010914:	e7c7      	b.n	80108a6 <SEGGER_RTT_AllocUpBuffer+0x12>
    BufferIndex = -1;
 8010916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801091a:	e7f6      	b.n	801090a <SEGGER_RTT_AllocUpBuffer+0x76>
 801091c:	20009838 	.word	0x20009838

08010920 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8010920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010924:	4604      	mov	r4, r0
 8010926:	4688      	mov	r8, r1
 8010928:	4617      	mov	r7, r2
 801092a:	461e      	mov	r6, r3
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 801092c:	4b17      	ldr	r3, [pc, #92]	; (801098c <SEGGER_RTT_ConfigDownBuffer+0x6c>)
 801092e:	781b      	ldrb	r3, [r3, #0]
 8010930:	b333      	cbz	r3, 8010980 <SEGGER_RTT_ConfigDownBuffer+0x60>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8010932:	2c02      	cmp	r4, #2
 8010934:	d827      	bhi.n	8010986 <SEGGER_RTT_ConfigDownBuffer+0x66>
    SEGGER_RTT_LOCK();
 8010936:	f3ef 8011 	mrs	r0, BASEPRI
 801093a:	f04f 0120 	mov.w	r1, #32
 801093e:	f381 8811 	msr	BASEPRI, r1
    pDown = &pRTTCB->aDown[BufferIndex];
    if (BufferIndex) {
 8010942:	b17c      	cbz	r4, 8010964 <SEGGER_RTT_ConfigDownBuffer+0x44>
      pDown->sName        = sName;
 8010944:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010948:	4d10      	ldr	r5, [pc, #64]	; (801098c <SEGGER_RTT_ConfigDownBuffer+0x6c>)
 801094a:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 801094e:	f8cc 8060 	str.w	r8, [ip, #96]	; 0x60
      pDown->pBuffer      = (char*)pBuffer;
 8010952:	f8cc 7064 	str.w	r7, [ip, #100]	; 0x64
      pDown->SizeOfBuffer = BufferSize;
 8010956:	f8cc 6068 	str.w	r6, [ip, #104]	; 0x68
      pDown->RdOff        = 0u;
 801095a:	2300      	movs	r3, #0
 801095c:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
      pDown->WrOff        = 0u;
 8010960:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
    }
    pDown->Flags          = Flags;
 8010964:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010968:	4b08      	ldr	r3, [pc, #32]	; (801098c <SEGGER_RTT_ConfigDownBuffer+0x6c>)
 801096a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801096e:	9a06      	ldr	r2, [sp, #24]
 8010970:	675a      	str	r2, [r3, #116]	; 0x74
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8010972:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8010976:	f380 8811 	msr	BASEPRI, r0
    r =  0;
 801097a:	2000      	movs	r0, #0
  } else {
    r = -1;
  }
  return r;
}
 801097c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  INIT();
 8010980:	f7ff fe54 	bl	801062c <_DoInit>
 8010984:	e7d5      	b.n	8010932 <SEGGER_RTT_ConfigDownBuffer+0x12>
    r = -1;
 8010986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return r;
 801098a:	e7f7      	b.n	801097c <SEGGER_RTT_ConfigDownBuffer+0x5c>
 801098c:	20009838 	.word	0x20009838

08010990 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8010990:	4684      	mov	ip, r0
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
  if (pText != NULL) {
 8010992:	460b      	mov	r3, r1
 8010994:	b329      	cbz	r1, 80109e2 <_EncodeStr+0x52>
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8010996:	b410      	push	{r4}
  Len = 0;
 8010998:	2100      	movs	r1, #0
 801099a:	e000      	b.n	801099e <_EncodeStr+0xe>
    while(*(pText + Len) != 0) {
      Len++;
 801099c:	3101      	adds	r1, #1
    while(*(pText + Len) != 0) {
 801099e:	5c5c      	ldrb	r4, [r3, r1]
 80109a0:	2c00      	cmp	r4, #0
 80109a2:	d1fb      	bne.n	801099c <_EncodeStr+0xc>
    }
    if (Len > Limit) {
 80109a4:	4291      	cmp	r1, r2
 80109a6:	d800      	bhi.n	80109aa <_EncodeStr+0x1a>
 80109a8:	460a      	mov	r2, r1
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80109aa:	2afe      	cmp	r2, #254	; 0xfe
 80109ac:	d804      	bhi.n	80109b8 <_EncodeStr+0x28>
    *pPayload++ = (U8)Len;
 80109ae:	4660      	mov	r0, ip
 80109b0:	f800 2b01 	strb.w	r2, [r0], #1
    *pPayload++ = ((Len >> 8) & 255);
  }
  //
  // copy string
  //
  n = 0;
 80109b4:	2100      	movs	r1, #0
  while (n < Len) {
 80109b6:	e00f      	b.n	80109d8 <_EncodeStr+0x48>
    *pPayload++ = 255;
 80109b8:	21ff      	movs	r1, #255	; 0xff
 80109ba:	f88c 1000 	strb.w	r1, [ip]
    *pPayload++ = (Len & 255);
 80109be:	f88c 2001 	strb.w	r2, [ip, #1]
    *pPayload++ = ((Len >> 8) & 255);
 80109c2:	0a11      	lsrs	r1, r2, #8
 80109c4:	f10c 0003 	add.w	r0, ip, #3
 80109c8:	f88c 1002 	strb.w	r1, [ip, #2]
 80109cc:	e7f2      	b.n	80109b4 <_EncodeStr+0x24>
    *pPayload++ = *pText++;
 80109ce:	f813 cb01 	ldrb.w	ip, [r3], #1
 80109d2:	f800 cb01 	strb.w	ip, [r0], #1
    n++;
 80109d6:	3101      	adds	r1, #1
  while (n < Len) {
 80109d8:	4291      	cmp	r1, r2
 80109da:	d3f8      	bcc.n	80109ce <_EncodeStr+0x3e>
  }
  return pPayload;
}
 80109dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109e0:	4770      	bx	lr
  Len = 0;
 80109e2:	2200      	movs	r2, #0
    *pPayload++ = (U8)Len;
 80109e4:	f800 2b01 	strb.w	r2, [r0], #1
  n = 0;
 80109e8:	2100      	movs	r1, #0
 80109ea:	e004      	b.n	80109f6 <_EncodeStr+0x66>
    *pPayload++ = *pText++;
 80109ec:	f813 cb01 	ldrb.w	ip, [r3], #1
 80109f0:	f800 cb01 	strb.w	ip, [r0], #1
    n++;
 80109f4:	3101      	adds	r1, #1
  while (n < Len) {
 80109f6:	4291      	cmp	r1, r2
 80109f8:	d3f8      	bcc.n	80109ec <_EncodeStr+0x5c>
 80109fa:	4770      	bx	lr

080109fc <_PreparePacket>:
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
}
 80109fc:	3007      	adds	r0, #7
 80109fe:	4770      	bx	lr

08010a00 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8010a00:	b510      	push	{r4, lr}
 8010a02:	b084      	sub	sp, #16
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8010a04:	2301      	movs	r3, #1
 8010a06:	f88d 3004 	strb.w	r3, [sp, #4]
  pPayload   = &aPacket[1];
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8010a0a:	4b18      	ldr	r3, [pc, #96]	; (8010a6c <_TrySendOverflowPacket+0x6c>)
 8010a0c:	695b      	ldr	r3, [r3, #20]
 8010a0e:	f10d 0205 	add.w	r2, sp, #5
 8010a12:	e004      	b.n	8010a1e <_TrySendOverflowPacket+0x1e>
 8010a14:	f063 017f 	orn	r1, r3, #127	; 0x7f
 8010a18:	f802 1b01 	strb.w	r1, [r2], #1
 8010a1c:	09db      	lsrs	r3, r3, #7
 8010a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8010a20:	d8f8      	bhi.n	8010a14 <_TrySendOverflowPacket+0x14>
 8010a22:	f802 3b01 	strb.w	r3, [r2], #1
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8010a26:	4b12      	ldr	r3, [pc, #72]	; (8010a70 <_TrySendOverflowPacket+0x70>)
 8010a28:	685c      	ldr	r4, [r3, #4]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8010a2a:	4b10      	ldr	r3, [pc, #64]	; (8010a6c <_TrySendOverflowPacket+0x6c>)
 8010a2c:	68db      	ldr	r3, [r3, #12]
 8010a2e:	1ae3      	subs	r3, r4, r3
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8010a30:	e004      	b.n	8010a3c <_TrySendOverflowPacket+0x3c>
 8010a32:	f063 017f 	orn	r1, r3, #127	; 0x7f
 8010a36:	f802 1b01 	strb.w	r1, [r2], #1
 8010a3a:	09db      	lsrs	r3, r3, #7
 8010a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8010a3e:	d8f8      	bhi.n	8010a32 <_TrySendOverflowPacket+0x32>
 8010a40:	f802 3b01 	strb.w	r3, [r2], #1
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8010a44:	a901      	add	r1, sp, #4
 8010a46:	1a52      	subs	r2, r2, r1
 8010a48:	4b08      	ldr	r3, [pc, #32]	; (8010a6c <_TrySendOverflowPacket+0x6c>)
 8010a4a:	7858      	ldrb	r0, [r3, #1]
 8010a4c:	f7ef fbe8 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8010a50:	b130      	cbz	r0, 8010a60 <_TrySendOverflowPacket+0x60>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8010a52:	4b06      	ldr	r3, [pc, #24]	; (8010a6c <_TrySendOverflowPacket+0x6c>)
 8010a54:	60dc      	str	r4, [r3, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8010a56:	781a      	ldrb	r2, [r3, #0]
 8010a58:	3a01      	subs	r2, #1
 8010a5a:	701a      	strb	r2, [r3, #0]
  } else {
    _SYSVIEW_Globals.DropCount++;
  }
  //
  return Status;
}
 8010a5c:	b004      	add	sp, #16
 8010a5e:	bd10      	pop	{r4, pc}
    _SYSVIEW_Globals.DropCount++;
 8010a60:	4a02      	ldr	r2, [pc, #8]	; (8010a6c <_TrySendOverflowPacket+0x6c>)
 8010a62:	6953      	ldr	r3, [r2, #20]
 8010a64:	3301      	adds	r3, #1
 8010a66:	6153      	str	r3, [r2, #20]
  return Status;
 8010a68:	e7f8      	b.n	8010a5c <_TrySendOverflowPacket+0x5c>
 8010a6a:	bf00      	nop
 8010a6c:	20009cfc 	.word	0x20009cfc
 8010a70:	e0001000 	.word	0xe0001000

08010a74 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8010a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a78:	b082      	sub	sp, #8
 8010a7a:	4607      	mov	r7, r0
 8010a7c:	460e      	mov	r6, r1
 8010a7e:	4690      	mov	r8, r2
 8010a80:	461d      	mov	r5, r3
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8010a82:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8010adc <SEGGER_SYSVIEW_Init+0x68>
 8010a86:	2300      	movs	r3, #0
 8010a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010a8c:	490f      	ldr	r1, [pc, #60]	; (8010acc <SEGGER_SYSVIEW_Init+0x58>)
 8010a8e:	4648      	mov	r0, r9
 8010a90:	f7ff ff00 	bl	8010894 <SEGGER_RTT_AllocUpBuffer>
 8010a94:	b2c0      	uxtb	r0, r0
 8010a96:	4c0e      	ldr	r4, [pc, #56]	; (8010ad0 <SEGGER_SYSVIEW_Init+0x5c>)
 8010a98:	7060      	strb	r0, [r4, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8010a9a:	7620      	strb	r0, [r4, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8010a9c:	f04f 0a00 	mov.w	sl, #0
 8010aa0:	f8cd a000 	str.w	sl, [sp]
 8010aa4:	2308      	movs	r3, #8
 8010aa6:	4a0b      	ldr	r2, [pc, #44]	; (8010ad4 <SEGGER_SYSVIEW_Init+0x60>)
 8010aa8:	4649      	mov	r1, r9
 8010aaa:	f7ff ff39 	bl	8010920 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8010aae:	f8c4 a010 	str.w	sl, [r4, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8010ab2:	4b09      	ldr	r3, [pc, #36]	; (8010ad8 <SEGGER_SYSVIEW_Init+0x64>)
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	60e3      	str	r3, [r4, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8010ab8:	f8c4 8020 	str.w	r8, [r4, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8010abc:	6067      	str	r7, [r4, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8010abe:	60a6      	str	r6, [r4, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8010ac0:	6265      	str	r5, [r4, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8010ac2:	f884 a000 	strb.w	sl, [r4]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8010ac6:	b002      	add	sp, #8
 8010ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010acc:	20009d24 	.word	0x20009d24
 8010ad0:	20009cfc 	.word	0x20009cfc
 8010ad4:	20009cf0 	.word	0x20009cf0
 8010ad8:	e0001000 	.word	0xe0001000
 8010adc:	080169d4 	.word	0x080169d4

08010ae0 <SEGGER_SYSVIEW_SetRAMBase>:
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8010ae0:	4b01      	ldr	r3, [pc, #4]	; (8010ae8 <SEGGER_SYSVIEW_SetRAMBase+0x8>)
 8010ae2:	6118      	str	r0, [r3, #16]
}
 8010ae4:	4770      	bx	lr
 8010ae6:	bf00      	nop
 8010ae8:	20009cfc 	.word	0x20009cfc

08010aec <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8010aec:	b508      	push	{r3, lr}
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8010aee:	4b03      	ldr	r3, [pc, #12]	; (8010afc <SEGGER_SYSVIEW_SendTaskList+0x10>)
 8010af0:	6a1b      	ldr	r3, [r3, #32]
 8010af2:	b113      	cbz	r3, 8010afa <SEGGER_SYSVIEW_SendTaskList+0xe>
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	b103      	cbz	r3, 8010afa <SEGGER_SYSVIEW_SendTaskList+0xe>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8010af8:	4798      	blx	r3
  }
}
 8010afa:	bd08      	pop	{r3, pc}
 8010afc:	20009cfc 	.word	0x20009cfc

08010b00 <SEGGER_SYSVIEW_ShrinkId>:
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
  return SHRINK_ID(Id);
 8010b00:	4b01      	ldr	r3, [pc, #4]	; (8010b08 <SEGGER_SYSVIEW_ShrinkId+0x8>)
 8010b02:	691b      	ldr	r3, [r3, #16]
}
 8010b04:	1ac0      	subs	r0, r0, r3
 8010b06:	4770      	bx	lr
 8010b08:	20009cfc 	.word	0x20009cfc

08010b0c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8010b0c:	b510      	push	{r4, lr}
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8010b0e:	4b06      	ldr	r3, [pc, #24]	; (8010b28 <SEGGER_SYSVIEW_SendModuleDescription+0x1c>)
 8010b10:	681c      	ldr	r4, [r3, #0]
 8010b12:	b924      	cbnz	r4, 8010b1e <SEGGER_SYSVIEW_SendModuleDescription+0x12>
        pModule->pfSendModuleDesc();
      }
      pModule = pModule->pNext;
    } while (pModule);
  }
}
 8010b14:	bd10      	pop	{r4, pc}
        pModule->pfSendModuleDesc();
 8010b16:	4798      	blx	r3
      pModule = pModule->pNext;
 8010b18:	6924      	ldr	r4, [r4, #16]
    } while (pModule);
 8010b1a:	2c00      	cmp	r4, #0
 8010b1c:	d0fa      	beq.n	8010b14 <SEGGER_SYSVIEW_SendModuleDescription+0x8>
      if (pModule->pfSendModuleDesc) {
 8010b1e:	68e3      	ldr	r3, [r4, #12]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d1f8      	bne.n	8010b16 <SEGGER_SYSVIEW_SendModuleDescription+0xa>
 8010b24:	e7f8      	b.n	8010b18 <SEGGER_SYSVIEW_SendModuleDescription+0xc>
 8010b26:	bf00      	nop
 8010b28:	2000ae08 	.word	0x2000ae08

08010b2c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8010b2c:	b510      	push	{r4, lr}
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8010b2e:	f3ef 8411 	mrs	r4, BASEPRI
 8010b32:	f04f 0120 	mov.w	r1, #32
 8010b36:	f381 8811 	msr	BASEPRI, r1
 8010b3a:	480b      	ldr	r0, [pc, #44]	; (8010b68 <SEGGER_SYSVIEW_SendNumModules+0x3c>)
 8010b3c:	f7ff ff5e 	bl	80109fc <_PreparePacket>
  pPayload = pPayloadStart;
  ENCODE_U32(pPayload, _NumModules);
 8010b40:	4b0a      	ldr	r3, [pc, #40]	; (8010b6c <SEGGER_SYSVIEW_SendNumModules+0x40>)
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	4601      	mov	r1, r0
 8010b46:	e004      	b.n	8010b52 <SEGGER_SYSVIEW_SendNumModules+0x26>
 8010b48:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8010b4c:	f801 2b01 	strb.w	r2, [r1], #1
 8010b50:	09db      	lsrs	r3, r3, #7
 8010b52:	2b7f      	cmp	r3, #127	; 0x7f
 8010b54:	d8f8      	bhi.n	8010b48 <SEGGER_SYSVIEW_SendNumModules+0x1c>
 8010b56:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8010b5a:	221b      	movs	r2, #27
 8010b5c:	f000 f8b0 	bl	8010cc0 <_SendPacket>
  RECORD_END();
 8010b60:	f384 8811 	msr	BASEPRI, r4
}
 8010b64:	bd10      	pop	{r4, pc}
 8010b66:	bf00      	nop
 8010b68:	2000ad24 	.word	0x2000ad24
 8010b6c:	20009cf8 	.word	0x20009cf8

08010b70 <SEGGER_SYSVIEW_Start>:
void SEGGER_SYSVIEW_Start(void) {
 8010b70:	b538      	push	{r3, r4, r5, lr}
    _SYSVIEW_Globals.EnableState = 1;
 8010b72:	4d29      	ldr	r5, [pc, #164]	; (8010c18 <SEGGER_SYSVIEW_Start+0xa8>)
 8010b74:	2301      	movs	r3, #1
 8010b76:	702b      	strb	r3, [r5, #0]
    SEGGER_SYSVIEW_LOCK();
 8010b78:	f3ef 8411 	mrs	r4, BASEPRI
 8010b7c:	f04f 0120 	mov.w	r1, #32
 8010b80:	f381 8811 	msr	BASEPRI, r1
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8010b84:	220a      	movs	r2, #10
 8010b86:	4925      	ldr	r1, [pc, #148]	; (8010c1c <SEGGER_SYSVIEW_Start+0xac>)
 8010b88:	7868      	ldrb	r0, [r5, #1]
 8010b8a:	f7ef fb49 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8010b8e:	f384 8811 	msr	BASEPRI, r4
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8010b92:	200a      	movs	r0, #10
 8010b94:	f000 f95a 	bl	8010e4c <SEGGER_SYSVIEW_RecordVoid>
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8010b98:	f3ef 8411 	mrs	r4, BASEPRI
 8010b9c:	f04f 0120 	mov.w	r1, #32
 8010ba0:	f381 8811 	msr	BASEPRI, r1
 8010ba4:	481e      	ldr	r0, [pc, #120]	; (8010c20 <SEGGER_SYSVIEW_Start+0xb0>)
 8010ba6:	f7ff ff29 	bl	80109fc <_PreparePacket>
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8010baa:	686a      	ldr	r2, [r5, #4]
 8010bac:	4603      	mov	r3, r0
 8010bae:	e004      	b.n	8010bba <SEGGER_SYSVIEW_Start+0x4a>
 8010bb0:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8010bb4:	f803 1b01 	strb.w	r1, [r3], #1
 8010bb8:	09d2      	lsrs	r2, r2, #7
 8010bba:	2a7f      	cmp	r2, #127	; 0x7f
 8010bbc:	d8f8      	bhi.n	8010bb0 <SEGGER_SYSVIEW_Start+0x40>
 8010bbe:	f803 2b01 	strb.w	r2, [r3], #1
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8010bc2:	4a15      	ldr	r2, [pc, #84]	; (8010c18 <SEGGER_SYSVIEW_Start+0xa8>)
 8010bc4:	6892      	ldr	r2, [r2, #8]
 8010bc6:	e004      	b.n	8010bd2 <SEGGER_SYSVIEW_Start+0x62>
 8010bc8:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8010bcc:	f803 1b01 	strb.w	r1, [r3], #1
 8010bd0:	09d2      	lsrs	r2, r2, #7
 8010bd2:	2a7f      	cmp	r2, #127	; 0x7f
 8010bd4:	d8f8      	bhi.n	8010bc8 <SEGGER_SYSVIEW_Start+0x58>
 8010bd6:	f803 2b01 	strb.w	r2, [r3], #1
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8010bda:	4a0f      	ldr	r2, [pc, #60]	; (8010c18 <SEGGER_SYSVIEW_Start+0xa8>)
 8010bdc:	6912      	ldr	r2, [r2, #16]
 8010bde:	e004      	b.n	8010bea <SEGGER_SYSVIEW_Start+0x7a>
 8010be0:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8010be4:	f803 1b01 	strb.w	r1, [r3], #1
 8010be8:	09d2      	lsrs	r2, r2, #7
 8010bea:	2a7f      	cmp	r2, #127	; 0x7f
 8010bec:	d8f8      	bhi.n	8010be0 <SEGGER_SYSVIEW_Start+0x70>
 8010bee:	4619      	mov	r1, r3
 8010bf0:	f801 2b02 	strb.w	r2, [r1], #2
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	705a      	strb	r2, [r3, #1]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8010bf8:	2218      	movs	r2, #24
 8010bfa:	f000 f861 	bl	8010cc0 <_SendPacket>
      RECORD_END();
 8010bfe:	f384 8811 	msr	BASEPRI, r4
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8010c02:	4b05      	ldr	r3, [pc, #20]	; (8010c18 <SEGGER_SYSVIEW_Start+0xa8>)
 8010c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c06:	b103      	cbz	r3, 8010c0a <SEGGER_SYSVIEW_Start+0x9a>
      _SYSVIEW_Globals.pfSendSysDesc();
 8010c08:	4798      	blx	r3
    SEGGER_SYSVIEW_RecordSystime();
 8010c0a:	f000 f97d 	bl	8010f08 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8010c0e:	f7ff ff6d 	bl	8010aec <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8010c12:	f7ff ff8b 	bl	8010b2c <SEGGER_SYSVIEW_SendNumModules>
}
 8010c16:	bd38      	pop	{r3, r4, r5, pc}
 8010c18:	20009cfc 	.word	0x20009cfc
 8010c1c:	080169dc 	.word	0x080169dc
 8010c20:	2000ad24 	.word	0x2000ad24

08010c24 <_HandleIncomingPacket>:
static void _HandleIncomingPacket(void) {
 8010c24:	b500      	push	{lr}
 8010c26:	b083      	sub	sp, #12
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8010c28:	2201      	movs	r2, #1
 8010c2a:	f10d 0107 	add.w	r1, sp, #7
 8010c2e:	4b23      	ldr	r3, [pc, #140]	; (8010cbc <_HandleIncomingPacket+0x98>)
 8010c30:	7e18      	ldrb	r0, [r3, #24]
 8010c32:	f7ff fd8f 	bl	8010754 <SEGGER_RTT_ReadNoLock>
  if (Status > 0) {
 8010c36:	b308      	cbz	r0, 8010c7c <_HandleIncomingPacket+0x58>
    switch (Cmd) {
 8010c38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010c3c:	2b07      	cmp	r3, #7
 8010c3e:	d80a      	bhi.n	8010c56 <_HandleIncomingPacket+0x32>
 8010c40:	b25a      	sxtb	r2, r3
 8010c42:	b382      	cbz	r2, 8010ca6 <_HandleIncomingPacket+0x82>
 8010c44:	1e5a      	subs	r2, r3, #1
 8010c46:	2a06      	cmp	r2, #6
 8010c48:	d82d      	bhi.n	8010ca6 <_HandleIncomingPacket+0x82>
 8010c4a:	e8df f002 	tbb	[pc, r2]
 8010c4e:	1a15      	.short	0x1a15
 8010c50:	2623201d 	.word	0x2623201d
 8010c54:	29          	.byte	0x29
 8010c55:	00          	.byte	0x00
 8010c56:	2b7f      	cmp	r3, #127	; 0x7f
 8010c58:	d010      	beq.n	8010c7c <_HandleIncomingPacket+0x58>
 8010c5a:	2b80      	cmp	r3, #128	; 0x80
 8010c5c:	d123      	bne.n	8010ca6 <_HandleIncomingPacket+0x82>
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8010c5e:	2201      	movs	r2, #1
 8010c60:	f10d 0107 	add.w	r1, sp, #7
 8010c64:	4b15      	ldr	r3, [pc, #84]	; (8010cbc <_HandleIncomingPacket+0x98>)
 8010c66:	7e18      	ldrb	r0, [r3, #24]
 8010c68:	f7ff fd74 	bl	8010754 <SEGGER_RTT_ReadNoLock>
      if (Status > 0) {
 8010c6c:	b130      	cbz	r0, 8010c7c <_HandleIncomingPacket+0x58>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8010c6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010c72:	f000 fb39 	bl	80112e8 <SEGGER_SYSVIEW_SendModule>
 8010c76:	e001      	b.n	8010c7c <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_Start();
 8010c78:	f7ff ff7a 	bl	8010b70 <SEGGER_SYSVIEW_Start>
}
 8010c7c:	b003      	add	sp, #12
 8010c7e:	f85d fb04 	ldr.w	pc, [sp], #4
      SEGGER_SYSVIEW_Stop();
 8010c82:	f000 f9d9 	bl	8011038 <SEGGER_SYSVIEW_Stop>
      break;
 8010c86:	e7f9      	b.n	8010c7c <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_RecordSystime();
 8010c88:	f000 f93e 	bl	8010f08 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8010c8c:	e7f6      	b.n	8010c7c <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_SendTaskList();
 8010c8e:	f7ff ff2d 	bl	8010aec <SEGGER_SYSVIEW_SendTaskList>
      break;
 8010c92:	e7f3      	b.n	8010c7c <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_GetSysDesc();
 8010c94:	f000 f9ec 	bl	8011070 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8010c98:	e7f0      	b.n	8010c7c <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_SendNumModules();
 8010c9a:	f7ff ff47 	bl	8010b2c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8010c9e:	e7ed      	b.n	8010c7c <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_SendModuleDescription();
 8010ca0:	f7ff ff34 	bl	8010b0c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8010ca4:	e7ea      	b.n	8010c7c <_HandleIncomingPacket+0x58>
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8010ca6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010caa:	d0e7      	beq.n	8010c7c <_HandleIncomingPacket+0x58>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8010cac:	2201      	movs	r2, #1
 8010cae:	f10d 0107 	add.w	r1, sp, #7
 8010cb2:	4b02      	ldr	r3, [pc, #8]	; (8010cbc <_HandleIncomingPacket+0x98>)
 8010cb4:	7e18      	ldrb	r0, [r3, #24]
 8010cb6:	f7ff fd4d 	bl	8010754 <SEGGER_RTT_ReadNoLock>
}
 8010cba:	e7df      	b.n	8010c7c <_HandleIncomingPacket+0x58>
 8010cbc:	20009cfc 	.word	0x20009cfc

08010cc0 <_SendPacket>:
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8010cc0:	b570      	push	{r4, r5, r6, lr}
 8010cc2:	4606      	mov	r6, r0
 8010cc4:	460c      	mov	r4, r1
 8010cc6:	4615      	mov	r5, r2
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8010cc8:	4b5d      	ldr	r3, [pc, #372]	; (8010e40 <_SendPacket+0x180>)
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	2b01      	cmp	r3, #1
 8010cce:	d004      	beq.n	8010cda <_SendPacket+0x1a>
  if (_SYSVIEW_Globals.EnableState == 0) {
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	f000 8094 	beq.w	8010dfe <_SendPacket+0x13e>
  if (_SYSVIEW_Globals.EnableState == 2) {
 8010cd6:	2b02      	cmp	r3, #2
 8010cd8:	d013      	beq.n	8010d02 <_SendPacket+0x42>
  if (EventId < 32) {
 8010cda:	2d1f      	cmp	r5, #31
 8010cdc:	d806      	bhi.n	8010cec <_SendPacket+0x2c>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8010cde:	4b58      	ldr	r3, [pc, #352]	; (8010e40 <_SendPacket+0x180>)
 8010ce0:	69db      	ldr	r3, [r3, #28]
 8010ce2:	40eb      	lsrs	r3, r5
 8010ce4:	f013 0f01 	tst.w	r3, #1
 8010ce8:	f040 8089 	bne.w	8010dfe <_SendPacket+0x13e>
  if (EventId < 24) {
 8010cec:	2d17      	cmp	r5, #23
 8010cee:	d80f      	bhi.n	8010d10 <_SendPacket+0x50>
    *--pStartPacket = (U8)EventId;
 8010cf0:	1e71      	subs	r1, r6, #1
 8010cf2:	f806 5c01 	strb.w	r5, [r6, #-1]
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8010cf6:	4b53      	ldr	r3, [pc, #332]	; (8010e44 <_SendPacket+0x184>)
 8010cf8:	685d      	ldr	r5, [r3, #4]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8010cfa:	4b51      	ldr	r3, [pc, #324]	; (8010e40 <_SendPacket+0x180>)
 8010cfc:	68db      	ldr	r3, [r3, #12]
 8010cfe:	1aeb      	subs	r3, r5, r3
  ENCODE_U32(pEndPacket, Delta);
 8010d00:	e071      	b.n	8010de6 <_SendPacket+0x126>
    _TrySendOverflowPacket();
 8010d02:	f7ff fe7d 	bl	8010a00 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8010d06:	4b4e      	ldr	r3, [pc, #312]	; (8010e40 <_SendPacket+0x180>)
 8010d08:	781b      	ldrb	r3, [r3, #0]
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d177      	bne.n	8010dfe <_SendPacket+0x13e>
Send:
 8010d0e:	e7e4      	b.n	8010cda <_SendPacket+0x1a>
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8010d10:	1ba3      	subs	r3, r4, r6
    if (NumBytes > 127) {
 8010d12:	2b7f      	cmp	r3, #127	; 0x7f
 8010d14:	d90e      	bls.n	8010d34 <_SendPacket+0x74>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8010d16:	f3c3 12c7 	ubfx	r2, r3, #7, #8
 8010d1a:	f806 2c01 	strb.w	r2, [r6, #-1]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8010d1e:	1eb2      	subs	r2, r6, #2
 8010d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d24:	f806 3c02 	strb.w	r3, [r6, #-2]
    if (EventId < 127) {
 8010d28:	2d7e      	cmp	r5, #126	; 0x7e
 8010d2a:	d807      	bhi.n	8010d3c <_SendPacket+0x7c>
      *--pStartPacket = (U8)EventId;
 8010d2c:	1e51      	subs	r1, r2, #1
 8010d2e:	f802 5c01 	strb.w	r5, [r2, #-1]
 8010d32:	e7e0      	b.n	8010cf6 <_SendPacket+0x36>
      *--pStartPacket = (U8)NumBytes;
 8010d34:	1e72      	subs	r2, r6, #1
 8010d36:	f806 3c01 	strb.w	r3, [r6, #-1]
 8010d3a:	e7f5      	b.n	8010d28 <_SendPacket+0x68>
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8010d3c:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 8010d40:	d209      	bcs.n	8010d56 <_SendPacket+0x96>
        *--pStartPacket = (U8)(EventId >>  7);
 8010d42:	f3c5 13c7 	ubfx	r3, r5, #7, #8
 8010d46:	f802 3c01 	strb.w	r3, [r2, #-1]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010d4a:	1e91      	subs	r1, r2, #2
 8010d4c:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8010d50:	f802 5c02 	strb.w	r5, [r2, #-2]
 8010d54:	e7cf      	b.n	8010cf6 <_SendPacket+0x36>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8010d56:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8010d5a:	d20e      	bcs.n	8010d7a <_SendPacket+0xba>
        *--pStartPacket = (U8)(EventId >> 14);
 8010d5c:	f3c5 3387 	ubfx	r3, r5, #14, #8
 8010d60:	f802 3c01 	strb.w	r3, [r2, #-1]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8010d64:	09eb      	lsrs	r3, r5, #7
 8010d66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d6a:	f802 3c02 	strb.w	r3, [r2, #-2]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010d6e:	1ed1      	subs	r1, r2, #3
 8010d70:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8010d74:	f802 5c03 	strb.w	r5, [r2, #-3]
 8010d78:	e7bd      	b.n	8010cf6 <_SendPacket+0x36>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8010d7a:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8010d7e:	d213      	bcs.n	8010da8 <_SendPacket+0xe8>
        *--pStartPacket = (U8)(EventId >> 21);
 8010d80:	f3c5 5347 	ubfx	r3, r5, #21, #8
 8010d84:	f802 3c01 	strb.w	r3, [r2, #-1]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8010d88:	0bab      	lsrs	r3, r5, #14
 8010d8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d8e:	f802 3c02 	strb.w	r3, [r2, #-2]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8010d92:	09eb      	lsrs	r3, r5, #7
 8010d94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d98:	f802 3c03 	strb.w	r3, [r2, #-3]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010d9c:	1f11      	subs	r1, r2, #4
 8010d9e:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8010da2:	f802 5c04 	strb.w	r5, [r2, #-4]
 8010da6:	e7a6      	b.n	8010cf6 <_SendPacket+0x36>
        *--pStartPacket = (U8)(EventId >> 28);
 8010da8:	0f2b      	lsrs	r3, r5, #28
 8010daa:	f802 3c01 	strb.w	r3, [r2, #-1]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8010dae:	0d6b      	lsrs	r3, r5, #21
 8010db0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010db4:	f802 3c02 	strb.w	r3, [r2, #-2]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8010db8:	0bab      	lsrs	r3, r5, #14
 8010dba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010dbe:	f802 3c03 	strb.w	r3, [r2, #-3]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8010dc2:	09eb      	lsrs	r3, r5, #7
 8010dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010dc8:	f802 3c04 	strb.w	r3, [r2, #-4]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010dcc:	1f51      	subs	r1, r2, #5
 8010dce:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8010dd2:	f802 5c05 	strb.w	r5, [r2, #-5]
 8010dd6:	e78e      	b.n	8010cf6 <_SendPacket+0x36>
  ENCODE_U32(pEndPacket, Delta);
 8010dd8:	4622      	mov	r2, r4
 8010dda:	f063 007f 	orn	r0, r3, #127	; 0x7f
 8010dde:	f802 0b01 	strb.w	r0, [r2], #1
 8010de2:	09db      	lsrs	r3, r3, #7
 8010de4:	4614      	mov	r4, r2
 8010de6:	2b7f      	cmp	r3, #127	; 0x7f
 8010de8:	d8f6      	bhi.n	8010dd8 <_SendPacket+0x118>
 8010dea:	f804 3b01 	strb.w	r3, [r4], #1
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8010dee:	1a62      	subs	r2, r4, r1
 8010df0:	4b13      	ldr	r3, [pc, #76]	; (8010e40 <_SendPacket+0x180>)
 8010df2:	7858      	ldrb	r0, [r3, #1]
 8010df4:	f7ef fa14 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
  if (Status) {
 8010df8:	b1a0      	cbz	r0, 8010e24 <_SendPacket+0x164>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8010dfa:	4b11      	ldr	r3, [pc, #68]	; (8010e40 <_SendPacket+0x180>)
 8010dfc:	60dd      	str	r5, [r3, #12]
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8010dfe:	4b10      	ldr	r3, [pc, #64]	; (8010e40 <_SendPacket+0x180>)
 8010e00:	7e1b      	ldrb	r3, [r3, #24]
 8010e02:	4a11      	ldr	r2, [pc, #68]	; (8010e48 <_SendPacket+0x188>)
 8010e04:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010e08:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8010e0c:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 8010e0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010e12:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010e16:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8010e18:	4299      	cmp	r1, r3
 8010e1a:	d002      	beq.n	8010e22 <_SendPacket+0x162>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8010e1c:	4b08      	ldr	r3, [pc, #32]	; (8010e40 <_SendPacket+0x180>)
 8010e1e:	789b      	ldrb	r3, [r3, #2]
 8010e20:	b12b      	cbz	r3, 8010e2e <_SendPacket+0x16e>
}
 8010e22:	bd70      	pop	{r4, r5, r6, pc}
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8010e24:	4a06      	ldr	r2, [pc, #24]	; (8010e40 <_SendPacket+0x180>)
 8010e26:	7813      	ldrb	r3, [r2, #0]
 8010e28:	3301      	adds	r3, #1
 8010e2a:	7013      	strb	r3, [r2, #0]
 8010e2c:	e7e7      	b.n	8010dfe <_SendPacket+0x13e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8010e2e:	4c04      	ldr	r4, [pc, #16]	; (8010e40 <_SendPacket+0x180>)
 8010e30:	2301      	movs	r3, #1
 8010e32:	70a3      	strb	r3, [r4, #2]
      _HandleIncomingPacket();
 8010e34:	f7ff fef6 	bl	8010c24 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	70a3      	strb	r3, [r4, #2]
}
 8010e3c:	e7f1      	b.n	8010e22 <_SendPacket+0x162>
 8010e3e:	bf00      	nop
 8010e40:	20009cfc 	.word	0x20009cfc
 8010e44:	e0001000 	.word	0xe0001000
 8010e48:	20009838 	.word	0x20009838

08010e4c <SEGGER_SYSVIEW_RecordVoid>:
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8010e4c:	b538      	push	{r3, r4, r5, lr}
 8010e4e:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8010e50:	f3ef 8511 	mrs	r5, BASEPRI
 8010e54:	f04f 0120 	mov.w	r1, #32
 8010e58:	f381 8811 	msr	BASEPRI, r1
 8010e5c:	4804      	ldr	r0, [pc, #16]	; (8010e70 <SEGGER_SYSVIEW_RecordVoid+0x24>)
 8010e5e:	f7ff fdcd 	bl	80109fc <_PreparePacket>
 8010e62:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8010e64:	4622      	mov	r2, r4
 8010e66:	f7ff ff2b 	bl	8010cc0 <_SendPacket>
  RECORD_END();
 8010e6a:	f385 8811 	msr	BASEPRI, r5
}
 8010e6e:	bd38      	pop	{r3, r4, r5, pc}
 8010e70:	2000ad24 	.word	0x2000ad24

08010e74 <SEGGER_SYSVIEW_RecordU32>:
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8010e74:	b570      	push	{r4, r5, r6, lr}
 8010e76:	4606      	mov	r6, r0
 8010e78:	460c      	mov	r4, r1
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8010e7a:	f3ef 8511 	mrs	r5, BASEPRI
 8010e7e:	f04f 0120 	mov.w	r1, #32
 8010e82:	f381 8811 	msr	BASEPRI, r1
 8010e86:	480a      	ldr	r0, [pc, #40]	; (8010eb0 <SEGGER_SYSVIEW_RecordU32+0x3c>)
 8010e88:	f7ff fdb8 	bl	80109fc <_PreparePacket>
  ENCODE_U32(pPayload, Value);
 8010e8c:	4601      	mov	r1, r0
 8010e8e:	e004      	b.n	8010e9a <SEGGER_SYSVIEW_RecordU32+0x26>
 8010e90:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8010e94:	f801 3b01 	strb.w	r3, [r1], #1
 8010e98:	09e4      	lsrs	r4, r4, #7
 8010e9a:	2c7f      	cmp	r4, #127	; 0x7f
 8010e9c:	d8f8      	bhi.n	8010e90 <SEGGER_SYSVIEW_RecordU32+0x1c>
 8010e9e:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010ea2:	4632      	mov	r2, r6
 8010ea4:	f7ff ff0c 	bl	8010cc0 <_SendPacket>
  RECORD_END();
 8010ea8:	f385 8811 	msr	BASEPRI, r5
}
 8010eac:	bd70      	pop	{r4, r5, r6, pc}
 8010eae:	bf00      	nop
 8010eb0:	2000ad24 	.word	0x2000ad24

08010eb4 <SEGGER_SYSVIEW_RecordU32x2>:
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8010eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eb6:	4606      	mov	r6, r0
 8010eb8:	460f      	mov	r7, r1
 8010eba:	4614      	mov	r4, r2
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8010ebc:	f3ef 8511 	mrs	r5, BASEPRI
 8010ec0:	f04f 0120 	mov.w	r1, #32
 8010ec4:	f381 8811 	msr	BASEPRI, r1
 8010ec8:	480e      	ldr	r0, [pc, #56]	; (8010f04 <SEGGER_SYSVIEW_RecordU32x2+0x50>)
 8010eca:	f7ff fd97 	bl	80109fc <_PreparePacket>
  ENCODE_U32(pPayload, Para0);
 8010ece:	4601      	mov	r1, r0
 8010ed0:	e004      	b.n	8010edc <SEGGER_SYSVIEW_RecordU32x2+0x28>
 8010ed2:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8010ed6:	f801 3b01 	strb.w	r3, [r1], #1
 8010eda:	09ff      	lsrs	r7, r7, #7
 8010edc:	2f7f      	cmp	r7, #127	; 0x7f
 8010ede:	d8f8      	bhi.n	8010ed2 <SEGGER_SYSVIEW_RecordU32x2+0x1e>
 8010ee0:	f801 7b01 	strb.w	r7, [r1], #1
  ENCODE_U32(pPayload, Para1);
 8010ee4:	e004      	b.n	8010ef0 <SEGGER_SYSVIEW_RecordU32x2+0x3c>
 8010ee6:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8010eea:	f801 3b01 	strb.w	r3, [r1], #1
 8010eee:	09e4      	lsrs	r4, r4, #7
 8010ef0:	2c7f      	cmp	r4, #127	; 0x7f
 8010ef2:	d8f8      	bhi.n	8010ee6 <SEGGER_SYSVIEW_RecordU32x2+0x32>
 8010ef4:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010ef8:	4632      	mov	r2, r6
 8010efa:	f7ff fee1 	bl	8010cc0 <_SendPacket>
  RECORD_END();
 8010efe:	f385 8811 	msr	BASEPRI, r5
}
 8010f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f04:	2000ad24 	.word	0x2000ad24

08010f08 <SEGGER_SYSVIEW_RecordSystime>:
void SEGGER_SYSVIEW_RecordSystime(void) {
 8010f08:	b508      	push	{r3, lr}
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8010f0a:	4b09      	ldr	r3, [pc, #36]	; (8010f30 <SEGGER_SYSVIEW_RecordSystime+0x28>)
 8010f0c:	6a1b      	ldr	r3, [r3, #32]
 8010f0e:	b143      	cbz	r3, 8010f22 <SEGGER_SYSVIEW_RecordSystime+0x1a>
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	b133      	cbz	r3, 8010f22 <SEGGER_SYSVIEW_RecordSystime+0x1a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8010f14:	4798      	blx	r3
 8010f16:	460a      	mov	r2, r1
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8010f18:	4601      	mov	r1, r0
 8010f1a:	200d      	movs	r0, #13
 8010f1c:	f7ff ffca 	bl	8010eb4 <SEGGER_SYSVIEW_RecordU32x2>
}
 8010f20:	bd08      	pop	{r3, pc}
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8010f22:	4b04      	ldr	r3, [pc, #16]	; (8010f34 <SEGGER_SYSVIEW_RecordSystime+0x2c>)
 8010f24:	6859      	ldr	r1, [r3, #4]
 8010f26:	200c      	movs	r0, #12
 8010f28:	f7ff ffa4 	bl	8010e74 <SEGGER_SYSVIEW_RecordU32>
}
 8010f2c:	e7f8      	b.n	8010f20 <SEGGER_SYSVIEW_RecordSystime+0x18>
 8010f2e:	bf00      	nop
 8010f30:	20009cfc 	.word	0x20009cfc
 8010f34:	e0001000 	.word	0xe0001000

08010f38 <SEGGER_SYSVIEW_RecordU32x3>:
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8010f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f3c:	4606      	mov	r6, r0
 8010f3e:	4688      	mov	r8, r1
 8010f40:	4617      	mov	r7, r2
 8010f42:	461c      	mov	r4, r3
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8010f44:	f3ef 8511 	mrs	r5, BASEPRI
 8010f48:	f04f 0120 	mov.w	r1, #32
 8010f4c:	f381 8811 	msr	BASEPRI, r1
 8010f50:	4815      	ldr	r0, [pc, #84]	; (8010fa8 <SEGGER_SYSVIEW_RecordU32x3+0x70>)
 8010f52:	f7ff fd53 	bl	80109fc <_PreparePacket>
  ENCODE_U32(pPayload, Para0);
 8010f56:	4601      	mov	r1, r0
 8010f58:	e005      	b.n	8010f66 <SEGGER_SYSVIEW_RecordU32x3+0x2e>
 8010f5a:	f068 037f 	orn	r3, r8, #127	; 0x7f
 8010f5e:	f801 3b01 	strb.w	r3, [r1], #1
 8010f62:	ea4f 18d8 	mov.w	r8, r8, lsr #7
 8010f66:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8010f6a:	d8f6      	bhi.n	8010f5a <SEGGER_SYSVIEW_RecordU32x3+0x22>
 8010f6c:	f801 8b01 	strb.w	r8, [r1], #1
  ENCODE_U32(pPayload, Para1);
 8010f70:	e004      	b.n	8010f7c <SEGGER_SYSVIEW_RecordU32x3+0x44>
 8010f72:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8010f76:	f801 3b01 	strb.w	r3, [r1], #1
 8010f7a:	09ff      	lsrs	r7, r7, #7
 8010f7c:	2f7f      	cmp	r7, #127	; 0x7f
 8010f7e:	d8f8      	bhi.n	8010f72 <SEGGER_SYSVIEW_RecordU32x3+0x3a>
 8010f80:	f801 7b01 	strb.w	r7, [r1], #1
  ENCODE_U32(pPayload, Para2);
 8010f84:	e004      	b.n	8010f90 <SEGGER_SYSVIEW_RecordU32x3+0x58>
 8010f86:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8010f8a:	f801 3b01 	strb.w	r3, [r1], #1
 8010f8e:	09e4      	lsrs	r4, r4, #7
 8010f90:	2c7f      	cmp	r4, #127	; 0x7f
 8010f92:	d8f8      	bhi.n	8010f86 <SEGGER_SYSVIEW_RecordU32x3+0x4e>
 8010f94:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010f98:	4632      	mov	r2, r6
 8010f9a:	f7ff fe91 	bl	8010cc0 <_SendPacket>
  RECORD_END();
 8010f9e:	f385 8811 	msr	BASEPRI, r5
}
 8010fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fa6:	bf00      	nop
 8010fa8:	2000ad24 	.word	0x2000ad24

08010fac <SEGGER_SYSVIEW_RecordU32x4>:
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8010fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fb0:	4606      	mov	r6, r0
 8010fb2:	4689      	mov	r9, r1
 8010fb4:	4690      	mov	r8, r2
 8010fb6:	461f      	mov	r7, r3
 8010fb8:	9c08      	ldr	r4, [sp, #32]
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8010fba:	f3ef 8511 	mrs	r5, BASEPRI
 8010fbe:	f04f 0120 	mov.w	r1, #32
 8010fc2:	f381 8811 	msr	BASEPRI, r1
 8010fc6:	481b      	ldr	r0, [pc, #108]	; (8011034 <SEGGER_SYSVIEW_RecordU32x4+0x88>)
 8010fc8:	f7ff fd18 	bl	80109fc <_PreparePacket>
  ENCODE_U32(pPayload, Para0);
 8010fcc:	4601      	mov	r1, r0
 8010fce:	e005      	b.n	8010fdc <SEGGER_SYSVIEW_RecordU32x4+0x30>
 8010fd0:	f069 037f 	orn	r3, r9, #127	; 0x7f
 8010fd4:	f801 3b01 	strb.w	r3, [r1], #1
 8010fd8:	ea4f 19d9 	mov.w	r9, r9, lsr #7
 8010fdc:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
 8010fe0:	d8f6      	bhi.n	8010fd0 <SEGGER_SYSVIEW_RecordU32x4+0x24>
 8010fe2:	f801 9b01 	strb.w	r9, [r1], #1
  ENCODE_U32(pPayload, Para1);
 8010fe6:	e005      	b.n	8010ff4 <SEGGER_SYSVIEW_RecordU32x4+0x48>
 8010fe8:	f068 037f 	orn	r3, r8, #127	; 0x7f
 8010fec:	f801 3b01 	strb.w	r3, [r1], #1
 8010ff0:	ea4f 18d8 	mov.w	r8, r8, lsr #7
 8010ff4:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8010ff8:	d8f6      	bhi.n	8010fe8 <SEGGER_SYSVIEW_RecordU32x4+0x3c>
 8010ffa:	f801 8b01 	strb.w	r8, [r1], #1
  ENCODE_U32(pPayload, Para2);
 8010ffe:	e004      	b.n	801100a <SEGGER_SYSVIEW_RecordU32x4+0x5e>
 8011000:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8011004:	f801 3b01 	strb.w	r3, [r1], #1
 8011008:	09ff      	lsrs	r7, r7, #7
 801100a:	2f7f      	cmp	r7, #127	; 0x7f
 801100c:	d8f8      	bhi.n	8011000 <SEGGER_SYSVIEW_RecordU32x4+0x54>
 801100e:	f801 7b01 	strb.w	r7, [r1], #1
  ENCODE_U32(pPayload, Para3);
 8011012:	e004      	b.n	801101e <SEGGER_SYSVIEW_RecordU32x4+0x72>
 8011014:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8011018:	f801 3b01 	strb.w	r3, [r1], #1
 801101c:	09e4      	lsrs	r4, r4, #7
 801101e:	2c7f      	cmp	r4, #127	; 0x7f
 8011020:	d8f8      	bhi.n	8011014 <SEGGER_SYSVIEW_RecordU32x4+0x68>
 8011022:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8011026:	4632      	mov	r2, r6
 8011028:	f7ff fe4a 	bl	8010cc0 <_SendPacket>
  RECORD_END();
 801102c:	f385 8811 	msr	BASEPRI, r5
}
 8011030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011034:	2000ad24 	.word	0x2000ad24

08011038 <SEGGER_SYSVIEW_Stop>:
void SEGGER_SYSVIEW_Stop(void) {
 8011038:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801103a:	f3ef 8411 	mrs	r4, BASEPRI
 801103e:	f04f 0120 	mov.w	r1, #32
 8011042:	f381 8811 	msr	BASEPRI, r1
 8011046:	4808      	ldr	r0, [pc, #32]	; (8011068 <SEGGER_SYSVIEW_Stop+0x30>)
 8011048:	f7ff fcd8 	bl	80109fc <_PreparePacket>
  if (_SYSVIEW_Globals.EnableState) {
 801104c:	4b07      	ldr	r3, [pc, #28]	; (801106c <SEGGER_SYSVIEW_Stop+0x34>)
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	b913      	cbnz	r3, 8011058 <SEGGER_SYSVIEW_Stop+0x20>
  RECORD_END();
 8011052:	f384 8811 	msr	BASEPRI, r4
}
 8011056:	bd10      	pop	{r4, pc}
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8011058:	220b      	movs	r2, #11
 801105a:	4601      	mov	r1, r0
 801105c:	f7ff fe30 	bl	8010cc0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8011060:	4b02      	ldr	r3, [pc, #8]	; (801106c <SEGGER_SYSVIEW_Stop+0x34>)
 8011062:	2200      	movs	r2, #0
 8011064:	701a      	strb	r2, [r3, #0]
 8011066:	e7f4      	b.n	8011052 <SEGGER_SYSVIEW_Stop+0x1a>
 8011068:	2000ad24 	.word	0x2000ad24
 801106c:	20009cfc 	.word	0x20009cfc

08011070 <SEGGER_SYSVIEW_GetSysDesc>:
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8011070:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8011072:	f3ef 8411 	mrs	r4, BASEPRI
 8011076:	f04f 0120 	mov.w	r1, #32
 801107a:	f381 8811 	msr	BASEPRI, r1
 801107e:	481a      	ldr	r0, [pc, #104]	; (80110e8 <SEGGER_SYSVIEW_GetSysDesc+0x78>)
 8011080:	f7ff fcbc 	bl	80109fc <_PreparePacket>
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8011084:	4b19      	ldr	r3, [pc, #100]	; (80110ec <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 8011086:	685a      	ldr	r2, [r3, #4]
 8011088:	4603      	mov	r3, r0
 801108a:	e004      	b.n	8011096 <SEGGER_SYSVIEW_GetSysDesc+0x26>
 801108c:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8011090:	f803 1b01 	strb.w	r1, [r3], #1
 8011094:	09d2      	lsrs	r2, r2, #7
 8011096:	2a7f      	cmp	r2, #127	; 0x7f
 8011098:	d8f8      	bhi.n	801108c <SEGGER_SYSVIEW_GetSysDesc+0x1c>
 801109a:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 801109e:	4a13      	ldr	r2, [pc, #76]	; (80110ec <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 80110a0:	6892      	ldr	r2, [r2, #8]
 80110a2:	e004      	b.n	80110ae <SEGGER_SYSVIEW_GetSysDesc+0x3e>
 80110a4:	f062 017f 	orn	r1, r2, #127	; 0x7f
 80110a8:	f803 1b01 	strb.w	r1, [r3], #1
 80110ac:	09d2      	lsrs	r2, r2, #7
 80110ae:	2a7f      	cmp	r2, #127	; 0x7f
 80110b0:	d8f8      	bhi.n	80110a4 <SEGGER_SYSVIEW_GetSysDesc+0x34>
 80110b2:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80110b6:	4a0d      	ldr	r2, [pc, #52]	; (80110ec <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 80110b8:	6912      	ldr	r2, [r2, #16]
 80110ba:	e004      	b.n	80110c6 <SEGGER_SYSVIEW_GetSysDesc+0x56>
 80110bc:	f062 017f 	orn	r1, r2, #127	; 0x7f
 80110c0:	f803 1b01 	strb.w	r1, [r3], #1
 80110c4:	09d2      	lsrs	r2, r2, #7
 80110c6:	2a7f      	cmp	r2, #127	; 0x7f
 80110c8:	d8f8      	bhi.n	80110bc <SEGGER_SYSVIEW_GetSysDesc+0x4c>
 80110ca:	4619      	mov	r1, r3
 80110cc:	f801 2b02 	strb.w	r2, [r1], #2
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80110d0:	2200      	movs	r2, #0
 80110d2:	705a      	strb	r2, [r3, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80110d4:	2218      	movs	r2, #24
 80110d6:	f7ff fdf3 	bl	8010cc0 <_SendPacket>
  RECORD_END();
 80110da:	f384 8811 	msr	BASEPRI, r4
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80110de:	4b03      	ldr	r3, [pc, #12]	; (80110ec <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 80110e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e2:	b103      	cbz	r3, 80110e6 <SEGGER_SYSVIEW_GetSysDesc+0x76>
    _SYSVIEW_Globals.pfSendSysDesc();
 80110e4:	4798      	blx	r3
}
 80110e6:	bd10      	pop	{r4, pc}
 80110e8:	2000ad24 	.word	0x2000ad24
 80110ec:	20009cfc 	.word	0x20009cfc

080110f0 <SEGGER_SYSVIEW_SendTaskInfo>:
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80110f0:	b570      	push	{r4, r5, r6, lr}
 80110f2:	4606      	mov	r6, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80110f4:	f3ef 8511 	mrs	r5, BASEPRI
 80110f8:	f04f 0120 	mov.w	r1, #32
 80110fc:	f381 8811 	msr	BASEPRI, r1
 8011100:	482a      	ldr	r0, [pc, #168]	; (80111ac <SEGGER_SYSVIEW_SendTaskInfo+0xbc>)
 8011102:	f7ff fc7b 	bl	80109fc <_PreparePacket>
 8011106:	4604      	mov	r4, r0
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8011108:	6833      	ldr	r3, [r6, #0]
 801110a:	4a29      	ldr	r2, [pc, #164]	; (80111b0 <SEGGER_SYSVIEW_SendTaskInfo+0xc0>)
 801110c:	6912      	ldr	r2, [r2, #16]
 801110e:	1a9b      	subs	r3, r3, r2
 8011110:	e004      	b.n	801111c <SEGGER_SYSVIEW_SendTaskInfo+0x2c>
 8011112:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8011116:	f800 2b01 	strb.w	r2, [r0], #1
 801111a:	09db      	lsrs	r3, r3, #7
 801111c:	2b7f      	cmp	r3, #127	; 0x7f
 801111e:	d8f8      	bhi.n	8011112 <SEGGER_SYSVIEW_SendTaskInfo+0x22>
 8011120:	f800 3b01 	strb.w	r3, [r0], #1
  ENCODE_U32(pPayload, pInfo->Prio);
 8011124:	68b3      	ldr	r3, [r6, #8]
 8011126:	e004      	b.n	8011132 <SEGGER_SYSVIEW_SendTaskInfo+0x42>
 8011128:	f063 027f 	orn	r2, r3, #127	; 0x7f
 801112c:	f800 2b01 	strb.w	r2, [r0], #1
 8011130:	09db      	lsrs	r3, r3, #7
 8011132:	2b7f      	cmp	r3, #127	; 0x7f
 8011134:	d8f8      	bhi.n	8011128 <SEGGER_SYSVIEW_SendTaskInfo+0x38>
 8011136:	f800 3b01 	strb.w	r3, [r0], #1
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 801113a:	2220      	movs	r2, #32
 801113c:	6871      	ldr	r1, [r6, #4]
 801113e:	f7ff fc27 	bl	8010990 <_EncodeStr>
 8011142:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8011144:	2209      	movs	r2, #9
 8011146:	4620      	mov	r0, r4
 8011148:	f7ff fdba 	bl	8010cc0 <_SendPacket>
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 801114c:	6832      	ldr	r2, [r6, #0]
 801114e:	4b18      	ldr	r3, [pc, #96]	; (80111b0 <SEGGER_SYSVIEW_SendTaskInfo+0xc0>)
 8011150:	691b      	ldr	r3, [r3, #16]
 8011152:	1ad2      	subs	r2, r2, r3
 8011154:	4623      	mov	r3, r4
 8011156:	e004      	b.n	8011162 <SEGGER_SYSVIEW_SendTaskInfo+0x72>
 8011158:	f062 017f 	orn	r1, r2, #127	; 0x7f
 801115c:	f803 1b01 	strb.w	r1, [r3], #1
 8011160:	09d2      	lsrs	r2, r2, #7
 8011162:	2a7f      	cmp	r2, #127	; 0x7f
 8011164:	d8f8      	bhi.n	8011158 <SEGGER_SYSVIEW_SendTaskInfo+0x68>
 8011166:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, pInfo->StackBase);
 801116a:	68f2      	ldr	r2, [r6, #12]
 801116c:	e004      	b.n	8011178 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 801116e:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8011172:	f803 1b01 	strb.w	r1, [r3], #1
 8011176:	09d2      	lsrs	r2, r2, #7
 8011178:	2a7f      	cmp	r2, #127	; 0x7f
 801117a:	d8f8      	bhi.n	801116e <SEGGER_SYSVIEW_SendTaskInfo+0x7e>
 801117c:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, pInfo->StackSize);
 8011180:	6932      	ldr	r2, [r6, #16]
 8011182:	e004      	b.n	801118e <SEGGER_SYSVIEW_SendTaskInfo+0x9e>
 8011184:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8011188:	f803 1b01 	strb.w	r1, [r3], #1
 801118c:	09d2      	lsrs	r2, r2, #7
 801118e:	2a7f      	cmp	r2, #127	; 0x7f
 8011190:	d8f8      	bhi.n	8011184 <SEGGER_SYSVIEW_SendTaskInfo+0x94>
 8011192:	4619      	mov	r1, r3
 8011194:	f801 2b02 	strb.w	r2, [r1], #2
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8011198:	2200      	movs	r2, #0
 801119a:	705a      	strb	r2, [r3, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 801119c:	2215      	movs	r2, #21
 801119e:	4620      	mov	r0, r4
 80111a0:	f7ff fd8e 	bl	8010cc0 <_SendPacket>
  RECORD_END();
 80111a4:	f385 8811 	msr	BASEPRI, r5
}
 80111a8:	bd70      	pop	{r4, r5, r6, pc}
 80111aa:	bf00      	nop
 80111ac:	2000ad24 	.word	0x2000ad24
 80111b0:	20009cfc 	.word	0x20009cfc

080111b4 <SEGGER_SYSVIEW_SendSysDesc>:
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80111b4:	b570      	push	{r4, r5, r6, lr}
 80111b6:	4605      	mov	r5, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80111b8:	f3ef 8611 	mrs	r6, BASEPRI
 80111bc:	f04f 0120 	mov.w	r1, #32
 80111c0:	f381 8811 	msr	BASEPRI, r1
 80111c4:	4807      	ldr	r0, [pc, #28]	; (80111e4 <SEGGER_SYSVIEW_SendSysDesc+0x30>)
 80111c6:	f7ff fc19 	bl	80109fc <_PreparePacket>
 80111ca:	4604      	mov	r4, r0
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80111cc:	2280      	movs	r2, #128	; 0x80
 80111ce:	4629      	mov	r1, r5
 80111d0:	f7ff fbde 	bl	8010990 <_EncodeStr>
 80111d4:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80111d6:	220e      	movs	r2, #14
 80111d8:	4620      	mov	r0, r4
 80111da:	f7ff fd71 	bl	8010cc0 <_SendPacket>
  RECORD_END();
 80111de:	f386 8811 	msr	BASEPRI, r6
}
 80111e2:	bd70      	pop	{r4, r5, r6, pc}
 80111e4:	2000ad24 	.word	0x2000ad24

080111e8 <SEGGER_SYSVIEW_OnIdle>:
void SEGGER_SYSVIEW_OnIdle(void) {
 80111e8:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80111ea:	f3ef 8411 	mrs	r4, BASEPRI
 80111ee:	f04f 0120 	mov.w	r1, #32
 80111f2:	f381 8811 	msr	BASEPRI, r1
 80111f6:	4805      	ldr	r0, [pc, #20]	; (801120c <SEGGER_SYSVIEW_OnIdle+0x24>)
 80111f8:	f7ff fc00 	bl	80109fc <_PreparePacket>
 80111fc:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80111fe:	2211      	movs	r2, #17
 8011200:	f7ff fd5e 	bl	8010cc0 <_SendPacket>
  RECORD_END();
 8011204:	f384 8811 	msr	BASEPRI, r4
}
 8011208:	bd10      	pop	{r4, pc}
 801120a:	bf00      	nop
 801120c:	2000ad24 	.word	0x2000ad24

08011210 <SEGGER_SYSVIEW_OnTaskCreate>:
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8011210:	b538      	push	{r3, r4, r5, lr}
 8011212:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8011214:	f3ef 8511 	mrs	r5, BASEPRI
 8011218:	f04f 0120 	mov.w	r1, #32
 801121c:	f381 8811 	msr	BASEPRI, r1
 8011220:	480b      	ldr	r0, [pc, #44]	; (8011250 <SEGGER_SYSVIEW_OnTaskCreate+0x40>)
 8011222:	f7ff fbeb 	bl	80109fc <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 8011226:	4b0b      	ldr	r3, [pc, #44]	; (8011254 <SEGGER_SYSVIEW_OnTaskCreate+0x44>)
 8011228:	691b      	ldr	r3, [r3, #16]
 801122a:	1ae3      	subs	r3, r4, r3
  ENCODE_U32(pPayload, TaskId);
 801122c:	4601      	mov	r1, r0
 801122e:	e004      	b.n	801123a <SEGGER_SYSVIEW_OnTaskCreate+0x2a>
 8011230:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8011234:	f801 2b01 	strb.w	r2, [r1], #1
 8011238:	09db      	lsrs	r3, r3, #7
 801123a:	2b7f      	cmp	r3, #127	; 0x7f
 801123c:	d8f8      	bhi.n	8011230 <SEGGER_SYSVIEW_OnTaskCreate+0x20>
 801123e:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8011242:	2208      	movs	r2, #8
 8011244:	f7ff fd3c 	bl	8010cc0 <_SendPacket>
  RECORD_END();
 8011248:	f385 8811 	msr	BASEPRI, r5
}
 801124c:	bd38      	pop	{r3, r4, r5, pc}
 801124e:	bf00      	nop
 8011250:	2000ad24 	.word	0x2000ad24
 8011254:	20009cfc 	.word	0x20009cfc

08011258 <SEGGER_SYSVIEW_OnTaskStartExec>:
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8011258:	b538      	push	{r3, r4, r5, lr}
 801125a:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801125c:	f3ef 8511 	mrs	r5, BASEPRI
 8011260:	f04f 0120 	mov.w	r1, #32
 8011264:	f381 8811 	msr	BASEPRI, r1
 8011268:	480b      	ldr	r0, [pc, #44]	; (8011298 <SEGGER_SYSVIEW_OnTaskStartExec+0x40>)
 801126a:	f7ff fbc7 	bl	80109fc <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 801126e:	4b0b      	ldr	r3, [pc, #44]	; (801129c <SEGGER_SYSVIEW_OnTaskStartExec+0x44>)
 8011270:	691b      	ldr	r3, [r3, #16]
 8011272:	1ae3      	subs	r3, r4, r3
  ENCODE_U32(pPayload, TaskId);
 8011274:	4601      	mov	r1, r0
 8011276:	e004      	b.n	8011282 <SEGGER_SYSVIEW_OnTaskStartExec+0x2a>
 8011278:	f063 027f 	orn	r2, r3, #127	; 0x7f
 801127c:	f801 2b01 	strb.w	r2, [r1], #1
 8011280:	09db      	lsrs	r3, r3, #7
 8011282:	2b7f      	cmp	r3, #127	; 0x7f
 8011284:	d8f8      	bhi.n	8011278 <SEGGER_SYSVIEW_OnTaskStartExec+0x20>
 8011286:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 801128a:	2204      	movs	r2, #4
 801128c:	f7ff fd18 	bl	8010cc0 <_SendPacket>
  RECORD_END();
 8011290:	f385 8811 	msr	BASEPRI, r5
}
 8011294:	bd38      	pop	{r3, r4, r5, pc}
 8011296:	bf00      	nop
 8011298:	2000ad24 	.word	0x2000ad24
 801129c:	20009cfc 	.word	0x20009cfc

080112a0 <SEGGER_SYSVIEW_OnTaskStartReady>:
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80112a0:	b538      	push	{r3, r4, r5, lr}
 80112a2:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80112a4:	f3ef 8511 	mrs	r5, BASEPRI
 80112a8:	f04f 0120 	mov.w	r1, #32
 80112ac:	f381 8811 	msr	BASEPRI, r1
 80112b0:	480b      	ldr	r0, [pc, #44]	; (80112e0 <SEGGER_SYSVIEW_OnTaskStartReady+0x40>)
 80112b2:	f7ff fba3 	bl	80109fc <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 80112b6:	4b0b      	ldr	r3, [pc, #44]	; (80112e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x44>)
 80112b8:	691b      	ldr	r3, [r3, #16]
 80112ba:	1ae3      	subs	r3, r4, r3
  ENCODE_U32(pPayload, TaskId);
 80112bc:	4601      	mov	r1, r0
 80112be:	e004      	b.n	80112ca <SEGGER_SYSVIEW_OnTaskStartReady+0x2a>
 80112c0:	f063 027f 	orn	r2, r3, #127	; 0x7f
 80112c4:	f801 2b01 	strb.w	r2, [r1], #1
 80112c8:	09db      	lsrs	r3, r3, #7
 80112ca:	2b7f      	cmp	r3, #127	; 0x7f
 80112cc:	d8f8      	bhi.n	80112c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x20>
 80112ce:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80112d2:	2206      	movs	r2, #6
 80112d4:	f7ff fcf4 	bl	8010cc0 <_SendPacket>
  RECORD_END();
 80112d8:	f385 8811 	msr	BASEPRI, r5
}
 80112dc:	bd38      	pop	{r3, r4, r5, pc}
 80112de:	bf00      	nop
 80112e0:	2000ad24 	.word	0x2000ad24
 80112e4:	20009cfc 	.word	0x20009cfc

080112e8 <SEGGER_SYSVIEW_SendModule>:
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80112e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_pFirstModule != 0) {
 80112ea:	4b1b      	ldr	r3, [pc, #108]	; (8011358 <SEGGER_SYSVIEW_SendModule+0x70>)
 80112ec:	681c      	ldr	r4, [r3, #0]
 80112ee:	b394      	cbz	r4, 8011356 <SEGGER_SYSVIEW_SendModule+0x6e>
    for (n = 0; n < ModuleId; n++) {
 80112f0:	2300      	movs	r3, #0
 80112f2:	4607      	mov	r7, r0
 80112f4:	4298      	cmp	r0, r3
 80112f6:	d903      	bls.n	8011300 <SEGGER_SYSVIEW_SendModule+0x18>
      pModule = pModule->pNext;
 80112f8:	6924      	ldr	r4, [r4, #16]
      if (pModule == 0) {
 80112fa:	b10c      	cbz	r4, 8011300 <SEGGER_SYSVIEW_SendModule+0x18>
    for (n = 0; n < ModuleId; n++) {
 80112fc:	3301      	adds	r3, #1
 80112fe:	e7f8      	b.n	80112f2 <SEGGER_SYSVIEW_SendModule+0xa>
    if (pModule != 0) {
 8011300:	b34c      	cbz	r4, 8011356 <SEGGER_SYSVIEW_SendModule+0x6e>
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8011302:	f3ef 8611 	mrs	r6, BASEPRI
 8011306:	f04f 0120 	mov.w	r1, #32
 801130a:	f381 8811 	msr	BASEPRI, r1
 801130e:	4813      	ldr	r0, [pc, #76]	; (801135c <SEGGER_SYSVIEW_SendModule+0x74>)
 8011310:	f7ff fb74 	bl	80109fc <_PreparePacket>
 8011314:	4605      	mov	r5, r0
      ENCODE_U32(pPayload, ModuleId);
 8011316:	e004      	b.n	8011322 <SEGGER_SYSVIEW_SendModule+0x3a>
 8011318:	f067 037f 	orn	r3, r7, #127	; 0x7f
 801131c:	f800 3b01 	strb.w	r3, [r0], #1
 8011320:	09ff      	lsrs	r7, r7, #7
 8011322:	2f7f      	cmp	r7, #127	; 0x7f
 8011324:	d8f8      	bhi.n	8011318 <SEGGER_SYSVIEW_SendModule+0x30>
 8011326:	f800 7b01 	strb.w	r7, [r0], #1
      ENCODE_U32(pPayload, (pModule->EventOffset));
 801132a:	68a3      	ldr	r3, [r4, #8]
 801132c:	e004      	b.n	8011338 <SEGGER_SYSVIEW_SendModule+0x50>
 801132e:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8011332:	f800 2b01 	strb.w	r2, [r0], #1
 8011336:	09db      	lsrs	r3, r3, #7
 8011338:	2b7f      	cmp	r3, #127	; 0x7f
 801133a:	d8f8      	bhi.n	801132e <SEGGER_SYSVIEW_SendModule+0x46>
 801133c:	f800 3b01 	strb.w	r3, [r0], #1
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8011340:	2280      	movs	r2, #128	; 0x80
 8011342:	6821      	ldr	r1, [r4, #0]
 8011344:	f7ff fb24 	bl	8010990 <_EncodeStr>
 8011348:	4601      	mov	r1, r0
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 801134a:	2216      	movs	r2, #22
 801134c:	4628      	mov	r0, r5
 801134e:	f7ff fcb7 	bl	8010cc0 <_SendPacket>
      RECORD_END();
 8011352:	f386 8811 	msr	BASEPRI, r6
}
 8011356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011358:	2000ae08 	.word	0x2000ae08
 801135c:	2000ad24 	.word	0x2000ad24

08011360 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8011360:	b570      	push	{r4, r5, r6, lr}
 8011362:	4605      	mov	r5, r0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8011364:	f3ef 8611 	mrs	r6, BASEPRI
 8011368:	f04f 0120 	mov.w	r1, #32
 801136c:	f381 8811 	msr	BASEPRI, r1
 8011370:	480a      	ldr	r0, [pc, #40]	; (801139c <SEGGER_SYSVIEW_Warn+0x3c>)
 8011372:	f7ff fb43 	bl	80109fc <_PreparePacket>
 8011376:	4604      	mov	r4, r0
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8011378:	2280      	movs	r2, #128	; 0x80
 801137a:	4629      	mov	r1, r5
 801137c:	f7ff fb08 	bl	8010990 <_EncodeStr>
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8011380:	4601      	mov	r1, r0
 8011382:	2301      	movs	r3, #1
 8011384:	f801 3b02 	strb.w	r3, [r1], #2
  ENCODE_U32(pPayload, 0);
 8011388:	2300      	movs	r3, #0
 801138a:	7043      	strb	r3, [r0, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 801138c:	221a      	movs	r2, #26
 801138e:	4620      	mov	r0, r4
 8011390:	f7ff fc96 	bl	8010cc0 <_SendPacket>
  RECORD_END();
 8011394:	f386 8811 	msr	BASEPRI, r6
}
 8011398:	bd70      	pop	{r4, r5, r6, pc}
 801139a:	bf00      	nop
 801139c:	2000ad24 	.word	0x2000ad24

080113a0 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80113a0:	b510      	push	{r4, lr}
 80113a2:	4611      	mov	r1, r2
 80113a4:	461c      	mov	r4, r3
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80113a6:	461a      	mov	r2, r3
 80113a8:	2000      	movs	r0, #0
 80113aa:	f7ff fa59 	bl	8010860 <SEGGER_RTT_Write>
  return len;
}
 80113ae:	4620      	mov	r0, r4
 80113b0:	bd10      	pop	{r4, pc}
	...

080113b4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80113b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80113b6:	2200      	movs	r2, #0
 80113b8:	490f      	ldr	r1, [pc, #60]	; (80113f8 <MX_USB_Device_Init+0x44>)
 80113ba:	4810      	ldr	r0, [pc, #64]	; (80113fc <MX_USB_Device_Init+0x48>)
 80113bc:	f7f6 fb3b 	bl	8007a36 <USBD_Init>
 80113c0:	b970      	cbnz	r0, 80113e0 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80113c2:	490f      	ldr	r1, [pc, #60]	; (8011400 <MX_USB_Device_Init+0x4c>)
 80113c4:	480d      	ldr	r0, [pc, #52]	; (80113fc <MX_USB_Device_Init+0x48>)
 80113c6:	f7f6 fb4d 	bl	8007a64 <USBD_RegisterClass>
 80113ca:	b960      	cbnz	r0, 80113e6 <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80113cc:	490d      	ldr	r1, [pc, #52]	; (8011404 <MX_USB_Device_Init+0x50>)
 80113ce:	480b      	ldr	r0, [pc, #44]	; (80113fc <MX_USB_Device_Init+0x48>)
 80113d0:	f7f6 fae3 	bl	800799a <USBD_CDC_RegisterInterface>
 80113d4:	b950      	cbnz	r0, 80113ec <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80113d6:	4809      	ldr	r0, [pc, #36]	; (80113fc <MX_USB_Device_Init+0x48>)
 80113d8:	f7f6 fb5b 	bl	8007a92 <USBD_Start>
 80113dc:	b948      	cbnz	r0, 80113f2 <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80113de:	bd08      	pop	{r3, pc}
    Error_Handler();
 80113e0:	f7ef fbf0 	bl	8000bc4 <Error_Handler>
 80113e4:	e7ed      	b.n	80113c2 <MX_USB_Device_Init+0xe>
    Error_Handler();
 80113e6:	f7ef fbed 	bl	8000bc4 <Error_Handler>
 80113ea:	e7ef      	b.n	80113cc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80113ec:	f7ef fbea 	bl	8000bc4 <Error_Handler>
 80113f0:	e7f1      	b.n	80113d6 <MX_USB_Device_Init+0x22>
    Error_Handler();
 80113f2:	f7ef fbe7 	bl	8000bc4 <Error_Handler>
}
 80113f6:	e7f2      	b.n	80113de <MX_USB_Device_Init+0x2a>
 80113f8:	200015b0 	.word	0x200015b0
 80113fc:	2000ae0c 	.word	0x2000ae0c
 8011400:	2000000c 	.word	0x2000000c
 8011404:	2000159c 	.word	0x2000159c

08011408 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8011408:	2000      	movs	r0, #0
 801140a:	4770      	bx	lr

0801140c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 801140c:	2000      	movs	r0, #0
 801140e:	4770      	bx	lr

08011410 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8011410:	2000      	movs	r0, #0
 8011412:	4770      	bx	lr

08011414 <CDC_Receive_FS>:
{
 8011414:	b510      	push	{r4, lr}
 8011416:	4601      	mov	r1, r0
	dataReceivedFlag =1;
 8011418:	4b05      	ldr	r3, [pc, #20]	; (8011430 <CDC_Receive_FS+0x1c>)
 801141a:	2201      	movs	r2, #1
 801141c:	701a      	strb	r2, [r3, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801141e:	4c05      	ldr	r4, [pc, #20]	; (8011434 <CDC_Receive_FS+0x20>)
 8011420:	4620      	mov	r0, r4
 8011422:	f7f6 facc 	bl	80079be <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011426:	4620      	mov	r0, r4
 8011428:	f7f6 faec 	bl	8007a04 <USBD_CDC_ReceivePacket>
}
 801142c:	2000      	movs	r0, #0
 801142e:	bd10      	pop	{r4, pc}
 8011430:	2000c0dc 	.word	0x2000c0dc
 8011434:	2000ae0c 	.word	0x2000ae0c

08011438 <CDC_Init_FS>:
{
 8011438:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801143a:	4c06      	ldr	r4, [pc, #24]	; (8011454 <CDC_Init_FS+0x1c>)
 801143c:	2200      	movs	r2, #0
 801143e:	4906      	ldr	r1, [pc, #24]	; (8011458 <CDC_Init_FS+0x20>)
 8011440:	4620      	mov	r0, r4
 8011442:	f7f6 fab1 	bl	80079a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011446:	4905      	ldr	r1, [pc, #20]	; (801145c <CDC_Init_FS+0x24>)
 8011448:	4620      	mov	r0, r4
 801144a:	f7f6 fab8 	bl	80079be <USBD_CDC_SetRxBuffer>
}
 801144e:	2000      	movs	r0, #0
 8011450:	bd10      	pop	{r4, pc}
 8011452:	bf00      	nop
 8011454:	2000ae0c 	.word	0x2000ae0c
 8011458:	2000b8dc 	.word	0x2000b8dc
 801145c:	2000b0dc 	.word	0x2000b0dc

08011460 <CDC_Transmit_FS>:
{
 8011460:	b510      	push	{r4, lr}
 8011462:	460a      	mov	r2, r1
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011464:	4c04      	ldr	r4, [pc, #16]	; (8011478 <CDC_Transmit_FS+0x18>)
 8011466:	4601      	mov	r1, r0
 8011468:	4620      	mov	r0, r4
 801146a:	f7f6 fa9d 	bl	80079a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801146e:	4620      	mov	r0, r4
 8011470:	f7f6 faae 	bl	80079d0 <USBD_CDC_TransmitPacket>
}
 8011474:	bd10      	pop	{r4, pc}
 8011476:	bf00      	nop
 8011478:	2000ae0c 	.word	0x2000ae0c

0801147c <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801147c:	2312      	movs	r3, #18
 801147e:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 8011480:	4800      	ldr	r0, [pc, #0]	; (8011484 <USBD_CDC_DeviceDescriptor+0x8>)
 8011482:	4770      	bx	lr
 8011484:	200015d0 	.word	0x200015d0

08011488 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011488:	2304      	movs	r3, #4
 801148a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 801148c:	4800      	ldr	r0, [pc, #0]	; (8011490 <USBD_CDC_LangIDStrDescriptor+0x8>)
 801148e:	4770      	bx	lr
 8011490:	200015e4 	.word	0x200015e4

08011494 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8011494:	2300      	movs	r3, #0
 8011496:	4293      	cmp	r3, r2
 8011498:	d21e      	bcs.n	80114d8 <IntToUnicode+0x44>
{
 801149a:	b500      	push	{lr}
 801149c:	e010      	b.n	80114c0 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801149e:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 80114a2:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 80114a6:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 80114a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80114ac:	f10c 0c01 	add.w	ip, ip, #1
 80114b0:	f04f 0e00 	mov.w	lr, #0
 80114b4:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 80114b8:	3301      	adds	r3, #1
 80114ba:	b2db      	uxtb	r3, r3
 80114bc:	4293      	cmp	r3, r2
 80114be:	d209      	bcs.n	80114d4 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 80114c0:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 80114c4:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 80114c8:	d2e9      	bcs.n	801149e <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 80114ca:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80114ce:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 80114d2:	e7e8      	b.n	80114a6 <IntToUnicode+0x12>
  }
}
 80114d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80114d8:	4770      	bx	lr
	...

080114dc <Get_SerialNum>:
{
 80114dc:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80114de:	4b0b      	ldr	r3, [pc, #44]	; (801150c <Get_SerialNum+0x30>)
 80114e0:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80114e4:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80114e8:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 80114ec:	18c0      	adds	r0, r0, r3
 80114ee:	d100      	bne.n	80114f2 <Get_SerialNum+0x16>
}
 80114f0:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80114f2:	4d07      	ldr	r5, [pc, #28]	; (8011510 <Get_SerialNum+0x34>)
 80114f4:	2208      	movs	r2, #8
 80114f6:	1ca9      	adds	r1, r5, #2
 80114f8:	f7ff ffcc 	bl	8011494 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80114fc:	2204      	movs	r2, #4
 80114fe:	f105 0112 	add.w	r1, r5, #18
 8011502:	4620      	mov	r0, r4
 8011504:	f7ff ffc6 	bl	8011494 <IntToUnicode>
}
 8011508:	e7f2      	b.n	80114f0 <Get_SerialNum+0x14>
 801150a:	bf00      	nop
 801150c:	1fff7000 	.word	0x1fff7000
 8011510:	200015e8 	.word	0x200015e8

08011514 <USBD_CDC_SerialStrDescriptor>:
{
 8011514:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8011516:	231a      	movs	r3, #26
 8011518:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 801151a:	f7ff ffdf 	bl	80114dc <Get_SerialNum>
}
 801151e:	4801      	ldr	r0, [pc, #4]	; (8011524 <USBD_CDC_SerialStrDescriptor+0x10>)
 8011520:	bd08      	pop	{r3, pc}
 8011522:	bf00      	nop
 8011524:	200015e8 	.word	0x200015e8

08011528 <USBD_CDC_ProductStrDescriptor>:
{
 8011528:	b508      	push	{r3, lr}
 801152a:	460a      	mov	r2, r1
  if(speed == 0)
 801152c:	b928      	cbnz	r0, 801153a <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801152e:	4905      	ldr	r1, [pc, #20]	; (8011544 <USBD_CDC_ProductStrDescriptor+0x1c>)
 8011530:	4805      	ldr	r0, [pc, #20]	; (8011548 <USBD_CDC_ProductStrDescriptor+0x20>)
 8011532:	f7f6 ff2a 	bl	800838a <USBD_GetString>
}
 8011536:	4803      	ldr	r0, [pc, #12]	; (8011544 <USBD_CDC_ProductStrDescriptor+0x1c>)
 8011538:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801153a:	4902      	ldr	r1, [pc, #8]	; (8011544 <USBD_CDC_ProductStrDescriptor+0x1c>)
 801153c:	4802      	ldr	r0, [pc, #8]	; (8011548 <USBD_CDC_ProductStrDescriptor+0x20>)
 801153e:	f7f6 ff24 	bl	800838a <USBD_GetString>
 8011542:	e7f8      	b.n	8011536 <USBD_CDC_ProductStrDescriptor+0xe>
 8011544:	2000c0e0 	.word	0x2000c0e0
 8011548:	080169e8 	.word	0x080169e8

0801154c <USBD_CDC_ManufacturerStrDescriptor>:
{
 801154c:	b510      	push	{r4, lr}
 801154e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011550:	4c03      	ldr	r4, [pc, #12]	; (8011560 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 8011552:	4621      	mov	r1, r4
 8011554:	4803      	ldr	r0, [pc, #12]	; (8011564 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 8011556:	f7f6 ff18 	bl	800838a <USBD_GetString>
}
 801155a:	4620      	mov	r0, r4
 801155c:	bd10      	pop	{r4, pc}
 801155e:	bf00      	nop
 8011560:	2000c0e0 	.word	0x2000c0e0
 8011564:	08016a00 	.word	0x08016a00

08011568 <USBD_CDC_ConfigStrDescriptor>:
{
 8011568:	b508      	push	{r3, lr}
 801156a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 801156c:	b928      	cbnz	r0, 801157a <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801156e:	4905      	ldr	r1, [pc, #20]	; (8011584 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8011570:	4805      	ldr	r0, [pc, #20]	; (8011588 <USBD_CDC_ConfigStrDescriptor+0x20>)
 8011572:	f7f6 ff0a 	bl	800838a <USBD_GetString>
}
 8011576:	4803      	ldr	r0, [pc, #12]	; (8011584 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8011578:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801157a:	4902      	ldr	r1, [pc, #8]	; (8011584 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 801157c:	4802      	ldr	r0, [pc, #8]	; (8011588 <USBD_CDC_ConfigStrDescriptor+0x20>)
 801157e:	f7f6 ff04 	bl	800838a <USBD_GetString>
 8011582:	e7f8      	b.n	8011576 <USBD_CDC_ConfigStrDescriptor+0xe>
 8011584:	2000c0e0 	.word	0x2000c0e0
 8011588:	08016a14 	.word	0x08016a14

0801158c <USBD_CDC_InterfaceStrDescriptor>:
{
 801158c:	b508      	push	{r3, lr}
 801158e:	460a      	mov	r2, r1
  if(speed == 0)
 8011590:	b928      	cbnz	r0, 801159e <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011592:	4905      	ldr	r1, [pc, #20]	; (80115a8 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 8011594:	4805      	ldr	r0, [pc, #20]	; (80115ac <USBD_CDC_InterfaceStrDescriptor+0x20>)
 8011596:	f7f6 fef8 	bl	800838a <USBD_GetString>
}
 801159a:	4803      	ldr	r0, [pc, #12]	; (80115a8 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 801159c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801159e:	4902      	ldr	r1, [pc, #8]	; (80115a8 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 80115a0:	4802      	ldr	r0, [pc, #8]	; (80115ac <USBD_CDC_InterfaceStrDescriptor+0x20>)
 80115a2:	f7f6 fef2 	bl	800838a <USBD_GetString>
 80115a6:	e7f8      	b.n	801159a <USBD_CDC_InterfaceStrDescriptor+0xe>
 80115a8:	2000c0e0 	.word	0x2000c0e0
 80115ac:	08016a20 	.word	0x08016a20

080115b0 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80115b0:	2803      	cmp	r0, #3
 80115b2:	d805      	bhi.n	80115c0 <USBD_Get_USB_Status+0x10>
 80115b4:	e8df f000 	tbb	[pc, r0]
 80115b8:	05020405 	.word	0x05020405
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80115bc:	2001      	movs	r0, #1
    break;
 80115be:	4770      	bx	lr
      usb_status = USBD_FAIL;
 80115c0:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80115c2:	4770      	bx	lr

080115c4 <SystemClockConfig_Resume>:
{
 80115c4:	b508      	push	{r3, lr}
  SystemClock_Config();
 80115c6:	f7ef faff 	bl	8000bc8 <SystemClock_Config>
}
 80115ca:	bd08      	pop	{r3, pc}

080115cc <HAL_PCD_MspInit>:
{
 80115cc:	b510      	push	{r4, lr}
 80115ce:	b096      	sub	sp, #88	; 0x58
 80115d0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80115d2:	2254      	movs	r2, #84	; 0x54
 80115d4:	2100      	movs	r1, #0
 80115d6:	a801      	add	r0, sp, #4
 80115d8:	f000 fad8 	bl	8011b8c <memset>
  if(pcdHandle->Instance==USB)
 80115dc:	6822      	ldr	r2, [r4, #0]
 80115de:	4b11      	ldr	r3, [pc, #68]	; (8011624 <HAL_PCD_MspInit+0x58>)
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d001      	beq.n	80115e8 <HAL_PCD_MspInit+0x1c>
}
 80115e4:	b016      	add	sp, #88	; 0x58
 80115e6:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80115e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80115ec:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80115ee:	a801      	add	r0, sp, #4
 80115f0:	f7f2 fdb8 	bl	8004164 <HAL_RCCEx_PeriphCLKConfig>
 80115f4:	b990      	cbnz	r0, 801161c <HAL_PCD_MspInit+0x50>
    __HAL_RCC_USB_CLK_ENABLE();
 80115f6:	4b0c      	ldr	r3, [pc, #48]	; (8011628 <HAL_PCD_MspInit+0x5c>)
 80115f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80115fa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80115fe:	659a      	str	r2, [r3, #88]	; 0x58
 8011600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011606:	9300      	str	r3, [sp, #0]
 8011608:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801160a:	2200      	movs	r2, #0
 801160c:	2105      	movs	r1, #5
 801160e:	2014      	movs	r0, #20
 8011610:	f7ef fde6 	bl	80011e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011614:	2014      	movs	r0, #20
 8011616:	f7ef fe29 	bl	800126c <HAL_NVIC_EnableIRQ>
}
 801161a:	e7e3      	b.n	80115e4 <HAL_PCD_MspInit+0x18>
      Error_Handler();
 801161c:	f7ef fad2 	bl	8000bc4 <Error_Handler>
 8011620:	e7e9      	b.n	80115f6 <HAL_PCD_MspInit+0x2a>
 8011622:	bf00      	nop
 8011624:	40005c00 	.word	0x40005c00
 8011628:	40021000 	.word	0x40021000

0801162c <HAL_PCD_SetupStageCallback>:
{
 801162c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801162e:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8011632:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8011636:	f7f6 fa41 	bl	8007abc <USBD_LL_SetupStage>
}
 801163a:	bd08      	pop	{r3, pc}

0801163c <HAL_PCD_DataOutStageCallback>:
{
 801163c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801163e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8011642:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8011646:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 801164a:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 801164e:	f7f6 fa61 	bl	8007b14 <USBD_LL_DataOutStage>
}
 8011652:	bd08      	pop	{r3, pc}

08011654 <HAL_PCD_DataInStageCallback>:
{
 8011654:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011656:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 801165a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801165e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011660:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8011664:	f7f6 fa92 	bl	8007b8c <USBD_LL_DataInStage>
}
 8011668:	bd08      	pop	{r3, pc}

0801166a <HAL_PCD_SOFCallback>:
{
 801166a:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801166c:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8011670:	f7f6 fb32 	bl	8007cd8 <USBD_LL_SOF>
}
 8011674:	bd08      	pop	{r3, pc}

08011676 <HAL_PCD_ResetCallback>:
{
 8011676:	b510      	push	{r4, lr}
 8011678:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801167a:	6883      	ldr	r3, [r0, #8]
 801167c:	2b02      	cmp	r3, #2
 801167e:	d109      	bne.n	8011694 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011680:	2101      	movs	r1, #1
 8011682:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8011686:	f7f6 fb0d 	bl	8007ca4 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801168a:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 801168e:	f7f6 fadc 	bl	8007c4a <USBD_LL_Reset>
}
 8011692:	bd10      	pop	{r4, pc}
    Error_Handler();
 8011694:	f7ef fa96 	bl	8000bc4 <Error_Handler>
 8011698:	e7f2      	b.n	8011680 <HAL_PCD_ResetCallback+0xa>
	...

0801169c <HAL_PCD_SuspendCallback>:
{
 801169c:	b510      	push	{r4, lr}
 801169e:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80116a0:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80116a4:	f7f6 fb01 	bl	8007caa <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80116a8:	69a3      	ldr	r3, [r4, #24]
 80116aa:	b123      	cbz	r3, 80116b6 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80116ac:	4a02      	ldr	r2, [pc, #8]	; (80116b8 <HAL_PCD_SuspendCallback+0x1c>)
 80116ae:	6913      	ldr	r3, [r2, #16]
 80116b0:	f043 0306 	orr.w	r3, r3, #6
 80116b4:	6113      	str	r3, [r2, #16]
}
 80116b6:	bd10      	pop	{r4, pc}
 80116b8:	e000ed00 	.word	0xe000ed00

080116bc <HAL_PCD_ResumeCallback>:
{
 80116bc:	b510      	push	{r4, lr}
 80116be:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 80116c0:	6983      	ldr	r3, [r0, #24]
 80116c2:	b923      	cbnz	r3, 80116ce <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80116c4:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 80116c8:	f7f6 faf9 	bl	8007cbe <USBD_LL_Resume>
}
 80116cc:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80116ce:	4a04      	ldr	r2, [pc, #16]	; (80116e0 <HAL_PCD_ResumeCallback+0x24>)
 80116d0:	6913      	ldr	r3, [r2, #16]
 80116d2:	f023 0306 	bic.w	r3, r3, #6
 80116d6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80116d8:	f7ff ff74 	bl	80115c4 <SystemClockConfig_Resume>
 80116dc:	e7f2      	b.n	80116c4 <HAL_PCD_ResumeCallback+0x8>
 80116de:	bf00      	nop
 80116e0:	e000ed00 	.word	0xe000ed00

080116e4 <USBD_LL_Init>:
{
 80116e4:	b510      	push	{r4, lr}
 80116e6:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80116e8:	481e      	ldr	r0, [pc, #120]	; (8011764 <USBD_LL_Init+0x80>)
 80116ea:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 80116ee:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 80116f2:	4b1d      	ldr	r3, [pc, #116]	; (8011768 <USBD_LL_Init+0x84>)
 80116f4:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80116f6:	2308      	movs	r3, #8
 80116f8:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80116fa:	2302      	movs	r3, #2
 80116fc:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80116fe:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011700:	2300      	movs	r3, #0
 8011702:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011704:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011706:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011708:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801170a:	f7f0 ffd1 	bl	80026b0 <HAL_PCD_Init>
 801170e:	bb30      	cbnz	r0, 801175e <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011710:	2318      	movs	r3, #24
 8011712:	2200      	movs	r2, #0
 8011714:	4611      	mov	r1, r2
 8011716:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 801171a:	f7f1 ff11 	bl	8003540 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801171e:	2358      	movs	r3, #88	; 0x58
 8011720:	2200      	movs	r2, #0
 8011722:	2180      	movs	r1, #128	; 0x80
 8011724:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8011728:	f7f1 ff0a 	bl	8003540 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801172c:	23c0      	movs	r3, #192	; 0xc0
 801172e:	2200      	movs	r2, #0
 8011730:	2181      	movs	r1, #129	; 0x81
 8011732:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8011736:	f7f1 ff03 	bl	8003540 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801173a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801173e:	2200      	movs	r2, #0
 8011740:	2101      	movs	r1, #1
 8011742:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8011746:	f7f1 fefb 	bl	8003540 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801174a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801174e:	2200      	movs	r2, #0
 8011750:	2182      	movs	r1, #130	; 0x82
 8011752:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8011756:	f7f1 fef3 	bl	8003540 <HAL_PCDEx_PMAConfig>
}
 801175a:	2000      	movs	r0, #0
 801175c:	bd10      	pop	{r4, pc}
    Error_Handler( );
 801175e:	f7ef fa31 	bl	8000bc4 <Error_Handler>
 8011762:	e7d5      	b.n	8011710 <USBD_LL_Init+0x2c>
 8011764:	2000c2e0 	.word	0x2000c2e0
 8011768:	40005c00 	.word	0x40005c00

0801176c <USBD_LL_Start>:
{
 801176c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 801176e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8011772:	f7f1 f81d 	bl	80027b0 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8011776:	f7ff ff1b 	bl	80115b0 <USBD_Get_USB_Status>
}
 801177a:	bd08      	pop	{r3, pc}

0801177c <USBD_LL_OpenEP>:
{
 801177c:	b508      	push	{r3, lr}
 801177e:	4694      	mov	ip, r2
 8011780:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011782:	4663      	mov	r3, ip
 8011784:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8011788:	f7f1 fda3 	bl	80032d2 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 801178c:	f7ff ff10 	bl	80115b0 <USBD_Get_USB_Status>
}
 8011790:	bd08      	pop	{r3, pc}

08011792 <USBD_LL_CloseEP>:
{
 8011792:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011794:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8011798:	f7f1 fddd 	bl	8003356 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 801179c:	f7ff ff08 	bl	80115b0 <USBD_Get_USB_Status>
}
 80117a0:	bd08      	pop	{r3, pc}

080117a2 <USBD_LL_StallEP>:
{
 80117a2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80117a4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80117a8:	f7f1 fe5a 	bl	8003460 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80117ac:	f7ff ff00 	bl	80115b0 <USBD_Get_USB_Status>
}
 80117b0:	bd08      	pop	{r3, pc}

080117b2 <USBD_LL_ClearStallEP>:
{
 80117b2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80117b4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80117b8:	f7f1 fe87 	bl	80034ca <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80117bc:	f7ff fef8 	bl	80115b0 <USBD_Get_USB_Status>
}
 80117c0:	bd08      	pop	{r3, pc}

080117c2 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80117c2:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80117c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80117ca:	d108      	bne.n	80117de <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80117cc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80117d0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80117d4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80117d8:	f893 016a 	ldrb.w	r0, [r3, #362]	; 0x16a
}
 80117dc:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80117de:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80117e2:	3101      	adds	r1, #1
 80117e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80117e8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80117ec:	7898      	ldrb	r0, [r3, #2]
 80117ee:	4770      	bx	lr

080117f0 <USBD_LL_SetUSBAddress>:
{
 80117f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80117f2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80117f6:	f7f1 fc7f 	bl	80030f8 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80117fa:	f7ff fed9 	bl	80115b0 <USBD_Get_USB_Status>
}
 80117fe:	bd08      	pop	{r3, pc}

08011800 <USBD_LL_Transmit>:
{
 8011800:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011802:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8011806:	f7f1 fe03 	bl	8003410 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 801180a:	f7ff fed1 	bl	80115b0 <USBD_Get_USB_Status>
}
 801180e:	bd08      	pop	{r3, pc}

08011810 <USBD_LL_PrepareReceive>:
{
 8011810:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011812:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8011816:	f7f1 fdd0 	bl	80033ba <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 801181a:	f7ff fec9 	bl	80115b0 <USBD_Get_USB_Status>
}
 801181e:	bd08      	pop	{r3, pc}

08011820 <USBD_LL_GetRxDataSize>:
{
 8011820:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011822:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8011826:	f7f1 fdea 	bl	80033fe <HAL_PCD_EP_GetRxCount>
}
 801182a:	bd08      	pop	{r3, pc}

0801182c <HAL_PCDEx_LPM_Callback>:
{
 801182c:	b510      	push	{r4, lr}
 801182e:	4604      	mov	r4, r0
  switch (msg)
 8011830:	b111      	cbz	r1, 8011838 <HAL_PCDEx_LPM_Callback+0xc>
 8011832:	2901      	cmp	r1, #1
 8011834:	d00f      	beq.n	8011856 <HAL_PCDEx_LPM_Callback+0x2a>
}
 8011836:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8011838:	6983      	ldr	r3, [r0, #24]
 801183a:	b923      	cbnz	r3, 8011846 <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 801183c:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8011840:	f7f6 fa3d 	bl	8007cbe <USBD_LL_Resume>
    break;
 8011844:	e7f7      	b.n	8011836 <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 8011846:	f7ff febd 	bl	80115c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801184a:	4a09      	ldr	r2, [pc, #36]	; (8011870 <HAL_PCDEx_LPM_Callback+0x44>)
 801184c:	6913      	ldr	r3, [r2, #16]
 801184e:	f023 0306 	bic.w	r3, r3, #6
 8011852:	6113      	str	r3, [r2, #16]
 8011854:	e7f2      	b.n	801183c <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 8011856:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 801185a:	f7f6 fa26 	bl	8007caa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801185e:	69a3      	ldr	r3, [r4, #24]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d0e8      	beq.n	8011836 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011864:	4a02      	ldr	r2, [pc, #8]	; (8011870 <HAL_PCDEx_LPM_Callback+0x44>)
 8011866:	6913      	ldr	r3, [r2, #16]
 8011868:	f043 0306 	orr.w	r3, r3, #6
 801186c:	6113      	str	r3, [r2, #16]
}
 801186e:	e7e2      	b.n	8011836 <HAL_PCDEx_LPM_Callback+0xa>
 8011870:	e000ed00 	.word	0xe000ed00

08011874 <USBD_static_malloc>:
}
 8011874:	4800      	ldr	r0, [pc, #0]	; (8011878 <USBD_static_malloc+0x4>)
 8011876:	4770      	bx	lr
 8011878:	2000c5d4 	.word	0x2000c5d4

0801187c <USBD_static_free>:
}
 801187c:	4770      	bx	lr
	...

08011880 <__assert_func>:
 8011880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011882:	4614      	mov	r4, r2
 8011884:	461a      	mov	r2, r3
 8011886:	4b09      	ldr	r3, [pc, #36]	; (80118ac <__assert_func+0x2c>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	4605      	mov	r5, r0
 801188c:	68d8      	ldr	r0, [r3, #12]
 801188e:	b14c      	cbz	r4, 80118a4 <__assert_func+0x24>
 8011890:	4b07      	ldr	r3, [pc, #28]	; (80118b0 <__assert_func+0x30>)
 8011892:	9100      	str	r1, [sp, #0]
 8011894:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011898:	4906      	ldr	r1, [pc, #24]	; (80118b4 <__assert_func+0x34>)
 801189a:	462b      	mov	r3, r5
 801189c:	f000 f8a0 	bl	80119e0 <fiprintf>
 80118a0:	f000 fa40 	bl	8011d24 <abort>
 80118a4:	4b04      	ldr	r3, [pc, #16]	; (80118b8 <__assert_func+0x38>)
 80118a6:	461c      	mov	r4, r3
 80118a8:	e7f3      	b.n	8011892 <__assert_func+0x12>
 80118aa:	bf00      	nop
 80118ac:	2000165c 	.word	0x2000165c
 80118b0:	08016a2e 	.word	0x08016a2e
 80118b4:	08016a3b 	.word	0x08016a3b
 80118b8:	08016a69 	.word	0x08016a69

080118bc <std>:
 80118bc:	2300      	movs	r3, #0
 80118be:	b510      	push	{r4, lr}
 80118c0:	4604      	mov	r4, r0
 80118c2:	e9c0 3300 	strd	r3, r3, [r0]
 80118c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80118ca:	6083      	str	r3, [r0, #8]
 80118cc:	8181      	strh	r1, [r0, #12]
 80118ce:	6643      	str	r3, [r0, #100]	; 0x64
 80118d0:	81c2      	strh	r2, [r0, #14]
 80118d2:	6183      	str	r3, [r0, #24]
 80118d4:	4619      	mov	r1, r3
 80118d6:	2208      	movs	r2, #8
 80118d8:	305c      	adds	r0, #92	; 0x5c
 80118da:	f000 f957 	bl	8011b8c <memset>
 80118de:	4b05      	ldr	r3, [pc, #20]	; (80118f4 <std+0x38>)
 80118e0:	6263      	str	r3, [r4, #36]	; 0x24
 80118e2:	4b05      	ldr	r3, [pc, #20]	; (80118f8 <std+0x3c>)
 80118e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80118e6:	4b05      	ldr	r3, [pc, #20]	; (80118fc <std+0x40>)
 80118e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80118ea:	4b05      	ldr	r3, [pc, #20]	; (8011900 <std+0x44>)
 80118ec:	6224      	str	r4, [r4, #32]
 80118ee:	6323      	str	r3, [r4, #48]	; 0x30
 80118f0:	bd10      	pop	{r4, pc}
 80118f2:	bf00      	nop
 80118f4:	08011a75 	.word	0x08011a75
 80118f8:	08011a97 	.word	0x08011a97
 80118fc:	08011acf 	.word	0x08011acf
 8011900:	08011af3 	.word	0x08011af3

08011904 <stdio_exit_handler>:
 8011904:	4a02      	ldr	r2, [pc, #8]	; (8011910 <stdio_exit_handler+0xc>)
 8011906:	4903      	ldr	r1, [pc, #12]	; (8011914 <stdio_exit_handler+0x10>)
 8011908:	4803      	ldr	r0, [pc, #12]	; (8011918 <stdio_exit_handler+0x14>)
 801190a:	f000 b87b 	b.w	8011a04 <_fwalk_sglue>
 801190e:	bf00      	nop
 8011910:	20001604 	.word	0x20001604
 8011914:	08012889 	.word	0x08012889
 8011918:	20001610 	.word	0x20001610

0801191c <cleanup_stdio>:
 801191c:	6841      	ldr	r1, [r0, #4]
 801191e:	4b0c      	ldr	r3, [pc, #48]	; (8011950 <cleanup_stdio+0x34>)
 8011920:	4299      	cmp	r1, r3
 8011922:	b510      	push	{r4, lr}
 8011924:	4604      	mov	r4, r0
 8011926:	d001      	beq.n	801192c <cleanup_stdio+0x10>
 8011928:	f000 ffae 	bl	8012888 <_fflush_r>
 801192c:	68a1      	ldr	r1, [r4, #8]
 801192e:	4b09      	ldr	r3, [pc, #36]	; (8011954 <cleanup_stdio+0x38>)
 8011930:	4299      	cmp	r1, r3
 8011932:	d002      	beq.n	801193a <cleanup_stdio+0x1e>
 8011934:	4620      	mov	r0, r4
 8011936:	f000 ffa7 	bl	8012888 <_fflush_r>
 801193a:	68e1      	ldr	r1, [r4, #12]
 801193c:	4b06      	ldr	r3, [pc, #24]	; (8011958 <cleanup_stdio+0x3c>)
 801193e:	4299      	cmp	r1, r3
 8011940:	d004      	beq.n	801194c <cleanup_stdio+0x30>
 8011942:	4620      	mov	r0, r4
 8011944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011948:	f000 bf9e 	b.w	8012888 <_fflush_r>
 801194c:	bd10      	pop	{r4, pc}
 801194e:	bf00      	nop
 8011950:	2000c7f4 	.word	0x2000c7f4
 8011954:	2000c85c 	.word	0x2000c85c
 8011958:	2000c8c4 	.word	0x2000c8c4

0801195c <global_stdio_init.part.0>:
 801195c:	b510      	push	{r4, lr}
 801195e:	4b0b      	ldr	r3, [pc, #44]	; (801198c <global_stdio_init.part.0+0x30>)
 8011960:	4c0b      	ldr	r4, [pc, #44]	; (8011990 <global_stdio_init.part.0+0x34>)
 8011962:	4a0c      	ldr	r2, [pc, #48]	; (8011994 <global_stdio_init.part.0+0x38>)
 8011964:	601a      	str	r2, [r3, #0]
 8011966:	4620      	mov	r0, r4
 8011968:	2200      	movs	r2, #0
 801196a:	2104      	movs	r1, #4
 801196c:	f7ff ffa6 	bl	80118bc <std>
 8011970:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011974:	2201      	movs	r2, #1
 8011976:	2109      	movs	r1, #9
 8011978:	f7ff ffa0 	bl	80118bc <std>
 801197c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011980:	2202      	movs	r2, #2
 8011982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011986:	2112      	movs	r1, #18
 8011988:	f7ff bf98 	b.w	80118bc <std>
 801198c:	2000c92c 	.word	0x2000c92c
 8011990:	2000c7f4 	.word	0x2000c7f4
 8011994:	08011905 	.word	0x08011905

08011998 <__sfp_lock_acquire>:
 8011998:	4801      	ldr	r0, [pc, #4]	; (80119a0 <__sfp_lock_acquire+0x8>)
 801199a:	f000 b9b3 	b.w	8011d04 <__retarget_lock_acquire_recursive>
 801199e:	bf00      	nop
 80119a0:	2000c935 	.word	0x2000c935

080119a4 <__sfp_lock_release>:
 80119a4:	4801      	ldr	r0, [pc, #4]	; (80119ac <__sfp_lock_release+0x8>)
 80119a6:	f000 b9ae 	b.w	8011d06 <__retarget_lock_release_recursive>
 80119aa:	bf00      	nop
 80119ac:	2000c935 	.word	0x2000c935

080119b0 <__sinit>:
 80119b0:	b510      	push	{r4, lr}
 80119b2:	4604      	mov	r4, r0
 80119b4:	f7ff fff0 	bl	8011998 <__sfp_lock_acquire>
 80119b8:	6a23      	ldr	r3, [r4, #32]
 80119ba:	b11b      	cbz	r3, 80119c4 <__sinit+0x14>
 80119bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119c0:	f7ff bff0 	b.w	80119a4 <__sfp_lock_release>
 80119c4:	4b04      	ldr	r3, [pc, #16]	; (80119d8 <__sinit+0x28>)
 80119c6:	6223      	str	r3, [r4, #32]
 80119c8:	4b04      	ldr	r3, [pc, #16]	; (80119dc <__sinit+0x2c>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d1f5      	bne.n	80119bc <__sinit+0xc>
 80119d0:	f7ff ffc4 	bl	801195c <global_stdio_init.part.0>
 80119d4:	e7f2      	b.n	80119bc <__sinit+0xc>
 80119d6:	bf00      	nop
 80119d8:	0801191d 	.word	0x0801191d
 80119dc:	2000c92c 	.word	0x2000c92c

080119e0 <fiprintf>:
 80119e0:	b40e      	push	{r1, r2, r3}
 80119e2:	b503      	push	{r0, r1, lr}
 80119e4:	4601      	mov	r1, r0
 80119e6:	ab03      	add	r3, sp, #12
 80119e8:	4805      	ldr	r0, [pc, #20]	; (8011a00 <fiprintf+0x20>)
 80119ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80119ee:	6800      	ldr	r0, [r0, #0]
 80119f0:	9301      	str	r3, [sp, #4]
 80119f2:	f000 fc19 	bl	8012228 <_vfiprintf_r>
 80119f6:	b002      	add	sp, #8
 80119f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80119fc:	b003      	add	sp, #12
 80119fe:	4770      	bx	lr
 8011a00:	2000165c 	.word	0x2000165c

08011a04 <_fwalk_sglue>:
 8011a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a08:	4607      	mov	r7, r0
 8011a0a:	4688      	mov	r8, r1
 8011a0c:	4614      	mov	r4, r2
 8011a0e:	2600      	movs	r6, #0
 8011a10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a14:	f1b9 0901 	subs.w	r9, r9, #1
 8011a18:	d505      	bpl.n	8011a26 <_fwalk_sglue+0x22>
 8011a1a:	6824      	ldr	r4, [r4, #0]
 8011a1c:	2c00      	cmp	r4, #0
 8011a1e:	d1f7      	bne.n	8011a10 <_fwalk_sglue+0xc>
 8011a20:	4630      	mov	r0, r6
 8011a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a26:	89ab      	ldrh	r3, [r5, #12]
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	d907      	bls.n	8011a3c <_fwalk_sglue+0x38>
 8011a2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a30:	3301      	adds	r3, #1
 8011a32:	d003      	beq.n	8011a3c <_fwalk_sglue+0x38>
 8011a34:	4629      	mov	r1, r5
 8011a36:	4638      	mov	r0, r7
 8011a38:	47c0      	blx	r8
 8011a3a:	4306      	orrs	r6, r0
 8011a3c:	3568      	adds	r5, #104	; 0x68
 8011a3e:	e7e9      	b.n	8011a14 <_fwalk_sglue+0x10>

08011a40 <iprintf>:
 8011a40:	b40f      	push	{r0, r1, r2, r3}
 8011a42:	b507      	push	{r0, r1, r2, lr}
 8011a44:	4906      	ldr	r1, [pc, #24]	; (8011a60 <iprintf+0x20>)
 8011a46:	ab04      	add	r3, sp, #16
 8011a48:	6808      	ldr	r0, [r1, #0]
 8011a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a4e:	6881      	ldr	r1, [r0, #8]
 8011a50:	9301      	str	r3, [sp, #4]
 8011a52:	f000 fbe9 	bl	8012228 <_vfiprintf_r>
 8011a56:	b003      	add	sp, #12
 8011a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a5c:	b004      	add	sp, #16
 8011a5e:	4770      	bx	lr
 8011a60:	2000165c 	.word	0x2000165c

08011a64 <putchar>:
 8011a64:	4b02      	ldr	r3, [pc, #8]	; (8011a70 <putchar+0xc>)
 8011a66:	4601      	mov	r1, r0
 8011a68:	6818      	ldr	r0, [r3, #0]
 8011a6a:	6882      	ldr	r2, [r0, #8]
 8011a6c:	f000 bf34 	b.w	80128d8 <_putc_r>
 8011a70:	2000165c 	.word	0x2000165c

08011a74 <__sread>:
 8011a74:	b510      	push	{r4, lr}
 8011a76:	460c      	mov	r4, r1
 8011a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a7c:	f000 f906 	bl	8011c8c <_read_r>
 8011a80:	2800      	cmp	r0, #0
 8011a82:	bfab      	itete	ge
 8011a84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a86:	89a3      	ldrhlt	r3, [r4, #12]
 8011a88:	181b      	addge	r3, r3, r0
 8011a8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a8e:	bfac      	ite	ge
 8011a90:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a92:	81a3      	strhlt	r3, [r4, #12]
 8011a94:	bd10      	pop	{r4, pc}

08011a96 <__swrite>:
 8011a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a9a:	461f      	mov	r7, r3
 8011a9c:	898b      	ldrh	r3, [r1, #12]
 8011a9e:	05db      	lsls	r3, r3, #23
 8011aa0:	4605      	mov	r5, r0
 8011aa2:	460c      	mov	r4, r1
 8011aa4:	4616      	mov	r6, r2
 8011aa6:	d505      	bpl.n	8011ab4 <__swrite+0x1e>
 8011aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aac:	2302      	movs	r3, #2
 8011aae:	2200      	movs	r2, #0
 8011ab0:	f000 f8da 	bl	8011c68 <_lseek_r>
 8011ab4:	89a3      	ldrh	r3, [r4, #12]
 8011ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011abe:	81a3      	strh	r3, [r4, #12]
 8011ac0:	4632      	mov	r2, r6
 8011ac2:	463b      	mov	r3, r7
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011aca:	f7ff bc69 	b.w	80113a0 <_write_r>

08011ace <__sseek>:
 8011ace:	b510      	push	{r4, lr}
 8011ad0:	460c      	mov	r4, r1
 8011ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ad6:	f000 f8c7 	bl	8011c68 <_lseek_r>
 8011ada:	1c43      	adds	r3, r0, #1
 8011adc:	89a3      	ldrh	r3, [r4, #12]
 8011ade:	bf15      	itete	ne
 8011ae0:	6560      	strne	r0, [r4, #84]	; 0x54
 8011ae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011ae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011aea:	81a3      	strheq	r3, [r4, #12]
 8011aec:	bf18      	it	ne
 8011aee:	81a3      	strhne	r3, [r4, #12]
 8011af0:	bd10      	pop	{r4, pc}

08011af2 <__sclose>:
 8011af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011af6:	f000 b851 	b.w	8011b9c <_close_r>

08011afa <_vsniprintf_r>:
 8011afa:	b530      	push	{r4, r5, lr}
 8011afc:	4614      	mov	r4, r2
 8011afe:	2c00      	cmp	r4, #0
 8011b00:	b09b      	sub	sp, #108	; 0x6c
 8011b02:	4605      	mov	r5, r0
 8011b04:	461a      	mov	r2, r3
 8011b06:	da05      	bge.n	8011b14 <_vsniprintf_r+0x1a>
 8011b08:	238b      	movs	r3, #139	; 0x8b
 8011b0a:	6003      	str	r3, [r0, #0]
 8011b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b10:	b01b      	add	sp, #108	; 0x6c
 8011b12:	bd30      	pop	{r4, r5, pc}
 8011b14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011b18:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011b1c:	bf14      	ite	ne
 8011b1e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011b22:	4623      	moveq	r3, r4
 8011b24:	9302      	str	r3, [sp, #8]
 8011b26:	9305      	str	r3, [sp, #20]
 8011b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b2c:	9100      	str	r1, [sp, #0]
 8011b2e:	9104      	str	r1, [sp, #16]
 8011b30:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011b34:	4669      	mov	r1, sp
 8011b36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011b38:	f000 fa4e 	bl	8011fd8 <_svfiprintf_r>
 8011b3c:	1c43      	adds	r3, r0, #1
 8011b3e:	bfbc      	itt	lt
 8011b40:	238b      	movlt	r3, #139	; 0x8b
 8011b42:	602b      	strlt	r3, [r5, #0]
 8011b44:	2c00      	cmp	r4, #0
 8011b46:	d0e3      	beq.n	8011b10 <_vsniprintf_r+0x16>
 8011b48:	9b00      	ldr	r3, [sp, #0]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	701a      	strb	r2, [r3, #0]
 8011b4e:	e7df      	b.n	8011b10 <_vsniprintf_r+0x16>

08011b50 <vsniprintf>:
 8011b50:	b507      	push	{r0, r1, r2, lr}
 8011b52:	9300      	str	r3, [sp, #0]
 8011b54:	4613      	mov	r3, r2
 8011b56:	460a      	mov	r2, r1
 8011b58:	4601      	mov	r1, r0
 8011b5a:	4803      	ldr	r0, [pc, #12]	; (8011b68 <vsniprintf+0x18>)
 8011b5c:	6800      	ldr	r0, [r0, #0]
 8011b5e:	f7ff ffcc 	bl	8011afa <_vsniprintf_r>
 8011b62:	b003      	add	sp, #12
 8011b64:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b68:	2000165c 	.word	0x2000165c

08011b6c <memcmp>:
 8011b6c:	b510      	push	{r4, lr}
 8011b6e:	3901      	subs	r1, #1
 8011b70:	4402      	add	r2, r0
 8011b72:	4290      	cmp	r0, r2
 8011b74:	d101      	bne.n	8011b7a <memcmp+0xe>
 8011b76:	2000      	movs	r0, #0
 8011b78:	e005      	b.n	8011b86 <memcmp+0x1a>
 8011b7a:	7803      	ldrb	r3, [r0, #0]
 8011b7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011b80:	42a3      	cmp	r3, r4
 8011b82:	d001      	beq.n	8011b88 <memcmp+0x1c>
 8011b84:	1b18      	subs	r0, r3, r4
 8011b86:	bd10      	pop	{r4, pc}
 8011b88:	3001      	adds	r0, #1
 8011b8a:	e7f2      	b.n	8011b72 <memcmp+0x6>

08011b8c <memset>:
 8011b8c:	4402      	add	r2, r0
 8011b8e:	4603      	mov	r3, r0
 8011b90:	4293      	cmp	r3, r2
 8011b92:	d100      	bne.n	8011b96 <memset+0xa>
 8011b94:	4770      	bx	lr
 8011b96:	f803 1b01 	strb.w	r1, [r3], #1
 8011b9a:	e7f9      	b.n	8011b90 <memset+0x4>

08011b9c <_close_r>:
 8011b9c:	b538      	push	{r3, r4, r5, lr}
 8011b9e:	4d06      	ldr	r5, [pc, #24]	; (8011bb8 <_close_r+0x1c>)
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	4604      	mov	r4, r0
 8011ba4:	4608      	mov	r0, r1
 8011ba6:	602b      	str	r3, [r5, #0]
 8011ba8:	f7ef f9c2 	bl	8000f30 <_close>
 8011bac:	1c43      	adds	r3, r0, #1
 8011bae:	d102      	bne.n	8011bb6 <_close_r+0x1a>
 8011bb0:	682b      	ldr	r3, [r5, #0]
 8011bb2:	b103      	cbz	r3, 8011bb6 <_close_r+0x1a>
 8011bb4:	6023      	str	r3, [r4, #0]
 8011bb6:	bd38      	pop	{r3, r4, r5, pc}
 8011bb8:	2000c930 	.word	0x2000c930

08011bbc <_reclaim_reent>:
 8011bbc:	4b29      	ldr	r3, [pc, #164]	; (8011c64 <_reclaim_reent+0xa8>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4283      	cmp	r3, r0
 8011bc2:	b570      	push	{r4, r5, r6, lr}
 8011bc4:	4604      	mov	r4, r0
 8011bc6:	d04b      	beq.n	8011c60 <_reclaim_reent+0xa4>
 8011bc8:	69c3      	ldr	r3, [r0, #28]
 8011bca:	b143      	cbz	r3, 8011bde <_reclaim_reent+0x22>
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d144      	bne.n	8011c5c <_reclaim_reent+0xa0>
 8011bd2:	69e3      	ldr	r3, [r4, #28]
 8011bd4:	6819      	ldr	r1, [r3, #0]
 8011bd6:	b111      	cbz	r1, 8011bde <_reclaim_reent+0x22>
 8011bd8:	4620      	mov	r0, r4
 8011bda:	f000 f8ab 	bl	8011d34 <_free_r>
 8011bde:	6961      	ldr	r1, [r4, #20]
 8011be0:	b111      	cbz	r1, 8011be8 <_reclaim_reent+0x2c>
 8011be2:	4620      	mov	r0, r4
 8011be4:	f000 f8a6 	bl	8011d34 <_free_r>
 8011be8:	69e1      	ldr	r1, [r4, #28]
 8011bea:	b111      	cbz	r1, 8011bf2 <_reclaim_reent+0x36>
 8011bec:	4620      	mov	r0, r4
 8011bee:	f000 f8a1 	bl	8011d34 <_free_r>
 8011bf2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011bf4:	b111      	cbz	r1, 8011bfc <_reclaim_reent+0x40>
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	f000 f89c 	bl	8011d34 <_free_r>
 8011bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bfe:	b111      	cbz	r1, 8011c06 <_reclaim_reent+0x4a>
 8011c00:	4620      	mov	r0, r4
 8011c02:	f000 f897 	bl	8011d34 <_free_r>
 8011c06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011c08:	b111      	cbz	r1, 8011c10 <_reclaim_reent+0x54>
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	f000 f892 	bl	8011d34 <_free_r>
 8011c10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011c12:	b111      	cbz	r1, 8011c1a <_reclaim_reent+0x5e>
 8011c14:	4620      	mov	r0, r4
 8011c16:	f000 f88d 	bl	8011d34 <_free_r>
 8011c1a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011c1c:	b111      	cbz	r1, 8011c24 <_reclaim_reent+0x68>
 8011c1e:	4620      	mov	r0, r4
 8011c20:	f000 f888 	bl	8011d34 <_free_r>
 8011c24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011c26:	b111      	cbz	r1, 8011c2e <_reclaim_reent+0x72>
 8011c28:	4620      	mov	r0, r4
 8011c2a:	f000 f883 	bl	8011d34 <_free_r>
 8011c2e:	6a23      	ldr	r3, [r4, #32]
 8011c30:	b1b3      	cbz	r3, 8011c60 <_reclaim_reent+0xa4>
 8011c32:	4620      	mov	r0, r4
 8011c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c38:	4718      	bx	r3
 8011c3a:	5949      	ldr	r1, [r1, r5]
 8011c3c:	b941      	cbnz	r1, 8011c50 <_reclaim_reent+0x94>
 8011c3e:	3504      	adds	r5, #4
 8011c40:	69e3      	ldr	r3, [r4, #28]
 8011c42:	2d80      	cmp	r5, #128	; 0x80
 8011c44:	68d9      	ldr	r1, [r3, #12]
 8011c46:	d1f8      	bne.n	8011c3a <_reclaim_reent+0x7e>
 8011c48:	4620      	mov	r0, r4
 8011c4a:	f000 f873 	bl	8011d34 <_free_r>
 8011c4e:	e7c0      	b.n	8011bd2 <_reclaim_reent+0x16>
 8011c50:	680e      	ldr	r6, [r1, #0]
 8011c52:	4620      	mov	r0, r4
 8011c54:	f000 f86e 	bl	8011d34 <_free_r>
 8011c58:	4631      	mov	r1, r6
 8011c5a:	e7ef      	b.n	8011c3c <_reclaim_reent+0x80>
 8011c5c:	2500      	movs	r5, #0
 8011c5e:	e7ef      	b.n	8011c40 <_reclaim_reent+0x84>
 8011c60:	bd70      	pop	{r4, r5, r6, pc}
 8011c62:	bf00      	nop
 8011c64:	2000165c 	.word	0x2000165c

08011c68 <_lseek_r>:
 8011c68:	b538      	push	{r3, r4, r5, lr}
 8011c6a:	4d07      	ldr	r5, [pc, #28]	; (8011c88 <_lseek_r+0x20>)
 8011c6c:	4604      	mov	r4, r0
 8011c6e:	4608      	mov	r0, r1
 8011c70:	4611      	mov	r1, r2
 8011c72:	2200      	movs	r2, #0
 8011c74:	602a      	str	r2, [r5, #0]
 8011c76:	461a      	mov	r2, r3
 8011c78:	f7ef f964 	bl	8000f44 <_lseek>
 8011c7c:	1c43      	adds	r3, r0, #1
 8011c7e:	d102      	bne.n	8011c86 <_lseek_r+0x1e>
 8011c80:	682b      	ldr	r3, [r5, #0]
 8011c82:	b103      	cbz	r3, 8011c86 <_lseek_r+0x1e>
 8011c84:	6023      	str	r3, [r4, #0]
 8011c86:	bd38      	pop	{r3, r4, r5, pc}
 8011c88:	2000c930 	.word	0x2000c930

08011c8c <_read_r>:
 8011c8c:	b538      	push	{r3, r4, r5, lr}
 8011c8e:	4d07      	ldr	r5, [pc, #28]	; (8011cac <_read_r+0x20>)
 8011c90:	4604      	mov	r4, r0
 8011c92:	4608      	mov	r0, r1
 8011c94:	4611      	mov	r1, r2
 8011c96:	2200      	movs	r2, #0
 8011c98:	602a      	str	r2, [r5, #0]
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	f7ef f938 	bl	8000f10 <_read>
 8011ca0:	1c43      	adds	r3, r0, #1
 8011ca2:	d102      	bne.n	8011caa <_read_r+0x1e>
 8011ca4:	682b      	ldr	r3, [r5, #0]
 8011ca6:	b103      	cbz	r3, 8011caa <_read_r+0x1e>
 8011ca8:	6023      	str	r3, [r4, #0]
 8011caa:	bd38      	pop	{r3, r4, r5, pc}
 8011cac:	2000c930 	.word	0x2000c930

08011cb0 <__errno>:
 8011cb0:	4b01      	ldr	r3, [pc, #4]	; (8011cb8 <__errno+0x8>)
 8011cb2:	6818      	ldr	r0, [r3, #0]
 8011cb4:	4770      	bx	lr
 8011cb6:	bf00      	nop
 8011cb8:	2000165c 	.word	0x2000165c

08011cbc <__libc_init_array>:
 8011cbc:	b570      	push	{r4, r5, r6, lr}
 8011cbe:	4d0d      	ldr	r5, [pc, #52]	; (8011cf4 <__libc_init_array+0x38>)
 8011cc0:	4c0d      	ldr	r4, [pc, #52]	; (8011cf8 <__libc_init_array+0x3c>)
 8011cc2:	1b64      	subs	r4, r4, r5
 8011cc4:	10a4      	asrs	r4, r4, #2
 8011cc6:	2600      	movs	r6, #0
 8011cc8:	42a6      	cmp	r6, r4
 8011cca:	d109      	bne.n	8011ce0 <__libc_init_array+0x24>
 8011ccc:	4d0b      	ldr	r5, [pc, #44]	; (8011cfc <__libc_init_array+0x40>)
 8011cce:	4c0c      	ldr	r4, [pc, #48]	; (8011d00 <__libc_init_array+0x44>)
 8011cd0:	f000 fff6 	bl	8012cc0 <_init>
 8011cd4:	1b64      	subs	r4, r4, r5
 8011cd6:	10a4      	asrs	r4, r4, #2
 8011cd8:	2600      	movs	r6, #0
 8011cda:	42a6      	cmp	r6, r4
 8011cdc:	d105      	bne.n	8011cea <__libc_init_array+0x2e>
 8011cde:	bd70      	pop	{r4, r5, r6, pc}
 8011ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ce4:	4798      	blx	r3
 8011ce6:	3601      	adds	r6, #1
 8011ce8:	e7ee      	b.n	8011cc8 <__libc_init_array+0xc>
 8011cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cee:	4798      	blx	r3
 8011cf0:	3601      	adds	r6, #1
 8011cf2:	e7f2      	b.n	8011cda <__libc_init_array+0x1e>
 8011cf4:	08016aa8 	.word	0x08016aa8
 8011cf8:	08016aa8 	.word	0x08016aa8
 8011cfc:	08016aa8 	.word	0x08016aa8
 8011d00:	08016aac 	.word	0x08016aac

08011d04 <__retarget_lock_acquire_recursive>:
 8011d04:	4770      	bx	lr

08011d06 <__retarget_lock_release_recursive>:
 8011d06:	4770      	bx	lr

08011d08 <memcpy>:
 8011d08:	440a      	add	r2, r1
 8011d0a:	4291      	cmp	r1, r2
 8011d0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011d10:	d100      	bne.n	8011d14 <memcpy+0xc>
 8011d12:	4770      	bx	lr
 8011d14:	b510      	push	{r4, lr}
 8011d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d1e:	4291      	cmp	r1, r2
 8011d20:	d1f9      	bne.n	8011d16 <memcpy+0xe>
 8011d22:	bd10      	pop	{r4, pc}

08011d24 <abort>:
 8011d24:	b508      	push	{r3, lr}
 8011d26:	2006      	movs	r0, #6
 8011d28:	f000 fee2 	bl	8012af0 <raise>
 8011d2c:	2001      	movs	r0, #1
 8011d2e:	f7ef f8e9 	bl	8000f04 <_exit>
	...

08011d34 <_free_r>:
 8011d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d36:	2900      	cmp	r1, #0
 8011d38:	d044      	beq.n	8011dc4 <_free_r+0x90>
 8011d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d3e:	9001      	str	r0, [sp, #4]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	f1a1 0404 	sub.w	r4, r1, #4
 8011d46:	bfb8      	it	lt
 8011d48:	18e4      	addlt	r4, r4, r3
 8011d4a:	f000 f8df 	bl	8011f0c <__malloc_lock>
 8011d4e:	4a1e      	ldr	r2, [pc, #120]	; (8011dc8 <_free_r+0x94>)
 8011d50:	9801      	ldr	r0, [sp, #4]
 8011d52:	6813      	ldr	r3, [r2, #0]
 8011d54:	b933      	cbnz	r3, 8011d64 <_free_r+0x30>
 8011d56:	6063      	str	r3, [r4, #4]
 8011d58:	6014      	str	r4, [r2, #0]
 8011d5a:	b003      	add	sp, #12
 8011d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d60:	f000 b8da 	b.w	8011f18 <__malloc_unlock>
 8011d64:	42a3      	cmp	r3, r4
 8011d66:	d908      	bls.n	8011d7a <_free_r+0x46>
 8011d68:	6825      	ldr	r5, [r4, #0]
 8011d6a:	1961      	adds	r1, r4, r5
 8011d6c:	428b      	cmp	r3, r1
 8011d6e:	bf01      	itttt	eq
 8011d70:	6819      	ldreq	r1, [r3, #0]
 8011d72:	685b      	ldreq	r3, [r3, #4]
 8011d74:	1949      	addeq	r1, r1, r5
 8011d76:	6021      	streq	r1, [r4, #0]
 8011d78:	e7ed      	b.n	8011d56 <_free_r+0x22>
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	b10b      	cbz	r3, 8011d84 <_free_r+0x50>
 8011d80:	42a3      	cmp	r3, r4
 8011d82:	d9fa      	bls.n	8011d7a <_free_r+0x46>
 8011d84:	6811      	ldr	r1, [r2, #0]
 8011d86:	1855      	adds	r5, r2, r1
 8011d88:	42a5      	cmp	r5, r4
 8011d8a:	d10b      	bne.n	8011da4 <_free_r+0x70>
 8011d8c:	6824      	ldr	r4, [r4, #0]
 8011d8e:	4421      	add	r1, r4
 8011d90:	1854      	adds	r4, r2, r1
 8011d92:	42a3      	cmp	r3, r4
 8011d94:	6011      	str	r1, [r2, #0]
 8011d96:	d1e0      	bne.n	8011d5a <_free_r+0x26>
 8011d98:	681c      	ldr	r4, [r3, #0]
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	6053      	str	r3, [r2, #4]
 8011d9e:	440c      	add	r4, r1
 8011da0:	6014      	str	r4, [r2, #0]
 8011da2:	e7da      	b.n	8011d5a <_free_r+0x26>
 8011da4:	d902      	bls.n	8011dac <_free_r+0x78>
 8011da6:	230c      	movs	r3, #12
 8011da8:	6003      	str	r3, [r0, #0]
 8011daa:	e7d6      	b.n	8011d5a <_free_r+0x26>
 8011dac:	6825      	ldr	r5, [r4, #0]
 8011dae:	1961      	adds	r1, r4, r5
 8011db0:	428b      	cmp	r3, r1
 8011db2:	bf04      	itt	eq
 8011db4:	6819      	ldreq	r1, [r3, #0]
 8011db6:	685b      	ldreq	r3, [r3, #4]
 8011db8:	6063      	str	r3, [r4, #4]
 8011dba:	bf04      	itt	eq
 8011dbc:	1949      	addeq	r1, r1, r5
 8011dbe:	6021      	streq	r1, [r4, #0]
 8011dc0:	6054      	str	r4, [r2, #4]
 8011dc2:	e7ca      	b.n	8011d5a <_free_r+0x26>
 8011dc4:	b003      	add	sp, #12
 8011dc6:	bd30      	pop	{r4, r5, pc}
 8011dc8:	2000c938 	.word	0x2000c938

08011dcc <sbrk_aligned>:
 8011dcc:	b570      	push	{r4, r5, r6, lr}
 8011dce:	4e0e      	ldr	r6, [pc, #56]	; (8011e08 <sbrk_aligned+0x3c>)
 8011dd0:	460c      	mov	r4, r1
 8011dd2:	6831      	ldr	r1, [r6, #0]
 8011dd4:	4605      	mov	r5, r0
 8011dd6:	b911      	cbnz	r1, 8011dde <sbrk_aligned+0x12>
 8011dd8:	f000 fea6 	bl	8012b28 <_sbrk_r>
 8011ddc:	6030      	str	r0, [r6, #0]
 8011dde:	4621      	mov	r1, r4
 8011de0:	4628      	mov	r0, r5
 8011de2:	f000 fea1 	bl	8012b28 <_sbrk_r>
 8011de6:	1c43      	adds	r3, r0, #1
 8011de8:	d00a      	beq.n	8011e00 <sbrk_aligned+0x34>
 8011dea:	1cc4      	adds	r4, r0, #3
 8011dec:	f024 0403 	bic.w	r4, r4, #3
 8011df0:	42a0      	cmp	r0, r4
 8011df2:	d007      	beq.n	8011e04 <sbrk_aligned+0x38>
 8011df4:	1a21      	subs	r1, r4, r0
 8011df6:	4628      	mov	r0, r5
 8011df8:	f000 fe96 	bl	8012b28 <_sbrk_r>
 8011dfc:	3001      	adds	r0, #1
 8011dfe:	d101      	bne.n	8011e04 <sbrk_aligned+0x38>
 8011e00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011e04:	4620      	mov	r0, r4
 8011e06:	bd70      	pop	{r4, r5, r6, pc}
 8011e08:	2000c93c 	.word	0x2000c93c

08011e0c <_malloc_r>:
 8011e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e10:	1ccd      	adds	r5, r1, #3
 8011e12:	f025 0503 	bic.w	r5, r5, #3
 8011e16:	3508      	adds	r5, #8
 8011e18:	2d0c      	cmp	r5, #12
 8011e1a:	bf38      	it	cc
 8011e1c:	250c      	movcc	r5, #12
 8011e1e:	2d00      	cmp	r5, #0
 8011e20:	4607      	mov	r7, r0
 8011e22:	db01      	blt.n	8011e28 <_malloc_r+0x1c>
 8011e24:	42a9      	cmp	r1, r5
 8011e26:	d905      	bls.n	8011e34 <_malloc_r+0x28>
 8011e28:	230c      	movs	r3, #12
 8011e2a:	603b      	str	r3, [r7, #0]
 8011e2c:	2600      	movs	r6, #0
 8011e2e:	4630      	mov	r0, r6
 8011e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011f08 <_malloc_r+0xfc>
 8011e38:	f000 f868 	bl	8011f0c <__malloc_lock>
 8011e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8011e40:	461c      	mov	r4, r3
 8011e42:	bb5c      	cbnz	r4, 8011e9c <_malloc_r+0x90>
 8011e44:	4629      	mov	r1, r5
 8011e46:	4638      	mov	r0, r7
 8011e48:	f7ff ffc0 	bl	8011dcc <sbrk_aligned>
 8011e4c:	1c43      	adds	r3, r0, #1
 8011e4e:	4604      	mov	r4, r0
 8011e50:	d155      	bne.n	8011efe <_malloc_r+0xf2>
 8011e52:	f8d8 4000 	ldr.w	r4, [r8]
 8011e56:	4626      	mov	r6, r4
 8011e58:	2e00      	cmp	r6, #0
 8011e5a:	d145      	bne.n	8011ee8 <_malloc_r+0xdc>
 8011e5c:	2c00      	cmp	r4, #0
 8011e5e:	d048      	beq.n	8011ef2 <_malloc_r+0xe6>
 8011e60:	6823      	ldr	r3, [r4, #0]
 8011e62:	4631      	mov	r1, r6
 8011e64:	4638      	mov	r0, r7
 8011e66:	eb04 0903 	add.w	r9, r4, r3
 8011e6a:	f000 fe5d 	bl	8012b28 <_sbrk_r>
 8011e6e:	4581      	cmp	r9, r0
 8011e70:	d13f      	bne.n	8011ef2 <_malloc_r+0xe6>
 8011e72:	6821      	ldr	r1, [r4, #0]
 8011e74:	1a6d      	subs	r5, r5, r1
 8011e76:	4629      	mov	r1, r5
 8011e78:	4638      	mov	r0, r7
 8011e7a:	f7ff ffa7 	bl	8011dcc <sbrk_aligned>
 8011e7e:	3001      	adds	r0, #1
 8011e80:	d037      	beq.n	8011ef2 <_malloc_r+0xe6>
 8011e82:	6823      	ldr	r3, [r4, #0]
 8011e84:	442b      	add	r3, r5
 8011e86:	6023      	str	r3, [r4, #0]
 8011e88:	f8d8 3000 	ldr.w	r3, [r8]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d038      	beq.n	8011f02 <_malloc_r+0xf6>
 8011e90:	685a      	ldr	r2, [r3, #4]
 8011e92:	42a2      	cmp	r2, r4
 8011e94:	d12b      	bne.n	8011eee <_malloc_r+0xe2>
 8011e96:	2200      	movs	r2, #0
 8011e98:	605a      	str	r2, [r3, #4]
 8011e9a:	e00f      	b.n	8011ebc <_malloc_r+0xb0>
 8011e9c:	6822      	ldr	r2, [r4, #0]
 8011e9e:	1b52      	subs	r2, r2, r5
 8011ea0:	d41f      	bmi.n	8011ee2 <_malloc_r+0xd6>
 8011ea2:	2a0b      	cmp	r2, #11
 8011ea4:	d917      	bls.n	8011ed6 <_malloc_r+0xca>
 8011ea6:	1961      	adds	r1, r4, r5
 8011ea8:	42a3      	cmp	r3, r4
 8011eaa:	6025      	str	r5, [r4, #0]
 8011eac:	bf18      	it	ne
 8011eae:	6059      	strne	r1, [r3, #4]
 8011eb0:	6863      	ldr	r3, [r4, #4]
 8011eb2:	bf08      	it	eq
 8011eb4:	f8c8 1000 	streq.w	r1, [r8]
 8011eb8:	5162      	str	r2, [r4, r5]
 8011eba:	604b      	str	r3, [r1, #4]
 8011ebc:	4638      	mov	r0, r7
 8011ebe:	f104 060b 	add.w	r6, r4, #11
 8011ec2:	f000 f829 	bl	8011f18 <__malloc_unlock>
 8011ec6:	f026 0607 	bic.w	r6, r6, #7
 8011eca:	1d23      	adds	r3, r4, #4
 8011ecc:	1af2      	subs	r2, r6, r3
 8011ece:	d0ae      	beq.n	8011e2e <_malloc_r+0x22>
 8011ed0:	1b9b      	subs	r3, r3, r6
 8011ed2:	50a3      	str	r3, [r4, r2]
 8011ed4:	e7ab      	b.n	8011e2e <_malloc_r+0x22>
 8011ed6:	42a3      	cmp	r3, r4
 8011ed8:	6862      	ldr	r2, [r4, #4]
 8011eda:	d1dd      	bne.n	8011e98 <_malloc_r+0x8c>
 8011edc:	f8c8 2000 	str.w	r2, [r8]
 8011ee0:	e7ec      	b.n	8011ebc <_malloc_r+0xb0>
 8011ee2:	4623      	mov	r3, r4
 8011ee4:	6864      	ldr	r4, [r4, #4]
 8011ee6:	e7ac      	b.n	8011e42 <_malloc_r+0x36>
 8011ee8:	4634      	mov	r4, r6
 8011eea:	6876      	ldr	r6, [r6, #4]
 8011eec:	e7b4      	b.n	8011e58 <_malloc_r+0x4c>
 8011eee:	4613      	mov	r3, r2
 8011ef0:	e7cc      	b.n	8011e8c <_malloc_r+0x80>
 8011ef2:	230c      	movs	r3, #12
 8011ef4:	603b      	str	r3, [r7, #0]
 8011ef6:	4638      	mov	r0, r7
 8011ef8:	f000 f80e 	bl	8011f18 <__malloc_unlock>
 8011efc:	e797      	b.n	8011e2e <_malloc_r+0x22>
 8011efe:	6025      	str	r5, [r4, #0]
 8011f00:	e7dc      	b.n	8011ebc <_malloc_r+0xb0>
 8011f02:	605b      	str	r3, [r3, #4]
 8011f04:	deff      	udf	#255	; 0xff
 8011f06:	bf00      	nop
 8011f08:	2000c938 	.word	0x2000c938

08011f0c <__malloc_lock>:
 8011f0c:	4801      	ldr	r0, [pc, #4]	; (8011f14 <__malloc_lock+0x8>)
 8011f0e:	f7ff bef9 	b.w	8011d04 <__retarget_lock_acquire_recursive>
 8011f12:	bf00      	nop
 8011f14:	2000c934 	.word	0x2000c934

08011f18 <__malloc_unlock>:
 8011f18:	4801      	ldr	r0, [pc, #4]	; (8011f20 <__malloc_unlock+0x8>)
 8011f1a:	f7ff bef4 	b.w	8011d06 <__retarget_lock_release_recursive>
 8011f1e:	bf00      	nop
 8011f20:	2000c934 	.word	0x2000c934

08011f24 <__ssputs_r>:
 8011f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f28:	688e      	ldr	r6, [r1, #8]
 8011f2a:	461f      	mov	r7, r3
 8011f2c:	42be      	cmp	r6, r7
 8011f2e:	680b      	ldr	r3, [r1, #0]
 8011f30:	4682      	mov	sl, r0
 8011f32:	460c      	mov	r4, r1
 8011f34:	4690      	mov	r8, r2
 8011f36:	d82c      	bhi.n	8011f92 <__ssputs_r+0x6e>
 8011f38:	898a      	ldrh	r2, [r1, #12]
 8011f3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011f3e:	d026      	beq.n	8011f8e <__ssputs_r+0x6a>
 8011f40:	6965      	ldr	r5, [r4, #20]
 8011f42:	6909      	ldr	r1, [r1, #16]
 8011f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f48:	eba3 0901 	sub.w	r9, r3, r1
 8011f4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f50:	1c7b      	adds	r3, r7, #1
 8011f52:	444b      	add	r3, r9
 8011f54:	106d      	asrs	r5, r5, #1
 8011f56:	429d      	cmp	r5, r3
 8011f58:	bf38      	it	cc
 8011f5a:	461d      	movcc	r5, r3
 8011f5c:	0553      	lsls	r3, r2, #21
 8011f5e:	d527      	bpl.n	8011fb0 <__ssputs_r+0x8c>
 8011f60:	4629      	mov	r1, r5
 8011f62:	f7ff ff53 	bl	8011e0c <_malloc_r>
 8011f66:	4606      	mov	r6, r0
 8011f68:	b360      	cbz	r0, 8011fc4 <__ssputs_r+0xa0>
 8011f6a:	6921      	ldr	r1, [r4, #16]
 8011f6c:	464a      	mov	r2, r9
 8011f6e:	f7ff fecb 	bl	8011d08 <memcpy>
 8011f72:	89a3      	ldrh	r3, [r4, #12]
 8011f74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f7c:	81a3      	strh	r3, [r4, #12]
 8011f7e:	6126      	str	r6, [r4, #16]
 8011f80:	6165      	str	r5, [r4, #20]
 8011f82:	444e      	add	r6, r9
 8011f84:	eba5 0509 	sub.w	r5, r5, r9
 8011f88:	6026      	str	r6, [r4, #0]
 8011f8a:	60a5      	str	r5, [r4, #8]
 8011f8c:	463e      	mov	r6, r7
 8011f8e:	42be      	cmp	r6, r7
 8011f90:	d900      	bls.n	8011f94 <__ssputs_r+0x70>
 8011f92:	463e      	mov	r6, r7
 8011f94:	6820      	ldr	r0, [r4, #0]
 8011f96:	4632      	mov	r2, r6
 8011f98:	4641      	mov	r1, r8
 8011f9a:	f000 fd67 	bl	8012a6c <memmove>
 8011f9e:	68a3      	ldr	r3, [r4, #8]
 8011fa0:	1b9b      	subs	r3, r3, r6
 8011fa2:	60a3      	str	r3, [r4, #8]
 8011fa4:	6823      	ldr	r3, [r4, #0]
 8011fa6:	4433      	add	r3, r6
 8011fa8:	6023      	str	r3, [r4, #0]
 8011faa:	2000      	movs	r0, #0
 8011fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fb0:	462a      	mov	r2, r5
 8011fb2:	f000 fdc9 	bl	8012b48 <_realloc_r>
 8011fb6:	4606      	mov	r6, r0
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	d1e0      	bne.n	8011f7e <__ssputs_r+0x5a>
 8011fbc:	6921      	ldr	r1, [r4, #16]
 8011fbe:	4650      	mov	r0, sl
 8011fc0:	f7ff feb8 	bl	8011d34 <_free_r>
 8011fc4:	230c      	movs	r3, #12
 8011fc6:	f8ca 3000 	str.w	r3, [sl]
 8011fca:	89a3      	ldrh	r3, [r4, #12]
 8011fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fd0:	81a3      	strh	r3, [r4, #12]
 8011fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011fd6:	e7e9      	b.n	8011fac <__ssputs_r+0x88>

08011fd8 <_svfiprintf_r>:
 8011fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fdc:	4698      	mov	r8, r3
 8011fde:	898b      	ldrh	r3, [r1, #12]
 8011fe0:	061b      	lsls	r3, r3, #24
 8011fe2:	b09d      	sub	sp, #116	; 0x74
 8011fe4:	4607      	mov	r7, r0
 8011fe6:	460d      	mov	r5, r1
 8011fe8:	4614      	mov	r4, r2
 8011fea:	d50e      	bpl.n	801200a <_svfiprintf_r+0x32>
 8011fec:	690b      	ldr	r3, [r1, #16]
 8011fee:	b963      	cbnz	r3, 801200a <_svfiprintf_r+0x32>
 8011ff0:	2140      	movs	r1, #64	; 0x40
 8011ff2:	f7ff ff0b 	bl	8011e0c <_malloc_r>
 8011ff6:	6028      	str	r0, [r5, #0]
 8011ff8:	6128      	str	r0, [r5, #16]
 8011ffa:	b920      	cbnz	r0, 8012006 <_svfiprintf_r+0x2e>
 8011ffc:	230c      	movs	r3, #12
 8011ffe:	603b      	str	r3, [r7, #0]
 8012000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012004:	e0d0      	b.n	80121a8 <_svfiprintf_r+0x1d0>
 8012006:	2340      	movs	r3, #64	; 0x40
 8012008:	616b      	str	r3, [r5, #20]
 801200a:	2300      	movs	r3, #0
 801200c:	9309      	str	r3, [sp, #36]	; 0x24
 801200e:	2320      	movs	r3, #32
 8012010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012014:	f8cd 800c 	str.w	r8, [sp, #12]
 8012018:	2330      	movs	r3, #48	; 0x30
 801201a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80121c0 <_svfiprintf_r+0x1e8>
 801201e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012022:	f04f 0901 	mov.w	r9, #1
 8012026:	4623      	mov	r3, r4
 8012028:	469a      	mov	sl, r3
 801202a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801202e:	b10a      	cbz	r2, 8012034 <_svfiprintf_r+0x5c>
 8012030:	2a25      	cmp	r2, #37	; 0x25
 8012032:	d1f9      	bne.n	8012028 <_svfiprintf_r+0x50>
 8012034:	ebba 0b04 	subs.w	fp, sl, r4
 8012038:	d00b      	beq.n	8012052 <_svfiprintf_r+0x7a>
 801203a:	465b      	mov	r3, fp
 801203c:	4622      	mov	r2, r4
 801203e:	4629      	mov	r1, r5
 8012040:	4638      	mov	r0, r7
 8012042:	f7ff ff6f 	bl	8011f24 <__ssputs_r>
 8012046:	3001      	adds	r0, #1
 8012048:	f000 80a9 	beq.w	801219e <_svfiprintf_r+0x1c6>
 801204c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801204e:	445a      	add	r2, fp
 8012050:	9209      	str	r2, [sp, #36]	; 0x24
 8012052:	f89a 3000 	ldrb.w	r3, [sl]
 8012056:	2b00      	cmp	r3, #0
 8012058:	f000 80a1 	beq.w	801219e <_svfiprintf_r+0x1c6>
 801205c:	2300      	movs	r3, #0
 801205e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012066:	f10a 0a01 	add.w	sl, sl, #1
 801206a:	9304      	str	r3, [sp, #16]
 801206c:	9307      	str	r3, [sp, #28]
 801206e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012072:	931a      	str	r3, [sp, #104]	; 0x68
 8012074:	4654      	mov	r4, sl
 8012076:	2205      	movs	r2, #5
 8012078:	f814 1b01 	ldrb.w	r1, [r4], #1
 801207c:	4850      	ldr	r0, [pc, #320]	; (80121c0 <_svfiprintf_r+0x1e8>)
 801207e:	f7ee f91f 	bl	80002c0 <memchr>
 8012082:	9a04      	ldr	r2, [sp, #16]
 8012084:	b9d8      	cbnz	r0, 80120be <_svfiprintf_r+0xe6>
 8012086:	06d0      	lsls	r0, r2, #27
 8012088:	bf44      	itt	mi
 801208a:	2320      	movmi	r3, #32
 801208c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012090:	0711      	lsls	r1, r2, #28
 8012092:	bf44      	itt	mi
 8012094:	232b      	movmi	r3, #43	; 0x2b
 8012096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801209a:	f89a 3000 	ldrb.w	r3, [sl]
 801209e:	2b2a      	cmp	r3, #42	; 0x2a
 80120a0:	d015      	beq.n	80120ce <_svfiprintf_r+0xf6>
 80120a2:	9a07      	ldr	r2, [sp, #28]
 80120a4:	4654      	mov	r4, sl
 80120a6:	2000      	movs	r0, #0
 80120a8:	f04f 0c0a 	mov.w	ip, #10
 80120ac:	4621      	mov	r1, r4
 80120ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120b2:	3b30      	subs	r3, #48	; 0x30
 80120b4:	2b09      	cmp	r3, #9
 80120b6:	d94d      	bls.n	8012154 <_svfiprintf_r+0x17c>
 80120b8:	b1b0      	cbz	r0, 80120e8 <_svfiprintf_r+0x110>
 80120ba:	9207      	str	r2, [sp, #28]
 80120bc:	e014      	b.n	80120e8 <_svfiprintf_r+0x110>
 80120be:	eba0 0308 	sub.w	r3, r0, r8
 80120c2:	fa09 f303 	lsl.w	r3, r9, r3
 80120c6:	4313      	orrs	r3, r2
 80120c8:	9304      	str	r3, [sp, #16]
 80120ca:	46a2      	mov	sl, r4
 80120cc:	e7d2      	b.n	8012074 <_svfiprintf_r+0x9c>
 80120ce:	9b03      	ldr	r3, [sp, #12]
 80120d0:	1d19      	adds	r1, r3, #4
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	9103      	str	r1, [sp, #12]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	bfbb      	ittet	lt
 80120da:	425b      	neglt	r3, r3
 80120dc:	f042 0202 	orrlt.w	r2, r2, #2
 80120e0:	9307      	strge	r3, [sp, #28]
 80120e2:	9307      	strlt	r3, [sp, #28]
 80120e4:	bfb8      	it	lt
 80120e6:	9204      	strlt	r2, [sp, #16]
 80120e8:	7823      	ldrb	r3, [r4, #0]
 80120ea:	2b2e      	cmp	r3, #46	; 0x2e
 80120ec:	d10c      	bne.n	8012108 <_svfiprintf_r+0x130>
 80120ee:	7863      	ldrb	r3, [r4, #1]
 80120f0:	2b2a      	cmp	r3, #42	; 0x2a
 80120f2:	d134      	bne.n	801215e <_svfiprintf_r+0x186>
 80120f4:	9b03      	ldr	r3, [sp, #12]
 80120f6:	1d1a      	adds	r2, r3, #4
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	9203      	str	r2, [sp, #12]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	bfb8      	it	lt
 8012100:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012104:	3402      	adds	r4, #2
 8012106:	9305      	str	r3, [sp, #20]
 8012108:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80121d0 <_svfiprintf_r+0x1f8>
 801210c:	7821      	ldrb	r1, [r4, #0]
 801210e:	2203      	movs	r2, #3
 8012110:	4650      	mov	r0, sl
 8012112:	f7ee f8d5 	bl	80002c0 <memchr>
 8012116:	b138      	cbz	r0, 8012128 <_svfiprintf_r+0x150>
 8012118:	9b04      	ldr	r3, [sp, #16]
 801211a:	eba0 000a 	sub.w	r0, r0, sl
 801211e:	2240      	movs	r2, #64	; 0x40
 8012120:	4082      	lsls	r2, r0
 8012122:	4313      	orrs	r3, r2
 8012124:	3401      	adds	r4, #1
 8012126:	9304      	str	r3, [sp, #16]
 8012128:	f814 1b01 	ldrb.w	r1, [r4], #1
 801212c:	4825      	ldr	r0, [pc, #148]	; (80121c4 <_svfiprintf_r+0x1ec>)
 801212e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012132:	2206      	movs	r2, #6
 8012134:	f7ee f8c4 	bl	80002c0 <memchr>
 8012138:	2800      	cmp	r0, #0
 801213a:	d038      	beq.n	80121ae <_svfiprintf_r+0x1d6>
 801213c:	4b22      	ldr	r3, [pc, #136]	; (80121c8 <_svfiprintf_r+0x1f0>)
 801213e:	bb1b      	cbnz	r3, 8012188 <_svfiprintf_r+0x1b0>
 8012140:	9b03      	ldr	r3, [sp, #12]
 8012142:	3307      	adds	r3, #7
 8012144:	f023 0307 	bic.w	r3, r3, #7
 8012148:	3308      	adds	r3, #8
 801214a:	9303      	str	r3, [sp, #12]
 801214c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801214e:	4433      	add	r3, r6
 8012150:	9309      	str	r3, [sp, #36]	; 0x24
 8012152:	e768      	b.n	8012026 <_svfiprintf_r+0x4e>
 8012154:	fb0c 3202 	mla	r2, ip, r2, r3
 8012158:	460c      	mov	r4, r1
 801215a:	2001      	movs	r0, #1
 801215c:	e7a6      	b.n	80120ac <_svfiprintf_r+0xd4>
 801215e:	2300      	movs	r3, #0
 8012160:	3401      	adds	r4, #1
 8012162:	9305      	str	r3, [sp, #20]
 8012164:	4619      	mov	r1, r3
 8012166:	f04f 0c0a 	mov.w	ip, #10
 801216a:	4620      	mov	r0, r4
 801216c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012170:	3a30      	subs	r2, #48	; 0x30
 8012172:	2a09      	cmp	r2, #9
 8012174:	d903      	bls.n	801217e <_svfiprintf_r+0x1a6>
 8012176:	2b00      	cmp	r3, #0
 8012178:	d0c6      	beq.n	8012108 <_svfiprintf_r+0x130>
 801217a:	9105      	str	r1, [sp, #20]
 801217c:	e7c4      	b.n	8012108 <_svfiprintf_r+0x130>
 801217e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012182:	4604      	mov	r4, r0
 8012184:	2301      	movs	r3, #1
 8012186:	e7f0      	b.n	801216a <_svfiprintf_r+0x192>
 8012188:	ab03      	add	r3, sp, #12
 801218a:	9300      	str	r3, [sp, #0]
 801218c:	462a      	mov	r2, r5
 801218e:	4b0f      	ldr	r3, [pc, #60]	; (80121cc <_svfiprintf_r+0x1f4>)
 8012190:	a904      	add	r1, sp, #16
 8012192:	4638      	mov	r0, r7
 8012194:	f3af 8000 	nop.w
 8012198:	1c42      	adds	r2, r0, #1
 801219a:	4606      	mov	r6, r0
 801219c:	d1d6      	bne.n	801214c <_svfiprintf_r+0x174>
 801219e:	89ab      	ldrh	r3, [r5, #12]
 80121a0:	065b      	lsls	r3, r3, #25
 80121a2:	f53f af2d 	bmi.w	8012000 <_svfiprintf_r+0x28>
 80121a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121a8:	b01d      	add	sp, #116	; 0x74
 80121aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ae:	ab03      	add	r3, sp, #12
 80121b0:	9300      	str	r3, [sp, #0]
 80121b2:	462a      	mov	r2, r5
 80121b4:	4b05      	ldr	r3, [pc, #20]	; (80121cc <_svfiprintf_r+0x1f4>)
 80121b6:	a904      	add	r1, sp, #16
 80121b8:	4638      	mov	r0, r7
 80121ba:	f000 f9bd 	bl	8012538 <_printf_i>
 80121be:	e7eb      	b.n	8012198 <_svfiprintf_r+0x1c0>
 80121c0:	08016a6a 	.word	0x08016a6a
 80121c4:	08016a74 	.word	0x08016a74
 80121c8:	00000000 	.word	0x00000000
 80121cc:	08011f25 	.word	0x08011f25
 80121d0:	08016a70 	.word	0x08016a70

080121d4 <__sfputc_r>:
 80121d4:	6893      	ldr	r3, [r2, #8]
 80121d6:	3b01      	subs	r3, #1
 80121d8:	2b00      	cmp	r3, #0
 80121da:	b410      	push	{r4}
 80121dc:	6093      	str	r3, [r2, #8]
 80121de:	da08      	bge.n	80121f2 <__sfputc_r+0x1e>
 80121e0:	6994      	ldr	r4, [r2, #24]
 80121e2:	42a3      	cmp	r3, r4
 80121e4:	db01      	blt.n	80121ea <__sfputc_r+0x16>
 80121e6:	290a      	cmp	r1, #10
 80121e8:	d103      	bne.n	80121f2 <__sfputc_r+0x1e>
 80121ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121ee:	f000 bba7 	b.w	8012940 <__swbuf_r>
 80121f2:	6813      	ldr	r3, [r2, #0]
 80121f4:	1c58      	adds	r0, r3, #1
 80121f6:	6010      	str	r0, [r2, #0]
 80121f8:	7019      	strb	r1, [r3, #0]
 80121fa:	4608      	mov	r0, r1
 80121fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012200:	4770      	bx	lr

08012202 <__sfputs_r>:
 8012202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012204:	4606      	mov	r6, r0
 8012206:	460f      	mov	r7, r1
 8012208:	4614      	mov	r4, r2
 801220a:	18d5      	adds	r5, r2, r3
 801220c:	42ac      	cmp	r4, r5
 801220e:	d101      	bne.n	8012214 <__sfputs_r+0x12>
 8012210:	2000      	movs	r0, #0
 8012212:	e007      	b.n	8012224 <__sfputs_r+0x22>
 8012214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012218:	463a      	mov	r2, r7
 801221a:	4630      	mov	r0, r6
 801221c:	f7ff ffda 	bl	80121d4 <__sfputc_r>
 8012220:	1c43      	adds	r3, r0, #1
 8012222:	d1f3      	bne.n	801220c <__sfputs_r+0xa>
 8012224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012228 <_vfiprintf_r>:
 8012228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801222c:	460d      	mov	r5, r1
 801222e:	b09d      	sub	sp, #116	; 0x74
 8012230:	4614      	mov	r4, r2
 8012232:	4698      	mov	r8, r3
 8012234:	4606      	mov	r6, r0
 8012236:	b118      	cbz	r0, 8012240 <_vfiprintf_r+0x18>
 8012238:	6a03      	ldr	r3, [r0, #32]
 801223a:	b90b      	cbnz	r3, 8012240 <_vfiprintf_r+0x18>
 801223c:	f7ff fbb8 	bl	80119b0 <__sinit>
 8012240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012242:	07d9      	lsls	r1, r3, #31
 8012244:	d405      	bmi.n	8012252 <_vfiprintf_r+0x2a>
 8012246:	89ab      	ldrh	r3, [r5, #12]
 8012248:	059a      	lsls	r2, r3, #22
 801224a:	d402      	bmi.n	8012252 <_vfiprintf_r+0x2a>
 801224c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801224e:	f7ff fd59 	bl	8011d04 <__retarget_lock_acquire_recursive>
 8012252:	89ab      	ldrh	r3, [r5, #12]
 8012254:	071b      	lsls	r3, r3, #28
 8012256:	d501      	bpl.n	801225c <_vfiprintf_r+0x34>
 8012258:	692b      	ldr	r3, [r5, #16]
 801225a:	b99b      	cbnz	r3, 8012284 <_vfiprintf_r+0x5c>
 801225c:	4629      	mov	r1, r5
 801225e:	4630      	mov	r0, r6
 8012260:	f000 fbac 	bl	80129bc <__swsetup_r>
 8012264:	b170      	cbz	r0, 8012284 <_vfiprintf_r+0x5c>
 8012266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012268:	07dc      	lsls	r4, r3, #31
 801226a:	d504      	bpl.n	8012276 <_vfiprintf_r+0x4e>
 801226c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012270:	b01d      	add	sp, #116	; 0x74
 8012272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012276:	89ab      	ldrh	r3, [r5, #12]
 8012278:	0598      	lsls	r0, r3, #22
 801227a:	d4f7      	bmi.n	801226c <_vfiprintf_r+0x44>
 801227c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801227e:	f7ff fd42 	bl	8011d06 <__retarget_lock_release_recursive>
 8012282:	e7f3      	b.n	801226c <_vfiprintf_r+0x44>
 8012284:	2300      	movs	r3, #0
 8012286:	9309      	str	r3, [sp, #36]	; 0x24
 8012288:	2320      	movs	r3, #32
 801228a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801228e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012292:	2330      	movs	r3, #48	; 0x30
 8012294:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012448 <_vfiprintf_r+0x220>
 8012298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801229c:	f04f 0901 	mov.w	r9, #1
 80122a0:	4623      	mov	r3, r4
 80122a2:	469a      	mov	sl, r3
 80122a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122a8:	b10a      	cbz	r2, 80122ae <_vfiprintf_r+0x86>
 80122aa:	2a25      	cmp	r2, #37	; 0x25
 80122ac:	d1f9      	bne.n	80122a2 <_vfiprintf_r+0x7a>
 80122ae:	ebba 0b04 	subs.w	fp, sl, r4
 80122b2:	d00b      	beq.n	80122cc <_vfiprintf_r+0xa4>
 80122b4:	465b      	mov	r3, fp
 80122b6:	4622      	mov	r2, r4
 80122b8:	4629      	mov	r1, r5
 80122ba:	4630      	mov	r0, r6
 80122bc:	f7ff ffa1 	bl	8012202 <__sfputs_r>
 80122c0:	3001      	adds	r0, #1
 80122c2:	f000 80a9 	beq.w	8012418 <_vfiprintf_r+0x1f0>
 80122c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122c8:	445a      	add	r2, fp
 80122ca:	9209      	str	r2, [sp, #36]	; 0x24
 80122cc:	f89a 3000 	ldrb.w	r3, [sl]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	f000 80a1 	beq.w	8012418 <_vfiprintf_r+0x1f0>
 80122d6:	2300      	movs	r3, #0
 80122d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80122dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122e0:	f10a 0a01 	add.w	sl, sl, #1
 80122e4:	9304      	str	r3, [sp, #16]
 80122e6:	9307      	str	r3, [sp, #28]
 80122e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122ec:	931a      	str	r3, [sp, #104]	; 0x68
 80122ee:	4654      	mov	r4, sl
 80122f0:	2205      	movs	r2, #5
 80122f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122f6:	4854      	ldr	r0, [pc, #336]	; (8012448 <_vfiprintf_r+0x220>)
 80122f8:	f7ed ffe2 	bl	80002c0 <memchr>
 80122fc:	9a04      	ldr	r2, [sp, #16]
 80122fe:	b9d8      	cbnz	r0, 8012338 <_vfiprintf_r+0x110>
 8012300:	06d1      	lsls	r1, r2, #27
 8012302:	bf44      	itt	mi
 8012304:	2320      	movmi	r3, #32
 8012306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801230a:	0713      	lsls	r3, r2, #28
 801230c:	bf44      	itt	mi
 801230e:	232b      	movmi	r3, #43	; 0x2b
 8012310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012314:	f89a 3000 	ldrb.w	r3, [sl]
 8012318:	2b2a      	cmp	r3, #42	; 0x2a
 801231a:	d015      	beq.n	8012348 <_vfiprintf_r+0x120>
 801231c:	9a07      	ldr	r2, [sp, #28]
 801231e:	4654      	mov	r4, sl
 8012320:	2000      	movs	r0, #0
 8012322:	f04f 0c0a 	mov.w	ip, #10
 8012326:	4621      	mov	r1, r4
 8012328:	f811 3b01 	ldrb.w	r3, [r1], #1
 801232c:	3b30      	subs	r3, #48	; 0x30
 801232e:	2b09      	cmp	r3, #9
 8012330:	d94d      	bls.n	80123ce <_vfiprintf_r+0x1a6>
 8012332:	b1b0      	cbz	r0, 8012362 <_vfiprintf_r+0x13a>
 8012334:	9207      	str	r2, [sp, #28]
 8012336:	e014      	b.n	8012362 <_vfiprintf_r+0x13a>
 8012338:	eba0 0308 	sub.w	r3, r0, r8
 801233c:	fa09 f303 	lsl.w	r3, r9, r3
 8012340:	4313      	orrs	r3, r2
 8012342:	9304      	str	r3, [sp, #16]
 8012344:	46a2      	mov	sl, r4
 8012346:	e7d2      	b.n	80122ee <_vfiprintf_r+0xc6>
 8012348:	9b03      	ldr	r3, [sp, #12]
 801234a:	1d19      	adds	r1, r3, #4
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	9103      	str	r1, [sp, #12]
 8012350:	2b00      	cmp	r3, #0
 8012352:	bfbb      	ittet	lt
 8012354:	425b      	neglt	r3, r3
 8012356:	f042 0202 	orrlt.w	r2, r2, #2
 801235a:	9307      	strge	r3, [sp, #28]
 801235c:	9307      	strlt	r3, [sp, #28]
 801235e:	bfb8      	it	lt
 8012360:	9204      	strlt	r2, [sp, #16]
 8012362:	7823      	ldrb	r3, [r4, #0]
 8012364:	2b2e      	cmp	r3, #46	; 0x2e
 8012366:	d10c      	bne.n	8012382 <_vfiprintf_r+0x15a>
 8012368:	7863      	ldrb	r3, [r4, #1]
 801236a:	2b2a      	cmp	r3, #42	; 0x2a
 801236c:	d134      	bne.n	80123d8 <_vfiprintf_r+0x1b0>
 801236e:	9b03      	ldr	r3, [sp, #12]
 8012370:	1d1a      	adds	r2, r3, #4
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	9203      	str	r2, [sp, #12]
 8012376:	2b00      	cmp	r3, #0
 8012378:	bfb8      	it	lt
 801237a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801237e:	3402      	adds	r4, #2
 8012380:	9305      	str	r3, [sp, #20]
 8012382:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012458 <_vfiprintf_r+0x230>
 8012386:	7821      	ldrb	r1, [r4, #0]
 8012388:	2203      	movs	r2, #3
 801238a:	4650      	mov	r0, sl
 801238c:	f7ed ff98 	bl	80002c0 <memchr>
 8012390:	b138      	cbz	r0, 80123a2 <_vfiprintf_r+0x17a>
 8012392:	9b04      	ldr	r3, [sp, #16]
 8012394:	eba0 000a 	sub.w	r0, r0, sl
 8012398:	2240      	movs	r2, #64	; 0x40
 801239a:	4082      	lsls	r2, r0
 801239c:	4313      	orrs	r3, r2
 801239e:	3401      	adds	r4, #1
 80123a0:	9304      	str	r3, [sp, #16]
 80123a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123a6:	4829      	ldr	r0, [pc, #164]	; (801244c <_vfiprintf_r+0x224>)
 80123a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123ac:	2206      	movs	r2, #6
 80123ae:	f7ed ff87 	bl	80002c0 <memchr>
 80123b2:	2800      	cmp	r0, #0
 80123b4:	d03f      	beq.n	8012436 <_vfiprintf_r+0x20e>
 80123b6:	4b26      	ldr	r3, [pc, #152]	; (8012450 <_vfiprintf_r+0x228>)
 80123b8:	bb1b      	cbnz	r3, 8012402 <_vfiprintf_r+0x1da>
 80123ba:	9b03      	ldr	r3, [sp, #12]
 80123bc:	3307      	adds	r3, #7
 80123be:	f023 0307 	bic.w	r3, r3, #7
 80123c2:	3308      	adds	r3, #8
 80123c4:	9303      	str	r3, [sp, #12]
 80123c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123c8:	443b      	add	r3, r7
 80123ca:	9309      	str	r3, [sp, #36]	; 0x24
 80123cc:	e768      	b.n	80122a0 <_vfiprintf_r+0x78>
 80123ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80123d2:	460c      	mov	r4, r1
 80123d4:	2001      	movs	r0, #1
 80123d6:	e7a6      	b.n	8012326 <_vfiprintf_r+0xfe>
 80123d8:	2300      	movs	r3, #0
 80123da:	3401      	adds	r4, #1
 80123dc:	9305      	str	r3, [sp, #20]
 80123de:	4619      	mov	r1, r3
 80123e0:	f04f 0c0a 	mov.w	ip, #10
 80123e4:	4620      	mov	r0, r4
 80123e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123ea:	3a30      	subs	r2, #48	; 0x30
 80123ec:	2a09      	cmp	r2, #9
 80123ee:	d903      	bls.n	80123f8 <_vfiprintf_r+0x1d0>
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d0c6      	beq.n	8012382 <_vfiprintf_r+0x15a>
 80123f4:	9105      	str	r1, [sp, #20]
 80123f6:	e7c4      	b.n	8012382 <_vfiprintf_r+0x15a>
 80123f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80123fc:	4604      	mov	r4, r0
 80123fe:	2301      	movs	r3, #1
 8012400:	e7f0      	b.n	80123e4 <_vfiprintf_r+0x1bc>
 8012402:	ab03      	add	r3, sp, #12
 8012404:	9300      	str	r3, [sp, #0]
 8012406:	462a      	mov	r2, r5
 8012408:	4b12      	ldr	r3, [pc, #72]	; (8012454 <_vfiprintf_r+0x22c>)
 801240a:	a904      	add	r1, sp, #16
 801240c:	4630      	mov	r0, r6
 801240e:	f3af 8000 	nop.w
 8012412:	4607      	mov	r7, r0
 8012414:	1c78      	adds	r0, r7, #1
 8012416:	d1d6      	bne.n	80123c6 <_vfiprintf_r+0x19e>
 8012418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801241a:	07d9      	lsls	r1, r3, #31
 801241c:	d405      	bmi.n	801242a <_vfiprintf_r+0x202>
 801241e:	89ab      	ldrh	r3, [r5, #12]
 8012420:	059a      	lsls	r2, r3, #22
 8012422:	d402      	bmi.n	801242a <_vfiprintf_r+0x202>
 8012424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012426:	f7ff fc6e 	bl	8011d06 <__retarget_lock_release_recursive>
 801242a:	89ab      	ldrh	r3, [r5, #12]
 801242c:	065b      	lsls	r3, r3, #25
 801242e:	f53f af1d 	bmi.w	801226c <_vfiprintf_r+0x44>
 8012432:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012434:	e71c      	b.n	8012270 <_vfiprintf_r+0x48>
 8012436:	ab03      	add	r3, sp, #12
 8012438:	9300      	str	r3, [sp, #0]
 801243a:	462a      	mov	r2, r5
 801243c:	4b05      	ldr	r3, [pc, #20]	; (8012454 <_vfiprintf_r+0x22c>)
 801243e:	a904      	add	r1, sp, #16
 8012440:	4630      	mov	r0, r6
 8012442:	f000 f879 	bl	8012538 <_printf_i>
 8012446:	e7e4      	b.n	8012412 <_vfiprintf_r+0x1ea>
 8012448:	08016a6a 	.word	0x08016a6a
 801244c:	08016a74 	.word	0x08016a74
 8012450:	00000000 	.word	0x00000000
 8012454:	08012203 	.word	0x08012203
 8012458:	08016a70 	.word	0x08016a70

0801245c <_printf_common>:
 801245c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012460:	4616      	mov	r6, r2
 8012462:	4699      	mov	r9, r3
 8012464:	688a      	ldr	r2, [r1, #8]
 8012466:	690b      	ldr	r3, [r1, #16]
 8012468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801246c:	4293      	cmp	r3, r2
 801246e:	bfb8      	it	lt
 8012470:	4613      	movlt	r3, r2
 8012472:	6033      	str	r3, [r6, #0]
 8012474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012478:	4607      	mov	r7, r0
 801247a:	460c      	mov	r4, r1
 801247c:	b10a      	cbz	r2, 8012482 <_printf_common+0x26>
 801247e:	3301      	adds	r3, #1
 8012480:	6033      	str	r3, [r6, #0]
 8012482:	6823      	ldr	r3, [r4, #0]
 8012484:	0699      	lsls	r1, r3, #26
 8012486:	bf42      	ittt	mi
 8012488:	6833      	ldrmi	r3, [r6, #0]
 801248a:	3302      	addmi	r3, #2
 801248c:	6033      	strmi	r3, [r6, #0]
 801248e:	6825      	ldr	r5, [r4, #0]
 8012490:	f015 0506 	ands.w	r5, r5, #6
 8012494:	d106      	bne.n	80124a4 <_printf_common+0x48>
 8012496:	f104 0a19 	add.w	sl, r4, #25
 801249a:	68e3      	ldr	r3, [r4, #12]
 801249c:	6832      	ldr	r2, [r6, #0]
 801249e:	1a9b      	subs	r3, r3, r2
 80124a0:	42ab      	cmp	r3, r5
 80124a2:	dc26      	bgt.n	80124f2 <_printf_common+0x96>
 80124a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80124a8:	1e13      	subs	r3, r2, #0
 80124aa:	6822      	ldr	r2, [r4, #0]
 80124ac:	bf18      	it	ne
 80124ae:	2301      	movne	r3, #1
 80124b0:	0692      	lsls	r2, r2, #26
 80124b2:	d42b      	bmi.n	801250c <_printf_common+0xb0>
 80124b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80124b8:	4649      	mov	r1, r9
 80124ba:	4638      	mov	r0, r7
 80124bc:	47c0      	blx	r8
 80124be:	3001      	adds	r0, #1
 80124c0:	d01e      	beq.n	8012500 <_printf_common+0xa4>
 80124c2:	6823      	ldr	r3, [r4, #0]
 80124c4:	6922      	ldr	r2, [r4, #16]
 80124c6:	f003 0306 	and.w	r3, r3, #6
 80124ca:	2b04      	cmp	r3, #4
 80124cc:	bf02      	ittt	eq
 80124ce:	68e5      	ldreq	r5, [r4, #12]
 80124d0:	6833      	ldreq	r3, [r6, #0]
 80124d2:	1aed      	subeq	r5, r5, r3
 80124d4:	68a3      	ldr	r3, [r4, #8]
 80124d6:	bf0c      	ite	eq
 80124d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124dc:	2500      	movne	r5, #0
 80124de:	4293      	cmp	r3, r2
 80124e0:	bfc4      	itt	gt
 80124e2:	1a9b      	subgt	r3, r3, r2
 80124e4:	18ed      	addgt	r5, r5, r3
 80124e6:	2600      	movs	r6, #0
 80124e8:	341a      	adds	r4, #26
 80124ea:	42b5      	cmp	r5, r6
 80124ec:	d11a      	bne.n	8012524 <_printf_common+0xc8>
 80124ee:	2000      	movs	r0, #0
 80124f0:	e008      	b.n	8012504 <_printf_common+0xa8>
 80124f2:	2301      	movs	r3, #1
 80124f4:	4652      	mov	r2, sl
 80124f6:	4649      	mov	r1, r9
 80124f8:	4638      	mov	r0, r7
 80124fa:	47c0      	blx	r8
 80124fc:	3001      	adds	r0, #1
 80124fe:	d103      	bne.n	8012508 <_printf_common+0xac>
 8012500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012508:	3501      	adds	r5, #1
 801250a:	e7c6      	b.n	801249a <_printf_common+0x3e>
 801250c:	18e1      	adds	r1, r4, r3
 801250e:	1c5a      	adds	r2, r3, #1
 8012510:	2030      	movs	r0, #48	; 0x30
 8012512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012516:	4422      	add	r2, r4
 8012518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801251c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012520:	3302      	adds	r3, #2
 8012522:	e7c7      	b.n	80124b4 <_printf_common+0x58>
 8012524:	2301      	movs	r3, #1
 8012526:	4622      	mov	r2, r4
 8012528:	4649      	mov	r1, r9
 801252a:	4638      	mov	r0, r7
 801252c:	47c0      	blx	r8
 801252e:	3001      	adds	r0, #1
 8012530:	d0e6      	beq.n	8012500 <_printf_common+0xa4>
 8012532:	3601      	adds	r6, #1
 8012534:	e7d9      	b.n	80124ea <_printf_common+0x8e>
	...

08012538 <_printf_i>:
 8012538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801253c:	7e0f      	ldrb	r7, [r1, #24]
 801253e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012540:	2f78      	cmp	r7, #120	; 0x78
 8012542:	4691      	mov	r9, r2
 8012544:	4680      	mov	r8, r0
 8012546:	460c      	mov	r4, r1
 8012548:	469a      	mov	sl, r3
 801254a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801254e:	d807      	bhi.n	8012560 <_printf_i+0x28>
 8012550:	2f62      	cmp	r7, #98	; 0x62
 8012552:	d80a      	bhi.n	801256a <_printf_i+0x32>
 8012554:	2f00      	cmp	r7, #0
 8012556:	f000 80d4 	beq.w	8012702 <_printf_i+0x1ca>
 801255a:	2f58      	cmp	r7, #88	; 0x58
 801255c:	f000 80c0 	beq.w	80126e0 <_printf_i+0x1a8>
 8012560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012568:	e03a      	b.n	80125e0 <_printf_i+0xa8>
 801256a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801256e:	2b15      	cmp	r3, #21
 8012570:	d8f6      	bhi.n	8012560 <_printf_i+0x28>
 8012572:	a101      	add	r1, pc, #4	; (adr r1, 8012578 <_printf_i+0x40>)
 8012574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012578:	080125d1 	.word	0x080125d1
 801257c:	080125e5 	.word	0x080125e5
 8012580:	08012561 	.word	0x08012561
 8012584:	08012561 	.word	0x08012561
 8012588:	08012561 	.word	0x08012561
 801258c:	08012561 	.word	0x08012561
 8012590:	080125e5 	.word	0x080125e5
 8012594:	08012561 	.word	0x08012561
 8012598:	08012561 	.word	0x08012561
 801259c:	08012561 	.word	0x08012561
 80125a0:	08012561 	.word	0x08012561
 80125a4:	080126e9 	.word	0x080126e9
 80125a8:	08012611 	.word	0x08012611
 80125ac:	080126a3 	.word	0x080126a3
 80125b0:	08012561 	.word	0x08012561
 80125b4:	08012561 	.word	0x08012561
 80125b8:	0801270b 	.word	0x0801270b
 80125bc:	08012561 	.word	0x08012561
 80125c0:	08012611 	.word	0x08012611
 80125c4:	08012561 	.word	0x08012561
 80125c8:	08012561 	.word	0x08012561
 80125cc:	080126ab 	.word	0x080126ab
 80125d0:	682b      	ldr	r3, [r5, #0]
 80125d2:	1d1a      	adds	r2, r3, #4
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	602a      	str	r2, [r5, #0]
 80125d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80125e0:	2301      	movs	r3, #1
 80125e2:	e09f      	b.n	8012724 <_printf_i+0x1ec>
 80125e4:	6820      	ldr	r0, [r4, #0]
 80125e6:	682b      	ldr	r3, [r5, #0]
 80125e8:	0607      	lsls	r7, r0, #24
 80125ea:	f103 0104 	add.w	r1, r3, #4
 80125ee:	6029      	str	r1, [r5, #0]
 80125f0:	d501      	bpl.n	80125f6 <_printf_i+0xbe>
 80125f2:	681e      	ldr	r6, [r3, #0]
 80125f4:	e003      	b.n	80125fe <_printf_i+0xc6>
 80125f6:	0646      	lsls	r6, r0, #25
 80125f8:	d5fb      	bpl.n	80125f2 <_printf_i+0xba>
 80125fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80125fe:	2e00      	cmp	r6, #0
 8012600:	da03      	bge.n	801260a <_printf_i+0xd2>
 8012602:	232d      	movs	r3, #45	; 0x2d
 8012604:	4276      	negs	r6, r6
 8012606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801260a:	485a      	ldr	r0, [pc, #360]	; (8012774 <_printf_i+0x23c>)
 801260c:	230a      	movs	r3, #10
 801260e:	e012      	b.n	8012636 <_printf_i+0xfe>
 8012610:	682b      	ldr	r3, [r5, #0]
 8012612:	6820      	ldr	r0, [r4, #0]
 8012614:	1d19      	adds	r1, r3, #4
 8012616:	6029      	str	r1, [r5, #0]
 8012618:	0605      	lsls	r5, r0, #24
 801261a:	d501      	bpl.n	8012620 <_printf_i+0xe8>
 801261c:	681e      	ldr	r6, [r3, #0]
 801261e:	e002      	b.n	8012626 <_printf_i+0xee>
 8012620:	0641      	lsls	r1, r0, #25
 8012622:	d5fb      	bpl.n	801261c <_printf_i+0xe4>
 8012624:	881e      	ldrh	r6, [r3, #0]
 8012626:	4853      	ldr	r0, [pc, #332]	; (8012774 <_printf_i+0x23c>)
 8012628:	2f6f      	cmp	r7, #111	; 0x6f
 801262a:	bf0c      	ite	eq
 801262c:	2308      	moveq	r3, #8
 801262e:	230a      	movne	r3, #10
 8012630:	2100      	movs	r1, #0
 8012632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012636:	6865      	ldr	r5, [r4, #4]
 8012638:	60a5      	str	r5, [r4, #8]
 801263a:	2d00      	cmp	r5, #0
 801263c:	bfa2      	ittt	ge
 801263e:	6821      	ldrge	r1, [r4, #0]
 8012640:	f021 0104 	bicge.w	r1, r1, #4
 8012644:	6021      	strge	r1, [r4, #0]
 8012646:	b90e      	cbnz	r6, 801264c <_printf_i+0x114>
 8012648:	2d00      	cmp	r5, #0
 801264a:	d04b      	beq.n	80126e4 <_printf_i+0x1ac>
 801264c:	4615      	mov	r5, r2
 801264e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012652:	fb03 6711 	mls	r7, r3, r1, r6
 8012656:	5dc7      	ldrb	r7, [r0, r7]
 8012658:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801265c:	4637      	mov	r7, r6
 801265e:	42bb      	cmp	r3, r7
 8012660:	460e      	mov	r6, r1
 8012662:	d9f4      	bls.n	801264e <_printf_i+0x116>
 8012664:	2b08      	cmp	r3, #8
 8012666:	d10b      	bne.n	8012680 <_printf_i+0x148>
 8012668:	6823      	ldr	r3, [r4, #0]
 801266a:	07de      	lsls	r6, r3, #31
 801266c:	d508      	bpl.n	8012680 <_printf_i+0x148>
 801266e:	6923      	ldr	r3, [r4, #16]
 8012670:	6861      	ldr	r1, [r4, #4]
 8012672:	4299      	cmp	r1, r3
 8012674:	bfde      	ittt	le
 8012676:	2330      	movle	r3, #48	; 0x30
 8012678:	f805 3c01 	strble.w	r3, [r5, #-1]
 801267c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012680:	1b52      	subs	r2, r2, r5
 8012682:	6122      	str	r2, [r4, #16]
 8012684:	f8cd a000 	str.w	sl, [sp]
 8012688:	464b      	mov	r3, r9
 801268a:	aa03      	add	r2, sp, #12
 801268c:	4621      	mov	r1, r4
 801268e:	4640      	mov	r0, r8
 8012690:	f7ff fee4 	bl	801245c <_printf_common>
 8012694:	3001      	adds	r0, #1
 8012696:	d14a      	bne.n	801272e <_printf_i+0x1f6>
 8012698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801269c:	b004      	add	sp, #16
 801269e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126a2:	6823      	ldr	r3, [r4, #0]
 80126a4:	f043 0320 	orr.w	r3, r3, #32
 80126a8:	6023      	str	r3, [r4, #0]
 80126aa:	4833      	ldr	r0, [pc, #204]	; (8012778 <_printf_i+0x240>)
 80126ac:	2778      	movs	r7, #120	; 0x78
 80126ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80126b2:	6823      	ldr	r3, [r4, #0]
 80126b4:	6829      	ldr	r1, [r5, #0]
 80126b6:	061f      	lsls	r7, r3, #24
 80126b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80126bc:	d402      	bmi.n	80126c4 <_printf_i+0x18c>
 80126be:	065f      	lsls	r7, r3, #25
 80126c0:	bf48      	it	mi
 80126c2:	b2b6      	uxthmi	r6, r6
 80126c4:	07df      	lsls	r7, r3, #31
 80126c6:	bf48      	it	mi
 80126c8:	f043 0320 	orrmi.w	r3, r3, #32
 80126cc:	6029      	str	r1, [r5, #0]
 80126ce:	bf48      	it	mi
 80126d0:	6023      	strmi	r3, [r4, #0]
 80126d2:	b91e      	cbnz	r6, 80126dc <_printf_i+0x1a4>
 80126d4:	6823      	ldr	r3, [r4, #0]
 80126d6:	f023 0320 	bic.w	r3, r3, #32
 80126da:	6023      	str	r3, [r4, #0]
 80126dc:	2310      	movs	r3, #16
 80126de:	e7a7      	b.n	8012630 <_printf_i+0xf8>
 80126e0:	4824      	ldr	r0, [pc, #144]	; (8012774 <_printf_i+0x23c>)
 80126e2:	e7e4      	b.n	80126ae <_printf_i+0x176>
 80126e4:	4615      	mov	r5, r2
 80126e6:	e7bd      	b.n	8012664 <_printf_i+0x12c>
 80126e8:	682b      	ldr	r3, [r5, #0]
 80126ea:	6826      	ldr	r6, [r4, #0]
 80126ec:	6961      	ldr	r1, [r4, #20]
 80126ee:	1d18      	adds	r0, r3, #4
 80126f0:	6028      	str	r0, [r5, #0]
 80126f2:	0635      	lsls	r5, r6, #24
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	d501      	bpl.n	80126fc <_printf_i+0x1c4>
 80126f8:	6019      	str	r1, [r3, #0]
 80126fa:	e002      	b.n	8012702 <_printf_i+0x1ca>
 80126fc:	0670      	lsls	r0, r6, #25
 80126fe:	d5fb      	bpl.n	80126f8 <_printf_i+0x1c0>
 8012700:	8019      	strh	r1, [r3, #0]
 8012702:	2300      	movs	r3, #0
 8012704:	6123      	str	r3, [r4, #16]
 8012706:	4615      	mov	r5, r2
 8012708:	e7bc      	b.n	8012684 <_printf_i+0x14c>
 801270a:	682b      	ldr	r3, [r5, #0]
 801270c:	1d1a      	adds	r2, r3, #4
 801270e:	602a      	str	r2, [r5, #0]
 8012710:	681d      	ldr	r5, [r3, #0]
 8012712:	6862      	ldr	r2, [r4, #4]
 8012714:	2100      	movs	r1, #0
 8012716:	4628      	mov	r0, r5
 8012718:	f7ed fdd2 	bl	80002c0 <memchr>
 801271c:	b108      	cbz	r0, 8012722 <_printf_i+0x1ea>
 801271e:	1b40      	subs	r0, r0, r5
 8012720:	6060      	str	r0, [r4, #4]
 8012722:	6863      	ldr	r3, [r4, #4]
 8012724:	6123      	str	r3, [r4, #16]
 8012726:	2300      	movs	r3, #0
 8012728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801272c:	e7aa      	b.n	8012684 <_printf_i+0x14c>
 801272e:	6923      	ldr	r3, [r4, #16]
 8012730:	462a      	mov	r2, r5
 8012732:	4649      	mov	r1, r9
 8012734:	4640      	mov	r0, r8
 8012736:	47d0      	blx	sl
 8012738:	3001      	adds	r0, #1
 801273a:	d0ad      	beq.n	8012698 <_printf_i+0x160>
 801273c:	6823      	ldr	r3, [r4, #0]
 801273e:	079b      	lsls	r3, r3, #30
 8012740:	d413      	bmi.n	801276a <_printf_i+0x232>
 8012742:	68e0      	ldr	r0, [r4, #12]
 8012744:	9b03      	ldr	r3, [sp, #12]
 8012746:	4298      	cmp	r0, r3
 8012748:	bfb8      	it	lt
 801274a:	4618      	movlt	r0, r3
 801274c:	e7a6      	b.n	801269c <_printf_i+0x164>
 801274e:	2301      	movs	r3, #1
 8012750:	4632      	mov	r2, r6
 8012752:	4649      	mov	r1, r9
 8012754:	4640      	mov	r0, r8
 8012756:	47d0      	blx	sl
 8012758:	3001      	adds	r0, #1
 801275a:	d09d      	beq.n	8012698 <_printf_i+0x160>
 801275c:	3501      	adds	r5, #1
 801275e:	68e3      	ldr	r3, [r4, #12]
 8012760:	9903      	ldr	r1, [sp, #12]
 8012762:	1a5b      	subs	r3, r3, r1
 8012764:	42ab      	cmp	r3, r5
 8012766:	dcf2      	bgt.n	801274e <_printf_i+0x216>
 8012768:	e7eb      	b.n	8012742 <_printf_i+0x20a>
 801276a:	2500      	movs	r5, #0
 801276c:	f104 0619 	add.w	r6, r4, #25
 8012770:	e7f5      	b.n	801275e <_printf_i+0x226>
 8012772:	bf00      	nop
 8012774:	08016a7b 	.word	0x08016a7b
 8012778:	08016a8c 	.word	0x08016a8c

0801277c <__sflush_r>:
 801277c:	898a      	ldrh	r2, [r1, #12]
 801277e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012782:	4605      	mov	r5, r0
 8012784:	0710      	lsls	r0, r2, #28
 8012786:	460c      	mov	r4, r1
 8012788:	d458      	bmi.n	801283c <__sflush_r+0xc0>
 801278a:	684b      	ldr	r3, [r1, #4]
 801278c:	2b00      	cmp	r3, #0
 801278e:	dc05      	bgt.n	801279c <__sflush_r+0x20>
 8012790:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012792:	2b00      	cmp	r3, #0
 8012794:	dc02      	bgt.n	801279c <__sflush_r+0x20>
 8012796:	2000      	movs	r0, #0
 8012798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801279c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801279e:	2e00      	cmp	r6, #0
 80127a0:	d0f9      	beq.n	8012796 <__sflush_r+0x1a>
 80127a2:	2300      	movs	r3, #0
 80127a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80127a8:	682f      	ldr	r7, [r5, #0]
 80127aa:	6a21      	ldr	r1, [r4, #32]
 80127ac:	602b      	str	r3, [r5, #0]
 80127ae:	d032      	beq.n	8012816 <__sflush_r+0x9a>
 80127b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80127b2:	89a3      	ldrh	r3, [r4, #12]
 80127b4:	075a      	lsls	r2, r3, #29
 80127b6:	d505      	bpl.n	80127c4 <__sflush_r+0x48>
 80127b8:	6863      	ldr	r3, [r4, #4]
 80127ba:	1ac0      	subs	r0, r0, r3
 80127bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127be:	b10b      	cbz	r3, 80127c4 <__sflush_r+0x48>
 80127c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80127c2:	1ac0      	subs	r0, r0, r3
 80127c4:	2300      	movs	r3, #0
 80127c6:	4602      	mov	r2, r0
 80127c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127ca:	6a21      	ldr	r1, [r4, #32]
 80127cc:	4628      	mov	r0, r5
 80127ce:	47b0      	blx	r6
 80127d0:	1c43      	adds	r3, r0, #1
 80127d2:	89a3      	ldrh	r3, [r4, #12]
 80127d4:	d106      	bne.n	80127e4 <__sflush_r+0x68>
 80127d6:	6829      	ldr	r1, [r5, #0]
 80127d8:	291d      	cmp	r1, #29
 80127da:	d82b      	bhi.n	8012834 <__sflush_r+0xb8>
 80127dc:	4a29      	ldr	r2, [pc, #164]	; (8012884 <__sflush_r+0x108>)
 80127de:	410a      	asrs	r2, r1
 80127e0:	07d6      	lsls	r6, r2, #31
 80127e2:	d427      	bmi.n	8012834 <__sflush_r+0xb8>
 80127e4:	2200      	movs	r2, #0
 80127e6:	6062      	str	r2, [r4, #4]
 80127e8:	04d9      	lsls	r1, r3, #19
 80127ea:	6922      	ldr	r2, [r4, #16]
 80127ec:	6022      	str	r2, [r4, #0]
 80127ee:	d504      	bpl.n	80127fa <__sflush_r+0x7e>
 80127f0:	1c42      	adds	r2, r0, #1
 80127f2:	d101      	bne.n	80127f8 <__sflush_r+0x7c>
 80127f4:	682b      	ldr	r3, [r5, #0]
 80127f6:	b903      	cbnz	r3, 80127fa <__sflush_r+0x7e>
 80127f8:	6560      	str	r0, [r4, #84]	; 0x54
 80127fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127fc:	602f      	str	r7, [r5, #0]
 80127fe:	2900      	cmp	r1, #0
 8012800:	d0c9      	beq.n	8012796 <__sflush_r+0x1a>
 8012802:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012806:	4299      	cmp	r1, r3
 8012808:	d002      	beq.n	8012810 <__sflush_r+0x94>
 801280a:	4628      	mov	r0, r5
 801280c:	f7ff fa92 	bl	8011d34 <_free_r>
 8012810:	2000      	movs	r0, #0
 8012812:	6360      	str	r0, [r4, #52]	; 0x34
 8012814:	e7c0      	b.n	8012798 <__sflush_r+0x1c>
 8012816:	2301      	movs	r3, #1
 8012818:	4628      	mov	r0, r5
 801281a:	47b0      	blx	r6
 801281c:	1c41      	adds	r1, r0, #1
 801281e:	d1c8      	bne.n	80127b2 <__sflush_r+0x36>
 8012820:	682b      	ldr	r3, [r5, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d0c5      	beq.n	80127b2 <__sflush_r+0x36>
 8012826:	2b1d      	cmp	r3, #29
 8012828:	d001      	beq.n	801282e <__sflush_r+0xb2>
 801282a:	2b16      	cmp	r3, #22
 801282c:	d101      	bne.n	8012832 <__sflush_r+0xb6>
 801282e:	602f      	str	r7, [r5, #0]
 8012830:	e7b1      	b.n	8012796 <__sflush_r+0x1a>
 8012832:	89a3      	ldrh	r3, [r4, #12]
 8012834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012838:	81a3      	strh	r3, [r4, #12]
 801283a:	e7ad      	b.n	8012798 <__sflush_r+0x1c>
 801283c:	690f      	ldr	r7, [r1, #16]
 801283e:	2f00      	cmp	r7, #0
 8012840:	d0a9      	beq.n	8012796 <__sflush_r+0x1a>
 8012842:	0793      	lsls	r3, r2, #30
 8012844:	680e      	ldr	r6, [r1, #0]
 8012846:	bf08      	it	eq
 8012848:	694b      	ldreq	r3, [r1, #20]
 801284a:	600f      	str	r7, [r1, #0]
 801284c:	bf18      	it	ne
 801284e:	2300      	movne	r3, #0
 8012850:	eba6 0807 	sub.w	r8, r6, r7
 8012854:	608b      	str	r3, [r1, #8]
 8012856:	f1b8 0f00 	cmp.w	r8, #0
 801285a:	dd9c      	ble.n	8012796 <__sflush_r+0x1a>
 801285c:	6a21      	ldr	r1, [r4, #32]
 801285e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012860:	4643      	mov	r3, r8
 8012862:	463a      	mov	r2, r7
 8012864:	4628      	mov	r0, r5
 8012866:	47b0      	blx	r6
 8012868:	2800      	cmp	r0, #0
 801286a:	dc06      	bgt.n	801287a <__sflush_r+0xfe>
 801286c:	89a3      	ldrh	r3, [r4, #12]
 801286e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012872:	81a3      	strh	r3, [r4, #12]
 8012874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012878:	e78e      	b.n	8012798 <__sflush_r+0x1c>
 801287a:	4407      	add	r7, r0
 801287c:	eba8 0800 	sub.w	r8, r8, r0
 8012880:	e7e9      	b.n	8012856 <__sflush_r+0xda>
 8012882:	bf00      	nop
 8012884:	dfbffffe 	.word	0xdfbffffe

08012888 <_fflush_r>:
 8012888:	b538      	push	{r3, r4, r5, lr}
 801288a:	690b      	ldr	r3, [r1, #16]
 801288c:	4605      	mov	r5, r0
 801288e:	460c      	mov	r4, r1
 8012890:	b913      	cbnz	r3, 8012898 <_fflush_r+0x10>
 8012892:	2500      	movs	r5, #0
 8012894:	4628      	mov	r0, r5
 8012896:	bd38      	pop	{r3, r4, r5, pc}
 8012898:	b118      	cbz	r0, 80128a2 <_fflush_r+0x1a>
 801289a:	6a03      	ldr	r3, [r0, #32]
 801289c:	b90b      	cbnz	r3, 80128a2 <_fflush_r+0x1a>
 801289e:	f7ff f887 	bl	80119b0 <__sinit>
 80128a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d0f3      	beq.n	8012892 <_fflush_r+0xa>
 80128aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80128ac:	07d0      	lsls	r0, r2, #31
 80128ae:	d404      	bmi.n	80128ba <_fflush_r+0x32>
 80128b0:	0599      	lsls	r1, r3, #22
 80128b2:	d402      	bmi.n	80128ba <_fflush_r+0x32>
 80128b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128b6:	f7ff fa25 	bl	8011d04 <__retarget_lock_acquire_recursive>
 80128ba:	4628      	mov	r0, r5
 80128bc:	4621      	mov	r1, r4
 80128be:	f7ff ff5d 	bl	801277c <__sflush_r>
 80128c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128c4:	07da      	lsls	r2, r3, #31
 80128c6:	4605      	mov	r5, r0
 80128c8:	d4e4      	bmi.n	8012894 <_fflush_r+0xc>
 80128ca:	89a3      	ldrh	r3, [r4, #12]
 80128cc:	059b      	lsls	r3, r3, #22
 80128ce:	d4e1      	bmi.n	8012894 <_fflush_r+0xc>
 80128d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128d2:	f7ff fa18 	bl	8011d06 <__retarget_lock_release_recursive>
 80128d6:	e7dd      	b.n	8012894 <_fflush_r+0xc>

080128d8 <_putc_r>:
 80128d8:	b570      	push	{r4, r5, r6, lr}
 80128da:	460d      	mov	r5, r1
 80128dc:	4614      	mov	r4, r2
 80128de:	4606      	mov	r6, r0
 80128e0:	b118      	cbz	r0, 80128ea <_putc_r+0x12>
 80128e2:	6a03      	ldr	r3, [r0, #32]
 80128e4:	b90b      	cbnz	r3, 80128ea <_putc_r+0x12>
 80128e6:	f7ff f863 	bl	80119b0 <__sinit>
 80128ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128ec:	07d8      	lsls	r0, r3, #31
 80128ee:	d405      	bmi.n	80128fc <_putc_r+0x24>
 80128f0:	89a3      	ldrh	r3, [r4, #12]
 80128f2:	0599      	lsls	r1, r3, #22
 80128f4:	d402      	bmi.n	80128fc <_putc_r+0x24>
 80128f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128f8:	f7ff fa04 	bl	8011d04 <__retarget_lock_acquire_recursive>
 80128fc:	68a3      	ldr	r3, [r4, #8]
 80128fe:	3b01      	subs	r3, #1
 8012900:	2b00      	cmp	r3, #0
 8012902:	60a3      	str	r3, [r4, #8]
 8012904:	da05      	bge.n	8012912 <_putc_r+0x3a>
 8012906:	69a2      	ldr	r2, [r4, #24]
 8012908:	4293      	cmp	r3, r2
 801290a:	db12      	blt.n	8012932 <_putc_r+0x5a>
 801290c:	b2eb      	uxtb	r3, r5
 801290e:	2b0a      	cmp	r3, #10
 8012910:	d00f      	beq.n	8012932 <_putc_r+0x5a>
 8012912:	6823      	ldr	r3, [r4, #0]
 8012914:	1c5a      	adds	r2, r3, #1
 8012916:	6022      	str	r2, [r4, #0]
 8012918:	701d      	strb	r5, [r3, #0]
 801291a:	b2ed      	uxtb	r5, r5
 801291c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801291e:	07da      	lsls	r2, r3, #31
 8012920:	d405      	bmi.n	801292e <_putc_r+0x56>
 8012922:	89a3      	ldrh	r3, [r4, #12]
 8012924:	059b      	lsls	r3, r3, #22
 8012926:	d402      	bmi.n	801292e <_putc_r+0x56>
 8012928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801292a:	f7ff f9ec 	bl	8011d06 <__retarget_lock_release_recursive>
 801292e:	4628      	mov	r0, r5
 8012930:	bd70      	pop	{r4, r5, r6, pc}
 8012932:	4629      	mov	r1, r5
 8012934:	4622      	mov	r2, r4
 8012936:	4630      	mov	r0, r6
 8012938:	f000 f802 	bl	8012940 <__swbuf_r>
 801293c:	4605      	mov	r5, r0
 801293e:	e7ed      	b.n	801291c <_putc_r+0x44>

08012940 <__swbuf_r>:
 8012940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012942:	460e      	mov	r6, r1
 8012944:	4614      	mov	r4, r2
 8012946:	4605      	mov	r5, r0
 8012948:	b118      	cbz	r0, 8012952 <__swbuf_r+0x12>
 801294a:	6a03      	ldr	r3, [r0, #32]
 801294c:	b90b      	cbnz	r3, 8012952 <__swbuf_r+0x12>
 801294e:	f7ff f82f 	bl	80119b0 <__sinit>
 8012952:	69a3      	ldr	r3, [r4, #24]
 8012954:	60a3      	str	r3, [r4, #8]
 8012956:	89a3      	ldrh	r3, [r4, #12]
 8012958:	071a      	lsls	r2, r3, #28
 801295a:	d525      	bpl.n	80129a8 <__swbuf_r+0x68>
 801295c:	6923      	ldr	r3, [r4, #16]
 801295e:	b31b      	cbz	r3, 80129a8 <__swbuf_r+0x68>
 8012960:	6823      	ldr	r3, [r4, #0]
 8012962:	6922      	ldr	r2, [r4, #16]
 8012964:	1a98      	subs	r0, r3, r2
 8012966:	6963      	ldr	r3, [r4, #20]
 8012968:	b2f6      	uxtb	r6, r6
 801296a:	4283      	cmp	r3, r0
 801296c:	4637      	mov	r7, r6
 801296e:	dc04      	bgt.n	801297a <__swbuf_r+0x3a>
 8012970:	4621      	mov	r1, r4
 8012972:	4628      	mov	r0, r5
 8012974:	f7ff ff88 	bl	8012888 <_fflush_r>
 8012978:	b9e0      	cbnz	r0, 80129b4 <__swbuf_r+0x74>
 801297a:	68a3      	ldr	r3, [r4, #8]
 801297c:	3b01      	subs	r3, #1
 801297e:	60a3      	str	r3, [r4, #8]
 8012980:	6823      	ldr	r3, [r4, #0]
 8012982:	1c5a      	adds	r2, r3, #1
 8012984:	6022      	str	r2, [r4, #0]
 8012986:	701e      	strb	r6, [r3, #0]
 8012988:	6962      	ldr	r2, [r4, #20]
 801298a:	1c43      	adds	r3, r0, #1
 801298c:	429a      	cmp	r2, r3
 801298e:	d004      	beq.n	801299a <__swbuf_r+0x5a>
 8012990:	89a3      	ldrh	r3, [r4, #12]
 8012992:	07db      	lsls	r3, r3, #31
 8012994:	d506      	bpl.n	80129a4 <__swbuf_r+0x64>
 8012996:	2e0a      	cmp	r6, #10
 8012998:	d104      	bne.n	80129a4 <__swbuf_r+0x64>
 801299a:	4621      	mov	r1, r4
 801299c:	4628      	mov	r0, r5
 801299e:	f7ff ff73 	bl	8012888 <_fflush_r>
 80129a2:	b938      	cbnz	r0, 80129b4 <__swbuf_r+0x74>
 80129a4:	4638      	mov	r0, r7
 80129a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129a8:	4621      	mov	r1, r4
 80129aa:	4628      	mov	r0, r5
 80129ac:	f000 f806 	bl	80129bc <__swsetup_r>
 80129b0:	2800      	cmp	r0, #0
 80129b2:	d0d5      	beq.n	8012960 <__swbuf_r+0x20>
 80129b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80129b8:	e7f4      	b.n	80129a4 <__swbuf_r+0x64>
	...

080129bc <__swsetup_r>:
 80129bc:	b538      	push	{r3, r4, r5, lr}
 80129be:	4b2a      	ldr	r3, [pc, #168]	; (8012a68 <__swsetup_r+0xac>)
 80129c0:	4605      	mov	r5, r0
 80129c2:	6818      	ldr	r0, [r3, #0]
 80129c4:	460c      	mov	r4, r1
 80129c6:	b118      	cbz	r0, 80129d0 <__swsetup_r+0x14>
 80129c8:	6a03      	ldr	r3, [r0, #32]
 80129ca:	b90b      	cbnz	r3, 80129d0 <__swsetup_r+0x14>
 80129cc:	f7fe fff0 	bl	80119b0 <__sinit>
 80129d0:	89a3      	ldrh	r3, [r4, #12]
 80129d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80129d6:	0718      	lsls	r0, r3, #28
 80129d8:	d422      	bmi.n	8012a20 <__swsetup_r+0x64>
 80129da:	06d9      	lsls	r1, r3, #27
 80129dc:	d407      	bmi.n	80129ee <__swsetup_r+0x32>
 80129de:	2309      	movs	r3, #9
 80129e0:	602b      	str	r3, [r5, #0]
 80129e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80129e6:	81a3      	strh	r3, [r4, #12]
 80129e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129ec:	e034      	b.n	8012a58 <__swsetup_r+0x9c>
 80129ee:	0758      	lsls	r0, r3, #29
 80129f0:	d512      	bpl.n	8012a18 <__swsetup_r+0x5c>
 80129f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80129f4:	b141      	cbz	r1, 8012a08 <__swsetup_r+0x4c>
 80129f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80129fa:	4299      	cmp	r1, r3
 80129fc:	d002      	beq.n	8012a04 <__swsetup_r+0x48>
 80129fe:	4628      	mov	r0, r5
 8012a00:	f7ff f998 	bl	8011d34 <_free_r>
 8012a04:	2300      	movs	r3, #0
 8012a06:	6363      	str	r3, [r4, #52]	; 0x34
 8012a08:	89a3      	ldrh	r3, [r4, #12]
 8012a0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012a0e:	81a3      	strh	r3, [r4, #12]
 8012a10:	2300      	movs	r3, #0
 8012a12:	6063      	str	r3, [r4, #4]
 8012a14:	6923      	ldr	r3, [r4, #16]
 8012a16:	6023      	str	r3, [r4, #0]
 8012a18:	89a3      	ldrh	r3, [r4, #12]
 8012a1a:	f043 0308 	orr.w	r3, r3, #8
 8012a1e:	81a3      	strh	r3, [r4, #12]
 8012a20:	6923      	ldr	r3, [r4, #16]
 8012a22:	b94b      	cbnz	r3, 8012a38 <__swsetup_r+0x7c>
 8012a24:	89a3      	ldrh	r3, [r4, #12]
 8012a26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a2e:	d003      	beq.n	8012a38 <__swsetup_r+0x7c>
 8012a30:	4621      	mov	r1, r4
 8012a32:	4628      	mov	r0, r5
 8012a34:	f000 f8dd 	bl	8012bf2 <__smakebuf_r>
 8012a38:	89a0      	ldrh	r0, [r4, #12]
 8012a3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a3e:	f010 0301 	ands.w	r3, r0, #1
 8012a42:	d00a      	beq.n	8012a5a <__swsetup_r+0x9e>
 8012a44:	2300      	movs	r3, #0
 8012a46:	60a3      	str	r3, [r4, #8]
 8012a48:	6963      	ldr	r3, [r4, #20]
 8012a4a:	425b      	negs	r3, r3
 8012a4c:	61a3      	str	r3, [r4, #24]
 8012a4e:	6923      	ldr	r3, [r4, #16]
 8012a50:	b943      	cbnz	r3, 8012a64 <__swsetup_r+0xa8>
 8012a52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012a56:	d1c4      	bne.n	80129e2 <__swsetup_r+0x26>
 8012a58:	bd38      	pop	{r3, r4, r5, pc}
 8012a5a:	0781      	lsls	r1, r0, #30
 8012a5c:	bf58      	it	pl
 8012a5e:	6963      	ldrpl	r3, [r4, #20]
 8012a60:	60a3      	str	r3, [r4, #8]
 8012a62:	e7f4      	b.n	8012a4e <__swsetup_r+0x92>
 8012a64:	2000      	movs	r0, #0
 8012a66:	e7f7      	b.n	8012a58 <__swsetup_r+0x9c>
 8012a68:	2000165c 	.word	0x2000165c

08012a6c <memmove>:
 8012a6c:	4288      	cmp	r0, r1
 8012a6e:	b510      	push	{r4, lr}
 8012a70:	eb01 0402 	add.w	r4, r1, r2
 8012a74:	d902      	bls.n	8012a7c <memmove+0x10>
 8012a76:	4284      	cmp	r4, r0
 8012a78:	4623      	mov	r3, r4
 8012a7a:	d807      	bhi.n	8012a8c <memmove+0x20>
 8012a7c:	1e43      	subs	r3, r0, #1
 8012a7e:	42a1      	cmp	r1, r4
 8012a80:	d008      	beq.n	8012a94 <memmove+0x28>
 8012a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a8a:	e7f8      	b.n	8012a7e <memmove+0x12>
 8012a8c:	4402      	add	r2, r0
 8012a8e:	4601      	mov	r1, r0
 8012a90:	428a      	cmp	r2, r1
 8012a92:	d100      	bne.n	8012a96 <memmove+0x2a>
 8012a94:	bd10      	pop	{r4, pc}
 8012a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a9e:	e7f7      	b.n	8012a90 <memmove+0x24>

08012aa0 <_raise_r>:
 8012aa0:	291f      	cmp	r1, #31
 8012aa2:	b538      	push	{r3, r4, r5, lr}
 8012aa4:	4604      	mov	r4, r0
 8012aa6:	460d      	mov	r5, r1
 8012aa8:	d904      	bls.n	8012ab4 <_raise_r+0x14>
 8012aaa:	2316      	movs	r3, #22
 8012aac:	6003      	str	r3, [r0, #0]
 8012aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ab2:	bd38      	pop	{r3, r4, r5, pc}
 8012ab4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012ab6:	b112      	cbz	r2, 8012abe <_raise_r+0x1e>
 8012ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012abc:	b94b      	cbnz	r3, 8012ad2 <_raise_r+0x32>
 8012abe:	4620      	mov	r0, r4
 8012ac0:	f000 f830 	bl	8012b24 <_getpid_r>
 8012ac4:	462a      	mov	r2, r5
 8012ac6:	4601      	mov	r1, r0
 8012ac8:	4620      	mov	r0, r4
 8012aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ace:	f000 b817 	b.w	8012b00 <_kill_r>
 8012ad2:	2b01      	cmp	r3, #1
 8012ad4:	d00a      	beq.n	8012aec <_raise_r+0x4c>
 8012ad6:	1c59      	adds	r1, r3, #1
 8012ad8:	d103      	bne.n	8012ae2 <_raise_r+0x42>
 8012ada:	2316      	movs	r3, #22
 8012adc:	6003      	str	r3, [r0, #0]
 8012ade:	2001      	movs	r0, #1
 8012ae0:	e7e7      	b.n	8012ab2 <_raise_r+0x12>
 8012ae2:	2400      	movs	r4, #0
 8012ae4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012ae8:	4628      	mov	r0, r5
 8012aea:	4798      	blx	r3
 8012aec:	2000      	movs	r0, #0
 8012aee:	e7e0      	b.n	8012ab2 <_raise_r+0x12>

08012af0 <raise>:
 8012af0:	4b02      	ldr	r3, [pc, #8]	; (8012afc <raise+0xc>)
 8012af2:	4601      	mov	r1, r0
 8012af4:	6818      	ldr	r0, [r3, #0]
 8012af6:	f7ff bfd3 	b.w	8012aa0 <_raise_r>
 8012afa:	bf00      	nop
 8012afc:	2000165c 	.word	0x2000165c

08012b00 <_kill_r>:
 8012b00:	b538      	push	{r3, r4, r5, lr}
 8012b02:	4d07      	ldr	r5, [pc, #28]	; (8012b20 <_kill_r+0x20>)
 8012b04:	2300      	movs	r3, #0
 8012b06:	4604      	mov	r4, r0
 8012b08:	4608      	mov	r0, r1
 8012b0a:	4611      	mov	r1, r2
 8012b0c:	602b      	str	r3, [r5, #0]
 8012b0e:	f7ee f9f1 	bl	8000ef4 <_kill>
 8012b12:	1c43      	adds	r3, r0, #1
 8012b14:	d102      	bne.n	8012b1c <_kill_r+0x1c>
 8012b16:	682b      	ldr	r3, [r5, #0]
 8012b18:	b103      	cbz	r3, 8012b1c <_kill_r+0x1c>
 8012b1a:	6023      	str	r3, [r4, #0]
 8012b1c:	bd38      	pop	{r3, r4, r5, pc}
 8012b1e:	bf00      	nop
 8012b20:	2000c930 	.word	0x2000c930

08012b24 <_getpid_r>:
 8012b24:	f7ee b9e4 	b.w	8000ef0 <_getpid>

08012b28 <_sbrk_r>:
 8012b28:	b538      	push	{r3, r4, r5, lr}
 8012b2a:	4d06      	ldr	r5, [pc, #24]	; (8012b44 <_sbrk_r+0x1c>)
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	4604      	mov	r4, r0
 8012b30:	4608      	mov	r0, r1
 8012b32:	602b      	str	r3, [r5, #0]
 8012b34:	f7ee fa08 	bl	8000f48 <_sbrk>
 8012b38:	1c43      	adds	r3, r0, #1
 8012b3a:	d102      	bne.n	8012b42 <_sbrk_r+0x1a>
 8012b3c:	682b      	ldr	r3, [r5, #0]
 8012b3e:	b103      	cbz	r3, 8012b42 <_sbrk_r+0x1a>
 8012b40:	6023      	str	r3, [r4, #0]
 8012b42:	bd38      	pop	{r3, r4, r5, pc}
 8012b44:	2000c930 	.word	0x2000c930

08012b48 <_realloc_r>:
 8012b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b4c:	4680      	mov	r8, r0
 8012b4e:	4614      	mov	r4, r2
 8012b50:	460e      	mov	r6, r1
 8012b52:	b921      	cbnz	r1, 8012b5e <_realloc_r+0x16>
 8012b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b58:	4611      	mov	r1, r2
 8012b5a:	f7ff b957 	b.w	8011e0c <_malloc_r>
 8012b5e:	b92a      	cbnz	r2, 8012b6c <_realloc_r+0x24>
 8012b60:	f7ff f8e8 	bl	8011d34 <_free_r>
 8012b64:	4625      	mov	r5, r4
 8012b66:	4628      	mov	r0, r5
 8012b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b6c:	f000 f8a0 	bl	8012cb0 <_malloc_usable_size_r>
 8012b70:	4284      	cmp	r4, r0
 8012b72:	4607      	mov	r7, r0
 8012b74:	d802      	bhi.n	8012b7c <_realloc_r+0x34>
 8012b76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012b7a:	d812      	bhi.n	8012ba2 <_realloc_r+0x5a>
 8012b7c:	4621      	mov	r1, r4
 8012b7e:	4640      	mov	r0, r8
 8012b80:	f7ff f944 	bl	8011e0c <_malloc_r>
 8012b84:	4605      	mov	r5, r0
 8012b86:	2800      	cmp	r0, #0
 8012b88:	d0ed      	beq.n	8012b66 <_realloc_r+0x1e>
 8012b8a:	42bc      	cmp	r4, r7
 8012b8c:	4622      	mov	r2, r4
 8012b8e:	4631      	mov	r1, r6
 8012b90:	bf28      	it	cs
 8012b92:	463a      	movcs	r2, r7
 8012b94:	f7ff f8b8 	bl	8011d08 <memcpy>
 8012b98:	4631      	mov	r1, r6
 8012b9a:	4640      	mov	r0, r8
 8012b9c:	f7ff f8ca 	bl	8011d34 <_free_r>
 8012ba0:	e7e1      	b.n	8012b66 <_realloc_r+0x1e>
 8012ba2:	4635      	mov	r5, r6
 8012ba4:	e7df      	b.n	8012b66 <_realloc_r+0x1e>

08012ba6 <__swhatbuf_r>:
 8012ba6:	b570      	push	{r4, r5, r6, lr}
 8012ba8:	460c      	mov	r4, r1
 8012baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bae:	2900      	cmp	r1, #0
 8012bb0:	b096      	sub	sp, #88	; 0x58
 8012bb2:	4615      	mov	r5, r2
 8012bb4:	461e      	mov	r6, r3
 8012bb6:	da0d      	bge.n	8012bd4 <__swhatbuf_r+0x2e>
 8012bb8:	89a3      	ldrh	r3, [r4, #12]
 8012bba:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012bbe:	f04f 0100 	mov.w	r1, #0
 8012bc2:	bf0c      	ite	eq
 8012bc4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012bc8:	2340      	movne	r3, #64	; 0x40
 8012bca:	2000      	movs	r0, #0
 8012bcc:	6031      	str	r1, [r6, #0]
 8012bce:	602b      	str	r3, [r5, #0]
 8012bd0:	b016      	add	sp, #88	; 0x58
 8012bd2:	bd70      	pop	{r4, r5, r6, pc}
 8012bd4:	466a      	mov	r2, sp
 8012bd6:	f000 f849 	bl	8012c6c <_fstat_r>
 8012bda:	2800      	cmp	r0, #0
 8012bdc:	dbec      	blt.n	8012bb8 <__swhatbuf_r+0x12>
 8012bde:	9901      	ldr	r1, [sp, #4]
 8012be0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012be4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012be8:	4259      	negs	r1, r3
 8012bea:	4159      	adcs	r1, r3
 8012bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bf0:	e7eb      	b.n	8012bca <__swhatbuf_r+0x24>

08012bf2 <__smakebuf_r>:
 8012bf2:	898b      	ldrh	r3, [r1, #12]
 8012bf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012bf6:	079d      	lsls	r5, r3, #30
 8012bf8:	4606      	mov	r6, r0
 8012bfa:	460c      	mov	r4, r1
 8012bfc:	d507      	bpl.n	8012c0e <__smakebuf_r+0x1c>
 8012bfe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012c02:	6023      	str	r3, [r4, #0]
 8012c04:	6123      	str	r3, [r4, #16]
 8012c06:	2301      	movs	r3, #1
 8012c08:	6163      	str	r3, [r4, #20]
 8012c0a:	b002      	add	sp, #8
 8012c0c:	bd70      	pop	{r4, r5, r6, pc}
 8012c0e:	ab01      	add	r3, sp, #4
 8012c10:	466a      	mov	r2, sp
 8012c12:	f7ff ffc8 	bl	8012ba6 <__swhatbuf_r>
 8012c16:	9900      	ldr	r1, [sp, #0]
 8012c18:	4605      	mov	r5, r0
 8012c1a:	4630      	mov	r0, r6
 8012c1c:	f7ff f8f6 	bl	8011e0c <_malloc_r>
 8012c20:	b948      	cbnz	r0, 8012c36 <__smakebuf_r+0x44>
 8012c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c26:	059a      	lsls	r2, r3, #22
 8012c28:	d4ef      	bmi.n	8012c0a <__smakebuf_r+0x18>
 8012c2a:	f023 0303 	bic.w	r3, r3, #3
 8012c2e:	f043 0302 	orr.w	r3, r3, #2
 8012c32:	81a3      	strh	r3, [r4, #12]
 8012c34:	e7e3      	b.n	8012bfe <__smakebuf_r+0xc>
 8012c36:	89a3      	ldrh	r3, [r4, #12]
 8012c38:	6020      	str	r0, [r4, #0]
 8012c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c3e:	81a3      	strh	r3, [r4, #12]
 8012c40:	9b00      	ldr	r3, [sp, #0]
 8012c42:	6163      	str	r3, [r4, #20]
 8012c44:	9b01      	ldr	r3, [sp, #4]
 8012c46:	6120      	str	r0, [r4, #16]
 8012c48:	b15b      	cbz	r3, 8012c62 <__smakebuf_r+0x70>
 8012c4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c4e:	4630      	mov	r0, r6
 8012c50:	f000 f81e 	bl	8012c90 <_isatty_r>
 8012c54:	b128      	cbz	r0, 8012c62 <__smakebuf_r+0x70>
 8012c56:	89a3      	ldrh	r3, [r4, #12]
 8012c58:	f023 0303 	bic.w	r3, r3, #3
 8012c5c:	f043 0301 	orr.w	r3, r3, #1
 8012c60:	81a3      	strh	r3, [r4, #12]
 8012c62:	89a3      	ldrh	r3, [r4, #12]
 8012c64:	431d      	orrs	r5, r3
 8012c66:	81a5      	strh	r5, [r4, #12]
 8012c68:	e7cf      	b.n	8012c0a <__smakebuf_r+0x18>
	...

08012c6c <_fstat_r>:
 8012c6c:	b538      	push	{r3, r4, r5, lr}
 8012c6e:	4d07      	ldr	r5, [pc, #28]	; (8012c8c <_fstat_r+0x20>)
 8012c70:	2300      	movs	r3, #0
 8012c72:	4604      	mov	r4, r0
 8012c74:	4608      	mov	r0, r1
 8012c76:	4611      	mov	r1, r2
 8012c78:	602b      	str	r3, [r5, #0]
 8012c7a:	f7ee f95c 	bl	8000f36 <_fstat>
 8012c7e:	1c43      	adds	r3, r0, #1
 8012c80:	d102      	bne.n	8012c88 <_fstat_r+0x1c>
 8012c82:	682b      	ldr	r3, [r5, #0]
 8012c84:	b103      	cbz	r3, 8012c88 <_fstat_r+0x1c>
 8012c86:	6023      	str	r3, [r4, #0]
 8012c88:	bd38      	pop	{r3, r4, r5, pc}
 8012c8a:	bf00      	nop
 8012c8c:	2000c930 	.word	0x2000c930

08012c90 <_isatty_r>:
 8012c90:	b538      	push	{r3, r4, r5, lr}
 8012c92:	4d06      	ldr	r5, [pc, #24]	; (8012cac <_isatty_r+0x1c>)
 8012c94:	2300      	movs	r3, #0
 8012c96:	4604      	mov	r4, r0
 8012c98:	4608      	mov	r0, r1
 8012c9a:	602b      	str	r3, [r5, #0]
 8012c9c:	f7ee f950 	bl	8000f40 <_isatty>
 8012ca0:	1c43      	adds	r3, r0, #1
 8012ca2:	d102      	bne.n	8012caa <_isatty_r+0x1a>
 8012ca4:	682b      	ldr	r3, [r5, #0]
 8012ca6:	b103      	cbz	r3, 8012caa <_isatty_r+0x1a>
 8012ca8:	6023      	str	r3, [r4, #0]
 8012caa:	bd38      	pop	{r3, r4, r5, pc}
 8012cac:	2000c930 	.word	0x2000c930

08012cb0 <_malloc_usable_size_r>:
 8012cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012cb4:	1f18      	subs	r0, r3, #4
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	bfbc      	itt	lt
 8012cba:	580b      	ldrlt	r3, [r1, r0]
 8012cbc:	18c0      	addlt	r0, r0, r3
 8012cbe:	4770      	bx	lr

08012cc0 <_init>:
 8012cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cc2:	bf00      	nop
 8012cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cc6:	bc08      	pop	{r3}
 8012cc8:	469e      	mov	lr, r3
 8012cca:	4770      	bx	lr

08012ccc <_fini>:
 8012ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cce:	bf00      	nop
 8012cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cd2:	bc08      	pop	{r3}
 8012cd4:	469e      	mov	lr, r3
 8012cd6:	4770      	bx	lr
