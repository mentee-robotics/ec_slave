
Reflexor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012bf0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003de0  08012dd0  08012dd0  00022dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016bb0  08016bb0  0003d4b8  2**0
                  CONTENTS
  4 .ARM          00000008  08016bb0  08016bb0  00026bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016bb8  08016bb8  0003d4b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016bb8  08016bb8  00026bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016bbc  08016bbc  00026bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000186c  20000000  08016bc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .uartDma_module_space 00000400  2000186c  0801842c  0003186c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000aee0  20001c70  0801882c  00031c70  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000cb50  0801882c  0003cb50  2**0
                  ALLOC
 12 .spiDma_module_space 00000200  2000d150  0801882c  0003d150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .etherCat_module_space 00000168  2000d350  08018a2c  0003d350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .ARM.attributes 00000030  00000000  00000000  0003d4b8  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  0003d4e8  2**0
                  CONTENTS, READONLY
 16 .debug_info   0005ac59  00000000  00000000  0003d52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000b154  00000000  00000000  00098184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00020100  00000000  00000000  000a32d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003228  00000000  00000000  000c33d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002aad  00000000  00000000  000c6600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00036a22  00000000  00000000  000c90ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0005728b  00000000  00000000  000ffacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00124f68  00000000  00000000  00156d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  00009718  00000000  00000000  0027bcc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 000000a7  00000000  00000000  002853dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001c70 	.word	0x20001c70
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012db8 	.word	0x08012db8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001c74 	.word	0x20001c74
 800021c:	08012db8 	.word	0x08012db8

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	20009a48 	.word	0x20009a48
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000370:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000374:	f000 b970 	b.w	8000658 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9e08      	ldr	r6, [sp, #32]
 8000396:	460d      	mov	r5, r1
 8000398:	4604      	mov	r4, r0
 800039a:	460f      	mov	r7, r1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d14a      	bne.n	8000436 <__udivmoddi4+0xa6>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4694      	mov	ip, r2
 80003a4:	d965      	bls.n	8000472 <__udivmoddi4+0xe2>
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	b143      	cbz	r3, 80003be <__udivmoddi4+0x2e>
 80003ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80003b0:	f1c3 0220 	rsb	r2, r3, #32
 80003b4:	409f      	lsls	r7, r3
 80003b6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ba:	4317      	orrs	r7, r2
 80003bc:	409c      	lsls	r4, r3
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fa1f f58c 	uxth.w	r5, ip
 80003c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ca:	0c22      	lsrs	r2, r4, #16
 80003cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003d4:	fb01 f005 	mul.w	r0, r1, r5
 80003d8:	4290      	cmp	r0, r2
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x62>
 80003dc:	eb1c 0202 	adds.w	r2, ip, r2
 80003e0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003e4:	f080 811c 	bcs.w	8000620 <__udivmoddi4+0x290>
 80003e8:	4290      	cmp	r0, r2
 80003ea:	f240 8119 	bls.w	8000620 <__udivmoddi4+0x290>
 80003ee:	3902      	subs	r1, #2
 80003f0:	4462      	add	r2, ip
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	b2a4      	uxth	r4, r4
 80003f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000402:	fb00 f505 	mul.w	r5, r0, r5
 8000406:	42a5      	cmp	r5, r4
 8000408:	d90a      	bls.n	8000420 <__udivmoddi4+0x90>
 800040a:	eb1c 0404 	adds.w	r4, ip, r4
 800040e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000412:	f080 8107 	bcs.w	8000624 <__udivmoddi4+0x294>
 8000416:	42a5      	cmp	r5, r4
 8000418:	f240 8104 	bls.w	8000624 <__udivmoddi4+0x294>
 800041c:	4464      	add	r4, ip
 800041e:	3802      	subs	r0, #2
 8000420:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	2100      	movs	r1, #0
 8000428:	b11e      	cbz	r6, 8000432 <__udivmoddi4+0xa2>
 800042a:	40dc      	lsrs	r4, r3
 800042c:	2300      	movs	r3, #0
 800042e:	e9c6 4300 	strd	r4, r3, [r6]
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	428b      	cmp	r3, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0xbc>
 800043a:	2e00      	cmp	r6, #0
 800043c:	f000 80ed 	beq.w	800061a <__udivmoddi4+0x28a>
 8000440:	2100      	movs	r1, #0
 8000442:	e9c6 0500 	strd	r0, r5, [r6]
 8000446:	4608      	mov	r0, r1
 8000448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044c:	fab3 f183 	clz	r1, r3
 8000450:	2900      	cmp	r1, #0
 8000452:	d149      	bne.n	80004e8 <__udivmoddi4+0x158>
 8000454:	42ab      	cmp	r3, r5
 8000456:	d302      	bcc.n	800045e <__udivmoddi4+0xce>
 8000458:	4282      	cmp	r2, r0
 800045a:	f200 80f8 	bhi.w	800064e <__udivmoddi4+0x2be>
 800045e:	1a84      	subs	r4, r0, r2
 8000460:	eb65 0203 	sbc.w	r2, r5, r3
 8000464:	2001      	movs	r0, #1
 8000466:	4617      	mov	r7, r2
 8000468:	2e00      	cmp	r6, #0
 800046a:	d0e2      	beq.n	8000432 <__udivmoddi4+0xa2>
 800046c:	e9c6 4700 	strd	r4, r7, [r6]
 8000470:	e7df      	b.n	8000432 <__udivmoddi4+0xa2>
 8000472:	b902      	cbnz	r2, 8000476 <__udivmoddi4+0xe6>
 8000474:	deff      	udf	#255	; 0xff
 8000476:	fab2 f382 	clz	r3, r2
 800047a:	2b00      	cmp	r3, #0
 800047c:	f040 8090 	bne.w	80005a0 <__udivmoddi4+0x210>
 8000480:	1a8a      	subs	r2, r1, r2
 8000482:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000486:	fa1f fe8c 	uxth.w	lr, ip
 800048a:	2101      	movs	r1, #1
 800048c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000490:	fb07 2015 	mls	r0, r7, r5, r2
 8000494:	0c22      	lsrs	r2, r4, #16
 8000496:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800049a:	fb0e f005 	mul.w	r0, lr, r5
 800049e:	4290      	cmp	r0, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x124>
 80004a2:	eb1c 0202 	adds.w	r2, ip, r2
 80004a6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x122>
 80004ac:	4290      	cmp	r0, r2
 80004ae:	f200 80cb 	bhi.w	8000648 <__udivmoddi4+0x2b8>
 80004b2:	4645      	mov	r5, r8
 80004b4:	1a12      	subs	r2, r2, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004bc:	fb07 2210 	mls	r2, r7, r0, r2
 80004c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004c4:	fb0e fe00 	mul.w	lr, lr, r0
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x14e>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x14c>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f200 80bb 	bhi.w	8000652 <__udivmoddi4+0x2c2>
 80004dc:	4610      	mov	r0, r2
 80004de:	eba4 040e 	sub.w	r4, r4, lr
 80004e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004e6:	e79f      	b.n	8000428 <__udivmoddi4+0x98>
 80004e8:	f1c1 0720 	rsb	r7, r1, #32
 80004ec:	408b      	lsls	r3, r1
 80004ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80004f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004f6:	fa05 f401 	lsl.w	r4, r5, r1
 80004fa:	fa20 f307 	lsr.w	r3, r0, r7
 80004fe:	40fd      	lsrs	r5, r7
 8000500:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000504:	4323      	orrs	r3, r4
 8000506:	fbb5 f8f9 	udiv	r8, r5, r9
 800050a:	fa1f fe8c 	uxth.w	lr, ip
 800050e:	fb09 5518 	mls	r5, r9, r8, r5
 8000512:	0c1c      	lsrs	r4, r3, #16
 8000514:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000518:	fb08 f50e 	mul.w	r5, r8, lr
 800051c:	42a5      	cmp	r5, r4
 800051e:	fa02 f201 	lsl.w	r2, r2, r1
 8000522:	fa00 f001 	lsl.w	r0, r0, r1
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b0>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000530:	f080 8088 	bcs.w	8000644 <__udivmoddi4+0x2b4>
 8000534:	42a5      	cmp	r5, r4
 8000536:	f240 8085 	bls.w	8000644 <__udivmoddi4+0x2b4>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	4464      	add	r4, ip
 8000540:	1b64      	subs	r4, r4, r5
 8000542:	b29d      	uxth	r5, r3
 8000544:	fbb4 f3f9 	udiv	r3, r4, r9
 8000548:	fb09 4413 	mls	r4, r9, r3, r4
 800054c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000550:	fb03 fe0e 	mul.w	lr, r3, lr
 8000554:	45a6      	cmp	lr, r4
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1da>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000560:	d26c      	bcs.n	800063c <__udivmoddi4+0x2ac>
 8000562:	45a6      	cmp	lr, r4
 8000564:	d96a      	bls.n	800063c <__udivmoddi4+0x2ac>
 8000566:	3b02      	subs	r3, #2
 8000568:	4464      	add	r4, ip
 800056a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800056e:	fba3 9502 	umull	r9, r5, r3, r2
 8000572:	eba4 040e 	sub.w	r4, r4, lr
 8000576:	42ac      	cmp	r4, r5
 8000578:	46c8      	mov	r8, r9
 800057a:	46ae      	mov	lr, r5
 800057c:	d356      	bcc.n	800062c <__udivmoddi4+0x29c>
 800057e:	d053      	beq.n	8000628 <__udivmoddi4+0x298>
 8000580:	b156      	cbz	r6, 8000598 <__udivmoddi4+0x208>
 8000582:	ebb0 0208 	subs.w	r2, r0, r8
 8000586:	eb64 040e 	sbc.w	r4, r4, lr
 800058a:	fa04 f707 	lsl.w	r7, r4, r7
 800058e:	40ca      	lsrs	r2, r1
 8000590:	40cc      	lsrs	r4, r1
 8000592:	4317      	orrs	r7, r2
 8000594:	e9c6 7400 	strd	r7, r4, [r6]
 8000598:	4618      	mov	r0, r3
 800059a:	2100      	movs	r1, #0
 800059c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a0:	f1c3 0120 	rsb	r1, r3, #32
 80005a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005a8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ac:	fa25 f101 	lsr.w	r1, r5, r1
 80005b0:	409d      	lsls	r5, r3
 80005b2:	432a      	orrs	r2, r5
 80005b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b8:	fa1f fe8c 	uxth.w	lr, ip
 80005bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005c0:	fb07 1510 	mls	r5, r7, r0, r1
 80005c4:	0c11      	lsrs	r1, r2, #16
 80005c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ca:	fb00 f50e 	mul.w	r5, r0, lr
 80005ce:	428d      	cmp	r5, r1
 80005d0:	fa04 f403 	lsl.w	r4, r4, r3
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0x258>
 80005d6:	eb1c 0101 	adds.w	r1, ip, r1
 80005da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005de:	d22f      	bcs.n	8000640 <__udivmoddi4+0x2b0>
 80005e0:	428d      	cmp	r5, r1
 80005e2:	d92d      	bls.n	8000640 <__udivmoddi4+0x2b0>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4461      	add	r1, ip
 80005e8:	1b49      	subs	r1, r1, r5
 80005ea:	b292      	uxth	r2, r2
 80005ec:	fbb1 f5f7 	udiv	r5, r1, r7
 80005f0:	fb07 1115 	mls	r1, r7, r5, r1
 80005f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005f8:	fb05 f10e 	mul.w	r1, r5, lr
 80005fc:	4291      	cmp	r1, r2
 80005fe:	d908      	bls.n	8000612 <__udivmoddi4+0x282>
 8000600:	eb1c 0202 	adds.w	r2, ip, r2
 8000604:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000608:	d216      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 800060a:	4291      	cmp	r1, r2
 800060c:	d914      	bls.n	8000638 <__udivmoddi4+0x2a8>
 800060e:	3d02      	subs	r5, #2
 8000610:	4462      	add	r2, ip
 8000612:	1a52      	subs	r2, r2, r1
 8000614:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000618:	e738      	b.n	800048c <__udivmoddi4+0xfc>
 800061a:	4631      	mov	r1, r6
 800061c:	4630      	mov	r0, r6
 800061e:	e708      	b.n	8000432 <__udivmoddi4+0xa2>
 8000620:	4639      	mov	r1, r7
 8000622:	e6e6      	b.n	80003f2 <__udivmoddi4+0x62>
 8000624:	4610      	mov	r0, r2
 8000626:	e6fb      	b.n	8000420 <__udivmoddi4+0x90>
 8000628:	4548      	cmp	r0, r9
 800062a:	d2a9      	bcs.n	8000580 <__udivmoddi4+0x1f0>
 800062c:	ebb9 0802 	subs.w	r8, r9, r2
 8000630:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000634:	3b01      	subs	r3, #1
 8000636:	e7a3      	b.n	8000580 <__udivmoddi4+0x1f0>
 8000638:	4645      	mov	r5, r8
 800063a:	e7ea      	b.n	8000612 <__udivmoddi4+0x282>
 800063c:	462b      	mov	r3, r5
 800063e:	e794      	b.n	800056a <__udivmoddi4+0x1da>
 8000640:	4640      	mov	r0, r8
 8000642:	e7d1      	b.n	80005e8 <__udivmoddi4+0x258>
 8000644:	46d0      	mov	r8, sl
 8000646:	e77b      	b.n	8000540 <__udivmoddi4+0x1b0>
 8000648:	3d02      	subs	r5, #2
 800064a:	4462      	add	r2, ip
 800064c:	e732      	b.n	80004b4 <__udivmoddi4+0x124>
 800064e:	4608      	mov	r0, r1
 8000650:	e70a      	b.n	8000468 <__udivmoddi4+0xd8>
 8000652:	4464      	add	r4, ip
 8000654:	3802      	subs	r0, #2
 8000656:	e742      	b.n	80004de <__udivmoddi4+0x14e>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <appTestTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_appTestTask */
void appTestTask(void const * argument)
{
 800065c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN appTestTask */
  AppTest_Init();
 800065e:	f011 f9d3 	bl	8011a08 <AppTest_Init>

  /* Infinite loop */
  for(;;)
  {

    AppTest_MainFunction();
 8000662:	f011 f9d2 	bl	8011a0a <AppTest_MainFunction>
    osDelay(100);
 8000666:	2064      	movs	r0, #100	; 0x64
 8000668:	f007 ff73 	bl	8008552 <osDelay>
  for(;;)
 800066c:	e7f9      	b.n	8000662 <appTestTask+0x6>
	...

08000670 <ethCatTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ethCatTask */
void ethCatTask(void const * argument)
{
 8000670:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ethCatTask */
  /* Initialize the modules which used by this application. */
  ethCat_Init();
 8000672:	f00f ff0b 	bl	801048c <ethCat_Init>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000676:	2201      	movs	r2, #1
 8000678:	4611      	mov	r1, r2
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <ethCatTask+0x24>)
 800067c:	f001 ffd2 	bl	8002624 <HAL_GPIO_WritePin>
 8000680:	e003      	b.n	800068a <ethCatTask+0x1a>
  for(;;)
  {
    /* Run main function of ethCat. */
    ethCat_MainFunction();

    for(uint16_t i=0; i< 100;i++);
 8000682:	3301      	adds	r3, #1
 8000684:	b29b      	uxth	r3, r3
 8000686:	2b63      	cmp	r3, #99	; 0x63
 8000688:	d9fb      	bls.n	8000682 <ethCatTask+0x12>
    ethCat_MainFunction();
 800068a:	f00f ff19 	bl	80104c0 <ethCat_MainFunction>
    for(uint16_t i=0; i< 100;i++);
 800068e:	2300      	movs	r3, #0
 8000690:	e7f9      	b.n	8000686 <ethCatTask+0x16>
 8000692:	bf00      	nop
 8000694:	48000400 	.word	0x48000400

08000698 <canMTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_canMTask */
void canMTask(void const * argument)
{
 8000698:	b508      	push	{r3, lr}
  /* USER CODE BEGIN canMTask */
  canM_Init (&canM_Module);
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <canMTask+0x18>)
 800069c:	f00f fdee 	bl	801027c <canM_Init>

  /* Infinite loop */
  for(;;)
  {
    /* Run main function of canM. */
    canM_MainFunction (&canM_Module);
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <canMTask+0x18>)
 80006a2:	f00f fe2b 	bl	80102fc <canM_MainFunction>

    osDelay(1);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f007 ff53 	bl	8008552 <osDelay>
  for(;;)
 80006ac:	e7f8      	b.n	80006a0 <canMTask+0x8>
 80006ae:	bf00      	nop
 80006b0:	2000142c 	.word	0x2000142c

080006b4 <canIdleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_canIdleTask */
void canIdleTask(void const * argument)
{
 80006b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN canIdleTask */
  canIdle_Init();
 80006b6:	f00f fb7f 	bl	800fdb8 <canIdle_Init>

  /* Infinite loop */
  for(;;)
  {
    /* Run the main function of CanIdle. */
    canIdle_MainFunction();
 80006ba:	f00f fb83 	bl	800fdc4 <canIdle_MainFunction>

    osDelay(1);
 80006be:	2001      	movs	r0, #1
 80006c0:	f007 ff47 	bl	8008552 <osDelay>
  for(;;)
 80006c4:	e7f9      	b.n	80006ba <canIdleTask+0x6>

080006c6 <configureTimerForRunTimeStats>:
}
 80006c6:	4770      	bx	lr

080006c8 <getRunTimeCounterValue>:
}
 80006c8:	2000      	movs	r0, #0
 80006ca:	4770      	bx	lr

080006cc <vApplicationIdleHook>:
}
 80006cc:	4770      	bx	lr

080006ce <vApplicationDaemonTaskStartupHook>:
{
 80006ce:	b508      	push	{r3, lr}
  uartDma_init();
 80006d0:	f00e fb80 	bl	800edd4 <uartDma_init>
  lan9252_Init();
 80006d4:	f00a febc 	bl	800b450 <lan9252_Init>
}
 80006d8:	bd08      	pop	{r3, pc}
	...

080006dc <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	b099      	sub	sp, #100	; 0x64
  osTimerDef(timerCounter500us, timerCounterCb);
 80006e0:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <MX_FREERTOS_Init+0xdc>)
 80006e2:	9317      	str	r3, [sp, #92]	; 0x5c
  timerCounter500usHandle = osTimerCreate(osTimer(timerCounter500us), osTimerPeriodic, NULL);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2101      	movs	r1, #1
 80006e8:	a817      	add	r0, sp, #92	; 0x5c
 80006ea:	f007 ff39 	bl	8008560 <osTimerCreate>
 80006ee:	4d33      	ldr	r5, [pc, #204]	; (80007bc <MX_FREERTOS_Init+0xe0>)
 80006f0:	6028      	str	r0, [r5, #0]
  xTimerStop(timerCounter500usHandle, pdMS_TO_TICKS(1));
 80006f2:	2401      	movs	r4, #1
 80006f4:	9400      	str	r4, [sp, #0]
 80006f6:	2300      	movs	r3, #0
 80006f8:	461a      	mov	r2, r3
 80006fa:	2103      	movs	r1, #3
 80006fc:	f009 fa9c 	bl	8009c38 <xTimerGenericCommand>
  xTimerChangePeriod(timerCounter500usHandle, 1, 100);
 8000700:	2364      	movs	r3, #100	; 0x64
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2300      	movs	r3, #0
 8000706:	4622      	mov	r2, r4
 8000708:	2104      	movs	r1, #4
 800070a:	6828      	ldr	r0, [r5, #0]
 800070c:	f009 fa94 	bl	8009c38 <xTimerGenericCommand>
  xTimerStart(timerCounter500usHandle, pdMS_TO_TICKS(1));
 8000710:	682d      	ldr	r5, [r5, #0]
 8000712:	f008 fe45 	bl	80093a0 <xTaskGetTickCount>
 8000716:	4602      	mov	r2, r0
 8000718:	9400      	str	r4, [sp, #0]
 800071a:	2300      	movs	r3, #0
 800071c:	4621      	mov	r1, r4
 800071e:	4628      	mov	r0, r5
 8000720:	f009 fa8a 	bl	8009c38 <xTimerGenericCommand>
  osThreadDef(appTest, appTestTask, osPriorityIdle, 0, 128);
 8000724:	4c26      	ldr	r4, [pc, #152]	; (80007c0 <MX_FREERTOS_Init+0xe4>)
 8000726:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
 800072a:	46a6      	mov	lr, r4
 800072c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000730:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000734:	f8de 3000 	ldr.w	r3, [lr]
 8000738:	f8cc 3000 	str.w	r3, [ip]
  appTestHandle = osThreadCreate(osThread(appTest), NULL);
 800073c:	2100      	movs	r1, #0
 800073e:	a812      	add	r0, sp, #72	; 0x48
 8000740:	f007 feed 	bl	800851e <osThreadCreate>
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_FREERTOS_Init+0xe8>)
 8000746:	6018      	str	r0, [r3, #0]
  osThreadDef(ethCat, ethCatTask, osPriorityRealtime, 0, 1024);
 8000748:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800074c:	f104 0e14 	add.w	lr, r4, #20
 8000750:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000754:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000758:	f8de 3000 	ldr.w	r3, [lr]
 800075c:	f8cc 3000 	str.w	r3, [ip]
  ethCatHandle = osThreadCreate(osThread(ethCat), NULL);
 8000760:	2100      	movs	r1, #0
 8000762:	a80d      	add	r0, sp, #52	; 0x34
 8000764:	f007 fedb 	bl	800851e <osThreadCreate>
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_FREERTOS_Init+0xec>)
 800076a:	6018      	str	r0, [r3, #0]
  osThreadDef(canM, canMTask, osPriorityHigh, 0, 1024);
 800076c:	f10d 0c20 	add.w	ip, sp, #32
 8000770:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8000774:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000778:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800077c:	f8de 3000 	ldr.w	r3, [lr]
 8000780:	f8cc 3000 	str.w	r3, [ip]
  canMHandle = osThreadCreate(osThread(canM), NULL);
 8000784:	2100      	movs	r1, #0
 8000786:	a808      	add	r0, sp, #32
 8000788:	f007 fec9 	bl	800851e <osThreadCreate>
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_FREERTOS_Init+0xf0>)
 800078e:	6018      	str	r0, [r3, #0]
  osThreadDef(canIdle, canIdleTask, osPriorityAboveNormal, 0, 512);
 8000790:	f10d 0e0c 	add.w	lr, sp, #12
 8000794:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
 8000798:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800079c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80007a0:	f8dc 3000 	ldr.w	r3, [ip]
 80007a4:	f8ce 3000 	str.w	r3, [lr]
  canIdleHandle = osThreadCreate(osThread(canIdle), NULL);
 80007a8:	2100      	movs	r1, #0
 80007aa:	a803      	add	r0, sp, #12
 80007ac:	f007 feb7 	bl	800851e <osThreadCreate>
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_FREERTOS_Init+0xf4>)
 80007b2:	6018      	str	r0, [r3, #0]
}
 80007b4:	b019      	add	sp, #100	; 0x64
 80007b6:	bd30      	pop	{r4, r5, pc}
 80007b8:	080104c9 	.word	0x080104c9
 80007bc:	20001c9c 	.word	0x20001c9c
 80007c0:	08012dd0 	.word	0x08012dd0
 80007c4:	20001c8c 	.word	0x20001c8c
 80007c8:	20001c98 	.word	0x20001c98
 80007cc:	20001c94 	.word	0x20001c94
 80007d0:	20001c90 	.word	0x20001c90

080007d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d4:	b500      	push	{lr}
 80007d6:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_DMA_Init+0x70>)
 80007da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007dc:	f042 0204 	orr.w	r2, r2, #4
 80007e0:	649a      	str	r2, [r3, #72]	; 0x48
 80007e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007e4:	f002 0204 	and.w	r2, r2, #4
 80007e8:	9200      	str	r2, [sp, #0]
 80007ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007ee:	f042 0201 	orr.w	r2, r2, #1
 80007f2:	649a      	str	r2, [r3, #72]	; 0x48
 80007f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2105      	movs	r1, #5
 8000802:	200b      	movs	r0, #11
 8000804:	f000 fd4c 	bl	80012a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000808:	200b      	movs	r0, #11
 800080a:	f000 fd8f 	bl	800132c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2105      	movs	r1, #5
 8000812:	200c      	movs	r0, #12
 8000814:	f000 fd44 	bl	80012a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000818:	200c      	movs	r0, #12
 800081a:	f000 fd87 	bl	800132c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200d      	movs	r0, #13
 8000824:	f000 fd3c 	bl	80012a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000828:	200d      	movs	r0, #13
 800082a:	f000 fd7f 	bl	800132c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200e      	movs	r0, #14
 8000834:	f000 fd34 	bl	80012a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000838:	200e      	movs	r0, #14
 800083a:	f000 fd77 	bl	800132c <HAL_NVIC_EnableIRQ>

}
 800083e:	b003      	add	sp, #12
 8000840:	f85d fb04 	ldr.w	pc, [sp], #4
 8000844:	40021000 	.word	0x40021000

08000848 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000848:	b510      	push	{r4, lr}
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800084a:	4812      	ldr	r0, [pc, #72]	; (8000894 <MX_FDCAN1_Init+0x4c>)
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_FDCAN1_Init+0x50>)
 800084e:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	6043      	str	r3, [r0, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000854:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000858:	6082      	str	r2, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800085a:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800085c:	7403      	strb	r3, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800085e:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000860:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8000862:	2204      	movs	r2, #4
 8000864:	6142      	str	r2, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000866:	2208      	movs	r2, #8
 8000868:	6182      	str	r2, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 800086a:	211f      	movs	r1, #31
 800086c:	61c1      	str	r1, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 800086e:	6202      	str	r2, [r0, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000870:	2201      	movs	r2, #1
 8000872:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 6;
 8000874:	2106      	movs	r1, #6
 8000876:	6281      	str	r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000878:	240d      	movs	r4, #13
 800087a:	62c4      	str	r4, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 6;
 800087c:	6301      	str	r1, [r0, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800087e:	6342      	str	r2, [r0, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000880:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000882:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000884:	f001 f884 	bl	8001990 <HAL_FDCAN_Init>
 8000888:	b900      	cbnz	r0, 800088c <MX_FDCAN1_Init+0x44>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800088a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800088c:	f000 f9b8 	bl	8000c00 <Error_Handler>
}
 8000890:	e7fb      	b.n	800088a <MX_FDCAN1_Init+0x42>
 8000892:	bf00      	nop
 8000894:	20001ca0 	.word	0x20001ca0
 8000898:	40006400 	.word	0x40006400

0800089c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800089c:	b510      	push	{r4, lr}
 800089e:	b09c      	sub	sp, #112	; 0x70
 80008a0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	2100      	movs	r1, #0
 80008a4:	9117      	str	r1, [sp, #92]	; 0x5c
 80008a6:	9118      	str	r1, [sp, #96]	; 0x60
 80008a8:	9119      	str	r1, [sp, #100]	; 0x64
 80008aa:	911a      	str	r1, [sp, #104]	; 0x68
 80008ac:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ae:	2254      	movs	r2, #84	; 0x54
 80008b0:	a802      	add	r0, sp, #8
 80008b2:	f011 fa1b 	bl	8011cec <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80008b6:	6822      	ldr	r2, [r4, #0]
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <HAL_FDCAN_MspInit+0xa8>)
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d001      	beq.n	80008c2 <HAL_FDCAN_MspInit+0x26>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80008be:	b01c      	add	sp, #112	; 0x70
 80008c0:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c6:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80008c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008cc:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ce:	a802      	add	r0, sp, #8
 80008d0:	f003 fca8 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 80008d4:	2800      	cmp	r0, #0
 80008d6:	d132      	bne.n	800093e <HAL_FDCAN_MspInit+0xa2>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <HAL_FDCAN_MspInit+0xac>)
 80008da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008dc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80008e0:	659a      	str	r2, [r3, #88]	; 0x58
 80008e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008e4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80008e8:	9200      	str	r2, [sp, #0]
 80008ea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008ee:	f042 0202 	orr.w	r2, r2, #2
 80008f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FDCAN_RX_Pin|FDCAN_TX_Pin;
 80008fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000902:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2400      	movs	r4, #0
 800090a:	9419      	str	r4, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090c:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800090e:	2309      	movs	r3, #9
 8000910:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	a917      	add	r1, sp, #92	; 0x5c
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <HAL_FDCAN_MspInit+0xb0>)
 8000916:	f001 fd1d 	bl	8002354 <HAL_GPIO_Init>
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <HAL_FDCAN_MspInit+0xb4>)
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000922:	605a      	str	r2, [r3, #4]
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800092a:	605a      	str	r2, [r3, #4]
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 800092c:	4622      	mov	r2, r4
 800092e:	2105      	movs	r1, #5
 8000930:	2015      	movs	r0, #21
 8000932:	f000 fcb5 	bl	80012a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000936:	2015      	movs	r0, #21
 8000938:	f000 fcf8 	bl	800132c <HAL_NVIC_EnableIRQ>
}
 800093c:	e7bf      	b.n	80008be <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 800093e:	f000 f95f 	bl	8000c00 <Error_Handler>
 8000942:	e7c9      	b.n	80008d8 <HAL_FDCAN_MspInit+0x3c>
 8000944:	40006400 	.word	0x40006400
 8000948:	40021000 	.word	0x40021000
 800094c:	48000400 	.word	0x48000400
 8000950:	40010000 	.word	0x40010000

08000954 <MX_GPIO_Init>:
        * the Code Generation settings)
     PC8   ------> I2C3_SCL
     PC9   ------> I2C3_SDA
*/
void MX_GPIO_Init(void)
{
 8000954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000958:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	2400      	movs	r4, #0
 800095c:	9407      	str	r4, [sp, #28]
 800095e:	9408      	str	r4, [sp, #32]
 8000960:	9409      	str	r4, [sp, #36]	; 0x24
 8000962:	940a      	str	r4, [sp, #40]	; 0x28
 8000964:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b64      	ldr	r3, [pc, #400]	; (8000af8 <MX_GPIO_Init+0x1a4>)
 8000968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800096a:	f042 0204 	orr.w	r2, r2, #4
 800096e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000970:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000972:	f002 0204 	and.w	r2, r2, #4
 8000976:	9201      	str	r2, [sp, #4]
 8000978:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800097a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800097c:	f042 0220 	orr.w	r2, r2, #32
 8000980:	64da      	str	r2, [r3, #76]	; 0x4c
 8000982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000984:	f002 0220 	and.w	r2, r2, #32
 8000988:	9202      	str	r2, [sp, #8]
 800098a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800098e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000992:	64da      	str	r2, [r3, #76]	; 0x4c
 8000994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000996:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800099a:	9203      	str	r2, [sp, #12]
 800099c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009a0:	f042 0201 	orr.w	r2, r2, #1
 80009a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80009a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009a8:	f002 0201 	and.w	r2, r2, #1
 80009ac:	9204      	str	r2, [sp, #16]
 80009ae:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009b2:	f042 0202 	orr.w	r2, r2, #2
 80009b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80009b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009ba:	f002 0202 	and.w	r2, r2, #2
 80009be:	9205      	str	r2, [sp, #20]
 80009c0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009c4:	f042 0208 	orr.w	r2, r2, #8
 80009c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80009ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009cc:	f003 0308 	and.w	r3, r3, #8
 80009d0:	9306      	str	r3, [sp, #24]
 80009d2:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2110      	movs	r1, #16
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009dc:	f001 fe22 	bl	8002624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80009e0:	4f46      	ldr	r7, [pc, #280]	; (8000afc <MX_GPIO_Init+0x1a8>)
 80009e2:	4622      	mov	r2, r4
 80009e4:	2110      	movs	r1, #16
 80009e6:	4638      	mov	r0, r7
 80009e8:	f001 fe1c 	bl	8002624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80009ec:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8000b08 <MX_GPIO_Init+0x1b4>
 80009f0:	2201      	movs	r2, #1
 80009f2:	4611      	mov	r1, r2
 80009f4:	4640      	mov	r0, r8
 80009f6:	f001 fe15 	bl	8002624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LAN_Reset_CMD_Pin|EXT_LED_Pin, GPIO_PIN_RESET);
 80009fa:	4622      	mov	r2, r4
 80009fc:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8000a00:	4640      	mov	r0, r8
 8000a02:	f001 fe0f 	bl	8002624 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Ver_D0_Pin|Ver_D1_Pin|Ver_A_Pin;
 8000a06:	f246 0301 	movw	r3, #24577	; 0x6001
 8000a0a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a10:	a907      	add	r1, sp, #28
 8000a12:	4638      	mov	r0, r7
 8000a14:	f001 fc9e 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC3
                           PC5 PC6 PC7 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a18:	f649 43ee 	movw	r3, #40174	; 0x9cee
 8000a1c:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1e:	2603      	movs	r6, #3
 8000a20:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a24:	a907      	add	r1, sp, #28
 8000a26:	4638      	mov	r0, r7
 8000a28:	f001 fc94 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a30:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a32:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a36:	a907      	add	r1, sp, #28
 8000a38:	4831      	ldr	r0, [pc, #196]	; (8000b00 <MX_GPIO_Init+0x1ac>)
 8000a3a:	f001 fc8b 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ETC_SYNC1_Pin|ETC_SYNC0_Pin|ETC_IRQ_Pin;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a44:	2501      	movs	r5, #1
 8000a46:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	a907      	add	r1, sp, #28
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f001 fc81 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_15;
 8000a52:	f248 1308 	movw	r3, #33032	; 0x8108
 8000a56:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a58:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	a907      	add	r1, sp, #28
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f001 fc77 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000a66:	f04f 0910 	mov.w	r9, #16
 8000a6a:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a70:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a72:	2302      	movs	r3, #2
 8000a74:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000a76:	a907      	add	r1, sp, #28
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f001 fc6a 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8000a80:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	a907      	add	r1, sp, #28
 8000a8c:	4638      	mov	r0, r7
 8000a8e:	f001 fc61 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000a92:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a96:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	a907      	add	r1, sp, #28
 8000a9c:	4640      	mov	r0, r8
 8000a9e:	f001 fc59 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB12
                           PB13 PB14 PB15 PB4
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 8000aa2:	f24f 43d6 	movw	r3, #62678	; 0xf4d6
 8000aa6:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	a907      	add	r1, sp, #28
 8000aae:	4640      	mov	r0, r8
 8000ab0:	f001 fc50 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LAN_Reset_CMD_Pin|EXT_LED_Pin;
 8000ab4:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000ab8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	a907      	add	r1, sp, #28
 8000ac2:	4640      	mov	r0, r8
 8000ac4:	f001 fc46 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ac8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000acc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ace:	2312      	movs	r3, #18
 8000ad0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ada:	a907      	add	r1, sp, #28
 8000adc:	4638      	mov	r0, r7
 8000ade:	f001 fc39 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aea:	a907      	add	r1, sp, #28
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_GPIO_Init+0x1b0>)
 8000aee:	f001 fc31 	bl	8002354 <HAL_GPIO_Init>

}
 8000af2:	b00d      	add	sp, #52	; 0x34
 8000af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000af8:	40021000 	.word	0x40021000
 8000afc:	48000800 	.word	0x48000800
 8000b00:	48001800 	.word	0x48001800
 8000b04:	48000c00 	.word	0x48000c00
 8000b08:	48000400 	.word	0x48000400

08000b0c <sendMessage>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
logMessageStruct logMessage;
void sendMessage(messageOrigin origin, uint8_t paramCount,...){
 8000b0c:	b40e      	push	{r1, r2, r3}
 8000b0e:	b530      	push	{r4, r5, lr}
 8000b10:	b08c      	sub	sp, #48	; 0x30
 8000b12:	ab0f      	add	r3, sp, #60	; 0x3c
 8000b14:	f813 4b04 	ldrb.w	r4, [r3], #4
	va_list args;
	va_start(args, paramCount);
 8000b18:	930b      	str	r3, [sp, #44]	; 0x2c
	uint8_t buffer[40];
	buffer[0] ='$'; // size is 1 for pre and 32 for size of logmessage and some extras to avoid faults. the pre is for pcorssing in the parser host side.
 8000b1a:	2324      	movs	r3, #36	; 0x24
 8000b1c:	f88d 3004 	strb.w	r3, [sp, #4]
	uint8_t *source = (uint8_t *)&logMessage;
	uint8_t *destination = (uint8_t *)&buffer[1];
	logMessage.origin = origin;
 8000b20:	4d17      	ldr	r5, [pc, #92]	; (8000b80 <sendMessage+0x74>)
 8000b22:	7728      	strb	r0, [r5, #28]
	ESC_read (0x0910, (void *) &logMessage.timestamp, 8);
 8000b24:	2208      	movs	r2, #8
 8000b26:	4629      	mov	r1, r5
 8000b28:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8000b2c:	f00d ffbc 	bl	800eaa8 <ESC_read>
	memset(logMessage.params , 0, sizeof(logMessage.params )); // clear to zeros
 8000b30:	2300      	movs	r3, #0
 8000b32:	60ab      	str	r3, [r5, #8]
 8000b34:	60eb      	str	r3, [r5, #12]
 8000b36:	612b      	str	r3, [r5, #16]
 8000b38:	616b      	str	r3, [r5, #20]
 8000b3a:	61ab      	str	r3, [r5, #24]
	for (int i = 0; i < paramCount; i++) {
 8000b3c:	e008      	b.n	8000b50 <sendMessage+0x44>
	        uint32_t param = va_arg(args, uint32_t);
 8000b3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000b40:	1d11      	adds	r1, r2, #4
 8000b42:	910b      	str	r1, [sp, #44]	; 0x2c
 8000b44:	6810      	ldr	r0, [r2, #0]
	        logMessage.params[i]=  param;
 8000b46:	1c99      	adds	r1, r3, #2
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <sendMessage+0x74>)
 8000b4a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (int i = 0; i < paramCount; i++) {
 8000b4e:	3301      	adds	r3, #1
 8000b50:	429c      	cmp	r4, r3
 8000b52:	dcf4      	bgt.n	8000b3e <sendMessage+0x32>
	}
	for (size_t i = 0; i < sizeof(logMessageStruct); i++) {
 8000b54:	2300      	movs	r3, #0
 8000b56:	e005      	b.n	8000b64 <sendMessage+0x58>
	    destination[i] = source[i];
 8000b58:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <sendMessage+0x74>)
 8000b5a:	5cd1      	ldrb	r1, [r2, r3]
 8000b5c:	f10d 0205 	add.w	r2, sp, #5
 8000b60:	54d1      	strb	r1, [r2, r3]
	for (size_t i = 0; i < sizeof(logMessageStruct); i++) {
 8000b62:	3301      	adds	r3, #1
 8000b64:	2b1f      	cmp	r3, #31
 8000b66:	d9f7      	bls.n	8000b58 <sendMessage+0x4c>
	}
	buffer[1+sizeof(logMessageStruct)] ='\n';
 8000b68:	230a      	movs	r3, #10
 8000b6a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	//memcpy((uint8_t * )&buffer[1],(uint8_t *) &logMessage, sizeof(logMessageStruct));
	//for (uint8_t i =0; i<sizeof(logMessageStruct);i++)
		//buffer[1+i] = (uint8_t *)(&logMessage +i);
	CDC_Transmit_FS((uint8_t*)&buffer, sizeof(logMessageStruct)+2);
 8000b6e:	2122      	movs	r1, #34	; 0x22
 8000b70:	a801      	add	r0, sp, #4
 8000b72:	f010 fc6f 	bl	8011454 <CDC_Transmit_FS>
	//CDC_Transmit_FS((uint8_t*)&logMessage, 32);
	}
 8000b76:	b00c      	add	sp, #48	; 0x30
 8000b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b7c:	b003      	add	sp, #12
 8000b7e:	4770      	bx	lr
 8000b80:	20001d08 	.word	0x20001d08

08000b84 <cdc_printf>:




void cdc_printf(const char *format, ...)
{
 8000b84:	b40f      	push	{r0, r1, r2, r3}
 8000b86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	f853 5b04 	ldr.w	r5, [r3], #4
 8000b94:	466e      	mov	r6, sp
    va_list args;
    va_start(args, format);
 8000b96:	607b      	str	r3, [r7, #4]

    // Calculate the size needed for the formatted string
    int len = vsnprintf(NULL, 0, format, args);
 8000b98:	462a      	mov	r2, r5
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	f011 f887 	bl	8011cb0 <vsniprintf>
    va_end(args);

    if (len <= 0)
 8000ba2:	1e04      	subs	r4, r0, #0
 8000ba4:	dd18      	ble.n	8000bd8 <cdc_printf+0x54>
        return;

    // Allocate a buffer for the formatted string
    char buffer[len + 1]; // +1 for null-terminator
 8000ba6:	f104 0308 	add.w	r3, r4, #8
 8000baa:	f023 0307 	bic.w	r3, r3, #7
 8000bae:	ebad 0d03 	sub.w	sp, sp, r3

    // Format the string into the buffer
    va_start(args, format);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000bb8:	462a      	mov	r2, r5
 8000bba:	1c61      	adds	r1, r4, #1
 8000bbc:	4668      	mov	r0, sp
 8000bbe:	f011 f877 	bl	8011cb0 <vsniprintf>
    va_end(args);

    // Transmit the formatted string over USB CDC
    CDC_Transmit_FS((uint8_t*)buffer, len);
 8000bc2:	b2a1      	uxth	r1, r4
 8000bc4:	4668      	mov	r0, sp
 8000bc6:	f010 fc45 	bl	8011454 <CDC_Transmit_FS>
 8000bca:	46b5      	mov	sp, r6
}
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr
        return;
 8000bd8:	46b5      	mov	sp, r6
 8000bda:	e7f7      	b.n	8000bcc <cdc_printf+0x48>

08000bdc <GetCycleCount>:

}

uint32_t GetCycleCount(void)
{
    return DWT->CYCCNT; // Read cycle counter value
 8000bdc:	4b01      	ldr	r3, [pc, #4]	; (8000be4 <GetCycleCount+0x8>)
 8000bde:	6858      	ldr	r0, [r3, #4]
}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e0001000 	.word	0xe0001000

08000be8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bea:	6802      	ldr	r2, [r0, #0]
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d000      	beq.n	8000bf4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bf2:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000bf4:	f000 fb24 	bl	8001240 <HAL_IncTick>
}
 8000bf8:	e7fb      	b.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0xa>
 8000bfa:	bf00      	nop
 8000bfc:	40012c00 	.word	0x40012c00

08000c00 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <Error_Handler+0x2>

08000c04 <SystemClock_Config>:
{
 8000c04:	b500      	push	{lr}
 8000c06:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c08:	2238      	movs	r2, #56	; 0x38
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	a806      	add	r0, sp, #24
 8000c0e:	f011 f86d 	bl	8011cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c12:	2000      	movs	r0, #0
 8000c14:	9001      	str	r0, [sp, #4]
 8000c16:	9002      	str	r0, [sp, #8]
 8000c18:	9003      	str	r0, [sp, #12]
 8000c1a:	9004      	str	r0, [sp, #16]
 8000c1c:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c1e:	f002 fd21 	bl	8003664 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000c22:	2321      	movs	r3, #33	; 0x21
 8000c24:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2a:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c30:	2302      	movs	r3, #2
 8000c32:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c34:	2103      	movs	r1, #3
 8000c36:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c38:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000c3a:	2214      	movs	r2, #20
 8000c3c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c3e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c40:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c42:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c44:	a806      	add	r0, sp, #24
 8000c46:	f002 fdcd 	bl	80037e4 <HAL_RCC_OscConfig>
 8000c4a:	b980      	cbnz	r0, 8000c6e <SystemClock_Config+0x6a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c50:	2303      	movs	r3, #3
 8000c52:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c58:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	eb0d 0001 	add.w	r0, sp, r1
 8000c62:	f003 f923 	bl	8003eac <HAL_RCC_ClockConfig>
 8000c66:	b920      	cbnz	r0, 8000c72 <SystemClock_Config+0x6e>
}
 8000c68:	b015      	add	sp, #84	; 0x54
 8000c6a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c6e:	f7ff ffc7 	bl	8000c00 <Error_Handler>
    Error_Handler();
 8000c72:	f7ff ffc5 	bl	8000c00 <Error_Handler>
	...

08000c78 <main>:
{
 8000c78:	b508      	push	{r3, lr}
  HAL_Init();
 8000c7a:	f000 fad2 	bl	8001222 <HAL_Init>
  SystemClock_Config();
 8000c7e:	f7ff ffc1 	bl	8000c04 <SystemClock_Config>
  MX_GPIO_Init();
 8000c82:	f7ff fe67 	bl	8000954 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c86:	f7ff fda5 	bl	80007d4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000c8a:	f7ff fddd 	bl	8000848 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8000c8e:	f000 f815 	bl	8000cbc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c92:	f000 f9e7 	bl	8001064 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8000c96:	f010 fb87 	bl	80113a8 <MX_USB_Device_Init>
  SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk; // Enable fault trapping
 8000c9a:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <main+0x3c>)
 8000c9c:	6953      	ldr	r3, [r2, #20]
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6153      	str	r3, [r2, #20]
  SEGGER_SYSVIEW_Conf();
 8000ca4:	f00f fc2e 	bl	8010504 <SEGGER_SYSVIEW_Conf>
  MX_FREERTOS_Init();
 8000ca8:	f7ff fd18 	bl	80006dc <MX_FREERTOS_Init>
  osKernelStart();
 8000cac:	f007 fc32 	bl	8008514 <osKernelStart>
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <main+0x38>
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000cb8:	4770      	bx	lr
	...

08000cbc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cbc:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cbe:	4810      	ldr	r0, [pc, #64]	; (8000d00 <MX_SPI1_Init+0x44>)
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_SPI1_Init+0x48>)
 8000cc2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cc4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000cc8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cd2:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd6:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cdc:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cde:	2208      	movs	r2, #8
 8000ce0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ce8:	2207      	movs	r2, #7
 8000cea:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cec:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000cee:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cf0:	f003 fef2 	bl	8004ad8 <HAL_SPI_Init>
 8000cf4:	b900      	cbnz	r0, 8000cf8 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cf6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cf8:	f7ff ff82 	bl	8000c00 <Error_Handler>
}
 8000cfc:	e7fb      	b.n	8000cf6 <MX_SPI1_Init+0x3a>
 8000cfe:	bf00      	nop
 8000d00:	20001de8 	.word	0x20001de8
 8000d04:	40013000 	.word	0x40013000

08000d08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d08:	b510      	push	{r4, lr}
 8000d0a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	9303      	str	r3, [sp, #12]
 8000d10:	9304      	str	r3, [sp, #16]
 8000d12:	9305      	str	r3, [sp, #20]
 8000d14:	9306      	str	r3, [sp, #24]
 8000d16:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8000d18:	6802      	ldr	r2, [r0, #0]
 8000d1a:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <HAL_SPI_MspInit+0xc8>)
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d001      	beq.n	8000d24 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d20:	b008      	add	sp, #32
 8000d22:	bd10      	pop	{r4, pc}
 8000d24:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d26:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000d2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d30:	661a      	str	r2, [r3, #96]	; 0x60
 8000d32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d34:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000d38:	9201      	str	r2, [sp, #4]
 8000d3a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d3e:	f042 0201 	orr.w	r2, r2, #1
 8000d42:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	9302      	str	r3, [sp, #8]
 8000d4c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d4e:	23e0      	movs	r3, #224	; 0xe0
 8000d50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	a903      	add	r1, sp, #12
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f001 faf6 	bl	8002354 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8000d68:	481a      	ldr	r0, [pc, #104]	; (8000dd4 <HAL_SPI_MspInit+0xcc>)
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HAL_SPI_MspInit+0xd0>)
 8000d6c:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000d6e:	230a      	movs	r3, #10
 8000d70:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d72:	2300      	movs	r3, #0
 8000d74:	6083      	str	r3, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d76:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	6102      	str	r2, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d7c:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d7e:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000d80:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d86:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d88:	f000 fb42 	bl	8001410 <HAL_DMA_Init>
 8000d8c:	b9d0      	cbnz	r0, 8000dc4 <HAL_SPI_MspInit+0xbc>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_SPI_MspInit+0xcc>)
 8000d90:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d92:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000d94:	4811      	ldr	r0, [pc, #68]	; (8000ddc <HAL_SPI_MspInit+0xd4>)
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_SPI_MspInit+0xd8>)
 8000d98:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000d9a:	230b      	movs	r3, #11
 8000d9c:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d9e:	2310      	movs	r3, #16
 8000da0:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000daa:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dac:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000dae:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db4:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000db6:	f000 fb2b 	bl	8001410 <HAL_DMA_Init>
 8000dba:	b930      	cbnz	r0, 8000dca <HAL_SPI_MspInit+0xc2>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <HAL_SPI_MspInit+0xd4>)
 8000dbe:	6563      	str	r3, [r4, #84]	; 0x54
 8000dc0:	629c      	str	r4, [r3, #40]	; 0x28
}
 8000dc2:	e7ad      	b.n	8000d20 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8000dc4:	f7ff ff1c 	bl	8000c00 <Error_Handler>
 8000dc8:	e7e1      	b.n	8000d8e <HAL_SPI_MspInit+0x86>
      Error_Handler();
 8000dca:	f7ff ff19 	bl	8000c00 <Error_Handler>
 8000dce:	e7f5      	b.n	8000dbc <HAL_SPI_MspInit+0xb4>
 8000dd0:	40013000 	.word	0x40013000
 8000dd4:	20001d28 	.word	0x20001d28
 8000dd8:	40020030 	.word	0x40020030
 8000ddc:	20001d88 	.word	0x20001d88
 8000de0:	40020008 	.word	0x40020008

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b500      	push	{lr}
 8000de6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_MspInit+0x3c>)
 8000dea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dec:	f042 0201 	orr.w	r2, r2, #1
 8000df0:	661a      	str	r2, [r3, #96]	; 0x60
 8000df2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000df4:	f002 0201 	and.w	r2, r2, #1
 8000df8:	9200      	str	r2, [sp, #0]
 8000dfa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dfe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e02:	659a      	str	r2, [r3, #88]	; 0x58
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	210f      	movs	r1, #15
 8000e12:	f06f 0001 	mvn.w	r0, #1
 8000e16:	f000 fa43 	bl	80012a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	b003      	add	sp, #12
 8000e1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b530      	push	{r4, r5, lr}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_InitTick+0x7c>)
 8000e2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e32:	661a      	str	r2, [r3, #96]	; 0x60
 8000e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e3e:	a902      	add	r1, sp, #8
 8000e40:	a803      	add	r0, sp, #12
 8000e42:	f003 f9bd 	bl	80041c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e46:	f003 f9a9 	bl	800419c <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e4a:	4a16      	ldr	r2, [pc, #88]	; (8000ea4 <HAL_InitTick+0x80>)
 8000e4c:	fba2 2300 	umull	r2, r3, r2, r0
 8000e50:	0c9b      	lsrs	r3, r3, #18
 8000e52:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e54:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <HAL_InitTick+0x84>)
 8000e56:	4a15      	ldr	r2, [pc, #84]	; (8000eac <HAL_InitTick+0x88>)
 8000e58:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e5e:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e60:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e66:	6083      	str	r3, [r0, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000e68:	f004 fc5c 	bl	8005724 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000e6c:	4605      	mov	r5, r0
 8000e6e:	b110      	cbz	r0, 8000e76 <HAL_InitTick+0x52>
    }
  }

 /* Return function status */
  return status;
}
 8000e70:	4628      	mov	r0, r5
 8000e72:	b009      	add	sp, #36	; 0x24
 8000e74:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <HAL_InitTick+0x84>)
 8000e78:	f004 fa4e 	bl	8005318 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000e7c:	4605      	mov	r5, r0
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d1f6      	bne.n	8000e70 <HAL_InitTick+0x4c>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e82:	2019      	movs	r0, #25
 8000e84:	f000 fa52 	bl	800132c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e88:	2c0f      	cmp	r4, #15
 8000e8a:	d901      	bls.n	8000e90 <HAL_InitTick+0x6c>
        status = HAL_ERROR;
 8000e8c:	2501      	movs	r5, #1
 8000e8e:	e7ef      	b.n	8000e70 <HAL_InitTick+0x4c>
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	4621      	mov	r1, r4
 8000e94:	2019      	movs	r0, #25
 8000e96:	f000 fa03 	bl	80012a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_InitTick+0x8c>)
 8000e9c:	601c      	str	r4, [r3, #0]
 8000e9e:	e7e7      	b.n	8000e70 <HAL_InitTick+0x4c>
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	431bde83 	.word	0x431bde83
 8000ea8:	20001e4c 	.word	0x20001e4c
 8000eac:	40012c00 	.word	0x40012c00
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler>

08000eb6 <HardFault_HandlerAsm>:

* will never return

*/

__asm( ".syntax unified\n"
 8000eb6:	2004      	movs	r0, #4
 8000eb8:	4671      	mov	r1, lr
 8000eba:	4208      	tst	r0, r1
 8000ebc:	d003      	beq.n	8000ec6 <_MSP>
 8000ebe:	f3ef 8009 	mrs	r0, PSP
 8000ec2:	f000 b808 	b.w	8000ed6 <HardFault_HandlerC>

08000ec6 <_MSP>:
 8000ec6:	f3ef 8008 	mrs	r0, MSP
 8000eca:	f000 b804 	b.w	8000ed6 <HardFault_HandlerC>

08000ece <HardFault_Handler>:
{
 8000ece:	b508      	push	{r3, lr}
	HardFault_HandlerAsm();
 8000ed0:	f7ff fff1 	bl	8000eb6 <HardFault_HandlerAsm>
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <HardFault_Handler+0x6>

08000ed6 <HardFault_HandlerC>:

* The function ends with a BKPT instruction to force control back into the debugger

*/

void HardFault_HandlerC(unsigned long *hardfault_args){
 8000ed6:	b08e      	sub	sp, #56	; 0x38

volatile unsigned long _BFAR ;

volatile unsigned long _MMAR ;

stacked_r0 = ((unsigned long)hardfault_args[0]) ;
 8000ed8:	6803      	ldr	r3, [r0, #0]
 8000eda:	930d      	str	r3, [sp, #52]	; 0x34

stacked_r1 = ((unsigned long)hardfault_args[1]) ;
 8000edc:	6843      	ldr	r3, [r0, #4]
 8000ede:	930c      	str	r3, [sp, #48]	; 0x30

stacked_r2 = ((unsigned long)hardfault_args[2]) ;
 8000ee0:	6883      	ldr	r3, [r0, #8]
 8000ee2:	930b      	str	r3, [sp, #44]	; 0x2c

stacked_r3 = ((unsigned long)hardfault_args[3]) ;
 8000ee4:	68c3      	ldr	r3, [r0, #12]
 8000ee6:	930a      	str	r3, [sp, #40]	; 0x28

stacked_r12 = ((unsigned long)hardfault_args[4]) ;
 8000ee8:	6903      	ldr	r3, [r0, #16]
 8000eea:	9309      	str	r3, [sp, #36]	; 0x24

stacked_lr = ((unsigned long)hardfault_args[5]) ;
 8000eec:	6943      	ldr	r3, [r0, #20]
 8000eee:	9308      	str	r3, [sp, #32]

stacked_pc = ((unsigned long)hardfault_args[6]) ;
 8000ef0:	6983      	ldr	r3, [r0, #24]
 8000ef2:	9307      	str	r3, [sp, #28]

stacked_psr = ((unsigned long)hardfault_args[7]) ;
 8000ef4:	69c3      	ldr	r3, [r0, #28]
 8000ef6:	9306      	str	r3, [sp, #24]

  // Configurable Fault Status Register

  // Consists of MMSR, BFSR and UFSR

_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
 8000ef8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000efc:	f8d3 2d28 	ldr.w	r2, [r3, #3368]	; 0xd28
 8000f00:	9205      	str	r2, [sp, #20]

// Hard Fault Status Register

_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
 8000f02:	f8d3 2d2c 	ldr.w	r2, [r3, #3372]	; 0xd2c
 8000f06:	9204      	str	r2, [sp, #16]

// Debug Fault Status Register

_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
 8000f08:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8000f0c:	9203      	str	r2, [sp, #12]

// Auxiliary Fault Status Register

_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
 8000f0e:	f8d3 2d3c 	ldr.w	r2, [r3, #3388]	; 0xd3c
 8000f12:	9202      	str	r2, [sp, #8]

// Check BFARVALID/MMARVALID to see if they are valid values

// MemManage Fault Address Register

_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
 8000f14:	f8d3 2d34 	ldr.w	r2, [r3, #3380]	; 0xd34
 8000f18:	9200      	str	r2, [sp, #0]

// Bus Fault Address Register

_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
 8000f1a:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
 8000f1e:	9301      	str	r3, [sp, #4]

__asm("BKPT #0\n") ; // Break into the debugger
 8000f20:	be00      	bkpt	0x0000

}
 8000f22:	b00e      	add	sp, #56	; 0x38
 8000f24:	4770      	bx	lr

08000f26 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <MemManage_Handler>

08000f28 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <BusFault_Handler>

08000f2a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <UsageFault_Handler>

08000f2c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	4770      	bx	lr
	...

08000f30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f32:	4802      	ldr	r0, [pc, #8]	; (8000f3c <DMA1_Channel1_IRQHandler+0xc>)
 8000f34:	f000 fc41 	bl	80017ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f38:	bd08      	pop	{r3, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20001d88 	.word	0x20001d88

08000f40 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f42:	4802      	ldr	r0, [pc, #8]	; (8000f4c <DMA1_Channel2_IRQHandler+0xc>)
 8000f44:	f000 fc39 	bl	80017ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f48:	bd08      	pop	{r3, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20001e9c 	.word	0x20001e9c

08000f50 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000f52:	4802      	ldr	r0, [pc, #8]	; (8000f5c <DMA1_Channel3_IRQHandler+0xc>)
 8000f54:	f000 fc31 	bl	80017ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f58:	bd08      	pop	{r3, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20001d28 	.word	0x20001d28

08000f60 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f62:	4802      	ldr	r0, [pc, #8]	; (8000f6c <DMA1_Channel4_IRQHandler+0xc>)
 8000f64:	f000 fc29 	bl	80017ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000f68:	bd08      	pop	{r3, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20001efc 	.word	0x20001efc

08000f70 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000f70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f72:	4802      	ldr	r0, [pc, #8]	; (8000f7c <USB_LP_IRQHandler+0xc>)
 8000f74:	f002 f934 	bl	80031e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000f78:	bd08      	pop	{r3, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000c4f0 	.word	0x2000c4f0

08000f80 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000f80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f82:	4802      	ldr	r0, [pc, #8]	; (8000f8c <FDCAN1_IT0_IRQHandler+0xc>)
 8000f84:	f001 f91a 	bl	80021bc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000f88:	bd08      	pop	{r3, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20001ca0 	.word	0x20001ca0

08000f90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f92:	4802      	ldr	r0, [pc, #8]	; (8000f9c <TIM1_UP_TIM16_IRQHandler+0xc>)
 8000f94:	f004 fa46 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f98:	bd08      	pop	{r3, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20001e4c 	.word	0x20001e4c

08000fa0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000fa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fa2:	4802      	ldr	r0, [pc, #8]	; (8000fac <USART1_IRQHandler+0xc>)
 8000fa4:	f004 fd70 	bl	8005a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fa8:	bd08      	pop	{r3, pc}
 8000faa:	bf00      	nop
 8000fac:	20001f5c 	.word	0x20001f5c

08000fb0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	4770      	bx	lr

08000fb4 <_kill>:

int _kill(int pid, int sig)
{
 8000fb4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fb6:	f010 ff2b 	bl	8011e10 <__errno>
 8000fba:	2316      	movs	r3, #22
 8000fbc:	6003      	str	r3, [r0, #0]
  return -1;
}
 8000fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc2:	bd08      	pop	{r3, pc}

08000fc4 <_exit>:

void _exit (int status)
{
 8000fc4:	b508      	push	{r3, lr}
  _kill(status, -1);
 8000fc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fca:	f7ff fff3 	bl	8000fb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fce:	e7fe      	b.n	8000fce <_exit+0xa>

08000fd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd0:	b570      	push	{r4, r5, r6, lr}
 8000fd2:	460c      	mov	r4, r1
 8000fd4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	e006      	b.n	8000fe8 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000fda:	f3af 8000 	nop.w
 8000fde:	4621      	mov	r1, r4
 8000fe0:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000fe6:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe8:	42b5      	cmp	r5, r6
 8000fea:	dbf6      	blt.n	8000fda <_read+0xa>
  }

  return len;
}
 8000fec:	4630      	mov	r0, r6
 8000fee:	bd70      	pop	{r4, r5, r6, pc}

08000ff0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff4:	4770      	bx	lr

08000ff6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffa:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	4770      	bx	lr

08001000 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001000:	2001      	movs	r0, #1
 8001002:	4770      	bx	lr

08001004 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001004:	2000      	movs	r0, #0
 8001006:	4770      	bx	lr

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b510      	push	{r4, lr}
 800100a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a0c      	ldr	r2, [pc, #48]	; (8001040 <_sbrk+0x38>)
 800100e:	490d      	ldr	r1, [pc, #52]	; (8001044 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <_sbrk+0x40>)
 8001012:	6800      	ldr	r0, [r0, #0]
 8001014:	b140      	cbz	r0, 8001028 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001016:	480c      	ldr	r0, [pc, #48]	; (8001048 <_sbrk+0x40>)
 8001018:	6800      	ldr	r0, [r0, #0]
 800101a:	4403      	add	r3, r0
 800101c:	1a52      	subs	r2, r2, r1
 800101e:	4293      	cmp	r3, r2
 8001020:	d806      	bhi.n	8001030 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001022:	4a09      	ldr	r2, [pc, #36]	; (8001048 <_sbrk+0x40>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001026:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <_sbrk+0x40>)
 800102a:	4c08      	ldr	r4, [pc, #32]	; (800104c <_sbrk+0x44>)
 800102c:	6004      	str	r4, [r0, #0]
 800102e:	e7f2      	b.n	8001016 <_sbrk+0xe>
    errno = ENOMEM;
 8001030:	f010 feee 	bl	8011e10 <__errno>
 8001034:	230c      	movs	r3, #12
 8001036:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800103c:	e7f3      	b.n	8001026 <_sbrk+0x1e>
 800103e:	bf00      	nop
 8001040:	20020000 	.word	0x20020000
 8001044:	00000400 	.word	0x00000400
 8001048:	20001e98 	.word	0x20001e98
 800104c:	2000cb50 	.word	0x2000cb50

08001050 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <SystemInit+0x10>)
 8001052:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001056:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800105a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001064:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001066:	4817      	ldr	r0, [pc, #92]	; (80010c4 <MX_USART1_UART_Init+0x60>)
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_USART1_UART_Init+0x64>)
 800106a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800106c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001070:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	2300      	movs	r3, #0
 8001074:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001076:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001078:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800107a:	220c      	movs	r2, #12
 800107c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001084:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001086:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001088:	f005 fa88 	bl	800659c <HAL_UART_Init>
 800108c:	b970      	cbnz	r0, 80010ac <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108e:	2100      	movs	r1, #0
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <MX_USART1_UART_Init+0x60>)
 8001092:	f005 fb69 	bl	8006768 <HAL_UARTEx_SetTxFifoThreshold>
 8001096:	b960      	cbnz	r0, 80010b2 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001098:	2100      	movs	r1, #0
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <MX_USART1_UART_Init+0x60>)
 800109c:	f005 fbc2 	bl	8006824 <HAL_UARTEx_SetRxFifoThreshold>
 80010a0:	b950      	cbnz	r0, 80010b8 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010a2:	4808      	ldr	r0, [pc, #32]	; (80010c4 <MX_USART1_UART_Init+0x60>)
 80010a4:	f005 fb1e 	bl	80066e4 <HAL_UARTEx_DisableFifoMode>
 80010a8:	b948      	cbnz	r0, 80010be <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010aa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010ac:	f7ff fda8 	bl	8000c00 <Error_Handler>
 80010b0:	e7ed      	b.n	800108e <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 80010b2:	f7ff fda5 	bl	8000c00 <Error_Handler>
 80010b6:	e7ef      	b.n	8001098 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 80010b8:	f7ff fda2 	bl	8000c00 <Error_Handler>
 80010bc:	e7f1      	b.n	80010a2 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 80010be:	f7ff fd9f 	bl	8000c00 <Error_Handler>
}
 80010c2:	e7f2      	b.n	80010aa <MX_USART1_UART_Init+0x46>
 80010c4:	20001f5c 	.word	0x20001f5c
 80010c8:	40013800 	.word	0x40013800

080010cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010cc:	b530      	push	{r4, r5, lr}
 80010ce:	b09d      	sub	sp, #116	; 0x74
 80010d0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	2100      	movs	r1, #0
 80010d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80010d6:	9118      	str	r1, [sp, #96]	; 0x60
 80010d8:	9119      	str	r1, [sp, #100]	; 0x64
 80010da:	911a      	str	r1, [sp, #104]	; 0x68
 80010dc:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010de:	2254      	movs	r2, #84	; 0x54
 80010e0:	a802      	add	r0, sp, #8
 80010e2:	f010 fe03 	bl	8011cec <memset>
  if(uartHandle->Instance==USART1)
 80010e6:	6822      	ldr	r2, [r4, #0]
 80010e8:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <HAL_UART_MspInit+0xec>)
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d001      	beq.n	80010f2 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010ee:	b01d      	add	sp, #116	; 0x74
 80010f0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f6:	a802      	add	r0, sp, #8
 80010f8:	f003 f894 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d152      	bne.n	80011a6 <HAL_UART_MspInit+0xda>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <HAL_UART_MspInit+0xf0>)
 8001102:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001108:	661a      	str	r2, [r3, #96]	; 0x60
 800110a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800110c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	64da      	str	r2, [r3, #76]	; 0x4c
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001126:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800112a:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2500      	movs	r5, #0
 8001132:	9519      	str	r5, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001134:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001136:	2307      	movs	r3, #7
 8001138:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	a917      	add	r1, sp, #92	; 0x5c
 800113c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001140:	f001 f908 	bl	8002354 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8001144:	481e      	ldr	r0, [pc, #120]	; (80011c0 <HAL_UART_MspInit+0xf4>)
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_UART_MspInit+0xf8>)
 8001148:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800114a:	2318      	movs	r3, #24
 800114c:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800114e:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001150:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001156:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001158:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800115a:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800115c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800115e:	f000 f957 	bl	8001410 <HAL_DMA_Init>
 8001162:	bb18      	cbnz	r0, 80011ac <HAL_UART_MspInit+0xe0>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_UART_MspInit+0xf4>)
 8001166:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001168:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800116a:	4817      	ldr	r0, [pc, #92]	; (80011c8 <HAL_UART_MspInit+0xfc>)
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_UART_MspInit+0x100>)
 800116e:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001170:	2319      	movs	r3, #25
 8001172:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001174:	2310      	movs	r3, #16
 8001176:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001180:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001182:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001184:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001186:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001188:	f000 f942 	bl	8001410 <HAL_DMA_Init>
 800118c:	b988      	cbnz	r0, 80011b2 <HAL_UART_MspInit+0xe6>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_UART_MspInit+0xfc>)
 8001190:	67a3      	str	r3, [r4, #120]	; 0x78
 8001192:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2105      	movs	r1, #5
 8001198:	2025      	movs	r0, #37	; 0x25
 800119a:	f000 f881 	bl	80012a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800119e:	2025      	movs	r0, #37	; 0x25
 80011a0:	f000 f8c4 	bl	800132c <HAL_NVIC_EnableIRQ>
}
 80011a4:	e7a3      	b.n	80010ee <HAL_UART_MspInit+0x22>
      Error_Handler();
 80011a6:	f7ff fd2b 	bl	8000c00 <Error_Handler>
 80011aa:	e7a9      	b.n	8001100 <HAL_UART_MspInit+0x34>
      Error_Handler();
 80011ac:	f7ff fd28 	bl	8000c00 <Error_Handler>
 80011b0:	e7d8      	b.n	8001164 <HAL_UART_MspInit+0x98>
      Error_Handler();
 80011b2:	f7ff fd25 	bl	8000c00 <Error_Handler>
 80011b6:	e7ea      	b.n	800118e <HAL_UART_MspInit+0xc2>
 80011b8:	40013800 	.word	0x40013800
 80011bc:	40021000 	.word	0x40021000
 80011c0:	20001e9c 	.word	0x20001e9c
 80011c4:	4002001c 	.word	0x4002001c
 80011c8:	20001efc 	.word	0x20001efc
 80011cc:	40020044 	.word	0x40020044

080011d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <LoopForever+0x6>)
  ldr r1, =_edata
 80011d6:	490e      	ldr	r1, [pc, #56]	; (8001210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <LoopForever+0xe>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011ec:	4c0b      	ldr	r4, [pc, #44]	; (800121c <LoopForever+0x16>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011fa:	f7ff ff29 	bl	8001050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fe:	f010 fe0d 	bl	8011e1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001202:	f7ff fd39 	bl	8000c78 <main>

08001206 <LoopForever>:

LoopForever:
    b LoopForever
 8001206:	e7fe      	b.n	8001206 <LoopForever>
  ldr   r0, =_estack
 8001208:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	2000186c 	.word	0x2000186c
  ldr r2, =_sidata
 8001214:	08016bc0 	.word	0x08016bc0
  ldr r2, =_sbss
 8001218:	20001c70 	.word	0x20001c70
  ldr r4, =_ebss
 800121c:	2000cb50 	.word	0x2000cb50

08001220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_2_IRQHandler>

08001222 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001222:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 f81d 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122a:	200f      	movs	r0, #15
 800122c:	f7ff fdfa 	bl	8000e24 <HAL_InitTick>
 8001230:	b110      	cbz	r0, 8001238 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 8001232:	2401      	movs	r4, #1
  }

  /* Return function status */
  return status;

}
 8001234:	4620      	mov	r0, r4
 8001236:	bd10      	pop	{r4, pc}
 8001238:	4604      	mov	r4, r0
    HAL_MspInit();
 800123a:	f7ff fdd3 	bl	8000de4 <HAL_MspInit>
 800123e:	e7f9      	b.n	8001234 <HAL_Init+0x12>

08001240 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001240:	4a03      	ldr	r2, [pc, #12]	; (8001250 <HAL_IncTick+0x10>)
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	4903      	ldr	r1, [pc, #12]	; (8001254 <HAL_IncTick+0x14>)
 8001246:	6809      	ldr	r1, [r1, #0]
 8001248:	440b      	add	r3, r1
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20001fec 	.word	0x20001fec
 8001254:	20000004 	.word	0x20000004

08001258 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001258:	4b01      	ldr	r3, [pc, #4]	; (8001260 <HAL_GetTick+0x8>)
 800125a:	6818      	ldr	r0, [r3, #0]
}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20001fec 	.word	0x20001fec

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b510      	push	{r4, lr}
 8001266:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001268:	1ec3      	subs	r3, r0, #3
 800126a:	2b04      	cmp	r3, #4
 800126c:	d80f      	bhi.n	800128e <HAL_NVIC_SetPriorityGrouping+0x2a>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8001270:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001276:	041b      	lsls	r3, r3, #16
 8001278:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127a:	0224      	lsls	r4, r4, #8
 800127c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 8001282:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800128a:	60d3      	str	r3, [r2, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800128c:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800128e:	21a6      	movs	r1, #166	; 0xa6
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <HAL_NVIC_SetPriorityGrouping+0x38>)
 8001292:	f7ff fd11 	bl	8000cb8 <assert_failed>
 8001296:	e7ea      	b.n	800126e <HAL_NVIC_SetPriorityGrouping+0xa>
 8001298:	e000ed00 	.word	0xe000ed00
 800129c:	08012e5c 	.word	0x08012e5c

080012a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b570      	push	{r4, r5, r6, lr}
 80012a2:	4605      	mov	r5, r0
 80012a4:	460c      	mov	r4, r1
 80012a6:	4616      	mov	r6, r2
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80012a8:	2a0f      	cmp	r2, #15
 80012aa:	d825      	bhi.n	80012f8 <HAL_NVIC_SetPriority+0x58>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80012ac:	2c0f      	cmp	r4, #15
 80012ae:	d828      	bhi.n	8001302 <HAL_NVIC_SetPriority+0x62>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <HAL_NVIC_SetPriority+0x80>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	f1c3 0207 	rsb	r2, r3, #7
 80012bc:	2a04      	cmp	r2, #4
 80012be:	bf28      	it	cs
 80012c0:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	1d19      	adds	r1, r3, #4
 80012c4:	2906      	cmp	r1, #6
 80012c6:	d921      	bls.n	800130c <HAL_NVIC_SetPriority+0x6c>
 80012c8:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012ce:	fa01 f202 	lsl.w	r2, r1, r2
 80012d2:	ea24 0402 	bic.w	r4, r4, r2
 80012d6:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	4099      	lsls	r1, r3
 80012da:	ea26 0601 	bic.w	r6, r6, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012de:	ea44 0206 	orr.w	r2, r4, r6
  if ((int32_t)(IRQn) >= 0)
 80012e2:	2d00      	cmp	r5, #0
 80012e4:	db14      	blt.n	8001310 <HAL_NVIC_SetPriority+0x70>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 80012ee:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 80012f2:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80012f6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80012f8:	21be      	movs	r1, #190	; 0xbe
 80012fa:	480a      	ldr	r0, [pc, #40]	; (8001324 <HAL_NVIC_SetPriority+0x84>)
 80012fc:	f7ff fcdc 	bl	8000cb8 <assert_failed>
 8001300:	e7d4      	b.n	80012ac <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001302:	21bf      	movs	r1, #191	; 0xbf
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <HAL_NVIC_SetPriority+0x84>)
 8001306:	f7ff fcd7 	bl	8000cb8 <assert_failed>
 800130a:	e7d1      	b.n	80012b0 <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130c:	2300      	movs	r3, #0
 800130e:	e7dc      	b.n	80012ca <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	f005 050f 	and.w	r5, r5, #15
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <HAL_NVIC_SetPriority+0x88>)
 800131a:	555a      	strb	r2, [r3, r5]
}
 800131c:	e7eb      	b.n	80012f6 <HAL_NVIC_SetPriority+0x56>
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00
 8001324:	08012e5c 	.word	0x08012e5c
 8001328:	e000ed14 	.word	0xe000ed14

0800132c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800132e:	1e04      	subs	r4, r0, #0
 8001330:	db0a      	blt.n	8001348 <HAL_NVIC_EnableIRQ+0x1c>
  if ((int32_t)(IRQn) >= 0)
 8001332:	2c00      	cmp	r4, #0
 8001334:	db07      	blt.n	8001346 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	f004 021f 	and.w	r2, r4, #31
 800133a:	0964      	lsrs	r4, r4, #5
 800133c:	2301      	movs	r3, #1
 800133e:	4093      	lsls	r3, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <HAL_NVIC_EnableIRQ+0x28>)
 8001342:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001346:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001348:	21d2      	movs	r1, #210	; 0xd2
 800134a:	4803      	ldr	r0, [pc, #12]	; (8001358 <HAL_NVIC_EnableIRQ+0x2c>)
 800134c:	f7ff fcb4 	bl	8000cb8 <assert_failed>
 8001350:	e7ef      	b.n	8001332 <HAL_NVIC_EnableIRQ+0x6>
 8001352:	bf00      	nop
 8001354:	e000e100 	.word	0xe000e100
 8001358:	08012e5c 	.word	0x08012e5c

0800135c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800135c:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800135e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001360:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8001362:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001364:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001366:	b114      	cbz	r4, 800136e <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001368:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800136a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800136c:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800136e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001370:	f004 0c1f 	and.w	ip, r4, #31
 8001374:	2401      	movs	r4, #1
 8001376:	fa04 f40c 	lsl.w	r4, r4, ip
 800137a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800137c:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800137e:	6804      	ldr	r4, [r0, #0]
 8001380:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001382:	6883      	ldr	r3, [r0, #8]
 8001384:	2b10      	cmp	r3, #16
 8001386:	d005      	beq.n	8001394 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001388:	6803      	ldr	r3, [r0, #0]
 800138a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800138c:	6803      	ldr	r3, [r0, #0]
 800138e:	60da      	str	r2, [r3, #12]
  }
}
 8001390:	bc30      	pop	{r4, r5}
 8001392:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001394:	6803      	ldr	r3, [r0, #0]
 8001396:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001398:	6803      	ldr	r3, [r0, #0]
 800139a:	60d9      	str	r1, [r3, #12]
 800139c:	e7f8      	b.n	8001390 <DMA_SetConfig+0x34>
	...

080013a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80013a0:	6803      	ldr	r3, [r0, #0]
 80013a2:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d813      	bhi.n	80013d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80013a8:	490b      	ldr	r1, [pc, #44]	; (80013d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	3b08      	subs	r3, #8
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80013b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80013b6:	f022 0203 	bic.w	r2, r2, #3
 80013ba:	440a      	add	r2, r1
 80013bc:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80013be:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 80013c0:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80013c2:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80013c6:	2201      	movs	r2, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	6503      	str	r3, [r0, #80]	; 0x50
}
 80013ce:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80013d0:	4904      	ldr	r1, [pc, #16]	; (80013e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80013d2:	e7ea      	b.n	80013aa <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 80013d4:	40020407 	.word	0x40020407
 80013d8:	40020800 	.word	0x40020800
 80013dc:	cccccccd 	.word	0xcccccccd
 80013e0:	40020880 	.word	0x40020880
 80013e4:	40020820 	.word	0x40020820

080013e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80013e8:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80013ea:	4a07      	ldr	r2, [pc, #28]	; (8001408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 80013ec:	441a      	add	r2, r3
 80013ee:	0092      	lsls	r2, r2, #2
 80013f0:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80013f2:	4a06      	ldr	r2, [pc, #24]	; (800140c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80013f4:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80013f6:	3b01      	subs	r3, #1
 80013f8:	f003 031f 	and.w	r3, r3, #31
 80013fc:	2201      	movs	r2, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	1000823f 	.word	0x1000823f
 800140c:	40020940 	.word	0x40020940

08001410 <HAL_DMA_Init>:
  if (hdma == NULL)
 8001410:	2800      	cmp	r0, #0
 8001412:	f000 80ed 	beq.w	80015f0 <HAL_DMA_Init+0x1e0>
{
 8001416:	b510      	push	{r4, lr}
 8001418:	4604      	mov	r4, r0
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800141a:	6803      	ldr	r3, [r0, #0]
 800141c:	4a75      	ldr	r2, [pc, #468]	; (80015f4 <HAL_DMA_Init+0x1e4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d031      	beq.n	8001486 <HAL_DMA_Init+0x76>
 8001422:	3214      	adds	r2, #20
 8001424:	4293      	cmp	r3, r2
 8001426:	d02e      	beq.n	8001486 <HAL_DMA_Init+0x76>
 8001428:	3214      	adds	r2, #20
 800142a:	4293      	cmp	r3, r2
 800142c:	d02b      	beq.n	8001486 <HAL_DMA_Init+0x76>
 800142e:	3214      	adds	r2, #20
 8001430:	4293      	cmp	r3, r2
 8001432:	d028      	beq.n	8001486 <HAL_DMA_Init+0x76>
 8001434:	3214      	adds	r2, #20
 8001436:	4293      	cmp	r3, r2
 8001438:	d025      	beq.n	8001486 <HAL_DMA_Init+0x76>
 800143a:	3214      	adds	r2, #20
 800143c:	4293      	cmp	r3, r2
 800143e:	d022      	beq.n	8001486 <HAL_DMA_Init+0x76>
 8001440:	3214      	adds	r2, #20
 8001442:	4293      	cmp	r3, r2
 8001444:	d01f      	beq.n	8001486 <HAL_DMA_Init+0x76>
 8001446:	3214      	adds	r2, #20
 8001448:	4293      	cmp	r3, r2
 800144a:	d01c      	beq.n	8001486 <HAL_DMA_Init+0x76>
 800144c:	f502 725d 	add.w	r2, r2, #884	; 0x374
 8001450:	4293      	cmp	r3, r2
 8001452:	d018      	beq.n	8001486 <HAL_DMA_Init+0x76>
 8001454:	3214      	adds	r2, #20
 8001456:	4293      	cmp	r3, r2
 8001458:	d015      	beq.n	8001486 <HAL_DMA_Init+0x76>
 800145a:	3214      	adds	r2, #20
 800145c:	4293      	cmp	r3, r2
 800145e:	d012      	beq.n	8001486 <HAL_DMA_Init+0x76>
 8001460:	3214      	adds	r2, #20
 8001462:	4293      	cmp	r3, r2
 8001464:	d00f      	beq.n	8001486 <HAL_DMA_Init+0x76>
 8001466:	3214      	adds	r2, #20
 8001468:	4293      	cmp	r3, r2
 800146a:	d00c      	beq.n	8001486 <HAL_DMA_Init+0x76>
 800146c:	3214      	adds	r2, #20
 800146e:	4293      	cmp	r3, r2
 8001470:	d009      	beq.n	8001486 <HAL_DMA_Init+0x76>
 8001472:	3214      	adds	r2, #20
 8001474:	4293      	cmp	r3, r2
 8001476:	d006      	beq.n	8001486 <HAL_DMA_Init+0x76>
 8001478:	3214      	adds	r2, #20
 800147a:	4293      	cmp	r3, r2
 800147c:	d003      	beq.n	8001486 <HAL_DMA_Init+0x76>
 800147e:	21a3      	movs	r1, #163	; 0xa3
 8001480:	485d      	ldr	r0, [pc, #372]	; (80015f8 <HAL_DMA_Init+0x1e8>)
 8001482:	f7ff fc19 	bl	8000cb8 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001486:	68a3      	ldr	r3, [r4, #8]
 8001488:	b123      	cbz	r3, 8001494 <HAL_DMA_Init+0x84>
 800148a:	2b10      	cmp	r3, #16
 800148c:	d002      	beq.n	8001494 <HAL_DMA_Init+0x84>
 800148e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001492:	d16d      	bne.n	8001570 <HAL_DMA_Init+0x160>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001494:	68e3      	ldr	r3, [r4, #12]
 8001496:	2b40      	cmp	r3, #64	; 0x40
 8001498:	d001      	beq.n	800149e <HAL_DMA_Init+0x8e>
 800149a:	2b00      	cmp	r3, #0
 800149c:	d16d      	bne.n	800157a <HAL_DMA_Init+0x16a>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800149e:	6923      	ldr	r3, [r4, #16]
 80014a0:	2b80      	cmp	r3, #128	; 0x80
 80014a2:	d001      	beq.n	80014a8 <HAL_DMA_Init+0x98>
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d16d      	bne.n	8001584 <HAL_DMA_Init+0x174>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80014a8:	6963      	ldr	r3, [r4, #20]
 80014aa:	b12b      	cbz	r3, 80014b8 <HAL_DMA_Init+0xa8>
 80014ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b0:	d002      	beq.n	80014b8 <HAL_DMA_Init+0xa8>
 80014b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014b6:	d16a      	bne.n	800158e <HAL_DMA_Init+0x17e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80014b8:	69a3      	ldr	r3, [r4, #24]
 80014ba:	b12b      	cbz	r3, 80014c8 <HAL_DMA_Init+0xb8>
 80014bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c0:	d002      	beq.n	80014c8 <HAL_DMA_Init+0xb8>
 80014c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014c6:	d167      	bne.n	8001598 <HAL_DMA_Init+0x188>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80014c8:	69e3      	ldr	r3, [r4, #28]
 80014ca:	b10b      	cbz	r3, 80014d0 <HAL_DMA_Init+0xc0>
 80014cc:	2b20      	cmp	r3, #32
 80014ce:	d168      	bne.n	80015a2 <HAL_DMA_Init+0x192>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80014d0:	6a23      	ldr	r3, [r4, #32]
 80014d2:	b143      	cbz	r3, 80014e6 <HAL_DMA_Init+0xd6>
 80014d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014d8:	d005      	beq.n	80014e6 <HAL_DMA_Init+0xd6>
 80014da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014de:	d002      	beq.n	80014e6 <HAL_DMA_Init+0xd6>
 80014e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80014e4:	d162      	bne.n	80015ac <HAL_DMA_Init+0x19c>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80014e6:	6863      	ldr	r3, [r4, #4]
 80014e8:	2b73      	cmp	r3, #115	; 0x73
 80014ea:	d864      	bhi.n	80015b6 <HAL_DMA_Init+0x1a6>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014ec:	6821      	ldr	r1, [r4, #0]
 80014ee:	4b43      	ldr	r3, [pc, #268]	; (80015fc <HAL_DMA_Init+0x1ec>)
 80014f0:	4299      	cmp	r1, r3
 80014f2:	d865      	bhi.n	80015c0 <HAL_DMA_Init+0x1b0>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014f4:	4b42      	ldr	r3, [pc, #264]	; (8001600 <HAL_DMA_Init+0x1f0>)
 80014f6:	440b      	add	r3, r1
 80014f8:	4a42      	ldr	r2, [pc, #264]	; (8001604 <HAL_DMA_Init+0x1f4>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001504:	4b40      	ldr	r3, [pc, #256]	; (8001608 <HAL_DMA_Init+0x1f8>)
 8001506:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001508:	2302      	movs	r3, #2
 800150a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 800150e:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001510:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001514:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8001518:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151a:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 800151c:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151e:	6920      	ldr	r0, [r4, #16]
 8001520:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001522:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001524:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001526:	69a0      	ldr	r0, [r4, #24]
 8001528:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800152a:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800152e:	6a20      	ldr	r0, [r4, #32]
 8001530:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001532:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001534:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff ff32 	bl	80013a0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800153c:	68a3      	ldr	r3, [r4, #8]
 800153e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001542:	d048      	beq.n	80015d6 <HAL_DMA_Init+0x1c6>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001544:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001546:	7922      	ldrb	r2, [r4, #4]
 8001548:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800154a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800154c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800154e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001550:	6863      	ldr	r3, [r4, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	2b03      	cmp	r3, #3
 8001556:	d941      	bls.n	80015dc <HAL_DMA_Init+0x1cc>
    hdma->DMAmuxRequestGen = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800155c:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800155e:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001560:	2000      	movs	r0, #0
 8001562:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8001564:	2301      	movs	r3, #1
 8001566:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 800156a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800156e:	bd10      	pop	{r4, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001570:	21a4      	movs	r1, #164	; 0xa4
 8001572:	4821      	ldr	r0, [pc, #132]	; (80015f8 <HAL_DMA_Init+0x1e8>)
 8001574:	f7ff fba0 	bl	8000cb8 <assert_failed>
 8001578:	e78c      	b.n	8001494 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800157a:	21a5      	movs	r1, #165	; 0xa5
 800157c:	481e      	ldr	r0, [pc, #120]	; (80015f8 <HAL_DMA_Init+0x1e8>)
 800157e:	f7ff fb9b 	bl	8000cb8 <assert_failed>
 8001582:	e78c      	b.n	800149e <HAL_DMA_Init+0x8e>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001584:	21a6      	movs	r1, #166	; 0xa6
 8001586:	481c      	ldr	r0, [pc, #112]	; (80015f8 <HAL_DMA_Init+0x1e8>)
 8001588:	f7ff fb96 	bl	8000cb8 <assert_failed>
 800158c:	e78c      	b.n	80014a8 <HAL_DMA_Init+0x98>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800158e:	21a7      	movs	r1, #167	; 0xa7
 8001590:	4819      	ldr	r0, [pc, #100]	; (80015f8 <HAL_DMA_Init+0x1e8>)
 8001592:	f7ff fb91 	bl	8000cb8 <assert_failed>
 8001596:	e78f      	b.n	80014b8 <HAL_DMA_Init+0xa8>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001598:	21a8      	movs	r1, #168	; 0xa8
 800159a:	4817      	ldr	r0, [pc, #92]	; (80015f8 <HAL_DMA_Init+0x1e8>)
 800159c:	f7ff fb8c 	bl	8000cb8 <assert_failed>
 80015a0:	e792      	b.n	80014c8 <HAL_DMA_Init+0xb8>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80015a2:	21a9      	movs	r1, #169	; 0xa9
 80015a4:	4814      	ldr	r0, [pc, #80]	; (80015f8 <HAL_DMA_Init+0x1e8>)
 80015a6:	f7ff fb87 	bl	8000cb8 <assert_failed>
 80015aa:	e791      	b.n	80014d0 <HAL_DMA_Init+0xc0>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80015ac:	21aa      	movs	r1, #170	; 0xaa
 80015ae:	4812      	ldr	r0, [pc, #72]	; (80015f8 <HAL_DMA_Init+0x1e8>)
 80015b0:	f7ff fb82 	bl	8000cb8 <assert_failed>
 80015b4:	e797      	b.n	80014e6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80015b6:	21ac      	movs	r1, #172	; 0xac
 80015b8:	480f      	ldr	r0, [pc, #60]	; (80015f8 <HAL_DMA_Init+0x1e8>)
 80015ba:	f7ff fb7d 	bl	8000cb8 <assert_failed>
 80015be:	e795      	b.n	80014ec <HAL_DMA_Init+0xdc>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_DMA_Init+0x1fc>)
 80015c2:	440b      	add	r3, r1
 80015c4:	4a0f      	ldr	r2, [pc, #60]	; (8001604 <HAL_DMA_Init+0x1f4>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_DMA_Init+0x200>)
 80015d2:	6423      	str	r3, [r4, #64]	; 0x40
 80015d4:	e798      	b.n	8001508 <HAL_DMA_Init+0xf8>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015d6:	2300      	movs	r3, #0
 80015d8:	6063      	str	r3, [r4, #4]
 80015da:	e7b3      	b.n	8001544 <HAL_DMA_Init+0x134>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015dc:	4620      	mov	r0, r4
 80015de:	f7ff ff03 	bl	80013e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	e7b7      	b.n	8001560 <HAL_DMA_Init+0x150>
    return HAL_ERROR;
 80015f0:	2001      	movs	r0, #1
}
 80015f2:	4770      	bx	lr
 80015f4:	40020008 	.word	0x40020008
 80015f8:	08012e98 	.word	0x08012e98
 80015fc:	40020407 	.word	0x40020407
 8001600:	bffdfff8 	.word	0xbffdfff8
 8001604:	cccccccd 	.word	0xcccccccd
 8001608:	40020000 	.word	0x40020000
 800160c:	bffdfbf8 	.word	0xbffdfbf8
 8001610:	40020400 	.word	0x40020400

08001614 <HAL_DMA_Start_IT>:
{
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	4604      	mov	r4, r0
 8001618:	460e      	mov	r6, r1
 800161a:	4617      	mov	r7, r2
 800161c:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800161e:	1e5a      	subs	r2, r3, #1
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <HAL_DMA_Start_IT+0xb4>)
 8001622:	429a      	cmp	r2, r3
 8001624:	d810      	bhi.n	8001648 <HAL_DMA_Start_IT+0x34>
  __HAL_LOCK(hdma);
 8001626:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800162a:	2b01      	cmp	r3, #1
 800162c:	d04a      	beq.n	80016c4 <HAL_DMA_Start_IT+0xb0>
 800162e:	2301      	movs	r3, #1
 8001630:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8001634:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b01      	cmp	r3, #1
 800163c:	d00a      	beq.n	8001654 <HAL_DMA_Start_IT+0x40>
    __HAL_UNLOCK(hdma);
 800163e:	2300      	movs	r3, #0
 8001640:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8001644:	2002      	movs	r0, #2
}
 8001646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001648:	f240 11ab 	movw	r1, #427	; 0x1ab
 800164c:	481f      	ldr	r0, [pc, #124]	; (80016cc <HAL_DMA_Start_IT+0xb8>)
 800164e:	f7ff fb33 	bl	8000cb8 <assert_failed>
 8001652:	e7e8      	b.n	8001626 <HAL_DMA_Start_IT+0x12>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001654:	2302      	movs	r3, #2
 8001656:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800165a:	2300      	movs	r3, #0
 800165c:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800165e:	6822      	ldr	r2, [r4, #0]
 8001660:	6813      	ldr	r3, [r2, #0]
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	6013      	str	r3, [r2, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001668:	462b      	mov	r3, r5
 800166a:	463a      	mov	r2, r7
 800166c:	4631      	mov	r1, r6
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff fe74 	bl	800135c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001674:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001676:	b1d3      	cbz	r3, 80016ae <HAL_DMA_Start_IT+0x9a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001678:	6822      	ldr	r2, [r4, #0]
 800167a:	6813      	ldr	r3, [r2, #0]
 800167c:	f043 030e 	orr.w	r3, r3, #14
 8001680:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001682:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800168a:	d003      	beq.n	8001694 <HAL_DMA_Start_IT+0x80>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001692:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001694:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001696:	b11b      	cbz	r3, 80016a0 <HAL_DMA_Start_IT+0x8c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800169e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80016a0:	6822      	ldr	r2, [r4, #0]
 80016a2:	6813      	ldr	r3, [r2, #0]
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016aa:	2000      	movs	r0, #0
 80016ac:	e7cb      	b.n	8001646 <HAL_DMA_Start_IT+0x32>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016ae:	6822      	ldr	r2, [r4, #0]
 80016b0:	6813      	ldr	r3, [r2, #0]
 80016b2:	f023 0304 	bic.w	r3, r3, #4
 80016b6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016b8:	6822      	ldr	r2, [r4, #0]
 80016ba:	6813      	ldr	r3, [r2, #0]
 80016bc:	f043 030a 	orr.w	r3, r3, #10
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e7de      	b.n	8001682 <HAL_DMA_Start_IT+0x6e>
  __HAL_LOCK(hdma);
 80016c4:	2002      	movs	r0, #2
 80016c6:	e7be      	b.n	8001646 <HAL_DMA_Start_IT+0x32>
 80016c8:	0003fffe 	.word	0x0003fffe
 80016cc:	08012e98 	.word	0x08012e98

080016d0 <HAL_DMA_Abort>:
{
 80016d0:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	2a02      	cmp	r2, #2
 80016da:	d009      	beq.n	80016f0 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016dc:	2204      	movs	r2, #4
 80016de:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80016e0:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80016ee:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f0:	6801      	ldr	r1, [r0, #0]
 80016f2:	680a      	ldr	r2, [r1, #0]
 80016f4:	f022 020e 	bic.w	r2, r2, #14
 80016f8:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016fa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80016fc:	680a      	ldr	r2, [r1, #0]
 80016fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001702:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 8001704:	6801      	ldr	r1, [r0, #0]
 8001706:	680a      	ldr	r2, [r1, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800170e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001710:	f002 011f 	and.w	r1, r2, #31
 8001714:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8001716:	2201      	movs	r2, #1
 8001718:	408a      	lsls	r2, r1
 800171a:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800171c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800171e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001720:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8001722:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001724:	b142      	cbz	r2, 8001738 <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001726:	6811      	ldr	r1, [r2, #0]
 8001728:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800172c:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800172e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001730:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001732:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001734:	2000      	movs	r0, #0
 8001736:	e7d4      	b.n	80016e2 <HAL_DMA_Abort+0x12>
 8001738:	2000      	movs	r0, #0
 800173a:	e7d2      	b.n	80016e2 <HAL_DMA_Abort+0x12>

0800173c <HAL_DMA_Abort_IT>:
{
 800173c:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800173e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d009      	beq.n	800175c <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001748:	2304      	movs	r3, #4
 800174a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800174c:	2301      	movs	r3, #1
 800174e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001752:	2200      	movs	r2, #0
 8001754:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 8001758:	4618      	mov	r0, r3
}
 800175a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175c:	6802      	ldr	r2, [r0, #0]
 800175e:	6813      	ldr	r3, [r2, #0]
 8001760:	f023 030e 	bic.w	r3, r3, #14
 8001764:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001766:	6802      	ldr	r2, [r0, #0]
 8001768:	6813      	ldr	r3, [r2, #0]
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001770:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001772:	6813      	ldr	r3, [r2, #0]
 8001774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800177a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001782:	2301      	movs	r3, #1
 8001784:	4093      	lsls	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001788:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800178a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800178c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800178e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001790:	b133      	cbz	r3, 80017a0 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001798:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800179a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800179c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800179e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80017a0:	2301      	movs	r3, #1
 80017a2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80017a6:	2300      	movs	r3, #0
 80017a8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80017ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80017ae:	b113      	cbz	r3, 80017b6 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 80017b0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80017b2:	2000      	movs	r0, #0
 80017b4:	e7d1      	b.n	800175a <HAL_DMA_Abort_IT+0x1e>
 80017b6:	2000      	movs	r0, #0
 80017b8:	e7cf      	b.n	800175a <HAL_DMA_Abort_IT+0x1e>

080017ba <HAL_DMA_IRQHandler>:
{
 80017ba:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80017be:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80017c0:	6804      	ldr	r4, [r0, #0]
 80017c2:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80017c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80017c6:	f003 031f 	and.w	r3, r3, #31
 80017ca:	2204      	movs	r2, #4
 80017cc:	409a      	lsls	r2, r3
 80017ce:	420a      	tst	r2, r1
 80017d0:	d015      	beq.n	80017fe <HAL_DMA_IRQHandler+0x44>
 80017d2:	f015 0f04 	tst.w	r5, #4
 80017d6:	d012      	beq.n	80017fe <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	f013 0f20 	tst.w	r3, #32
 80017de:	d103      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	f023 0304 	bic.w	r3, r3, #4
 80017e6:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80017e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80017ea:	f003 021f 	and.w	r2, r3, #31
 80017ee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80017f0:	2304      	movs	r3, #4
 80017f2:	4093      	lsls	r3, r2
 80017f4:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80017f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80017f8:	b103      	cbz	r3, 80017fc <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 80017fa:	4798      	blx	r3
}
 80017fc:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80017fe:	2202      	movs	r2, #2
 8001800:	409a      	lsls	r2, r3
 8001802:	420a      	tst	r2, r1
 8001804:	d01c      	beq.n	8001840 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8001806:	f015 0f02 	tst.w	r5, #2
 800180a:	d019      	beq.n	8001840 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	f013 0f20 	tst.w	r3, #32
 8001812:	d106      	bne.n	8001822 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	f023 030a 	bic.w	r3, r3, #10
 800181a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800181c:	2301      	movs	r3, #1
 800181e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001822:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800182a:	2302      	movs	r3, #2
 800182c:	4093      	lsls	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001830:	2300      	movs	r3, #0
 8001832:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8001836:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0df      	beq.n	80017fc <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800183c:	4798      	blx	r3
 800183e:	e7dd      	b.n	80017fc <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001840:	2208      	movs	r2, #8
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	420b      	tst	r3, r1
 8001848:	d0d8      	beq.n	80017fc <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 800184a:	f015 0f08 	tst.w	r5, #8
 800184e:	d0d5      	beq.n	80017fc <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	f023 030e 	bic.w	r3, r3, #14
 8001856:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001858:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800185a:	f003 031f 	and.w	r3, r3, #31
 800185e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001860:	2201      	movs	r2, #1
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001868:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800186a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800186e:	2300      	movs	r3, #0
 8001870:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001874:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0c0      	beq.n	80017fc <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800187a:	4798      	blx	r3
  return;
 800187c:	e7be      	b.n	80017fc <HAL_DMA_IRQHandler+0x42>
	...

08001880 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001880:	b410      	push	{r4}
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001882:	6802      	ldr	r2, [r0, #0]
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <FDCAN_CalcultateRamBlockAddresses+0x7c>)
 8001886:	429a      	cmp	r2, r3
 8001888:	d028      	beq.n	80018dc <FDCAN_CalcultateRamBlockAddresses+0x5c>
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800188a:	491d      	ldr	r1, [pc, #116]	; (8001900 <FDCAN_CalcultateRamBlockAddresses+0x80>)
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <FDCAN_CalcultateRamBlockAddresses+0x84>)
 800188e:	429a      	cmp	r2, r3
 8001890:	d026      	beq.n	80018e0 <FDCAN_CalcultateRamBlockAddresses+0x60>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001892:	6401      	str	r1, [r0, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001894:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001898:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800189c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800189e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80018a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80018a6:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80018aa:	6443      	str	r3, [r0, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80018ac:	6802      	ldr	r2, [r0, #0]
 80018ae:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80018b2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80018b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80018b8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80018bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80018c0:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 80018c4:	6483      	str	r3, [r0, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80018c6:	f501 73c4 	add.w	r3, r1, #392	; 0x188
 80018ca:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80018cc:	f501 7318 	add.w	r3, r1, #608	; 0x260
 80018d0:	6503      	str	r3, [r0, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80018d2:	f501 731e 	add.w	r3, r1, #632	; 0x278
 80018d6:	6543      	str	r3, [r0, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80018d8:	460b      	mov	r3, r1
 80018da:	e007      	b.n	80018ec <FDCAN_CalcultateRamBlockAddresses+0x6c>
    SramCanInstanceBase += SRAMCAN_SIZE;
 80018dc:	490a      	ldr	r1, [pc, #40]	; (8001908 <FDCAN_CalcultateRamBlockAddresses+0x88>)
 80018de:	e7d5      	b.n	800188c <FDCAN_CalcultateRamBlockAddresses+0xc>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80018e0:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 80018e4:	e7d5      	b.n	8001892 <FDCAN_CalcultateRamBlockAddresses+0x12>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80018e6:	2200      	movs	r2, #0
 80018e8:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80018ec:	f501 7254 	add.w	r2, r1, #848	; 0x350
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d8f8      	bhi.n	80018e6 <FDCAN_CalcultateRamBlockAddresses+0x66>
  }
}
 80018f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40006800 	.word	0x40006800
 8001900:	4000a400 	.word	0x4000a400
 8001904:	40006c00 	.word	0x40006c00
 8001908:	4000a750 	.word	0x4000a750

0800190c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800190c:	b570      	push	{r4, r5, r6, lr}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800190e:	684c      	ldr	r4, [r1, #4]
 8001910:	b9e4      	cbnz	r4, 800194c <FDCAN_CopyMessageToRAM+0x40>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001912:	690d      	ldr	r5, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001914:	688c      	ldr	r4, [r1, #8]
                   FDCAN_STANDARD_ID |
 8001916:	4325      	orrs	r5, r4
                   (pTxHeader->Identifier << 18U));
 8001918:	680c      	ldr	r4, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800191a:	ea45 4584 	orr.w	r5, r5, r4, lsl #18
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
                 pTxHeader->TxEventFifoControl |
 800191e:	69cc      	ldr	r4, [r1, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001920:	6a0e      	ldr	r6, [r1, #32]
 8001922:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
                 pTxHeader->TxEventFifoControl |
 8001926:	698e      	ldr	r6, [r1, #24]
 8001928:	4334      	orrs	r4, r6
                 pTxHeader->FDFormat |
 800192a:	694e      	ldr	r6, [r1, #20]
 800192c:	4334      	orrs	r4, r6
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800192e:	68ce      	ldr	r6, [r1, #12]
 8001930:	4334      	orrs	r4, r6
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001932:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8001934:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001938:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800193c:	f840 5033 	str.w	r5, [r0, r3, lsl #3]
  TxAddress++;
  *TxAddress = TxElementW2;
 8001940:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;
 8001944:	f10e 0e08 	add.w	lr, lr, #8

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001948:	2000      	movs	r0, #0
 800194a:	e019      	b.n	8001980 <FDCAN_CopyMessageToRAM+0x74>
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800194c:	690c      	ldr	r4, [r1, #16]
                   pTxHeader->TxFrameType |
 800194e:	688d      	ldr	r5, [r1, #8]
                   FDCAN_EXTENDED_ID |
 8001950:	4325      	orrs	r5, r4
                   pTxHeader->Identifier);
 8001952:	680c      	ldr	r4, [r1, #0]
                   pTxHeader->TxFrameType |
 8001954:	4325      	orrs	r5, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001956:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 800195a:	e7e0      	b.n	800191e <FDCAN_CopyMessageToRAM+0x12>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800195c:	eb02 0c00 	add.w	ip, r2, r0
 8001960:	f89c 4003 	ldrb.w	r4, [ip, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001964:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8001968:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800196a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800196e:	f89c 4001 	ldrb.w	r4, [ip, #1]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001972:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                  (uint32_t)pTxData[ByteCounter]);
 8001976:	5c14      	ldrb	r4, [r2, r0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001978:	4323      	orrs	r3, r4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800197a:	f84e 3b04 	str.w	r3, [lr], #4
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800197e:	3004      	adds	r0, #4
 8001980:	89cb      	ldrh	r3, [r1, #14]
 8001982:	4c02      	ldr	r4, [pc, #8]	; (800198c <FDCAN_CopyMessageToRAM+0x80>)
 8001984:	5ce3      	ldrb	r3, [r4, r3]
 8001986:	4283      	cmp	r3, r0
 8001988:	d8e8      	bhi.n	800195c <FDCAN_CopyMessageToRAM+0x50>
    TxAddress++;
  }
}
 800198a:	bd70      	pop	{r4, r5, r6, pc}
 800198c:	08012f0c 	.word	0x08012f0c

08001990 <HAL_FDCAN_Init>:
  if (hfdcan == NULL)
 8001990:	2800      	cmp	r0, #0
 8001992:	f000 81b1 	beq.w	8001cf8 <HAL_FDCAN_Init+0x368>
{
 8001996:	b538      	push	{r3, r4, r5, lr}
 8001998:	4604      	mov	r4, r0
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));
 800199a:	6803      	ldr	r3, [r0, #0]
 800199c:	4a82      	ldr	r2, [pc, #520]	; (8001ba8 <HAL_FDCAN_Init+0x218>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00c      	beq.n	80019bc <HAL_FDCAN_Init+0x2c>
 80019a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d008      	beq.n	80019bc <HAL_FDCAN_Init+0x2c>
 80019aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d004      	beq.n	80019bc <HAL_FDCAN_Init+0x2c>
 80019b2:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80019b6:	487d      	ldr	r0, [pc, #500]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 80019b8:	f7ff f97e 	bl	8000cb8 <assert_failed>
  if (hfdcan->Instance == FDCAN1)
 80019bc:	6822      	ldr	r2, [r4, #0]
 80019be:	4b7a      	ldr	r3, [pc, #488]	; (8001ba8 <HAL_FDCAN_Init+0x218>)
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d057      	beq.n	8001a74 <HAL_FDCAN_Init+0xe4>
  assert_param(IS_FDCAN_FRAME_FORMAT(hfdcan->Init.FrameFormat));
 80019c4:	68a3      	ldr	r3, [r4, #8]
 80019c6:	b12b      	cbz	r3, 80019d4 <HAL_FDCAN_Init+0x44>
 80019c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019cc:	d002      	beq.n	80019d4 <HAL_FDCAN_Init+0x44>
 80019ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019d2:	d158      	bne.n	8001a86 <HAL_FDCAN_Init+0xf6>
  assert_param(IS_FDCAN_MODE(hfdcan->Init.Mode));
 80019d4:	68e3      	ldr	r3, [r4, #12]
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d85b      	bhi.n	8001a92 <HAL_FDCAN_Init+0x102>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.AutoRetransmission));
 80019da:	7c23      	ldrb	r3, [r4, #16]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d85e      	bhi.n	8001a9e <HAL_FDCAN_Init+0x10e>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.TransmitPause));
 80019e0:	7c63      	ldrb	r3, [r4, #17]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d861      	bhi.n	8001aaa <HAL_FDCAN_Init+0x11a>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.ProtocolException));
 80019e6:	7ca3      	ldrb	r3, [r4, #18]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d864      	bhi.n	8001ab6 <HAL_FDCAN_Init+0x126>
  assert_param(IS_FDCAN_NOMINAL_PRESCALER(hfdcan->Init.NominalPrescaler));
 80019ec:	6963      	ldr	r3, [r4, #20]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f4:	d265      	bcs.n	8001ac2 <HAL_FDCAN_Init+0x132>
  assert_param(IS_FDCAN_NOMINAL_SJW(hfdcan->Init.NominalSyncJumpWidth));
 80019f6:	69a3      	ldr	r3, [r4, #24]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	2b7f      	cmp	r3, #127	; 0x7f
 80019fc:	d867      	bhi.n	8001ace <HAL_FDCAN_Init+0x13e>
  assert_param(IS_FDCAN_NOMINAL_TSEG1(hfdcan->Init.NominalTimeSeg1));
 80019fe:	69e3      	ldr	r3, [r4, #28]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	2bff      	cmp	r3, #255	; 0xff
 8001a04:	d869      	bhi.n	8001ada <HAL_FDCAN_Init+0x14a>
  assert_param(IS_FDCAN_NOMINAL_TSEG2(hfdcan->Init.NominalTimeSeg2));
 8001a06:	6a23      	ldr	r3, [r4, #32]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a0c:	d86b      	bhi.n	8001ae6 <HAL_FDCAN_Init+0x156>
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001a0e:	68a3      	ldr	r3, [r4, #8]
 8001a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a14:	d06d      	beq.n	8001af2 <HAL_FDCAN_Init+0x162>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.StdFiltersNbr, SRAMCAN_FLS_NBR));
 8001a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a18:	2b1c      	cmp	r3, #28
 8001a1a:	f200 8092 	bhi.w	8001b42 <HAL_FDCAN_Init+0x1b2>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.ExtFiltersNbr, SRAMCAN_FLE_NBR));
 8001a1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	f200 8094 	bhi.w	8001b4e <HAL_FDCAN_Init+0x1be>
  assert_param(IS_FDCAN_TX_FIFO_QUEUE_MODE(hfdcan->Init.TxFifoQueueMode));
 8001a26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a28:	b11b      	cbz	r3, 8001a32 <HAL_FDCAN_Init+0xa2>
 8001a2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2e:	f040 8094 	bne.w	8001b5a <HAL_FDCAN_Init+0x1ca>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001a32:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8095 	beq.w	8001b66 <HAL_FDCAN_Init+0x1d6>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001a3c:	6822      	ldr	r2, [r4, #0]
 8001a3e:	6993      	ldr	r3, [r2, #24]
 8001a40:	f023 0310 	bic.w	r3, r3, #16
 8001a44:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8001a46:	f7ff fc07 	bl	8001258 <HAL_GetTick>
 8001a4a:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	699a      	ldr	r2, [r3, #24]
 8001a50:	f012 0f08 	tst.w	r2, #8
 8001a54:	f000 808d 	beq.w	8001b72 <HAL_FDCAN_Init+0x1e2>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a58:	f7ff fbfe 	bl	8001258 <HAL_GetTick>
 8001a5c:	1b40      	subs	r0, r0, r5
 8001a5e:	280a      	cmp	r0, #10
 8001a60:	d9f4      	bls.n	8001a4c <HAL_FDCAN_Init+0xbc>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a62:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8001a70:	2001      	movs	r0, #1
}
 8001a72:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_FDCAN_CKDIV(hfdcan->Init.ClockDivider));
 8001a74:	6863      	ldr	r3, [r4, #4]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	d9a4      	bls.n	80019c4 <HAL_FDCAN_Init+0x34>
 8001a7a:	f240 112d 	movw	r1, #301	; 0x12d
 8001a7e:	484b      	ldr	r0, [pc, #300]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001a80:	f7ff f91a 	bl	8000cb8 <assert_failed>
 8001a84:	e79e      	b.n	80019c4 <HAL_FDCAN_Init+0x34>
  assert_param(IS_FDCAN_FRAME_FORMAT(hfdcan->Init.FrameFormat));
 8001a86:	f240 112f 	movw	r1, #303	; 0x12f
 8001a8a:	4848      	ldr	r0, [pc, #288]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001a8c:	f7ff f914 	bl	8000cb8 <assert_failed>
 8001a90:	e7a0      	b.n	80019d4 <HAL_FDCAN_Init+0x44>
  assert_param(IS_FDCAN_MODE(hfdcan->Init.Mode));
 8001a92:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001a96:	4845      	ldr	r0, [pc, #276]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001a98:	f7ff f90e 	bl	8000cb8 <assert_failed>
 8001a9c:	e79d      	b.n	80019da <HAL_FDCAN_Init+0x4a>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.AutoRetransmission));
 8001a9e:	f240 1131 	movw	r1, #305	; 0x131
 8001aa2:	4842      	ldr	r0, [pc, #264]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001aa4:	f7ff f908 	bl	8000cb8 <assert_failed>
 8001aa8:	e79a      	b.n	80019e0 <HAL_FDCAN_Init+0x50>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.TransmitPause));
 8001aaa:	f44f 7199 	mov.w	r1, #306	; 0x132
 8001aae:	483f      	ldr	r0, [pc, #252]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001ab0:	f7ff f902 	bl	8000cb8 <assert_failed>
 8001ab4:	e797      	b.n	80019e6 <HAL_FDCAN_Init+0x56>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.ProtocolException));
 8001ab6:	f240 1133 	movw	r1, #307	; 0x133
 8001aba:	483c      	ldr	r0, [pc, #240]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001abc:	f7ff f8fc 	bl	8000cb8 <assert_failed>
 8001ac0:	e794      	b.n	80019ec <HAL_FDCAN_Init+0x5c>
  assert_param(IS_FDCAN_NOMINAL_PRESCALER(hfdcan->Init.NominalPrescaler));
 8001ac2:	f44f 719a 	mov.w	r1, #308	; 0x134
 8001ac6:	4839      	ldr	r0, [pc, #228]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001ac8:	f7ff f8f6 	bl	8000cb8 <assert_failed>
 8001acc:	e793      	b.n	80019f6 <HAL_FDCAN_Init+0x66>
  assert_param(IS_FDCAN_NOMINAL_SJW(hfdcan->Init.NominalSyncJumpWidth));
 8001ace:	f240 1135 	movw	r1, #309	; 0x135
 8001ad2:	4836      	ldr	r0, [pc, #216]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001ad4:	f7ff f8f0 	bl	8000cb8 <assert_failed>
 8001ad8:	e791      	b.n	80019fe <HAL_FDCAN_Init+0x6e>
  assert_param(IS_FDCAN_NOMINAL_TSEG1(hfdcan->Init.NominalTimeSeg1));
 8001ada:	f44f 719b 	mov.w	r1, #310	; 0x136
 8001ade:	4833      	ldr	r0, [pc, #204]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001ae0:	f7ff f8ea 	bl	8000cb8 <assert_failed>
 8001ae4:	e78f      	b.n	8001a06 <HAL_FDCAN_Init+0x76>
  assert_param(IS_FDCAN_NOMINAL_TSEG2(hfdcan->Init.NominalTimeSeg2));
 8001ae6:	f240 1137 	movw	r1, #311	; 0x137
 8001aea:	4830      	ldr	r0, [pc, #192]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001aec:	f7ff f8e4 	bl	8000cb8 <assert_failed>
 8001af0:	e78d      	b.n	8001a0e <HAL_FDCAN_Init+0x7e>
    assert_param(IS_FDCAN_DATA_PRESCALER(hfdcan->Init.DataPrescaler));
 8001af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001af4:	3b01      	subs	r3, #1
 8001af6:	2b1f      	cmp	r3, #31
 8001af8:	d811      	bhi.n	8001b1e <HAL_FDCAN_Init+0x18e>
    assert_param(IS_FDCAN_DATA_SJW(hfdcan->Init.DataSyncJumpWidth));
 8001afa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001afc:	3b01      	subs	r3, #1
 8001afe:	2b0f      	cmp	r3, #15
 8001b00:	d813      	bhi.n	8001b2a <HAL_FDCAN_Init+0x19a>
    assert_param(IS_FDCAN_DATA_TSEG1(hfdcan->Init.DataTimeSeg1));
 8001b02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b04:	3b01      	subs	r3, #1
 8001b06:	2b1f      	cmp	r3, #31
 8001b08:	d815      	bhi.n	8001b36 <HAL_FDCAN_Init+0x1a6>
    assert_param(IS_FDCAN_DATA_TSEG2(hfdcan->Init.DataTimeSeg2));
 8001b0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	d981      	bls.n	8001a16 <HAL_FDCAN_Init+0x86>
 8001b12:	f240 113d 	movw	r1, #317	; 0x13d
 8001b16:	4825      	ldr	r0, [pc, #148]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001b18:	f7ff f8ce 	bl	8000cb8 <assert_failed>
 8001b1c:	e77b      	b.n	8001a16 <HAL_FDCAN_Init+0x86>
    assert_param(IS_FDCAN_DATA_PRESCALER(hfdcan->Init.DataPrescaler));
 8001b1e:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8001b22:	4822      	ldr	r0, [pc, #136]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001b24:	f7ff f8c8 	bl	8000cb8 <assert_failed>
 8001b28:	e7e7      	b.n	8001afa <HAL_FDCAN_Init+0x16a>
    assert_param(IS_FDCAN_DATA_SJW(hfdcan->Init.DataSyncJumpWidth));
 8001b2a:	f240 113b 	movw	r1, #315	; 0x13b
 8001b2e:	481f      	ldr	r0, [pc, #124]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001b30:	f7ff f8c2 	bl	8000cb8 <assert_failed>
 8001b34:	e7e5      	b.n	8001b02 <HAL_FDCAN_Init+0x172>
    assert_param(IS_FDCAN_DATA_TSEG1(hfdcan->Init.DataTimeSeg1));
 8001b36:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8001b3a:	481c      	ldr	r0, [pc, #112]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001b3c:	f7ff f8bc 	bl	8000cb8 <assert_failed>
 8001b40:	e7e3      	b.n	8001b0a <HAL_FDCAN_Init+0x17a>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.StdFiltersNbr, SRAMCAN_FLS_NBR));
 8001b42:	f240 113f 	movw	r1, #319	; 0x13f
 8001b46:	4819      	ldr	r0, [pc, #100]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001b48:	f7ff f8b6 	bl	8000cb8 <assert_failed>
 8001b4c:	e767      	b.n	8001a1e <HAL_FDCAN_Init+0x8e>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.ExtFiltersNbr, SRAMCAN_FLE_NBR));
 8001b4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001b52:	4816      	ldr	r0, [pc, #88]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001b54:	f7ff f8b0 	bl	8000cb8 <assert_failed>
 8001b58:	e765      	b.n	8001a26 <HAL_FDCAN_Init+0x96>
  assert_param(IS_FDCAN_TX_FIFO_QUEUE_MODE(hfdcan->Init.TxFifoQueueMode));
 8001b5a:	f240 1141 	movw	r1, #321	; 0x141
 8001b5e:	4813      	ldr	r0, [pc, #76]	; (8001bac <HAL_FDCAN_Init+0x21c>)
 8001b60:	f7ff f8aa 	bl	8000cb8 <assert_failed>
 8001b64:	e765      	b.n	8001a32 <HAL_FDCAN_Init+0xa2>
    hfdcan->Lock = HAL_UNLOCKED;
 8001b66:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7fe fe96 	bl	800089c <HAL_FDCAN_MspInit>
 8001b70:	e764      	b.n	8001a3c <HAL_FDCAN_Init+0xac>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b72:	699a      	ldr	r2, [r3, #24]
 8001b74:	f042 0201 	orr.w	r2, r2, #1
 8001b78:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8001b7a:	f7ff fb6d 	bl	8001258 <HAL_GetTick>
 8001b7e:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	f012 0f01 	tst.w	r2, #1
 8001b88:	d112      	bne.n	8001bb0 <HAL_FDCAN_Init+0x220>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001b8a:	f7ff fb65 	bl	8001258 <HAL_GetTick>
 8001b8e:	1b40      	subs	r0, r0, r5
 8001b90:	280a      	cmp	r0, #10
 8001b92:	d9f5      	bls.n	8001b80 <HAL_FDCAN_Init+0x1f0>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001b94:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	e765      	b.n	8001a72 <HAL_FDCAN_Init+0xe2>
 8001ba6:	bf00      	nop
 8001ba8:	40006400 	.word	0x40006400
 8001bac:	08012ed0 	.word	0x08012ed0
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001bb0:	699a      	ldr	r2, [r3, #24]
 8001bb2:	f042 0202 	orr.w	r2, r2, #2
 8001bb6:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8001bb8:	6822      	ldr	r2, [r4, #0]
 8001bba:	4b50      	ldr	r3, [pc, #320]	; (8001cfc <HAL_FDCAN_Init+0x36c>)
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d042      	beq.n	8001c46 <HAL_FDCAN_Init+0x2b6>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001bc0:	7c23      	ldrb	r3, [r4, #16]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d045      	beq.n	8001c52 <HAL_FDCAN_Init+0x2c2>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001bc6:	6822      	ldr	r2, [r4, #0]
 8001bc8:	6993      	ldr	r3, [r2, #24]
 8001bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bce:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001bd0:	7c63      	ldrb	r3, [r4, #17]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d043      	beq.n	8001c5e <HAL_FDCAN_Init+0x2ce>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001bd6:	6822      	ldr	r2, [r4, #0]
 8001bd8:	6993      	ldr	r3, [r2, #24]
 8001bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bde:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001be0:	7ca3      	ldrb	r3, [r4, #18]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d041      	beq.n	8001c6a <HAL_FDCAN_Init+0x2da>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001be6:	6822      	ldr	r2, [r4, #0]
 8001be8:	6993      	ldr	r3, [r2, #24]
 8001bea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bee:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001bf0:	6822      	ldr	r2, [r4, #0]
 8001bf2:	6993      	ldr	r3, [r2, #24]
 8001bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf8:	68a1      	ldr	r1, [r4, #8]
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001bfe:	6822      	ldr	r2, [r4, #0]
 8001c00:	6993      	ldr	r3, [r2, #24]
 8001c02:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8001c06:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c08:	6822      	ldr	r2, [r4, #0]
 8001c0a:	6913      	ldr	r3, [r2, #16]
 8001c0c:	f023 0310 	bic.w	r3, r3, #16
 8001c10:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001c12:	68e3      	ldr	r3, [r4, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d02e      	beq.n	8001c76 <HAL_FDCAN_Init+0x2e6>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d031      	beq.n	8001c80 <HAL_FDCAN_Init+0x2f0>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d054      	beq.n	8001cca <HAL_FDCAN_Init+0x33a>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001c20:	6822      	ldr	r2, [r4, #0]
 8001c22:	6993      	ldr	r3, [r2, #24]
 8001c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c28:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c2a:	6822      	ldr	r2, [r4, #0]
 8001c2c:	6913      	ldr	r3, [r2, #16]
 8001c2e:	f043 0310 	orr.w	r3, r3, #16
 8001c32:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001c34:	68e3      	ldr	r3, [r4, #12]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d122      	bne.n	8001c80 <HAL_FDCAN_Init+0x2f0>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c3a:	6822      	ldr	r2, [r4, #0]
 8001c3c:	6993      	ldr	r3, [r2, #24]
 8001c3e:	f043 0320 	orr.w	r3, r3, #32
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	e01c      	b.n	8001c80 <HAL_FDCAN_Init+0x2f0>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001c46:	6862      	ldr	r2, [r4, #4]
 8001c48:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001c4c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8001c50:	e7b6      	b.n	8001bc0 <HAL_FDCAN_Init+0x230>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001c52:	6822      	ldr	r2, [r4, #0]
 8001c54:	6993      	ldr	r3, [r2, #24]
 8001c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	e7b8      	b.n	8001bd0 <HAL_FDCAN_Init+0x240>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001c5e:	6822      	ldr	r2, [r4, #0]
 8001c60:	6993      	ldr	r3, [r2, #24]
 8001c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	e7ba      	b.n	8001be0 <HAL_FDCAN_Init+0x250>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c6a:	6822      	ldr	r2, [r4, #0]
 8001c6c:	6993      	ldr	r3, [r2, #24]
 8001c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	e7bc      	b.n	8001bf0 <HAL_FDCAN_Init+0x260>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001c76:	6822      	ldr	r2, [r4, #0]
 8001c78:	6993      	ldr	r3, [r2, #24]
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c80:	69a3      	ldr	r3, [r4, #24]
 8001c82:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001c84:	69e3      	ldr	r3, [r4, #28]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c8a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c8e:	6a22      	ldr	r2, [r4, #32]
 8001c90:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001c92:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001c94:	6962      	ldr	r2, [r4, #20]
 8001c96:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c98:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c9e:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001ca0:	68a3      	ldr	r3, [r4, #8]
 8001ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ca6:	d016      	beq.n	8001cd6 <HAL_FDCAN_Init+0x346>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001ca8:	6822      	ldr	r2, [r4, #0]
 8001caa:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001cae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f7ff fde2 	bl	8001880 <FDCAN_CalcultateRamBlockAddresses>
  hfdcan->LatestTxFifoQRequest = 0U;
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001cc0:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 8001cc8:	e6d3      	b.n	8001a72 <HAL_FDCAN_Init+0xe2>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001cca:	6822      	ldr	r2, [r4, #0]
 8001ccc:	6993      	ldr	r3, [r2, #24]
 8001cce:	f043 0320 	orr.w	r3, r3, #32
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	e7d4      	b.n	8001c80 <HAL_FDCAN_Init+0x2f0>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001cd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cd8:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001cda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cdc:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001cde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001ce2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ce4:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001ce6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001cea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cec:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001cee:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001cf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001cf4:	60cb      	str	r3, [r1, #12]
 8001cf6:	e7d7      	b.n	8001ca8 <HAL_FDCAN_Init+0x318>
    return HAL_ERROR;
 8001cf8:	2001      	movs	r0, #1
}
 8001cfa:	4770      	bx	lr
 8001cfc:	40006400 	.word	0x40006400

08001d00 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001d00:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d005      	beq.n	8001d16 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001d0a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8001d12:	2001      	movs	r0, #1
}
 8001d14:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001d16:	2302      	movs	r3, #2
 8001d18:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001d1c:	6802      	ldr	r2, [r0, #0]
 8001d1e:	6993      	ldr	r3, [r2, #24]
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_OK;
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	4770      	bx	lr

08001d2e <HAL_FDCAN_Stop>:
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001d2e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d139      	bne.n	8001dac <HAL_FDCAN_Stop+0x7e>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001d38:	6802      	ldr	r2, [r0, #0]
 8001d3a:	6993      	ldr	r3, [r2, #24]
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6193      	str	r3, [r2, #24]
  uint32_t Counter = 0U;
 8001d42:	2300      	movs	r3, #0
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001d44:	6802      	ldr	r2, [r0, #0]
 8001d46:	6991      	ldr	r1, [r2, #24]
 8001d48:	f011 0f01 	tst.w	r1, #1
 8001d4c:	d10c      	bne.n	8001d68 <HAL_FDCAN_Stop+0x3a>
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001d4e:	2b0a      	cmp	r3, #10
 8001d50:	d801      	bhi.n	8001d56 <HAL_FDCAN_Stop+0x28>
      Counter++;
 8001d52:	3301      	adds	r3, #1
 8001d54:	e7f6      	b.n	8001d44 <HAL_FDCAN_Stop+0x16>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001d56:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6603      	str	r3, [r0, #96]	; 0x60
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001d64:	2001      	movs	r0, #1
 8001d66:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001d68:	6993      	ldr	r3, [r2, #24]
 8001d6a:	f023 0310 	bic.w	r3, r3, #16
 8001d6e:	6193      	str	r3, [r2, #24]
    Counter = 0U;
 8001d70:	2300      	movs	r3, #0
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001d72:	6802      	ldr	r2, [r0, #0]
 8001d74:	6991      	ldr	r1, [r2, #24]
 8001d76:	f011 0f08 	tst.w	r1, #8
 8001d7a:	d00c      	beq.n	8001d96 <HAL_FDCAN_Stop+0x68>
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001d7c:	2b0a      	cmp	r3, #10
 8001d7e:	d801      	bhi.n	8001d84 <HAL_FDCAN_Stop+0x56>
      Counter++;
 8001d80:	3301      	adds	r3, #1
 8001d82:	e7f6      	b.n	8001d72 <HAL_FDCAN_Stop+0x44>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001d84:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6603      	str	r3, [r0, #96]	; 0x60
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001d92:	2001      	movs	r0, #1
 8001d94:	4770      	bx	lr
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001d96:	6993      	ldr	r3, [r2, #24]
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	6193      	str	r3, [r2, #24]
    hfdcan->LatestTxFifoQRequest = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	6583      	str	r3, [r0, #88]	; 0x58
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8001da2:	2201      	movs	r2, #1
 8001da4:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    return HAL_OK;
 8001da8:	4618      	mov	r0, r3
 8001daa:	4770      	bx	lr
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001dac:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001dae:	f043 0308 	orr.w	r3, r3, #8
 8001db2:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8001db4:	2001      	movs	r0, #1
}
 8001db6:	4770      	bx	lr

08001db8 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8001db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dba:	4605      	mov	r5, r0
 8001dbc:	460c      	mov	r4, r1
 8001dbe:	4616      	mov	r6, r2
  assert_param(IS_FDCAN_ID_TYPE(pTxHeader->IdType));
 8001dc0:	684b      	ldr	r3, [r1, #4]
 8001dc2:	b113      	cbz	r3, 8001dca <HAL_FDCAN_AddMessageToTxFifoQ+0x12>
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc8:	d162      	bne.n	8001e90 <HAL_FDCAN_AddMessageToTxFifoQ+0xd8>
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001dca:	6863      	ldr	r3, [r4, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d16b      	bne.n	8001ea8 <HAL_FDCAN_AddMessageToTxFifoQ+0xf0>
    assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->Identifier, 0x7FFU));
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dd6:	d261      	bcs.n	8001e9c <HAL_FDCAN_AddMessageToTxFifoQ+0xe4>
  assert_param(IS_FDCAN_FRAME_TYPE(pTxHeader->TxFrameType));
 8001dd8:	68a3      	ldr	r3, [r4, #8]
 8001dda:	b113      	cbz	r3, 8001de2 <HAL_FDCAN_AddMessageToTxFifoQ+0x2a>
 8001ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001de0:	d16c      	bne.n	8001ebc <HAL_FDCAN_AddMessageToTxFifoQ+0x104>
  assert_param(IS_FDCAN_DLC(pTxHeader->DataLength));
 8001de2:	68e3      	ldr	r3, [r4, #12]
 8001de4:	b363      	cbz	r3, 8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dea:	d029      	beq.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001df0:	d026      	beq.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001df2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001df6:	d023      	beq.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001df8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dfc:	d020      	beq.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001dfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e02:	d01d      	beq.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001e04:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001e08:	d01a      	beq.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001e0a:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8001e0e:	d017      	beq.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001e10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e14:	d014      	beq.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001e16:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8001e1a:	d011      	beq.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001e1c:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8001e20:	d00e      	beq.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001e22:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8001e26:	d00b      	beq.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001e28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e2c:	d008      	beq.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001e2e:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8001e32:	d005      	beq.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001e34:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e38:	d002      	beq.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001e3a:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8001e3e:	d143      	bne.n	8001ec8 <HAL_FDCAN_AddMessageToTxFifoQ+0x110>
  assert_param(IS_FDCAN_ESI(pTxHeader->ErrorStateIndicator));
 8001e40:	6923      	ldr	r3, [r4, #16]
 8001e42:	b113      	cbz	r3, 8001e4a <HAL_FDCAN_AddMessageToTxFifoQ+0x92>
 8001e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e48:	d144      	bne.n	8001ed4 <HAL_FDCAN_AddMessageToTxFifoQ+0x11c>
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
 8001e4a:	6963      	ldr	r3, [r4, #20]
 8001e4c:	b113      	cbz	r3, 8001e54 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
 8001e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e52:	d145      	bne.n	8001ee0 <HAL_FDCAN_AddMessageToTxFifoQ+0x128>
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
 8001e54:	69a3      	ldr	r3, [r4, #24]
 8001e56:	b113      	cbz	r3, 8001e5e <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
 8001e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e5c:	d146      	bne.n	8001eec <HAL_FDCAN_AddMessageToTxFifoQ+0x134>
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
 8001e5e:	69e3      	ldr	r3, [r4, #28]
 8001e60:	b113      	cbz	r3, 8001e68 <HAL_FDCAN_AddMessageToTxFifoQ+0xb0>
 8001e62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e66:	d147      	bne.n	8001ef8 <HAL_FDCAN_AddMessageToTxFifoQ+0x140>
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));
 8001e68:	6a23      	ldr	r3, [r4, #32]
 8001e6a:	2bff      	cmp	r3, #255	; 0xff
 8001e6c:	d84a      	bhi.n	8001f04 <HAL_FDCAN_AddMessageToTxFifoQ+0x14c>
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001e6e:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d15d      	bne.n	8001f34 <HAL_FDCAN_AddMessageToTxFifoQ+0x17c>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001e78:	682b      	ldr	r3, [r5, #0]
 8001e7a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001e7e:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8001e82:	d045      	beq.n	8001f10 <HAL_FDCAN_AddMessageToTxFifoQ+0x158>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001e84:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8a:	662b      	str	r3, [r5, #96]	; 0x60
      return HAL_ERROR;
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	e056      	b.n	8001f3e <HAL_FDCAN_AddMessageToTxFifoQ+0x186>
  assert_param(IS_FDCAN_ID_TYPE(pTxHeader->IdType));
 8001e90:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001e94:	482a      	ldr	r0, [pc, #168]	; (8001f40 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e96:	f7fe ff0f 	bl	8000cb8 <assert_failed>
 8001e9a:	e796      	b.n	8001dca <HAL_FDCAN_AddMessageToTxFifoQ+0x12>
    assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->Identifier, 0x7FFU));
 8001e9c:	f640 0143 	movw	r1, #2115	; 0x843
 8001ea0:	4827      	ldr	r0, [pc, #156]	; (8001f40 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001ea2:	f7fe ff09 	bl	8000cb8 <assert_failed>
 8001ea6:	e797      	b.n	8001dd8 <HAL_FDCAN_AddMessageToTxFifoQ+0x20>
    assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->Identifier, 0x1FFFFFFFU));
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eae:	d393      	bcc.n	8001dd8 <HAL_FDCAN_AddMessageToTxFifoQ+0x20>
 8001eb0:	f640 0147 	movw	r1, #2119	; 0x847
 8001eb4:	4822      	ldr	r0, [pc, #136]	; (8001f40 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001eb6:	f7fe feff 	bl	8000cb8 <assert_failed>
 8001eba:	e78d      	b.n	8001dd8 <HAL_FDCAN_AddMessageToTxFifoQ+0x20>
  assert_param(IS_FDCAN_FRAME_TYPE(pTxHeader->TxFrameType));
 8001ebc:	f640 0149 	movw	r1, #2121	; 0x849
 8001ec0:	481f      	ldr	r0, [pc, #124]	; (8001f40 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001ec2:	f7fe fef9 	bl	8000cb8 <assert_failed>
 8001ec6:	e78c      	b.n	8001de2 <HAL_FDCAN_AddMessageToTxFifoQ+0x2a>
  assert_param(IS_FDCAN_DLC(pTxHeader->DataLength));
 8001ec8:	f640 014a 	movw	r1, #2122	; 0x84a
 8001ecc:	481c      	ldr	r0, [pc, #112]	; (8001f40 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001ece:	f7fe fef3 	bl	8000cb8 <assert_failed>
 8001ed2:	e7b5      	b.n	8001e40 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
  assert_param(IS_FDCAN_ESI(pTxHeader->ErrorStateIndicator));
 8001ed4:	f640 014b 	movw	r1, #2123	; 0x84b
 8001ed8:	4819      	ldr	r0, [pc, #100]	; (8001f40 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001eda:	f7fe feed 	bl	8000cb8 <assert_failed>
 8001ede:	e7b4      	b.n	8001e4a <HAL_FDCAN_AddMessageToTxFifoQ+0x92>
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
 8001ee0:	f640 014c 	movw	r1, #2124	; 0x84c
 8001ee4:	4816      	ldr	r0, [pc, #88]	; (8001f40 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001ee6:	f7fe fee7 	bl	8000cb8 <assert_failed>
 8001eea:	e7b3      	b.n	8001e54 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
 8001eec:	f640 014d 	movw	r1, #2125	; 0x84d
 8001ef0:	4813      	ldr	r0, [pc, #76]	; (8001f40 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001ef2:	f7fe fee1 	bl	8000cb8 <assert_failed>
 8001ef6:	e7b2      	b.n	8001e5e <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
 8001ef8:	f640 014e 	movw	r1, #2126	; 0x84e
 8001efc:	4810      	ldr	r0, [pc, #64]	; (8001f40 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001efe:	f7fe fedb 	bl	8000cb8 <assert_failed>
 8001f02:	e7b1      	b.n	8001e68 <HAL_FDCAN_AddMessageToTxFifoQ+0xb0>
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));
 8001f04:	f640 014f 	movw	r1, #2127	; 0x84f
 8001f08:	480d      	ldr	r0, [pc, #52]	; (8001f40 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001f0a:	f7fe fed5 	bl	8000cb8 <assert_failed>
 8001f0e:	e7ae      	b.n	8001e6e <HAL_FDCAN_AddMessageToTxFifoQ+0xb6>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001f10:	f8d3 70c4 	ldr.w	r7, [r3, #196]	; 0xc4
 8001f14:	f3c7 4701 	ubfx	r7, r7, #16, #2
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001f18:	463b      	mov	r3, r7
 8001f1a:	4632      	mov	r2, r6
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	4628      	mov	r0, r5
 8001f20:	f7ff fcf4 	bl	800190c <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001f24:	682a      	ldr	r2, [r5, #0]
 8001f26:	2301      	movs	r3, #1
 8001f28:	40bb      	lsls	r3, r7
 8001f2a:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001f2e:	65ab      	str	r3, [r5, #88]	; 0x58
    return HAL_OK;
 8001f30:	2000      	movs	r0, #0
 8001f32:	e004      	b.n	8001f3e <HAL_FDCAN_AddMessageToTxFifoQ+0x186>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001f34:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001f36:	f043 0308 	orr.w	r3, r3, #8
 8001f3a:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_ERROR;
 8001f3c:	2001      	movs	r0, #1
}
 8001f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f40:	08012ed0 	.word	0x08012ed0

08001f44 <HAL_FDCAN_GetRxMessage>:
{
 8001f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f48:	4605      	mov	r5, r0
 8001f4a:	460f      	mov	r7, r1
 8001f4c:	4614      	mov	r4, r2
 8001f4e:	461e      	mov	r6, r3
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001f50:	f890 805c 	ldrb.w	r8, [r0, #92]	; 0x5c
 8001f54:	fa5f f888 	uxtb.w	r8, r8
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));
 8001f58:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d810      	bhi.n	8001f82 <HAL_FDCAN_GetRxMessage+0x3e>
  if (state == HAL_FDCAN_STATE_BUSY)
 8001f60:	f1b8 0f02 	cmp.w	r8, #2
 8001f64:	d177      	bne.n	8002056 <HAL_FDCAN_GetRxMessage+0x112>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001f66:	2f40      	cmp	r7, #64	; 0x40
 8001f68:	d011      	beq.n	8001f8e <HAL_FDCAN_GetRxMessage+0x4a>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001f6a:	682b      	ldr	r3, [r5, #0]
 8001f6c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001f70:	f012 0f0f 	tst.w	r2, #15
 8001f74:	d121      	bne.n	8001fba <HAL_FDCAN_GetRxMessage+0x76>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001f76:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7c:	662b      	str	r3, [r5, #96]	; 0x60
        return HAL_ERROR;
 8001f7e:	2001      	movs	r0, #1
 8001f80:	e06e      	b.n	8002060 <HAL_FDCAN_GetRxMessage+0x11c>
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));
 8001f82:	f640 01b6 	movw	r1, #2230	; 0x8b6
 8001f86:	4837      	ldr	r0, [pc, #220]	; (8002064 <HAL_FDCAN_GetRxMessage+0x120>)
 8001f88:	f7fe fe96 	bl	8000cb8 <assert_failed>
 8001f8c:	e7e8      	b.n	8001f60 <HAL_FDCAN_GetRxMessage+0x1c>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001f8e:	682b      	ldr	r3, [r5, #0]
 8001f90:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001f94:	f012 0f0f 	tst.w	r2, #15
 8001f98:	d105      	bne.n	8001fa6 <HAL_FDCAN_GetRxMessage+0x62>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001f9a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	662b      	str	r3, [r5, #96]	; 0x60
        return HAL_ERROR;
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	e05c      	b.n	8002060 <HAL_FDCAN_GetRxMessage+0x11c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001fa6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001faa:	f3c0 2001 	ubfx	r0, r0, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001fae:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8001fb0:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8001fb4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001fb8:	e008      	b.n	8001fcc <HAL_FDCAN_GetRxMessage+0x88>
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001fba:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001fbe:	f3c0 2001 	ubfx	r0, r0, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001fc2:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8001fc4:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8001fc8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001fcc:	6813      	ldr	r3, [r2, #0]
 8001fce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fd2:	6063      	str	r3, [r4, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001fd4:	bb23      	cbnz	r3, 8002020 <HAL_FDCAN_GetRxMessage+0xdc>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	f3c3 438a 	ubfx	r3, r3, #18, #11
 8001fdc:	6023      	str	r3, [r4, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001fde:	6813      	ldr	r3, [r2, #0]
 8001fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fe4:	60a3      	str	r3, [r4, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001fe6:	6813      	ldr	r3, [r2, #0]
 8001fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fec:	6123      	str	r3, [r4, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001fee:	8893      	ldrh	r3, [r2, #4]
 8001ff0:	61e3      	str	r3, [r4, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001ff2:	6853      	ldr	r3, [r2, #4]
 8001ff4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ff8:	60e3      	str	r3, [r4, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001ffa:	6853      	ldr	r3, [r2, #4]
 8001ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002000:	6163      	str	r3, [r4, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002002:	6853      	ldr	r3, [r2, #4]
 8002004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002008:	61a3      	str	r3, [r4, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800200a:	79d3      	ldrb	r3, [r2, #7]
 800200c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002010:	6223      	str	r3, [r4, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002012:	6853      	ldr	r3, [r2, #4]
 8002014:	0fdb      	lsrs	r3, r3, #31
 8002016:	6263      	str	r3, [r4, #36]	; 0x24
    RxAddress++;
 8002018:	3208      	adds	r2, #8
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800201a:	f04f 0c00 	mov.w	ip, #0
 800201e:	e00a      	b.n	8002036 <HAL_FDCAN_GetRxMessage+0xf2>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002020:	6813      	ldr	r3, [r2, #0]
 8002022:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002026:	6023      	str	r3, [r4, #0]
 8002028:	e7d9      	b.n	8001fde <HAL_FDCAN_GetRxMessage+0x9a>
      pRxData[ByteCounter] = pData[ByteCounter];
 800202a:	f812 300c 	ldrb.w	r3, [r2, ip]
 800202e:	f806 300c 	strb.w	r3, [r6, ip]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002032:	f10c 0c01 	add.w	ip, ip, #1
 8002036:	89e3      	ldrh	r3, [r4, #14]
 8002038:	490b      	ldr	r1, [pc, #44]	; (8002068 <HAL_FDCAN_GetRxMessage+0x124>)
 800203a:	5ccb      	ldrb	r3, [r1, r3]
 800203c:	4563      	cmp	r3, ip
 800203e:	d8f4      	bhi.n	800202a <HAL_FDCAN_GetRxMessage+0xe6>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002040:	2f40      	cmp	r7, #64	; 0x40
 8002042:	d004      	beq.n	800204e <HAL_FDCAN_GetRxMessage+0x10a>
      hfdcan->Instance->RXF1A = GetIndex;
 8002044:	682b      	ldr	r3, [r5, #0]
 8002046:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    return HAL_OK;
 800204a:	2000      	movs	r0, #0
 800204c:	e008      	b.n	8002060 <HAL_FDCAN_GetRxMessage+0x11c>
      hfdcan->Instance->RXF0A = GetIndex;
 800204e:	682b      	ldr	r3, [r5, #0]
 8002050:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 8002054:	e7f9      	b.n	800204a <HAL_FDCAN_GetRxMessage+0x106>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002056:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_ERROR;
 800205e:	2001      	movs	r0, #1
}
 8002060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002064:	08012ed0 	.word	0x08012ed0
 8002068:	08012f0c 	.word	0x08012f0c

0800206c <HAL_FDCAN_ActivateNotification>:
{
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	4606      	mov	r6, r0
 8002070:	460c      	mov	r4, r1
 8002072:	4617      	mov	r7, r2
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002074:	f890 505c 	ldrb.w	r5, [r0, #92]	; 0x5c
 8002078:	b2ed      	uxtb	r5, r5
  assert_param(IS_FDCAN_IT(ActiveITs));
 800207a:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 800207e:	d10f      	bne.n	80020a0 <HAL_FDCAN_ActivateNotification+0x34>
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
 8002080:	f414 7fc0 	tst.w	r4, #384	; 0x180
 8002084:	d002      	beq.n	800208c <HAL_FDCAN_ActivateNotification+0x20>
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
 8002086:	1e7b      	subs	r3, r7, #1
 8002088:	2b06      	cmp	r3, #6
 800208a:	d80f      	bhi.n	80020ac <HAL_FDCAN_ActivateNotification+0x40>
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800208c:	3d01      	subs	r5, #1
 800208e:	b2ed      	uxtb	r5, r5
 8002090:	2d01      	cmp	r5, #1
 8002092:	d911      	bls.n	80020b8 <HAL_FDCAN_ActivateNotification+0x4c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002094:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	6633      	str	r3, [r6, #96]	; 0x60
    return HAL_ERROR;
 800209c:	2001      	movs	r0, #1
}
 800209e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FDCAN_IT(ActiveITs));
 80020a0:	f640 2189 	movw	r1, #2697	; 0xa89
 80020a4:	483f      	ldr	r0, [pc, #252]	; (80021a4 <HAL_FDCAN_ActivateNotification+0x138>)
 80020a6:	f7fe fe07 	bl	8000cb8 <assert_failed>
 80020aa:	e7e9      	b.n	8002080 <HAL_FDCAN_ActivateNotification+0x14>
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
 80020ac:	f640 218c 	movw	r1, #2700	; 0xa8c
 80020b0:	483c      	ldr	r0, [pc, #240]	; (80021a4 <HAL_FDCAN_ActivateNotification+0x138>)
 80020b2:	f7fe fe01 	bl	8000cb8 <assert_failed>
 80020b6:	e7e9      	b.n	800208c <HAL_FDCAN_ActivateNotification+0x20>
    ITs_lines_selection = hfdcan->Instance->ILS;
 80020b8:	6832      	ldr	r2, [r6, #0]
 80020ba:	6d93      	ldr	r3, [r2, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80020bc:	f014 0007 	ands.w	r0, r4, #7
 80020c0:	d002      	beq.n	80020c8 <HAL_FDCAN_ActivateNotification+0x5c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80020c2:	f013 0f01 	tst.w	r3, #1
 80020c6:	d023      	beq.n	8002110 <HAL_FDCAN_ActivateNotification+0xa4>
 80020c8:	f014 0f38 	tst.w	r4, #56	; 0x38
 80020cc:	d002      	beq.n	80020d4 <HAL_FDCAN_ActivateNotification+0x68>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80020ce:	f013 0f02 	tst.w	r3, #2
 80020d2:	d01d      	beq.n	8002110 <HAL_FDCAN_ActivateNotification+0xa4>
 80020d4:	f414 7fe0 	tst.w	r4, #448	; 0x1c0
 80020d8:	d002      	beq.n	80020e0 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80020da:	f013 0f04 	tst.w	r3, #4
 80020de:	d017      	beq.n	8002110 <HAL_FDCAN_ActivateNotification+0xa4>
 80020e0:	f414 5ff0 	tst.w	r4, #7680	; 0x1e00
 80020e4:	d002      	beq.n	80020ec <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80020e6:	f013 0f08 	tst.w	r3, #8
 80020ea:	d011      	beq.n	8002110 <HAL_FDCAN_ActivateNotification+0xa4>
 80020ec:	f414 4f60 	tst.w	r4, #57344	; 0xe000
 80020f0:	d002      	beq.n	80020f8 <HAL_FDCAN_ActivateNotification+0x8c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80020f2:	f013 0f10 	tst.w	r3, #16
 80020f6:	d00b      	beq.n	8002110 <HAL_FDCAN_ActivateNotification+0xa4>
 80020f8:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80020fc:	d002      	beq.n	8002104 <HAL_FDCAN_ActivateNotification+0x98>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80020fe:	f013 0f20 	tst.w	r3, #32
 8002102:	d005      	beq.n	8002110 <HAL_FDCAN_ActivateNotification+0xa4>
 8002104:	f414 0f7c 	tst.w	r4, #16515072	; 0xfc0000
 8002108:	d006      	beq.n	8002118 <HAL_FDCAN_ActivateNotification+0xac>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800210a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800210e:	d103      	bne.n	8002118 <HAL_FDCAN_ActivateNotification+0xac>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002110:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8002112:	f041 0101 	orr.w	r1, r1, #1
 8002116:	65d1      	str	r1, [r2, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002118:	b110      	cbz	r0, 8002120 <HAL_FDCAN_ActivateNotification+0xb4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800211a:	f013 0f01 	tst.w	r3, #1
 800211e:	d123      	bne.n	8002168 <HAL_FDCAN_ActivateNotification+0xfc>
 8002120:	f014 0f38 	tst.w	r4, #56	; 0x38
 8002124:	d002      	beq.n	800212c <HAL_FDCAN_ActivateNotification+0xc0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002126:	f013 0f02 	tst.w	r3, #2
 800212a:	d11d      	bne.n	8002168 <HAL_FDCAN_ActivateNotification+0xfc>
 800212c:	f414 7fe0 	tst.w	r4, #448	; 0x1c0
 8002130:	d002      	beq.n	8002138 <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002132:	f013 0f04 	tst.w	r3, #4
 8002136:	d117      	bne.n	8002168 <HAL_FDCAN_ActivateNotification+0xfc>
 8002138:	f414 5ff0 	tst.w	r4, #7680	; 0x1e00
 800213c:	d002      	beq.n	8002144 <HAL_FDCAN_ActivateNotification+0xd8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800213e:	f013 0f08 	tst.w	r3, #8
 8002142:	d111      	bne.n	8002168 <HAL_FDCAN_ActivateNotification+0xfc>
 8002144:	f414 4f60 	tst.w	r4, #57344	; 0xe000
 8002148:	d002      	beq.n	8002150 <HAL_FDCAN_ActivateNotification+0xe4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800214a:	f013 0f10 	tst.w	r3, #16
 800214e:	d10b      	bne.n	8002168 <HAL_FDCAN_ActivateNotification+0xfc>
 8002150:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002154:	d002      	beq.n	800215c <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002156:	f013 0f20 	tst.w	r3, #32
 800215a:	d105      	bne.n	8002168 <HAL_FDCAN_ActivateNotification+0xfc>
 800215c:	f414 0f7c 	tst.w	r4, #16515072	; 0xfc0000
 8002160:	d007      	beq.n	8002172 <HAL_FDCAN_ActivateNotification+0x106>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002162:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002166:	d004      	beq.n	8002172 <HAL_FDCAN_ActivateNotification+0x106>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002168:	6832      	ldr	r2, [r6, #0]
 800216a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	65d3      	str	r3, [r2, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002172:	f014 0f80 	tst.w	r4, #128	; 0x80
 8002176:	d005      	beq.n	8002184 <HAL_FDCAN_ActivateNotification+0x118>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002178:	6832      	ldr	r2, [r6, #0]
 800217a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 800217e:	433b      	orrs	r3, r7
 8002180:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002184:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002188:	d005      	beq.n	8002196 <HAL_FDCAN_ActivateNotification+0x12a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800218a:	6832      	ldr	r2, [r6, #0]
 800218c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8002190:	433b      	orrs	r3, r7
 8002192:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002196:	6832      	ldr	r2, [r6, #0]
 8002198:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800219a:	4323      	orrs	r3, r4
 800219c:	6553      	str	r3, [r2, #84]	; 0x54
    return HAL_OK;
 800219e:	2000      	movs	r0, #0
 80021a0:	e77d      	b.n	800209e <HAL_FDCAN_ActivateNotification+0x32>
 80021a2:	bf00      	nop
 80021a4:	08012ed0 	.word	0x08012ed0

080021a8 <HAL_FDCAN_TxEventFifoCallback>:
}
 80021a8:	4770      	bx	lr

080021aa <HAL_FDCAN_RxFifo1Callback>:
}
 80021aa:	4770      	bx	lr

080021ac <HAL_FDCAN_TxFifoEmptyCallback>:
}
 80021ac:	4770      	bx	lr

080021ae <HAL_FDCAN_TxBufferCompleteCallback>:
}
 80021ae:	4770      	bx	lr

080021b0 <HAL_FDCAN_TxBufferAbortCallback>:
}
 80021b0:	4770      	bx	lr

080021b2 <HAL_FDCAN_TimestampWraparoundCallback>:
}
 80021b2:	4770      	bx	lr

080021b4 <HAL_FDCAN_TimeoutOccurredCallback>:
}
 80021b4:	4770      	bx	lr

080021b6 <HAL_FDCAN_HighPriorityMessageCallback>:
}
 80021b6:	4770      	bx	lr

080021b8 <HAL_FDCAN_ErrorCallback>:
}
 80021b8:	4770      	bx	lr

080021ba <HAL_FDCAN_ErrorStatusCallback>:
}
 80021ba:	4770      	bx	lr

080021bc <HAL_FDCAN_IRQHandler>:
{
 80021bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021c0:	4604      	mov	r4, r0
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80021c2:	6803      	ldr	r3, [r0, #0]
 80021c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021c6:	f402 59e0 	and.w	r9, r2, #7168	; 0x1c00
  TxEventFifoITs &= hfdcan->Instance->IE;
 80021ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021cc:	ea09 0902 	and.w	r9, r9, r2
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80021d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021d2:	f002 0807 	and.w	r8, r2, #7
  RxFifo0ITs &= hfdcan->Instance->IE;
 80021d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021d8:	ea08 0802 	and.w	r8, r8, r2
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80021dc:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 80021de:	f007 0738 	and.w	r7, r7, #56	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80021e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021e4:	4017      	ands	r7, r2
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80021e6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80021e8:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  Errors &= hfdcan->Instance->IE;
 80021ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021ee:	4015      	ands	r5, r2
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80021f0:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80021f2:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  ErrorStatusITs &= hfdcan->Instance->IE;
 80021f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021f8:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80021fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002200:	d003      	beq.n	800220a <HAL_FDCAN_IRQHandler+0x4e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002202:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002204:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002208:	d151      	bne.n	80022ae <HAL_FDCAN_IRQHandler+0xf2>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800220e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002212:	d003      	beq.n	800221c <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002216:	f412 7f80 	tst.w	r2, #256	; 0x100
 800221a:	d14d      	bne.n	80022b8 <HAL_FDCAN_IRQHandler+0xfc>
  if (TxEventFifoITs != 0U)
 800221c:	f1b9 0f00 	cmp.w	r9, #0
 8002220:	d156      	bne.n	80022d0 <HAL_FDCAN_IRQHandler+0x114>
  if (RxFifo0ITs != 0U)
 8002222:	f1b8 0f00 	cmp.w	r8, #0
 8002226:	d15b      	bne.n	80022e0 <HAL_FDCAN_IRQHandler+0x124>
  if (RxFifo1ITs != 0U)
 8002228:	2f00      	cmp	r7, #0
 800222a:	d161      	bne.n	80022f0 <HAL_FDCAN_IRQHandler+0x134>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800222c:	6823      	ldr	r3, [r4, #0]
 800222e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002230:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002234:	d003      	beq.n	800223e <HAL_FDCAN_IRQHandler+0x82>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002236:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002238:	f412 7f00 	tst.w	r2, #512	; 0x200
 800223c:	d15f      	bne.n	80022fe <HAL_FDCAN_IRQHandler+0x142>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002242:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002246:	d003      	beq.n	8002250 <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800224a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800224e:	d15d      	bne.n	800230c <HAL_FDCAN_IRQHandler+0x150>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002254:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002258:	d003      	beq.n	8002262 <HAL_FDCAN_IRQHandler+0xa6>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800225a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800225c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002260:	d15f      	bne.n	8002322 <HAL_FDCAN_IRQHandler+0x166>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002266:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800226a:	d003      	beq.n	8002274 <HAL_FDCAN_IRQHandler+0xb8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800226c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800226e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002272:	d15d      	bne.n	8002330 <HAL_FDCAN_IRQHandler+0x174>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002278:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800227c:	d00a      	beq.n	8002294 <HAL_FDCAN_IRQHandler+0xd8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800227e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002280:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002284:	d006      	beq.n	8002294 <HAL_FDCAN_IRQHandler+0xd8>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002286:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800228a:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800228c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800228e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002292:	6623      	str	r3, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8002294:	2e00      	cmp	r6, #0
 8002296:	d152      	bne.n	800233e <HAL_FDCAN_IRQHandler+0x182>
  if (Errors != 0U)
 8002298:	b125      	cbz	r5, 80022a4 <HAL_FDCAN_IRQHandler+0xe8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 800229e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80022a0:	432b      	orrs	r3, r5
 80022a2:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80022a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d150      	bne.n	800234c <HAL_FDCAN_IRQHandler+0x190>
}
 80022aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80022ae:	2240      	movs	r2, #64	; 0x40
 80022b0:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80022b2:	f7ff ff80 	bl	80021b6 <HAL_FDCAN_HighPriorityMessageCallback>
 80022b6:	e7a8      	b.n	800220a <HAL_FDCAN_IRQHandler+0x4e>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80022b8:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80022bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80022c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022c4:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80022c6:	4011      	ands	r1, r2
 80022c8:	4620      	mov	r0, r4
 80022ca:	f7ff ff71 	bl	80021b0 <HAL_FDCAN_TxBufferAbortCallback>
 80022ce:	e7a5      	b.n	800221c <HAL_FDCAN_IRQHandler+0x60>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80022d6:	4649      	mov	r1, r9
 80022d8:	4620      	mov	r0, r4
 80022da:	f7ff ff65 	bl	80021a8 <HAL_FDCAN_TxEventFifoCallback>
 80022de:	e7a0      	b.n	8002222 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80022e6:	4641      	mov	r1, r8
 80022e8:	4620      	mov	r0, r4
 80022ea:	f00e f82b 	bl	8010344 <HAL_FDCAN_RxFifo0Callback>
 80022ee:	e79b      	b.n	8002228 <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80022f4:	4639      	mov	r1, r7
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7ff ff57 	bl	80021aa <HAL_FDCAN_RxFifo1Callback>
 80022fc:	e796      	b.n	800222c <HAL_FDCAN_IRQHandler+0x70>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80022fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002302:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002304:	4620      	mov	r0, r4
 8002306:	f7ff ff51 	bl	80021ac <HAL_FDCAN_TxFifoEmptyCallback>
 800230a:	e798      	b.n	800223e <HAL_FDCAN_IRQHandler+0x82>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800230c:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002310:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002314:	2080      	movs	r0, #128	; 0x80
 8002316:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002318:	4011      	ands	r1, r2
 800231a:	4620      	mov	r0, r4
 800231c:	f7ff ff47 	bl	80021ae <HAL_FDCAN_TxBufferCompleteCallback>
 8002320:	e796      	b.n	8002250 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002326:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002328:	4620      	mov	r0, r4
 800232a:	f7ff ff42 	bl	80021b2 <HAL_FDCAN_TimestampWraparoundCallback>
 800232e:	e798      	b.n	8002262 <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002330:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002334:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002336:	4620      	mov	r0, r4
 8002338:	f7ff ff3c 	bl	80021b4 <HAL_FDCAN_TimeoutOccurredCallback>
 800233c:	e79a      	b.n	8002274 <HAL_FDCAN_IRQHandler+0xb8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002342:	4631      	mov	r1, r6
 8002344:	4620      	mov	r0, r4
 8002346:	f7ff ff38 	bl	80021ba <HAL_FDCAN_ErrorStatusCallback>
 800234a:	e7a5      	b.n	8002298 <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 800234c:	4620      	mov	r0, r4
 800234e:	f7ff ff33 	bl	80021b8 <HAL_FDCAN_ErrorCallback>
}
 8002352:	e7aa      	b.n	80022aa <HAL_FDCAN_IRQHandler+0xee>

08002354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	4680      	mov	r8, r0
 800235c:	460c      	mov	r4, r1
  uint32_t position = 0x00U;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800235e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002362:	d01a      	beq.n	800239a <HAL_GPIO_Init+0x46>
 8002364:	4baa      	ldr	r3, [pc, #680]	; (8002610 <HAL_GPIO_Init+0x2bc>)
 8002366:	4298      	cmp	r0, r3
 8002368:	d017      	beq.n	800239a <HAL_GPIO_Init+0x46>
 800236a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800236e:	4298      	cmp	r0, r3
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0x46>
 8002372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002376:	4298      	cmp	r0, r3
 8002378:	d00f      	beq.n	800239a <HAL_GPIO_Init+0x46>
 800237a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800237e:	4298      	cmp	r0, r3
 8002380:	d00b      	beq.n	800239a <HAL_GPIO_Init+0x46>
 8002382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002386:	4298      	cmp	r0, r3
 8002388:	d007      	beq.n	800239a <HAL_GPIO_Init+0x46>
 800238a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800238e:	4298      	cmp	r0, r3
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x46>
 8002392:	21a9      	movs	r1, #169	; 0xa9
 8002394:	489f      	ldr	r0, [pc, #636]	; (8002614 <HAL_GPIO_Init+0x2c0>)
 8002396:	f7fe fc8f 	bl	8000cb8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	b29a      	uxth	r2, r3
 800239e:	b112      	cbz	r2, 80023a6 <HAL_GPIO_Init+0x52>
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	041b      	lsls	r3, r3, #16
 80023a4:	b11b      	cbz	r3, 80023ae <HAL_GPIO_Init+0x5a>
 80023a6:	21aa      	movs	r1, #170	; 0xaa
 80023a8:	489a      	ldr	r0, [pc, #616]	; (8002614 <HAL_GPIO_Init+0x2c0>)
 80023aa:	f7fe fc85 	bl	8000cb8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80023ae:	6863      	ldr	r3, [r4, #4]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d910      	bls.n	80023d6 <HAL_GPIO_Init+0x82>
 80023b4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_Init+0x82>
 80023ba:	d811      	bhi.n	80023e0 <HAL_GPIO_Init+0x8c>
 80023bc:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80023c0:	d009      	beq.n	80023d6 <HAL_GPIO_Init+0x82>
 80023c2:	d903      	bls.n	80023cc <HAL_GPIO_Init+0x78>
 80023c4:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80023c8:	d005      	beq.n	80023d6 <HAL_GPIO_Init+0x82>
 80023ca:	e012      	b.n	80023f2 <HAL_GPIO_Init+0x9e>
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d904      	bls.n	80023da <HAL_GPIO_Init+0x86>
 80023d0:	3b11      	subs	r3, #17
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d80d      	bhi.n	80023f2 <HAL_GPIO_Init+0x9e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023d6:	2500      	movs	r5, #0
 80023d8:	e0a3      	b.n	8002522 <HAL_GPIO_Init+0x1ce>
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d309      	bcc.n	80023f2 <HAL_GPIO_Init+0x9e>
 80023de:	e7fa      	b.n	80023d6 <HAL_GPIO_Init+0x82>
 80023e0:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80023e4:	d0f7      	beq.n	80023d6 <HAL_GPIO_Init+0x82>
 80023e6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80023ea:	d0f4      	beq.n	80023d6 <HAL_GPIO_Init+0x82>
 80023ec:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80023f0:	d0f1      	beq.n	80023d6 <HAL_GPIO_Init+0x82>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80023f2:	21ab      	movs	r1, #171	; 0xab
 80023f4:	4887      	ldr	r0, [pc, #540]	; (8002614 <HAL_GPIO_Init+0x2c0>)
 80023f6:	f7fe fc5f 	bl	8000cb8 <assert_failed>
 80023fa:	e7ec      	b.n	80023d6 <HAL_GPIO_Init+0x82>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80023fc:	68e3      	ldr	r3, [r4, #12]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d817      	bhi.n	8002432 <HAL_GPIO_Init+0xde>
        temp = GPIOx->OSPEEDR;
 8002402:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002406:	0069      	lsls	r1, r5, #1
 8002408:	2303      	movs	r3, #3
 800240a:	408b      	lsls	r3, r1
 800240c:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002410:	68e3      	ldr	r3, [r4, #12]
 8002412:	408b      	lsls	r3, r1
 8002414:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8002416:	f8c8 3008 	str.w	r3, [r8, #8]
        temp = GPIOx->OTYPER;
 800241a:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800241e:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002422:	6863      	ldr	r3, [r4, #4]
 8002424:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002428:	40ab      	lsls	r3, r5
 800242a:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 800242c:	f8c8 3004 	str.w	r3, [r8, #4]
 8002430:	e086      	b.n	8002540 <HAL_GPIO_Init+0x1ec>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002432:	21bb      	movs	r1, #187	; 0xbb
 8002434:	4877      	ldr	r0, [pc, #476]	; (8002614 <HAL_GPIO_Init+0x2c0>)
 8002436:	f7fe fc3f 	bl	8000cb8 <assert_failed>
 800243a:	e7e2      	b.n	8002402 <HAL_GPIO_Init+0xae>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800243c:	21cc      	movs	r1, #204	; 0xcc
 800243e:	4875      	ldr	r0, [pc, #468]	; (8002614 <HAL_GPIO_Init+0x2c0>)
 8002440:	f7fe fc3a 	bl	8000cb8 <assert_failed>
 8002444:	e085      	b.n	8002552 <HAL_GPIO_Init+0x1fe>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002446:	f1b8 4f90 	cmp.w	r8, #1207959552	; 0x48000000
 800244a:	d01a      	beq.n	8002482 <HAL_GPIO_Init+0x12e>
 800244c:	4b70      	ldr	r3, [pc, #448]	; (8002610 <HAL_GPIO_Init+0x2bc>)
 800244e:	4598      	cmp	r8, r3
 8002450:	d017      	beq.n	8002482 <HAL_GPIO_Init+0x12e>
 8002452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002456:	4598      	cmp	r8, r3
 8002458:	d013      	beq.n	8002482 <HAL_GPIO_Init+0x12e>
 800245a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800245e:	4598      	cmp	r8, r3
 8002460:	d00f      	beq.n	8002482 <HAL_GPIO_Init+0x12e>
 8002462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002466:	4598      	cmp	r8, r3
 8002468:	d00b      	beq.n	8002482 <HAL_GPIO_Init+0x12e>
 800246a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800246e:	4598      	cmp	r8, r3
 8002470:	d007      	beq.n	8002482 <HAL_GPIO_Init+0x12e>
 8002472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002476:	4598      	cmp	r8, r3
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x12e>
 800247a:	21d9      	movs	r1, #217	; 0xd9
 800247c:	4865      	ldr	r0, [pc, #404]	; (8002614 <HAL_GPIO_Init+0x2c0>)
 800247e:	f7fe fc1b 	bl	8000cb8 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002482:	6923      	ldr	r3, [r4, #16]
 8002484:	2b0f      	cmp	r3, #15
 8002486:	d810      	bhi.n	80024aa <HAL_GPIO_Init+0x156>
        temp = GPIOx->AFR[position >> 3U];
 8002488:	08ea      	lsrs	r2, r5, #3
 800248a:	3208      	adds	r2, #8
 800248c:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002490:	f005 0107 	and.w	r1, r5, #7
 8002494:	0089      	lsls	r1, r1, #2
 8002496:	230f      	movs	r3, #15
 8002498:	408b      	lsls	r3, r1
 800249a:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800249e:	6923      	ldr	r3, [r4, #16]
 80024a0:	408b      	lsls	r3, r1
 80024a2:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3U] = temp;
 80024a4:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 80024a8:	e065      	b.n	8002576 <HAL_GPIO_Init+0x222>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80024aa:	21da      	movs	r1, #218	; 0xda
 80024ac:	4859      	ldr	r0, [pc, #356]	; (8002614 <HAL_GPIO_Init+0x2c0>)
 80024ae:	f7fe fc03 	bl	8000cb8 <assert_failed>
 80024b2:	e7e9      	b.n	8002488 <HAL_GPIO_Init+0x134>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024b4:	2305      	movs	r3, #5
 80024b6:	e000      	b.n	80024ba <HAL_GPIO_Init+0x166>
 80024b8:	2300      	movs	r3, #0
 80024ba:	408b      	lsls	r3, r1
 80024bc:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024be:	3202      	adds	r2, #2
 80024c0:	4955      	ldr	r1, [pc, #340]	; (8002618 <HAL_GPIO_Init+0x2c4>)
 80024c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024c6:	4b55      	ldr	r3, [pc, #340]	; (800261c <HAL_GPIO_Init+0x2c8>)
 80024c8:	689a      	ldr	r2, [r3, #8]
        temp &= ~(iocurrent);
 80024ca:	43f3      	mvns	r3, r6
 80024cc:	ea22 0106 	bic.w	r1, r2, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d0:	6860      	ldr	r0, [r4, #4]
 80024d2:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80024d6:	d001      	beq.n	80024dc <HAL_GPIO_Init+0x188>
        {
          temp |= iocurrent;
 80024d8:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->RTSR1 = temp;
 80024dc:	4a4f      	ldr	r2, [pc, #316]	; (800261c <HAL_GPIO_Init+0x2c8>)
 80024de:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR1;
 80024e0:	68d2      	ldr	r2, [r2, #12]
        temp &= ~(iocurrent);
 80024e2:	ea03 0102 	and.w	r1, r3, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e6:	6860      	ldr	r0, [r4, #4]
 80024e8:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80024ec:	d001      	beq.n	80024f2 <HAL_GPIO_Init+0x19e>
        {
          temp |= iocurrent;
 80024ee:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->FTSR1 = temp;
 80024f2:	4a4a      	ldr	r2, [pc, #296]	; (800261c <HAL_GPIO_Init+0x2c8>)
 80024f4:	60d1      	str	r1, [r2, #12]

        temp = EXTI->EMR1;
 80024f6:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 80024f8:	ea03 0102 	and.w	r1, r3, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024fc:	6860      	ldr	r0, [r4, #4]
 80024fe:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8002502:	d001      	beq.n	8002508 <HAL_GPIO_Init+0x1b4>
        {
          temp |= iocurrent;
 8002504:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->EMR1 = temp;
 8002508:	4a44      	ldr	r2, [pc, #272]	; (800261c <HAL_GPIO_Init+0x2c8>)
 800250a:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800250c:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 800250e:	4013      	ands	r3, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002510:	6861      	ldr	r1, [r4, #4]
 8002512:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8002516:	d001      	beq.n	800251c <HAL_GPIO_Init+0x1c8>
        {
          temp |= iocurrent;
 8002518:	ea46 0302 	orr.w	r3, r6, r2
        }
        EXTI->IMR1 = temp;
 800251c:	4a3f      	ldr	r2, [pc, #252]	; (800261c <HAL_GPIO_Init+0x2c8>)
 800251e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002520:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002522:	6826      	ldr	r6, [r4, #0]
 8002524:	fa36 f205 	lsrs.w	r2, r6, r5
 8002528:	d06f      	beq.n	800260a <HAL_GPIO_Init+0x2b6>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800252a:	2701      	movs	r7, #1
 800252c:	40af      	lsls	r7, r5
    if (iocurrent != 0x00u)
 800252e:	403e      	ands	r6, r7
 8002530:	d0f6      	beq.n	8002520 <HAL_GPIO_Init+0x1cc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002532:	6863      	ldr	r3, [r4, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	3b01      	subs	r3, #1
 800253a:	2b01      	cmp	r3, #1
 800253c:	f67f af5e 	bls.w	80023fc <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002540:	6863      	ldr	r3, [r4, #4]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b03      	cmp	r3, #3
 8002548:	d00f      	beq.n	800256a <HAL_GPIO_Init+0x216>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800254a:	68a3      	ldr	r3, [r4, #8]
 800254c:	2b02      	cmp	r3, #2
 800254e:	f63f af75 	bhi.w	800243c <HAL_GPIO_Init+0xe8>
        temp = GPIOx->PUPDR;
 8002552:	f8d8 200c 	ldr.w	r2, [r8, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002556:	0069      	lsls	r1, r5, #1
 8002558:	2303      	movs	r3, #3
 800255a:	408b      	lsls	r3, r1
 800255c:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002560:	68a3      	ldr	r3, [r4, #8]
 8002562:	408b      	lsls	r3, r1
 8002564:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
 8002566:	f8c8 300c 	str.w	r3, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256a:	6863      	ldr	r3, [r4, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b02      	cmp	r3, #2
 8002572:	f43f af68 	beq.w	8002446 <HAL_GPIO_Init+0xf2>
      temp = GPIOx->MODER;
 8002576:	f8d8 2000 	ldr.w	r2, [r8]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800257a:	0069      	lsls	r1, r5, #1
 800257c:	2303      	movs	r3, #3
 800257e:	408b      	lsls	r3, r1
 8002580:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002584:	6863      	ldr	r3, [r4, #4]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	408b      	lsls	r3, r1
 800258c:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 800258e:	f8c8 3000 	str.w	r3, [r8]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002592:	6863      	ldr	r3, [r4, #4]
 8002594:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002598:	d0c2      	beq.n	8002520 <HAL_GPIO_Init+0x1cc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_GPIO_Init+0x2cc>)
 800259c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	661a      	str	r2, [r3, #96]	; 0x60
 80025a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80025ae:	08aa      	lsrs	r2, r5, #2
 80025b0:	1c91      	adds	r1, r2, #2
 80025b2:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_GPIO_Init+0x2c4>)
 80025b4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025b8:	f005 0103 	and.w	r1, r5, #3
 80025bc:	0089      	lsls	r1, r1, #2
 80025be:	230f      	movs	r3, #15
 80025c0:	408b      	lsls	r3, r1
 80025c2:	ea20 0003 	bic.w	r0, r0, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025c6:	f1b8 4f90 	cmp.w	r8, #1207959552	; 0x48000000
 80025ca:	f43f af75 	beq.w	80024b8 <HAL_GPIO_Init+0x164>
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_GPIO_Init+0x2bc>)
 80025d0:	4598      	cmp	r8, r3
 80025d2:	d012      	beq.n	80025fa <HAL_GPIO_Init+0x2a6>
 80025d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025d8:	4598      	cmp	r8, r3
 80025da:	d010      	beq.n	80025fe <HAL_GPIO_Init+0x2aa>
 80025dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025e0:	4598      	cmp	r8, r3
 80025e2:	d00e      	beq.n	8002602 <HAL_GPIO_Init+0x2ae>
 80025e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025e8:	4598      	cmp	r8, r3
 80025ea:	d00c      	beq.n	8002606 <HAL_GPIO_Init+0x2b2>
 80025ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025f0:	4598      	cmp	r8, r3
 80025f2:	f43f af5f 	beq.w	80024b4 <HAL_GPIO_Init+0x160>
 80025f6:	2306      	movs	r3, #6
 80025f8:	e75f      	b.n	80024ba <HAL_GPIO_Init+0x166>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e75d      	b.n	80024ba <HAL_GPIO_Init+0x166>
 80025fe:	2302      	movs	r3, #2
 8002600:	e75b      	b.n	80024ba <HAL_GPIO_Init+0x166>
 8002602:	2303      	movs	r3, #3
 8002604:	e759      	b.n	80024ba <HAL_GPIO_Init+0x166>
 8002606:	2304      	movs	r3, #4
 8002608:	e757      	b.n	80024ba <HAL_GPIO_Init+0x166>
  }
}
 800260a:	b002      	add	sp, #8
 800260c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002610:	48000400 	.word	0x48000400
 8002614:	08012f1c 	.word	0x08012f1c
 8002618:	40010000 	.word	0x40010000
 800261c:	40010400 	.word	0x40010400
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	4605      	mov	r5, r0
 8002628:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800262a:	460e      	mov	r6, r1
 800262c:	b121      	cbz	r1, 8002638 <HAL_GPIO_WritePin+0x14>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800262e:	2c01      	cmp	r4, #1
 8002630:	d808      	bhi.n	8002644 <HAL_GPIO_WritePin+0x20>

  if (PinState != GPIO_PIN_RESET)
 8002632:	b16c      	cbz	r4, 8002650 <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002634:	61ae      	str	r6, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002636:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002638:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800263c:	4805      	ldr	r0, [pc, #20]	; (8002654 <HAL_GPIO_WritePin+0x30>)
 800263e:	f7fe fb3b 	bl	8000cb8 <assert_failed>
 8002642:	e7f4      	b.n	800262e <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002644:	f240 119b 	movw	r1, #411	; 0x19b
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <HAL_GPIO_WritePin+0x30>)
 800264a:	f7fe fb35 	bl	8000cb8 <assert_failed>
 800264e:	e7f0      	b.n	8002632 <HAL_GPIO_WritePin+0xe>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002650:	62ae      	str	r6, [r5, #40]	; 0x28
}
 8002652:	e7f0      	b.n	8002636 <HAL_GPIO_WritePin+0x12>
 8002654:	08012f1c 	.word	0x08012f1c

08002658 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002658:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800265a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800265e:	d043      	beq.n	80026e8 <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002660:	6804      	ldr	r4, [r0, #0]
 8002662:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002666:	f891 c000 	ldrb.w	ip, [r1]
 800266a:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 800266e:	fa1e f383 	uxtah	r3, lr, r3
 8002672:	4423      	add	r3, r4
 8002674:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8002678:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 800267c:	698b      	ldr	r3, [r1, #24]
 800267e:	42a3      	cmp	r3, r4
 8002680:	d328      	bcc.n	80026d4 <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 8002682:	1b1b      	subs	r3, r3, r4
 8002684:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8002686:	698b      	ldr	r3, [r1, #24]
 8002688:	b97b      	cbnz	r3, 80026aa <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800268a:	6805      	ldr	r5, [r0, #0]
 800268c:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8002690:	b29b      	uxth	r3, r3
 8002692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800269e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a6:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026aa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80026ae:	d00e      	beq.n	80026ce <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026b0:	6802      	ldr	r2, [r0, #0]
 80026b2:	780d      	ldrb	r5, [r1, #0]
 80026b4:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026ca:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 80026ce:	b924      	cbnz	r4, 80026da <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 80026d0:	4620      	mov	r0, r4
 80026d2:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	618b      	str	r3, [r1, #24]
 80026d8:	e7d5      	b.n	8002686 <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026da:	4623      	mov	r3, r4
 80026dc:	890a      	ldrh	r2, [r1, #8]
 80026de:	6949      	ldr	r1, [r1, #20]
 80026e0:	6800      	ldr	r0, [r0, #0]
 80026e2:	f005 f825 	bl	8007730 <USB_ReadPMA>
 80026e6:	e7f3      	b.n	80026d0 <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026e8:	6804      	ldr	r4, [r0, #0]
 80026ea:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80026ee:	f891 c000 	ldrb.w	ip, [r1]
 80026f2:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 80026f6:	fa1e f383 	uxtah	r3, lr, r3
 80026fa:	4423      	add	r3, r4
 80026fc:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 8002700:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8002704:	698b      	ldr	r3, [r1, #24]
 8002706:	42a3      	cmp	r3, r4
 8002708:	d32f      	bcc.n	800276a <HAL_PCD_EP_DB_Receive+0x112>
      ep->xfer_len -= count;
 800270a:	1b1b      	subs	r3, r3, r4
 800270c:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 800270e:	698b      	ldr	r3, [r1, #24]
 8002710:	b97b      	cbnz	r3, 8002732 <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002712:	6805      	ldr	r5, [r0, #0]
 8002714:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8002718:	b29b      	uxth	r3, r3
 800271a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800271e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002722:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800272a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272e:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002732:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002736:	d10f      	bne.n	8002758 <HAL_PCD_EP_DB_Receive+0x100>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002738:	6802      	ldr	r2, [r0, #0]
 800273a:	f891 c000 	ldrb.w	ip, [r1]
 800273e:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8002742:	b29b      	uxth	r3, r3
 8002744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002750:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002754:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 8002758:	2c00      	cmp	r4, #0
 800275a:	d0b9      	beq.n	80026d0 <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800275c:	4623      	mov	r3, r4
 800275e:	894a      	ldrh	r2, [r1, #10]
 8002760:	6949      	ldr	r1, [r1, #20]
 8002762:	6800      	ldr	r0, [r0, #0]
 8002764:	f004 ffe4 	bl	8007730 <USB_ReadPMA>
 8002768:	e7b2      	b.n	80026d0 <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	618b      	str	r3, [r1, #24]
 800276e:	e7ce      	b.n	800270e <HAL_PCD_EP_DB_Receive+0xb6>

08002770 <HAL_PCD_Init>:
  if (hpcd == NULL)
 8002770:	2800      	cmp	r0, #0
 8002772:	d076      	beq.n	8002862 <HAL_PCD_Init+0xf2>
{
 8002774:	b530      	push	{r4, r5, lr}
 8002776:	b087      	sub	sp, #28
 8002778:	4604      	mov	r4, r0
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800277a:	6802      	ldr	r2, [r0, #0]
 800277c:	4b3a      	ldr	r3, [pc, #232]	; (8002868 <HAL_PCD_Init+0xf8>)
 800277e:	429a      	cmp	r2, r3
 8002780:	d003      	beq.n	800278a <HAL_PCD_Init+0x1a>
 8002782:	2187      	movs	r1, #135	; 0x87
 8002784:	4839      	ldr	r0, [pc, #228]	; (800286c <HAL_PCD_Init+0xfc>)
 8002786:	f7fe fa97 	bl	8000cb8 <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800278a:	f894 32a9 	ldrb.w	r3, [r4, #681]	; 0x2a9
 800278e:	b13b      	cbz	r3, 80027a0 <HAL_PCD_Init+0x30>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002790:	2303      	movs	r3, #3
 8002792:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8002796:	6820      	ldr	r0, [r4, #0]
 8002798:	f004 f8ab 	bl	80068f2 <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279c:	2300      	movs	r3, #0
 800279e:	e020      	b.n	80027e2 <HAL_PCD_Init+0x72>
    hpcd->Lock = HAL_UNLOCKED;
 80027a0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80027a4:	4620      	mov	r0, r4
 80027a6:	f00e ff0b 	bl	80115c0 <HAL_PCD_MspInit>
 80027aa:	e7f1      	b.n	8002790 <HAL_PCD_Init+0x20>
    hpcd->IN_ep[i].is_in = 1U;
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80027b2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80027b6:	2001      	movs	r0, #1
 80027b8:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 80027ba:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80027be:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027c2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80027c6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80027ca:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027cc:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80027d0:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80027d4:	2000      	movs	r0, #0
 80027d6:	f88c 0003 	strb.w	r0, [ip, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027da:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027dc:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80027de:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e0:	b2d3      	uxtb	r3, r2
 80027e2:	6860      	ldr	r0, [r4, #4]
 80027e4:	4283      	cmp	r3, r0
 80027e6:	d3e1      	bcc.n	80027ac <HAL_PCD_Init+0x3c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e8:	2300      	movs	r3, #0
 80027ea:	e016      	b.n	800281a <HAL_PCD_Init+0xaa>
    hpcd->OUT_ep[i].is_in = 0U;
 80027ec:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80027f0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80027f4:	2100      	movs	r1, #0
 80027f6:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80027fa:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027fe:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002802:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002806:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800280a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800280e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002812:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002816:	3301      	adds	r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	4298      	cmp	r0, r3
 800281c:	d8e6      	bhi.n	80027ec <HAL_PCD_Init+0x7c>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800281e:	46a4      	mov	ip, r4
 8002820:	f85c 5b10 	ldr.w	r5, [ip], #16
 8002824:	46ee      	mov	lr, sp
 8002826:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800282a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800282e:	f8dc 3000 	ldr.w	r3, [ip]
 8002832:	f8ce 3000 	str.w	r3, [lr]
 8002836:	1d23      	adds	r3, r4, #4
 8002838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800283a:	4628      	mov	r0, r5
 800283c:	f004 f863 	bl	8006906 <USB_DevInit>
  hpcd->USB_Address = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002846:	2301      	movs	r3, #1
 8002848:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 800284c:	69e3      	ldr	r3, [r4, #28]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d002      	beq.n	8002858 <HAL_PCD_Init+0xe8>
  return HAL_OK;
 8002852:	2000      	movs	r0, #0
}
 8002854:	b007      	add	sp, #28
 8002856:	bd30      	pop	{r4, r5, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002858:	4620      	mov	r0, r4
 800285a:	f000 feed 	bl	8003638 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 800285e:	2000      	movs	r0, #0
 8002860:	e7f8      	b.n	8002854 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
 8002862:	2001      	movs	r0, #1
}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40005c00 	.word	0x40005c00
 800286c:	08012f58 	.word	0x08012f58

08002870 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8002870:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002874:	2b01      	cmp	r3, #1
 8002876:	d00e      	beq.n	8002896 <HAL_PCD_Start+0x26>
{
 8002878:	b510      	push	{r4, lr}
 800287a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800287c:	2301      	movs	r3, #1
 800287e:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002882:	6800      	ldr	r0, [r0, #0]
 8002884:	f004 f82c 	bl	80068e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002888:	6820      	ldr	r0, [r4, #0]
 800288a:	f004 fb80 	bl	8006f8e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800288e:	2000      	movs	r0, #0
 8002890:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002894:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002896:	2002      	movs	r0, #2
}
 8002898:	4770      	bx	lr

0800289a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800289a:	b570      	push	{r4, r5, r6, lr}
 800289c:	4605      	mov	r5, r0
 800289e:	460c      	mov	r4, r1
 80028a0:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028a2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028a6:	f000 8109 	beq.w	8002abc <HAL_PCD_EP_DB_Transmit+0x222>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028aa:	6802      	ldr	r2, [r0, #0]
 80028ac:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80028b0:	7809      	ldrb	r1, [r1, #0]
 80028b2:	00c8      	lsls	r0, r1, #3
 80028b4:	fa10 f383 	uxtah	r3, r0, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80028be:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 80028c2:	69a3      	ldr	r3, [r4, #24]
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d951      	bls.n	800296c <HAL_PCD_EP_DB_Transmit+0xd2>
    {
      ep->xfer_len -= TxPctSize;
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028cc:	69a3      	ldr	r3, [r4, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d168      	bne.n	80029a4 <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028d2:	7863      	ldrb	r3, [r4, #1]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d14c      	bne.n	8002972 <HAL_PCD_EP_DB_Transmit+0xd8>
 80028d8:	682a      	ldr	r2, [r5, #0]
 80028da:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80028de:	fa12 f383 	uxtah	r3, r2, r3
 80028e2:	4403      	add	r3, r0
 80028e4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80028e8:	b292      	uxth	r2, r2
 80028ea:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80028ee:	b292      	uxth	r2, r2
 80028f0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80028f4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80028f8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80028fc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002900:	b292      	uxth	r2, r2
 8002902:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002906:	682a      	ldr	r2, [r5, #0]
 8002908:	7863      	ldrb	r3, [r4, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d13d      	bne.n	800298a <HAL_PCD_EP_DB_Transmit+0xf0>
 800290e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002912:	fa12 f383 	uxtah	r3, r2, r3
 8002916:	7822      	ldrb	r2, [r4, #0]
 8002918:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800291c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002920:	b292      	uxth	r2, r2
 8002922:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002926:	b292      	uxth	r2, r2
 8002928:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800292c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002930:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002934:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002938:	b292      	uxth	r2, r2
 800293a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800293e:	7821      	ldrb	r1, [r4, #0]
 8002940:	4628      	mov	r0, r5
 8002942:	f00e fe81 	bl	8011648 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002946:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800294a:	d040      	beq.n	80029ce <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800294c:	682a      	ldr	r2, [r5, #0]
 800294e:	7821      	ldrb	r1, [r4, #0]
 8002950:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002954:	b29b      	uxth	r3, r3
 8002956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002966:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800296a:	e030      	b.n	80029ce <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	61a3      	str	r3, [r4, #24]
 8002970:	e7ac      	b.n	80028cc <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002972:	2b01      	cmp	r3, #1
 8002974:	d1c7      	bne.n	8002906 <HAL_PCD_EP_DB_Transmit+0x6c>
 8002976:	682a      	ldr	r2, [r5, #0]
 8002978:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800297c:	fa12 f383 	uxtah	r3, r2, r3
 8002980:	4403      	add	r3, r0
 8002982:	2200      	movs	r2, #0
 8002984:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002988:	e7bd      	b.n	8002906 <HAL_PCD_EP_DB_Transmit+0x6c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800298a:	2b01      	cmp	r3, #1
 800298c:	d1d7      	bne.n	800293e <HAL_PCD_EP_DB_Transmit+0xa4>
 800298e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002992:	fa12 f383 	uxtah	r3, r2, r3
 8002996:	7822      	ldrb	r2, [r4, #0]
 8002998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800299c:	2200      	movs	r2, #0
 800299e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80029a2:	e7cc      	b.n	800293e <HAL_PCD_EP_DB_Transmit+0xa4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029a4:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80029a8:	d00d      	beq.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029aa:	6828      	ldr	r0, [r5, #0]
 80029ac:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029c6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d012      	beq.n	80029f4 <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029ce:	682a      	ldr	r2, [r5, #0]
 80029d0:	7821      	ldrb	r1, [r4, #0]
 80029d2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80029e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ec:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 80029f0:	2000      	movs	r0, #0
 80029f2:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 80029f4:	6963      	ldr	r3, [r4, #20]
 80029f6:	4413      	add	r3, r2
 80029f8:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 80029fa:	69e3      	ldr	r3, [r4, #28]
 80029fc:	4413      	add	r3, r2
 80029fe:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a00:	6a21      	ldr	r1, [r4, #32]
 8002a02:	6923      	ldr	r3, [r4, #16]
 8002a04:	4299      	cmp	r1, r3
 8002a06:	d31b      	bcc.n	8002a40 <HAL_PCD_EP_DB_Transmit+0x1a6>
          ep->xfer_len_db -= len;
 8002a08:	1ac9      	subs	r1, r1, r3
 8002a0a:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a0c:	7862      	ldrb	r2, [r4, #1]
 8002a0e:	2a00      	cmp	r2, #0
 8002a10:	d13f      	bne.n	8002a92 <HAL_PCD_EP_DB_Transmit+0x1f8>
 8002a12:	6829      	ldr	r1, [r5, #0]
 8002a14:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8002a18:	fa11 f282 	uxtah	r2, r1, r2
 8002a1c:	7821      	ldrb	r1, [r4, #0]
 8002a1e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002a22:	2b3e      	cmp	r3, #62	; 0x3e
 8002a24:	d918      	bls.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x1be>
 8002a26:	0959      	lsrs	r1, r3, #5
 8002a28:	f013 0f1f 	tst.w	r3, #31
 8002a2c:	d100      	bne.n	8002a30 <HAL_PCD_EP_DB_Transmit+0x196>
 8002a2e:	3901      	subs	r1, #1
 8002a30:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002a34:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002a38:	b289      	uxth	r1, r1
 8002a3a:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8002a3e:	e02a      	b.n	8002a96 <HAL_PCD_EP_DB_Transmit+0x1fc>
        else if (ep->xfer_len_db == 0U)
 8002a40:	b921      	cbnz	r1, 8002a4c <HAL_PCD_EP_DB_Transmit+0x1b2>
          ep->xfer_fill_db = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8002a48:	4613      	mov	r3, r2
 8002a4a:	e7df      	b.n	8002a0c <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8002a52:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8002a54:	460b      	mov	r3, r1
 8002a56:	e7d9      	b.n	8002a0c <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a58:	b98b      	cbnz	r3, 8002a7e <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002a5a:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8002a5e:	b289      	uxth	r1, r1
 8002a60:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002a64:	b289      	uxth	r1, r1
 8002a66:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8002a6a:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8002a6e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002a72:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002a76:	b289      	uxth	r1, r1
 8002a78:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8002a7c:	e00b      	b.n	8002a96 <HAL_PCD_EP_DB_Transmit+0x1fc>
 8002a7e:	0859      	lsrs	r1, r3, #1
 8002a80:	f013 0f01 	tst.w	r3, #1
 8002a84:	d000      	beq.n	8002a88 <HAL_PCD_EP_DB_Transmit+0x1ee>
 8002a86:	3101      	adds	r1, #1
 8002a88:	0289      	lsls	r1, r1, #10
 8002a8a:	b289      	uxth	r1, r1
 8002a8c:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8002a90:	e001      	b.n	8002a96 <HAL_PCD_EP_DB_Transmit+0x1fc>
 8002a92:	2a01      	cmp	r2, #1
 8002a94:	d006      	beq.n	8002aa4 <HAL_PCD_EP_DB_Transmit+0x20a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	8922      	ldrh	r2, [r4, #8]
 8002a9a:	6961      	ldr	r1, [r4, #20]
 8002a9c:	6828      	ldr	r0, [r5, #0]
 8002a9e:	f004 fa85 	bl	8006fac <USB_WritePMA>
 8002aa2:	e794      	b.n	80029ce <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002aa4:	6829      	ldr	r1, [r5, #0]
 8002aa6:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8002aaa:	fa11 f282 	uxtah	r2, r1, r2
 8002aae:	7821      	ldrb	r1, [r4, #0]
 8002ab0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002ab4:	b299      	uxth	r1, r3
 8002ab6:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8002aba:	e7ec      	b.n	8002a96 <HAL_PCD_EP_DB_Transmit+0x1fc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002abc:	6802      	ldr	r2, [r0, #0]
 8002abe:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002ac2:	7809      	ldrb	r1, [r1, #0]
 8002ac4:	00c8      	lsls	r0, r1, #3
 8002ac6:	fa10 f383 	uxtah	r3, r0, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002ad0:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8002ad4:	69a3      	ldr	r3, [r4, #24]
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d352      	bcc.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x2e6>
      ep->xfer_len -= TxPctSize;
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8002ade:	69a3      	ldr	r3, [r4, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d169      	bne.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x31e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ae4:	7863      	ldrb	r3, [r4, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d14d      	bne.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x2ec>
 8002aea:	682a      	ldr	r2, [r5, #0]
 8002aec:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002af0:	fa12 f383 	uxtah	r3, r2, r3
 8002af4:	4403      	add	r3, r0
 8002af6:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002afa:	b292      	uxth	r2, r2
 8002afc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002b00:	b292      	uxth	r2, r2
 8002b02:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002b06:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002b0a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002b0e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002b12:	b292      	uxth	r2, r2
 8002b14:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b18:	682a      	ldr	r2, [r5, #0]
 8002b1a:	7863      	ldrb	r3, [r4, #1]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d13e      	bne.n	8002b9e <HAL_PCD_EP_DB_Transmit+0x304>
 8002b20:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002b24:	fa12 f383 	uxtah	r3, r2, r3
 8002b28:	7822      	ldrb	r2, [r4, #0]
 8002b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b2e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002b32:	b292      	uxth	r2, r2
 8002b34:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002b38:	b292      	uxth	r2, r2
 8002b3a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002b3e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002b42:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002b46:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002b4a:	b292      	uxth	r2, r2
 8002b4c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b50:	7821      	ldrb	r1, [r4, #0]
 8002b52:	4628      	mov	r0, r5
 8002b54:	f00e fd78 	bl	8011648 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b58:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002b5c:	f47f af37 	bne.w	80029ce <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b60:	682a      	ldr	r2, [r5, #0]
 8002b62:	7821      	ldrb	r1, [r4, #0]
 8002b64:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002b7e:	e726      	b.n	80029ce <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61a3      	str	r3, [r4, #24]
 8002b84:	e7ab      	b.n	8002ade <HAL_PCD_EP_DB_Transmit+0x244>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d1c6      	bne.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x27e>
 8002b8a:	682a      	ldr	r2, [r5, #0]
 8002b8c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002b90:	fa12 f383 	uxtah	r3, r2, r3
 8002b94:	4403      	add	r3, r0
 8002b96:	2200      	movs	r2, #0
 8002b98:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002b9c:	e7bc      	b.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x27e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d1d6      	bne.n	8002b50 <HAL_PCD_EP_DB_Transmit+0x2b6>
 8002ba2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002ba6:	fa12 f383 	uxtah	r3, r2, r3
 8002baa:	7822      	ldrb	r2, [r4, #0]
 8002bac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002bb6:	e7cb      	b.n	8002b50 <HAL_PCD_EP_DB_Transmit+0x2b6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bb8:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002bbc:	d10d      	bne.n	8002bda <HAL_PCD_EP_DB_Transmit+0x340>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bbe:	6828      	ldr	r0, [r5, #0]
 8002bc0:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd6:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002bda:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	f47f aef5 	bne.w	80029ce <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 8002be4:	6963      	ldr	r3, [r4, #20]
 8002be6:	4413      	add	r3, r2
 8002be8:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8002bea:	69e3      	ldr	r3, [r4, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bf0:	6a21      	ldr	r1, [r4, #32]
 8002bf2:	6923      	ldr	r3, [r4, #16]
 8002bf4:	4299      	cmp	r1, r3
 8002bf6:	d31b      	bcc.n	8002c30 <HAL_PCD_EP_DB_Transmit+0x396>
          ep->xfer_len_db -= len;
 8002bf8:	1ac9      	subs	r1, r1, r3
 8002bfa:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bfc:	6829      	ldr	r1, [r5, #0]
 8002bfe:	7862      	ldrb	r2, [r4, #1]
 8002c00:	2a00      	cmp	r2, #0
 8002c02:	d13e      	bne.n	8002c82 <HAL_PCD_EP_DB_Transmit+0x3e8>
 8002c04:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8002c08:	fa11 f282 	uxtah	r2, r1, r2
 8002c0c:	7821      	ldrb	r1, [r4, #0]
 8002c0e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002c12:	2b3e      	cmp	r3, #62	; 0x3e
 8002c14:	d918      	bls.n	8002c48 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8002c16:	0959      	lsrs	r1, r3, #5
 8002c18:	f013 0f1f 	tst.w	r3, #31
 8002c1c:	d100      	bne.n	8002c20 <HAL_PCD_EP_DB_Transmit+0x386>
 8002c1e:	3901      	subs	r1, #1
 8002c20:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002c24:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002c28:	b289      	uxth	r1, r1
 8002c2a:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002c2e:	e02a      	b.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x3ec>
        else if (ep->xfer_len_db == 0U)
 8002c30:	b921      	cbnz	r1, 8002c3c <HAL_PCD_EP_DB_Transmit+0x3a2>
          ep->xfer_fill_db = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8002c38:	4613      	mov	r3, r2
 8002c3a:	e7df      	b.n	8002bfc <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8002c40:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c44:	460b      	mov	r3, r1
 8002c46:	e7d9      	b.n	8002bfc <HAL_PCD_EP_DB_Transmit+0x362>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c48:	b98b      	cbnz	r3, 8002c6e <HAL_PCD_EP_DB_Transmit+0x3d4>
 8002c4a:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8002c4e:	b289      	uxth	r1, r1
 8002c50:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002c54:	b289      	uxth	r1, r1
 8002c56:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002c5a:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8002c5e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002c62:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002c66:	b289      	uxth	r1, r1
 8002c68:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002c6c:	e00b      	b.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x3ec>
 8002c6e:	0859      	lsrs	r1, r3, #1
 8002c70:	f013 0f01 	tst.w	r3, #1
 8002c74:	d000      	beq.n	8002c78 <HAL_PCD_EP_DB_Transmit+0x3de>
 8002c76:	3101      	adds	r1, #1
 8002c78:	0289      	lsls	r1, r1, #10
 8002c7a:	b289      	uxth	r1, r1
 8002c7c:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002c80:	e001      	b.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x3ec>
 8002c82:	2a01      	cmp	r2, #1
 8002c84:	d006      	beq.n	8002c94 <HAL_PCD_EP_DB_Transmit+0x3fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	8962      	ldrh	r2, [r4, #10]
 8002c8a:	6961      	ldr	r1, [r4, #20]
 8002c8c:	6828      	ldr	r0, [r5, #0]
 8002c8e:	f004 f98d 	bl	8006fac <USB_WritePMA>
 8002c92:	e69c      	b.n	80029ce <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c94:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8002c98:	fa11 f282 	uxtah	r2, r1, r2
 8002c9c:	7821      	ldrb	r1, [r4, #0]
 8002c9e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002ca2:	b299      	uxth	r1, r3
 8002ca4:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002ca8:	e7ed      	b.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x3ec>

08002caa <PCD_EP_ISR_Handler>:
{
 8002caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cae:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002cb0:	e0ca      	b.n	8002e48 <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cb2:	8803      	ldrh	r3, [r0, #0]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cca:	6829      	ldr	r1, [r5, #0]
 8002ccc:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002cd0:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8002cd4:	00d2      	lsls	r2, r2, #3
 8002cd6:	fa12 f383 	uxtah	r3, r2, r3
 8002cda:	440b      	add	r3, r1
 8002cdc:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8002ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce4:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002ce6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002ce8:	441a      	add	r2, r3
 8002cea:	63ea      	str	r2, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002cec:	2100      	movs	r1, #0
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f00e fcaa 	bl	8011648 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002cf4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a5 	beq.w	8002e48 <PCD_EP_ISR_Handler+0x19e>
 8002cfe:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f040 80a1 	bne.w	8002e48 <PCD_EP_ISR_Handler+0x19e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002d06:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002d0a:	682a      	ldr	r2, [r5, #0]
 8002d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d10:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8002d1a:	e095      	b.n	8002e48 <PCD_EP_ISR_Handler+0x19e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d1c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002d20:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8002d24:	00d2      	lsls	r2, r2, #3
 8002d26:	fa12 f383 	uxtah	r3, r2, r3
 8002d2a:	4403      	add	r3, r0
 8002d2c:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8002d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d34:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d38:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8002d3c:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8002d40:	f004 fcf6 	bl	8007730 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d44:	682a      	ldr	r2, [r5, #0]
 8002d46:	8813      	ldrh	r3, [r2, #0]
 8002d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4c:	051b      	lsls	r3, r3, #20
 8002d4e:	0d1b      	lsrs	r3, r3, #20
 8002d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d54:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002d56:	4628      	mov	r0, r5
 8002d58:	f00e fc62 	bl	8011620 <HAL_PCD_SetupStageCallback>
 8002d5c:	e074      	b.n	8002e48 <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d5e:	b989      	cbnz	r1, 8002d84 <PCD_EP_ISR_Handler+0xda>
 8002d60:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002d64:	b292      	uxth	r2, r2
 8002d66:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002d6a:	b292      	uxth	r2, r2
 8002d6c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002d70:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002d74:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002d78:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d7c:	b292      	uxth	r2, r2
 8002d7e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002d82:	e0bf      	b.n	8002f04 <PCD_EP_ISR_Handler+0x25a>
 8002d84:	084a      	lsrs	r2, r1, #1
 8002d86:	f011 0f01 	tst.w	r1, #1
 8002d8a:	d000      	beq.n	8002d8e <PCD_EP_ISR_Handler+0xe4>
 8002d8c:	3201      	adds	r2, #1
 8002d8e:	0292      	lsls	r2, r2, #10
 8002d90:	b292      	uxth	r2, r2
 8002d92:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002d96:	e0b5      	b.n	8002f04 <PCD_EP_ISR_Handler+0x25a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d98:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002d9c:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d9e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002da2:	f040 80be 	bne.w	8002f22 <PCD_EP_ISR_Handler+0x278>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002da6:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002daa:	d04d      	beq.n	8002e48 <PCD_EP_ISR_Handler+0x19e>
        ep = &hpcd->IN_ep[epindex];
 8002dac:	1c62      	adds	r2, r4, #1
 8002dae:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002db2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002db6:	6828      	ldr	r0, [r5, #0]
 8002db8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 8002dd4:	78cb      	ldrb	r3, [r1, #3]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	f000 81a7 	beq.w	800312a <PCD_EP_ISR_Handler+0x480>
          ep->xfer_len = 0U;
 8002ddc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002de0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002de4:	2200      	movs	r2, #0
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8002de8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dec:	b323      	cbz	r3, 8002e38 <PCD_EP_ISR_Handler+0x18e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dee:	f016 0f40 	tst.w	r6, #64	; 0x40
 8002df2:	f000 8163 	beq.w	80030bc <PCD_EP_ISR_Handler+0x412>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002df6:	784b      	ldrb	r3, [r1, #1]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f040 814c 	bne.w	8003096 <PCD_EP_ISR_Handler+0x3ec>
 8002dfe:	682a      	ldr	r2, [r5, #0]
 8002e00:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002e04:	fa12 f383 	uxtah	r3, r2, r3
 8002e08:	1c62      	adds	r2, r4, #1
 8002e0a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e0e:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8002e12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e16:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002e1a:	b292      	uxth	r2, r2
 8002e1c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002e20:	b292      	uxth	r2, r2
 8002e22:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002e26:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002e2a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002e2e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002e32:	b292      	uxth	r2, r2
 8002e34:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e38:	3401      	adds	r4, #1
 8002e3a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002e3e:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8002e42:	4628      	mov	r0, r5
 8002e44:	f00e fc00 	bl	8011648 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e48:	6828      	ldr	r0, [r5, #0]
 8002e4a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002e4e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002e52:	f000 81ae 	beq.w	80031b2 <PCD_EP_ISR_Handler+0x508>
    wIstr = hpcd->Instance->ISTR;
 8002e56:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8002e5a:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8002e5c:	f014 040f 	ands.w	r4, r4, #15
 8002e60:	d19a      	bne.n	8002d98 <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002e62:	f013 0f10 	tst.w	r3, #16
 8002e66:	f43f af24 	beq.w	8002cb2 <PCD_EP_ISR_Handler+0x8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e6a:	8803      	ldrh	r3, [r0, #0]
 8002e6c:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e6e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e72:	f47f af53 	bne.w	8002d1c <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e76:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002e7a:	d0e5      	beq.n	8002e48 <PCD_EP_ISR_Handler+0x19e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e7c:	8803      	ldrh	r3, [r0, #0]
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	051b      	lsls	r3, r3, #20
 8002e84:	0d1b      	lsrs	r3, r3, #20
 8002e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e8c:	6828      	ldr	r0, [r5, #0]
 8002e8e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e92:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8002e96:	00d2      	lsls	r2, r2, #3
 8002e98:	fa12 f383 	uxtah	r3, r2, r3
 8002e9c:	4403      	add	r3, r0
 8002e9e:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8002ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ea6:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002eaa:	b18b      	cbz	r3, 8002ed0 <PCD_EP_ISR_Handler+0x226>
 8002eac:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8002eb0:	b171      	cbz	r1, 8002ed0 <PCD_EP_ISR_Handler+0x226>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002eb2:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8002eb6:	f004 fc3b 	bl	8007730 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002eba:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8002ebe:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4628      	mov	r0, r5
 8002ecc:	f00e fbb0 	bl	8011630 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002ed0:	682b      	ldr	r3, [r5, #0]
 8002ed2:	881a      	ldrh	r2, [r3, #0]
 8002ed4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002ed8:	d1b6      	bne.n	8002e48 <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002eda:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002ede:	fa13 f382 	uxtah	r3, r3, r2
 8002ee2:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 8002ee6:	293e      	cmp	r1, #62	; 0x3e
 8002ee8:	f67f af39 	bls.w	8002d5e <PCD_EP_ISR_Handler+0xb4>
 8002eec:	094a      	lsrs	r2, r1, #5
 8002eee:	f011 0f1f 	tst.w	r1, #31
 8002ef2:	d100      	bne.n	8002ef6 <PCD_EP_ISR_Handler+0x24c>
 8002ef4:	3a01      	subs	r2, #1
 8002ef6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002efa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002efe:	b292      	uxth	r2, r2
 8002f00:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f04:	682a      	ldr	r2, [r5, #0]
 8002f06:	8813      	ldrh	r3, [r2, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f12:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1e:	8013      	strh	r3, [r2, #0]
 8002f20:	e792      	b.n	8002e48 <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f22:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2a:	051b      	lsls	r3, r3, #20
 8002f2c:	0d1b      	lsrs	r3, r3, #20
 8002f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f32:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8002f36:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002f3a:	00c9      	lsls	r1, r1, #3
 8002f3c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002f40:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8002f44:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002f48:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002f4c:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d140      	bne.n	8002fd6 <PCD_EP_ISR_Handler+0x32c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f54:	6828      	ldr	r0, [r5, #0]
 8002f56:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002f5a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002f5e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002f62:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8002f66:	00d2      	lsls	r2, r2, #3
 8002f68:	fa12 f383 	uxtah	r3, r2, r3
 8002f6c:	4403      	add	r3, r0
 8002f6e:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8002f72:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8002f76:	bb17      	cbnz	r7, 8002fbe <PCD_EP_ISR_Handler+0x314>
        ep->xfer_count += count;
 8002f78:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002f7c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002f80:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002f84:	443a      	add	r2, r7
 8002f86:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002f8a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002f8e:	443a      	add	r2, r7
 8002f90:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f94:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002f98:	b13b      	cbz	r3, 8002faa <PCD_EP_ISR_Handler+0x300>
 8002f9a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002f9e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002fa2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002fa6:	429f      	cmp	r7, r3
 8002fa8:	d270      	bcs.n	800308c <PCD_EP_ISR_Handler+0x3e2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002faa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002fae:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002fb2:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f00e fb3a 	bl	8011630 <HAL_PCD_DataOutStageCallback>
 8002fbc:	e6f3      	b.n	8002da6 <PCD_EP_ISR_Handler+0xfc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002fbe:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002fc2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002fc6:	463b      	mov	r3, r7
 8002fc8:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8002fcc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002fd0:	f004 fbae 	bl	8007730 <USB_ReadPMA>
 8002fd4:	e7d0      	b.n	8002f78 <PCD_EP_ISR_Handler+0x2ce>
          if (ep->type == EP_TYPE_BULK)
 8002fd6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002fda:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002fde:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d033      	beq.n	800304e <PCD_EP_ISR_Handler+0x3a4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fe6:	6829      	ldr	r1, [r5, #0]
 8002fe8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002fec:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002ff0:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8002ff4:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003006:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800300a:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800300e:	6828      	ldr	r0, [r5, #0]
 8003010:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 8003014:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003018:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800301c:	d01e      	beq.n	800305c <PCD_EP_ISR_Handler+0x3b2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800301e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	fa13 f382 	uxtah	r3, r3, r2
 8003028:	4403      	add	r3, r0
 800302a:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 800302e:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8003032:	2f00      	cmp	r7, #0
 8003034:	d0a0      	beq.n	8002f78 <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003036:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800303a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800303e:	463b      	mov	r3, r7
 8003040:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8003044:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003048:	f004 fb72 	bl	8007730 <USB_ReadPMA>
 800304c:	e794      	b.n	8002f78 <PCD_EP_ISR_Handler+0x2ce>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800304e:	4632      	mov	r2, r6
 8003050:	4641      	mov	r1, r8
 8003052:	4628      	mov	r0, r5
 8003054:	f7ff fb00 	bl	8002658 <HAL_PCD_EP_DB_Receive>
 8003058:	4607      	mov	r7, r0
 800305a:	e78d      	b.n	8002f78 <PCD_EP_ISR_Handler+0x2ce>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800305c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	fa13 f382 	uxtah	r3, r3, r2
 8003066:	4403      	add	r3, r0
 8003068:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 800306c:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8003070:	2f00      	cmp	r7, #0
 8003072:	d081      	beq.n	8002f78 <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003074:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003078:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800307c:	463b      	mov	r3, r7
 800307e:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8003082:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003086:	f004 fb53 	bl	8007730 <USB_ReadPMA>
 800308a:	e775      	b.n	8002f78 <PCD_EP_ISR_Handler+0x2ce>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800308c:	4641      	mov	r1, r8
 800308e:	6828      	ldr	r0, [r5, #0]
 8003090:	f003 ff9e 	bl	8006fd0 <USB_EPStartXfer>
 8003094:	e687      	b.n	8002da6 <PCD_EP_ISR_Handler+0xfc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003096:	2b01      	cmp	r3, #1
 8003098:	f47f aece 	bne.w	8002e38 <PCD_EP_ISR_Handler+0x18e>
 800309c:	682a      	ldr	r2, [r5, #0]
 800309e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80030a2:	fa12 f383 	uxtah	r3, r2, r3
 80030a6:	1c62      	adds	r2, r4, #1
 80030a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80030ac:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 80030b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80030ba:	e6bd      	b.n	8002e38 <PCD_EP_ISR_Handler+0x18e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030bc:	682a      	ldr	r2, [r5, #0]
 80030be:	1c63      	adds	r3, r4, #1
 80030c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80030c4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	b9e3      	cbnz	r3, 8003106 <PCD_EP_ISR_Handler+0x45c>
 80030cc:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80030d0:	fa12 f383 	uxtah	r3, r2, r3
 80030d4:	1c62      	adds	r2, r4, #1
 80030d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80030da:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 80030de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030e2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80030e6:	b292      	uxth	r2, r2
 80030e8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80030ec:	b292      	uxth	r2, r2
 80030ee:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80030f2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80030f6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80030fa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80030fe:	b292      	uxth	r2, r2
 8003100:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003104:	e698      	b.n	8002e38 <PCD_EP_ISR_Handler+0x18e>
 8003106:	2b01      	cmp	r3, #1
 8003108:	f47f ae96 	bne.w	8002e38 <PCD_EP_ISR_Handler+0x18e>
 800310c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003110:	fa12 f383 	uxtah	r3, r2, r3
 8003114:	1c62      	adds	r2, r4, #1
 8003116:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800311a:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 800311e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003122:	2200      	movs	r2, #0
 8003124:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003128:	e686      	b.n	8002e38 <PCD_EP_ISR_Handler+0x18e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 800312a:	f416 7f80 	tst.w	r6, #256	; 0x100
 800312e:	d13b      	bne.n	80031a8 <PCD_EP_ISR_Handler+0x4fe>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003130:	6828      	ldr	r0, [r5, #0]
 8003132:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003136:	1c62      	adds	r2, r4, #1
 8003138:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800313c:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 8003140:	00f2      	lsls	r2, r6, #3
 8003142:	fa12 f383 	uxtah	r3, r2, r3
 8003146:	4403      	add	r3, r0
 8003148:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800314c:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8003150:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003154:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003158:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800315a:	429a      	cmp	r2, r3
 800315c:	d910      	bls.n	8003180 <PCD_EP_ISR_Handler+0x4d6>
              ep->xfer_len -= TxPctSize;
 800315e:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8003162:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8003166:	1ad2      	subs	r2, r2, r3
 8003168:	643a      	str	r2, [r7, #64]	; 0x40
            if (ep->xfer_len == 0U)
 800316a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800316e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003172:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003174:	b95a      	cbnz	r2, 800318e <PCD_EP_ISR_Handler+0x4e4>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003176:	4631      	mov	r1, r6
 8003178:	4628      	mov	r0, r5
 800317a:	f00e fa65 	bl	8011648 <HAL_PCD_DataInStageCallback>
 800317e:	e663      	b.n	8002e48 <PCD_EP_ISR_Handler+0x19e>
              ep->xfer_len = 0U;
 8003180:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003184:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003188:	2700      	movs	r7, #0
 800318a:	6417      	str	r7, [r2, #64]	; 0x40
 800318c:	e7ed      	b.n	800316a <PCD_EP_ISR_Handler+0x4c0>
              ep->xfer_buff += TxPctSize;
 800318e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003192:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003196:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8003198:	441e      	add	r6, r3
 800319a:	63d6      	str	r6, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 800319c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800319e:	4423      	add	r3, r4
 80031a0:	6453      	str	r3, [r2, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031a2:	f003 ff15 	bl	8006fd0 <USB_EPStartXfer>
 80031a6:	e64f      	b.n	8002e48 <PCD_EP_ISR_Handler+0x19e>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80031a8:	4632      	mov	r2, r6
 80031aa:	4628      	mov	r0, r5
 80031ac:	f7ff fb75 	bl	800289a <HAL_PCD_EP_DB_Transmit>
 80031b0:	e64a      	b.n	8002e48 <PCD_EP_ISR_Handler+0x19e>
}
 80031b2:	2000      	movs	r0, #0
 80031b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080031b8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80031b8:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d00d      	beq.n	80031dc <HAL_PCD_SetAddress+0x24>
{
 80031c0:	b510      	push	{r4, lr}
 80031c2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80031c4:	2301      	movs	r3, #1
 80031c6:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80031ca:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031ce:	6800      	ldr	r0, [r0, #0]
 80031d0:	f003 fed7 	bl	8006f82 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80031da:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80031dc:	2002      	movs	r0, #2
}
 80031de:	4770      	bx	lr

080031e0 <HAL_PCD_IRQHandler>:
{
 80031e0:	b510      	push	{r4, lr}
 80031e2:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80031e4:	6800      	ldr	r0, [r0, #0]
 80031e6:	f003 fedd 	bl	8006fa4 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80031ea:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80031ee:	d123      	bne.n	8003238 <HAL_PCD_IRQHandler+0x58>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80031f0:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80031f4:	d124      	bne.n	8003240 <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80031f6:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80031fa:	d132      	bne.n	8003262 <HAL_PCD_IRQHandler+0x82>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80031fc:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8003200:	d139      	bne.n	8003276 <HAL_PCD_IRQHandler+0x96>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003202:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8003206:	d140      	bne.n	800328a <HAL_PCD_IRQHandler+0xaa>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003208:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800320c:	d167      	bne.n	80032de <HAL_PCD_IRQHandler+0xfe>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800320e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003212:	f040 8081 	bne.w	8003318 <HAL_PCD_IRQHandler+0x138>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003216:	f410 7f00 	tst.w	r0, #512	; 0x200
 800321a:	f040 80ad 	bne.w	8003378 <HAL_PCD_IRQHandler+0x198>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800321e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003222:	d027      	beq.n	8003274 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003224:	6822      	ldr	r2, [r4, #0]
 8003226:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800322a:	b29b      	uxth	r3, r3
 800322c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003230:	b29b      	uxth	r3, r3
 8003232:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8003236:	e01d      	b.n	8003274 <HAL_PCD_IRQHandler+0x94>
    (void)PCD_EP_ISR_Handler(hpcd);
 8003238:	4620      	mov	r0, r4
 800323a:	f7ff fd36 	bl	8002caa <PCD_EP_ISR_Handler>
    return;
 800323e:	e019      	b.n	8003274 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003240:	6822      	ldr	r2, [r4, #0]
 8003242:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003246:	b29b      	uxth	r3, r3
 8003248:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800324c:	b29b      	uxth	r3, r3
 800324e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003252:	4620      	mov	r0, r4
 8003254:	f00e fa09 	bl	801166a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003258:	2100      	movs	r1, #0
 800325a:	4620      	mov	r0, r4
 800325c:	f7ff ffac 	bl	80031b8 <HAL_PCD_SetAddress>
    return;
 8003260:	e008      	b.n	8003274 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003262:	6822      	ldr	r2, [r4, #0]
 8003264:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003268:	b29b      	uxth	r3, r3
 800326a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800326e:	b29b      	uxth	r3, r3
 8003270:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8003274:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003276:	6822      	ldr	r2, [r4, #0]
 8003278:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800327c:	b29b      	uxth	r3, r3
 800327e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003282:	b29b      	uxth	r3, r3
 8003284:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8003288:	e7f4      	b.n	8003274 <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800328a:	6822      	ldr	r2, [r4, #0]
 800328c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003290:	b29b      	uxth	r3, r3
 8003292:	f023 0304 	bic.w	r3, r3, #4
 8003296:	b29b      	uxth	r3, r3
 8003298:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800329c:	6822      	ldr	r2, [r4, #0]
 800329e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f023 0308 	bic.w	r3, r3, #8
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 80032ae:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d00c      	beq.n	80032d0 <HAL_PCD_IRQHandler+0xf0>
    HAL_PCD_ResumeCallback(hpcd);
 80032b6:	4620      	mov	r0, r4
 80032b8:	f00e f9fa 	bl	80116b0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80032bc:	6822      	ldr	r2, [r4, #0]
 80032be:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80032ce:	e7d1      	b.n	8003274 <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 80032d0:	2100      	movs	r1, #0
 80032d2:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032d6:	4620      	mov	r0, r4
 80032d8:	f00e faa2 	bl	8011820 <HAL_PCDEx_LPM_Callback>
 80032dc:	e7eb      	b.n	80032b6 <HAL_PCD_IRQHandler+0xd6>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80032de:	6822      	ldr	r2, [r4, #0]
 80032e0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f043 0308 	orr.w	r3, r3, #8
 80032ea:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80032ee:	6822      	ldr	r2, [r4, #0]
 80032f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003300:	6822      	ldr	r2, [r4, #0]
 8003302:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003306:	b29b      	uxth	r3, r3
 8003308:	f043 0304 	orr.w	r3, r3, #4
 800330c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8003310:	4620      	mov	r0, r4
 8003312:	f00e f9bd 	bl	8011690 <HAL_PCD_SuspendCallback>
    return;
 8003316:	e7ad      	b.n	8003274 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003318:	6822      	ldr	r2, [r4, #0]
 800331a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800331e:	b29b      	uxth	r3, r3
 8003320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003324:	b29b      	uxth	r3, r3
 8003326:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800332a:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 800332e:	b9fb      	cbnz	r3, 8003370 <HAL_PCD_IRQHandler+0x190>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003330:	6822      	ldr	r2, [r4, #0]
 8003332:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003336:	b29b      	uxth	r3, r3
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003340:	6822      	ldr	r2, [r4, #0]
 8003342:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003346:	b29b      	uxth	r3, r3
 8003348:	f043 0308 	orr.w	r3, r3, #8
 800334c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8003350:	2101      	movs	r1, #1
 8003352:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800335c:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8003360:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003364:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003368:	4620      	mov	r0, r4
 800336a:	f00e fa59 	bl	8011820 <HAL_PCDEx_LPM_Callback>
 800336e:	e781      	b.n	8003274 <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_SuspendCallback(hpcd);
 8003370:	4620      	mov	r0, r4
 8003372:	f00e f98d 	bl	8011690 <HAL_PCD_SuspendCallback>
    return;
 8003376:	e77d      	b.n	8003274 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003378:	6822      	ldr	r2, [r4, #0]
 800337a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800337e:	b29b      	uxth	r3, r3
 8003380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003384:	b29b      	uxth	r3, r3
 8003386:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800338a:	4620      	mov	r0, r4
 800338c:	f00e f967 	bl	801165e <HAL_PCD_SOFCallback>
    return;
 8003390:	e770      	b.n	8003274 <HAL_PCD_IRQHandler+0x94>

08003392 <HAL_PCD_EP_Open>:
{
 8003392:	b510      	push	{r4, lr}
 8003394:	4604      	mov	r4, r0
 8003396:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003398:	f011 0f80 	tst.w	r1, #128	; 0x80
 800339c:	d12a      	bne.n	80033f4 <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800339e:	f001 0007 	and.w	r0, r1, #7
 80033a2:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80033a6:	00c9      	lsls	r1, r1, #3
 80033a8:	f501 7eb4 	add.w	lr, r1, #360	; 0x168
 80033ac:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 80033b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033b4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80033b8:	f04f 0e00 	mov.w	lr, #0
 80033bc:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c0:	f00c 0c07 	and.w	ip, ip, #7
 80033c4:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 80033c8:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80033ca:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80033cc:	784a      	ldrb	r2, [r1, #1]
 80033ce:	b10a      	cbz	r2, 80033d4 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 80033d0:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d019      	beq.n	800340c <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 80033d8:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d018      	beq.n	8003412 <HAL_PCD_EP_Open+0x80>
 80033e0:	2301      	movs	r3, #1
 80033e2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033e6:	6820      	ldr	r0, [r4, #0]
 80033e8:	f003 fa9e 	bl	8006928 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033ec:	2000      	movs	r0, #0
 80033ee:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80033f2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f4:	f001 0007 	and.w	r0, r1, #7
 80033f8:	3001      	adds	r0, #1
 80033fa:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80033fe:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8003402:	f04f 0e01 	mov.w	lr, #1
 8003406:	f881 e001 	strb.w	lr, [r1, #1]
 800340a:	e7d9      	b.n	80033c0 <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	710b      	strb	r3, [r1, #4]
 8003410:	e7e2      	b.n	80033d8 <HAL_PCD_EP_Open+0x46>
  __HAL_LOCK(hpcd);
 8003412:	2002      	movs	r0, #2
 8003414:	e7ed      	b.n	80033f2 <HAL_PCD_EP_Open+0x60>

08003416 <HAL_PCD_EP_Close>:
{
 8003416:	b510      	push	{r4, lr}
 8003418:	4604      	mov	r4, r0
 800341a:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800341c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003420:	d11f      	bne.n	8003462 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003422:	f001 0207 	and.w	r2, r1, #7
 8003426:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800342a:	00c9      	lsls	r1, r1, #3
 800342c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003430:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003432:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003436:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800343a:	2000      	movs	r0, #0
 800343c:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003446:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800344a:	2b01      	cmp	r3, #1
 800344c:	d013      	beq.n	8003476 <HAL_PCD_EP_Close+0x60>
 800344e:	2301      	movs	r3, #1
 8003450:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003454:	6820      	ldr	r0, [r4, #0]
 8003456:	f003 fc33 	bl	8006cc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800345a:	2000      	movs	r0, #0
 800345c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003460:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003462:	f001 0207 	and.w	r2, r1, #7
 8003466:	3201      	adds	r2, #1
 8003468:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800346c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003470:	2001      	movs	r0, #1
 8003472:	7048      	strb	r0, [r1, #1]
 8003474:	e7e4      	b.n	8003440 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8003476:	2002      	movs	r0, #2
 8003478:	e7f2      	b.n	8003460 <HAL_PCD_EP_Close+0x4a>

0800347a <HAL_PCD_EP_Receive>:
{
 800347a:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800347c:	f001 0407 	and.w	r4, r1, #7
 8003480:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003484:	00c9      	lsls	r1, r1, #3
 8003486:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800348a:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800348c:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8003490:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8003494:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 8003498:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 80034a2:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80034a6:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034aa:	b924      	cbnz	r4, 80034b6 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80034ac:	6800      	ldr	r0, [r0, #0]
 80034ae:	f003 fd8f 	bl	8006fd0 <USB_EPStartXfer>
}
 80034b2:	2000      	movs	r0, #0
 80034b4:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034b6:	6800      	ldr	r0, [r0, #0]
 80034b8:	f003 fd8a 	bl	8006fd0 <USB_EPStartXfer>
 80034bc:	e7f9      	b.n	80034b2 <HAL_PCD_EP_Receive+0x38>

080034be <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034be:	f001 0107 	and.w	r1, r1, #7
 80034c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80034c6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 80034ca:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 80034ce:	4770      	bx	lr

080034d0 <HAL_PCD_EP_Transmit>:
{
 80034d0:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034d2:	f001 0407 	and.w	r4, r1, #7
 80034d6:	f104 0c01 	add.w	ip, r4, #1
 80034da:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80034de:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 80034e2:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 80034e6:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80034ea:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
  ep->xfer_len = len;
 80034ee:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80034f2:	2201      	movs	r2, #1
 80034f4:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
  ep->xfer_len_db = len;
 80034f8:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  ep->xfer_count = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
  ep->is_in = 1U;
 8003502:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003504:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003508:	f800 403c 	strb.w	r4, [r0, ip, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800350c:	b924      	cbnz	r4, 8003518 <HAL_PCD_EP_Transmit+0x48>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800350e:	6800      	ldr	r0, [r0, #0]
 8003510:	f003 fd5e 	bl	8006fd0 <USB_EPStartXfer>
}
 8003514:	2000      	movs	r0, #0
 8003516:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003518:	6800      	ldr	r0, [r0, #0]
 800351a:	f003 fd59 	bl	8006fd0 <USB_EPStartXfer>
 800351e:	e7f9      	b.n	8003514 <HAL_PCD_EP_Transmit+0x44>

08003520 <HAL_PCD_EP_SetStall>:
{
 8003520:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003522:	f001 0207 	and.w	r2, r1, #7
 8003526:	6841      	ldr	r1, [r0, #4]
 8003528:	428a      	cmp	r2, r1
 800352a:	d82a      	bhi.n	8003582 <HAL_PCD_EP_SetStall+0x62>
{
 800352c:	b510      	push	{r4, lr}
 800352e:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8003530:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003534:	d11d      	bne.n	8003572 <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 8003536:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800353a:	00c9      	lsls	r1, r1, #3
 800353c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003540:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003542:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003546:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800354a:	2000      	movs	r0, #0
 800354c:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8003550:	2301      	movs	r3, #1
 8003552:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003554:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003556:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800355a:	2b01      	cmp	r3, #1
 800355c:	d013      	beq.n	8003586 <HAL_PCD_EP_SetStall+0x66>
 800355e:	2301      	movs	r3, #1
 8003560:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003564:	6820      	ldr	r0, [r4, #0]
 8003566:	f003 fc96 	bl	8006e96 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800356a:	2000      	movs	r0, #0
 800356c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003570:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003572:	1c53      	adds	r3, r2, #1
 8003574:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003578:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800357c:	2001      	movs	r0, #1
 800357e:	7048      	strb	r0, [r1, #1]
 8003580:	e7e6      	b.n	8003550 <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 8003582:	2001      	movs	r0, #1
}
 8003584:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003586:	2002      	movs	r0, #2
 8003588:	e7f2      	b.n	8003570 <HAL_PCD_EP_SetStall+0x50>

0800358a <HAL_PCD_EP_ClrStall>:
{
 800358a:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800358c:	f001 010f 	and.w	r1, r1, #15
 8003590:	6842      	ldr	r2, [r0, #4]
 8003592:	4291      	cmp	r1, r2
 8003594:	d830      	bhi.n	80035f8 <HAL_PCD_EP_ClrStall+0x6e>
{
 8003596:	b510      	push	{r4, lr}
 8003598:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800359a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800359e:	d121      	bne.n	80035e4 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035a0:	f003 0207 	and.w	r2, r3, #7
 80035a4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80035a8:	00c9      	lsls	r1, r1, #3
 80035aa:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80035ae:	4401      	add	r1, r0
    ep->is_in = 0U;
 80035b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80035b4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80035b8:	2000      	movs	r0, #0
 80035ba:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 80035be:	2200      	movs	r2, #0
 80035c0:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80035c8:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d015      	beq.n	80035fc <HAL_PCD_EP_ClrStall+0x72>
 80035d0:	2301      	movs	r3, #1
 80035d2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035d6:	6820      	ldr	r0, [r4, #0]
 80035d8:	f003 fc82 	bl	8006ee0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035dc:	2000      	movs	r0, #0
 80035de:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80035e2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e4:	f003 0207 	and.w	r2, r3, #7
 80035e8:	3201      	adds	r2, #1
 80035ea:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80035ee:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80035f2:	2001      	movs	r0, #1
 80035f4:	7048      	strb	r0, [r1, #1]
 80035f6:	e7e2      	b.n	80035be <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 80035f8:	2001      	movs	r0, #1
}
 80035fa:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80035fc:	2002      	movs	r0, #2
 80035fe:	e7f0      	b.n	80035e2 <HAL_PCD_EP_ClrStall+0x58>

08003600 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003600:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003604:	d00b      	beq.n	800361e <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003606:	f001 0107 	and.w	r1, r1, #7
 800360a:	3101      	adds	r1, #1
 800360c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003610:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003614:	b952      	cbnz	r2, 800362c <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003616:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003618:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800361a:	2000      	movs	r0, #0
 800361c:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800361e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003622:	00c9      	lsls	r1, r1, #3
 8003624:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003628:	4408      	add	r0, r1
 800362a:	e7f3      	b.n	8003614 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 800362c:	2201      	movs	r2, #1
 800362e:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003630:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	8143      	strh	r3, [r0, #10]
 8003636:	e7f0      	b.n	800361a <HAL_PCDEx_PMAConfig+0x1a>

08003638 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003638:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 800363a:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 800363c:	2101      	movs	r1, #1
 800363e:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003642:	2000      	movs	r0, #0
 8003644:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003648:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800364c:	b29b      	uxth	r3, r3
 800364e:	430b      	orrs	r3, r1
 8003650:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003654:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8003658:	b29b      	uxth	r3, r3
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003662:	4770      	bx	lr

08003664 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003664:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8003666:	4604      	mov	r4, r0
 8003668:	b128      	cbz	r0, 8003676 <HAL_PWREx_ControlVoltageScaling+0x12>
 800366a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800366e:	d002      	beq.n	8003676 <HAL_PWREx_ControlVoltageScaling+0x12>
 8003670:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003674:	d111      	bne.n	800369a <HAL_PWREx_ControlVoltageScaling+0x36>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003676:	2c00      	cmp	r4, #0
 8003678:	d13b      	bne.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0x8e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800367a:	4b41      	ldr	r3, [pc, #260]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003686:	d00d      	beq.n	80036a4 <HAL_PWREx_ControlVoltageScaling+0x40>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003688:	4a3d      	ldr	r2, [pc, #244]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800368a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800368e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003692:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003696:	2000      	movs	r0, #0
}
 8003698:	bd10      	pop	{r4, pc}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800369a:	219d      	movs	r1, #157	; 0x9d
 800369c:	4839      	ldr	r0, [pc, #228]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x120>)
 800369e:	f7fd fb0b 	bl	8000cb8 <assert_failed>
 80036a2:	e7e8      	b.n	8003676 <HAL_PWREx_ControlVoltageScaling+0x12>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036a4:	4a36      	ldr	r2, [pc, #216]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 80036a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80036aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036b2:	6813      	ldr	r3, [r2, #0]
 80036b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036bc:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036be:	4b32      	ldr	r3, [pc, #200]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x124>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2232      	movs	r2, #50	; 0x32
 80036c4:	fb02 f303 	mul.w	r3, r2, r3
 80036c8:	4a30      	ldr	r2, [pc, #192]	; (800378c <HAL_PWREx_ControlVoltageScaling+0x128>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	0c9b      	lsrs	r3, r3, #18
 80036d0:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d2:	e000      	b.n	80036d6 <HAL_PWREx_ControlVoltageScaling+0x72>
        wait_loop_index--;
 80036d4:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d6:	4a2a      	ldr	r2, [pc, #168]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 80036d8:	6952      	ldr	r2, [r2, #20]
 80036da:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80036de:	d001      	beq.n	80036e4 <HAL_PWREx_ControlVoltageScaling+0x80>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f7      	bne.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0x70>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036e4:	4b26      	ldr	r3, [pc, #152]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80036ec:	d144      	bne.n	8003778 <HAL_PWREx_ControlVoltageScaling+0x114>
  return HAL_OK;
 80036ee:	2000      	movs	r0, #0
 80036f0:	e7d2      	b.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x34>
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036f2:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80036f6:	d008      	beq.n	800370a <HAL_PWREx_ControlVoltageScaling+0xa6>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036f8:	4a21      	ldr	r2, [pc, #132]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 80036fa:	6813      	ldr	r3, [r2, #0]
 80036fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003700:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003704:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003706:	2000      	movs	r0, #0
 8003708:	e7c6      	b.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800370a:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003716:	d008      	beq.n	800372a <HAL_PWREx_ControlVoltageScaling+0xc6>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003718:	4a19      	ldr	r2, [pc, #100]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800371a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800371e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003722:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8003726:	2000      	movs	r0, #0
 8003728:	e7b6      	b.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x34>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800372a:	4a15      	ldr	r2, [pc, #84]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800372c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003738:	6813      	ldr	r3, [r2, #0]
 800373a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800373e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003742:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003744:	4b10      	ldr	r3, [pc, #64]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x124>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2232      	movs	r2, #50	; 0x32
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	4a0f      	ldr	r2, [pc, #60]	; (800378c <HAL_PWREx_ControlVoltageScaling+0x128>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	0c9b      	lsrs	r3, r3, #18
 8003756:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003758:	e000      	b.n	800375c <HAL_PWREx_ControlVoltageScaling+0xf8>
        wait_loop_index--;
 800375a:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800375c:	4a08      	ldr	r2, [pc, #32]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800375e:	6952      	ldr	r2, [r2, #20]
 8003760:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003764:	d001      	beq.n	800376a <HAL_PWREx_ControlVoltageScaling+0x106>
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f7      	bne.n	800375a <HAL_PWREx_ControlVoltageScaling+0xf6>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800376a:	4b05      	ldr	r3, [pc, #20]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003772:	d103      	bne.n	800377c <HAL_PWREx_ControlVoltageScaling+0x118>
  return HAL_OK;
 8003774:	2000      	movs	r0, #0
 8003776:	e78f      	b.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8003778:	2003      	movs	r0, #3
 800377a:	e78d      	b.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 800377c:	2003      	movs	r0, #3
 800377e:	e78b      	b.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x34>
 8003780:	40007000 	.word	0x40007000
 8003784:	08012f90 	.word	0x08012f90
 8003788:	20000000 	.word	0x20000000
 800378c:	431bde83 	.word	0x431bde83

08003790 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003790:	4b12      	ldr	r3, [pc, #72]	; (80037dc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800379e:	3301      	adds	r3, #1

  switch (pllsource)
 80037a0:	2a03      	cmp	r2, #3
 80037a2:	d011      	beq.n	80037c8 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037a4:	480e      	ldr	r0, [pc, #56]	; (80037e0 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 80037a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80037aa:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80037b2:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80037be:	3301      	adds	r3, #1
 80037c0:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 80037c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80037c6:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037c8:	4805      	ldr	r0, [pc, #20]	; (80037e0 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 80037ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80037ce:	4b03      	ldr	r3, [pc, #12]	; (80037dc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80037d6:	fb03 f000 	mul.w	r0, r3, r0
    break;
 80037da:	e7ec      	b.n	80037b6 <RCC_GetSysClockFreqFromPLLSource+0x26>
 80037dc:	40021000 	.word	0x40021000
 80037e0:	00f42400 	.word	0x00f42400

080037e4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80037e4:	2800      	cmp	r0, #0
 80037e6:	f000 8301 	beq.w	8003dec <HAL_RCC_OscConfig+0x608>
{
 80037ea:	b570      	push	{r4, r5, r6, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80037f0:	6803      	ldr	r3, [r0, #0]
 80037f2:	b113      	cbz	r3, 80037fa <HAL_RCC_OscConfig+0x16>
 80037f4:	f013 0f2f 	tst.w	r3, #47	; 0x2f
 80037f8:	d038      	beq.n	800386c <HAL_RCC_OscConfig+0x88>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	f013 0f01 	tst.w	r3, #1
 8003800:	d04b      	beq.n	800389a <HAL_RCC_OscConfig+0xb6>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003802:	6863      	ldr	r3, [r4, #4]
 8003804:	b12b      	cbz	r3, 8003812 <HAL_RCC_OscConfig+0x2e>
 8003806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380a:	d002      	beq.n	8003812 <HAL_RCC_OscConfig+0x2e>
 800380c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003810:	d132      	bne.n	8003878 <HAL_RCC_OscConfig+0x94>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003812:	4a8b      	ldr	r2, [pc, #556]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 8003814:	6893      	ldr	r3, [r2, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800381a:	68d2      	ldr	r2, [r2, #12]
 800381c:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003820:	2b0c      	cmp	r3, #12
 8003822:	d02f      	beq.n	8003884 <HAL_RCC_OscConfig+0xa0>
 8003824:	2b08      	cmp	r3, #8
 8003826:	d02f      	beq.n	8003888 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003828:	6863      	ldr	r3, [r4, #4]
 800382a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382e:	d063      	beq.n	80038f8 <HAL_RCC_OscConfig+0x114>
 8003830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003834:	d066      	beq.n	8003904 <HAL_RCC_OscConfig+0x120>
 8003836:	4b82      	ldr	r3, [pc, #520]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003846:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003848:	6863      	ldr	r3, [r4, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d067      	beq.n	800391e <HAL_RCC_OscConfig+0x13a>
        tickstart = HAL_GetTick();
 800384e:	f7fd fd03 	bl	8001258 <HAL_GetTick>
 8003852:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003854:	4b7a      	ldr	r3, [pc, #488]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800385c:	d11d      	bne.n	800389a <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800385e:	f7fd fcfb 	bl	8001258 <HAL_GetTick>
 8003862:	1b40      	subs	r0, r0, r5
 8003864:	2864      	cmp	r0, #100	; 0x64
 8003866:	d9f5      	bls.n	8003854 <HAL_RCC_OscConfig+0x70>
            return HAL_TIMEOUT;
 8003868:	2003      	movs	r0, #3
 800386a:	e2c8      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800386c:	f240 1145 	movw	r1, #325	; 0x145
 8003870:	4874      	ldr	r0, [pc, #464]	; (8003a44 <HAL_RCC_OscConfig+0x260>)
 8003872:	f7fd fa21 	bl	8000cb8 <assert_failed>
 8003876:	e7c0      	b.n	80037fa <HAL_RCC_OscConfig+0x16>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003878:	f240 114b 	movw	r1, #331	; 0x14b
 800387c:	4871      	ldr	r0, [pc, #452]	; (8003a44 <HAL_RCC_OscConfig+0x260>)
 800387e:	f7fd fa1b 	bl	8000cb8 <assert_failed>
 8003882:	e7c6      	b.n	8003812 <HAL_RCC_OscConfig+0x2e>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003884:	2a03      	cmp	r2, #3
 8003886:	d1cd      	bne.n	8003824 <HAL_RCC_OscConfig+0x40>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	4b6d      	ldr	r3, [pc, #436]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003890:	d003      	beq.n	800389a <HAL_RCC_OscConfig+0xb6>
 8003892:	6863      	ldr	r3, [r4, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 82ab 	beq.w	8003df0 <HAL_RCC_OscConfig+0x60c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	f013 0f02 	tst.w	r3, #2
 80038a0:	d072      	beq.n	8003988 <HAL_RCC_OscConfig+0x1a4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80038a2:	68e3      	ldr	r3, [r4, #12]
 80038a4:	b113      	cbz	r3, 80038ac <HAL_RCC_OscConfig+0xc8>
 80038a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038aa:	d147      	bne.n	800393c <HAL_RCC_OscConfig+0x158>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80038ac:	6923      	ldr	r3, [r4, #16]
 80038ae:	2b7f      	cmp	r3, #127	; 0x7f
 80038b0:	d84a      	bhi.n	8003948 <HAL_RCC_OscConfig+0x164>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b2:	4a63      	ldr	r2, [pc, #396]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 80038b4:	6893      	ldr	r3, [r2, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ba:	68d2      	ldr	r2, [r2, #12]
 80038bc:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038c0:	2b0c      	cmp	r3, #12
 80038c2:	d047      	beq.n	8003954 <HAL_RCC_OscConfig+0x170>
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d047      	beq.n	8003958 <HAL_RCC_OscConfig+0x174>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038c8:	68e3      	ldr	r3, [r4, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8086 	beq.w	80039dc <HAL_RCC_OscConfig+0x1f8>
        __HAL_RCC_HSI_ENABLE();
 80038d0:	4a5b      	ldr	r2, [pc, #364]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 80038d2:	6813      	ldr	r3, [r2, #0]
 80038d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80038da:	f7fd fcbd 	bl	8001258 <HAL_GetTick>
 80038de:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e0:	4b57      	ldr	r3, [pc, #348]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80038e8:	d16f      	bne.n	80039ca <HAL_RCC_OscConfig+0x1e6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ea:	f7fd fcb5 	bl	8001258 <HAL_GetTick>
 80038ee:	1b40      	subs	r0, r0, r5
 80038f0:	2802      	cmp	r0, #2
 80038f2:	d9f5      	bls.n	80038e0 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 80038f4:	2003      	movs	r0, #3
 80038f6:	e282      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f8:	4a51      	ldr	r2, [pc, #324]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 80038fa:	6813      	ldr	r3, [r2, #0]
 80038fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	e7a1      	b.n	8003848 <HAL_RCC_OscConfig+0x64>
 8003904:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003908:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	e794      	b.n	8003848 <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
 800391e:	f7fd fc9b 	bl	8001258 <HAL_GetTick>
 8003922:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003924:	4b46      	ldr	r3, [pc, #280]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800392c:	d0b5      	beq.n	800389a <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392e:	f7fd fc93 	bl	8001258 <HAL_GetTick>
 8003932:	1b40      	subs	r0, r0, r5
 8003934:	2864      	cmp	r0, #100	; 0x64
 8003936:	d9f5      	bls.n	8003924 <HAL_RCC_OscConfig+0x140>
            return HAL_TIMEOUT;
 8003938:	2003      	movs	r0, #3
 800393a:	e260      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800393c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8003940:	4840      	ldr	r0, [pc, #256]	; (8003a44 <HAL_RCC_OscConfig+0x260>)
 8003942:	f7fd f9b9 	bl	8000cb8 <assert_failed>
 8003946:	e7b1      	b.n	80038ac <HAL_RCC_OscConfig+0xc8>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003948:	f240 1181 	movw	r1, #385	; 0x181
 800394c:	483d      	ldr	r0, [pc, #244]	; (8003a44 <HAL_RCC_OscConfig+0x260>)
 800394e:	f7fd f9b3 	bl	8000cb8 <assert_failed>
 8003952:	e7ae      	b.n	80038b2 <HAL_RCC_OscConfig+0xce>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003954:	2a02      	cmp	r2, #2
 8003956:	d1b5      	bne.n	80038c4 <HAL_RCC_OscConfig+0xe0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003958:	4b39      	ldr	r3, [pc, #228]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003960:	d003      	beq.n	800396a <HAL_RCC_OscConfig+0x186>
 8003962:	68e3      	ldr	r3, [r4, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8245 	beq.w	8003df4 <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396a:	4a35      	ldr	r2, [pc, #212]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 800396c:	6853      	ldr	r3, [r2, #4]
 800396e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003972:	6921      	ldr	r1, [r4, #16]
 8003974:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003978:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800397a:	4b33      	ldr	r3, [pc, #204]	; (8003a48 <HAL_RCC_OscConfig+0x264>)
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	f7fd fa51 	bl	8000e24 <HAL_InitTick>
 8003982:	2800      	cmp	r0, #0
 8003984:	f040 8238 	bne.w	8003df8 <HAL_RCC_OscConfig+0x614>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	f013 0f08 	tst.w	r3, #8
 800398e:	d05d      	beq.n	8003a4c <HAL_RCC_OscConfig+0x268>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003990:	6963      	ldr	r3, [r4, #20]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d836      	bhi.n	8003a04 <HAL_RCC_OscConfig+0x220>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003996:	6963      	ldr	r3, [r4, #20]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d039      	beq.n	8003a10 <HAL_RCC_OscConfig+0x22c>
      __HAL_RCC_LSI_ENABLE();
 800399c:	4a28      	ldr	r2, [pc, #160]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 800399e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80039aa:	f7fd fc55 	bl	8001258 <HAL_GetTick>
 80039ae:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039b0:	4b23      	ldr	r3, [pc, #140]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 80039b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b6:	f013 0f02 	tst.w	r3, #2
 80039ba:	d147      	bne.n	8003a4c <HAL_RCC_OscConfig+0x268>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039bc:	f7fd fc4c 	bl	8001258 <HAL_GetTick>
 80039c0:	1b40      	subs	r0, r0, r5
 80039c2:	2802      	cmp	r0, #2
 80039c4:	d9f4      	bls.n	80039b0 <HAL_RCC_OscConfig+0x1cc>
          return HAL_TIMEOUT;
 80039c6:	2003      	movs	r0, #3
 80039c8:	e219      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ca:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 80039cc:	6853      	ldr	r3, [r2, #4]
 80039ce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80039d2:	6921      	ldr	r1, [r4, #16]
 80039d4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80039d8:	6053      	str	r3, [r2, #4]
 80039da:	e7d5      	b.n	8003988 <HAL_RCC_OscConfig+0x1a4>
        __HAL_RCC_HSI_DISABLE();
 80039dc:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 80039de:	6813      	ldr	r3, [r2, #0]
 80039e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80039e6:	f7fd fc37 	bl	8001258 <HAL_GetTick>
 80039ea:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039ec:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80039f4:	d0c8      	beq.n	8003988 <HAL_RCC_OscConfig+0x1a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f6:	f7fd fc2f 	bl	8001258 <HAL_GetTick>
 80039fa:	1b40      	subs	r0, r0, r5
 80039fc:	2802      	cmp	r0, #2
 80039fe:	d9f5      	bls.n	80039ec <HAL_RCC_OscConfig+0x208>
            return HAL_TIMEOUT;
 8003a00:	2003      	movs	r0, #3
 8003a02:	e1fc      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003a04:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8003a08:	480e      	ldr	r0, [pc, #56]	; (8003a44 <HAL_RCC_OscConfig+0x260>)
 8003a0a:	f7fd f955 	bl	8000cb8 <assert_failed>
 8003a0e:	e7c2      	b.n	8003996 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_LSI_DISABLE();
 8003a10:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 8003a12:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003a1e:	f7fd fc1b 	bl	8001258 <HAL_GetTick>
 8003a22:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_RCC_OscConfig+0x25c>)
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2a:	f013 0f02 	tst.w	r3, #2
 8003a2e:	d00d      	beq.n	8003a4c <HAL_RCC_OscConfig+0x268>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a30:	f7fd fc12 	bl	8001258 <HAL_GetTick>
 8003a34:	1b40      	subs	r0, r0, r5
 8003a36:	2802      	cmp	r0, #2
 8003a38:	d9f4      	bls.n	8003a24 <HAL_RCC_OscConfig+0x240>
          return HAL_TIMEOUT;
 8003a3a:	2003      	movs	r0, #3
 8003a3c:	e1df      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	08012fcc 	.word	0x08012fcc
 8003a48:	20000008 	.word	0x20000008
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	f013 0f04 	tst.w	r3, #4
 8003a52:	f000 8086 	beq.w	8003b62 <HAL_RCC_OscConfig+0x37e>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003a56:	68a3      	ldr	r3, [r4, #8]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x27c>
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d13b      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x2f4>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a60:	4b9e      	ldr	r3, [pc, #632]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003a68:	d13c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x300>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6a:	4b9c      	ldr	r3, [pc, #624]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003a6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a72:	659a      	str	r2, [r3, #88]	; 0x58
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003a7e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a80:	4b97      	ldr	r3, [pc, #604]	; (8003ce0 <HAL_RCC_OscConfig+0x4fc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a88:	d02e      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a8a:	68a3      	ldr	r3, [r4, #8]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d03f      	beq.n	8003b10 <HAL_RCC_OscConfig+0x32c>
 8003a90:	2b05      	cmp	r3, #5
 8003a92:	d045      	beq.n	8003b20 <HAL_RCC_OscConfig+0x33c>
 8003a94:	4b91      	ldr	r3, [pc, #580]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003a96:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003aa2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003aa6:	f022 0204 	bic.w	r2, r2, #4
 8003aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aae:	68a3      	ldr	r3, [r4, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d043      	beq.n	8003b3c <HAL_RCC_OscConfig+0x358>
      tickstart = HAL_GetTick();
 8003ab4:	f7fd fbd0 	bl	8001258 <HAL_GetTick>
 8003ab8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aba:	4b88      	ldr	r3, [pc, #544]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac0:	f013 0f02 	tst.w	r3, #2
 8003ac4:	d14c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fd fbc7 	bl	8001258 <HAL_GetTick>
 8003aca:	1b80      	subs	r0, r0, r6
 8003acc:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ad0:	4298      	cmp	r0, r3
 8003ad2:	d9f2      	bls.n	8003aba <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 8003ad4:	2003      	movs	r0, #3
 8003ad6:	e192      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003ad8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003adc:	4881      	ldr	r0, [pc, #516]	; (8003ce4 <HAL_RCC_OscConfig+0x500>)
 8003ade:	f7fd f8eb 	bl	8000cb8 <assert_failed>
 8003ae2:	e7bd      	b.n	8003a60 <HAL_RCC_OscConfig+0x27c>
    FlagStatus       pwrclkchanged = RESET;
 8003ae4:	2500      	movs	r5, #0
 8003ae6:	e7cb      	b.n	8003a80 <HAL_RCC_OscConfig+0x29c>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae8:	4a7d      	ldr	r2, [pc, #500]	; (8003ce0 <HAL_RCC_OscConfig+0x4fc>)
 8003aea:	6813      	ldr	r3, [r2, #0]
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003af2:	f7fd fbb1 	bl	8001258 <HAL_GetTick>
 8003af6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af8:	4b79      	ldr	r3, [pc, #484]	; (8003ce0 <HAL_RCC_OscConfig+0x4fc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b00:	d1c3      	bne.n	8003a8a <HAL_RCC_OscConfig+0x2a6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b02:	f7fd fba9 	bl	8001258 <HAL_GetTick>
 8003b06:	1b80      	subs	r0, r0, r6
 8003b08:	2802      	cmp	r0, #2
 8003b0a:	d9f5      	bls.n	8003af8 <HAL_RCC_OscConfig+0x314>
          return HAL_TIMEOUT;
 8003b0c:	2003      	movs	r0, #3
 8003b0e:	e176      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b10:	4a72      	ldr	r2, [pc, #456]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003b12:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b1e:	e7c6      	b.n	8003aae <HAL_RCC_OscConfig+0x2ca>
 8003b20:	4b6e      	ldr	r3, [pc, #440]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003b22:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003b26:	f042 0204 	orr.w	r2, r2, #4
 8003b2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003b2e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003b3a:	e7b8      	b.n	8003aae <HAL_RCC_OscConfig+0x2ca>
      tickstart = HAL_GetTick();
 8003b3c:	f7fd fb8c 	bl	8001258 <HAL_GetTick>
 8003b40:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b42:	4b66      	ldr	r3, [pc, #408]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b48:	f013 0f02 	tst.w	r3, #2
 8003b4c:	d008      	beq.n	8003b60 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fd fb83 	bl	8001258 <HAL_GetTick>
 8003b52:	1b80      	subs	r0, r0, r6
 8003b54:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b58:	4298      	cmp	r0, r3
 8003b5a:	d9f2      	bls.n	8003b42 <HAL_RCC_OscConfig+0x35e>
          return HAL_TIMEOUT;
 8003b5c:	2003      	movs	r0, #3
 8003b5e:	e14e      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
    if (pwrclkchanged == SET)
 8003b60:	b9fd      	cbnz	r5, 8003ba2 <HAL_RCC_OscConfig+0x3be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	f013 0f20 	tst.w	r3, #32
 8003b68:	d03e      	beq.n	8003be8 <HAL_RCC_OscConfig+0x404>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003b6a:	69a3      	ldr	r3, [r4, #24]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d81e      	bhi.n	8003bae <HAL_RCC_OscConfig+0x3ca>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b70:	69a3      	ldr	r3, [r4, #24]
 8003b72:	b313      	cbz	r3, 8003bba <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSI48_ENABLE();
 8003b74:	4a59      	ldr	r2, [pc, #356]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003b76:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003b82:	f7fd fb69 	bl	8001258 <HAL_GetTick>
 8003b86:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b88:	4b54      	ldr	r3, [pc, #336]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b8e:	f013 0f02 	tst.w	r3, #2
 8003b92:	d129      	bne.n	8003be8 <HAL_RCC_OscConfig+0x404>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b94:	f7fd fb60 	bl	8001258 <HAL_GetTick>
 8003b98:	1b40      	subs	r0, r0, r5
 8003b9a:	2802      	cmp	r0, #2
 8003b9c:	d9f4      	bls.n	8003b88 <HAL_RCC_OscConfig+0x3a4>
          return HAL_TIMEOUT;
 8003b9e:	2003      	movs	r0, #3
 8003ba0:	e12d      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba2:	4a4e      	ldr	r2, [pc, #312]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003ba4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003baa:	6593      	str	r3, [r2, #88]	; 0x58
 8003bac:	e7d9      	b.n	8003b62 <HAL_RCC_OscConfig+0x37e>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003bae:	f240 213b 	movw	r1, #571	; 0x23b
 8003bb2:	484c      	ldr	r0, [pc, #304]	; (8003ce4 <HAL_RCC_OscConfig+0x500>)
 8003bb4:	f7fd f880 	bl	8000cb8 <assert_failed>
 8003bb8:	e7da      	b.n	8003b70 <HAL_RCC_OscConfig+0x38c>
      __HAL_RCC_HSI48_DISABLE();
 8003bba:	4a48      	ldr	r2, [pc, #288]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003bbc:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003bc8:	f7fd fb46 	bl	8001258 <HAL_GetTick>
 8003bcc:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bce:	4b43      	ldr	r3, [pc, #268]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd4:	f013 0f02 	tst.w	r3, #2
 8003bd8:	d006      	beq.n	8003be8 <HAL_RCC_OscConfig+0x404>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bda:	f7fd fb3d 	bl	8001258 <HAL_GetTick>
 8003bde:	1b40      	subs	r0, r0, r5
 8003be0:	2802      	cmp	r0, #2
 8003be2:	d9f4      	bls.n	8003bce <HAL_RCC_OscConfig+0x3ea>
          return HAL_TIMEOUT;
 8003be4:	2003      	movs	r0, #3
 8003be6:	e10a      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003be8:	69e3      	ldr	r3, [r4, #28]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d84b      	bhi.n	8003c86 <HAL_RCC_OscConfig+0x4a2>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bee:	69e3      	ldr	r3, [r4, #28]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8103 	beq.w	8003dfc <HAL_RCC_OscConfig+0x618>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bf6:	4a39      	ldr	r2, [pc, #228]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003bf8:	6892      	ldr	r2, [r2, #8]
 8003bfa:	f002 020c 	and.w	r2, r2, #12
 8003bfe:	2a0c      	cmp	r2, #12
 8003c00:	f000 80c6 	beq.w	8003d90 <HAL_RCC_OscConfig+0x5ac>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	f040 80a3 	bne.w	8003d50 <HAL_RCC_OscConfig+0x56c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003c0a:	6a23      	ldr	r3, [r4, #32]
 8003c0c:	b11b      	cbz	r3, 8003c16 <HAL_RCC_OscConfig+0x432>
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x432>
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d13d      	bne.n	8003c92 <HAL_RCC_OscConfig+0x4ae>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	2b0f      	cmp	r3, #15
 8003c1c:	d83f      	bhi.n	8003c9e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003c1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c20:	3b08      	subs	r3, #8
 8003c22:	2b77      	cmp	r3, #119	; 0x77
 8003c24:	d841      	bhi.n	8003caa <HAL_RCC_OscConfig+0x4c6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003c26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c28:	3b02      	subs	r3, #2
 8003c2a:	2b1d      	cmp	r3, #29
 8003c2c:	d843      	bhi.n	8003cb6 <HAL_RCC_OscConfig+0x4d2>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003c2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d008      	beq.n	8003c46 <HAL_RCC_OscConfig+0x462>
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d844      	bhi.n	8003cc2 <HAL_RCC_OscConfig+0x4de>
 8003c38:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c40:	f013 0f01 	tst.w	r3, #1
 8003c44:	d03d      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x4de>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003c46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCC_OscConfig+0x47a>
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d83e      	bhi.n	8003cce <HAL_RCC_OscConfig+0x4ea>
 8003c50:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
 8003c58:	f013 0f01 	tst.w	r3, #1
 8003c5c:	d037      	beq.n	8003cce <HAL_RCC_OscConfig+0x4ea>
        __HAL_RCC_PLL_DISABLE();
 8003c5e:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003c60:	6813      	ldr	r3, [r2, #0]
 8003c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c66:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c68:	f7fd faf6 	bl	8001258 <HAL_GetTick>
 8003c6c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c6e:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <HAL_RCC_OscConfig+0x4f8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c76:	d037      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x504>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fd faee 	bl	8001258 <HAL_GetTick>
 8003c7c:	1b40      	subs	r0, r0, r5
 8003c7e:	2802      	cmp	r0, #2
 8003c80:	d9f5      	bls.n	8003c6e <HAL_RCC_OscConfig+0x48a>
            return HAL_TIMEOUT;
 8003c82:	2003      	movs	r0, #3
 8003c84:	e0bb      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003c86:	f44f 7119 	mov.w	r1, #612	; 0x264
 8003c8a:	4816      	ldr	r0, [pc, #88]	; (8003ce4 <HAL_RCC_OscConfig+0x500>)
 8003c8c:	f7fd f814 	bl	8000cb8 <assert_failed>
 8003c90:	e7ad      	b.n	8003bee <HAL_RCC_OscConfig+0x40a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003c92:	f240 216e 	movw	r1, #622	; 0x26e
 8003c96:	4813      	ldr	r0, [pc, #76]	; (8003ce4 <HAL_RCC_OscConfig+0x500>)
 8003c98:	f7fd f80e 	bl	8000cb8 <assert_failed>
 8003c9c:	e7bb      	b.n	8003c16 <HAL_RCC_OscConfig+0x432>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003c9e:	f240 216f 	movw	r1, #623	; 0x26f
 8003ca2:	4810      	ldr	r0, [pc, #64]	; (8003ce4 <HAL_RCC_OscConfig+0x500>)
 8003ca4:	f7fd f808 	bl	8000cb8 <assert_failed>
 8003ca8:	e7b9      	b.n	8003c1e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003caa:	f44f 711c 	mov.w	r1, #624	; 0x270
 8003cae:	480d      	ldr	r0, [pc, #52]	; (8003ce4 <HAL_RCC_OscConfig+0x500>)
 8003cb0:	f7fd f802 	bl	8000cb8 <assert_failed>
 8003cb4:	e7b7      	b.n	8003c26 <HAL_RCC_OscConfig+0x442>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003cb6:	f240 2171 	movw	r1, #625	; 0x271
 8003cba:	480a      	ldr	r0, [pc, #40]	; (8003ce4 <HAL_RCC_OscConfig+0x500>)
 8003cbc:	f7fc fffc 	bl	8000cb8 <assert_failed>
 8003cc0:	e7b5      	b.n	8003c2e <HAL_RCC_OscConfig+0x44a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003cc2:	f240 2172 	movw	r1, #626	; 0x272
 8003cc6:	4807      	ldr	r0, [pc, #28]	; (8003ce4 <HAL_RCC_OscConfig+0x500>)
 8003cc8:	f7fc fff6 	bl	8000cb8 <assert_failed>
 8003ccc:	e7bb      	b.n	8003c46 <HAL_RCC_OscConfig+0x462>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003cce:	f240 2173 	movw	r1, #627	; 0x273
 8003cd2:	4804      	ldr	r0, [pc, #16]	; (8003ce4 <HAL_RCC_OscConfig+0x500>)
 8003cd4:	f7fc fff0 	bl	8000cb8 <assert_failed>
 8003cd8:	e7c1      	b.n	8003c5e <HAL_RCC_OscConfig+0x47a>
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	08012fcc 	.word	0x08012fcc
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ce8:	4a4d      	ldr	r2, [pc, #308]	; (8003e20 <HAL_RCC_OscConfig+0x63c>)
 8003cea:	68d3      	ldr	r3, [r2, #12]
 8003cec:	494d      	ldr	r1, [pc, #308]	; (8003e24 <HAL_RCC_OscConfig+0x640>)
 8003cee:	4019      	ands	r1, r3
 8003cf0:	6a23      	ldr	r3, [r4, #32]
 8003cf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003cf4:	3801      	subs	r0, #1
 8003cf6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003cfa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003cfc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003d00:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003d02:	0840      	lsrs	r0, r0, #1
 8003d04:	3801      	subs	r0, #1
 8003d06:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8003d0a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003d0c:	0840      	lsrs	r0, r0, #1
 8003d0e:	3801      	subs	r0, #1
 8003d10:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8003d14:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003d16:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8003d1a:	4319      	orrs	r1, r3
 8003d1c:	60d1      	str	r1, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8003d1e:	6813      	ldr	r3, [r2, #0]
 8003d20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d24:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d26:	68d3      	ldr	r3, [r2, #12]
 8003d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2c:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003d2e:	f7fd fa93 	bl	8001258 <HAL_GetTick>
 8003d32:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d34:	4b3a      	ldr	r3, [pc, #232]	; (8003e20 <HAL_RCC_OscConfig+0x63c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d3c:	d106      	bne.n	8003d4c <HAL_RCC_OscConfig+0x568>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fd fa8b 	bl	8001258 <HAL_GetTick>
 8003d42:	1b00      	subs	r0, r0, r4
 8003d44:	2802      	cmp	r0, #2
 8003d46:	d9f5      	bls.n	8003d34 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8003d48:	2003      	movs	r0, #3
 8003d4a:	e058      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	e056      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_PLL_DISABLE();
 8003d50:	4b33      	ldr	r3, [pc, #204]	; (8003e20 <HAL_RCC_OscConfig+0x63c>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003d58:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	f022 0203 	bic.w	r2, r2, #3
 8003d60:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8003d68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d6c:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8003d6e:	f7fd fa73 	bl	8001258 <HAL_GetTick>
 8003d72:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d74:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <HAL_RCC_OscConfig+0x63c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d7c:	d006      	beq.n	8003d8c <HAL_RCC_OscConfig+0x5a8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fd fa6b 	bl	8001258 <HAL_GetTick>
 8003d82:	1b00      	subs	r0, r0, r4
 8003d84:	2802      	cmp	r0, #2
 8003d86:	d9f5      	bls.n	8003d74 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 8003d88:	2003      	movs	r0, #3
 8003d8a:	e038      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	e036      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d036      	beq.n	8003e02 <HAL_RCC_OscConfig+0x61e>
      temp_pllckcfg = RCC->PLLCFGR;
 8003d94:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <HAL_RCC_OscConfig+0x63c>)
 8003d96:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d98:	f003 0103 	and.w	r1, r3, #3
 8003d9c:	6a22      	ldr	r2, [r4, #32]
 8003d9e:	4291      	cmp	r1, r2
 8003da0:	d131      	bne.n	8003e06 <HAL_RCC_OscConfig+0x622>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003da2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003da6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003da8:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003dae:	d12c      	bne.n	8003e0a <HAL_RCC_OscConfig+0x626>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003db4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db6:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003dba:	d128      	bne.n	8003e0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dbc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003dc0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dc2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8003dc6:	d124      	bne.n	8003e12 <HAL_RCC_OscConfig+0x62e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dc8:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003dcc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003dce:	0852      	lsrs	r2, r2, #1
 8003dd0:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dd2:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003dd6:	d11e      	bne.n	8003e16 <HAL_RCC_OscConfig+0x632>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dd8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003ddc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003dde:	0852      	lsrs	r2, r2, #1
 8003de0:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003de2:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003de6:	d118      	bne.n	8003e1a <HAL_RCC_OscConfig+0x636>
  return HAL_OK;
 8003de8:	2000      	movs	r0, #0
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
    return HAL_ERROR;
 8003dec:	2001      	movs	r0, #1
}
 8003dee:	4770      	bx	lr
        return HAL_ERROR;
 8003df0:	2001      	movs	r0, #1
 8003df2:	e004      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 8003df4:	2001      	movs	r0, #1
 8003df6:	e002      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
          return HAL_ERROR;
 8003df8:	2001      	movs	r0, #1
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 8003dfc:	2000      	movs	r0, #0
}
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003e02:	2001      	movs	r0, #1
 8003e04:	e7fb      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 8003e06:	2001      	movs	r0, #1
 8003e08:	e7f9      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	e7f7      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
 8003e0e:	2001      	movs	r0, #1
 8003e10:	e7f5      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
 8003e12:	2001      	movs	r0, #1
 8003e14:	e7f3      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
 8003e16:	2001      	movs	r0, #1
 8003e18:	e7f1      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	e7ef      	b.n	8003dfe <HAL_RCC_OscConfig+0x61a>
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000
 8003e24:	019f800c 	.word	0x019f800c

08003e28 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e28:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d033      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 030c 	and.w	r3, r3, #12
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d02f      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 030c 	and.w	r3, r3, #12
 8003e48:	2b0c      	cmp	r3, #12
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8003e4c:	2000      	movs	r0, #0
}
 8003e4e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e50:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003e5e:	3301      	adds	r3, #1
    switch (pllsource)
 8003e60:	2a03      	cmp	r2, #3
 8003e62:	d011      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e64:	4810      	ldr	r0, [pc, #64]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x80>)
 8003e66:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8003e72:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e76:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003e7e:	3301      	adds	r3, #1
 8003e80:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003e82:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e86:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e88:	4807      	ldr	r0, [pc, #28]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x80>)
 8003e8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8003e96:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8003e9a:	e7ec      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8003e9c:	4802      	ldr	r0, [pc, #8]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x80>)
 8003e9e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8003ea0:	4801      	ldr	r0, [pc, #4]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x80>)
 8003ea2:	4770      	bx	lr
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	00f42400 	.word	0x00f42400

08003eac <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003eac:	2800      	cmp	r0, #0
 8003eae:	f000 8155 	beq.w	800415c <HAL_RCC_ClockConfig+0x2b0>
{
 8003eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb4:	460d      	mov	r5, r1
 8003eb6:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003eb8:	6803      	ldr	r3, [r0, #0]
 8003eba:	f013 0f0f 	tst.w	r3, #15
 8003ebe:	d002      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x1a>
 8003ec0:	f033 030f 	bics.w	r3, r3, #15
 8003ec4:	d004      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x24>
 8003ec6:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8003eca:	489a      	ldr	r0, [pc, #616]	; (8004134 <HAL_RCC_ClockConfig+0x288>)
 8003ecc:	f7fc fef4 	bl	8000cb8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003ed0:	2d0f      	cmp	r5, #15
 8003ed2:	d84c      	bhi.n	8003f6e <HAL_RCC_ClockConfig+0xc2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b98      	ldr	r3, [pc, #608]	; (8004138 <HAL_RCC_ClockConfig+0x28c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	42ab      	cmp	r3, r5
 8003ede:	d20b      	bcs.n	8003ef8 <HAL_RCC_ClockConfig+0x4c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee0:	4a95      	ldr	r2, [pc, #596]	; (8004138 <HAL_RCC_ClockConfig+0x28c>)
 8003ee2:	6813      	ldr	r3, [r2, #0]
 8003ee4:	f023 030f 	bic.w	r3, r3, #15
 8003ee8:	432b      	orrs	r3, r5
 8003eea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eec:	6813      	ldr	r3, [r2, #0]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	42ab      	cmp	r3, r5
 8003ef4:	f040 8134 	bne.w	8004160 <HAL_RCC_ClockConfig+0x2b4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef8:	6826      	ldr	r6, [r4, #0]
 8003efa:	f016 0601 	ands.w	r6, r6, #1
 8003efe:	d06f      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x134>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003f00:	6863      	ldr	r3, [r4, #4]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d838      	bhi.n	8003f7a <HAL_RCC_ClockConfig+0xce>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f08:	6863      	ldr	r3, [r4, #4]
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d03b      	beq.n	8003f86 <HAL_RCC_ClockConfig+0xda>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d059      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x11a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f12:	4b8a      	ldr	r3, [pc, #552]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003f1a:	f000 8123 	beq.w	8004164 <HAL_RCC_ClockConfig+0x2b8>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f1e:	f7ff ff83 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8003f22:	4b87      	ldr	r3, [pc, #540]	; (8004140 <HAL_RCC_ClockConfig+0x294>)
 8003f24:	4298      	cmp	r0, r3
 8003f26:	d959      	bls.n	8003fdc <HAL_RCC_ClockConfig+0x130>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f28:	4a84      	ldr	r2, [pc, #528]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 8003f2a:	6893      	ldr	r3, [r2, #8]
 8003f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f36:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f38:	4a80      	ldr	r2, [pc, #512]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 8003f3a:	6893      	ldr	r3, [r2, #8]
 8003f3c:	f023 0303 	bic.w	r3, r3, #3
 8003f40:	6861      	ldr	r1, [r4, #4]
 8003f42:	430b      	orrs	r3, r1
 8003f44:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003f46:	f7fd f987 	bl	8001258 <HAL_GetTick>
 8003f4a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4c:	4b7b      	ldr	r3, [pc, #492]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	6862      	ldr	r2, [r4, #4]
 8003f56:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003f5a:	d041      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x134>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f5c:	f7fd f97c 	bl	8001258 <HAL_GetTick>
 8003f60:	1bc0      	subs	r0, r0, r7
 8003f62:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f66:	4298      	cmp	r0, r3
 8003f68:	d9f0      	bls.n	8003f4c <HAL_RCC_ClockConfig+0xa0>
        return HAL_TIMEOUT;
 8003f6a:	2003      	movs	r0, #3
 8003f6c:	e0af      	b.n	80040ce <HAL_RCC_ClockConfig+0x222>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003f6e:	f240 310d 	movw	r1, #781	; 0x30d
 8003f72:	4870      	ldr	r0, [pc, #448]	; (8004134 <HAL_RCC_ClockConfig+0x288>)
 8003f74:	f7fc fea0 	bl	8000cb8 <assert_failed>
 8003f78:	e7ac      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x28>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003f7a:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003f7e:	486d      	ldr	r0, [pc, #436]	; (8004134 <HAL_RCC_ClockConfig+0x288>)
 8003f80:	f7fc fe9a 	bl	8000cb8 <assert_failed>
 8003f84:	e7c0      	b.n	8003f08 <HAL_RCC_ClockConfig+0x5c>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f86:	4b6d      	ldr	r3, [pc, #436]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_ClockConfig+0xe8>
        return HAL_ERROR;
 8003f90:	2001      	movs	r0, #1
 8003f92:	e09c      	b.n	80040ce <HAL_RCC_ClockConfig+0x222>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f94:	f7ff fbfc 	bl	8003790 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8003f98:	4b69      	ldr	r3, [pc, #420]	; (8004140 <HAL_RCC_ClockConfig+0x294>)
 8003f9a:	4298      	cmp	r0, r3
 8003f9c:	d91a      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x128>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f9e:	4b67      	ldr	r3, [pc, #412]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x108>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fa8:	6826      	ldr	r6, [r4, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003faa:	f016 0602 	ands.w	r6, r6, #2
 8003fae:	d0c3      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x8c>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003fb0:	68a3      	ldr	r3, [r4, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fb2:	b98b      	cbnz	r3, 8003fd8 <HAL_RCC_ClockConfig+0x12c>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fb4:	4a61      	ldr	r2, [pc, #388]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 8003fb6:	6893      	ldr	r3, [r2, #8]
 8003fb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003fc2:	2680      	movs	r6, #128	; 0x80
 8003fc4:	e7b8      	b.n	8003f38 <HAL_RCC_ClockConfig+0x8c>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fc6:	4b5d      	ldr	r3, [pc, #372]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003fce:	d1a6      	bne.n	8003f1e <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	e07c      	b.n	80040ce <HAL_RCC_ClockConfig+0x222>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fd4:	2600      	movs	r6, #0
 8003fd6:	e7af      	b.n	8003f38 <HAL_RCC_ClockConfig+0x8c>
 8003fd8:	2600      	movs	r6, #0
 8003fda:	e7ad      	b.n	8003f38 <HAL_RCC_ClockConfig+0x8c>
 8003fdc:	2600      	movs	r6, #0
 8003fde:	e7ab      	b.n	8003f38 <HAL_RCC_ClockConfig+0x8c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	f013 0f02 	tst.w	r3, #2
 8003fe6:	d07f      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x23c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe8:	f013 0f04 	tst.w	r3, #4
 8003fec:	d004      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x14c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fee:	4a53      	ldr	r2, [pc, #332]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 8003ff0:	6893      	ldr	r3, [r2, #8]
 8003ff2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ff6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	f013 0f08 	tst.w	r3, #8
 8003ffe:	d006      	beq.n	800400e <HAL_RCC_ClockConfig+0x162>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004000:	4a4e      	ldr	r2, [pc, #312]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 8004002:	6893      	ldr	r3, [r2, #8]
 8004004:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004008:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800400c:	6093      	str	r3, [r2, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800400e:	68a3      	ldr	r3, [r4, #8]
 8004010:	b163      	cbz	r3, 800402c <HAL_RCC_ClockConfig+0x180>
 8004012:	2bc0      	cmp	r3, #192	; 0xc0
 8004014:	d00a      	beq.n	800402c <HAL_RCC_ClockConfig+0x180>
 8004016:	d85b      	bhi.n	80040d0 <HAL_RCC_ClockConfig+0x224>
 8004018:	2ba0      	cmp	r3, #160	; 0xa0
 800401a:	d007      	beq.n	800402c <HAL_RCC_ClockConfig+0x180>
 800401c:	d902      	bls.n	8004024 <HAL_RCC_ClockConfig+0x178>
 800401e:	2bb0      	cmp	r3, #176	; 0xb0
 8004020:	d004      	beq.n	800402c <HAL_RCC_ClockConfig+0x180>
 8004022:	e05b      	b.n	80040dc <HAL_RCC_ClockConfig+0x230>
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x180>
 8004028:	2b90      	cmp	r3, #144	; 0x90
 800402a:	d157      	bne.n	80040dc <HAL_RCC_ClockConfig+0x230>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402c:	4a43      	ldr	r2, [pc, #268]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 800402e:	6893      	ldr	r3, [r2, #8]
 8004030:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004034:	68a1      	ldr	r1, [r4, #8]
 8004036:	430b      	orrs	r3, r1
 8004038:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800403a:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <HAL_RCC_ClockConfig+0x28c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	42ab      	cmp	r3, r5
 8004044:	d858      	bhi.n	80040f8 <HAL_RCC_ClockConfig+0x24c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	f013 0f04 	tst.w	r3, #4
 800404c:	d014      	beq.n	8004078 <HAL_RCC_ClockConfig+0x1cc>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800404e:	68e3      	ldr	r3, [r4, #12]
 8004050:	b15b      	cbz	r3, 800406a <HAL_RCC_ClockConfig+0x1be>
 8004052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004056:	d008      	beq.n	800406a <HAL_RCC_ClockConfig+0x1be>
 8004058:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800405c:	d005      	beq.n	800406a <HAL_RCC_ClockConfig+0x1be>
 800405e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004062:	d002      	beq.n	800406a <HAL_RCC_ClockConfig+0x1be>
 8004064:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004068:	d15e      	bne.n	8004128 <HAL_RCC_ClockConfig+0x27c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800406a:	4a34      	ldr	r2, [pc, #208]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 800406c:	6893      	ldr	r3, [r2, #8]
 800406e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004072:	68e1      	ldr	r1, [r4, #12]
 8004074:	430b      	orrs	r3, r1
 8004076:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	f013 0f08 	tst.w	r3, #8
 800407e:	d015      	beq.n	80040ac <HAL_RCC_ClockConfig+0x200>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004080:	6923      	ldr	r3, [r4, #16]
 8004082:	b15b      	cbz	r3, 800409c <HAL_RCC_ClockConfig+0x1f0>
 8004084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004088:	d008      	beq.n	800409c <HAL_RCC_ClockConfig+0x1f0>
 800408a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800408e:	d005      	beq.n	800409c <HAL_RCC_ClockConfig+0x1f0>
 8004090:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004094:	d002      	beq.n	800409c <HAL_RCC_ClockConfig+0x1f0>
 8004096:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800409a:	d159      	bne.n	8004150 <HAL_RCC_ClockConfig+0x2a4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800409c:	4a27      	ldr	r2, [pc, #156]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 800409e:	6893      	ldr	r3, [r2, #8]
 80040a0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80040a4:	6921      	ldr	r1, [r4, #16]
 80040a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040ac:	f7ff febc 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 80040b0:	4b22      	ldr	r3, [pc, #136]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80040b8:	4a22      	ldr	r2, [pc, #136]	; (8004144 <HAL_RCC_ClockConfig+0x298>)
 80040ba:	5cd3      	ldrb	r3, [r2, r3]
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	40d8      	lsrs	r0, r3
 80040c2:	4b21      	ldr	r3, [pc, #132]	; (8004148 <HAL_RCC_ClockConfig+0x29c>)
 80040c4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80040c6:	4b21      	ldr	r3, [pc, #132]	; (800414c <HAL_RCC_ClockConfig+0x2a0>)
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	f7fc feab 	bl	8000e24 <HAL_InitTick>
}
 80040ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040d0:	2be0      	cmp	r3, #224	; 0xe0
 80040d2:	d0ab      	beq.n	800402c <HAL_RCC_ClockConfig+0x180>
 80040d4:	2bf0      	cmp	r3, #240	; 0xf0
 80040d6:	d0a9      	beq.n	800402c <HAL_RCC_ClockConfig+0x180>
 80040d8:	2bd0      	cmp	r3, #208	; 0xd0
 80040da:	d0a7      	beq.n	800402c <HAL_RCC_ClockConfig+0x180>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80040dc:	f240 317b 	movw	r1, #891	; 0x37b
 80040e0:	4814      	ldr	r0, [pc, #80]	; (8004134 <HAL_RCC_ClockConfig+0x288>)
 80040e2:	f7fc fde9 	bl	8000cb8 <assert_failed>
 80040e6:	e7a1      	b.n	800402c <HAL_RCC_ClockConfig+0x180>
    if(hpre == RCC_SYSCLK_DIV2)
 80040e8:	2e80      	cmp	r6, #128	; 0x80
 80040ea:	d1a6      	bne.n	800403a <HAL_RCC_ClockConfig+0x18e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040ec:	4a13      	ldr	r2, [pc, #76]	; (800413c <HAL_RCC_ClockConfig+0x290>)
 80040ee:	6893      	ldr	r3, [r2, #8]
 80040f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040f4:	6093      	str	r3, [r2, #8]
 80040f6:	e7a0      	b.n	800403a <HAL_RCC_ClockConfig+0x18e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f8:	4a0f      	ldr	r2, [pc, #60]	; (8004138 <HAL_RCC_ClockConfig+0x28c>)
 80040fa:	6813      	ldr	r3, [r2, #0]
 80040fc:	f023 030f 	bic.w	r3, r3, #15
 8004100:	432b      	orrs	r3, r5
 8004102:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004104:	f7fd f8a8 	bl	8001258 <HAL_GetTick>
 8004108:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_RCC_ClockConfig+0x28c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	42ab      	cmp	r3, r5
 8004114:	d097      	beq.n	8004046 <HAL_RCC_ClockConfig+0x19a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004116:	f7fd f89f 	bl	8001258 <HAL_GetTick>
 800411a:	1b80      	subs	r0, r0, r6
 800411c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004120:	4298      	cmp	r0, r3
 8004122:	d9f2      	bls.n	800410a <HAL_RCC_ClockConfig+0x25e>
        return HAL_TIMEOUT;
 8004124:	2003      	movs	r0, #3
 8004126:	e7d2      	b.n	80040ce <HAL_RCC_ClockConfig+0x222>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004128:	f240 319d 	movw	r1, #925	; 0x39d
 800412c:	4801      	ldr	r0, [pc, #4]	; (8004134 <HAL_RCC_ClockConfig+0x288>)
 800412e:	f7fc fdc3 	bl	8000cb8 <assert_failed>
 8004132:	e79a      	b.n	800406a <HAL_RCC_ClockConfig+0x1be>
 8004134:	08012fcc 	.word	0x08012fcc
 8004138:	40022000 	.word	0x40022000
 800413c:	40021000 	.word	0x40021000
 8004140:	04c4b400 	.word	0x04c4b400
 8004144:	08012e44 	.word	0x08012e44
 8004148:	20000000 	.word	0x20000000
 800414c:	20000008 	.word	0x20000008
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004150:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8004154:	4804      	ldr	r0, [pc, #16]	; (8004168 <HAL_RCC_ClockConfig+0x2bc>)
 8004156:	f7fc fdaf 	bl	8000cb8 <assert_failed>
 800415a:	e79f      	b.n	800409c <HAL_RCC_ClockConfig+0x1f0>
    return HAL_ERROR;
 800415c:	2001      	movs	r0, #1
}
 800415e:	4770      	bx	lr
      return HAL_ERROR;
 8004160:	2001      	movs	r0, #1
 8004162:	e7b4      	b.n	80040ce <HAL_RCC_ClockConfig+0x222>
          return HAL_ERROR;
 8004164:	2001      	movs	r0, #1
 8004166:	e7b2      	b.n	80040ce <HAL_RCC_ClockConfig+0x222>
 8004168:	08012fcc 	.word	0x08012fcc

0800416c <HAL_RCC_GetHCLKFreq>:
}
 800416c:	4b01      	ldr	r3, [pc, #4]	; (8004174 <HAL_RCC_GetHCLKFreq+0x8>)
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000000 	.word	0x20000000

08004178 <HAL_RCC_GetPCLK1Freq>:
{
 8004178:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800417a:	f7ff fff7 	bl	800416c <HAL_RCC_GetHCLKFreq>
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004186:	4a04      	ldr	r2, [pc, #16]	; (8004198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004188:	5cd3      	ldrb	r3, [r2, r3]
 800418a:	f003 031f 	and.w	r3, r3, #31
}
 800418e:	40d8      	lsrs	r0, r3
 8004190:	bd08      	pop	{r3, pc}
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	08012e54 	.word	0x08012e54

0800419c <HAL_RCC_GetPCLK2Freq>:
{
 800419c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800419e:	f7ff ffe5 	bl	800416c <HAL_RCC_GetHCLKFreq>
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80041aa:	4a04      	ldr	r2, [pc, #16]	; (80041bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80041ac:	5cd3      	ldrb	r3, [r2, r3]
 80041ae:	f003 031f 	and.w	r3, r3, #31
}
 80041b2:	40d8      	lsrs	r0, r3
 80041b4:	bd08      	pop	{r3, pc}
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000
 80041bc:	08012e54 	.word	0x08012e54

080041c0 <HAL_RCC_GetClockConfig>:
{
 80041c0:	b538      	push	{r3, r4, r5, lr}
 80041c2:	460d      	mov	r5, r1
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 80041c4:	4604      	mov	r4, r0
 80041c6:	b1d0      	cbz	r0, 80041fe <HAL_RCC_GetClockConfig+0x3e>
  assert_param(pFLatency != (void *)NULL);
 80041c8:	b1fd      	cbz	r5, 800420a <HAL_RCC_GetClockConfig+0x4a>
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041ca:	230f      	movs	r3, #15
 80041cc:	6023      	str	r3, [r4, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80041ce:	4b12      	ldr	r3, [pc, #72]	; (8004218 <HAL_RCC_GetClockConfig+0x58>)
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	f002 0203 	and.w	r2, r2, #3
 80041d6:	6062      	str	r2, [r4, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80041de:	60a2      	str	r2, [r4, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80041e6:	60e2      	str	r2, [r4, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	08db      	lsrs	r3, r3, #3
 80041ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041f0:	6123      	str	r3, [r4, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <HAL_RCC_GetClockConfig+0x5c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	602b      	str	r3, [r5, #0]
}
 80041fc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 80041fe:	f240 41e4 	movw	r1, #1252	; 0x4e4
 8004202:	4807      	ldr	r0, [pc, #28]	; (8004220 <HAL_RCC_GetClockConfig+0x60>)
 8004204:	f7fc fd58 	bl	8000cb8 <assert_failed>
 8004208:	e7de      	b.n	80041c8 <HAL_RCC_GetClockConfig+0x8>
  assert_param(pFLatency != (void *)NULL);
 800420a:	f240 41e5 	movw	r1, #1253	; 0x4e5
 800420e:	4804      	ldr	r0, [pc, #16]	; (8004220 <HAL_RCC_GetClockConfig+0x60>)
 8004210:	f7fc fd52 	bl	8000cb8 <assert_failed>
 8004214:	e7d9      	b.n	80041ca <HAL_RCC_GetClockConfig+0xa>
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000
 800421c:	40022000 	.word	0x40022000
 8004220:	08012fcc 	.word	0x08012fcc

08004224 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004226:	b083      	sub	sp, #12
 8004228:	4604      	mov	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800422a:	6803      	ldr	r3, [r0, #0]
 800422c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004230:	2b00      	cmp	r3, #0
 8004232:	d033      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x78>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800423a:	f000 8085 	beq.w	8004348 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    FlagStatus       pwrclkchanged = RESET;
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800423e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004240:	b143      	cbz	r3, 8004254 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8004242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004246:	d005      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8004248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424c:	d002      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x30>
 800424e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004252:	d128      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x82>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004254:	4b39      	ldr	r3, [pc, #228]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800425c:	d128      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800425e:	4b37      	ldr	r3, [pc, #220]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004260:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004262:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004266:	659a      	str	r2, [r3, #88]	; 0x58
 8004268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004272:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004274:	4a32      	ldr	r2, [pc, #200]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800427e:	f7fc ffeb 	bl	8001258 <HAL_GetTick>
 8004282:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004284:	4b2e      	ldr	r3, [pc, #184]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f413 7f80 	tst.w	r3, #256	; 0x100
 800428c:	d112      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428e:	f7fc ffe3 	bl	8001258 <HAL_GetTick>
 8004292:	1b40      	subs	r0, r0, r5
 8004294:	2802      	cmp	r0, #2
 8004296:	d9f5      	bls.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x60>
      {
        ret = HAL_TIMEOUT;
 8004298:	2503      	movs	r5, #3
 800429a:	e00c      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x92>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800429c:	2183      	movs	r1, #131	; 0x83
 800429e:	4829      	ldr	r0, [pc, #164]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80042a0:	f7fc fd0a 	bl	8000cb8 <assert_failed>
 80042a4:	e7c6      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x10>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80042a6:	218b      	movs	r1, #139	; 0x8b
 80042a8:	4826      	ldr	r0, [pc, #152]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80042aa:	f7fc fd05 	bl	8000cb8 <assert_failed>
 80042ae:	e7d1      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x30>
    FlagStatus       pwrclkchanged = RESET;
 80042b0:	2600      	movs	r6, #0
 80042b2:	e7df      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x50>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042b4:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 80042b6:	bb45      	cbnz	r5, 800430a <HAL_RCCEx_PeriphCLKConfig+0xe6>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042b8:	4b20      	ldr	r3, [pc, #128]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042be:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80042c2:	d015      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80042c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d012      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042ca:	4a1c      	ldr	r2, [pc, #112]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80042cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80042d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042d4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80042d8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80042dc:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042e0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80042e4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80042e8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042f0:	f013 0f01 	tst.w	r3, #1
 80042f4:	d110      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 80042f6:	b945      	cbnz	r5, 800430a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f8:	4a10      	ldr	r2, [pc, #64]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80042fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80042fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004302:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004304:	430b      	orrs	r3, r1
 8004306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800430a:	b1f6      	cbz	r6, 800434a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430c:	4a0b      	ldr	r2, [pc, #44]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800430e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004314:	6593      	str	r3, [r2, #88]	; 0x58
 8004316:	e018      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x126>
        tickstart = HAL_GetTick();
 8004318:	f7fc ff9e 	bl	8001258 <HAL_GetTick>
 800431c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800431e:	4b07      	ldr	r3, [pc, #28]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	f013 0f02 	tst.w	r3, #2
 8004328:	d1e5      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432a:	f7fc ff95 	bl	8001258 <HAL_GetTick>
 800432e:	1bc0      	subs	r0, r0, r7
 8004330:	f241 3388 	movw	r3, #5000	; 0x1388
 8004334:	4298      	cmp	r0, r3
 8004336:	d9f2      	bls.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xfa>
            ret = HAL_TIMEOUT;
 8004338:	2503      	movs	r5, #3
 800433a:	e7dc      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 800433c:	40021000 	.word	0x40021000
 8004340:	40007000 	.word	0x40007000
 8004344:	08013004 	.word	0x08013004
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004348:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	f013 0f01 	tst.w	r3, #1
 8004350:	d010      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004352:	6863      	ldr	r3, [r4, #4]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d904      	bls.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8004358:	2b03      	cmp	r3, #3
 800435a:	d002      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800435c:	2b02      	cmp	r3, #2
 800435e:	f040 81d1 	bne.w	8004704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004362:	4aa4      	ldr	r2, [pc, #656]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004364:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004368:	f023 0303 	bic.w	r3, r3, #3
 800436c:	6861      	ldr	r1, [r4, #4]
 800436e:	430b      	orrs	r3, r1
 8004370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	f013 0f02 	tst.w	r3, #2
 800437a:	d018      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800437c:	68a3      	ldr	r3, [r4, #8]
 800437e:	b16b      	cbz	r3, 800439c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004380:	3b04      	subs	r3, #4
 8004382:	2b08      	cmp	r3, #8
 8004384:	d806      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004386:	f240 1211 	movw	r2, #273	; 0x111
 800438a:	fa22 f303 	lsr.w	r3, r2, r3
 800438e:	f013 0f01 	tst.w	r3, #1
 8004392:	d103      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004394:	21ea      	movs	r1, #234	; 0xea
 8004396:	4898      	ldr	r0, [pc, #608]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004398:	f7fc fc8e 	bl	8000cb8 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800439c:	4a95      	ldr	r2, [pc, #596]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800439e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043a2:	f023 030c 	bic.w	r3, r3, #12
 80043a6:	68a1      	ldr	r1, [r4, #8]
 80043a8:	430b      	orrs	r3, r1
 80043aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	f013 0f04 	tst.w	r3, #4
 80043b4:	d011      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80043b6:	68e3      	ldr	r3, [r4, #12]
 80043b8:	b133      	cbz	r3, 80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80043ba:	2b10      	cmp	r3, #16
 80043bc:	d004      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80043be:	2b30      	cmp	r3, #48	; 0x30
 80043c0:	d002      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	f040 81a3 	bne.w	800470e <HAL_RCCEx_PeriphCLKConfig+0x4ea>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043c8:	4a8a      	ldr	r2, [pc, #552]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80043ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80043d2:	68e1      	ldr	r1, [r4, #12]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	f013 0f08 	tst.w	r3, #8
 80043e0:	d011      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	b133      	cbz	r3, 80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80043e6:	2b40      	cmp	r3, #64	; 0x40
 80043e8:	d004      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80043ea:	2bc0      	cmp	r3, #192	; 0xc0
 80043ec:	d002      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80043ee:	2b80      	cmp	r3, #128	; 0x80
 80043f0:	f040 8192 	bne.w	8004718 <HAL_RCCEx_PeriphCLKConfig+0x4f4>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043f4:	4a7f      	ldr	r2, [pc, #508]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80043f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80043fe:	6921      	ldr	r1, [r4, #16]
 8004400:	430b      	orrs	r3, r1
 8004402:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	f013 0f10 	tst.w	r3, #16
 800440c:	d014      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800440e:	6963      	ldr	r3, [r4, #20]
 8004410:	b14b      	cbz	r3, 8004426 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004416:	d006      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800441c:	d003      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800441e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004422:	f040 817e 	bne.w	8004722 <HAL_RCCEx_PeriphCLKConfig+0x4fe>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004426:	4a73      	ldr	r2, [pc, #460]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004428:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800442c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004430:	6961      	ldr	r1, [r4, #20]
 8004432:	430b      	orrs	r3, r1
 8004434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	f013 0f20 	tst.w	r3, #32
 800443e:	d014      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004440:	69a3      	ldr	r3, [r4, #24]
 8004442:	b14b      	cbz	r3, 8004458 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004448:	d006      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800444a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800444e:	d003      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004454:	f040 816b 	bne.w	800472e <HAL_RCCEx_PeriphCLKConfig+0x50a>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004458:	4a66      	ldr	r2, [pc, #408]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800445a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800445e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004462:	69a1      	ldr	r1, [r4, #24]
 8004464:	430b      	orrs	r3, r1
 8004466:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004470:	d011      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004472:	69e3      	ldr	r3, [r4, #28]
 8004474:	b133      	cbz	r3, 8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8004476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447a:	d003      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>
 800447c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004480:	f040 815b 	bne.w	800473a <HAL_RCCEx_PeriphCLKConfig+0x516>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004484:	4a5b      	ldr	r2, [pc, #364]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004486:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800448a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800448e:	69e1      	ldr	r1, [r4, #28]
 8004490:	430b      	orrs	r3, r1
 8004492:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	f013 0f80 	tst.w	r3, #128	; 0x80
 800449c:	d011      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800449e:	6a23      	ldr	r3, [r4, #32]
 80044a0:	b133      	cbz	r3, 80044b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80044a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044a6:	d003      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80044a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ac:	f040 814b 	bne.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0x522>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044b0:	4a50      	ldr	r2, [pc, #320]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80044b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80044ba:	6a21      	ldr	r1, [r4, #32]
 80044bc:	430b      	orrs	r3, r1
 80044be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80044c8:	d011      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80044ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044cc:	b133      	cbz	r3, 80044dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80044ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d2:	d003      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80044d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044d8:	f040 813b 	bne.w	8004752 <HAL_RCCEx_PeriphCLKConfig+0x52e>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044dc:	4a45      	ldr	r2, [pc, #276]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80044de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80044e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80044e8:	430b      	orrs	r3, r1
 80044ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80044f4:	d00c      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80044f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	f200 8130 	bhi.w	800475e <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044fe:	4a3d      	ldr	r2, [pc, #244]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004500:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004504:	f023 0303 	bic.w	r3, r3, #3
 8004508:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800450a:	430b      	orrs	r3, r1
 800450c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004516:	d014      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 8004518:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800451a:	b14b      	cbz	r3, 8004530 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800451c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004520:	d006      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004522:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004526:	d003      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004528:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800452c:	f040 811d 	bne.w	800476a <HAL_RCCEx_PeriphCLKConfig+0x546>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004530:	4a30      	ldr	r2, [pc, #192]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004532:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004536:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800453a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800453c:	430b      	orrs	r3, r1
 800453e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004548:	d019      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800454a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800454c:	b14b      	cbz	r3, 8004562 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800454e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004552:	d006      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004554:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004558:	d003      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800455a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800455e:	f040 810a 	bne.w	8004776 <HAL_RCCEx_PeriphCLKConfig+0x552>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004562:	4a24      	ldr	r2, [pc, #144]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004564:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004568:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800456c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800456e:	430b      	orrs	r3, r1
 8004570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004574:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457a:	f000 8102 	beq.w	8004782 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004584:	d019      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004586:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004588:	b14b      	cbz	r3, 800459e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800458a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458e:	d006      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004590:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004594:	d003      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004596:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800459a:	f040 80f7 	bne.w	800478c <HAL_RCCEx_PeriphCLKConfig+0x568>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800459e:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80045a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045a4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80045a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045aa:	430b      	orrs	r3, r1
 80045ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80045b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b6:	f000 80ef 	beq.w	8004798 <HAL_RCCEx_PeriphCLKConfig+0x574>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80045c0:	d01c      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 80045c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045c4:	b133      	cbz	r3, 80045d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80045c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045ca:	d003      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80045cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045d0:	f040 80e7 	bne.w	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x57e>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045d4:	4a07      	ldr	r2, [pc, #28]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80045d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045da:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80045de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80045e0:	430b      	orrs	r3, r1
 80045e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80045e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045ec:	f000 80df 	beq.w	80047ae <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80045f0:	e004      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
 80045f8:	08013004 	.word	0x08013004
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004602:	d013      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004604:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004606:	b11b      	cbz	r3, 8004610 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800460c:	f040 80d4 	bne.w	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004610:	4a85      	ldr	r2, [pc, #532]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8004612:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004616:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800461a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800461c:	430b      	orrs	r3, r1
 800461e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004622:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004628:	f000 80cc 	beq.w	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004632:	d013      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004634:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004636:	b11b      	cbz	r3, 8004640 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463c:	f040 80c7 	bne.w	80047ce <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004640:	4a79      	ldr	r2, [pc, #484]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8004642:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004646:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800464a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800464c:	430b      	orrs	r3, r1
 800464e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004658:	f000 80bf 	beq.w	80047da <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004662:	d016      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 8004664:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004666:	b133      	cbz	r3, 8004676 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800466c:	d003      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800466e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004672:	f040 80b7 	bne.w	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004676:	4a6c      	ldr	r2, [pc, #432]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8004678:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800467c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004680:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004682:	430b      	orrs	r3, r1
 8004684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004688:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800468a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800468e:	f000 80af 	beq.w	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004698:	d016      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 800469a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800469c:	b133      	cbz	r3, 80046ac <HAL_RCCEx_PeriphCLKConfig+0x488>
 800469e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a2:	d003      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x488>
 80046a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a8:	f040 80a7 	bne.w	80047fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80046ac:	4a5e      	ldr	r2, [pc, #376]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80046ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80046b2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80046b6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80046b8:	430b      	orrs	r3, r1
 80046ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80046be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80046c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c4:	f000 809f 	beq.w	8004806 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80046ce:	d016      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 80046d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80046d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d6:	d004      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80046d8:	b11b      	cbz	r3, 80046e2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80046da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046de:	f040 8097 	bne.w	8004810 <HAL_RCCEx_PeriphCLKConfig+0x5ec>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80046e2:	4a51      	ldr	r2, [pc, #324]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80046e4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80046e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80046ec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80046ee:	430b      	orrs	r3, r1
 80046f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80046f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80046f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046fa:	f000 808f 	beq.w	800481c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  }

#endif /* QUADSPI */

  return status;
}
 80046fe:	4628      	mov	r0, r5
 8004700:	b003      	add	sp, #12
 8004702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004704:	21e0      	movs	r1, #224	; 0xe0
 8004706:	4849      	ldr	r0, [pc, #292]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004708:	f7fc fad6 	bl	8000cb8 <assert_failed>
 800470c:	e629      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800470e:	21f4      	movs	r1, #244	; 0xf4
 8004710:	4846      	ldr	r0, [pc, #280]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004712:	f7fc fad1 	bl	8000cb8 <assert_failed>
 8004716:	e657      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004718:	21ff      	movs	r1, #255	; 0xff
 800471a:	4844      	ldr	r0, [pc, #272]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800471c:	f7fc facc 	bl	8000cb8 <assert_failed>
 8004720:	e668      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004722:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8004726:	4841      	ldr	r0, [pc, #260]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004728:	f7fc fac6 	bl	8000cb8 <assert_failed>
 800472c:	e67b      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x202>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800472e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004732:	483e      	ldr	r0, [pc, #248]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004734:	f7fc fac0 	bl	8000cb8 <assert_failed>
 8004738:	e68e      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x234>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800473a:	f44f 7191 	mov.w	r1, #290	; 0x122
 800473e:	483b      	ldr	r0, [pc, #236]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004740:	f7fc faba 	bl	8000cb8 <assert_failed>
 8004744:	e69e      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004746:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800474a:	4838      	ldr	r0, [pc, #224]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800474c:	f7fc fab4 	bl	8000cb8 <assert_failed>
 8004750:	e6ae      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004752:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004756:	4835      	ldr	r0, [pc, #212]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004758:	f7fc faae 	bl	8000cb8 <assert_failed>
 800475c:	e6be      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800475e:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004762:	4832      	ldr	r0, [pc, #200]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004764:	f7fc faa8 	bl	8000cb8 <assert_failed>
 8004768:	e6c9      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 800476a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800476e:	482f      	ldr	r0, [pc, #188]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004770:	f7fc faa2 	bl	8000cb8 <assert_failed>
 8004774:	e6dc      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8004776:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800477a:	482c      	ldr	r0, [pc, #176]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800477c:	f7fc fa9c 	bl	8000cb8 <assert_failed>
 8004780:	e6ef      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x33e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004782:	68d3      	ldr	r3, [r2, #12]
 8004784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004788:	60d3      	str	r3, [r2, #12]
 800478a:	e6f8      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800478c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004790:	4826      	ldr	r0, [pc, #152]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004792:	f7fc fa91 	bl	8000cb8 <assert_failed>
 8004796:	e702      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004798:	68d3      	ldr	r3, [r2, #12]
 800479a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800479e:	60d3      	str	r3, [r2, #12]
 80047a0:	e70b      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x396>
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 80047a2:	f240 1179 	movw	r1, #377	; 0x179
 80047a6:	4821      	ldr	r0, [pc, #132]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80047a8:	f7fc fa86 	bl	8000cb8 <assert_failed>
 80047ac:	e712      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ae:	68d3      	ldr	r3, [r2, #12]
 80047b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b4:	60d3      	str	r3, [r2, #12]
 80047b6:	e721      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 80047b8:	f240 118b 	movw	r1, #395	; 0x18b
 80047bc:	481b      	ldr	r0, [pc, #108]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80047be:	f7fc fa7b 	bl	8000cb8 <assert_failed>
 80047c2:	e725      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c4:	68d3      	ldr	r3, [r2, #12]
 80047c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ca:	60d3      	str	r3, [r2, #12]
 80047cc:	e72e      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x408>
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 80047ce:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80047d2:	4816      	ldr	r0, [pc, #88]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80047d4:	f7fc fa70 	bl	8000cb8 <assert_failed>
 80047d8:	e732      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047da:	68d3      	ldr	r3, [r2, #12]
 80047dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047e0:	60d3      	str	r3, [r2, #12]
 80047e2:	e73b      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x438>
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 80047e4:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 80047e8:	4810      	ldr	r0, [pc, #64]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80047ea:	f7fc fa65 	bl	8000cb8 <assert_failed>
 80047ee:	e742      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x452>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047f0:	68d3      	ldr	r3, [r2, #12]
 80047f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f6:	60d3      	str	r3, [r2, #12]
 80047f8:	e74b      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 80047fa:	f240 11b9 	movw	r1, #441	; 0x1b9
 80047fe:	480b      	ldr	r0, [pc, #44]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004800:	f7fc fa5a 	bl	8000cb8 <assert_failed>
 8004804:	e752      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x488>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004806:	68d3      	ldr	r3, [r2, #12]
 8004808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480c:	60d3      	str	r3, [r2, #12]
 800480e:	e75b      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 8004810:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8004814:	4805      	ldr	r0, [pc, #20]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004816:	f7fc fa4f 	bl	8000cb8 <assert_failed>
 800481a:	e762      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800481c:	68d3      	ldr	r3, [r2, #12]
 800481e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004822:	60d3      	str	r3, [r2, #12]
 8004824:	e76b      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000
 800482c:	08013004 	.word	0x08013004

08004830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	4605      	mov	r5, r0
 8004838:	4688      	mov	r8, r1
 800483a:	4617      	mov	r7, r2
 800483c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800483e:	f7fc fd0b 	bl	8001258 <HAL_GetTick>
 8004842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004844:	1a1b      	subs	r3, r3, r0
 8004846:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800484a:	f7fc fd05 	bl	8001258 <HAL_GetTick>
 800484e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004850:	4b2a      	ldr	r3, [pc, #168]	; (80048fc <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004858:	fb09 f303 	mul.w	r3, r9, r3
 800485c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485e:	682b      	ldr	r3, [r5, #0]
 8004860:	689c      	ldr	r4, [r3, #8]
 8004862:	ea38 0404 	bics.w	r4, r8, r4
 8004866:	bf0c      	ite	eq
 8004868:	2301      	moveq	r3, #1
 800486a:	2300      	movne	r3, #0
 800486c:	42bb      	cmp	r3, r7
 800486e:	d040      	beq.n	80048f2 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004870:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8004874:	d0f3      	beq.n	800485e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004876:	f7fc fcef 	bl	8001258 <HAL_GetTick>
 800487a:	eba0 000a 	sub.w	r0, r0, sl
 800487e:	4548      	cmp	r0, r9
 8004880:	d20a      	bcs.n	8004898 <SPI_WaitFlagStateUntilTimeout+0x68>
 8004882:	f1b9 0f00 	cmp.w	r9, #0
 8004886:	d007      	beq.n	8004898 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004888:	9a01      	ldr	r2, [sp, #4]
 800488a:	b102      	cbz	r2, 800488e <SPI_WaitFlagStateUntilTimeout+0x5e>
 800488c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800488e:	9b01      	ldr	r3, [sp, #4]
 8004890:	3b01      	subs	r3, #1
 8004892:	9301      	str	r3, [sp, #4]
 8004894:	4691      	mov	r9, r2
 8004896:	e7e2      	b.n	800485e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004898:	682a      	ldr	r2, [r5, #0]
 800489a:	6853      	ldr	r3, [r2, #4]
 800489c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80048a0:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a2:	686b      	ldr	r3, [r5, #4]
 80048a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a8:	d00b      	beq.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80048ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b0:	d014      	beq.n	80048dc <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80048b8:	2300      	movs	r3, #0
 80048ba:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 80048be:	2003      	movs	r0, #3
 80048c0:	e018      	b.n	80048f4 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048c2:	68ab      	ldr	r3, [r5, #8]
 80048c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c8:	d002      	beq.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ce:	d1ec      	bne.n	80048aa <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80048d0:	682a      	ldr	r2, [r5, #0]
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e7e6      	b.n	80048aa <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 80048dc:	682a      	ldr	r2, [r5, #0]
 80048de:	6813      	ldr	r3, [r2, #0]
 80048e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	682a      	ldr	r2, [r5, #0]
 80048e8:	6813      	ldr	r3, [r2, #0]
 80048ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	e7df      	b.n	80048b2 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 80048f2:	2000      	movs	r0, #0
}
 80048f4:	b002      	add	sp, #8
 80048f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fa:	bf00      	nop
 80048fc:	20000000 	.word	0x20000000

08004900 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	4606      	mov	r6, r0
 8004908:	460c      	mov	r4, r1
 800490a:	4615      	mov	r5, r2
 800490c:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800490e:	2300      	movs	r3, #0
 8004910:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004914:	f7fc fca0 	bl	8001258 <HAL_GetTick>
 8004918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800491a:	1a1b      	subs	r3, r3, r0
 800491c:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8004920:	f7fc fc9a 	bl	8001258 <HAL_GetTick>
 8004924:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004926:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800492a:	4b31      	ldr	r3, [pc, #196]	; (80049f0 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004932:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004936:	0d1b      	lsrs	r3, r3, #20
 8004938:	fb08 f303 	mul.w	r3, r8, r3
 800493c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800493e:	e002      	b.n	8004946 <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8004940:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8004944:	d112      	bne.n	800496c <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8004946:	6833      	ldr	r3, [r6, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	ea03 0c04 	and.w	ip, r3, r4
 800494e:	45ac      	cmp	ip, r5
 8004950:	d04a      	beq.n	80049e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004952:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8004956:	d1f3      	bne.n	8004940 <SPI_WaitFifoStateUntilTimeout+0x40>
 8004958:	2d00      	cmp	r5, #0
 800495a:	d1f1      	bne.n	8004940 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 800495c:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8004966:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800496a:	e7e9      	b.n	8004940 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800496c:	f7fc fc74 	bl	8001258 <HAL_GetTick>
 8004970:	eba0 0009 	sub.w	r0, r0, r9
 8004974:	4540      	cmp	r0, r8
 8004976:	d20a      	bcs.n	800498e <SPI_WaitFifoStateUntilTimeout+0x8e>
 8004978:	f1b8 0f00 	cmp.w	r8, #0
 800497c:	d007      	beq.n	800498e <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800497e:	9a01      	ldr	r2, [sp, #4]
 8004980:	b102      	cbz	r2, 8004984 <SPI_WaitFifoStateUntilTimeout+0x84>
 8004982:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 8004984:	9b01      	ldr	r3, [sp, #4]
 8004986:	3b01      	subs	r3, #1
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	4690      	mov	r8, r2
 800498c:	e7db      	b.n	8004946 <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800498e:	6832      	ldr	r2, [r6, #0]
 8004990:	6853      	ldr	r3, [r2, #4]
 8004992:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004996:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004998:	6873      	ldr	r3, [r6, #4]
 800499a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800499e:	d00b      	beq.n	80049b8 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049a0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a6:	d014      	beq.n	80049d2 <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80049ae:	2300      	movs	r3, #0
 80049b0:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 80049b4:	2003      	movs	r0, #3
 80049b6:	e018      	b.n	80049ea <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049b8:	68b3      	ldr	r3, [r6, #8]
 80049ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049be:	d002      	beq.n	80049c6 <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c4:	d1ec      	bne.n	80049a0 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 80049c6:	6832      	ldr	r2, [r6, #0]
 80049c8:	6813      	ldr	r3, [r2, #0]
 80049ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	e7e6      	b.n	80049a0 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 80049d2:	6832      	ldr	r2, [r6, #0]
 80049d4:	6813      	ldr	r3, [r2, #0]
 80049d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	6832      	ldr	r2, [r6, #0]
 80049de:	6813      	ldr	r3, [r2, #0]
 80049e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e7df      	b.n	80049a8 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 80049e8:	2000      	movs	r0, #0
}
 80049ea:	b002      	add	sp, #8
 80049ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f0:	20000000 	.word	0x20000000

080049f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b570      	push	{r4, r5, r6, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	4604      	mov	r4, r0
 80049fa:	460d      	mov	r5, r1
 80049fc:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049fe:	9200      	str	r2, [sp, #0]
 8004a00:	460b      	mov	r3, r1
 8004a02:	2200      	movs	r2, #0
 8004a04:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a08:	f7ff ff7a 	bl	8004900 <SPI_WaitFifoStateUntilTimeout>
 8004a0c:	b9b0      	cbnz	r0, 8004a3c <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0e:	9600      	str	r6, [sp, #0]
 8004a10:	462b      	mov	r3, r5
 8004a12:	2200      	movs	r2, #0
 8004a14:	2180      	movs	r1, #128	; 0x80
 8004a16:	4620      	mov	r0, r4
 8004a18:	f7ff ff0a 	bl	8004830 <SPI_WaitFlagStateUntilTimeout>
 8004a1c:	b9a8      	cbnz	r0, 8004a4a <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a1e:	9600      	str	r6, [sp, #0]
 8004a20:	462b      	mov	r3, r5
 8004a22:	2200      	movs	r2, #0
 8004a24:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f7ff ff69 	bl	8004900 <SPI_WaitFifoStateUntilTimeout>
 8004a2e:	b150      	cbz	r0, 8004a46 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a30:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a32:	f043 0320 	orr.w	r3, r3, #32
 8004a36:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a38:	2003      	movs	r0, #3
 8004a3a:	e004      	b.n	8004a46 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a3c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a3e:	f043 0320 	orr.w	r3, r3, #32
 8004a42:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a44:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8004a46:	b002      	add	sp, #8
 8004a48:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a4a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a4c:	f043 0320 	orr.w	r3, r3, #32
 8004a50:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a52:	2003      	movs	r0, #3
 8004a54:	e7f7      	b.n	8004a46 <SPI_EndRxTxTransaction+0x52>

08004a56 <SPI_EndRxTransaction>:
{
 8004a56:	b570      	push	{r4, r5, r6, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	460d      	mov	r5, r1
 8004a5e:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a60:	6843      	ldr	r3, [r0, #4]
 8004a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a66:	d00d      	beq.n	8004a84 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a68:	9600      	str	r6, [sp, #0]
 8004a6a:	462b      	mov	r3, r5
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	4620      	mov	r0, r4
 8004a72:	f7ff fedd 	bl	8004830 <SPI_WaitFlagStateUntilTimeout>
 8004a76:	b990      	cbnz	r0, 8004a9e <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a78:	6863      	ldr	r3, [r4, #4]
 8004a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a7e:	d014      	beq.n	8004aaa <SPI_EndRxTransaction+0x54>
}
 8004a80:	b002      	add	sp, #8
 8004a82:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a84:	6883      	ldr	r3, [r0, #8]
 8004a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8a:	d002      	beq.n	8004a92 <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a90:	d1ea      	bne.n	8004a68 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8004a92:	6822      	ldr	r2, [r4, #0]
 8004a94:	6813      	ldr	r3, [r2, #0]
 8004a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	e7e4      	b.n	8004a68 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a9e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004aa0:	f043 0320 	orr.w	r3, r3, #32
 8004aa4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aa6:	2003      	movs	r0, #3
 8004aa8:	e7ea      	b.n	8004a80 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aaa:	68a3      	ldr	r3, [r4, #8]
 8004aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab0:	d002      	beq.n	8004ab8 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d1e3      	bne.n	8004a80 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ab8:	9600      	str	r6, [sp, #0]
 8004aba:	462b      	mov	r3, r5
 8004abc:	2200      	movs	r2, #0
 8004abe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f7ff ff1c 	bl	8004900 <SPI_WaitFifoStateUntilTimeout>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d0d9      	beq.n	8004a80 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004acc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ace:	f043 0320 	orr.w	r3, r3, #32
 8004ad2:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004ad4:	2003      	movs	r0, #3
 8004ad6:	e7d3      	b.n	8004a80 <SPI_EndRxTransaction+0x2a>

08004ad8 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	f000 8170 	beq.w	8004dbe <HAL_SPI_Init+0x2e6>
{
 8004ade:	b510      	push	{r4, lr}
 8004ae0:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004ae2:	6803      	ldr	r3, [r0, #0]
 8004ae4:	4a71      	ldr	r2, [pc, #452]	; (8004cac <HAL_SPI_Init+0x1d4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d010      	beq.n	8004b0c <HAL_SPI_Init+0x34>
 8004aea:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00c      	beq.n	8004b0c <HAL_SPI_Init+0x34>
 8004af2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d008      	beq.n	8004b0c <HAL_SPI_Init+0x34>
 8004afa:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_SPI_Init+0x34>
 8004b02:	f240 1145 	movw	r1, #325	; 0x145
 8004b06:	486a      	ldr	r0, [pc, #424]	; (8004cb0 <HAL_SPI_Init+0x1d8>)
 8004b08:	f7fc f8d6 	bl	8000cb8 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	b113      	cbz	r3, 8004b16 <HAL_SPI_Init+0x3e>
 8004b10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b14:	d16a      	bne.n	8004bec <HAL_SPI_Init+0x114>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004b16:	68a3      	ldr	r3, [r4, #8]
 8004b18:	b12b      	cbz	r3, 8004b26 <HAL_SPI_Init+0x4e>
 8004b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1e:	d002      	beq.n	8004b26 <HAL_SPI_Init+0x4e>
 8004b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b24:	d168      	bne.n	8004bf8 <HAL_SPI_Init+0x120>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004b26:	68e3      	ldr	r3, [r4, #12]
 8004b28:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b2c:	d023      	beq.n	8004b76 <HAL_SPI_Init+0x9e>
 8004b2e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004b32:	d020      	beq.n	8004b76 <HAL_SPI_Init+0x9e>
 8004b34:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004b38:	d01d      	beq.n	8004b76 <HAL_SPI_Init+0x9e>
 8004b3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b3e:	d01a      	beq.n	8004b76 <HAL_SPI_Init+0x9e>
 8004b40:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004b44:	d017      	beq.n	8004b76 <HAL_SPI_Init+0x9e>
 8004b46:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004b4a:	d014      	beq.n	8004b76 <HAL_SPI_Init+0x9e>
 8004b4c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004b50:	d011      	beq.n	8004b76 <HAL_SPI_Init+0x9e>
 8004b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b56:	d00e      	beq.n	8004b76 <HAL_SPI_Init+0x9e>
 8004b58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b5c:	d00b      	beq.n	8004b76 <HAL_SPI_Init+0x9e>
 8004b5e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b62:	d008      	beq.n	8004b76 <HAL_SPI_Init+0x9e>
 8004b64:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004b68:	d005      	beq.n	8004b76 <HAL_SPI_Init+0x9e>
 8004b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6e:	d002      	beq.n	8004b76 <HAL_SPI_Init+0x9e>
 8004b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b74:	d146      	bne.n	8004c04 <HAL_SPI_Init+0x12c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004b76:	69a3      	ldr	r3, [r4, #24]
 8004b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b7c:	d003      	beq.n	8004b86 <HAL_SPI_Init+0xae>
 8004b7e:	b113      	cbz	r3, 8004b86 <HAL_SPI_Init+0xae>
 8004b80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b84:	d144      	bne.n	8004c10 <HAL_SPI_Init+0x138>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d001      	beq.n	8004b90 <HAL_SPI_Init+0xb8>
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d145      	bne.n	8004c1c <HAL_SPI_Init+0x144>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004b90:	69e3      	ldr	r3, [r4, #28]
 8004b92:	b193      	cbz	r3, 8004bba <HAL_SPI_Init+0xe2>
 8004b94:	2b18      	cmp	r3, #24
 8004b96:	d947      	bls.n	8004c28 <HAL_SPI_Init+0x150>
 8004b98:	2b38      	cmp	r3, #56	; 0x38
 8004b9a:	d809      	bhi.n	8004bb0 <HAL_SPI_Init+0xd8>
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d307      	bcc.n	8004bb0 <HAL_SPI_Init+0xd8>
 8004ba0:	3b20      	subs	r3, #32
 8004ba2:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8004ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8004baa:	f013 0f01 	tst.w	r3, #1
 8004bae:	d104      	bne.n	8004bba <HAL_SPI_Init+0xe2>
 8004bb0:	f240 114b 	movw	r1, #331	; 0x14b
 8004bb4:	483e      	ldr	r0, [pc, #248]	; (8004cb0 <HAL_SPI_Init+0x1d8>)
 8004bb6:	f7fc f87f 	bl	8000cb8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004bba:	6a23      	ldr	r3, [r4, #32]
 8004bbc:	b10b      	cbz	r3, 8004bc2 <HAL_SPI_Init+0xea>
 8004bbe:	2b80      	cmp	r3, #128	; 0x80
 8004bc0:	d13b      	bne.n	8004c3a <HAL_SPI_Init+0x162>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bc4:	b10b      	cbz	r3, 8004bca <HAL_SPI_Init+0xf2>
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d13d      	bne.n	8004c46 <HAL_SPI_Init+0x16e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d173      	bne.n	8004cb8 <HAL_SPI_Init+0x1e0>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004bd0:	6923      	ldr	r3, [r4, #16]
 8004bd2:	b10b      	cbz	r3, 8004bd8 <HAL_SPI_Init+0x100>
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d13c      	bne.n	8004c52 <HAL_SPI_Init+0x17a>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004bd8:	6963      	ldr	r3, [r4, #20]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d83f      	bhi.n	8004c5e <HAL_SPI_Init+0x186>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bde:	6863      	ldr	r3, [r4, #4]
 8004be0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be4:	d041      	beq.n	8004c6a <HAL_SPI_Init+0x192>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61e3      	str	r3, [r4, #28]
 8004bea:	e07d      	b.n	8004ce8 <HAL_SPI_Init+0x210>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004bec:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004bf0:	482f      	ldr	r0, [pc, #188]	; (8004cb0 <HAL_SPI_Init+0x1d8>)
 8004bf2:	f7fc f861 	bl	8000cb8 <assert_failed>
 8004bf6:	e78e      	b.n	8004b16 <HAL_SPI_Init+0x3e>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004bf8:	f240 1147 	movw	r1, #327	; 0x147
 8004bfc:	482c      	ldr	r0, [pc, #176]	; (8004cb0 <HAL_SPI_Init+0x1d8>)
 8004bfe:	f7fc f85b 	bl	8000cb8 <assert_failed>
 8004c02:	e790      	b.n	8004b26 <HAL_SPI_Init+0x4e>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004c04:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004c08:	4829      	ldr	r0, [pc, #164]	; (8004cb0 <HAL_SPI_Init+0x1d8>)
 8004c0a:	f7fc f855 	bl	8000cb8 <assert_failed>
 8004c0e:	e7b2      	b.n	8004b76 <HAL_SPI_Init+0x9e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004c10:	f240 1149 	movw	r1, #329	; 0x149
 8004c14:	4826      	ldr	r0, [pc, #152]	; (8004cb0 <HAL_SPI_Init+0x1d8>)
 8004c16:	f7fc f84f 	bl	8000cb8 <assert_failed>
 8004c1a:	e7b4      	b.n	8004b86 <HAL_SPI_Init+0xae>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004c1c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004c20:	4823      	ldr	r0, [pc, #140]	; (8004cb0 <HAL_SPI_Init+0x1d8>)
 8004c22:	f7fc f849 	bl	8000cb8 <assert_failed>
 8004c26:	e7b3      	b.n	8004b90 <HAL_SPI_Init+0xb8>
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d3c1      	bcc.n	8004bb0 <HAL_SPI_Init+0xd8>
 8004c2c:	4a21      	ldr	r2, [pc, #132]	; (8004cb4 <HAL_SPI_Init+0x1dc>)
 8004c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c32:	f013 0f01 	tst.w	r3, #1
 8004c36:	d0bb      	beq.n	8004bb0 <HAL_SPI_Init+0xd8>
 8004c38:	e7bf      	b.n	8004bba <HAL_SPI_Init+0xe2>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004c3a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004c3e:	481c      	ldr	r0, [pc, #112]	; (8004cb0 <HAL_SPI_Init+0x1d8>)
 8004c40:	f7fc f83a 	bl	8000cb8 <assert_failed>
 8004c44:	e7bd      	b.n	8004bc2 <HAL_SPI_Init+0xea>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004c46:	f240 114d 	movw	r1, #333	; 0x14d
 8004c4a:	4819      	ldr	r0, [pc, #100]	; (8004cb0 <HAL_SPI_Init+0x1d8>)
 8004c4c:	f7fc f834 	bl	8000cb8 <assert_failed>
 8004c50:	e7bb      	b.n	8004bca <HAL_SPI_Init+0xf2>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004c52:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004c56:	4816      	ldr	r0, [pc, #88]	; (8004cb0 <HAL_SPI_Init+0x1d8>)
 8004c58:	f7fc f82e 	bl	8000cb8 <assert_failed>
 8004c5c:	e7bc      	b.n	8004bd8 <HAL_SPI_Init+0x100>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004c5e:	f240 1151 	movw	r1, #337	; 0x151
 8004c62:	4813      	ldr	r0, [pc, #76]	; (8004cb0 <HAL_SPI_Init+0x1d8>)
 8004c64:	f7fc f828 	bl	8000cb8 <assert_failed>
 8004c68:	e7b9      	b.n	8004bde <HAL_SPI_Init+0x106>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004c6a:	69e3      	ldr	r3, [r4, #28]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d03b      	beq.n	8004ce8 <HAL_SPI_Init+0x210>
 8004c70:	2b18      	cmp	r3, #24
 8004c72:	d911      	bls.n	8004c98 <HAL_SPI_Init+0x1c0>
 8004c74:	2b38      	cmp	r3, #56	; 0x38
 8004c76:	d809      	bhi.n	8004c8c <HAL_SPI_Init+0x1b4>
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d307      	bcc.n	8004c8c <HAL_SPI_Init+0x1b4>
 8004c7c:	3b20      	subs	r3, #32
 8004c7e:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	f013 0f01 	tst.w	r3, #1
 8004c8a:	d12d      	bne.n	8004ce8 <HAL_SPI_Init+0x210>
 8004c8c:	f240 1155 	movw	r1, #341	; 0x155
 8004c90:	4807      	ldr	r0, [pc, #28]	; (8004cb0 <HAL_SPI_Init+0x1d8>)
 8004c92:	f7fc f811 	bl	8000cb8 <assert_failed>
 8004c96:	e027      	b.n	8004ce8 <HAL_SPI_Init+0x210>
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d3f7      	bcc.n	8004c8c <HAL_SPI_Init+0x1b4>
 8004c9c:	4a05      	ldr	r2, [pc, #20]	; (8004cb4 <HAL_SPI_Init+0x1dc>)
 8004c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca2:	f013 0f01 	tst.w	r3, #1
 8004ca6:	d0f1      	beq.n	8004c8c <HAL_SPI_Init+0x1b4>
 8004ca8:	e01e      	b.n	8004ce8 <HAL_SPI_Init+0x210>
 8004caa:	bf00      	nop
 8004cac:	40013000 	.word	0x40013000
 8004cb0:	08013040 	.word	0x08013040
 8004cb4:	01010100 	.word	0x01010100
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004cb8:	69e3      	ldr	r3, [r4, #28]
 8004cba:	b193      	cbz	r3, 8004ce2 <HAL_SPI_Init+0x20a>
 8004cbc:	2b18      	cmp	r3, #24
 8004cbe:	d96c      	bls.n	8004d9a <HAL_SPI_Init+0x2c2>
 8004cc0:	2b38      	cmp	r3, #56	; 0x38
 8004cc2:	d809      	bhi.n	8004cd8 <HAL_SPI_Init+0x200>
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d307      	bcc.n	8004cd8 <HAL_SPI_Init+0x200>
 8004cc8:	3b20      	subs	r3, #32
 8004cca:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8004cce:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd2:	f013 0f01 	tst.w	r3, #1
 8004cd6:	d104      	bne.n	8004ce2 <HAL_SPI_Init+0x20a>
 8004cd8:	f240 115f 	movw	r1, #351	; 0x15f
 8004cdc:	4839      	ldr	r0, [pc, #228]	; (8004dc4 <HAL_SPI_Init+0x2ec>)
 8004cde:	f7fb ffeb 	bl	8000cb8 <assert_failed>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ce6:	6163      	str	r3, [r4, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cec:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d05b      	beq.n	8004dac <HAL_SPI_Init+0x2d4>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004cfa:	6822      	ldr	r2, [r4, #0]
 8004cfc:	6813      	ldr	r3, [r2, #0]
 8004cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d02:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d04:	68e3      	ldr	r3, [r4, #12]
 8004d06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d0a:	d955      	bls.n	8004db8 <HAL_SPI_Init+0x2e0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d0c:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d12:	d004      	beq.n	8004d1e <HAL_SPI_Init+0x246>
 8004d14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d18:	d001      	beq.n	8004d1e <HAL_SPI_Init+0x246>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d1e:	6863      	ldr	r3, [r4, #4]
 8004d20:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004d24:	68a1      	ldr	r1, [r4, #8]
 8004d26:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	6921      	ldr	r1, [r4, #16]
 8004d2e:	f001 0102 	and.w	r1, r1, #2
 8004d32:	430b      	orrs	r3, r1
 8004d34:	6961      	ldr	r1, [r4, #20]
 8004d36:	f001 0101 	and.w	r1, r1, #1
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	69a1      	ldr	r1, [r4, #24]
 8004d3e:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004d42:	430b      	orrs	r3, r1
 8004d44:	69e1      	ldr	r1, [r4, #28]
 8004d46:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	6a21      	ldr	r1, [r4, #32]
 8004d4e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004d52:	430b      	orrs	r3, r1
 8004d54:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004d56:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004d5a:	6820      	ldr	r0, [r4, #0]
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d60:	8b63      	ldrh	r3, [r4, #26]
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d68:	f001 0110 	and.w	r1, r1, #16
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d70:	f001 0108 	and.w	r1, r1, #8
 8004d74:	430b      	orrs	r3, r1
 8004d76:	68e1      	ldr	r1, [r4, #12]
 8004d78:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	6821      	ldr	r1, [r4, #0]
 8004d80:	431a      	orrs	r2, r3
 8004d82:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d84:	6822      	ldr	r2, [r4, #0]
 8004d86:	69d3      	ldr	r3, [r2, #28]
 8004d88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d8c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d8e:	2000      	movs	r0, #0
 8004d90:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d92:	2301      	movs	r3, #1
 8004d94:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004d98:	bd10      	pop	{r4, pc}
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d39c      	bcc.n	8004cd8 <HAL_SPI_Init+0x200>
 8004d9e:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <HAL_SPI_Init+0x2f0>)
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
 8004da4:	f013 0f01 	tst.w	r3, #1
 8004da8:	d096      	beq.n	8004cd8 <HAL_SPI_Init+0x200>
 8004daa:	e79a      	b.n	8004ce2 <HAL_SPI_Init+0x20a>
    hspi->Lock = HAL_UNLOCKED;
 8004dac:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004db0:	4620      	mov	r0, r4
 8004db2:	f7fb ffa9 	bl	8000d08 <HAL_SPI_MspInit>
 8004db6:	e79d      	b.n	8004cf4 <HAL_SPI_Init+0x21c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004db8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dbc:	e7a7      	b.n	8004d0e <HAL_SPI_Init+0x236>
    return HAL_ERROR;
 8004dbe:	2001      	movs	r0, #1
}
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	08013040 	.word	0x08013040
 8004dc8:	01010100 	.word	0x01010100

08004dcc <HAL_SPI_Transmit_DMA>:
{
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	4604      	mov	r4, r0
 8004dd0:	460e      	mov	r6, r1
 8004dd2:	4617      	mov	r7, r2
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004dd4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d065      	beq.n	8004ea6 <HAL_SPI_Transmit_DMA+0xda>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004dda:	68a3      	ldr	r3, [r4, #8]
 8004ddc:	b113      	cbz	r3, 8004de4 <HAL_SPI_Transmit_DMA+0x18>
 8004dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de2:	d166      	bne.n	8004eb2 <HAL_SPI_Transmit_DMA+0xe6>
  __HAL_LOCK(hspi);
 8004de4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	f000 809a 	beq.w	8004f22 <HAL_SPI_Transmit_DMA+0x156>
 8004dee:	2301      	movs	r3, #1
 8004df0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8004df4:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
 8004df8:	b2ed      	uxtb	r5, r5
 8004dfa:	429d      	cmp	r5, r3
 8004dfc:	f040 808b 	bne.w	8004f16 <HAL_SPI_Transmit_DMA+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8004e00:	2e00      	cmp	r6, #0
 8004e02:	f000 8089 	beq.w	8004f18 <HAL_SPI_Transmit_DMA+0x14c>
 8004e06:	2f00      	cmp	r7, #0
 8004e08:	f000 8086 	beq.w	8004f18 <HAL_SPI_Transmit_DMA+0x14c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e16:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e18:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e1a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e1c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e1e:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e20:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8004e22:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e26:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e2a:	68a3      	ldr	r3, [r4, #8]
 8004e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e30:	d045      	beq.n	8004ebe <HAL_SPI_Transmit_DMA+0xf2>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004e32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e34:	4a3c      	ldr	r2, [pc, #240]	; (8004f28 <HAL_SPI_Transmit_DMA+0x15c>)
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004e38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e3a:	4a3c      	ldr	r2, [pc, #240]	; (8004f2c <HAL_SPI_Transmit_DMA+0x160>)
 8004e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004e3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e40:	4a3b      	ldr	r2, [pc, #236]	; (8004f30 <HAL_SPI_Transmit_DMA+0x164>)
 8004e42:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 8004e44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e46:	2200      	movs	r2, #0
 8004e48:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004e4a:	6822      	ldr	r2, [r4, #0]
 8004e4c:	6853      	ldr	r3, [r2, #4]
 8004e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e52:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004e54:	68e3      	ldr	r3, [r4, #12]
 8004e56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e5a:	d804      	bhi.n	8004e66 <HAL_SPI_Transmit_DMA+0x9a>
 8004e5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e64:	d036      	beq.n	8004ed4 <HAL_SPI_Transmit_DMA+0x108>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004e66:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 8004e68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	320c      	adds	r2, #12
 8004e6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e72:	f7fc fbcf 	bl	8001614 <HAL_DMA_Start_IT>
 8004e76:	4601      	mov	r1, r0
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d144      	bne.n	8004f06 <HAL_SPI_Transmit_DMA+0x13a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004e84:	d103      	bne.n	8004e8e <HAL_SPI_Transmit_DMA+0xc2>
    __HAL_SPI_ENABLE(hspi);
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e8c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	6853      	ldr	r3, [r2, #4]
 8004e92:	f043 0320 	orr.w	r3, r3, #32
 8004e96:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004e98:	6822      	ldr	r2, [r4, #0]
 8004e9a:	6853      	ldr	r3, [r2, #4]
 8004e9c:	f043 0302 	orr.w	r3, r3, #2
 8004ea0:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ea2:	460d      	mov	r5, r1
 8004ea4:	e038      	b.n	8004f18 <HAL_SPI_Transmit_DMA+0x14c>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004ea6:	f240 7145 	movw	r1, #1861	; 0x745
 8004eaa:	4822      	ldr	r0, [pc, #136]	; (8004f34 <HAL_SPI_Transmit_DMA+0x168>)
 8004eac:	f7fb ff04 	bl	8000cb8 <assert_failed>
 8004eb0:	e793      	b.n	8004dda <HAL_SPI_Transmit_DMA+0xe>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004eb2:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 8004eb6:	481f      	ldr	r0, [pc, #124]	; (8004f34 <HAL_SPI_Transmit_DMA+0x168>)
 8004eb8:	f7fb fefe 	bl	8000cb8 <assert_failed>
 8004ebc:	e792      	b.n	8004de4 <HAL_SPI_Transmit_DMA+0x18>
    __HAL_SPI_DISABLE(hspi);
 8004ebe:	6822      	ldr	r2, [r4, #0]
 8004ec0:	6813      	ldr	r3, [r2, #0]
 8004ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec6:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004ec8:	6822      	ldr	r2, [r4, #0]
 8004eca:	6813      	ldr	r3, [r2, #0]
 8004ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e7ae      	b.n	8004e32 <HAL_SPI_Transmit_DMA+0x66>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004ed4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ed6:	f013 0f01 	tst.w	r3, #1
 8004eda:	d109      	bne.n	8004ef0 <HAL_SPI_Transmit_DMA+0x124>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004edc:	6822      	ldr	r2, [r4, #0]
 8004ede:	6853      	ldr	r3, [r2, #4]
 8004ee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ee4:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004ee6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ee8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004eec:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004eee:	e7ba      	b.n	8004e66 <HAL_SPI_Transmit_DMA+0x9a>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004ef0:	6822      	ldr	r2, [r4, #0]
 8004ef2:	6853      	ldr	r3, [r2, #4]
 8004ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ef8:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004efa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004efc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004f00:	3301      	adds	r3, #1
 8004f02:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004f04:	e7af      	b.n	8004e66 <HAL_SPI_Transmit_DMA+0x9a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f06:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004f08:	f043 0310 	orr.w	r3, r3, #16
 8004f0c:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 8004f14:	e000      	b.n	8004f18 <HAL_SPI_Transmit_DMA+0x14c>
    errorcode = HAL_BUSY;
 8004f16:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004f1e:	4628      	mov	r0, r5
 8004f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8004f22:	2502      	movs	r5, #2
 8004f24:	e7fb      	b.n	8004f1e <HAL_SPI_Transmit_DMA+0x152>
 8004f26:	bf00      	nop
 8004f28:	08005191 	.word	0x08005191
 8004f2c:	080051d7 	.word	0x080051d7
 8004f30:	080051b5 	.word	0x080051b5
 8004f34:	08013040 	.word	0x08013040

08004f38 <HAL_SPI_TransmitReceive_DMA>:
{
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	460e      	mov	r6, r1
 8004f3e:	4617      	mov	r7, r2
 8004f40:	461d      	mov	r5, r3
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8004f42:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d06d      	beq.n	8005024 <HAL_SPI_TransmitReceive_DMA+0xec>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004f48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d070      	beq.n	8005030 <HAL_SPI_TransmitReceive_DMA+0xf8>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004f4e:	68a3      	ldr	r3, [r4, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d173      	bne.n	800503c <HAL_SPI_TransmitReceive_DMA+0x104>
  __HAL_LOCK(hspi);
 8004f54:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	f000 8109 	beq.w	8005170 <HAL_SPI_TransmitReceive_DMA+0x238>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 8004f64:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004f68:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8004f6a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d00a      	beq.n	8004f86 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8004f70:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004f74:	f040 80ed 	bne.w	8005152 <HAL_SPI_TransmitReceive_DMA+0x21a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f78:	68a2      	ldr	r2, [r4, #8]
 8004f7a:	2a00      	cmp	r2, #0
 8004f7c:	f040 80ee 	bne.w	800515c <HAL_SPI_TransmitReceive_DMA+0x224>
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	f040 80ed 	bne.w	8005160 <HAL_SPI_TransmitReceive_DMA+0x228>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f86:	2e00      	cmp	r6, #0
 8004f88:	f000 80ec 	beq.w	8005164 <HAL_SPI_TransmitReceive_DMA+0x22c>
 8004f8c:	2f00      	cmp	r7, #0
 8004f8e:	f000 80eb 	beq.w	8005168 <HAL_SPI_TransmitReceive_DMA+0x230>
 8004f92:	2d00      	cmp	r5, #0
 8004f94:	f000 80ea 	beq.w	800516c <HAL_SPI_TransmitReceive_DMA+0x234>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f98:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d002      	beq.n	8004fa8 <HAL_SPI_TransmitReceive_DMA+0x70>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fa2:	2305      	movs	r3, #5
 8004fa4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fac:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004fae:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004fb0:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fb2:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004fb4:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004fb8:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004fbc:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004fbe:	6523      	str	r3, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004fc0:	6822      	ldr	r2, [r4, #0]
 8004fc2:	6853      	ldr	r3, [r2, #4]
 8004fc4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8004fc8:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fca:	68e3      	ldr	r3, [r4, #12]
 8004fcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fd0:	d93a      	bls.n	8005048 <HAL_SPI_TransmitReceive_DMA+0x110>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	6853      	ldr	r3, [r2, #4]
 8004fd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fda:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004fdc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d07b      	beq.n	80050de <HAL_SPI_TransmitReceive_DMA+0x1a6>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004fe6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fe8:	4a62      	ldr	r2, [pc, #392]	; (8005174 <HAL_SPI_TransmitReceive_DMA+0x23c>)
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004fec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fee:	4a62      	ldr	r2, [pc, #392]	; (8005178 <HAL_SPI_TransmitReceive_DMA+0x240>)
 8004ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004ff2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ff4:	4a61      	ldr	r2, [pc, #388]	; (800517c <HAL_SPI_TransmitReceive_DMA+0x244>)
 8004ff6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8004ff8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004ffe:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 8005000:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005004:	b29b      	uxth	r3, r3
 8005006:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005008:	310c      	adds	r1, #12
 800500a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800500c:	f7fc fb02 	bl	8001614 <HAL_DMA_Start_IT>
 8005010:	2800      	cmp	r0, #0
 8005012:	d06b      	beq.n	80050ec <HAL_SPI_TransmitReceive_DMA+0x1b4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005014:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005016:	f043 0310 	orr.w	r3, r3, #16
 800501a:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800501c:	2001      	movs	r0, #1
 800501e:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 8005022:	e097      	b.n	8005154 <HAL_SPI_TransmitReceive_DMA+0x21c>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8005024:	f640 0156 	movw	r1, #2134	; 0x856
 8005028:	4855      	ldr	r0, [pc, #340]	; (8005180 <HAL_SPI_TransmitReceive_DMA+0x248>)
 800502a:	f7fb fe45 	bl	8000cb8 <assert_failed>
 800502e:	e78b      	b.n	8004f48 <HAL_SPI_TransmitReceive_DMA+0x10>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8005030:	f640 0157 	movw	r1, #2135	; 0x857
 8005034:	4852      	ldr	r0, [pc, #328]	; (8005180 <HAL_SPI_TransmitReceive_DMA+0x248>)
 8005036:	f7fb fe3f 	bl	8000cb8 <assert_failed>
 800503a:	e788      	b.n	8004f4e <HAL_SPI_TransmitReceive_DMA+0x16>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800503c:	f640 015a 	movw	r1, #2138	; 0x85a
 8005040:	484f      	ldr	r0, [pc, #316]	; (8005180 <HAL_SPI_TransmitReceive_DMA+0x248>)
 8005042:	f7fb fe39 	bl	8000cb8 <assert_failed>
 8005046:	e785      	b.n	8004f54 <HAL_SPI_TransmitReceive_DMA+0x1c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005048:	6822      	ldr	r2, [r4, #0]
 800504a:	6853      	ldr	r3, [r2, #4]
 800504c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005050:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005052:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800505a:	d01a      	beq.n	8005092 <HAL_SPI_TransmitReceive_DMA+0x15a>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800505c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005064:	d1ba      	bne.n	8004fdc <HAL_SPI_TransmitReceive_DMA+0xa4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	6853      	ldr	r3, [r2, #4]
 800506a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800506e:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005070:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005074:	f013 0f01 	tst.w	r3, #1
 8005078:	d124      	bne.n	80050c4 <HAL_SPI_TransmitReceive_DMA+0x18c>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800507a:	6822      	ldr	r2, [r4, #0]
 800507c:	6853      	ldr	r3, [r2, #4]
 800507e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005082:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005084:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005088:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800508c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8005090:	e7a4      	b.n	8004fdc <HAL_SPI_TransmitReceive_DMA+0xa4>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005092:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8005094:	f013 0f01 	tst.w	r3, #1
 8005098:	d109      	bne.n	80050ae <HAL_SPI_TransmitReceive_DMA+0x176>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800509a:	6822      	ldr	r2, [r4, #0]
 800509c:	6853      	ldr	r3, [r2, #4]
 800509e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a2:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80050a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050a6:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80050aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80050ac:	e7d6      	b.n	800505c <HAL_SPI_TransmitReceive_DMA+0x124>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80050ae:	6822      	ldr	r2, [r4, #0]
 80050b0:	6853      	ldr	r3, [r2, #4]
 80050b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050b6:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80050b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050ba:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80050be:	3301      	adds	r3, #1
 80050c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80050c2:	e7cb      	b.n	800505c <HAL_SPI_TransmitReceive_DMA+0x124>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80050c4:	6822      	ldr	r2, [r4, #0]
 80050c6:	6853      	ldr	r3, [r2, #4]
 80050c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80050cc:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80050ce:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050d2:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80050d6:	3301      	adds	r3, #1
 80050d8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80050dc:	e77e      	b.n	8004fdc <HAL_SPI_TransmitReceive_DMA+0xa4>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80050de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050e0:	4a28      	ldr	r2, [pc, #160]	; (8005184 <HAL_SPI_TransmitReceive_DMA+0x24c>)
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80050e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050e6:	4a28      	ldr	r2, [pc, #160]	; (8005188 <HAL_SPI_TransmitReceive_DMA+0x250>)
 80050e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80050ea:	e782      	b.n	8004ff2 <HAL_SPI_TransmitReceive_DMA+0xba>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80050ec:	6822      	ldr	r2, [r4, #0]
 80050ee:	6853      	ldr	r3, [r2, #4]
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80050f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80050f8:	2300      	movs	r3, #0
 80050fa:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80050fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80050fe:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005100:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005102:	6353      	str	r3, [r2, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005104:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005106:	6393      	str	r3, [r2, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005108:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 800510a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800510c:	b29b      	uxth	r3, r3
 800510e:	320c      	adds	r2, #12
 8005110:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005112:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005114:	f7fc fa7e 	bl	8001614 <HAL_DMA_Start_IT>
 8005118:	b998      	cbnz	r0, 8005142 <HAL_SPI_TransmitReceive_DMA+0x20a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005122:	d103      	bne.n	800512c <HAL_SPI_TransmitReceive_DMA+0x1f4>
    __HAL_SPI_ENABLE(hspi);
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800512a:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800512c:	6822      	ldr	r2, [r4, #0]
 800512e:	6853      	ldr	r3, [r2, #4]
 8005130:	f043 0320 	orr.w	r3, r3, #32
 8005134:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005136:	6822      	ldr	r2, [r4, #0]
 8005138:	6853      	ldr	r3, [r2, #4]
 800513a:	f043 0302 	orr.w	r3, r3, #2
 800513e:	6053      	str	r3, [r2, #4]
 8005140:	e008      	b.n	8005154 <HAL_SPI_TransmitReceive_DMA+0x21c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005142:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005144:	f043 0310 	orr.w	r3, r3, #16
 8005148:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800514a:	2001      	movs	r0, #1
 800514c:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 8005150:	e000      	b.n	8005154 <HAL_SPI_TransmitReceive_DMA+0x21c>
    errorcode = HAL_BUSY;
 8005152:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005154:	2300      	movs	r3, #0
 8005156:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800515a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    errorcode = HAL_BUSY;
 800515c:	2002      	movs	r0, #2
 800515e:	e7f9      	b.n	8005154 <HAL_SPI_TransmitReceive_DMA+0x21c>
 8005160:	2002      	movs	r0, #2
 8005162:	e7f7      	b.n	8005154 <HAL_SPI_TransmitReceive_DMA+0x21c>
    errorcode = HAL_ERROR;
 8005164:	2001      	movs	r0, #1
 8005166:	e7f5      	b.n	8005154 <HAL_SPI_TransmitReceive_DMA+0x21c>
 8005168:	2001      	movs	r0, #1
 800516a:	e7f3      	b.n	8005154 <HAL_SPI_TransmitReceive_DMA+0x21c>
 800516c:	2001      	movs	r0, #1
 800516e:	e7f1      	b.n	8005154 <HAL_SPI_TransmitReceive_DMA+0x21c>
  __HAL_LOCK(hspi);
 8005170:	2002      	movs	r0, #2
 8005172:	e7f2      	b.n	800515a <HAL_SPI_TransmitReceive_DMA+0x222>
 8005174:	080051a9 	.word	0x080051a9
 8005178:	080052b7 	.word	0x080052b7
 800517c:	080051b5 	.word	0x080051b5
 8005180:	08013040 	.word	0x08013040
 8005184:	0800519d 	.word	0x0800519d
 8005188:	08005247 	.word	0x08005247

0800518c <HAL_SPI_RxCpltCallback>:
}
 800518c:	4770      	bx	lr

0800518e <HAL_SPI_TxHalfCpltCallback>:
}
 800518e:	4770      	bx	lr

08005190 <SPI_DMAHalfTransmitCplt>:
{
 8005190:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005192:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005194:	f7ff fffb 	bl	800518e <HAL_SPI_TxHalfCpltCallback>
}
 8005198:	bd08      	pop	{r3, pc}

0800519a <HAL_SPI_RxHalfCpltCallback>:
}
 800519a:	4770      	bx	lr

0800519c <SPI_DMAHalfReceiveCplt>:
{
 800519c:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800519e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80051a0:	f7ff fffb 	bl	800519a <HAL_SPI_RxHalfCpltCallback>
}
 80051a4:	bd08      	pop	{r3, pc}

080051a6 <HAL_SPI_TxRxHalfCpltCallback>:
}
 80051a6:	4770      	bx	lr

080051a8 <SPI_DMAHalfTransmitReceiveCplt>:
{
 80051a8:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80051aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80051ac:	f7ff fffb 	bl	80051a6 <HAL_SPI_TxRxHalfCpltCallback>
}
 80051b0:	bd08      	pop	{r3, pc}

080051b2 <HAL_SPI_ErrorCallback>:
}
 80051b2:	4770      	bx	lr

080051b4 <SPI_DMAError>:
{
 80051b4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80051b8:	6802      	ldr	r2, [r0, #0]
 80051ba:	6853      	ldr	r3, [r2, #4]
 80051bc:	f023 0303 	bic.w	r3, r3, #3
 80051c0:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80051c2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80051c4:	f043 0310 	orr.w	r3, r3, #16
 80051c8:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 80051d0:	f7ff ffef 	bl	80051b2 <HAL_SPI_ErrorCallback>
}
 80051d4:	bd08      	pop	{r3, pc}

080051d6 <SPI_DMATransmitCplt>:
{
 80051d6:	b530      	push	{r4, r5, lr}
 80051d8:	b083      	sub	sp, #12
 80051da:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80051de:	f7fc f83b 	bl	8001258 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80051e2:	682b      	ldr	r3, [r5, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f013 0f20 	tst.w	r3, #32
 80051ea:	d123      	bne.n	8005234 <SPI_DMATransmitCplt+0x5e>
 80051ec:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80051ee:	6821      	ldr	r1, [r4, #0]
 80051f0:	684b      	ldr	r3, [r1, #4]
 80051f2:	f023 0320 	bic.w	r3, r3, #32
 80051f6:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80051f8:	6821      	ldr	r1, [r4, #0]
 80051fa:	684b      	ldr	r3, [r1, #4]
 80051fc:	f023 0302 	bic.w	r3, r3, #2
 8005200:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005202:	2164      	movs	r1, #100	; 0x64
 8005204:	4620      	mov	r0, r4
 8005206:	f7ff fbf5 	bl	80049f4 <SPI_EndRxTxTransaction>
 800520a:	b118      	cbz	r0, 8005214 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800520c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800520e:	f043 0320 	orr.w	r3, r3, #32
 8005212:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005214:	68a3      	ldr	r3, [r4, #8]
 8005216:	b933      	cbnz	r3, 8005226 <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	9201      	str	r2, [sp, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800522a:	2301      	movs	r3, #1
 800522c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005230:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005232:	b923      	cbnz	r3, 800523e <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 8005234:	4620      	mov	r0, r4
 8005236:	f009 fdbd 	bl	800edb4 <HAL_SPI_TxCpltCallback>
}
 800523a:	b003      	add	sp, #12
 800523c:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800523e:	4620      	mov	r0, r4
 8005240:	f7ff ffb7 	bl	80051b2 <HAL_SPI_ErrorCallback>
      return;
 8005244:	e7f9      	b.n	800523a <SPI_DMATransmitCplt+0x64>

08005246 <SPI_DMAReceiveCplt>:
{
 8005246:	b538      	push	{r3, r4, r5, lr}
 8005248:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800524a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800524c:	f7fc f804 	bl	8001258 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f013 0f20 	tst.w	r3, #32
 8005258:	d11f      	bne.n	800529a <SPI_DMAReceiveCplt+0x54>
 800525a:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800525c:	6821      	ldr	r1, [r4, #0]
 800525e:	684b      	ldr	r3, [r1, #4]
 8005260:	f023 0320 	bic.w	r3, r3, #32
 8005264:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005266:	68a3      	ldr	r3, [r4, #8]
 8005268:	b91b      	cbnz	r3, 8005272 <SPI_DMAReceiveCplt+0x2c>
 800526a:	6863      	ldr	r3, [r4, #4]
 800526c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005270:	d017      	beq.n	80052a2 <SPI_DMAReceiveCplt+0x5c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005272:	6821      	ldr	r1, [r4, #0]
 8005274:	684b      	ldr	r3, [r1, #4]
 8005276:	f023 0301 	bic.w	r3, r3, #1
 800527a:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800527c:	2164      	movs	r1, #100	; 0x64
 800527e:	4620      	mov	r0, r4
 8005280:	f7ff fbe9 	bl	8004a56 <SPI_EndRxTransaction>
 8005284:	b108      	cbz	r0, 800528a <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005286:	2320      	movs	r3, #32
 8005288:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005290:	2301      	movs	r3, #1
 8005292:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005296:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005298:	b94b      	cbnz	r3, 80052ae <SPI_DMAReceiveCplt+0x68>
  HAL_SPI_RxCpltCallback(hspi);
 800529a:	4620      	mov	r0, r4
 800529c:	f7ff ff76 	bl	800518c <HAL_SPI_RxCpltCallback>
}
 80052a0:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80052a2:	6821      	ldr	r1, [r4, #0]
 80052a4:	684b      	ldr	r3, [r1, #4]
 80052a6:	f023 0303 	bic.w	r3, r3, #3
 80052aa:	604b      	str	r3, [r1, #4]
 80052ac:	e7e6      	b.n	800527c <SPI_DMAReceiveCplt+0x36>
      HAL_SPI_ErrorCallback(hspi);
 80052ae:	4620      	mov	r0, r4
 80052b0:	f7ff ff7f 	bl	80051b2 <HAL_SPI_ErrorCallback>
      return;
 80052b4:	e7f4      	b.n	80052a0 <SPI_DMAReceiveCplt+0x5a>

080052b6 <SPI_DMATransmitReceiveCplt>:
{
 80052b6:	b538      	push	{r3, r4, r5, lr}
 80052b8:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052ba:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80052bc:	f7fb ffcc 	bl	8001258 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f013 0f20 	tst.w	r3, #32
 80052c8:	d11c      	bne.n	8005304 <SPI_DMATransmitReceiveCplt+0x4e>
 80052ca:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80052cc:	6821      	ldr	r1, [r4, #0]
 80052ce:	684b      	ldr	r3, [r1, #4]
 80052d0:	f023 0320 	bic.w	r3, r3, #32
 80052d4:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80052d6:	2164      	movs	r1, #100	; 0x64
 80052d8:	4620      	mov	r0, r4
 80052da:	f7ff fb8b 	bl	80049f4 <SPI_EndRxTxTransaction>
 80052de:	b118      	cbz	r0, 80052e8 <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80052e2:	f043 0320 	orr.w	r3, r3, #32
 80052e6:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80052e8:	6822      	ldr	r2, [r4, #0]
 80052ea:	6853      	ldr	r3, [r2, #4]
 80052ec:	f023 0303 	bic.w	r3, r3, #3
 80052f0:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80052f6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005300:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005302:	b91b      	cbnz	r3, 800530c <SPI_DMATransmitReceiveCplt+0x56>
  HAL_SPI_TxRxCpltCallback(hspi);
 8005304:	4620      	mov	r0, r4
 8005306:	f009 fd5d 	bl	800edc4 <HAL_SPI_TxRxCpltCallback>
}
 800530a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800530c:	4620      	mov	r0, r4
 800530e:	f7ff ff50 	bl	80051b2 <HAL_SPI_ErrorCallback>
      return;
 8005312:	e7fa      	b.n	800530a <SPI_DMATransmitReceiveCplt+0x54>

08005314 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005314:	4770      	bx	lr
	...

08005318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005318:	b510      	push	{r4, lr}
 800531a:	4604      	mov	r4, r0
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800531c:	6803      	ldr	r3, [r0, #0]
 800531e:	4a3c      	ldr	r2, [pc, #240]	; (8005410 <HAL_TIM_Base_Start_IT+0xf8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d02f      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x6c>
 8005324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005328:	d02c      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x6c>
 800532a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800532e:	4293      	cmp	r3, r2
 8005330:	d028      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x6c>
 8005332:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005336:	4293      	cmp	r3, r2
 8005338:	d024      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x6c>
 800533a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800533e:	4293      	cmp	r3, r2
 8005340:	d020      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x6c>
 8005342:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005346:	4293      	cmp	r3, r2
 8005348:	d01c      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x6c>
 800534a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800534e:	4293      	cmp	r3, r2
 8005350:	d018      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x6c>
 8005352:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8005356:	4293      	cmp	r3, r2
 8005358:	d014      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x6c>
 800535a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800535e:	4293      	cmp	r3, r2
 8005360:	d010      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x6c>
 8005362:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005366:	4293      	cmp	r3, r2
 8005368:	d00c      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x6c>
 800536a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800536e:	4293      	cmp	r3, r2
 8005370:	d008      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x6c>
 8005372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005376:	4293      	cmp	r3, r2
 8005378:	d004      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x6c>
 800537a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800537e:	4825      	ldr	r0, [pc, #148]	; (8005414 <HAL_TIM_Base_Start_IT+0xfc>)
 8005380:	f7fb fc9a 	bl	8000cb8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005384:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b01      	cmp	r3, #1
 800538c:	d13a      	bne.n	8005404 <HAL_TIM_Base_Start_IT+0xec>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538e:	2302      	movs	r3, #2
 8005390:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005394:	6822      	ldr	r2, [r4, #0]
 8005396:	68d3      	ldr	r3, [r2, #12]
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	4a1b      	ldr	r2, [pc, #108]	; (8005410 <HAL_TIM_Base_Start_IT+0xf8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d020      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0xd0>
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053aa:	d01d      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0xd0>
 80053ac:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d019      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0xd0>
 80053b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d015      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0xd0>
 80053bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d011      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0xd0>
 80053c4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00d      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0xd0>
 80053cc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d009      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0xd0>
 80053d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053d8:	4293      	cmp	r3, r2
 80053da:	d005      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0xd0>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053e4:	2000      	movs	r0, #0
 80053e6:	e00e      	b.n	8005406 <HAL_TIM_Base_Start_IT+0xee>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e8:	6899      	ldr	r1, [r3, #8]
 80053ea:	4a0b      	ldr	r2, [pc, #44]	; (8005418 <HAL_TIM_Base_Start_IT+0x100>)
 80053ec:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ee:	2a06      	cmp	r2, #6
 80053f0:	d00a      	beq.n	8005408 <HAL_TIM_Base_Start_IT+0xf0>
 80053f2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80053f6:	d009      	beq.n	800540c <HAL_TIM_Base_Start_IT+0xf4>
      __HAL_TIM_ENABLE(htim);
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005400:	2000      	movs	r0, #0
 8005402:	e000      	b.n	8005406 <HAL_TIM_Base_Start_IT+0xee>
    return HAL_ERROR;
 8005404:	2001      	movs	r0, #1
}
 8005406:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005408:	2000      	movs	r0, #0
 800540a:	e7fc      	b.n	8005406 <HAL_TIM_Base_Start_IT+0xee>
 800540c:	2000      	movs	r0, #0
 800540e:	e7fa      	b.n	8005406 <HAL_TIM_Base_Start_IT+0xee>
 8005410:	40012c00 	.word	0x40012c00
 8005414:	08013078 	.word	0x08013078
 8005418:	00010007 	.word	0x00010007

0800541c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800541c:	4770      	bx	lr

0800541e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800541e:	4770      	bx	lr

08005420 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005420:	4770      	bx	lr

08005422 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005422:	4770      	bx	lr

08005424 <HAL_TIM_IRQHandler>:
{
 8005424:	b510      	push	{r4, lr}
 8005426:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005428:	6803      	ldr	r3, [r0, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	f012 0f02 	tst.w	r2, #2
 8005430:	d012      	beq.n	8005458 <HAL_TIM_IRQHandler+0x34>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	f012 0f02 	tst.w	r2, #2
 8005438:	d00e      	beq.n	8005458 <HAL_TIM_IRQHandler+0x34>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800543a:	f06f 0202 	mvn.w	r2, #2
 800543e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005440:	2301      	movs	r3, #1
 8005442:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005444:	6803      	ldr	r3, [r0, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f013 0f03 	tst.w	r3, #3
 800544c:	f000 809f 	beq.w	800558e <HAL_TIM_IRQHandler+0x16a>
          HAL_TIM_IC_CaptureCallback(htim);
 8005450:	f7ff ffe5 	bl	800541e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005454:	2300      	movs	r3, #0
 8005456:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	f012 0f04 	tst.w	r2, #4
 8005460:	d013      	beq.n	800548a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	f012 0f04 	tst.w	r2, #4
 8005468:	d00f      	beq.n	800548a <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800546a:	f06f 0204 	mvn.w	r2, #4
 800546e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005470:	2302      	movs	r3, #2
 8005472:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	f413 7f40 	tst.w	r3, #768	; 0x300
 800547c:	f000 808d 	beq.w	800559a <HAL_TIM_IRQHandler+0x176>
        HAL_TIM_IC_CaptureCallback(htim);
 8005480:	4620      	mov	r0, r4
 8005482:	f7ff ffcc 	bl	800541e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	2300      	movs	r3, #0
 8005488:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	f012 0f08 	tst.w	r2, #8
 8005492:	d012      	beq.n	80054ba <HAL_TIM_IRQHandler+0x96>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	f012 0f08 	tst.w	r2, #8
 800549a:	d00e      	beq.n	80054ba <HAL_TIM_IRQHandler+0x96>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800549c:	f06f 0208 	mvn.w	r2, #8
 80054a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054a2:	2304      	movs	r3, #4
 80054a4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f013 0f03 	tst.w	r3, #3
 80054ae:	d07b      	beq.n	80055a8 <HAL_TIM_IRQHandler+0x184>
        HAL_TIM_IC_CaptureCallback(htim);
 80054b0:	4620      	mov	r0, r4
 80054b2:	f7ff ffb4 	bl	800541e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b6:	2300      	movs	r3, #0
 80054b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	f012 0f10 	tst.w	r2, #16
 80054c2:	d012      	beq.n	80054ea <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	f012 0f10 	tst.w	r2, #16
 80054ca:	d00e      	beq.n	80054ea <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054cc:	f06f 0210 	mvn.w	r2, #16
 80054d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d2:	2308      	movs	r3, #8
 80054d4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f413 7f40 	tst.w	r3, #768	; 0x300
 80054de:	d06a      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x192>
        HAL_TIM_IC_CaptureCallback(htim);
 80054e0:	4620      	mov	r0, r4
 80054e2:	f7ff ff9c 	bl	800541e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e6:	2300      	movs	r3, #0
 80054e8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	f012 0f01 	tst.w	r2, #1
 80054f2:	d003      	beq.n	80054fc <HAL_TIM_IRQHandler+0xd8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	f012 0f01 	tst.w	r2, #1
 80054fa:	d163      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x1a0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005504:	d003      	beq.n	800550e <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	f012 0f80 	tst.w	r2, #128	; 0x80
 800550c:	d161      	bne.n	80055d2 <HAL_TIM_IRQHandler+0x1ae>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005516:	d003      	beq.n	8005520 <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800551e:	d15f      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x1bc>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005528:	d003      	beq.n	8005532 <HAL_TIM_IRQHandler+0x10e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005530:	d15d      	bne.n	80055ee <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	f012 0f20 	tst.w	r2, #32
 800553a:	d003      	beq.n	8005544 <HAL_TIM_IRQHandler+0x120>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	f012 0f20 	tst.w	r2, #32
 8005542:	d15b      	bne.n	80055fc <HAL_TIM_IRQHandler+0x1d8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800554c:	d003      	beq.n	8005556 <HAL_TIM_IRQHandler+0x132>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8005554:	d159      	bne.n	800560a <HAL_TIM_IRQHandler+0x1e6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	691a      	ldr	r2, [r3, #16]
 800555a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800555e:	d003      	beq.n	8005568 <HAL_TIM_IRQHandler+0x144>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8005566:	d157      	bne.n	8005618 <HAL_TIM_IRQHandler+0x1f4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8005570:	d003      	beq.n	800557a <HAL_TIM_IRQHandler+0x156>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8005578:	d155      	bne.n	8005626 <HAL_TIM_IRQHandler+0x202>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8005582:	d003      	beq.n	800558c <HAL_TIM_IRQHandler+0x168>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 800558a:	d153      	bne.n	8005634 <HAL_TIM_IRQHandler+0x210>
}
 800558c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	f7ff ff45 	bl	800541c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005592:	4620      	mov	r0, r4
 8005594:	f7ff ff44 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
 8005598:	e75c      	b.n	8005454 <HAL_TIM_IRQHandler+0x30>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	4620      	mov	r0, r4
 800559c:	f7ff ff3e 	bl	800541c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	4620      	mov	r0, r4
 80055a2:	f7ff ff3d 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
 80055a6:	e76e      	b.n	8005486 <HAL_TIM_IRQHandler+0x62>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a8:	4620      	mov	r0, r4
 80055aa:	f7ff ff37 	bl	800541c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ae:	4620      	mov	r0, r4
 80055b0:	f7ff ff36 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
 80055b4:	e77f      	b.n	80054b6 <HAL_TIM_IRQHandler+0x92>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	4620      	mov	r0, r4
 80055b8:	f7ff ff30 	bl	800541c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	4620      	mov	r0, r4
 80055be:	f7ff ff2f 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
 80055c2:	e790      	b.n	80054e6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055c4:	f06f 0201 	mvn.w	r2, #1
 80055c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ca:	4620      	mov	r0, r4
 80055cc:	f7fb fb0c 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
 80055d0:	e794      	b.n	80054fc <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055d6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 f938 	bl	800584e <HAL_TIMEx_BreakCallback>
 80055de:	e796      	b.n	800550e <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80055e6:	4620      	mov	r0, r4
 80055e8:	f000 f932 	bl	8005850 <HAL_TIMEx_Break2Callback>
 80055ec:	e798      	b.n	8005520 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80055f4:	4620      	mov	r0, r4
 80055f6:	f7ff ff14 	bl	8005422 <HAL_TIM_TriggerCallback>
 80055fa:	e79a      	b.n	8005532 <HAL_TIM_IRQHandler+0x10e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055fc:	f06f 0220 	mvn.w	r2, #32
 8005600:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005602:	4620      	mov	r0, r4
 8005604:	f000 f922 	bl	800584c <HAL_TIMEx_CommutCallback>
 8005608:	e79c      	b.n	8005544 <HAL_TIM_IRQHandler+0x120>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800560a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800560e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005610:	4620      	mov	r0, r4
 8005612:	f000 f91e 	bl	8005852 <HAL_TIMEx_EncoderIndexCallback>
 8005616:	e79e      	b.n	8005556 <HAL_TIM_IRQHandler+0x132>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005618:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800561c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 800561e:	4620      	mov	r0, r4
 8005620:	f000 f918 	bl	8005854 <HAL_TIMEx_DirectionChangeCallback>
 8005624:	e7a0      	b.n	8005568 <HAL_TIM_IRQHandler+0x144>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005626:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800562a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 800562c:	4620      	mov	r0, r4
 800562e:	f000 f912 	bl	8005856 <HAL_TIMEx_IndexErrorCallback>
 8005632:	e7a2      	b.n	800557a <HAL_TIM_IRQHandler+0x156>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005634:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005638:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 800563a:	4620      	mov	r0, r4
 800563c:	f000 f90c 	bl	8005858 <HAL_TIMEx_TransitionErrorCallback>
}
 8005640:	e7a4      	b.n	800558c <HAL_TIM_IRQHandler+0x168>
	...

08005644 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005644:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005646:	4a36      	ldr	r2, [pc, #216]	; (8005720 <TIM_Base_SetConfig+0xdc>)
 8005648:	4290      	cmp	r0, r2
 800564a:	d016      	beq.n	800567a <TIM_Base_SetConfig+0x36>
 800564c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005650:	d013      	beq.n	800567a <TIM_Base_SetConfig+0x36>
 8005652:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005656:	4290      	cmp	r0, r2
 8005658:	d00f      	beq.n	800567a <TIM_Base_SetConfig+0x36>
 800565a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800565e:	4290      	cmp	r0, r2
 8005660:	d00b      	beq.n	800567a <TIM_Base_SetConfig+0x36>
 8005662:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005666:	4290      	cmp	r0, r2
 8005668:	d007      	beq.n	800567a <TIM_Base_SetConfig+0x36>
 800566a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800566e:	4290      	cmp	r0, r2
 8005670:	d003      	beq.n	800567a <TIM_Base_SetConfig+0x36>
 8005672:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8005676:	4290      	cmp	r0, r2
 8005678:	d103      	bne.n	8005682 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800567a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800567e:	684a      	ldr	r2, [r1, #4]
 8005680:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005682:	4a27      	ldr	r2, [pc, #156]	; (8005720 <TIM_Base_SetConfig+0xdc>)
 8005684:	4290      	cmp	r0, r2
 8005686:	d022      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 8005688:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800568c:	d01f      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 800568e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005692:	4290      	cmp	r0, r2
 8005694:	d01b      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 8005696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800569a:	4290      	cmp	r0, r2
 800569c:	d017      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 800569e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056a2:	4290      	cmp	r0, r2
 80056a4:	d013      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 80056a6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80056aa:	4290      	cmp	r0, r2
 80056ac:	d00f      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 80056ae:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80056b2:	4290      	cmp	r0, r2
 80056b4:	d00b      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 80056b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056ba:	4290      	cmp	r0, r2
 80056bc:	d007      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 80056be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056c2:	4290      	cmp	r0, r2
 80056c4:	d003      	beq.n	80056ce <TIM_Base_SetConfig+0x8a>
 80056c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ca:	4290      	cmp	r0, r2
 80056cc:	d103      	bne.n	80056d6 <TIM_Base_SetConfig+0x92>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056d2:	68ca      	ldr	r2, [r1, #12]
 80056d4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056da:	694a      	ldr	r2, [r1, #20]
 80056dc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80056de:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e0:	688b      	ldr	r3, [r1, #8]
 80056e2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e4:	680b      	ldr	r3, [r1, #0]
 80056e6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e8:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <TIM_Base_SetConfig+0xdc>)
 80056ea:	4298      	cmp	r0, r3
 80056ec:	d013      	beq.n	8005716 <TIM_Base_SetConfig+0xd2>
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	4298      	cmp	r0, r3
 80056f4:	d00f      	beq.n	8005716 <TIM_Base_SetConfig+0xd2>
 80056f6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80056fa:	4298      	cmp	r0, r3
 80056fc:	d00b      	beq.n	8005716 <TIM_Base_SetConfig+0xd2>
 80056fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005702:	4298      	cmp	r0, r3
 8005704:	d007      	beq.n	8005716 <TIM_Base_SetConfig+0xd2>
 8005706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800570a:	4298      	cmp	r0, r3
 800570c:	d003      	beq.n	8005716 <TIM_Base_SetConfig+0xd2>
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	4298      	cmp	r0, r3
 8005714:	d101      	bne.n	800571a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005716:	690b      	ldr	r3, [r1, #16]
 8005718:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800571a:	2301      	movs	r3, #1
 800571c:	6143      	str	r3, [r0, #20]
}
 800571e:	4770      	bx	lr
 8005720:	40012c00 	.word	0x40012c00

08005724 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005724:	2800      	cmp	r0, #0
 8005726:	f000 808a 	beq.w	800583e <HAL_TIM_Base_Init+0x11a>
{
 800572a:	b510      	push	{r4, lr}
 800572c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800572e:	6803      	ldr	r3, [r0, #0]
 8005730:	4a44      	ldr	r2, [pc, #272]	; (8005844 <HAL_TIM_Base_Init+0x120>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d02f      	beq.n	8005796 <HAL_TIM_Base_Init+0x72>
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573a:	d02c      	beq.n	8005796 <HAL_TIM_Base_Init+0x72>
 800573c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005740:	4293      	cmp	r3, r2
 8005742:	d028      	beq.n	8005796 <HAL_TIM_Base_Init+0x72>
 8005744:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005748:	4293      	cmp	r3, r2
 800574a:	d024      	beq.n	8005796 <HAL_TIM_Base_Init+0x72>
 800574c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005750:	4293      	cmp	r3, r2
 8005752:	d020      	beq.n	8005796 <HAL_TIM_Base_Init+0x72>
 8005754:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005758:	4293      	cmp	r3, r2
 800575a:	d01c      	beq.n	8005796 <HAL_TIM_Base_Init+0x72>
 800575c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005760:	4293      	cmp	r3, r2
 8005762:	d018      	beq.n	8005796 <HAL_TIM_Base_Init+0x72>
 8005764:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8005768:	4293      	cmp	r3, r2
 800576a:	d014      	beq.n	8005796 <HAL_TIM_Base_Init+0x72>
 800576c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005770:	4293      	cmp	r3, r2
 8005772:	d010      	beq.n	8005796 <HAL_TIM_Base_Init+0x72>
 8005774:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005778:	4293      	cmp	r3, r2
 800577a:	d00c      	beq.n	8005796 <HAL_TIM_Base_Init+0x72>
 800577c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005780:	4293      	cmp	r3, r2
 8005782:	d008      	beq.n	8005796 <HAL_TIM_Base_Init+0x72>
 8005784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005788:	4293      	cmp	r3, r2
 800578a:	d004      	beq.n	8005796 <HAL_TIM_Base_Init+0x72>
 800578c:	f44f 7191 	mov.w	r1, #290	; 0x122
 8005790:	482d      	ldr	r0, [pc, #180]	; (8005848 <HAL_TIM_Base_Init+0x124>)
 8005792:	f7fb fa91 	bl	8000cb8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005796:	68a3      	ldr	r3, [r4, #8]
 8005798:	b13b      	cbz	r3, 80057aa <HAL_TIM_Base_Init+0x86>
 800579a:	2b10      	cmp	r3, #16
 800579c:	d005      	beq.n	80057aa <HAL_TIM_Base_Init+0x86>
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d003      	beq.n	80057aa <HAL_TIM_Base_Init+0x86>
 80057a2:	2b40      	cmp	r3, #64	; 0x40
 80057a4:	d001      	beq.n	80057aa <HAL_TIM_Base_Init+0x86>
 80057a6:	2b60      	cmp	r3, #96	; 0x60
 80057a8:	d131      	bne.n	800580e <HAL_TIM_Base_Init+0xea>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80057aa:	6923      	ldr	r3, [r4, #16]
 80057ac:	b12b      	cbz	r3, 80057ba <HAL_TIM_Base_Init+0x96>
 80057ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b2:	d002      	beq.n	80057ba <HAL_TIM_Base_Init+0x96>
 80057b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b8:	d12f      	bne.n	800581a <HAL_TIM_Base_Init+0xf6>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80057ba:	69a3      	ldr	r3, [r4, #24]
 80057bc:	b10b      	cbz	r3, 80057c2 <HAL_TIM_Base_Init+0x9e>
 80057be:	2b80      	cmp	r3, #128	; 0x80
 80057c0:	d131      	bne.n	8005826 <HAL_TIM_Base_Init+0x102>
  if (htim->State == HAL_TIM_STATE_RESET)
 80057c2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80057c6:	b3a3      	cbz	r3, 8005832 <HAL_TIM_Base_Init+0x10e>
  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	2302      	movs	r3, #2
 80057ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ce:	4621      	mov	r1, r4
 80057d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80057d4:	f7ff ff36 	bl	8005644 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d8:	2301      	movs	r3, #1
 80057da:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80057e2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80057e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80057ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80057ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80057fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057fe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005802:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005806:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800580a:	2000      	movs	r0, #0
}
 800580c:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800580e:	f240 1123 	movw	r1, #291	; 0x123
 8005812:	480d      	ldr	r0, [pc, #52]	; (8005848 <HAL_TIM_Base_Init+0x124>)
 8005814:	f7fb fa50 	bl	8000cb8 <assert_failed>
 8005818:	e7c7      	b.n	80057aa <HAL_TIM_Base_Init+0x86>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800581a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800581e:	480a      	ldr	r0, [pc, #40]	; (8005848 <HAL_TIM_Base_Init+0x124>)
 8005820:	f7fb fa4a 	bl	8000cb8 <assert_failed>
 8005824:	e7c9      	b.n	80057ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005826:	f240 1125 	movw	r1, #293	; 0x125
 800582a:	4807      	ldr	r0, [pc, #28]	; (8005848 <HAL_TIM_Base_Init+0x124>)
 800582c:	f7fb fa44 	bl	8000cb8 <assert_failed>
 8005830:	e7c7      	b.n	80057c2 <HAL_TIM_Base_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 8005832:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005836:	4620      	mov	r0, r4
 8005838:	f7ff fd6c 	bl	8005314 <HAL_TIM_Base_MspInit>
 800583c:	e7c4      	b.n	80057c8 <HAL_TIM_Base_Init+0xa4>
    return HAL_ERROR;
 800583e:	2001      	movs	r0, #1
}
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40012c00 	.word	0x40012c00
 8005848:	08013078 	.word	0x08013078

0800584c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800584c:	4770      	bx	lr

0800584e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800584e:	4770      	bx	lr

08005850 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005850:	4770      	bx	lr

08005852 <HAL_TIMEx_EncoderIndexCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005852:	4770      	bx	lr

08005854 <HAL_TIMEx_DirectionChangeCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005854:	4770      	bx	lr

08005856 <HAL_TIMEx_IndexErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005856:	4770      	bx	lr

08005858 <HAL_TIMEx_TransitionErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005858:	4770      	bx	lr

0800585a <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800585a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	e852 3f00 	ldrex	r3, [r2]
 8005860:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	e842 3100 	strex	r1, r3, [r2]
 8005868:	2900      	cmp	r1, #0
 800586a:	d1f6      	bne.n	800585a <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800586c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	f102 0308 	add.w	r3, r2, #8
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	3208      	adds	r2, #8
 800587c:	e842 3100 	strex	r1, r3, [r2]
 8005880:	2900      	cmp	r1, #0
 8005882:	d1f3      	bne.n	800586c <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005884:	2320      	movs	r3, #32
 8005886:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 800588a:	4770      	bx	lr

0800588c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800588c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	e852 3f00 	ldrex	r3, [r2]
 8005892:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	e842 3100 	strex	r1, r3, [r2]
 800589a:	2900      	cmp	r1, #0
 800589c:	d1f6      	bne.n	800588c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800589e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	f102 0308 	add.w	r3, r2, #8
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	3208      	adds	r2, #8
 80058b2:	e842 3100 	strex	r1, r3, [r2]
 80058b6:	2900      	cmp	r1, #0
 80058b8:	d1f1      	bne.n	800589e <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ba:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d006      	beq.n	80058ce <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058c0:	2320      	movs	r3, #32
 80058c2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c6:	2300      	movs	r3, #0
 80058c8:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058ca:	6703      	str	r3, [r0, #112]	; 0x70
}
 80058cc:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	e852 3f00 	ldrex	r3, [r2]
 80058d4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	e842 3100 	strex	r1, r3, [r2]
 80058dc:	2900      	cmp	r1, #0
 80058de:	d1f6      	bne.n	80058ce <UART_EndRxTransfer+0x42>
 80058e0:	e7ee      	b.n	80058c0 <UART_EndRxTransfer+0x34>
	...

080058e4 <HAL_UART_Transmit_DMA>:
{
 80058e4:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80058e6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80058ea:	2a20      	cmp	r2, #32
 80058ec:	d14a      	bne.n	8005984 <HAL_UART_Transmit_DMA+0xa0>
{
 80058ee:	b510      	push	{r4, lr}
 80058f0:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80058f2:	2900      	cmp	r1, #0
 80058f4:	d048      	beq.n	8005988 <HAL_UART_Transmit_DMA+0xa4>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d048      	beq.n	800598c <HAL_UART_Transmit_DMA+0xa8>
    __HAL_LOCK(huart);
 80058fa:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80058fe:	2a01      	cmp	r2, #1
 8005900:	d046      	beq.n	8005990 <HAL_UART_Transmit_DMA+0xac>
 8005902:	2201      	movs	r2, #1
 8005904:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8005908:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800590a:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800590e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005912:	2200      	movs	r2, #0
 8005914:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005918:	2221      	movs	r2, #33	; 0x21
 800591a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 800591e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005920:	b1e2      	cbz	r2, 800595c <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005922:	491c      	ldr	r1, [pc, #112]	; (8005994 <HAL_UART_Transmit_DMA+0xb0>)
 8005924:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005926:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005928:	491b      	ldr	r1, [pc, #108]	; (8005998 <HAL_UART_Transmit_DMA+0xb4>)
 800592a:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800592c:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800592e:	491b      	ldr	r1, [pc, #108]	; (800599c <HAL_UART_Transmit_DMA+0xb8>)
 8005930:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005932:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005934:	2100      	movs	r1, #0
 8005936:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005938:	6802      	ldr	r2, [r0, #0]
 800593a:	3228      	adds	r2, #40	; 0x28
 800593c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800593e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005940:	f7fb fe68 	bl	8001614 <HAL_DMA_Start_IT>
 8005944:	b150      	cbz	r0, 800595c <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005946:	2310      	movs	r3, #16
 8005948:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 800594c:	2300      	movs	r3, #0
 800594e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8005952:	2320      	movs	r3, #32
 8005954:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8005958:	2001      	movs	r0, #1
 800595a:	e012      	b.n	8005982 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	2240      	movs	r2, #64	; 0x40
 8005960:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8005962:	2300      	movs	r3, #0
 8005964:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005968:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	f102 0308 	add.w	r3, r2, #8
 800596e:	e853 3f00 	ldrex	r3, [r3]
 8005972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	3208      	adds	r2, #8
 8005978:	e842 3100 	strex	r1, r3, [r2]
 800597c:	2900      	cmp	r1, #0
 800597e:	d1f3      	bne.n	8005968 <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 8005980:	2000      	movs	r0, #0
}
 8005982:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005984:	2002      	movs	r0, #2
}
 8005986:	4770      	bx	lr
      return HAL_ERROR;
 8005988:	2001      	movs	r0, #1
 800598a:	e7fa      	b.n	8005982 <HAL_UART_Transmit_DMA+0x9e>
 800598c:	2001      	movs	r0, #1
 800598e:	e7f8      	b.n	8005982 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 8005990:	2002      	movs	r0, #2
 8005992:	e7f6      	b.n	8005982 <HAL_UART_Transmit_DMA+0x9e>
 8005994:	080059a1 	.word	0x080059a1
 8005998:	08005a0f 	.word	0x08005a0f
 800599c:	08005a1b 	.word	0x08005a1b

080059a0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059a0:	b508      	push	{r3, lr}
 80059a2:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059a4:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f013 0f20 	tst.w	r3, #32
 80059ae:	d118      	bne.n	80059e2 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059b6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	f102 0308 	add.w	r3, r2, #8
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	3208      	adds	r2, #8
 80059c6:	e842 3100 	strex	r1, r3, [r2]
 80059ca:	2900      	cmp	r1, #0
 80059cc:	d1f3      	bne.n	80059b6 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	e852 3f00 	ldrex	r3, [r2]
 80059d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	e842 3100 	strex	r1, r3, [r2]
 80059dc:	2900      	cmp	r1, #0
 80059de:	d1f6      	bne.n	80059ce <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059e0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80059e2:	f009 fa29 	bl	800ee38 <HAL_UART_TxCpltCallback>
}
 80059e6:	e7fb      	b.n	80059e0 <UART_DMATransmitCplt+0x40>

080059e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059e8:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	e852 3f00 	ldrex	r3, [r2]
 80059f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	e842 3100 	strex	r1, r3, [r2]
 80059f8:	2900      	cmp	r1, #0
 80059fa:	d1f6      	bne.n	80059ea <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059fc:	2320      	movs	r3, #32
 80059fe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a06:	f009 fa17 	bl	800ee38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a0a:	bd08      	pop	{r3, pc}

08005a0c <HAL_UART_TxHalfCpltCallback>:
}
 8005a0c:	4770      	bx	lr

08005a0e <UART_DMATxHalfCplt>:
{
 8005a0e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005a10:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005a12:	f7ff fffb 	bl	8005a0c <HAL_UART_TxHalfCpltCallback>
}
 8005a16:	bd08      	pop	{r3, pc}

08005a18 <HAL_UART_ErrorCallback>:
}
 8005a18:	4770      	bx	lr

08005a1a <UART_DMAError>:
{
 8005a1a:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a1c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a1e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a22:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a2e:	d001      	beq.n	8005a34 <UART_DMAError+0x1a>
 8005a30:	2a21      	cmp	r2, #33	; 0x21
 8005a32:	d010      	beq.n	8005a56 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a3c:	d001      	beq.n	8005a42 <UART_DMAError+0x28>
 8005a3e:	2d22      	cmp	r5, #34	; 0x22
 8005a40:	d010      	beq.n	8005a64 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a42:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005a46:	f043 0310 	orr.w	r3, r3, #16
 8005a4a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f7ff ffe2 	bl	8005a18 <HAL_UART_ErrorCallback>
}
 8005a54:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f7ff fefc 	bl	800585a <UART_EndTxTransfer>
 8005a62:	e7e7      	b.n	8005a34 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f7ff ff0e 	bl	800588c <UART_EndRxTransfer>
 8005a70:	e7e7      	b.n	8005a42 <UART_DMAError+0x28>

08005a72 <UART_DMAAbortOnError>:
{
 8005a72:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a74:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005a7c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8005a80:	f7ff ffca 	bl	8005a18 <HAL_UART_ErrorCallback>
}
 8005a84:	bd08      	pop	{r3, pc}

08005a86 <HAL_UARTEx_RxEventCallback>:
}
 8005a86:	4770      	bx	lr

08005a88 <HAL_UART_IRQHandler>:
{
 8005a88:	b570      	push	{r4, r5, r6, lr}
 8005a8a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a8c:	6801      	ldr	r1, [r0, #0]
 8005a8e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a90:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a92:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a94:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8005a98:	401a      	ands	r2, r3
 8005a9a:	d108      	bne.n	8005aae <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a9c:	f013 0f20 	tst.w	r3, #32
 8005aa0:	d005      	beq.n	8005aae <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005aa2:	f010 0f20 	tst.w	r0, #32
 8005aa6:	d134      	bne.n	8005b12 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005aa8:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005aac:	d131      	bne.n	8005b12 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8005aae:	b12a      	cbz	r2, 8005abc <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ab0:	4a95      	ldr	r2, [pc, #596]	; (8005d08 <HAL_UART_IRQHandler+0x280>)
 8005ab2:	402a      	ands	r2, r5
 8005ab4:	d133      	bne.n	8005b1e <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005ab6:	4e95      	ldr	r6, [pc, #596]	; (8005d0c <HAL_UART_IRQHandler+0x284>)
 8005ab8:	4230      	tst	r0, r6
 8005aba:	d130      	bne.n	8005b1e <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005abc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005abe:	2a01      	cmp	r2, #1
 8005ac0:	f000 80c3 	beq.w	8005c4a <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ac4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005ac8:	d003      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x4a>
 8005aca:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8005ace:	f040 815b 	bne.w	8005d88 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ad2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ad6:	d007      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005ad8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005adc:	f040 815b 	bne.w	8005d96 <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ae0:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8005ae4:	f040 8157 	bne.w	8005d96 <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ae8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005aec:	d003      	beq.n	8005af6 <HAL_UART_IRQHandler+0x6e>
 8005aee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005af2:	f040 8157 	bne.w	8005da4 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005af6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005afa:	d003      	beq.n	8005b04 <HAL_UART_IRQHandler+0x7c>
 8005afc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005b00:	f040 8154 	bne.w	8005dac <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b04:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005b08:	d002      	beq.n	8005b10 <HAL_UART_IRQHandler+0x88>
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	f2c0 8152 	blt.w	8005db4 <HAL_UART_IRQHandler+0x32c>
}
 8005b10:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005b12:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0fb      	beq.n	8005b10 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005b18:	4620      	mov	r0, r4
 8005b1a:	4798      	blx	r3
      return;
 8005b1c:	e7f8      	b.n	8005b10 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b1e:	f013 0f01 	tst.w	r3, #1
 8005b22:	d009      	beq.n	8005b38 <HAL_UART_IRQHandler+0xb0>
 8005b24:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005b28:	d006      	beq.n	8005b38 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b2a:	2601      	movs	r6, #1
 8005b2c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b2e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005b32:	4331      	orrs	r1, r6
 8005b34:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b38:	f013 0f02 	tst.w	r3, #2
 8005b3c:	d00b      	beq.n	8005b56 <HAL_UART_IRQHandler+0xce>
 8005b3e:	f015 0f01 	tst.w	r5, #1
 8005b42:	d008      	beq.n	8005b56 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b44:	6821      	ldr	r1, [r4, #0]
 8005b46:	2602      	movs	r6, #2
 8005b48:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b4a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005b4e:	f041 0104 	orr.w	r1, r1, #4
 8005b52:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b56:	f013 0f04 	tst.w	r3, #4
 8005b5a:	d00b      	beq.n	8005b74 <HAL_UART_IRQHandler+0xec>
 8005b5c:	f015 0f01 	tst.w	r5, #1
 8005b60:	d008      	beq.n	8005b74 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b62:	6821      	ldr	r1, [r4, #0]
 8005b64:	2604      	movs	r6, #4
 8005b66:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b68:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005b6c:	f041 0102 	orr.w	r1, r1, #2
 8005b70:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b74:	f013 0f08 	tst.w	r3, #8
 8005b78:	d00b      	beq.n	8005b92 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b7a:	f010 0f20 	tst.w	r0, #32
 8005b7e:	d100      	bne.n	8005b82 <HAL_UART_IRQHandler+0xfa>
 8005b80:	b13a      	cbz	r2, 8005b92 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b82:	6822      	ldr	r2, [r4, #0]
 8005b84:	2108      	movs	r1, #8
 8005b86:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b88:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b92:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005b96:	d00c      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x12a>
 8005b98:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005b9c:	d009      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b9e:	6822      	ldr	r2, [r4, #0]
 8005ba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ba4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ba6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005baa:	f042 0220 	orr.w	r2, r2, #32
 8005bae:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bb2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005bb6:	2a00      	cmp	r2, #0
 8005bb8:	d0aa      	beq.n	8005b10 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005bba:	f013 0f20 	tst.w	r3, #32
 8005bbe:	d009      	beq.n	8005bd4 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005bc0:	f010 0f20 	tst.w	r0, #32
 8005bc4:	d102      	bne.n	8005bcc <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bc6:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005bca:	d003      	beq.n	8005bd4 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8005bcc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005bce:	b10b      	cbz	r3, 8005bd4 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005bd4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005be0:	d102      	bne.n	8005be8 <HAL_UART_IRQHandler+0x160>
 8005be2:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005be6:	d029      	beq.n	8005c3c <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8005be8:	4620      	mov	r0, r4
 8005bea:	f7ff fe4f 	bl	800588c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005bf6:	d01d      	beq.n	8005c34 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	f102 0308 	add.w	r3, r2, #8
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	3208      	adds	r2, #8
 8005c08:	e842 3100 	strex	r1, r3, [r2]
 8005c0c:	2900      	cmp	r1, #0
 8005c0e:	d1f3      	bne.n	8005bf8 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005c10:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005c12:	b15b      	cbz	r3, 8005c2c <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c14:	4a3e      	ldr	r2, [pc, #248]	; (8005d10 <HAL_UART_IRQHandler+0x288>)
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c18:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005c1a:	f7fb fd8f 	bl	800173c <HAL_DMA_Abort_IT>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f43f af76 	beq.w	8005b10 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c24:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005c26:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005c28:	4798      	blx	r3
 8005c2a:	e771      	b.n	8005b10 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f7ff fef3 	bl	8005a18 <HAL_UART_ErrorCallback>
 8005c32:	e76d      	b.n	8005b10 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005c34:	4620      	mov	r0, r4
 8005c36:	f7ff feef 	bl	8005a18 <HAL_UART_ErrorCallback>
 8005c3a:	e769      	b.n	8005b10 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f7ff feeb 	bl	8005a18 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8005c48:	e762      	b.n	8005b10 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c4a:	f013 0f10 	tst.w	r3, #16
 8005c4e:	f43f af39 	beq.w	8005ac4 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c52:	f010 0f10 	tst.w	r0, #16
 8005c56:	f43f af35 	beq.w	8005ac4 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c5a:	2310      	movs	r3, #16
 8005c5c:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c66:	d055      	beq.n	8005d14 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c68:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005c6a:	6813      	ldr	r3, [r2, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f43f af4d 	beq.w	8005b10 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c76:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005c7a:	4299      	cmp	r1, r3
 8005c7c:	f67f af48 	bls.w	8005b10 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005c80:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c84:	6813      	ldr	r3, [r2, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f013 0f20 	tst.w	r3, #32
 8005c8c:	d131      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c8e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	e852 3f00 	ldrex	r3, [r2]
 8005c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	e842 3100 	strex	r1, r3, [r2]
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	d1f6      	bne.n	8005c8e <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca2:	f102 0308 	add.w	r3, r2, #8
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	3208      	adds	r2, #8
 8005cb0:	e842 3100 	strex	r1, r3, [r2]
 8005cb4:	2900      	cmp	r1, #0
 8005cb6:	d1f3      	bne.n	8005ca0 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	f102 0308 	add.w	r3, r2, #8
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	3208      	adds	r2, #8
 8005cc8:	e842 3100 	strex	r1, r3, [r2]
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	d1f3      	bne.n	8005cb8 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cda:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cdc:	e852 3f00 	ldrex	r3, [r2]
 8005ce0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	e842 3100 	strex	r1, r3, [r2]
 8005ce8:	2900      	cmp	r1, #0
 8005cea:	d1f6      	bne.n	8005cda <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cec:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005cee:	f7fb fcef 	bl	80016d0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cf2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005cf6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	1ac9      	subs	r1, r1, r3
 8005cfe:	b289      	uxth	r1, r1
 8005d00:	4620      	mov	r0, r4
 8005d02:	f7ff fec0 	bl	8005a86 <HAL_UARTEx_RxEventCallback>
      return;
 8005d06:	e703      	b.n	8005b10 <HAL_UART_IRQHandler+0x88>
 8005d08:	10000001 	.word	0x10000001
 8005d0c:	04000120 	.word	0x04000120
 8005d10:	08005a73 	.word	0x08005a73
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d14:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005d18:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	1ac9      	subs	r1, r1, r3
 8005d20:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005d22:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f43f aef1 	beq.w	8005b10 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 8005d2e:	2900      	cmp	r1, #0
 8005d30:	f43f aeee 	beq.w	8005b10 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d34:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	e852 3f00 	ldrex	r3, [r2]
 8005d3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	e842 3000 	strex	r0, r3, [r2]
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d1f6      	bne.n	8005d34 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d46:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	f102 0308 	add.w	r3, r2, #8
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d54:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	3208      	adds	r2, #8
 8005d5a:	e842 3000 	strex	r0, r3, [r2]
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d1f1      	bne.n	8005d46 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8005d62:	2320      	movs	r3, #32
 8005d64:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005d6c:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	e852 3f00 	ldrex	r3, [r2]
 8005d74:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	e842 3000 	strex	r0, r3, [r2]
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d1f6      	bne.n	8005d6e <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d80:	4620      	mov	r0, r4
 8005d82:	f7ff fe80 	bl	8005a86 <HAL_UARTEx_RxEventCallback>
      return;
 8005d86:	e6c3      	b.n	8005b10 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005d8c:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f000 fca4 	bl	80066dc <HAL_UARTEx_WakeupCallback>
    return;
 8005d94:	e6bc      	b.n	8005b10 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8005d96:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f43f aeb9 	beq.w	8005b10 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8005d9e:	4620      	mov	r0, r4
 8005da0:	4798      	blx	r3
    return;
 8005da2:	e6b5      	b.n	8005b10 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8005da4:	4620      	mov	r0, r4
 8005da6:	f7ff fe1f 	bl	80059e8 <UART_EndTransmit_IT>
    return;
 8005daa:	e6b1      	b.n	8005b10 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005dac:	4620      	mov	r0, r4
 8005dae:	f000 fc97 	bl	80066e0 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005db2:	e6ad      	b.n	8005b10 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005db4:	4620      	mov	r0, r4
 8005db6:	f000 fc92 	bl	80066de <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005dba:	e6a9      	b.n	8005b10 <HAL_UART_IRQHandler+0x88>

08005dbc <UART_SetConfig>:
{
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005dc0:	6842      	ldr	r2, [r0, #4]
 8005dc2:	4b96      	ldr	r3, [pc, #600]	; (800601c <UART_SetConfig+0x260>)
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	f200 8087 	bhi.w	8005ed8 <UART_SetConfig+0x11c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005dca:	68a3      	ldr	r3, [r4, #8]
 8005dcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dd0:	d004      	beq.n	8005ddc <UART_SetConfig+0x20>
 8005dd2:	b11b      	cbz	r3, 8005ddc <UART_SetConfig+0x20>
 8005dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd8:	f040 8084 	bne.w	8005ee4 <UART_SetConfig+0x128>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ddc:	6822      	ldr	r2, [r4, #0]
 8005dde:	4b90      	ldr	r3, [pc, #576]	; (8006020 <UART_SetConfig+0x264>)
 8005de0:	429a      	cmp	r2, r3
 8005de2:	f000 8085 	beq.w	8005ef0 <UART_SetConfig+0x134>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005de6:	68e3      	ldr	r3, [r4, #12]
 8005de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dec:	d007      	beq.n	8005dfe <UART_SetConfig+0x42>
 8005dee:	b133      	cbz	r3, 8005dfe <UART_SetConfig+0x42>
 8005df0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005df4:	d003      	beq.n	8005dfe <UART_SetConfig+0x42>
 8005df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfa:	f040 8085 	bne.w	8005f08 <UART_SetConfig+0x14c>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005dfe:	6a23      	ldr	r3, [r4, #32]
 8005e00:	b11b      	cbz	r3, 8005e0a <UART_SetConfig+0x4e>
 8005e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e06:	f040 8085 	bne.w	8005f14 <UART_SetConfig+0x158>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005e0a:	6923      	ldr	r3, [r4, #16]
 8005e0c:	b133      	cbz	r3, 8005e1c <UART_SetConfig+0x60>
 8005e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e12:	d003      	beq.n	8005e1c <UART_SetConfig+0x60>
 8005e14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e18:	f040 8082 	bne.w	8005f20 <UART_SetConfig+0x164>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005e1c:	6963      	ldr	r3, [r4, #20]
 8005e1e:	f033 020c 	bics.w	r2, r3, #12
 8005e22:	d100      	bne.n	8005e26 <UART_SetConfig+0x6a>
 8005e24:	b923      	cbnz	r3, 8005e30 <UART_SetConfig+0x74>
 8005e26:	f640 31e7 	movw	r1, #3047	; 0xbe7
 8005e2a:	487e      	ldr	r0, [pc, #504]	; (8006024 <UART_SetConfig+0x268>)
 8005e2c:	f7fa ff44 	bl	8000cb8 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005e30:	69a3      	ldr	r3, [r4, #24]
 8005e32:	b143      	cbz	r3, 8005e46 <UART_SetConfig+0x8a>
 8005e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e38:	d005      	beq.n	8005e46 <UART_SetConfig+0x8a>
 8005e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e3e:	d002      	beq.n	8005e46 <UART_SetConfig+0x8a>
 8005e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e44:	d172      	bne.n	8005f2c <UART_SetConfig+0x170>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005e46:	69e3      	ldr	r3, [r4, #28]
 8005e48:	b113      	cbz	r3, 8005e50 <UART_SetConfig+0x94>
 8005e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e4e:	d173      	bne.n	8005f38 <UART_SetConfig+0x17c>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8005e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e52:	2b0b      	cmp	r3, #11
 8005e54:	d876      	bhi.n	8005f44 <UART_SetConfig+0x188>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e56:	68a3      	ldr	r3, [r4, #8]
 8005e58:	6922      	ldr	r2, [r4, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	6962      	ldr	r2, [r4, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	69e2      	ldr	r2, [r4, #28]
 8005e62:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e64:	6821      	ldr	r1, [r4, #0]
 8005e66:	6808      	ldr	r0, [r1, #0]
 8005e68:	4a6f      	ldr	r2, [pc, #444]	; (8006028 <UART_SetConfig+0x26c>)
 8005e6a:	4002      	ands	r2, r0
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e70:	6822      	ldr	r2, [r4, #0]
 8005e72:	6853      	ldr	r3, [r2, #4]
 8005e74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e78:	68e1      	ldr	r1, [r4, #12]
 8005e7a:	430b      	orrs	r3, r1
 8005e7c:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e7e:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e80:	6822      	ldr	r2, [r4, #0]
 8005e82:	4b67      	ldr	r3, [pc, #412]	; (8006020 <UART_SetConfig+0x264>)
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d001      	beq.n	8005e8c <UART_SetConfig+0xd0>
    tmpreg |= huart->Init.OneBitSampling;
 8005e88:	6a23      	ldr	r3, [r4, #32]
 8005e8a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e8c:	6893      	ldr	r3, [r2, #8]
 8005e8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005e92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005e96:	430b      	orrs	r3, r1
 8005e98:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005e9e:	f023 030f 	bic.w	r3, r3, #15
 8005ea2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	4a60      	ldr	r2, [pc, #384]	; (800602c <UART_SetConfig+0x270>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d04f      	beq.n	8005f50 <UART_SetConfig+0x194>
 8005eb0:	4a5f      	ldr	r2, [pc, #380]	; (8006030 <UART_SetConfig+0x274>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d060      	beq.n	8005f78 <UART_SetConfig+0x1bc>
 8005eb6:	4a5f      	ldr	r2, [pc, #380]	; (8006034 <UART_SetConfig+0x278>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d076      	beq.n	8005faa <UART_SetConfig+0x1ee>
 8005ebc:	4a5e      	ldr	r2, [pc, #376]	; (8006038 <UART_SetConfig+0x27c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	f000 809c 	beq.w	8005ffc <UART_SetConfig+0x240>
 8005ec4:	4a5d      	ldr	r2, [pc, #372]	; (800603c <UART_SetConfig+0x280>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	f000 80be 	beq.w	8006048 <UART_SetConfig+0x28c>
 8005ecc:	4a54      	ldr	r2, [pc, #336]	; (8006020 <UART_SetConfig+0x264>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	f000 80cf 	beq.w	8006072 <UART_SetConfig+0x2b6>
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	e076      	b.n	8005fc6 <UART_SetConfig+0x20a>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005ed8:	f640 31da 	movw	r1, #3034	; 0xbda
 8005edc:	4851      	ldr	r0, [pc, #324]	; (8006024 <UART_SetConfig+0x268>)
 8005ede:	f7fa feeb 	bl	8000cb8 <assert_failed>
 8005ee2:	e772      	b.n	8005dca <UART_SetConfig+0xe>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005ee4:	f640 31db 	movw	r1, #3035	; 0xbdb
 8005ee8:	484e      	ldr	r0, [pc, #312]	; (8006024 <UART_SetConfig+0x268>)
 8005eea:	f7fa fee5 	bl	8000cb8 <assert_failed>
 8005eee:	e775      	b.n	8005ddc <UART_SetConfig+0x20>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8005ef0:	68e3      	ldr	r3, [r4, #12]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d089      	beq.n	8005e0a <UART_SetConfig+0x4e>
 8005ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efa:	d086      	beq.n	8005e0a <UART_SetConfig+0x4e>
 8005efc:	f640 31de 	movw	r1, #3038	; 0xbde
 8005f00:	4848      	ldr	r0, [pc, #288]	; (8006024 <UART_SetConfig+0x268>)
 8005f02:	f7fa fed9 	bl	8000cb8 <assert_failed>
 8005f06:	e780      	b.n	8005e0a <UART_SetConfig+0x4e>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005f08:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8005f0c:	4845      	ldr	r0, [pc, #276]	; (8006024 <UART_SetConfig+0x268>)
 8005f0e:	f7fa fed3 	bl	8000cb8 <assert_failed>
 8005f12:	e774      	b.n	8005dfe <UART_SetConfig+0x42>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005f14:	f640 31e3 	movw	r1, #3043	; 0xbe3
 8005f18:	4842      	ldr	r0, [pc, #264]	; (8006024 <UART_SetConfig+0x268>)
 8005f1a:	f7fa fecd 	bl	8000cb8 <assert_failed>
 8005f1e:	e774      	b.n	8005e0a <UART_SetConfig+0x4e>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005f20:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8005f24:	483f      	ldr	r0, [pc, #252]	; (8006024 <UART_SetConfig+0x268>)
 8005f26:	f7fa fec7 	bl	8000cb8 <assert_failed>
 8005f2a:	e777      	b.n	8005e1c <UART_SetConfig+0x60>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005f2c:	f640 31e8 	movw	r1, #3048	; 0xbe8
 8005f30:	483c      	ldr	r0, [pc, #240]	; (8006024 <UART_SetConfig+0x268>)
 8005f32:	f7fa fec1 	bl	8000cb8 <assert_failed>
 8005f36:	e786      	b.n	8005e46 <UART_SetConfig+0x8a>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005f38:	f640 31e9 	movw	r1, #3049	; 0xbe9
 8005f3c:	4839      	ldr	r0, [pc, #228]	; (8006024 <UART_SetConfig+0x268>)
 8005f3e:	f7fa febb 	bl	8000cb8 <assert_failed>
 8005f42:	e785      	b.n	8005e50 <UART_SetConfig+0x94>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8005f44:	f640 31ea 	movw	r1, #3050	; 0xbea
 8005f48:	4836      	ldr	r0, [pc, #216]	; (8006024 <UART_SetConfig+0x268>)
 8005f4a:	f7fa feb5 	bl	8000cb8 <assert_failed>
 8005f4e:	e782      	b.n	8005e56 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f50:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8005f54:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005f58:	f002 0203 	and.w	r2, r2, #3
 8005f5c:	2a03      	cmp	r2, #3
 8005f5e:	d809      	bhi.n	8005f74 <UART_SetConfig+0x1b8>
 8005f60:	e8df f002 	tbb	[pc, r2]
 8005f64:	069c0402 	.word	0x069c0402
 8005f68:	2201      	movs	r2, #1
 8005f6a:	e02c      	b.n	8005fc6 <UART_SetConfig+0x20a>
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	e02a      	b.n	8005fc6 <UART_SetConfig+0x20a>
 8005f70:	2208      	movs	r2, #8
 8005f72:	e028      	b.n	8005fc6 <UART_SetConfig+0x20a>
 8005f74:	2210      	movs	r2, #16
 8005f76:	e026      	b.n	8005fc6 <UART_SetConfig+0x20a>
 8005f78:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8005f7c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005f80:	f002 020c 	and.w	r2, r2, #12
 8005f84:	2a0c      	cmp	r2, #12
 8005f86:	d80e      	bhi.n	8005fa6 <UART_SetConfig+0x1ea>
 8005f88:	e8df f002 	tbb	[pc, r2]
 8005f8c:	0d0d0d07 	.word	0x0d0d0d07
 8005f90:	0d0d0d09 	.word	0x0d0d0d09
 8005f94:	0d0d0d8a 	.word	0x0d0d0d8a
 8005f98:	0b          	.byte	0x0b
 8005f99:	00          	.byte	0x00
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	e013      	b.n	8005fc6 <UART_SetConfig+0x20a>
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	e011      	b.n	8005fc6 <UART_SetConfig+0x20a>
 8005fa2:	2208      	movs	r2, #8
 8005fa4:	e00f      	b.n	8005fc6 <UART_SetConfig+0x20a>
 8005fa6:	2210      	movs	r2, #16
 8005fa8:	e00d      	b.n	8005fc6 <UART_SetConfig+0x20a>
 8005faa:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8005fae:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005fb2:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005fb6:	2a20      	cmp	r2, #32
 8005fb8:	d074      	beq.n	80060a4 <UART_SetConfig+0x2e8>
 8005fba:	d81b      	bhi.n	8005ff4 <UART_SetConfig+0x238>
 8005fbc:	2a00      	cmp	r2, #0
 8005fbe:	d073      	beq.n	80060a8 <UART_SetConfig+0x2ec>
 8005fc0:	2a10      	cmp	r2, #16
 8005fc2:	d173      	bne.n	80060ac <UART_SetConfig+0x2f0>
 8005fc4:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fc6:	4916      	ldr	r1, [pc, #88]	; (8006020 <UART_SetConfig+0x264>)
 8005fc8:	428b      	cmp	r3, r1
 8005fca:	f000 808b 	beq.w	80060e4 <UART_SetConfig+0x328>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fce:	69e0      	ldr	r0, [r4, #28]
 8005fd0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005fd4:	f000 80c7 	beq.w	8006166 <UART_SetConfig+0x3aa>
    switch (clocksource)
 8005fd8:	2a08      	cmp	r2, #8
 8005fda:	f200 8132 	bhi.w	8006242 <UART_SetConfig+0x486>
 8005fde:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005fe2:	00f5      	.short	0x00f5
 8005fe4:	00f30117 	.word	0x00f30117
 8005fe8:	011a0130 	.word	0x011a0130
 8005fec:	01300130 	.word	0x01300130
 8005ff0:	011d0130 	.word	0x011d0130
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ff4:	2a30      	cmp	r2, #48	; 0x30
 8005ff6:	d15b      	bne.n	80060b0 <UART_SetConfig+0x2f4>
 8005ff8:	2208      	movs	r2, #8
 8005ffa:	e7e4      	b.n	8005fc6 <UART_SetConfig+0x20a>
 8005ffc:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8006000:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006004:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8006008:	2a80      	cmp	r2, #128	; 0x80
 800600a:	d053      	beq.n	80060b4 <UART_SetConfig+0x2f8>
 800600c:	d818      	bhi.n	8006040 <UART_SetConfig+0x284>
 800600e:	2a00      	cmp	r2, #0
 8006010:	d052      	beq.n	80060b8 <UART_SetConfig+0x2fc>
 8006012:	2a40      	cmp	r2, #64	; 0x40
 8006014:	d152      	bne.n	80060bc <UART_SetConfig+0x300>
 8006016:	2204      	movs	r2, #4
 8006018:	e7d5      	b.n	8005fc6 <UART_SetConfig+0x20a>
 800601a:	bf00      	nop
 800601c:	011e1a30 	.word	0x011e1a30
 8006020:	40008000 	.word	0x40008000
 8006024:	080130b0 	.word	0x080130b0
 8006028:	cfff69f3 	.word	0xcfff69f3
 800602c:	40013800 	.word	0x40013800
 8006030:	40004400 	.word	0x40004400
 8006034:	40004800 	.word	0x40004800
 8006038:	40004c00 	.word	0x40004c00
 800603c:	40005000 	.word	0x40005000
 8006040:	2ac0      	cmp	r2, #192	; 0xc0
 8006042:	d13d      	bne.n	80060c0 <UART_SetConfig+0x304>
 8006044:	2208      	movs	r2, #8
 8006046:	e7be      	b.n	8005fc6 <UART_SetConfig+0x20a>
 8006048:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800604c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006050:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006054:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006058:	d034      	beq.n	80060c4 <UART_SetConfig+0x308>
 800605a:	d805      	bhi.n	8006068 <UART_SetConfig+0x2ac>
 800605c:	b3a2      	cbz	r2, 80060c8 <UART_SetConfig+0x30c>
 800605e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006062:	d133      	bne.n	80060cc <UART_SetConfig+0x310>
 8006064:	2204      	movs	r2, #4
 8006066:	e7ae      	b.n	8005fc6 <UART_SetConfig+0x20a>
 8006068:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800606c:	d130      	bne.n	80060d0 <UART_SetConfig+0x314>
 800606e:	2208      	movs	r2, #8
 8006070:	e7a9      	b.n	8005fc6 <UART_SetConfig+0x20a>
 8006072:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8006076:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800607a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800607e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006082:	d027      	beq.n	80060d4 <UART_SetConfig+0x318>
 8006084:	d805      	bhi.n	8006092 <UART_SetConfig+0x2d6>
 8006086:	b33a      	cbz	r2, 80060d8 <UART_SetConfig+0x31c>
 8006088:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800608c:	d126      	bne.n	80060dc <UART_SetConfig+0x320>
 800608e:	2204      	movs	r2, #4
 8006090:	e799      	b.n	8005fc6 <UART_SetConfig+0x20a>
 8006092:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8006096:	d123      	bne.n	80060e0 <UART_SetConfig+0x324>
 8006098:	2208      	movs	r2, #8
 800609a:	e794      	b.n	8005fc6 <UART_SetConfig+0x20a>
 800609c:	2202      	movs	r2, #2
 800609e:	e792      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060a0:	2202      	movs	r2, #2
 80060a2:	e790      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060a4:	2202      	movs	r2, #2
 80060a6:	e78e      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060a8:	2200      	movs	r2, #0
 80060aa:	e78c      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060ac:	2210      	movs	r2, #16
 80060ae:	e78a      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060b0:	2210      	movs	r2, #16
 80060b2:	e788      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060b4:	2202      	movs	r2, #2
 80060b6:	e786      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060b8:	2200      	movs	r2, #0
 80060ba:	e784      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060bc:	2210      	movs	r2, #16
 80060be:	e782      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060c0:	2210      	movs	r2, #16
 80060c2:	e780      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060c4:	2202      	movs	r2, #2
 80060c6:	e77e      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060c8:	2200      	movs	r2, #0
 80060ca:	e77c      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060cc:	2210      	movs	r2, #16
 80060ce:	e77a      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060d0:	2210      	movs	r2, #16
 80060d2:	e778      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060d4:	2202      	movs	r2, #2
 80060d6:	e776      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060d8:	2200      	movs	r2, #0
 80060da:	e774      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060dc:	2210      	movs	r2, #16
 80060de:	e772      	b.n	8005fc6 <UART_SetConfig+0x20a>
 80060e0:	2210      	movs	r2, #16
 80060e2:	e770      	b.n	8005fc6 <UART_SetConfig+0x20a>
    switch (clocksource)
 80060e4:	2a08      	cmp	r2, #8
 80060e6:	f200 809c 	bhi.w	8006222 <UART_SetConfig+0x466>
 80060ea:	e8df f002 	tbb	[pc, r2]
 80060ee:	9a08      	.short	0x9a08
 80060f0:	9a379a3a 	.word	0x9a379a3a
 80060f4:	9a9a      	.short	0x9a9a
 80060f6:	05          	.byte	0x05
 80060f7:	00          	.byte	0x00
 80060f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80060fc:	e004      	b.n	8006108 <UART_SetConfig+0x34c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80060fe:	f7fe f83b 	bl	8004178 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006102:	2800      	cmp	r0, #0
 8006104:	f000 808f 	beq.w	8006226 <UART_SetConfig+0x46a>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006108:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800610a:	4b51      	ldr	r3, [pc, #324]	; (8006250 <UART_SetConfig+0x494>)
 800610c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006110:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006114:	6865      	ldr	r5, [r4, #4]
 8006116:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800611a:	4299      	cmp	r1, r3
 800611c:	f200 8085 	bhi.w	800622a <UART_SetConfig+0x46e>
 8006120:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006124:	f200 8083 	bhi.w	800622e <UART_SetConfig+0x472>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006128:	2600      	movs	r6, #0
 800612a:	4633      	mov	r3, r6
 800612c:	4631      	mov	r1, r6
 800612e:	f7fa f917 	bl	8000360 <__aeabi_uldivmod>
 8006132:	0209      	lsls	r1, r1, #8
 8006134:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006138:	0200      	lsls	r0, r0, #8
 800613a:	086b      	lsrs	r3, r5, #1
 800613c:	18c0      	adds	r0, r0, r3
 800613e:	462a      	mov	r2, r5
 8006140:	4633      	mov	r3, r6
 8006142:	f141 0100 	adc.w	r1, r1, #0
 8006146:	f7fa f90b 	bl	8000360 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800614a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800614e:	4b41      	ldr	r3, [pc, #260]	; (8006254 <UART_SetConfig+0x498>)
 8006150:	429a      	cmp	r2, r3
 8006152:	d86e      	bhi.n	8006232 <UART_SetConfig+0x476>
          huart->Instance->BRR = usartdiv;
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	60d8      	str	r0, [r3, #12]
 8006158:	4630      	mov	r0, r6
 800615a:	e050      	b.n	80061fe <UART_SetConfig+0x442>
        pclk = HAL_RCC_GetSysClockFreq();
 800615c:	f7fd fe64 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
        break;
 8006160:	e7cf      	b.n	8006102 <UART_SetConfig+0x346>
        pclk = (uint32_t) HSI_VALUE;
 8006162:	483d      	ldr	r0, [pc, #244]	; (8006258 <UART_SetConfig+0x49c>)
 8006164:	e7d0      	b.n	8006108 <UART_SetConfig+0x34c>
    switch (clocksource)
 8006166:	2a08      	cmp	r2, #8
 8006168:	d865      	bhi.n	8006236 <UART_SetConfig+0x47a>
 800616a:	e8df f002 	tbb	[pc, r2]
 800616e:	2707      	.short	0x2707
 8006170:	642a6405 	.word	0x642a6405
 8006174:	6464      	.short	0x6464
 8006176:	0b          	.byte	0x0b
 8006177:	00          	.byte	0x00
 8006178:	4837      	ldr	r0, [pc, #220]	; (8006258 <UART_SetConfig+0x49c>)
 800617a:	e003      	b.n	8006184 <UART_SetConfig+0x3c8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800617c:	f7fd fffc 	bl	8004178 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006180:	2800      	cmp	r0, #0
 8006182:	d05a      	beq.n	800623a <UART_SetConfig+0x47e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006184:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006186:	4b32      	ldr	r3, [pc, #200]	; (8006250 <UART_SetConfig+0x494>)
 8006188:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800618c:	fbb0 f0f3 	udiv	r0, r0, r3
 8006190:	6862      	ldr	r2, [r4, #4]
 8006192:	0853      	lsrs	r3, r2, #1
 8006194:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006198:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800619c:	f1a3 0110 	sub.w	r1, r3, #16
 80061a0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80061a4:	4291      	cmp	r1, r2
 80061a6:	d84a      	bhi.n	800623e <UART_SetConfig+0x482>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061ae:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80061b2:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80061b4:	6822      	ldr	r2, [r4, #0]
 80061b6:	60d3      	str	r3, [r2, #12]
 80061b8:	2000      	movs	r0, #0
 80061ba:	e020      	b.n	80061fe <UART_SetConfig+0x442>
        pclk = HAL_RCC_GetPCLK2Freq();
 80061bc:	f7fd ffee 	bl	800419c <HAL_RCC_GetPCLK2Freq>
        break;
 80061c0:	e7de      	b.n	8006180 <UART_SetConfig+0x3c4>
        pclk = HAL_RCC_GetSysClockFreq();
 80061c2:	f7fd fe31 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
        break;
 80061c6:	e7db      	b.n	8006180 <UART_SetConfig+0x3c4>
    switch (clocksource)
 80061c8:	4823      	ldr	r0, [pc, #140]	; (8006258 <UART_SetConfig+0x49c>)
 80061ca:	e003      	b.n	80061d4 <UART_SetConfig+0x418>
        pclk = HAL_RCC_GetPCLK1Freq();
 80061cc:	f7fd ffd4 	bl	8004178 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d038      	beq.n	8006246 <UART_SetConfig+0x48a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80061d6:	4b1e      	ldr	r3, [pc, #120]	; (8006250 <UART_SetConfig+0x494>)
 80061d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80061dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80061e0:	6863      	ldr	r3, [r4, #4]
 80061e2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80061e6:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061ea:	f1a0 0210 	sub.w	r2, r0, #16
 80061ee:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d829      	bhi.n	800624a <UART_SetConfig+0x48e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	b280      	uxth	r0, r0
 80061fa:	60d8      	str	r0, [r3, #12]
 80061fc:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80061fe:	2301      	movs	r3, #1
 8006200:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006204:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006208:	2300      	movs	r3, #0
 800620a:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800620c:	6763      	str	r3, [r4, #116]	; 0x74
}
 800620e:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006210:	f7fd ffc4 	bl	800419c <HAL_RCC_GetPCLK2Freq>
        break;
 8006214:	e7dc      	b.n	80061d0 <UART_SetConfig+0x414>
        pclk = HAL_RCC_GetSysClockFreq();
 8006216:	f7fd fe07 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
        break;
 800621a:	e7d9      	b.n	80061d0 <UART_SetConfig+0x414>
        pclk = (uint32_t) LSE_VALUE;
 800621c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006220:	e7d8      	b.n	80061d4 <UART_SetConfig+0x418>
    switch (clocksource)
 8006222:	2001      	movs	r0, #1
 8006224:	e7eb      	b.n	80061fe <UART_SetConfig+0x442>
 8006226:	2000      	movs	r0, #0
 8006228:	e7e9      	b.n	80061fe <UART_SetConfig+0x442>
        ret = HAL_ERROR;
 800622a:	2001      	movs	r0, #1
 800622c:	e7e7      	b.n	80061fe <UART_SetConfig+0x442>
 800622e:	2001      	movs	r0, #1
 8006230:	e7e5      	b.n	80061fe <UART_SetConfig+0x442>
          ret = HAL_ERROR;
 8006232:	2001      	movs	r0, #1
 8006234:	e7e3      	b.n	80061fe <UART_SetConfig+0x442>
    switch (clocksource)
 8006236:	2001      	movs	r0, #1
 8006238:	e7e1      	b.n	80061fe <UART_SetConfig+0x442>
 800623a:	2000      	movs	r0, #0
 800623c:	e7df      	b.n	80061fe <UART_SetConfig+0x442>
        ret = HAL_ERROR;
 800623e:	2001      	movs	r0, #1
 8006240:	e7dd      	b.n	80061fe <UART_SetConfig+0x442>
    switch (clocksource)
 8006242:	2001      	movs	r0, #1
 8006244:	e7db      	b.n	80061fe <UART_SetConfig+0x442>
 8006246:	2000      	movs	r0, #0
 8006248:	e7d9      	b.n	80061fe <UART_SetConfig+0x442>
        ret = HAL_ERROR;
 800624a:	2001      	movs	r0, #1
 800624c:	e7d7      	b.n	80061fe <UART_SetConfig+0x442>
 800624e:	bf00      	nop
 8006250:	080130ec 	.word	0x080130ec
 8006254:	000ffcff 	.word	0x000ffcff
 8006258:	00f42400 	.word	0x00f42400

0800625c <UART_AdvFeatureConfig>:
{
 800625c:	b510      	push	{r4, lr}
 800625e:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006260:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006262:	2bff      	cmp	r3, #255	; 0xff
 8006264:	f200 80a1 	bhi.w	80063aa <UART_AdvFeatureConfig+0x14e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006268:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800626a:	f013 0f01 	tst.w	r3, #1
 800626e:	d00c      	beq.n	800628a <UART_AdvFeatureConfig+0x2e>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006270:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006272:	b11b      	cbz	r3, 800627c <UART_AdvFeatureConfig+0x20>
 8006274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006278:	f040 809d 	bne.w	80063b6 <UART_AdvFeatureConfig+0x15a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800627c:	6822      	ldr	r2, [r4, #0]
 800627e:	6853      	ldr	r3, [r2, #4]
 8006280:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006284:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006286:	430b      	orrs	r3, r1
 8006288:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800628a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800628c:	f013 0f02 	tst.w	r3, #2
 8006290:	d00c      	beq.n	80062ac <UART_AdvFeatureConfig+0x50>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006292:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006294:	b11b      	cbz	r3, 800629e <UART_AdvFeatureConfig+0x42>
 8006296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800629a:	f040 8092 	bne.w	80063c2 <UART_AdvFeatureConfig+0x166>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800629e:	6822      	ldr	r2, [r4, #0]
 80062a0:	6853      	ldr	r3, [r2, #4]
 80062a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062ae:	f013 0f04 	tst.w	r3, #4
 80062b2:	d00c      	beq.n	80062ce <UART_AdvFeatureConfig+0x72>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80062b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062b6:	b11b      	cbz	r3, 80062c0 <UART_AdvFeatureConfig+0x64>
 80062b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062bc:	f040 8087 	bne.w	80063ce <UART_AdvFeatureConfig+0x172>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062c0:	6822      	ldr	r2, [r4, #0]
 80062c2:	6853      	ldr	r3, [r2, #4]
 80062c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ca:	430b      	orrs	r3, r1
 80062cc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062d0:	f013 0f08 	tst.w	r3, #8
 80062d4:	d00b      	beq.n	80062ee <UART_AdvFeatureConfig+0x92>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80062d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062d8:	b113      	cbz	r3, 80062e0 <UART_AdvFeatureConfig+0x84>
 80062da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062de:	d17c      	bne.n	80063da <UART_AdvFeatureConfig+0x17e>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062e0:	6822      	ldr	r2, [r4, #0]
 80062e2:	6853      	ldr	r3, [r2, #4]
 80062e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80062ea:	430b      	orrs	r3, r1
 80062ec:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062f0:	f013 0f10 	tst.w	r3, #16
 80062f4:	d00b      	beq.n	800630e <UART_AdvFeatureConfig+0xb2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80062f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80062f8:	b113      	cbz	r3, 8006300 <UART_AdvFeatureConfig+0xa4>
 80062fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fe:	d172      	bne.n	80063e6 <UART_AdvFeatureConfig+0x18a>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006300:	6822      	ldr	r2, [r4, #0]
 8006302:	6893      	ldr	r3, [r2, #8]
 8006304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006308:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800630a:	430b      	orrs	r3, r1
 800630c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800630e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006310:	f013 0f20 	tst.w	r3, #32
 8006314:	d00b      	beq.n	800632e <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8006316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006318:	b113      	cbz	r3, 8006320 <UART_AdvFeatureConfig+0xc4>
 800631a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631e:	d168      	bne.n	80063f2 <UART_AdvFeatureConfig+0x196>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006320:	6822      	ldr	r2, [r4, #0]
 8006322:	6893      	ldr	r3, [r2, #8]
 8006324:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006328:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800632a:	430b      	orrs	r3, r1
 800632c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800632e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006330:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006334:	d028      	beq.n	8006388 <UART_AdvFeatureConfig+0x12c>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	4a43      	ldr	r2, [pc, #268]	; (8006448 <UART_AdvFeatureConfig+0x1ec>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d014      	beq.n	8006368 <UART_AdvFeatureConfig+0x10c>
 800633e:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8006342:	4293      	cmp	r3, r2
 8006344:	d010      	beq.n	8006368 <UART_AdvFeatureConfig+0x10c>
 8006346:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800634a:	4293      	cmp	r3, r2
 800634c:	d00c      	beq.n	8006368 <UART_AdvFeatureConfig+0x10c>
 800634e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006352:	4293      	cmp	r3, r2
 8006354:	d008      	beq.n	8006368 <UART_AdvFeatureConfig+0x10c>
 8006356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800635a:	4293      	cmp	r3, r2
 800635c:	d004      	beq.n	8006368 <UART_AdvFeatureConfig+0x10c>
 800635e:	f640 41da 	movw	r1, #3290	; 0xcda
 8006362:	483a      	ldr	r0, [pc, #232]	; (800644c <UART_AdvFeatureConfig+0x1f0>)
 8006364:	f7fa fca8 	bl	8000cb8 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006368:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800636a:	b113      	cbz	r3, 8006372 <UART_AdvFeatureConfig+0x116>
 800636c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006370:	d145      	bne.n	80063fe <UART_AdvFeatureConfig+0x1a2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006372:	6822      	ldr	r2, [r4, #0]
 8006374:	6853      	ldr	r3, [r2, #4]
 8006376:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800637a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800637c:	430b      	orrs	r3, r1
 800637e:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006380:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006386:	d040      	beq.n	800640a <UART_AdvFeatureConfig+0x1ae>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006388:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800638a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800638e:	d00b      	beq.n	80063a8 <UART_AdvFeatureConfig+0x14c>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006390:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006392:	b113      	cbz	r3, 800639a <UART_AdvFeatureConfig+0x13e>
 8006394:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006398:	d150      	bne.n	800643c <UART_AdvFeatureConfig+0x1e0>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800639a:	6822      	ldr	r2, [r4, #0]
 800639c:	6853      	ldr	r3, [r2, #4]
 800639e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80063a2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80063a4:	430b      	orrs	r3, r1
 80063a6:	6053      	str	r3, [r2, #4]
}
 80063a8:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80063aa:	f640 41ab 	movw	r1, #3243	; 0xcab
 80063ae:	4827      	ldr	r0, [pc, #156]	; (800644c <UART_AdvFeatureConfig+0x1f0>)
 80063b0:	f7fa fc82 	bl	8000cb8 <assert_failed>
 80063b4:	e758      	b.n	8006268 <UART_AdvFeatureConfig+0xc>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80063b6:	f44f 614b 	mov.w	r1, #3248	; 0xcb0
 80063ba:	4824      	ldr	r0, [pc, #144]	; (800644c <UART_AdvFeatureConfig+0x1f0>)
 80063bc:	f7fa fc7c 	bl	8000cb8 <assert_failed>
 80063c0:	e75c      	b.n	800627c <UART_AdvFeatureConfig+0x20>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80063c2:	f640 41b7 	movw	r1, #3255	; 0xcb7
 80063c6:	4821      	ldr	r0, [pc, #132]	; (800644c <UART_AdvFeatureConfig+0x1f0>)
 80063c8:	f7fa fc76 	bl	8000cb8 <assert_failed>
 80063cc:	e767      	b.n	800629e <UART_AdvFeatureConfig+0x42>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80063ce:	f640 41be 	movw	r1, #3262	; 0xcbe
 80063d2:	481e      	ldr	r0, [pc, #120]	; (800644c <UART_AdvFeatureConfig+0x1f0>)
 80063d4:	f7fa fc70 	bl	8000cb8 <assert_failed>
 80063d8:	e772      	b.n	80062c0 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80063da:	f640 41c5 	movw	r1, #3269	; 0xcc5
 80063de:	481b      	ldr	r0, [pc, #108]	; (800644c <UART_AdvFeatureConfig+0x1f0>)
 80063e0:	f7fa fc6a 	bl	8000cb8 <assert_failed>
 80063e4:	e77c      	b.n	80062e0 <UART_AdvFeatureConfig+0x84>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80063e6:	f640 41cc 	movw	r1, #3276	; 0xccc
 80063ea:	4818      	ldr	r0, [pc, #96]	; (800644c <UART_AdvFeatureConfig+0x1f0>)
 80063ec:	f7fa fc64 	bl	8000cb8 <assert_failed>
 80063f0:	e786      	b.n	8006300 <UART_AdvFeatureConfig+0xa4>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80063f2:	f640 41d3 	movw	r1, #3283	; 0xcd3
 80063f6:	4815      	ldr	r0, [pc, #84]	; (800644c <UART_AdvFeatureConfig+0x1f0>)
 80063f8:	f7fa fc5e 	bl	8000cb8 <assert_failed>
 80063fc:	e790      	b.n	8006320 <UART_AdvFeatureConfig+0xc4>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80063fe:	f640 41db 	movw	r1, #3291	; 0xcdb
 8006402:	4812      	ldr	r0, [pc, #72]	; (800644c <UART_AdvFeatureConfig+0x1f0>)
 8006404:	f7fa fc58 	bl	8000cb8 <assert_failed>
 8006408:	e7b3      	b.n	8006372 <UART_AdvFeatureConfig+0x116>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800640a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800640c:	b143      	cbz	r3, 8006420 <UART_AdvFeatureConfig+0x1c4>
 800640e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006412:	d005      	beq.n	8006420 <UART_AdvFeatureConfig+0x1c4>
 8006414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006418:	d002      	beq.n	8006420 <UART_AdvFeatureConfig+0x1c4>
 800641a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800641e:	d107      	bne.n	8006430 <UART_AdvFeatureConfig+0x1d4>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006420:	6822      	ldr	r2, [r4, #0]
 8006422:	6853      	ldr	r3, [r2, #4]
 8006424:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006428:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800642a:	430b      	orrs	r3, r1
 800642c:	6053      	str	r3, [r2, #4]
 800642e:	e7ab      	b.n	8006388 <UART_AdvFeatureConfig+0x12c>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006430:	f44f 614e 	mov.w	r1, #3296	; 0xce0
 8006434:	4805      	ldr	r0, [pc, #20]	; (800644c <UART_AdvFeatureConfig+0x1f0>)
 8006436:	f7fa fc3f 	bl	8000cb8 <assert_failed>
 800643a:	e7f1      	b.n	8006420 <UART_AdvFeatureConfig+0x1c4>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800643c:	f640 41e8 	movw	r1, #3304	; 0xce8
 8006440:	4802      	ldr	r0, [pc, #8]	; (800644c <UART_AdvFeatureConfig+0x1f0>)
 8006442:	f7fa fc39 	bl	8000cb8 <assert_failed>
 8006446:	e7a8      	b.n	800639a <UART_AdvFeatureConfig+0x13e>
 8006448:	40013800 	.word	0x40013800
 800644c:	080130b0 	.word	0x080130b0

08006450 <UART_WaitOnFlagUntilTimeout>:
{
 8006450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006454:	4605      	mov	r5, r0
 8006456:	460f      	mov	r7, r1
 8006458:	4616      	mov	r6, r2
 800645a:	4699      	mov	r9, r3
 800645c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006460:	682b      	ldr	r3, [r5, #0]
 8006462:	69dc      	ldr	r4, [r3, #28]
 8006464:	ea37 0404 	bics.w	r4, r7, r4
 8006468:	bf0c      	ite	eq
 800646a:	2401      	moveq	r4, #1
 800646c:	2400      	movne	r4, #0
 800646e:	42b4      	cmp	r4, r6
 8006470:	d157      	bne.n	8006522 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8006472:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8006476:	d0f3      	beq.n	8006460 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006478:	f7fa feee 	bl	8001258 <HAL_GetTick>
 800647c:	eba0 0009 	sub.w	r0, r0, r9
 8006480:	4540      	cmp	r0, r8
 8006482:	d82f      	bhi.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x94>
 8006484:	f1b8 0f00 	cmp.w	r8, #0
 8006488:	d02c      	beq.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800648a:	682b      	ldr	r3, [r5, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	f012 0f04 	tst.w	r2, #4
 8006492:	d0e5      	beq.n	8006460 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006494:	69da      	ldr	r2, [r3, #28]
 8006496:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800649a:	d0e1      	beq.n	8006460 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800649c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064a0:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80064a2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	e852 3f00 	ldrex	r3, [r2]
 80064a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ac:	e842 3100 	strex	r1, r3, [r2]
 80064b0:	2900      	cmp	r1, #0
 80064b2:	d1f6      	bne.n	80064a2 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	f102 0308 	add.w	r3, r2, #8
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	3208      	adds	r2, #8
 80064c4:	e842 3100 	strex	r1, r3, [r2]
 80064c8:	2900      	cmp	r1, #0
 80064ca:	d1f3      	bne.n	80064b4 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 80064cc:	2320      	movs	r3, #32
 80064ce:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80064d2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064d6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 80064da:	2300      	movs	r3, #0
 80064dc:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 80064e0:	2003      	movs	r0, #3
 80064e2:	e01f      	b.n	8006524 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80064e4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	e852 3f00 	ldrex	r3, [r2]
 80064ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	e842 3100 	strex	r1, r3, [r2]
 80064f2:	2900      	cmp	r1, #0
 80064f4:	d1f6      	bne.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	f102 0308 	add.w	r3, r2, #8
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	3208      	adds	r2, #8
 8006506:	e842 3100 	strex	r1, r3, [r2]
 800650a:	2900      	cmp	r1, #0
 800650c:	d1f3      	bne.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800650e:	2320      	movs	r3, #32
 8006510:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006514:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8006518:	2300      	movs	r3, #0
 800651a:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 800651e:	2003      	movs	r0, #3
 8006520:	e000      	b.n	8006524 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8006522:	2000      	movs	r0, #0
}
 8006524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006528 <UART_CheckIdleState>:
{
 8006528:	b530      	push	{r4, r5, lr}
 800652a:	b083      	sub	sp, #12
 800652c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652e:	2300      	movs	r3, #0
 8006530:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006534:	f7fa fe90 	bl	8001258 <HAL_GetTick>
 8006538:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800653a:	6822      	ldr	r2, [r4, #0]
 800653c:	6812      	ldr	r2, [r2, #0]
 800653e:	f012 0f08 	tst.w	r2, #8
 8006542:	d10f      	bne.n	8006564 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f013 0f04 	tst.w	r3, #4
 800654c:	d118      	bne.n	8006580 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800654e:	2320      	movs	r3, #32
 8006550:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006554:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006558:	2000      	movs	r0, #0
 800655a:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800655c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006560:	b003      	add	sp, #12
 8006562:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006564:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	4603      	mov	r3, r0
 800656c:	2200      	movs	r2, #0
 800656e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006572:	4620      	mov	r0, r4
 8006574:	f7ff ff6c 	bl	8006450 <UART_WaitOnFlagUntilTimeout>
 8006578:	2800      	cmp	r0, #0
 800657a:	d0e3      	beq.n	8006544 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800657c:	2003      	movs	r0, #3
 800657e:	e7ef      	b.n	8006560 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	462b      	mov	r3, r5
 8006588:	2200      	movs	r2, #0
 800658a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800658e:	4620      	mov	r0, r4
 8006590:	f7ff ff5e 	bl	8006450 <UART_WaitOnFlagUntilTimeout>
 8006594:	2800      	cmp	r0, #0
 8006596:	d0da      	beq.n	800654e <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006598:	2003      	movs	r0, #3
 800659a:	e7e1      	b.n	8006560 <UART_CheckIdleState+0x38>

0800659c <HAL_UART_Init>:
  if (huart == NULL)
 800659c:	2800      	cmp	r0, #0
 800659e:	d070      	beq.n	8006682 <HAL_UART_Init+0xe6>
{
 80065a0:	b510      	push	{r4, lr}
 80065a2:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80065a4:	6983      	ldr	r3, [r0, #24]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d043      	beq.n	8006632 <HAL_UART_Init+0x96>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80065aa:	6803      	ldr	r3, [r0, #0]
 80065ac:	4a36      	ldr	r2, [pc, #216]	; (8006688 <HAL_UART_Init+0xec>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d018      	beq.n	80065e4 <HAL_UART_Init+0x48>
 80065b2:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d014      	beq.n	80065e4 <HAL_UART_Init+0x48>
 80065ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065be:	4293      	cmp	r3, r2
 80065c0:	d010      	beq.n	80065e4 <HAL_UART_Init+0x48>
 80065c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00c      	beq.n	80065e4 <HAL_UART_Init+0x48>
 80065ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d008      	beq.n	80065e4 <HAL_UART_Init+0x48>
 80065d2:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d004      	beq.n	80065e4 <HAL_UART_Init+0x48>
 80065da:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80065de:	482b      	ldr	r0, [pc, #172]	; (800668c <HAL_UART_Init+0xf0>)
 80065e0:	f7fa fb6a 	bl	8000cb8 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 80065e4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d040      	beq.n	800666e <HAL_UART_Init+0xd2>
  huart->gState = HAL_UART_STATE_BUSY;
 80065ec:	2324      	movs	r3, #36	; 0x24
 80065ee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80065f2:	6822      	ldr	r2, [r4, #0]
 80065f4:	6813      	ldr	r3, [r2, #0]
 80065f6:	f023 0301 	bic.w	r3, r3, #1
 80065fa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065fc:	4620      	mov	r0, r4
 80065fe:	f7ff fbdd 	bl	8005dbc <UART_SetConfig>
 8006602:	2801      	cmp	r0, #1
 8006604:	d014      	beq.n	8006630 <HAL_UART_Init+0x94>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006608:	2b00      	cmp	r3, #0
 800660a:	d136      	bne.n	800667a <HAL_UART_Init+0xde>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800660c:	6822      	ldr	r2, [r4, #0]
 800660e:	6853      	ldr	r3, [r2, #4]
 8006610:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006614:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006616:	6822      	ldr	r2, [r4, #0]
 8006618:	6893      	ldr	r3, [r2, #8]
 800661a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800661e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006620:	6822      	ldr	r2, [r4, #0]
 8006622:	6813      	ldr	r3, [r2, #0]
 8006624:	f043 0301 	orr.w	r3, r3, #1
 8006628:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800662a:	4620      	mov	r0, r4
 800662c:	f7ff ff7c 	bl	8006528 <UART_CheckIdleState>
}
 8006630:	bd10      	pop	{r4, pc}
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006632:	6803      	ldr	r3, [r0, #0]
 8006634:	4a14      	ldr	r2, [pc, #80]	; (8006688 <HAL_UART_Init+0xec>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d0d4      	beq.n	80065e4 <HAL_UART_Init+0x48>
 800663a:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800663e:	4293      	cmp	r3, r2
 8006640:	d0d0      	beq.n	80065e4 <HAL_UART_Init+0x48>
 8006642:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006646:	4293      	cmp	r3, r2
 8006648:	d0cc      	beq.n	80065e4 <HAL_UART_Init+0x48>
 800664a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800664e:	4293      	cmp	r3, r2
 8006650:	d0c8      	beq.n	80065e4 <HAL_UART_Init+0x48>
 8006652:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006656:	4293      	cmp	r3, r2
 8006658:	d0c4      	beq.n	80065e4 <HAL_UART_Init+0x48>
 800665a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800665e:	4293      	cmp	r3, r2
 8006660:	d0c0      	beq.n	80065e4 <HAL_UART_Init+0x48>
 8006662:	f240 1143 	movw	r1, #323	; 0x143
 8006666:	4809      	ldr	r0, [pc, #36]	; (800668c <HAL_UART_Init+0xf0>)
 8006668:	f7fa fb26 	bl	8000cb8 <assert_failed>
 800666c:	e7ba      	b.n	80065e4 <HAL_UART_Init+0x48>
    huart->Lock = HAL_UNLOCKED;
 800666e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006672:	4620      	mov	r0, r4
 8006674:	f7fa fd2a 	bl	80010cc <HAL_UART_MspInit>
 8006678:	e7b8      	b.n	80065ec <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 800667a:	4620      	mov	r0, r4
 800667c:	f7ff fdee 	bl	800625c <UART_AdvFeatureConfig>
 8006680:	e7c4      	b.n	800660c <HAL_UART_Init+0x70>
    return HAL_ERROR;
 8006682:	2001      	movs	r0, #1
}
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	40013800 	.word	0x40013800
 800668c:	080130b0 	.word	0x080130b0

08006690 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006690:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006692:	b92b      	cbnz	r3, 80066a0 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006694:	2301      	movs	r3, #1
 8006696:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800669a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800669e:	4770      	bx	lr
{
 80066a0:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066a2:	6803      	ldr	r3, [r0, #0]
 80066a4:	689a      	ldr	r2, [r3, #8]
 80066a6:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066aa:	6899      	ldr	r1, [r3, #8]
 80066ac:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066ae:	4d09      	ldr	r5, [pc, #36]	; (80066d4 <UARTEx_SetNbDataToProcess+0x44>)
 80066b0:	5c6b      	ldrb	r3, [r5, r1]
 80066b2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066b4:	4c08      	ldr	r4, [pc, #32]	; (80066d8 <UARTEx_SetNbDataToProcess+0x48>)
 80066b6:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066b8:	fb93 f3f1 	sdiv	r3, r3, r1
 80066bc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066c0:	5cab      	ldrb	r3, [r5, r2]
 80066c2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066c4:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80066ca:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80066ce:	bc30      	pop	{r4, r5}
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	08013148 	.word	0x08013148
 80066d8:	08013140 	.word	0x08013140

080066dc <HAL_UARTEx_WakeupCallback>:
}
 80066dc:	4770      	bx	lr

080066de <HAL_UARTEx_RxFifoFullCallback>:
}
 80066de:	4770      	bx	lr

080066e0 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80066e0:	4770      	bx	lr
	...

080066e4 <HAL_UARTEx_DisableFifoMode>:
{
 80066e4:	b510      	push	{r4, lr}
 80066e6:	4604      	mov	r4, r0
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80066e8:	6803      	ldr	r3, [r0, #0]
 80066ea:	4a1d      	ldr	r2, [pc, #116]	; (8006760 <HAL_UARTEx_DisableFifoMode+0x7c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d018      	beq.n	8006722 <HAL_UARTEx_DisableFifoMode+0x3e>
 80066f0:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d014      	beq.n	8006722 <HAL_UARTEx_DisableFifoMode+0x3e>
 80066f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d010      	beq.n	8006722 <HAL_UARTEx_DisableFifoMode+0x3e>
 8006700:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006704:	4293      	cmp	r3, r2
 8006706:	d00c      	beq.n	8006722 <HAL_UARTEx_DisableFifoMode+0x3e>
 8006708:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800670c:	4293      	cmp	r3, r2
 800670e:	d008      	beq.n	8006722 <HAL_UARTEx_DisableFifoMode+0x3e>
 8006710:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_UARTEx_DisableFifoMode+0x3e>
 8006718:	f44f 710d 	mov.w	r1, #564	; 0x234
 800671c:	4811      	ldr	r0, [pc, #68]	; (8006764 <HAL_UARTEx_DisableFifoMode+0x80>)
 800671e:	f7fa facb 	bl	8000cb8 <assert_failed>
  __HAL_LOCK(huart);
 8006722:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8006726:	2b01      	cmp	r3, #1
 8006728:	d017      	beq.n	800675a <HAL_UARTEx_DisableFifoMode+0x76>
 800672a:	2301      	movs	r3, #1
 800672c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006730:	2324      	movs	r3, #36	; 0x24
 8006732:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006736:	6822      	ldr	r2, [r4, #0]
 8006738:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800673a:	6811      	ldr	r1, [r2, #0]
 800673c:	f021 0101 	bic.w	r1, r1, #1
 8006740:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006746:	2000      	movs	r0, #0
 8006748:	6660      	str	r0, [r4, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800674e:	2320      	movs	r3, #32
 8006750:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006754:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006758:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800675a:	2002      	movs	r0, #2
 800675c:	e7fc      	b.n	8006758 <HAL_UARTEx_DisableFifoMode+0x74>
 800675e:	bf00      	nop
 8006760:	40013800 	.word	0x40013800
 8006764:	08013104 	.word	0x08013104

08006768 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	4604      	mov	r4, r0
 800676c:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800676e:	6803      	ldr	r3, [r0, #0]
 8006770:	4a2a      	ldr	r2, [pc, #168]	; (800681c <HAL_UARTEx_SetTxFifoThreshold+0xb4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d018      	beq.n	80067a8 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 8006776:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800677a:	4293      	cmp	r3, r2
 800677c:	d014      	beq.n	80067a8 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 800677e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006782:	4293      	cmp	r3, r2
 8006784:	d010      	beq.n	80067a8 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 8006786:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800678a:	4293      	cmp	r3, r2
 800678c:	d00c      	beq.n	80067a8 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 800678e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006792:	4293      	cmp	r3, r2
 8006794:	d008      	beq.n	80067a8 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 8006796:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800679a:	4293      	cmp	r3, r2
 800679c:	d004      	beq.n	80067a8 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 800679e:	f240 2162 	movw	r1, #610	; 0x262
 80067a2:	481f      	ldr	r0, [pc, #124]	; (8006820 <HAL_UARTEx_SetTxFifoThreshold+0xb8>)
 80067a4:	f7fa fa88 	bl	8000cb8 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 80067a8:	b175      	cbz	r5, 80067c8 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 80067aa:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 80067ae:	d00b      	beq.n	80067c8 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 80067b0:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80067b4:	d008      	beq.n	80067c8 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 80067b6:	f1b5 4fc0 	cmp.w	r5, #1610612736	; 0x60000000
 80067ba:	d005      	beq.n	80067c8 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 80067bc:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 80067c0:	d002      	beq.n	80067c8 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 80067c2:	f1b5 4f20 	cmp.w	r5, #2684354560	; 0xa0000000
 80067c6:	d121      	bne.n	800680c <HAL_UARTEx_SetTxFifoThreshold+0xa4>
  __HAL_LOCK(huart);
 80067c8:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d023      	beq.n	8006818 <HAL_UARTEx_SetTxFifoThreshold+0xb0>
 80067d0:	2301      	movs	r3, #1
 80067d2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80067d6:	2324      	movs	r3, #36	; 0x24
 80067d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	f022 0201 	bic.w	r2, r2, #1
 80067e6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067e8:	6822      	ldr	r2, [r4, #0]
 80067ea:	6893      	ldr	r3, [r2, #8]
 80067ec:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80067f0:	432b      	orrs	r3, r5
 80067f2:	6093      	str	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80067f4:	4620      	mov	r0, r4
 80067f6:	f7ff ff4b 	bl	8006690 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	601e      	str	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80067fe:	2320      	movs	r3, #32
 8006800:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006804:	2000      	movs	r0, #0
 8006806:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800680a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800680c:	f240 2163 	movw	r1, #611	; 0x263
 8006810:	4803      	ldr	r0, [pc, #12]	; (8006820 <HAL_UARTEx_SetTxFifoThreshold+0xb8>)
 8006812:	f7fa fa51 	bl	8000cb8 <assert_failed>
 8006816:	e7d7      	b.n	80067c8 <HAL_UARTEx_SetTxFifoThreshold+0x60>
  __HAL_LOCK(huart);
 8006818:	2002      	movs	r0, #2
 800681a:	e7f6      	b.n	800680a <HAL_UARTEx_SetTxFifoThreshold+0xa2>
 800681c:	40013800 	.word	0x40013800
 8006820:	08013104 	.word	0x08013104

08006824 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	4604      	mov	r4, r0
 8006828:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800682a:	6803      	ldr	r3, [r0, #0]
 800682c:	4a2a      	ldr	r2, [pc, #168]	; (80068d8 <HAL_UARTEx_SetRxFifoThreshold+0xb4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d018      	beq.n	8006864 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 8006832:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8006836:	4293      	cmp	r3, r2
 8006838:	d014      	beq.n	8006864 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 800683a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800683e:	4293      	cmp	r3, r2
 8006840:	d010      	beq.n	8006864 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 8006842:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006846:	4293      	cmp	r3, r2
 8006848:	d00c      	beq.n	8006864 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 800684a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800684e:	4293      	cmp	r3, r2
 8006850:	d008      	beq.n	8006864 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 8006852:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8006856:	4293      	cmp	r3, r2
 8006858:	d004      	beq.n	8006864 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 800685a:	f240 2193 	movw	r1, #659	; 0x293
 800685e:	481f      	ldr	r0, [pc, #124]	; (80068dc <HAL_UARTEx_SetRxFifoThreshold+0xb8>)
 8006860:	f7fa fa2a 	bl	8000cb8 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8006864:	b175      	cbz	r5, 8006884 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8006866:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
 800686a:	d00b      	beq.n	8006884 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 800686c:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 8006870:	d008      	beq.n	8006884 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8006872:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8006876:	d005      	beq.n	8006884 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8006878:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 800687c:	d002      	beq.n	8006884 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 800687e:	f1b5 6f20 	cmp.w	r5, #167772160	; 0xa000000
 8006882:	d121      	bne.n	80068c8 <HAL_UARTEx_SetRxFifoThreshold+0xa4>
  __HAL_LOCK(huart);
 8006884:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8006888:	2b01      	cmp	r3, #1
 800688a:	d023      	beq.n	80068d4 <HAL_UARTEx_SetRxFifoThreshold+0xb0>
 800688c:	2301      	movs	r3, #1
 800688e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006892:	2324      	movs	r3, #36	; 0x24
 8006894:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	f022 0201 	bic.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068a4:	6822      	ldr	r2, [r4, #0]
 80068a6:	6893      	ldr	r3, [r2, #8]
 80068a8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80068ac:	432b      	orrs	r3, r5
 80068ae:	6093      	str	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80068b0:	4620      	mov	r0, r4
 80068b2:	f7ff feed 	bl	8006690 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	601e      	str	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80068ba:	2320      	movs	r3, #32
 80068bc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80068c0:	2000      	movs	r0, #0
 80068c2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80068c6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 80068c8:	f44f 7125 	mov.w	r1, #660	; 0x294
 80068cc:	4803      	ldr	r0, [pc, #12]	; (80068dc <HAL_UARTEx_SetRxFifoThreshold+0xb8>)
 80068ce:	f7fa f9f3 	bl	8000cb8 <assert_failed>
 80068d2:	e7d7      	b.n	8006884 <HAL_UARTEx_SetRxFifoThreshold+0x60>
  __HAL_LOCK(huart);
 80068d4:	2002      	movs	r0, #2
 80068d6:	e7f6      	b.n	80068c6 <HAL_UARTEx_SetRxFifoThreshold+0xa2>
 80068d8:	40013800 	.word	0x40013800
 80068dc:	08013104 	.word	0x08013104

080068e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80068e0:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80068e2:	2000      	movs	r0, #0
 80068e4:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80068e8:	f64b 7280 	movw	r2, #49024	; 0xbf80
 80068ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80068f0:	4770      	bx	lr

080068f2 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80068f2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80068f6:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 80068fa:	045b      	lsls	r3, r3, #17
 80068fc:	0c5b      	lsrs	r3, r3, #17
 80068fe:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8006902:	2000      	movs	r0, #0
 8006904:	4770      	bx	lr

08006906 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006906:	b084      	sub	sp, #16
 8006908:	4684      	mov	ip, r0
 800690a:	a801      	add	r0, sp, #4
 800690c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006910:	2301      	movs	r3, #1
 8006912:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006916:	2000      	movs	r0, #0
 8006918:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800691c:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006920:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 8006924:	b004      	add	sp, #16
 8006926:	4770      	bx	lr

08006928 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006928:	b510      	push	{r4, lr}
 800692a:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800692c:	f891 c000 	ldrb.w	ip, [r1]
 8006930:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8006934:	b292      	uxth	r2, r2
 8006936:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800693a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800693e:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8006940:	78c8      	ldrb	r0, [r1, #3]
 8006942:	2803      	cmp	r0, #3
 8006944:	d862      	bhi.n	8006a0c <USB_ActivateEndpoint+0xe4>
 8006946:	e8df f000 	tbb	[pc, r0]
 800694a:	5d56      	.short	0x5d56
 800694c:	5902      	.short	0x5902
 800694e:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006950:	f248 0e80 	movw	lr, #32896	; 0x8080
 8006954:	ea42 020e 	orr.w	r2, r2, lr
 8006958:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800695c:	f891 c000 	ldrb.w	ip, [r1]
 8006960:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8006964:	b212      	sxth	r2, r2
 8006966:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800696a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800696e:	ea4c 0202 	orr.w	r2, ip, r2
 8006972:	b292      	uxth	r2, r2
 8006974:	ea42 020e 	orr.w	r2, r2, lr
 8006978:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 800697c:	7b0a      	ldrb	r2, [r1, #12]
 800697e:	2a00      	cmp	r2, #0
 8006980:	f040 80c2 	bne.w	8006b08 <USB_ActivateEndpoint+0x1e0>
  {
    if (ep->is_in != 0U)
 8006984:	784a      	ldrb	r2, [r1, #1]
 8006986:	2a00      	cmp	r2, #0
 8006988:	d051      	beq.n	8006a2e <USB_ActivateEndpoint+0x106>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800698a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800698e:	fa13 f282 	uxtah	r2, r3, r2
 8006992:	780c      	ldrb	r4, [r1, #0]
 8006994:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006998:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800699c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80069a0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80069a4:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069a8:	780c      	ldrb	r4, [r1, #0]
 80069aa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80069ae:	f012 0f40 	tst.w	r2, #64	; 0x40
 80069b2:	d00c      	beq.n	80069ce <USB_ActivateEndpoint+0xa6>
 80069b4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80069b8:	b292      	uxth	r2, r2
 80069ba:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80069be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80069c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069c6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80069ca:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80069ce:	78ca      	ldrb	r2, [r1, #3]
 80069d0:	2a01      	cmp	r2, #1
 80069d2:	d01d      	beq.n	8006a10 <USB_ActivateEndpoint+0xe8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069d4:	7809      	ldrb	r1, [r1, #0]
 80069d6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80069da:	b292      	uxth	r2, r2
 80069dc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80069e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e4:	f082 0220 	eor.w	r2, r2, #32
 80069e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069f0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80069f4:	e066      	b.n	8006ac4 <USB_ActivateEndpoint+0x19c>
      wEpRegVal |= USB_EP_CONTROL;
 80069f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 80069fa:	e7a9      	b.n	8006950 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 80069fc:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8006a00:	2000      	movs	r0, #0
      break;
 8006a02:	e7a5      	b.n	8006950 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8006a08:	2000      	movs	r0, #0
      break;
 8006a0a:	e7a1      	b.n	8006950 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	e79f      	b.n	8006950 <USB_ActivateEndpoint+0x28>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a10:	7809      	ldrb	r1, [r1, #0]
 8006a12:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006a16:	b292      	uxth	r2, r2
 8006a18:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a28:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8006a2c:	e04a      	b.n	8006ac4 <USB_ActivateEndpoint+0x19c>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a2e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006a32:	fa13 f282 	uxtah	r2, r3, r2
 8006a36:	780c      	ldrb	r4, [r1, #0]
 8006a38:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006a3c:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8006a40:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006a44:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006a48:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006a4c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006a50:	fa13 f282 	uxtah	r2, r3, r2
 8006a54:	780c      	ldrb	r4, [r1, #0]
 8006a56:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006a5a:	690c      	ldr	r4, [r1, #16]
 8006a5c:	2c3e      	cmp	r4, #62	; 0x3e
 8006a5e:	d932      	bls.n	8006ac6 <USB_ActivateEndpoint+0x19e>
 8006a60:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8006a64:	f014 0f1f 	tst.w	r4, #31
 8006a68:	d101      	bne.n	8006a6e <USB_ActivateEndpoint+0x146>
 8006a6a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006a6e:	ea6f 6ccc 	mvn.w	ip, ip, lsl #27
 8006a72:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8006a76:	fa1f fc8c 	uxth.w	ip, ip
 8006a7a:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a7e:	780c      	ldrb	r4, [r1, #0]
 8006a80:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006a84:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006a88:	d00c      	beq.n	8006aa4 <USB_ActivateEndpoint+0x17c>
 8006a8a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006a8e:	b292      	uxth	r2, r2
 8006a90:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006a94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006a98:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006a9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006aa0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006aa4:	7809      	ldrb	r1, [r1, #0]
 8006aa6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006aaa:	b292      	uxth	r2, r2
 8006aac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ab0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006ab4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8006ab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006abc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ac0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8006ac4:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ac6:	b98c      	cbnz	r4, 8006aec <USB_ActivateEndpoint+0x1c4>
 8006ac8:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8006acc:	b2a4      	uxth	r4, r4
 8006ace:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8006ad2:	b2a4      	uxth	r4, r4
 8006ad4:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8006ad8:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8006adc:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8006ae0:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8006ae4:	b2a4      	uxth	r4, r4
 8006ae6:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8006aea:	e7c8      	b.n	8006a7e <USB_ActivateEndpoint+0x156>
 8006aec:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8006af0:	f014 0f01 	tst.w	r4, #1
 8006af4:	d001      	beq.n	8006afa <USB_ActivateEndpoint+0x1d2>
 8006af6:	f10c 0c01 	add.w	ip, ip, #1
 8006afa:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8006afe:	fa1f fc8c 	uxth.w	ip, ip
 8006b02:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
 8006b06:	e7ba      	b.n	8006a7e <USB_ActivateEndpoint+0x156>
    if (ep->type == EP_TYPE_BULK)
 8006b08:	78ca      	ldrb	r2, [r1, #3]
 8006b0a:	2a02      	cmp	r2, #2
 8006b0c:	d072      	beq.n	8006bf4 <USB_ActivateEndpoint+0x2cc>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006b0e:	780c      	ldrb	r4, [r1, #0]
 8006b10:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b14:	b292      	uxth	r2, r2
 8006b16:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8006b1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b26:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006b2a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006b2e:	fa13 f282 	uxtah	r2, r3, r2
 8006b32:	f891 c000 	ldrb.w	ip, [r1]
 8006b36:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8006b3a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8006b3e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006b42:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006b46:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 8006b4a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006b4e:	fa13 f282 	uxtah	r2, r3, r2
 8006b52:	f891 c000 	ldrb.w	ip, [r1]
 8006b56:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8006b5a:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8006b5e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006b62:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006b66:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 8006b6a:	784a      	ldrb	r2, [r1, #1]
 8006b6c:	2a00      	cmp	r2, #0
 8006b6e:	d150      	bne.n	8006c12 <USB_ActivateEndpoint+0x2ea>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b70:	780c      	ldrb	r4, [r1, #0]
 8006b72:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b76:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006b7a:	d00c      	beq.n	8006b96 <USB_ActivateEndpoint+0x26e>
 8006b7c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b80:	b292      	uxth	r2, r2
 8006b82:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006b86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b8a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006b8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b92:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b96:	780c      	ldrb	r4, [r1, #0]
 8006b98:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b9c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006ba0:	d00c      	beq.n	8006bbc <USB_ActivateEndpoint+0x294>
 8006ba2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006ba6:	b292      	uxth	r2, r2
 8006ba8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006bac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006bb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bb4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006bb8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bbc:	f891 c000 	ldrb.w	ip, [r1]
 8006bc0:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8006bc4:	b292      	uxth	r2, r2
 8006bc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006bce:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8006bd2:	f248 0480 	movw	r4, #32896	; 0x8080
 8006bd6:	4322      	orrs	r2, r4
 8006bd8:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bdc:	7809      	ldrb	r1, [r1, #0]
 8006bde:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006be2:	b292      	uxth	r2, r2
 8006be4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bec:	4322      	orrs	r2, r4
 8006bee:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8006bf2:	e767      	b.n	8006ac4 <USB_ActivateEndpoint+0x19c>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006bf4:	780c      	ldrb	r4, [r1, #0]
 8006bf6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006bfa:	b292      	uxth	r2, r2
 8006bfc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006c00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006c04:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8006c08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c0c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8006c10:	e78b      	b.n	8006b2a <USB_ActivateEndpoint+0x202>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c12:	780c      	ldrb	r4, [r1, #0]
 8006c14:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006c18:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006c1c:	d00c      	beq.n	8006c38 <USB_ActivateEndpoint+0x310>
 8006c1e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006c22:	b292      	uxth	r2, r2
 8006c24:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006c28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006c2c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006c30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c34:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c38:	780c      	ldrb	r4, [r1, #0]
 8006c3a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006c3e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006c42:	d00c      	beq.n	8006c5e <USB_ActivateEndpoint+0x336>
 8006c44:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006c48:	b292      	uxth	r2, r2
 8006c4a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006c4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c56:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006c5a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8006c5e:	78ca      	ldrb	r2, [r1, #3]
 8006c60:	2a01      	cmp	r2, #1
 8006c62:	d01e      	beq.n	8006ca2 <USB_ActivateEndpoint+0x37a>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c64:	780c      	ldrb	r4, [r1, #0]
 8006c66:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006c6a:	b292      	uxth	r2, r2
 8006c6c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c74:	f082 0220 	eor.w	r2, r2, #32
 8006c78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c80:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c84:	7809      	ldrb	r1, [r1, #0]
 8006c86:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006c8a:	b292      	uxth	r2, r2
 8006c8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006c94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c9c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8006ca0:	e710      	b.n	8006ac4 <USB_ActivateEndpoint+0x19c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ca2:	780c      	ldrb	r4, [r1, #0]
 8006ca4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006ca8:	b292      	uxth	r2, r2
 8006caa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cba:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8006cbe:	e7e1      	b.n	8006c84 <USB_ActivateEndpoint+0x35c>

08006cc0 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006cc0:	7b0b      	ldrb	r3, [r1, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d146      	bne.n	8006d54 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8006cc6:	784b      	ldrb	r3, [r1, #1]
 8006cc8:	b313      	cbz	r3, 8006d10 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cca:	780a      	ldrb	r2, [r1, #0]
 8006ccc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cd0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006cd4:	d00c      	beq.n	8006cf0 <USB_DeactivateEndpoint+0x30>
 8006cd6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cf0:	780a      	ldrb	r2, [r1, #0]
 8006cf2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d08:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d10:	780a      	ldrb	r2, [r1, #0]
 8006d12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d16:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006d1a:	d00c      	beq.n	8006d36 <USB_DeactivateEndpoint+0x76>
 8006d1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d32:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d36:	780a      	ldrb	r2, [r1, #0]
 8006d38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006d52:	e7db      	b.n	8006d0c <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8006d54:	784b      	ldrb	r3, [r1, #1]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d14e      	bne.n	8006df8 <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d5a:	780a      	ldrb	r2, [r1, #0]
 8006d5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d60:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006d64:	d00c      	beq.n	8006d80 <USB_DeactivateEndpoint+0xc0>
 8006d66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d80:	780a      	ldrb	r2, [r1, #0]
 8006d82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d86:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d8a:	d00c      	beq.n	8006da6 <USB_DeactivateEndpoint+0xe6>
 8006d8c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006da2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8006da6:	780a      	ldrb	r2, [r1, #0]
 8006da8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dbe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dc2:	780a      	ldrb	r2, [r1, #0]
 8006dc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd2:	f248 0c80 	movw	ip, #32896	; 0x8080
 8006dd6:	ea43 030c 	orr.w	r3, r3, ip
 8006dda:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dde:	780a      	ldrb	r2, [r1, #0]
 8006de0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dee:	ea43 030c 	orr.w	r3, r3, ip
 8006df2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006df6:	e789      	b.n	8006d0c <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006df8:	780a      	ldrb	r2, [r1, #0]
 8006dfa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006dfe:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006e02:	d00c      	beq.n	8006e1e <USB_DeactivateEndpoint+0x15e>
 8006e04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e1e:	780a      	ldrb	r2, [r1, #0]
 8006e20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e28:	d00c      	beq.n	8006e44 <USB_DeactivateEndpoint+0x184>
 8006e2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e40:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8006e44:	780a      	ldrb	r2, [r1, #0]
 8006e46:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e60:	780a      	ldrb	r2, [r1, #0]
 8006e62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e70:	f248 0c80 	movw	ip, #32896	; 0x8080
 8006e74:	ea43 030c 	orr.w	r3, r3, ip
 8006e78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e7c:	780a      	ldrb	r2, [r1, #0]
 8006e7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8c:	ea43 030c 	orr.w	r3, r3, ip
 8006e90:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006e94:	e73a      	b.n	8006d0c <USB_DeactivateEndpoint+0x4c>

08006e96 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8006e96:	784b      	ldrb	r3, [r1, #1]
 8006e98:	b18b      	cbz	r3, 8006ebe <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e9a:	780a      	ldrb	r2, [r1, #0]
 8006e9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eaa:	f083 0310 	eor.w	r3, r3, #16
 8006eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8006eba:	2000      	movs	r0, #0
 8006ebc:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ebe:	780a      	ldrb	r2, [r1, #0]
 8006ec0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ece:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eda:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006ede:	e7ec      	b.n	8006eba <USB_EPSetStall+0x24>

08006ee0 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006ee0:	7b0b      	ldrb	r3, [r1, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d14b      	bne.n	8006f7e <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8006ee6:	784b      	ldrb	r3, [r1, #1]
 8006ee8:	b333      	cbz	r3, 8006f38 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006eea:	780a      	ldrb	r2, [r1, #0]
 8006eec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ef0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ef4:	d00c      	beq.n	8006f10 <USB_EPClearStall+0x30>
 8006ef6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f0c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006f10:	78cb      	ldrb	r3, [r1, #3]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d033      	beq.n	8006f7e <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f16:	780a      	ldrb	r2, [r1, #0]
 8006f18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f26:	f083 0320 	eor.w	r3, r3, #32
 8006f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f32:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006f36:	e022      	b.n	8006f7e <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f38:	780a      	ldrb	r2, [r1, #0]
 8006f3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006f3e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006f42:	d00c      	beq.n	8006f5e <USB_EPClearStall+0x7e>
 8006f44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f5e:	780a      	ldrb	r2, [r1, #0]
 8006f60:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8006f7e:	2000      	movs	r0, #0
 8006f80:	4770      	bx	lr

08006f82 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8006f82:	b911      	cbnz	r1, 8006f8a <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f84:	2380      	movs	r3, #128	; 0x80
 8006f86:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	4770      	bx	lr

08006f8e <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006f8e:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8006f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	4770      	bx	lr

08006fa4 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006fa4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8006fa8:	b280      	uxth	r0, r0
 8006faa:	4770      	bx	lr

08006fac <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006fac:	3301      	adds	r3, #1
 8006fae:	085b      	lsrs	r3, r3, #1
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fb0:	4402      	add	r2, r0
 8006fb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8006fb6:	e008      	b.n	8006fca <USB_WritePMA+0x1e>
  {
    temp1 = *pBuf;
 8006fb8:	7808      	ldrb	r0, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006fba:	f891 c001 	ldrb.w	ip, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8006fbe:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8006fc2:	f822 0b02 	strh.w	r0, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006fc6:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f4      	bne.n	8006fb8 <USB_WritePMA+0xc>
  }
}
 8006fce:	4770      	bx	lr

08006fd0 <USB_EPStartXfer>:
{
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	4605      	mov	r5, r0
 8006fd4:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8006fd6:	784a      	ldrb	r2, [r1, #1]
 8006fd8:	2a01      	cmp	r2, #1
 8006fda:	d032      	beq.n	8007042 <USB_EPStartXfer+0x72>
    if (ep->doublebuffer == 0U)
 8006fdc:	7b0b      	ldrb	r3, [r1, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f040 8283 	bne.w	80074ea <USB_EPStartXfer+0x51a>
      if (ep->xfer_len > ep->maxpacket)
 8006fe4:	698b      	ldr	r3, [r1, #24]
 8006fe6:	690a      	ldr	r2, [r1, #16]
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	f240 825d 	bls.w	80074a8 <USB_EPStartXfer+0x4d8>
        ep->xfer_len -= len;
 8006fee:	1a9b      	subs	r3, r3, r2
 8006ff0:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006ff2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006ff6:	fa15 f383 	uxtah	r3, r5, r3
 8006ffa:	7821      	ldrb	r1, [r4, #0]
 8006ffc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007000:	2a3e      	cmp	r2, #62	; 0x3e
 8007002:	f240 8255 	bls.w	80074b0 <USB_EPStartXfer+0x4e0>
 8007006:	0951      	lsrs	r1, r2, #5
 8007008:	f012 0f1f 	tst.w	r2, #31
 800700c:	d100      	bne.n	8007010 <USB_EPStartXfer+0x40>
 800700e:	3901      	subs	r1, #1
 8007010:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8007014:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007018:	b289      	uxth	r1, r1
 800701a:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800701e:	7822      	ldrb	r2, [r4, #0]
 8007020:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007024:	b29b      	uxth	r3, r3
 8007026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800702a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800703a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800703e:	2000      	movs	r0, #0
}
 8007040:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8007042:	698e      	ldr	r6, [r1, #24]
 8007044:	6909      	ldr	r1, [r1, #16]
 8007046:	428e      	cmp	r6, r1
 8007048:	d900      	bls.n	800704c <USB_EPStartXfer+0x7c>
      len = ep->maxpacket;
 800704a:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 800704c:	7b23      	ldrb	r3, [r4, #12]
 800704e:	b32b      	cbz	r3, 800709c <USB_EPStartXfer+0xcc>
      if (ep->type == EP_TYPE_BULK)
 8007050:	78e3      	ldrb	r3, [r4, #3]
 8007052:	2b02      	cmp	r3, #2
 8007054:	d044      	beq.n	80070e0 <USB_EPStartXfer+0x110>
        ep->xfer_len_db -= len;
 8007056:	6a23      	ldr	r3, [r4, #32]
 8007058:	1b9b      	subs	r3, r3, r6
 800705a:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800705c:	7823      	ldrb	r3, [r4, #0]
 800705e:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
 8007062:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007066:	f000 81dc 	beq.w	8007422 <USB_EPStartXfer+0x452>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800706a:	2a00      	cmp	r2, #0
 800706c:	f040 81c9 	bne.w	8007402 <USB_EPStartXfer+0x432>
 8007070:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007074:	fa15 f282 	uxtah	r2, r5, r2
 8007078:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800707c:	2e3e      	cmp	r6, #62	; 0x3e
 800707e:	f240 81a3 	bls.w	80073c8 <USB_EPStartXfer+0x3f8>
 8007082:	0972      	lsrs	r2, r6, #5
 8007084:	f016 0f1f 	tst.w	r6, #31
 8007088:	d100      	bne.n	800708c <USB_EPStartXfer+0xbc>
 800708a:	3a01      	subs	r2, #1
 800708c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007090:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007094:	b292      	uxth	r2, r2
 8007096:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800709a:	e1bb      	b.n	8007414 <USB_EPStartXfer+0x444>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800709c:	b2b6      	uxth	r6, r6
 800709e:	4633      	mov	r3, r6
 80070a0:	88e2      	ldrh	r2, [r4, #6]
 80070a2:	6961      	ldr	r1, [r4, #20]
 80070a4:	4628      	mov	r0, r5
 80070a6:	f7ff ff81 	bl	8006fac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070aa:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80070ae:	fa15 f383 	uxtah	r3, r5, r3
 80070b2:	7822      	ldrb	r2, [r4, #0]
 80070b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070b8:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80070bc:	7822      	ldrb	r2, [r4, #0]
 80070be:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070cc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80070d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80070dc:	2000      	movs	r0, #0
 80070de:	e7af      	b.n	8007040 <USB_EPStartXfer+0x70>
        if (ep->xfer_len_db > ep->maxpacket)
 80070e0:	6a23      	ldr	r3, [r4, #32]
 80070e2:	4299      	cmp	r1, r3
 80070e4:	f080 8152 	bcs.w	800738c <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80070e8:	7822      	ldrb	r2, [r4, #0]
 80070ea:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80070fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007100:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8007104:	6a23      	ldr	r3, [r4, #32]
 8007106:	1b9b      	subs	r3, r3, r6
 8007108:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800710a:	7823      	ldrb	r3, [r4, #0]
 800710c:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8007110:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007114:	f000 809d 	beq.w	8007252 <USB_EPStartXfer+0x282>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007118:	7862      	ldrb	r2, [r4, #1]
 800711a:	bb8a      	cbnz	r2, 8007180 <USB_EPStartXfer+0x1b0>
 800711c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007120:	fa15 f282 	uxtah	r2, r5, r2
 8007124:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007128:	2e3e      	cmp	r6, #62	; 0x3e
 800712a:	d90c      	bls.n	8007146 <USB_EPStartXfer+0x176>
 800712c:	0972      	lsrs	r2, r6, #5
 800712e:	f016 0f1f 	tst.w	r6, #31
 8007132:	d100      	bne.n	8007136 <USB_EPStartXfer+0x166>
 8007134:	3a01      	subs	r2, #1
 8007136:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800713a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800713e:	b292      	uxth	r2, r2
 8007140:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007144:	e01e      	b.n	8007184 <USB_EPStartXfer+0x1b4>
 8007146:	b98e      	cbnz	r6, 800716c <USB_EPStartXfer+0x19c>
 8007148:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800714c:	b292      	uxth	r2, r2
 800714e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007152:	b292      	uxth	r2, r2
 8007154:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007158:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800715c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007160:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007164:	b292      	uxth	r2, r2
 8007166:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800716a:	e00b      	b.n	8007184 <USB_EPStartXfer+0x1b4>
 800716c:	0872      	lsrs	r2, r6, #1
 800716e:	f016 0f01 	tst.w	r6, #1
 8007172:	d000      	beq.n	8007176 <USB_EPStartXfer+0x1a6>
 8007174:	3201      	adds	r2, #1
 8007176:	0292      	lsls	r2, r2, #10
 8007178:	b292      	uxth	r2, r2
 800717a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800717e:	e001      	b.n	8007184 <USB_EPStartXfer+0x1b4>
 8007180:	2a01      	cmp	r2, #1
 8007182:	d027      	beq.n	80071d4 <USB_EPStartXfer+0x204>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007184:	b2b3      	uxth	r3, r6
 8007186:	8962      	ldrh	r2, [r4, #10]
 8007188:	6961      	ldr	r1, [r4, #20]
 800718a:	4628      	mov	r0, r5
 800718c:	f7ff ff0e 	bl	8006fac <USB_WritePMA>
            ep->xfer_buff += len;
 8007190:	6963      	ldr	r3, [r4, #20]
 8007192:	4433      	add	r3, r6
 8007194:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007196:	6a23      	ldr	r3, [r4, #32]
 8007198:	6922      	ldr	r2, [r4, #16]
 800719a:	4293      	cmp	r3, r2
 800719c:	d924      	bls.n	80071e8 <USB_EPStartXfer+0x218>
              ep->xfer_len_db -= len;
 800719e:	1b9b      	subs	r3, r3, r6
 80071a0:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071a2:	7863      	ldrb	r3, [r4, #1]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d140      	bne.n	800722a <USB_EPStartXfer+0x25a>
 80071a8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80071ac:	fa15 f383 	uxtah	r3, r5, r3
 80071b0:	7822      	ldrb	r2, [r4, #0]
 80071b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071b6:	2e3e      	cmp	r6, #62	; 0x3e
 80071b8:	d91a      	bls.n	80071f0 <USB_EPStartXfer+0x220>
 80071ba:	0972      	lsrs	r2, r6, #5
 80071bc:	f016 0f1f 	tst.w	r6, #31
 80071c0:	d100      	bne.n	80071c4 <USB_EPStartXfer+0x1f4>
 80071c2:	3a01      	subs	r2, #1
 80071c4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80071c8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80071cc:	b292      	uxth	r2, r2
 80071ce:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80071d2:	e02c      	b.n	800722e <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071d4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80071d8:	fa15 f282 	uxtah	r2, r5, r2
 80071dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071e0:	b2b2      	uxth	r2, r6
 80071e2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80071e6:	e7cd      	b.n	8007184 <USB_EPStartXfer+0x1b4>
              ep->xfer_len_db = 0U;
 80071e8:	2200      	movs	r2, #0
 80071ea:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 80071ec:	461e      	mov	r6, r3
 80071ee:	e7d8      	b.n	80071a2 <USB_EPStartXfer+0x1d2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071f0:	b98e      	cbnz	r6, 8007216 <USB_EPStartXfer+0x246>
 80071f2:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80071f6:	b292      	uxth	r2, r2
 80071f8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80071fc:	b292      	uxth	r2, r2
 80071fe:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007202:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007206:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800720a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800720e:	b292      	uxth	r2, r2
 8007210:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007214:	e00b      	b.n	800722e <USB_EPStartXfer+0x25e>
 8007216:	0872      	lsrs	r2, r6, #1
 8007218:	f016 0f01 	tst.w	r6, #1
 800721c:	d000      	beq.n	8007220 <USB_EPStartXfer+0x250>
 800721e:	3201      	adds	r2, #1
 8007220:	0292      	lsls	r2, r2, #10
 8007222:	b292      	uxth	r2, r2
 8007224:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007228:	e001      	b.n	800722e <USB_EPStartXfer+0x25e>
 800722a:	2b01      	cmp	r3, #1
 800722c:	d006      	beq.n	800723c <USB_EPStartXfer+0x26c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800722e:	b2b3      	uxth	r3, r6
 8007230:	8922      	ldrh	r2, [r4, #8]
 8007232:	6961      	ldr	r1, [r4, #20]
 8007234:	4628      	mov	r0, r5
 8007236:	f7ff feb9 	bl	8006fac <USB_WritePMA>
 800723a:	e73f      	b.n	80070bc <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800723c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007240:	fa15 f383 	uxtah	r3, r5, r3
 8007244:	7822      	ldrb	r2, [r4, #0]
 8007246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800724a:	b2b2      	uxth	r2, r6
 800724c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007250:	e7ed      	b.n	800722e <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007252:	7862      	ldrb	r2, [r4, #1]
 8007254:	bb8a      	cbnz	r2, 80072ba <USB_EPStartXfer+0x2ea>
 8007256:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800725a:	fa15 f282 	uxtah	r2, r5, r2
 800725e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007262:	2e3e      	cmp	r6, #62	; 0x3e
 8007264:	d90c      	bls.n	8007280 <USB_EPStartXfer+0x2b0>
 8007266:	0972      	lsrs	r2, r6, #5
 8007268:	f016 0f1f 	tst.w	r6, #31
 800726c:	d100      	bne.n	8007270 <USB_EPStartXfer+0x2a0>
 800726e:	3a01      	subs	r2, #1
 8007270:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007274:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007278:	b292      	uxth	r2, r2
 800727a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800727e:	e01e      	b.n	80072be <USB_EPStartXfer+0x2ee>
 8007280:	b98e      	cbnz	r6, 80072a6 <USB_EPStartXfer+0x2d6>
 8007282:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007286:	b292      	uxth	r2, r2
 8007288:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800728c:	b292      	uxth	r2, r2
 800728e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007292:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007296:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800729a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800729e:	b292      	uxth	r2, r2
 80072a0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80072a4:	e00b      	b.n	80072be <USB_EPStartXfer+0x2ee>
 80072a6:	0872      	lsrs	r2, r6, #1
 80072a8:	f016 0f01 	tst.w	r6, #1
 80072ac:	d000      	beq.n	80072b0 <USB_EPStartXfer+0x2e0>
 80072ae:	3201      	adds	r2, #1
 80072b0:	0292      	lsls	r2, r2, #10
 80072b2:	b292      	uxth	r2, r2
 80072b4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80072b8:	e001      	b.n	80072be <USB_EPStartXfer+0x2ee>
 80072ba:	2a01      	cmp	r2, #1
 80072bc:	d027      	beq.n	800730e <USB_EPStartXfer+0x33e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072be:	b2b3      	uxth	r3, r6
 80072c0:	8922      	ldrh	r2, [r4, #8]
 80072c2:	6961      	ldr	r1, [r4, #20]
 80072c4:	4628      	mov	r0, r5
 80072c6:	f7ff fe71 	bl	8006fac <USB_WritePMA>
            ep->xfer_buff += len;
 80072ca:	6963      	ldr	r3, [r4, #20]
 80072cc:	4433      	add	r3, r6
 80072ce:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80072d0:	6a23      	ldr	r3, [r4, #32]
 80072d2:	6922      	ldr	r2, [r4, #16]
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d924      	bls.n	8007322 <USB_EPStartXfer+0x352>
              ep->xfer_len_db -= len;
 80072d8:	1b9b      	subs	r3, r3, r6
 80072da:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072dc:	7863      	ldrb	r3, [r4, #1]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d140      	bne.n	8007364 <USB_EPStartXfer+0x394>
 80072e2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80072e6:	fa15 f383 	uxtah	r3, r5, r3
 80072ea:	7822      	ldrb	r2, [r4, #0]
 80072ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072f0:	2e3e      	cmp	r6, #62	; 0x3e
 80072f2:	d91a      	bls.n	800732a <USB_EPStartXfer+0x35a>
 80072f4:	0972      	lsrs	r2, r6, #5
 80072f6:	f016 0f1f 	tst.w	r6, #31
 80072fa:	d100      	bne.n	80072fe <USB_EPStartXfer+0x32e>
 80072fc:	3a01      	subs	r2, #1
 80072fe:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007302:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007306:	b292      	uxth	r2, r2
 8007308:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800730c:	e02c      	b.n	8007368 <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800730e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007312:	fa15 f282 	uxtah	r2, r5, r2
 8007316:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800731a:	b2b2      	uxth	r2, r6
 800731c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007320:	e7cd      	b.n	80072be <USB_EPStartXfer+0x2ee>
              ep->xfer_len_db = 0U;
 8007322:	2200      	movs	r2, #0
 8007324:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8007326:	461e      	mov	r6, r3
 8007328:	e7d8      	b.n	80072dc <USB_EPStartXfer+0x30c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800732a:	b98e      	cbnz	r6, 8007350 <USB_EPStartXfer+0x380>
 800732c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007330:	b292      	uxth	r2, r2
 8007332:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007336:	b292      	uxth	r2, r2
 8007338:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800733c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007340:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007344:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007348:	b292      	uxth	r2, r2
 800734a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800734e:	e00b      	b.n	8007368 <USB_EPStartXfer+0x398>
 8007350:	0872      	lsrs	r2, r6, #1
 8007352:	f016 0f01 	tst.w	r6, #1
 8007356:	d000      	beq.n	800735a <USB_EPStartXfer+0x38a>
 8007358:	3201      	adds	r2, #1
 800735a:	0292      	lsls	r2, r2, #10
 800735c:	b292      	uxth	r2, r2
 800735e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007362:	e001      	b.n	8007368 <USB_EPStartXfer+0x398>
 8007364:	2b01      	cmp	r3, #1
 8007366:	d006      	beq.n	8007376 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007368:	b2b3      	uxth	r3, r6
 800736a:	8962      	ldrh	r2, [r4, #10]
 800736c:	6961      	ldr	r1, [r4, #20]
 800736e:	4628      	mov	r0, r5
 8007370:	f7ff fe1c 	bl	8006fac <USB_WritePMA>
 8007374:	e6a2      	b.n	80070bc <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007376:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800737a:	fa15 f383 	uxtah	r3, r5, r3
 800737e:	7822      	ldrb	r2, [r4, #0]
 8007380:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007384:	b2b2      	uxth	r2, r6
 8007386:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800738a:	e7ed      	b.n	8007368 <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800738c:	7821      	ldrb	r1, [r4, #0]
 800738e:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 8007392:	b292      	uxth	r2, r2
 8007394:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8007398:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800739c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073a4:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80073a8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80073ac:	fa15 f282 	uxtah	r2, r5, r2
 80073b0:	7821      	ldrb	r1, [r4, #0]
 80073b2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073bc:	8922      	ldrh	r2, [r4, #8]
 80073be:	6961      	ldr	r1, [r4, #20]
 80073c0:	4628      	mov	r0, r5
 80073c2:	f7ff fdf3 	bl	8006fac <USB_WritePMA>
 80073c6:	e679      	b.n	80070bc <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073c8:	b98e      	cbnz	r6, 80073ee <USB_EPStartXfer+0x41e>
 80073ca:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80073ce:	b292      	uxth	r2, r2
 80073d0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80073d4:	b292      	uxth	r2, r2
 80073d6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80073da:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80073de:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80073e2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80073e6:	b292      	uxth	r2, r2
 80073e8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80073ec:	e012      	b.n	8007414 <USB_EPStartXfer+0x444>
 80073ee:	0872      	lsrs	r2, r6, #1
 80073f0:	f016 0f01 	tst.w	r6, #1
 80073f4:	d000      	beq.n	80073f8 <USB_EPStartXfer+0x428>
 80073f6:	3201      	adds	r2, #1
 80073f8:	0292      	lsls	r2, r2, #10
 80073fa:	b292      	uxth	r2, r2
 80073fc:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007400:	e008      	b.n	8007414 <USB_EPStartXfer+0x444>
 8007402:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007406:	fa15 f282 	uxtah	r2, r5, r2
 800740a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800740e:	b2b2      	uxth	r2, r6
 8007410:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007414:	b2b3      	uxth	r3, r6
 8007416:	8962      	ldrh	r2, [r4, #10]
 8007418:	6961      	ldr	r1, [r4, #20]
 800741a:	4628      	mov	r0, r5
 800741c:	f7ff fdc6 	bl	8006fac <USB_WritePMA>
 8007420:	e64c      	b.n	80070bc <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007422:	bb8a      	cbnz	r2, 8007488 <USB_EPStartXfer+0x4b8>
 8007424:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007428:	fa15 f282 	uxtah	r2, r5, r2
 800742c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007430:	2e3e      	cmp	r6, #62	; 0x3e
 8007432:	d90c      	bls.n	800744e <USB_EPStartXfer+0x47e>
 8007434:	0972      	lsrs	r2, r6, #5
 8007436:	f016 0f1f 	tst.w	r6, #31
 800743a:	d100      	bne.n	800743e <USB_EPStartXfer+0x46e>
 800743c:	3a01      	subs	r2, #1
 800743e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007442:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007446:	b292      	uxth	r2, r2
 8007448:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800744c:	e025      	b.n	800749a <USB_EPStartXfer+0x4ca>
 800744e:	b98e      	cbnz	r6, 8007474 <USB_EPStartXfer+0x4a4>
 8007450:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007454:	b292      	uxth	r2, r2
 8007456:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800745a:	b292      	uxth	r2, r2
 800745c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007460:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007464:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007468:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800746c:	b292      	uxth	r2, r2
 800746e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007472:	e012      	b.n	800749a <USB_EPStartXfer+0x4ca>
 8007474:	0872      	lsrs	r2, r6, #1
 8007476:	f016 0f01 	tst.w	r6, #1
 800747a:	d000      	beq.n	800747e <USB_EPStartXfer+0x4ae>
 800747c:	3201      	adds	r2, #1
 800747e:	0292      	lsls	r2, r2, #10
 8007480:	b292      	uxth	r2, r2
 8007482:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007486:	e008      	b.n	800749a <USB_EPStartXfer+0x4ca>
 8007488:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800748c:	fa15 f282 	uxtah	r2, r5, r2
 8007490:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007494:	b2b2      	uxth	r2, r6
 8007496:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800749a:	b2b3      	uxth	r3, r6
 800749c:	8922      	ldrh	r2, [r4, #8]
 800749e:	6961      	ldr	r1, [r4, #20]
 80074a0:	4628      	mov	r0, r5
 80074a2:	f7ff fd83 	bl	8006fac <USB_WritePMA>
 80074a6:	e609      	b.n	80070bc <USB_EPStartXfer+0xec>
        ep->xfer_len = 0U;
 80074a8:	2200      	movs	r2, #0
 80074aa:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 80074ac:	461a      	mov	r2, r3
 80074ae:	e5a0      	b.n	8006ff2 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80074b0:	b98a      	cbnz	r2, 80074d6 <USB_EPStartXfer+0x506>
 80074b2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80074b6:	b292      	uxth	r2, r2
 80074b8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80074bc:	b292      	uxth	r2, r2
 80074be:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80074c2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80074c6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80074ca:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80074ce:	b292      	uxth	r2, r2
 80074d0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80074d4:	e5a3      	b.n	800701e <USB_EPStartXfer+0x4e>
 80074d6:	0851      	lsrs	r1, r2, #1
 80074d8:	f012 0f01 	tst.w	r2, #1
 80074dc:	d000      	beq.n	80074e0 <USB_EPStartXfer+0x510>
 80074de:	3101      	adds	r1, #1
 80074e0:	0289      	lsls	r1, r1, #10
 80074e2:	b289      	uxth	r1, r1
 80074e4:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 80074e8:	e599      	b.n	800701e <USB_EPStartXfer+0x4e>
      if (ep->type == EP_TYPE_BULK)
 80074ea:	78cb      	ldrb	r3, [r1, #3]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d03b      	beq.n	8007568 <USB_EPStartXfer+0x598>
      else if (ep->type == EP_TYPE_ISOC)
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	f040 811b 	bne.w	800772c <USB_EPStartXfer+0x75c>
        if (ep->xfer_len > ep->maxpacket)
 80074f6:	6989      	ldr	r1, [r1, #24]
 80074f8:	6923      	ldr	r3, [r4, #16]
 80074fa:	4299      	cmp	r1, r3
 80074fc:	f240 80ca 	bls.w	8007694 <USB_EPStartXfer+0x6c4>
          ep->xfer_len -= len;
 8007500:	1ac9      	subs	r1, r1, r3
 8007502:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007504:	b9aa      	cbnz	r2, 8007532 <USB_EPStartXfer+0x562>
 8007506:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800750a:	fa15 f282 	uxtah	r2, r5, r2
 800750e:	7821      	ldrb	r1, [r4, #0]
 8007510:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007514:	2b3e      	cmp	r3, #62	; 0x3e
 8007516:	f240 80c1 	bls.w	800769c <USB_EPStartXfer+0x6cc>
 800751a:	0959      	lsrs	r1, r3, #5
 800751c:	f013 0f1f 	tst.w	r3, #31
 8007520:	d100      	bne.n	8007524 <USB_EPStartXfer+0x554>
 8007522:	3901      	subs	r1, #1
 8007524:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8007528:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800752c:	b289      	uxth	r1, r1
 800752e:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007532:	7862      	ldrb	r2, [r4, #1]
 8007534:	2a00      	cmp	r2, #0
 8007536:	f040 80eb 	bne.w	8007710 <USB_EPStartXfer+0x740>
 800753a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800753e:	fa15 f282 	uxtah	r2, r5, r2
 8007542:	7821      	ldrb	r1, [r4, #0]
 8007544:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007548:	2b3e      	cmp	r3, #62	; 0x3e
 800754a:	f240 80c4 	bls.w	80076d6 <USB_EPStartXfer+0x706>
 800754e:	0959      	lsrs	r1, r3, #5
 8007550:	f013 0f1f 	tst.w	r3, #31
 8007554:	d100      	bne.n	8007558 <USB_EPStartXfer+0x588>
 8007556:	3901      	subs	r1, #1
 8007558:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 800755c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007560:	b29b      	uxth	r3, r3
 8007562:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8007566:	e55a      	b.n	800701e <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007568:	b9aa      	cbnz	r2, 8007596 <USB_EPStartXfer+0x5c6>
 800756a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800756e:	fa10 f383 	uxtah	r3, r0, r3
 8007572:	780a      	ldrb	r2, [r1, #0]
 8007574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007578:	6909      	ldr	r1, [r1, #16]
 800757a:	293e      	cmp	r1, #62	; 0x3e
 800757c:	d925      	bls.n	80075ca <USB_EPStartXfer+0x5fa>
 800757e:	094a      	lsrs	r2, r1, #5
 8007580:	f011 0f1f 	tst.w	r1, #31
 8007584:	d100      	bne.n	8007588 <USB_EPStartXfer+0x5b8>
 8007586:	3a01      	subs	r2, #1
 8007588:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800758c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007590:	b292      	uxth	r2, r2
 8007592:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007596:	7863      	ldrb	r3, [r4, #1]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d150      	bne.n	800763e <USB_EPStartXfer+0x66e>
 800759c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80075a0:	fa15 f383 	uxtah	r3, r5, r3
 80075a4:	7822      	ldrb	r2, [r4, #0]
 80075a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075aa:	6921      	ldr	r1, [r4, #16]
 80075ac:	293e      	cmp	r1, #62	; 0x3e
 80075ae:	d929      	bls.n	8007604 <USB_EPStartXfer+0x634>
 80075b0:	094a      	lsrs	r2, r1, #5
 80075b2:	f011 0f1f 	tst.w	r1, #31
 80075b6:	d100      	bne.n	80075ba <USB_EPStartXfer+0x5ea>
 80075b8:	3a01      	subs	r2, #1
 80075ba:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80075be:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80075c2:	b292      	uxth	r2, r2
 80075c4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80075c8:	e03b      	b.n	8007642 <USB_EPStartXfer+0x672>
 80075ca:	b989      	cbnz	r1, 80075f0 <USB_EPStartXfer+0x620>
 80075cc:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80075d0:	b292      	uxth	r2, r2
 80075d2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80075d6:	b292      	uxth	r2, r2
 80075d8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80075dc:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80075e0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80075e4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80075e8:	b292      	uxth	r2, r2
 80075ea:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80075ee:	e7d2      	b.n	8007596 <USB_EPStartXfer+0x5c6>
 80075f0:	084a      	lsrs	r2, r1, #1
 80075f2:	f011 0f01 	tst.w	r1, #1
 80075f6:	d000      	beq.n	80075fa <USB_EPStartXfer+0x62a>
 80075f8:	3201      	adds	r2, #1
 80075fa:	0292      	lsls	r2, r2, #10
 80075fc:	b292      	uxth	r2, r2
 80075fe:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007602:	e7c8      	b.n	8007596 <USB_EPStartXfer+0x5c6>
 8007604:	b989      	cbnz	r1, 800762a <USB_EPStartXfer+0x65a>
 8007606:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800760a:	b292      	uxth	r2, r2
 800760c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007610:	b292      	uxth	r2, r2
 8007612:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007616:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800761a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800761e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007622:	b292      	uxth	r2, r2
 8007624:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007628:	e00b      	b.n	8007642 <USB_EPStartXfer+0x672>
 800762a:	084a      	lsrs	r2, r1, #1
 800762c:	f011 0f01 	tst.w	r1, #1
 8007630:	d000      	beq.n	8007634 <USB_EPStartXfer+0x664>
 8007632:	3201      	adds	r2, #1
 8007634:	0292      	lsls	r2, r2, #10
 8007636:	b292      	uxth	r2, r2
 8007638:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800763c:	e001      	b.n	8007642 <USB_EPStartXfer+0x672>
 800763e:	2b01      	cmp	r3, #1
 8007640:	d01d      	beq.n	800767e <USB_EPStartXfer+0x6ae>
        if (ep->xfer_count != 0U)
 8007642:	69e3      	ldr	r3, [r4, #28]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f43f acea 	beq.w	800701e <USB_EPStartXfer+0x4e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800764a:	7822      	ldrb	r2, [r4, #0]
 800764c:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007650:	f244 0340 	movw	r3, #16448	; 0x4040
 8007654:	ea03 0001 	and.w	r0, r3, r1
 8007658:	438b      	bics	r3, r1
 800765a:	d002      	beq.n	8007662 <USB_EPStartXfer+0x692>
 800765c:	2800      	cmp	r0, #0
 800765e:	f47f acde 	bne.w	800701e <USB_EPStartXfer+0x4e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007662:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007666:	b29b      	uxth	r3, r3
 8007668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007674:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007678:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800767c:	e4cf      	b.n	800701e <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800767e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007682:	fa15 f383 	uxtah	r3, r5, r3
 8007686:	7822      	ldrb	r2, [r4, #0]
 8007688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800768c:	8a22      	ldrh	r2, [r4, #16]
 800768e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007692:	e7d6      	b.n	8007642 <USB_EPStartXfer+0x672>
          ep->xfer_len = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 8007698:	460b      	mov	r3, r1
 800769a:	e733      	b.n	8007504 <USB_EPStartXfer+0x534>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800769c:	b98b      	cbnz	r3, 80076c2 <USB_EPStartXfer+0x6f2>
 800769e:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80076a2:	b289      	uxth	r1, r1
 80076a4:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80076a8:	b289      	uxth	r1, r1
 80076aa:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80076ae:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80076b2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80076b6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80076ba:	b289      	uxth	r1, r1
 80076bc:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80076c0:	e737      	b.n	8007532 <USB_EPStartXfer+0x562>
 80076c2:	0859      	lsrs	r1, r3, #1
 80076c4:	f013 0f01 	tst.w	r3, #1
 80076c8:	d000      	beq.n	80076cc <USB_EPStartXfer+0x6fc>
 80076ca:	3101      	adds	r1, #1
 80076cc:	0289      	lsls	r1, r1, #10
 80076ce:	b289      	uxth	r1, r1
 80076d0:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80076d4:	e72d      	b.n	8007532 <USB_EPStartXfer+0x562>
 80076d6:	b98b      	cbnz	r3, 80076fc <USB_EPStartXfer+0x72c>
 80076d8:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 80076dc:	b29b      	uxth	r3, r3
 80076de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80076e8:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 80076ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80076fa:	e490      	b.n	800701e <USB_EPStartXfer+0x4e>
 80076fc:	0859      	lsrs	r1, r3, #1
 80076fe:	f013 0f01 	tst.w	r3, #1
 8007702:	d000      	beq.n	8007706 <USB_EPStartXfer+0x736>
 8007704:	3101      	adds	r1, #1
 8007706:	028b      	lsls	r3, r1, #10
 8007708:	b29b      	uxth	r3, r3
 800770a:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800770e:	e486      	b.n	800701e <USB_EPStartXfer+0x4e>
 8007710:	2a01      	cmp	r2, #1
 8007712:	f47f ac84 	bne.w	800701e <USB_EPStartXfer+0x4e>
 8007716:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800771a:	fa15 f282 	uxtah	r2, r5, r2
 800771e:	7821      	ldrb	r1, [r4, #0]
 8007720:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007724:	b29b      	uxth	r3, r3
 8007726:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800772a:	e478      	b.n	800701e <USB_EPStartXfer+0x4e>
        return HAL_ERROR;
 800772c:	2001      	movs	r0, #1
 800772e:	e487      	b.n	8007040 <USB_EPStartXfer+0x70>

08007730 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007730:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007732:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007734:	4402      	add	r2, r0
 8007736:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800773a:	e007      	b.n	800774c <USB_ReadPMA+0x1c>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800773c:	f832 0b02 	ldrh.w	r0, [r2], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007740:	7008      	strb	r0, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007742:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007746:	7048      	strb	r0, [r1, #1]
    pBuf++;
 8007748:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800774a:	3c01      	subs	r4, #1
 800774c:	2c00      	cmp	r4, #0
 800774e:	d1f5      	bne.n	800773c <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007750:	f013 0f01 	tst.w	r3, #1
 8007754:	d001      	beq.n	800775a <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 8007756:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007758:	700b      	strb	r3, [r1, #0]
  }
}
 800775a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800775e:	4770      	bx	lr

08007760 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007760:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007762:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8007766:	b184      	cbz	r4, 800778a <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007768:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800776c:	b17b      	cbz	r3, 800778e <USBD_CDC_EP0_RxReady+0x2e>
 800776e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8007772:	28ff      	cmp	r0, #255	; 0xff
 8007774:	d00d      	beq.n	8007792 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800777c:	4621      	mov	r1, r4
 800777e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8007780:	23ff      	movs	r3, #255	; 0xff
 8007782:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007786:	2000      	movs	r0, #0
}
 8007788:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800778a:	2003      	movs	r0, #3
 800778c:	e7fc      	b.n	8007788 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 800778e:	2000      	movs	r0, #0
 8007790:	e7fa      	b.n	8007788 <USBD_CDC_EP0_RxReady+0x28>
 8007792:	2000      	movs	r0, #0
 8007794:	e7f8      	b.n	8007788 <USBD_CDC_EP0_RxReady+0x28>
	...

08007798 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007798:	2343      	movs	r3, #67	; 0x43
 800779a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800779c:	4800      	ldr	r0, [pc, #0]	; (80077a0 <USBD_CDC_GetFSCfgDesc+0x8>)
 800779e:	4770      	bx	lr
 80077a0:	20000044 	.word	0x20000044

080077a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80077a4:	2343      	movs	r3, #67	; 0x43
 80077a6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 80077a8:	4800      	ldr	r0, [pc, #0]	; (80077ac <USBD_CDC_GetHSCfgDesc+0x8>)
 80077aa:	4770      	bx	lr
 80077ac:	20000088 	.word	0x20000088

080077b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80077b0:	2343      	movs	r3, #67	; 0x43
 80077b2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80077b4:	4800      	ldr	r0, [pc, #0]	; (80077b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80077b6:	4770      	bx	lr
 80077b8:	200000d8 	.word	0x200000d8

080077bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80077bc:	230a      	movs	r3, #10
 80077be:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80077c0:	4800      	ldr	r0, [pc, #0]	; (80077c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80077c2:	4770      	bx	lr
 80077c4:	200000cc 	.word	0x200000cc

080077c8 <USBD_CDC_DataOut>:
{
 80077c8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077ca:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80077ce:	b175      	cbz	r5, 80077ee <USBD_CDC_DataOut+0x26>
 80077d0:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077d2:	f00a f81f 	bl	8011814 <USBD_LL_GetRxDataSize>
 80077d6:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077da:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80077e4:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80077e8:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80077ea:	2000      	movs	r0, #0
}
 80077ec:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80077ee:	2003      	movs	r0, #3
 80077f0:	e7fc      	b.n	80077ec <USBD_CDC_DataOut+0x24>

080077f2 <USBD_CDC_DataIn>:
{
 80077f2:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80077f4:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 80077f8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80077fc:	b353      	cbz	r3, 8007854 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80077fe:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8007802:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007806:	6992      	ldr	r2, [r2, #24]
 8007808:	b14a      	cbz	r2, 800781e <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800780a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800780e:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8007812:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007814:	fbb2 fcf4 	udiv	ip, r2, r4
 8007818:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800781c:	b172      	cbz	r2, 800783c <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 800781e:	2200      	movs	r2, #0
 8007820:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007824:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8007828:	6914      	ldr	r4, [r2, #16]
 800782a:	b1ac      	cbz	r4, 8007858 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800782c:	460a      	mov	r2, r1
 800782e:	f503 7104 	add.w	r1, r3, #528	; 0x210
 8007832:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8007836:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 8007838:	2000      	movs	r0, #0
}
 800783a:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800783c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8007840:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007844:	2400      	movs	r4, #0
 8007846:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007848:	4623      	mov	r3, r4
 800784a:	4622      	mov	r2, r4
 800784c:	f009 ffd2 	bl	80117f4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8007850:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007852:	e7f2      	b.n	800783a <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 8007854:	2003      	movs	r0, #3
 8007856:	e7f0      	b.n	800783a <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 8007858:	2000      	movs	r0, #0
 800785a:	e7ee      	b.n	800783a <USBD_CDC_DataIn+0x48>

0800785c <USBD_CDC_Setup>:
{
 800785c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800785e:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007860:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8007864:	2300      	movs	r3, #0
 8007866:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800786a:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 800786e:	2e00      	cmp	r6, #0
 8007870:	d06c      	beq.n	800794c <USBD_CDC_Setup+0xf0>
 8007872:	4607      	mov	r7, r0
 8007874:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007876:	780b      	ldrb	r3, [r1, #0]
 8007878:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800787c:	d02a      	beq.n	80078d4 <USBD_CDC_Setup+0x78>
 800787e:	2d20      	cmp	r5, #32
 8007880:	d15e      	bne.n	8007940 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 8007882:	88ca      	ldrh	r2, [r1, #6]
 8007884:	b1f2      	cbz	r2, 80078c4 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 8007886:	f013 0f80 	tst.w	r3, #128	; 0x80
 800788a:	d00f      	beq.n	80078ac <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800788c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	4631      	mov	r1, r6
 8007894:	7860      	ldrb	r0, [r4, #1]
 8007896:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007898:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800789a:	2a07      	cmp	r2, #7
 800789c:	bf28      	it	cs
 800789e:	2207      	movcs	r2, #7
 80078a0:	4631      	mov	r1, r6
 80078a2:	4638      	mov	r0, r7
 80078a4:	f000 fdee 	bl	8008484 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80078a8:	2500      	movs	r5, #0
 80078aa:	e04c      	b.n	8007946 <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 80078ac:	784b      	ldrb	r3, [r1, #1]
 80078ae:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80078b2:	798b      	ldrb	r3, [r1, #6]
 80078b4:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80078b8:	88ca      	ldrh	r2, [r1, #6]
 80078ba:	4631      	mov	r1, r6
 80078bc:	f000 fdf7 	bl	80084ae <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 80078c0:	2500      	movs	r5, #0
 80078c2:	e040      	b.n	8007946 <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078c4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	2200      	movs	r2, #0
 80078cc:	7848      	ldrb	r0, [r1, #1]
 80078ce:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 80078d0:	2500      	movs	r5, #0
 80078d2:	e038      	b.n	8007946 <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 80078d4:	784e      	ldrb	r6, [r1, #1]
 80078d6:	2e0b      	cmp	r6, #11
 80078d8:	d82e      	bhi.n	8007938 <USBD_CDC_Setup+0xdc>
 80078da:	e8df f006 	tbb	[pc, r6]
 80078de:	3406      	.short	0x3406
 80078e0:	2d2d2d2d 	.word	0x2d2d2d2d
 80078e4:	2d2d2d2d 	.word	0x2d2d2d2d
 80078e8:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d003      	beq.n	80078fc <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 80078f4:	f000 fa8c 	bl	8007e10 <USBD_CtlError>
            ret = USBD_FAIL;
 80078f8:	2503      	movs	r5, #3
 80078fa:	e024      	b.n	8007946 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80078fc:	2202      	movs	r2, #2
 80078fe:	a901      	add	r1, sp, #4
 8007900:	f000 fdc0 	bl	8008484 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8007904:	4635      	mov	r5, r6
 8007906:	e01e      	b.n	8007946 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007908:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b03      	cmp	r3, #3
 8007910:	d003      	beq.n	800791a <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 8007912:	f000 fa7d 	bl	8007e10 <USBD_CtlError>
            ret = USBD_FAIL;
 8007916:	2503      	movs	r5, #3
 8007918:	e015      	b.n	8007946 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800791a:	2201      	movs	r2, #1
 800791c:	f10d 0107 	add.w	r1, sp, #7
 8007920:	f000 fdb0 	bl	8008484 <USBD_CtlSendData>
 8007924:	e00f      	b.n	8007946 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007926:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b03      	cmp	r3, #3
 800792e:	d00a      	beq.n	8007946 <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 8007930:	f000 fa6e 	bl	8007e10 <USBD_CtlError>
            ret = USBD_FAIL;
 8007934:	2503      	movs	r5, #3
 8007936:	e006      	b.n	8007946 <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 8007938:	f000 fa6a 	bl	8007e10 <USBD_CtlError>
          ret = USBD_FAIL;
 800793c:	2503      	movs	r5, #3
          break;
 800793e:	e002      	b.n	8007946 <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 8007940:	f000 fa66 	bl	8007e10 <USBD_CtlError>
      ret = USBD_FAIL;
 8007944:	2503      	movs	r5, #3
}
 8007946:	4628      	mov	r0, r5
 8007948:	b003      	add	sp, #12
 800794a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800794c:	2503      	movs	r5, #3
 800794e:	e7fa      	b.n	8007946 <USBD_CDC_Setup+0xea>

08007950 <USBD_CDC_DeInit>:
{
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007954:	2181      	movs	r1, #129	; 0x81
 8007956:	f009 ff16 	bl	8011786 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800795a:	2500      	movs	r5, #0
 800795c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800795e:	2101      	movs	r1, #1
 8007960:	4620      	mov	r0, r4
 8007962:	f009 ff10 	bl	8011786 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007966:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800796a:	2182      	movs	r1, #130	; 0x82
 800796c:	4620      	mov	r0, r4
 800796e:	f009 ff0a 	bl	8011786 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007972:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007976:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800797a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800797e:	b14b      	cbz	r3, 8007994 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007980:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007988:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800798c:	f009 ff70 	bl	8011870 <USBD_static_free>
    pdev->pClassData = NULL;
 8007990:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8007994:	2000      	movs	r0, #0
 8007996:	bd38      	pop	{r3, r4, r5, pc}

08007998 <USBD_CDC_Init>:
{
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800799c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80079a0:	f009 ff62 	bl	8011868 <USBD_static_malloc>
  if (hcdc == NULL)
 80079a4:	b3b8      	cbz	r0, 8007a16 <USBD_CDC_Init+0x7e>
 80079a6:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 80079a8:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ac:	7c23      	ldrb	r3, [r4, #16]
 80079ae:	bbbb      	cbnz	r3, 8007a20 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80079b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079b4:	2202      	movs	r2, #2
 80079b6:	2181      	movs	r1, #129	; 0x81
 80079b8:	4620      	mov	r0, r4
 80079ba:	f009 fed9 	bl	8011770 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079be:	2501      	movs	r5, #1
 80079c0:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079c6:	2202      	movs	r2, #2
 80079c8:	4629      	mov	r1, r5
 80079ca:	4620      	mov	r0, r4
 80079cc:	f009 fed0 	bl	8011770 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079d0:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80079d4:	2310      	movs	r3, #16
 80079d6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079da:	2308      	movs	r3, #8
 80079dc:	2203      	movs	r2, #3
 80079de:	2182      	movs	r1, #130	; 0x82
 80079e0:	4620      	mov	r0, r4
 80079e2:	f009 fec5 	bl	8011770 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80079ec:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4798      	blx	r3
  hcdc->TxState = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 80079fa:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079fe:	7c25      	ldrb	r5, [r4, #16]
 8007a00:	bb15      	cbnz	r5, 8007a48 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a06:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f009 fef9 	bl	8011804 <USBD_LL_PrepareReceive>
}
 8007a12:	4628      	mov	r0, r5
 8007a14:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8007a16:	2300      	movs	r3, #0
 8007a18:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007a1c:	2502      	movs	r5, #2
 8007a1e:	e7f8      	b.n	8007a12 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a20:	2340      	movs	r3, #64	; 0x40
 8007a22:	2202      	movs	r2, #2
 8007a24:	2181      	movs	r1, #129	; 0x81
 8007a26:	4620      	mov	r0, r4
 8007a28:	f009 fea2 	bl	8011770 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a2c:	2501      	movs	r5, #1
 8007a2e:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a30:	2340      	movs	r3, #64	; 0x40
 8007a32:	2202      	movs	r2, #2
 8007a34:	4629      	mov	r1, r5
 8007a36:	4620      	mov	r0, r4
 8007a38:	f009 fe9a 	bl	8011770 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a3c:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a40:	2310      	movs	r3, #16
 8007a42:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8007a46:	e7c8      	b.n	80079da <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a48:	2340      	movs	r3, #64	; 0x40
 8007a4a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8007a4e:	2101      	movs	r1, #1
 8007a50:	4620      	mov	r0, r4
 8007a52:	f009 fed7 	bl	8011804 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8007a56:	2500      	movs	r5, #0
 8007a58:	e7db      	b.n	8007a12 <USBD_CDC_Init+0x7a>

08007a5a <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8007a5a:	b119      	cbz	r1, 8007a64 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8007a5c:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007a60:	2000      	movs	r0, #0
 8007a62:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007a64:	2003      	movs	r0, #3
}
 8007a66:	4770      	bx	lr

08007a68 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a68:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8007a6c:	b12b      	cbz	r3, 8007a7a <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8007a6e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007a76:	2000      	movs	r0, #0
 8007a78:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007a7a:	2003      	movs	r0, #3
}
 8007a7c:	4770      	bx	lr

08007a7e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a7e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8007a82:	b11b      	cbz	r3, 8007a8c <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8007a84:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a88:	2000      	movs	r0, #0
 8007a8a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007a8c:	2003      	movs	r0, #3
}
 8007a8e:	4770      	bx	lr

08007a90 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a90:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8007a94:	b1a2      	cbz	r2, 8007ac0 <USBD_CDC_TransmitPacket+0x30>
{
 8007a96:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8007a98:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8007a9c:	b10b      	cbz	r3, 8007aa2 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007a9e:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8007aa0:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007aa8:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8007aac:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007aae:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8007ab2:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8007ab6:	2181      	movs	r1, #129	; 0x81
 8007ab8:	f009 fe9c 	bl	80117f4 <USBD_LL_Transmit>
    ret = USBD_OK;
 8007abc:	2000      	movs	r0, #0
 8007abe:	e7ef      	b.n	8007aa0 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 8007ac0:	2003      	movs	r0, #3
}
 8007ac2:	4770      	bx	lr

08007ac4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ac4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ac6:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8007aca:	b192      	cbz	r2, 8007af2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007acc:	7c04      	ldrb	r4, [r0, #16]
 8007ace:	b944      	cbnz	r4, 8007ae2 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ad4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8007ad8:	2101      	movs	r1, #1
 8007ada:	f009 fe93 	bl	8011804 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8007ade:	4620      	mov	r0, r4
 8007ae0:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ae2:	2340      	movs	r3, #64	; 0x40
 8007ae4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8007ae8:	2101      	movs	r1, #1
 8007aea:	f009 fe8b 	bl	8011804 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8007aee:	2400      	movs	r4, #0
 8007af0:	e7f5      	b.n	8007ade <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8007af2:	2403      	movs	r4, #3
 8007af4:	e7f3      	b.n	8007ade <USBD_CDC_ReceivePacket+0x1a>

08007af6 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007af6:	b198      	cbz	r0, 8007b20 <USBD_Init+0x2a>
{
 8007af8:	b508      	push	{r3, lr}
 8007afa:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007afc:	2000      	movs	r0, #0
 8007afe:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007b02:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007b06:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b0a:	b109      	cbz	r1, 8007b10 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8007b0c:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b10:	2101      	movs	r1, #1
 8007b12:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f009 fddd 	bl	80116d8 <USBD_LL_Init>

  return ret;
}
 8007b1e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007b20:	2003      	movs	r0, #3
}
 8007b22:	4770      	bx	lr

08007b24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b24:	b510      	push	{r4, lr}
 8007b26:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8007b2e:	b161      	cbz	r1, 8007b4a <USBD_RegisterClass+0x26>
 8007b30:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007b32:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007b36:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007b38:	b14b      	cbz	r3, 8007b4e <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007b3a:	f10d 0006 	add.w	r0, sp, #6
 8007b3e:	4798      	blx	r3
 8007b40:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007b44:	2000      	movs	r0, #0
}
 8007b46:	b002      	add	sp, #8
 8007b48:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8007b4a:	2003      	movs	r0, #3
 8007b4c:	e7fb      	b.n	8007b46 <USBD_RegisterClass+0x22>
  return USBD_OK;
 8007b4e:	2000      	movs	r0, #0
 8007b50:	e7f9      	b.n	8007b46 <USBD_RegisterClass+0x22>

08007b52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b52:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b54:	f009 fe04 	bl	8011760 <USBD_LL_Start>
}
 8007b58:	bd08      	pop	{r3, pc}

08007b5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b5a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8007b5c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007b60:	b113      	cbz	r3, 8007b68 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4798      	blx	r3
  }

  return ret;
}
 8007b66:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b68:	2003      	movs	r0, #3
 8007b6a:	e7fc      	b.n	8007b66 <USBD_SetClassConfig+0xc>

08007b6c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b6c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007b6e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007b72:	b10b      	cbz	r3, 8007b78 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007b78:	2000      	movs	r0, #0
 8007b7a:	bd08      	pop	{r3, pc}

08007b7c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b80:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8007b84:	4628      	mov	r0, r5
 8007b86:	f000 f92f 	bl	8007de8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b90:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8007b94:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b98:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8007b9c:	f001 031f 	and.w	r3, r1, #31
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d00d      	beq.n	8007bc0 <USBD_LL_SetupStage+0x44>
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d010      	beq.n	8007bca <USBD_LL_SetupStage+0x4e>
 8007ba8:	b12b      	cbz	r3, 8007bb6 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007baa:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f009 fdf1 	bl	8011796 <USBD_LL_StallEP>
      break;
 8007bb4:	e003      	b.n	8007bbe <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f000 fae4 	bl	8008186 <USBD_StdDevReq>
  }

  return ret;
}
 8007bbe:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f000 fb17 	bl	80081f6 <USBD_StdItfReq>
      break;
 8007bc8:	e7f9      	b.n	8007bbe <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007bca:	4629      	mov	r1, r5
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f000 fb46 	bl	800825e <USBD_StdEPReq>
      break;
 8007bd2:	e7f4      	b.n	8007bbe <USBD_LL_SetupStage+0x42>

08007bd4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007bd8:	460d      	mov	r5, r1
 8007bda:	bb41      	cbnz	r1, 8007c2e <USBD_LL_DataOutStage+0x5a>
 8007bdc:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007bde:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8007be2:	2a03      	cmp	r2, #3
 8007be4:	d001      	beq.n	8007bea <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 8007be6:	4608      	mov	r0, r1
}
 8007be8:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8007bea:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8007bee:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8007bf2:	4291      	cmp	r1, r2
 8007bf4:	d809      	bhi.n	8007c0a <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d00f      	beq.n	8007c20 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 8007c00:	4620      	mov	r0, r4
 8007c02:	f000 fc6b 	bl	80084dc <USBD_CtlSendStatus>
  return USBD_OK;
 8007c06:	4628      	mov	r0, r5
 8007c08:	e7ee      	b.n	8007be8 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8007c0a:	1a89      	subs	r1, r1, r2
 8007c0c:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c10:	428a      	cmp	r2, r1
 8007c12:	bf28      	it	cs
 8007c14:	460a      	movcs	r2, r1
 8007c16:	4619      	mov	r1, r3
 8007c18:	f000 fc58 	bl	80084cc <USBD_CtlContinueRx>
  return USBD_OK;
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	e7e3      	b.n	8007be8 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 8007c20:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0ea      	beq.n	8007c00 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 8007c2a:	4798      	blx	r3
 8007c2c:	e7e8      	b.n	8007c00 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c2e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d001      	beq.n	8007c3c <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 8007c38:	2000      	movs	r0, #0
 8007c3a:	e7d5      	b.n	8007be8 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 8007c3c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	b10b      	cbz	r3, 8007c48 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007c44:	4798      	blx	r3
        if (ret != USBD_OK)
 8007c46:	e7cf      	b.n	8007be8 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8007c48:	2000      	movs	r0, #0
 8007c4a:	e7cd      	b.n	8007be8 <USBD_LL_DataOutStage+0x14>

08007c4c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007c50:	460d      	mov	r5, r1
 8007c52:	2900      	cmp	r1, #0
 8007c54:	d14a      	bne.n	8007cec <USBD_LL_DataInStage+0xa0>
 8007c56:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c58:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8007c5c:	2a02      	cmp	r2, #2
 8007c5e:	d005      	beq.n	8007c6c <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007c60:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d03c      	beq.n	8007ce2 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 8007c68:	4628      	mov	r0, r5
}
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8007c6c:	69c2      	ldr	r2, [r0, #28]
 8007c6e:	6a01      	ldr	r1, [r0, #32]
 8007c70:	428a      	cmp	r2, r1
 8007c72:	d80e      	bhi.n	8007c92 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 8007c74:	428a      	cmp	r2, r1
 8007c76:	d018      	beq.n	8007caa <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c78:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d027      	beq.n	8007cd2 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c82:	2180      	movs	r1, #128	; 0x80
 8007c84:	4620      	mov	r0, r4
 8007c86:	f009 fd86 	bl	8011796 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f000 fc31 	bl	80084f2 <USBD_CtlReceiveStatus>
 8007c90:	e7e6      	b.n	8007c60 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8007c92:	1a52      	subs	r2, r2, r1
 8007c94:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007c96:	4619      	mov	r1, r3
 8007c98:	f000 fc01 	bl	800849e <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f009 fdae 	bl	8011804 <USBD_LL_PrepareReceive>
 8007ca8:	e7da      	b.n	8007c60 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8007caa:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8007cac:	4299      	cmp	r1, r3
 8007cae:	d8e3      	bhi.n	8007c78 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8007cb0:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d2df      	bcs.n	8007c78 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4611      	mov	r1, r2
 8007cbc:	f000 fbef 	bl	800849e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	460a      	mov	r2, r1
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f009 fd9a 	bl	8011804 <USBD_LL_PrepareReceive>
 8007cd0:	e7c6      	b.n	8007c60 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 8007cd2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0d2      	beq.n	8007c82 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 8007cdc:	4620      	mov	r0, r4
 8007cde:	4798      	blx	r3
 8007ce0:	e7cf      	b.n	8007c82 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8007ce8:	4628      	mov	r0, r5
 8007cea:	e7be      	b.n	8007c6a <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d001      	beq.n	8007cfa <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	e7b7      	b.n	8007c6a <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 8007cfa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	b10b      	cbz	r3, 8007d06 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007d02:	4798      	blx	r3
        if (ret != USBD_OK)
 8007d04:	e7b1      	b.n	8007c6a <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 8007d06:	2000      	movs	r0, #0
 8007d08:	e7af      	b.n	8007c6a <USBD_LL_DataInStage+0x1e>

08007d0a <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d10:	2300      	movs	r3, #0
 8007d12:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d16:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d18:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007d1c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007d20:	b1f3      	cbz	r3, 8007d60 <USBD_LL_Reset+0x56>
{
 8007d22:	b570      	push	{r4, r5, r6, lr}
 8007d24:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8007d26:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8007d2a:	b11a      	cbz	r2, 8007d34 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	b10b      	cbz	r3, 8007d34 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d30:	2100      	movs	r1, #0
 8007d32:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d34:	2340      	movs	r3, #64	; 0x40
 8007d36:	2200      	movs	r2, #0
 8007d38:	4611      	mov	r1, r2
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f009 fd18 	bl	8011770 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d40:	2601      	movs	r6, #1
 8007d42:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d46:	2540      	movs	r5, #64	; 0x40
 8007d48:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d4c:	462b      	mov	r3, r5
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2180      	movs	r1, #128	; 0x80
 8007d52:	4620      	mov	r0, r4
 8007d54:	f009 fd0c 	bl	8011770 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d58:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d5a:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8007d5c:	2000      	movs	r0, #0
}
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8007d60:	2003      	movs	r0, #3
}
 8007d62:	4770      	bx	lr

08007d64 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007d64:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8007d66:	2000      	movs	r0, #0
 8007d68:	4770      	bx	lr

08007d6a <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8007d6a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d74:	2304      	movs	r3, #4
 8007d76:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	4770      	bx	lr

08007d7e <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d7e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b04      	cmp	r3, #4
 8007d86:	d001      	beq.n	8007d8c <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8007d88:	2000      	movs	r0, #0
 8007d8a:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8007d8c:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8007d96:	e7f7      	b.n	8007d88 <USBD_LL_Resume+0xa>

08007d98 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8007d98:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8007d9c:	b162      	cbz	r2, 8007db8 <USBD_LL_SOF+0x20>
{
 8007d9e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d001      	beq.n	8007dae <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8007daa:	2000      	movs	r0, #0
}
 8007dac:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8007dae:	69d3      	ldr	r3, [r2, #28]
 8007db0:	b123      	cbz	r3, 8007dbc <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 8007db2:	4798      	blx	r3
  return USBD_OK;
 8007db4:	2000      	movs	r0, #0
 8007db6:	e7f9      	b.n	8007dac <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 8007db8:	2003      	movs	r0, #3
}
 8007dba:	4770      	bx	lr
  return USBD_OK;
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	e7f5      	b.n	8007dac <USBD_LL_SOF+0x14>

08007dc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007dc0:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8007dc2:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8007dc4:	e002      	b.n	8007dcc <USBD_GetLen+0xc>
  {
    len++;
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	b2c0      	uxtb	r0, r0
    pbuff++;
 8007dca:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	d1f9      	bne.n	8007dc6 <USBD_GetLen+0x6>
  }

  return len;
}
 8007dd2:	4770      	bx	lr

08007dd4 <USBD_SetFeature>:
{
 8007dd4:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dd6:	884b      	ldrh	r3, [r1, #2]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d000      	beq.n	8007dde <USBD_SetFeature+0xa>
}
 8007ddc:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8007dde:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007de2:	f000 fb7b 	bl	80084dc <USBD_CtlSendStatus>
}
 8007de6:	e7f9      	b.n	8007ddc <USBD_SetFeature+0x8>

08007de8 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8007de8:	780b      	ldrb	r3, [r1, #0]
 8007dea:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8007dec:	784b      	ldrb	r3, [r1, #1]
 8007dee:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8007df0:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8007df2:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007df4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8007df8:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8007dfa:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8007dfc:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007dfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8007e02:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8007e04:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e06:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007e08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8007e0c:	80c3      	strh	r3, [r0, #6]
}
 8007e0e:	4770      	bx	lr

08007e10 <USBD_CtlError>:
{
 8007e10:	b510      	push	{r4, lr}
 8007e12:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e14:	2180      	movs	r1, #128	; 0x80
 8007e16:	f009 fcbe 	bl	8011796 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f009 fcba 	bl	8011796 <USBD_LL_StallEP>
}
 8007e22:	bd10      	pop	{r4, pc}

08007e24 <USBD_GetDescriptor>:
{
 8007e24:	b530      	push	{r4, r5, lr}
 8007e26:	b083      	sub	sp, #12
 8007e28:	4604      	mov	r4, r0
 8007e2a:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8007e32:	884a      	ldrh	r2, [r1, #2]
 8007e34:	0a13      	lsrs	r3, r2, #8
 8007e36:	3b01      	subs	r3, #1
 8007e38:	2b0e      	cmp	r3, #14
 8007e3a:	f200 80bc 	bhi.w	8007fb6 <USBD_GetDescriptor+0x192>
 8007e3e:	e8df f003 	tbb	[pc, r3]
 8007e42:	3015      	.short	0x3015
 8007e44:	9ebaba44 	.word	0x9ebaba44
 8007e48:	bababaab 	.word	0xbababaab
 8007e4c:	babababa 	.word	0xbabababa
 8007e50:	08          	.byte	0x08
 8007e51:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007e52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	b123      	cbz	r3, 8007e64 <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007e5a:	f10d 0106 	add.w	r1, sp, #6
 8007e5e:	7c00      	ldrb	r0, [r0, #16]
 8007e60:	4798      	blx	r3
  if (err != 0U)
 8007e62:	e00a      	b.n	8007e7a <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8007e64:	4629      	mov	r1, r5
 8007e66:	f7ff ffd3 	bl	8007e10 <USBD_CtlError>
  if (err != 0U)
 8007e6a:	e018      	b.n	8007e9e <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e6c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f10d 0106 	add.w	r1, sp, #6
 8007e76:	7c00      	ldrb	r0, [r0, #16]
 8007e78:	4798      	blx	r3
  if (req->wLength != 0U)
 8007e7a:	88ea      	ldrh	r2, [r5, #6]
 8007e7c:	2a00      	cmp	r2, #0
 8007e7e:	f000 80a3 	beq.w	8007fc8 <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 8007e82:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 8099 	beq.w	8007fbe <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	bf28      	it	cs
 8007e90:	461a      	movcs	r2, r3
 8007e92:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e96:	4601      	mov	r1, r0
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f000 faf3 	bl	8008484 <USBD_CtlSendData>
}
 8007e9e:	b003      	add	sp, #12
 8007ea0:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ea2:	7c03      	ldrb	r3, [r0, #16]
 8007ea4:	b943      	cbnz	r3, 8007eb8 <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ea6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eac:	f10d 0006 	add.w	r0, sp, #6
 8007eb0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007eb6:	e7e0      	b.n	8007e7a <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007eb8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebe:	f10d 0006 	add.w	r0, sp, #6
 8007ec2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007ec8:	e7d7      	b.n	8007e7a <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 8007eca:	b2d2      	uxtb	r2, r2
 8007ecc:	2a05      	cmp	r2, #5
 8007ece:	d852      	bhi.n	8007f76 <USBD_GetDescriptor+0x152>
 8007ed0:	e8df f002 	tbb	[pc, r2]
 8007ed4:	2a1d1003 	.word	0x2a1d1003
 8007ed8:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007eda:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	b123      	cbz	r3, 8007eec <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ee2:	f10d 0106 	add.w	r1, sp, #6
 8007ee6:	7c00      	ldrb	r0, [r0, #16]
 8007ee8:	4798      	blx	r3
  if (err != 0U)
 8007eea:	e7c6      	b.n	8007e7a <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007eec:	4629      	mov	r1, r5
 8007eee:	f7ff ff8f 	bl	8007e10 <USBD_CtlError>
  if (err != 0U)
 8007ef2:	e7d4      	b.n	8007e9e <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ef4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	b123      	cbz	r3, 8007f06 <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007efc:	f10d 0106 	add.w	r1, sp, #6
 8007f00:	7c00      	ldrb	r0, [r0, #16]
 8007f02:	4798      	blx	r3
  if (err != 0U)
 8007f04:	e7b9      	b.n	8007e7a <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007f06:	4629      	mov	r1, r5
 8007f08:	f7ff ff82 	bl	8007e10 <USBD_CtlError>
  if (err != 0U)
 8007f0c:	e7c7      	b.n	8007e9e <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f0e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	b123      	cbz	r3, 8007f20 <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f16:	f10d 0106 	add.w	r1, sp, #6
 8007f1a:	7c00      	ldrb	r0, [r0, #16]
 8007f1c:	4798      	blx	r3
  if (err != 0U)
 8007f1e:	e7ac      	b.n	8007e7a <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007f20:	4629      	mov	r1, r5
 8007f22:	f7ff ff75 	bl	8007e10 <USBD_CtlError>
  if (err != 0U)
 8007f26:	e7ba      	b.n	8007e9e <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f28:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	b123      	cbz	r3, 8007f3a <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f30:	f10d 0106 	add.w	r1, sp, #6
 8007f34:	7c00      	ldrb	r0, [r0, #16]
 8007f36:	4798      	blx	r3
  if (err != 0U)
 8007f38:	e79f      	b.n	8007e7a <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	f7ff ff68 	bl	8007e10 <USBD_CtlError>
  if (err != 0U)
 8007f40:	e7ad      	b.n	8007e9e <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f42:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	b123      	cbz	r3, 8007f54 <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f4a:	f10d 0106 	add.w	r1, sp, #6
 8007f4e:	7c00      	ldrb	r0, [r0, #16]
 8007f50:	4798      	blx	r3
  if (err != 0U)
 8007f52:	e792      	b.n	8007e7a <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007f54:	4629      	mov	r1, r5
 8007f56:	f7ff ff5b 	bl	8007e10 <USBD_CtlError>
  if (err != 0U)
 8007f5a:	e7a0      	b.n	8007e9e <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f5c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	b123      	cbz	r3, 8007f6e <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f64:	f10d 0106 	add.w	r1, sp, #6
 8007f68:	7c00      	ldrb	r0, [r0, #16]
 8007f6a:	4798      	blx	r3
  if (err != 0U)
 8007f6c:	e785      	b.n	8007e7a <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007f6e:	4629      	mov	r1, r5
 8007f70:	f7ff ff4e 	bl	8007e10 <USBD_CtlError>
  if (err != 0U)
 8007f74:	e793      	b.n	8007e9e <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 8007f76:	4629      	mov	r1, r5
 8007f78:	f7ff ff4a 	bl	8007e10 <USBD_CtlError>
  if (err != 0U)
 8007f7c:	e78f      	b.n	8007e9e <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f7e:	7c03      	ldrb	r3, [r0, #16]
 8007f80:	b933      	cbnz	r3, 8007f90 <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f82:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f88:	f10d 0006 	add.w	r0, sp, #6
 8007f8c:	4798      	blx	r3
  if (err != 0U)
 8007f8e:	e774      	b.n	8007e7a <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8007f90:	4629      	mov	r1, r5
 8007f92:	f7ff ff3d 	bl	8007e10 <USBD_CtlError>
  if (err != 0U)
 8007f96:	e782      	b.n	8007e9e <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f98:	7c03      	ldrb	r3, [r0, #16]
 8007f9a:	b943      	cbnz	r3, 8007fae <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f9c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa2:	f10d 0006 	add.w	r0, sp, #6
 8007fa6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fa8:	2307      	movs	r3, #7
 8007faa:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007fac:	e765      	b.n	8007e7a <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8007fae:	4629      	mov	r1, r5
 8007fb0:	f7ff ff2e 	bl	8007e10 <USBD_CtlError>
  if (err != 0U)
 8007fb4:	e773      	b.n	8007e9e <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	f7ff ff2a 	bl	8007e10 <USBD_CtlError>
    return;
 8007fbc:	e76f      	b.n	8007e9e <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f7ff ff25 	bl	8007e10 <USBD_CtlError>
 8007fc6:	e76a      	b.n	8007e9e <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 fa87 	bl	80084dc <USBD_CtlSendStatus>
 8007fce:	e766      	b.n	8007e9e <USBD_GetDescriptor+0x7a>

08007fd0 <USBD_SetAddress>:
{
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fd4:	888b      	ldrh	r3, [r1, #4]
 8007fd6:	b9fb      	cbnz	r3, 8008018 <USBD_SetAddress+0x48>
 8007fd8:	88cb      	ldrh	r3, [r1, #6]
 8007fda:	b9eb      	cbnz	r3, 8008018 <USBD_SetAddress+0x48>
 8007fdc:	884b      	ldrh	r3, [r1, #2]
 8007fde:	2b7f      	cmp	r3, #127	; 0x7f
 8007fe0:	d81a      	bhi.n	8008018 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fe2:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d00c      	beq.n	800800a <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8007ff0:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	f009 fbf5 	bl	80117e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f000 fa6e 	bl	80084dc <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008000:	b135      	cbz	r5, 8008010 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008002:	2302      	movs	r3, #2
 8008004:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8008008:	e009      	b.n	800801e <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800800a:	f7ff ff01 	bl	8007e10 <USBD_CtlError>
 800800e:	e006      	b.n	800801e <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008010:	2301      	movs	r3, #1
 8008012:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8008016:	e002      	b.n	800801e <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8008018:	4620      	mov	r0, r4
 800801a:	f7ff fef9 	bl	8007e10 <USBD_CtlError>
}
 800801e:	bd38      	pop	{r3, r4, r5, pc}

08008020 <USBD_SetConfig>:
{
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	4604      	mov	r4, r0
 8008024:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8008026:	788d      	ldrb	r5, [r1, #2]
 8008028:	4b2e      	ldr	r3, [pc, #184]	; (80080e4 <USBD_SetConfig+0xc4>)
 800802a:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800802c:	2d01      	cmp	r5, #1
 800802e:	d810      	bhi.n	8008052 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8008030:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d00f      	beq.n	800805a <USBD_SetConfig+0x3a>
 800803a:	2b03      	cmp	r3, #3
 800803c:	d023      	beq.n	8008086 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 800803e:	f7ff fee7 	bl	8007e10 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008042:	4b28      	ldr	r3, [pc, #160]	; (80080e4 <USBD_SetConfig+0xc4>)
 8008044:	7819      	ldrb	r1, [r3, #0]
 8008046:	4620      	mov	r0, r4
 8008048:	f7ff fd90 	bl	8007b6c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800804c:	2503      	movs	r5, #3
}
 800804e:	4628      	mov	r0, r5
 8008050:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8008052:	f7ff fedd 	bl	8007e10 <USBD_CtlError>
    return USBD_FAIL;
 8008056:	2503      	movs	r5, #3
 8008058:	e7f9      	b.n	800804e <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800805a:	b18d      	cbz	r5, 8008080 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 800805c:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800805e:	4629      	mov	r1, r5
 8008060:	f7ff fd7b 	bl	8007b5a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8008064:	4605      	mov	r5, r0
 8008066:	b120      	cbz	r0, 8008072 <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 8008068:	4631      	mov	r1, r6
 800806a:	4620      	mov	r0, r4
 800806c:	f7ff fed0 	bl	8007e10 <USBD_CtlError>
 8008070:	e7ed      	b.n	800804e <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8008072:	4620      	mov	r0, r4
 8008074:	f000 fa32 	bl	80084dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008078:	2303      	movs	r3, #3
 800807a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800807e:	e7e6      	b.n	800804e <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8008080:	f000 fa2c 	bl	80084dc <USBD_CtlSendStatus>
 8008084:	e7e3      	b.n	800804e <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8008086:	b1cd      	cbz	r5, 80080bc <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 8008088:	6841      	ldr	r1, [r0, #4]
 800808a:	428d      	cmp	r5, r1
 800808c:	d025      	beq.n	80080da <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800808e:	b2c9      	uxtb	r1, r1
 8008090:	f7ff fd6c 	bl	8007b6c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008094:	4b13      	ldr	r3, [pc, #76]	; (80080e4 <USBD_SetConfig+0xc4>)
 8008096:	7819      	ldrb	r1, [r3, #0]
 8008098:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800809a:	4620      	mov	r0, r4
 800809c:	f7ff fd5d 	bl	8007b5a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80080a0:	4605      	mov	r5, r0
 80080a2:	b1b0      	cbz	r0, 80080d2 <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 80080a4:	4631      	mov	r1, r6
 80080a6:	4620      	mov	r0, r4
 80080a8:	f7ff feb2 	bl	8007e10 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080ac:	7921      	ldrb	r1, [r4, #4]
 80080ae:	4620      	mov	r0, r4
 80080b0:	f7ff fd5c 	bl	8007b6c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080b4:	2302      	movs	r3, #2
 80080b6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80080ba:	e7c8      	b.n	800804e <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080bc:	2302      	movs	r3, #2
 80080be:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080c2:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080c4:	4629      	mov	r1, r5
 80080c6:	f7ff fd51 	bl	8007b6c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 fa06 	bl	80084dc <USBD_CtlSendStatus>
 80080d0:	e7bd      	b.n	800804e <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 fa02 	bl	80084dc <USBD_CtlSendStatus>
 80080d8:	e7b9      	b.n	800804e <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80080da:	f000 f9ff 	bl	80084dc <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80080de:	2500      	movs	r5, #0
 80080e0:	e7b5      	b.n	800804e <USBD_SetConfig+0x2e>
 80080e2:	bf00      	nop
 80080e4:	20001ff0 	.word	0x20001ff0

080080e8 <USBD_GetConfig>:
{
 80080e8:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80080ea:	88cb      	ldrh	r3, [r1, #6]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d10b      	bne.n	8008108 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80080f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d909      	bls.n	800810e <USBD_GetConfig+0x26>
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d109      	bne.n	8008112 <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080fe:	2201      	movs	r2, #1
 8008100:	1d01      	adds	r1, r0, #4
 8008102:	f000 f9bf 	bl	8008484 <USBD_CtlSendData>
        break;
 8008106:	e001      	b.n	800810c <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8008108:	f7ff fe82 	bl	8007e10 <USBD_CtlError>
}
 800810c:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800810e:	b25b      	sxtb	r3, r3
 8008110:	b913      	cbnz	r3, 8008118 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 8008112:	f7ff fe7d 	bl	8007e10 <USBD_CtlError>
}
 8008116:	e7f9      	b.n	800810c <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 8008118:	4601      	mov	r1, r0
 800811a:	2300      	movs	r3, #0
 800811c:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008120:	2201      	movs	r2, #1
 8008122:	f000 f9af 	bl	8008484 <USBD_CtlSendData>
        break;
 8008126:	e7f1      	b.n	800810c <USBD_GetConfig+0x24>

08008128 <USBD_GetStatus>:
{
 8008128:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800812a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800812e:	3b01      	subs	r3, #1
 8008130:	2b02      	cmp	r3, #2
 8008132:	d812      	bhi.n	800815a <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8008134:	88cb      	ldrh	r3, [r1, #6]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d10c      	bne.n	8008154 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800813a:	2301      	movs	r3, #1
 800813c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800813e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8008142:	b10b      	cbz	r3, 8008148 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008144:	2303      	movs	r3, #3
 8008146:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008148:	2202      	movs	r2, #2
 800814a:	f100 010c 	add.w	r1, r0, #12
 800814e:	f000 f999 	bl	8008484 <USBD_CtlSendData>
}
 8008152:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8008154:	f7ff fe5c 	bl	8007e10 <USBD_CtlError>
        break;
 8008158:	e7fb      	b.n	8008152 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800815a:	f7ff fe59 	bl	8007e10 <USBD_CtlError>
}
 800815e:	e7f8      	b.n	8008152 <USBD_GetStatus+0x2a>

08008160 <USBD_ClrFeature>:
{
 8008160:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8008162:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008166:	3b01      	subs	r3, #1
 8008168:	2b02      	cmp	r3, #2
 800816a:	d809      	bhi.n	8008180 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800816c:	884b      	ldrh	r3, [r1, #2]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d000      	beq.n	8008174 <USBD_ClrFeature+0x14>
}
 8008172:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800817a:	f000 f9af 	bl	80084dc <USBD_CtlSendStatus>
 800817e:	e7f8      	b.n	8008172 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8008180:	f7ff fe46 	bl	8007e10 <USBD_CtlError>
}
 8008184:	e7f5      	b.n	8008172 <USBD_ClrFeature+0x12>

08008186 <USBD_StdDevReq>:
{
 8008186:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008188:	780c      	ldrb	r4, [r1, #0]
 800818a:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800818e:	2c20      	cmp	r4, #32
 8008190:	d006      	beq.n	80081a0 <USBD_StdDevReq+0x1a>
 8008192:	2c40      	cmp	r4, #64	; 0x40
 8008194:	d004      	beq.n	80081a0 <USBD_StdDevReq+0x1a>
 8008196:	b154      	cbz	r4, 80081ae <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 8008198:	f7ff fe3a 	bl	8007e10 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800819c:	2400      	movs	r4, #0
      break;
 800819e:	e004      	b.n	80081aa <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081a0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	4798      	blx	r3
 80081a8:	4604      	mov	r4, r0
}
 80081aa:	4620      	mov	r0, r4
 80081ac:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 80081ae:	784d      	ldrb	r5, [r1, #1]
 80081b0:	2d09      	cmp	r5, #9
 80081b2:	d81d      	bhi.n	80081f0 <USBD_StdDevReq+0x6a>
 80081b4:	e8df f005 	tbb	[pc, r5]
 80081b8:	161c1912 	.word	0x161c1912
 80081bc:	1c05081c 	.word	0x1c05081c
 80081c0:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 80081c2:	f7ff fe2f 	bl	8007e24 <USBD_GetDescriptor>
          break;
 80081c6:	e7f0      	b.n	80081aa <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 80081c8:	f7ff ff02 	bl	8007fd0 <USBD_SetAddress>
          break;
 80081cc:	e7ed      	b.n	80081aa <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 80081ce:	f7ff ff27 	bl	8008020 <USBD_SetConfig>
 80081d2:	4604      	mov	r4, r0
          break;
 80081d4:	e7e9      	b.n	80081aa <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 80081d6:	f7ff ff87 	bl	80080e8 <USBD_GetConfig>
          break;
 80081da:	e7e6      	b.n	80081aa <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 80081dc:	f7ff ffa4 	bl	8008128 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80081e0:	462c      	mov	r4, r5
          break;
 80081e2:	e7e2      	b.n	80081aa <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 80081e4:	f7ff fdf6 	bl	8007dd4 <USBD_SetFeature>
          break;
 80081e8:	e7df      	b.n	80081aa <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 80081ea:	f7ff ffb9 	bl	8008160 <USBD_ClrFeature>
          break;
 80081ee:	e7dc      	b.n	80081aa <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 80081f0:	f7ff fe0e 	bl	8007e10 <USBD_CtlError>
          break;
 80081f4:	e7d9      	b.n	80081aa <USBD_StdDevReq+0x24>

080081f6 <USBD_StdItfReq>:
{
 80081f6:	b570      	push	{r4, r5, r6, lr}
 80081f8:	4605      	mov	r5, r0
 80081fa:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081fc:	780b      	ldrb	r3, [r1, #0]
 80081fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008202:	2b20      	cmp	r3, #32
 8008204:	d007      	beq.n	8008216 <USBD_StdItfReq+0x20>
 8008206:	2b40      	cmp	r3, #64	; 0x40
 8008208:	d005      	beq.n	8008216 <USBD_StdItfReq+0x20>
 800820a:	b123      	cbz	r3, 8008216 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800820c:	f7ff fe00 	bl	8007e10 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008210:	2600      	movs	r6, #0
}
 8008212:	4630      	mov	r0, r6
 8008214:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8008216:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800821a:	3b01      	subs	r3, #1
 800821c:	2b02      	cmp	r3, #2
 800821e:	d818      	bhi.n	8008252 <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008220:	7923      	ldrb	r3, [r4, #4]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d80f      	bhi.n	8008246 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008226:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	4621      	mov	r1, r4
 800822e:	4628      	mov	r0, r5
 8008230:	4798      	blx	r3
 8008232:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008234:	88e3      	ldrh	r3, [r4, #6]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1eb      	bne.n	8008212 <USBD_StdItfReq+0x1c>
 800823a:	2800      	cmp	r0, #0
 800823c:	d1e9      	bne.n	8008212 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800823e:	4628      	mov	r0, r5
 8008240:	f000 f94c 	bl	80084dc <USBD_CtlSendStatus>
 8008244:	e7e5      	b.n	8008212 <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 8008246:	4621      	mov	r1, r4
 8008248:	4628      	mov	r0, r5
 800824a:	f7ff fde1 	bl	8007e10 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800824e:	2600      	movs	r6, #0
 8008250:	e7df      	b.n	8008212 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 8008252:	4621      	mov	r1, r4
 8008254:	4628      	mov	r0, r5
 8008256:	f7ff fddb 	bl	8007e10 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800825a:	2600      	movs	r6, #0
          break;
 800825c:	e7d9      	b.n	8008212 <USBD_StdItfReq+0x1c>

0800825e <USBD_StdEPReq>:
{
 800825e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008260:	4606      	mov	r6, r0
 8008262:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8008264:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008266:	780c      	ldrb	r4, [r1, #0]
 8008268:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800826c:	2c20      	cmp	r4, #32
 800826e:	d008      	beq.n	8008282 <USBD_StdEPReq+0x24>
 8008270:	b2d9      	uxtb	r1, r3
 8008272:	2c40      	cmp	r4, #64	; 0x40
 8008274:	d005      	beq.n	8008282 <USBD_StdEPReq+0x24>
 8008276:	b16c      	cbz	r4, 8008294 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 8008278:	4629      	mov	r1, r5
 800827a:	f7ff fdc9 	bl	8007e10 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800827e:	2400      	movs	r4, #0
      break;
 8008280:	e006      	b.n	8008290 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008282:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	4629      	mov	r1, r5
 800828a:	4630      	mov	r0, r6
 800828c:	4798      	blx	r3
 800828e:	4604      	mov	r4, r0
}
 8008290:	4620      	mov	r0, r4
 8008292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 8008294:	786f      	ldrb	r7, [r5, #1]
 8008296:	2f01      	cmp	r7, #1
 8008298:	d02f      	beq.n	80082fa <USBD_StdEPReq+0x9c>
 800829a:	2f03      	cmp	r7, #3
 800829c:	d005      	beq.n	80082aa <USBD_StdEPReq+0x4c>
 800829e:	2f00      	cmp	r7, #0
 80082a0:	d059      	beq.n	8008356 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 80082a2:	4629      	mov	r1, r5
 80082a4:	f7ff fdb4 	bl	8007e10 <USBD_CtlError>
          break;
 80082a8:	e7f2      	b.n	8008290 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80082aa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d005      	beq.n	80082c0 <USBD_StdEPReq+0x62>
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d012      	beq.n	80082de <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 80082b8:	4629      	mov	r1, r5
 80082ba:	f7ff fda9 	bl	8007e10 <USBD_CtlError>
              break;
 80082be:	e7e7      	b.n	8008290 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082c0:	b109      	cbz	r1, 80082c6 <USBD_StdEPReq+0x68>
 80082c2:	2980      	cmp	r1, #128	; 0x80
 80082c4:	d104      	bne.n	80082d0 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 80082c6:	4629      	mov	r1, r5
 80082c8:	4630      	mov	r0, r6
 80082ca:	f7ff fda1 	bl	8007e10 <USBD_CtlError>
 80082ce:	e7df      	b.n	8008290 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082d0:	f009 fa61 	bl	8011796 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082d4:	2180      	movs	r1, #128	; 0x80
 80082d6:	4630      	mov	r0, r6
 80082d8:	f009 fa5d 	bl	8011796 <USBD_LL_StallEP>
 80082dc:	e7d8      	b.n	8008290 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082de:	886b      	ldrh	r3, [r5, #2]
 80082e0:	b923      	cbnz	r3, 80082ec <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082e2:	b119      	cbz	r1, 80082ec <USBD_StdEPReq+0x8e>
 80082e4:	2980      	cmp	r1, #128	; 0x80
 80082e6:	d001      	beq.n	80082ec <USBD_StdEPReq+0x8e>
 80082e8:	88eb      	ldrh	r3, [r5, #6]
 80082ea:	b11b      	cbz	r3, 80082f4 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 80082ec:	4630      	mov	r0, r6
 80082ee:	f000 f8f5 	bl	80084dc <USBD_CtlSendStatus>
              break;
 80082f2:	e7cd      	b.n	8008290 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80082f4:	f009 fa4f 	bl	8011796 <USBD_LL_StallEP>
 80082f8:	e7f8      	b.n	80082ec <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 80082fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b02      	cmp	r3, #2
 8008302:	d005      	beq.n	8008310 <USBD_StdEPReq+0xb2>
 8008304:	2b03      	cmp	r3, #3
 8008306:	d012      	beq.n	800832e <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 8008308:	4629      	mov	r1, r5
 800830a:	f7ff fd81 	bl	8007e10 <USBD_CtlError>
              break;
 800830e:	e7bf      	b.n	8008290 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008310:	b109      	cbz	r1, 8008316 <USBD_StdEPReq+0xb8>
 8008312:	2980      	cmp	r1, #128	; 0x80
 8008314:	d104      	bne.n	8008320 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 8008316:	4629      	mov	r1, r5
 8008318:	4630      	mov	r0, r6
 800831a:	f7ff fd79 	bl	8007e10 <USBD_CtlError>
 800831e:	e7b7      	b.n	8008290 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008320:	f009 fa39 	bl	8011796 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008324:	2180      	movs	r1, #128	; 0x80
 8008326:	4630      	mov	r0, r6
 8008328:	f009 fa35 	bl	8011796 <USBD_LL_StallEP>
 800832c:	e7b0      	b.n	8008290 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800832e:	886b      	ldrh	r3, [r5, #2]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1ad      	bne.n	8008290 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8008334:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8008338:	d10a      	bne.n	8008350 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800833a:	4630      	mov	r0, r6
 800833c:	f000 f8ce 	bl	80084dc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008340:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	4629      	mov	r1, r5
 8008348:	4630      	mov	r0, r6
 800834a:	4798      	blx	r3
 800834c:	4604      	mov	r4, r0
 800834e:	e79f      	b.n	8008290 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008350:	f009 fa29 	bl	80117a6 <USBD_LL_ClearStallEP>
 8008354:	e7f1      	b.n	800833a <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 8008356:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800835a:	b2d2      	uxtb	r2, r2
 800835c:	2a02      	cmp	r2, #2
 800835e:	d006      	beq.n	800836e <USBD_StdEPReq+0x110>
 8008360:	2a03      	cmp	r2, #3
 8008362:	d029      	beq.n	80083b8 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 8008364:	4629      	mov	r1, r5
 8008366:	f7ff fd53 	bl	8007e10 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800836a:	463c      	mov	r4, r7
              break;
 800836c:	e790      	b.n	8008290 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800836e:	b109      	cbz	r1, 8008374 <USBD_StdEPReq+0x116>
 8008370:	2980      	cmp	r1, #128	; 0x80
 8008372:	d113      	bne.n	800839c <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008374:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008378:	d115      	bne.n	80083a6 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800837a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800837e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008382:	0089      	lsls	r1, r1, #2
 8008384:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8008388:	4431      	add	r1, r6
 800838a:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800838c:	2300      	movs	r3, #0
 800838e:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008390:	2202      	movs	r2, #2
 8008392:	4630      	mov	r0, r6
 8008394:	f000 f876 	bl	8008484 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8008398:	463c      	mov	r4, r7
              break;
 800839a:	e779      	b.n	8008290 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800839c:	4629      	mov	r1, r5
 800839e:	f7ff fd37 	bl	8007e10 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80083a2:	463c      	mov	r4, r7
                break;
 80083a4:	e774      	b.n	8008290 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083a6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80083aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80083ae:	0089      	lsls	r1, r1, #2
 80083b0:	3110      	adds	r1, #16
 80083b2:	4431      	add	r1, r6
 80083b4:	3104      	adds	r1, #4
 80083b6:	e7e9      	b.n	800838c <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 80083b8:	b25b      	sxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	db1f      	blt.n	80083fe <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083be:	f001 020f 	and.w	r2, r1, #15
 80083c2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80083c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80083ca:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 80083ce:	b322      	cbz	r2, 800841a <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	db27      	blt.n	8008424 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083d4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80083dc:	009c      	lsls	r4, r3, #2
 80083de:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 80083e2:	4434      	add	r4, r6
 80083e4:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80083e6:	b109      	cbz	r1, 80083ec <USBD_StdEPReq+0x18e>
 80083e8:	2980      	cmp	r1, #128	; 0x80
 80083ea:	d124      	bne.n	8008436 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083f0:	2202      	movs	r2, #2
 80083f2:	4621      	mov	r1, r4
 80083f4:	4630      	mov	r0, r6
 80083f6:	f000 f845 	bl	8008484 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80083fa:	463c      	mov	r4, r7
              break;
 80083fc:	e748      	b.n	8008290 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083fe:	f001 020f 	and.w	r2, r1, #15
 8008402:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008406:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800840a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800840c:	2a00      	cmp	r2, #0
 800840e:	d1df      	bne.n	80083d0 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 8008410:	4629      	mov	r1, r5
 8008412:	f7ff fcfd 	bl	8007e10 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008416:	463c      	mov	r4, r7
                  break;
 8008418:	e73a      	b.n	8008290 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800841a:	4629      	mov	r1, r5
 800841c:	f7ff fcf8 	bl	8007e10 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008420:	463c      	mov	r4, r7
                  break;
 8008422:	e735      	b.n	8008290 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008424:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8008428:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800842c:	009c      	lsls	r4, r3, #2
 800842e:	3410      	adds	r4, #16
 8008430:	4434      	add	r4, r6
 8008432:	3404      	adds	r4, #4
 8008434:	e7d7      	b.n	80083e6 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008436:	4630      	mov	r0, r6
 8008438:	f009 f9bd 	bl	80117b6 <USBD_LL_IsStallEP>
 800843c:	b110      	cbz	r0, 8008444 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800843e:	2301      	movs	r3, #1
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	e7d5      	b.n	80083f0 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 8008444:	2300      	movs	r3, #0
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	e7d2      	b.n	80083f0 <USBD_StdEPReq+0x192>

0800844a <USBD_GetString>:
  if (desc == NULL)
 800844a:	b1d0      	cbz	r0, 8008482 <USBD_GetString+0x38>
{
 800844c:	b570      	push	{r4, r5, r6, lr}
 800844e:	460d      	mov	r5, r1
 8008450:	4616      	mov	r6, r2
 8008452:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008454:	f7ff fcb4 	bl	8007dc0 <USBD_GetLen>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	b29b      	uxth	r3, r3
 800845e:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8008460:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008462:	2303      	movs	r3, #3
 8008464:	706b      	strb	r3, [r5, #1]
  idx++;
 8008466:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8008468:	e007      	b.n	800847a <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 800846a:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800846c:	3401      	adds	r4, #1
    idx++;
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8008472:	2100      	movs	r1, #0
 8008474:	54a9      	strb	r1, [r5, r2]
    idx++;
 8008476:	3302      	adds	r3, #2
 8008478:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800847a:	7822      	ldrb	r2, [r4, #0]
 800847c:	2a00      	cmp	r2, #0
 800847e:	d1f4      	bne.n	800846a <USBD_GetString+0x20>
}
 8008480:	bd70      	pop	{r4, r5, r6, pc}
 8008482:	4770      	bx	lr

08008484 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008484:	b508      	push	{r3, lr}
 8008486:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008488:	2202      	movs	r2, #2
 800848a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800848e:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008490:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008492:	460a      	mov	r2, r1
 8008494:	2100      	movs	r1, #0
 8008496:	f009 f9ad 	bl	80117f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800849a:	2000      	movs	r0, #0
 800849c:	bd08      	pop	{r3, pc}

0800849e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800849e:	b508      	push	{r3, lr}
 80084a0:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084a2:	460a      	mov	r2, r1
 80084a4:	2100      	movs	r1, #0
 80084a6:	f009 f9a5 	bl	80117f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80084aa:	2000      	movs	r0, #0
 80084ac:	bd08      	pop	{r3, pc}

080084ae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084ae:	b508      	push	{r3, lr}
 80084b0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084b2:	2203      	movs	r2, #3
 80084b4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084b8:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084bc:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084c0:	460a      	mov	r2, r1
 80084c2:	2100      	movs	r1, #0
 80084c4:	f009 f99e 	bl	8011804 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80084c8:	2000      	movs	r0, #0
 80084ca:	bd08      	pop	{r3, pc}

080084cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084cc:	b508      	push	{r3, lr}
 80084ce:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084d0:	460a      	mov	r2, r1
 80084d2:	2100      	movs	r1, #0
 80084d4:	f009 f996 	bl	8011804 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80084d8:	2000      	movs	r0, #0
 80084da:	bd08      	pop	{r3, pc}

080084dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084dc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084de:	2204      	movs	r2, #4
 80084e0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084e4:	2300      	movs	r3, #0
 80084e6:	461a      	mov	r2, r3
 80084e8:	4619      	mov	r1, r3
 80084ea:	f009 f983 	bl	80117f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80084ee:	2000      	movs	r0, #0
 80084f0:	bd08      	pop	{r3, pc}

080084f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084f2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084f4:	2205      	movs	r2, #5
 80084f6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084fa:	2300      	movs	r3, #0
 80084fc:	461a      	mov	r2, r3
 80084fe:	4619      	mov	r1, r3
 8008500:	f009 f980 	bl	8011804 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008504:	2000      	movs	r0, #0
 8008506:	bd08      	pop	{r3, pc}

08008508 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8008508:	2884      	cmp	r0, #132	; 0x84
 800850a:	d001      	beq.n	8008510 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 800850c:	3003      	adds	r0, #3
 800850e:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008510:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8008512:	4770      	bx	lr

08008514 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008514:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8008516:	f000 fee3 	bl	80092e0 <vTaskStartScheduler>
  
  return osOK;
}
 800851a:	2000      	movs	r0, #0
 800851c:	bd08      	pop	{r3, pc}

0800851e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800851e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008520:	b085      	sub	sp, #20
 8008522:	460c      	mov	r4, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008524:	6845      	ldr	r5, [r0, #4]
 8008526:	6806      	ldr	r6, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008528:	6907      	ldr	r7, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800852a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800852e:	f7ff ffeb 	bl	8008508 <makeFreeRtosPriority>
 8008532:	ab03      	add	r3, sp, #12
 8008534:	9301      	str	r3, [sp, #4]
 8008536:	9000      	str	r0, [sp, #0]
 8008538:	4623      	mov	r3, r4
 800853a:	b2ba      	uxth	r2, r7
 800853c:	4631      	mov	r1, r6
 800853e:	4628      	mov	r0, r5
 8008540:	f000 fe9c 	bl	800927c <xTaskCreate>
 8008544:	2801      	cmp	r0, #1
 8008546:	d102      	bne.n	800854e <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008548:	9803      	ldr	r0, [sp, #12]
}
 800854a:	b005      	add	sp, #20
 800854c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 800854e:	2000      	movs	r0, #0
 8008550:	e7fb      	b.n	800854a <osThreadCreate+0x2c>

08008552 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008552:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008554:	b900      	cbnz	r0, 8008558 <osDelay+0x6>
 8008556:	2001      	movs	r0, #1
 8008558:	f001 f83e 	bl	80095d8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800855c:	2000      	movs	r0, #0
 800855e:	bd08      	pop	{r3, pc}

08008560 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8008560:	b500      	push	{lr}
 8008562:	b083      	sub	sp, #12
 8008564:	4613      	mov	r3, r2
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 8008566:	2901      	cmp	r1, #1
 8008568:	d009      	beq.n	800857e <osTimerCreate+0x1e>
 800856a:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800856c:	6801      	ldr	r1, [r0, #0]
  return xTimerCreate((const char *)"",
 800856e:	9100      	str	r1, [sp, #0]
 8008570:	2101      	movs	r1, #1
 8008572:	4804      	ldr	r0, [pc, #16]	; (8008584 <osTimerCreate+0x24>)
 8008574:	f001 fb44 	bl	8009c00 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 8008578:	b003      	add	sp, #12
 800857a:	f85d fb04 	ldr.w	pc, [sp], #4
  return xTimerCreate((const char *)"",
 800857e:	2201      	movs	r2, #1
 8008580:	e7f4      	b.n	800856c <osTimerCreate+0xc>
 8008582:	bf00      	nop
 8008584:	08013548 	.word	0x08013548

08008588 <prvTestWaitCondition>:

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8008588:	b91a      	cbnz	r2, 8008592 <prvTestWaitCondition+0xa>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800858a:	4208      	tst	r0, r1
 800858c:	d105      	bne.n	800859a <prvTestWaitCondition+0x12>
BaseType_t xWaitConditionMet = pdFALSE;
 800858e:	4610      	mov	r0, r2
 8008590:	4770      	bx	lr
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008592:	4381      	bics	r1, r0
 8008594:	d003      	beq.n	800859e <prvTestWaitCondition+0x16>
BaseType_t xWaitConditionMet = pdFALSE;
 8008596:	2000      	movs	r0, #0
 8008598:	4770      	bx	lr
			xWaitConditionMet = pdTRUE;
 800859a:	2001      	movs	r0, #1
 800859c:	4770      	bx	lr
		{
			xWaitConditionMet = pdTRUE;
 800859e:	2001      	movs	r0, #1
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
 80085a0:	4770      	bx	lr

080085a2 <xEventGroupCreate>:
	{
 80085a2:	b510      	push	{r4, lr}
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80085a4:	201c      	movs	r0, #28
 80085a6:	f001 ff0d 	bl	800a3c4 <pvPortMalloc>
		if( pxEventBits != NULL )
 80085aa:	4604      	mov	r4, r0
 80085ac:	b120      	cbz	r0, 80085b8 <xEventGroupCreate+0x16>
			pxEventBits->uxEventBits = 0;
 80085ae:	2300      	movs	r3, #0
 80085b0:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80085b4:	f000 f8da 	bl	800876c <vListInitialise>
	}
 80085b8:	4620      	mov	r0, r4
 80085ba:	bd10      	pop	{r4, pc}

080085bc <xEventGroupWaitBits>:
{
 80085bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 80085c0:	b178      	cbz	r0, 80085e2 <xEventGroupWaitBits+0x26>
 80085c2:	460c      	mov	r4, r1
 80085c4:	4616      	mov	r6, r2
 80085c6:	461d      	mov	r5, r3
 80085c8:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80085ca:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 80085ce:	d011      	beq.n	80085f4 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	e7fe      	b.n	80085e0 <xEventGroupWaitBits+0x24>
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80085f2:	e7fe      	b.n	80085f2 <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 80085f4:	b941      	cbnz	r1, 8008608 <xEventGroupWaitBits+0x4c>
 80085f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	e7fe      	b.n	8008606 <xEventGroupWaitBits+0x4a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008608:	f001 f9ce 	bl	80099a8 <xTaskGetSchedulerState>
 800860c:	b950      	cbnz	r0, 8008624 <xEventGroupWaitBits+0x68>
 800860e:	9b08      	ldr	r3, [sp, #32]
 8008610:	b143      	cbz	r3, 8008624 <xEventGroupWaitBits+0x68>
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	e7fe      	b.n	8008622 <xEventGroupWaitBits+0x66>
	vTaskSuspendAll();
 8008624:	f000 feb4 	bl	8009390 <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008628:	f8d7 9000 	ldr.w	r9, [r7]
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800862c:	462a      	mov	r2, r5
 800862e:	4621      	mov	r1, r4
 8008630:	4648      	mov	r0, r9
 8008632:	f7ff ffa9 	bl	8008588 <prvTestWaitCondition>
		if( xWaitConditionMet != pdFALSE )
 8008636:	b1f0      	cbz	r0, 8008676 <xEventGroupWaitBits+0xba>
			if( xClearOnExit != pdFALSE )
 8008638:	b116      	cbz	r6, 8008640 <xEventGroupWaitBits+0x84>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800863a:	ea29 0304 	bic.w	r3, r9, r4
 800863e:	603b      	str	r3, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 8008640:	f000 ff4c 	bl	80094dc <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8008644:	f1b8 0f00 	cmp.w	r8, #0
 8008648:	d012      	beq.n	8008670 <xEventGroupWaitBits+0xb4>
		if( xAlreadyYielded == pdFALSE )
 800864a:	b948      	cbnz	r0, 8008660 <xEventGroupWaitBits+0xa4>
			portYIELD_WITHIN_API();
 800864c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008654:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8008660:	f001 fa12 	bl	8009a88 <uxTaskResetEventItemValue>
 8008664:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8008666:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800866a:	d01a      	beq.n	80086a2 <xEventGroupWaitBits+0xe6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800866c:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
 8008670:	4648      	mov	r0, r9
 8008672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008676:	9b08      	ldr	r3, [sp, #32]
 8008678:	b183      	cbz	r3, 800869c <xEventGroupWaitBits+0xe0>
			if( xClearOnExit != pdFALSE )
 800867a:	b966      	cbnz	r6, 8008696 <xEventGroupWaitBits+0xda>
EventBits_t uxReturn, uxControlBits = 0;
 800867c:	4641      	mov	r1, r8
			if( xWaitForAllBits != pdFALSE )
 800867e:	b10d      	cbz	r5, 8008684 <xEventGroupWaitBits+0xc8>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008680:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008684:	9a08      	ldr	r2, [sp, #32]
 8008686:	4321      	orrs	r1, r4
 8008688:	1d38      	adds	r0, r7, #4
 800868a:	f001 f85d 	bl	8009748 <vTaskPlaceOnUnorderedEventList>
			uxReturn = 0;
 800868e:	46c1      	mov	r9, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008694:	e7d4      	b.n	8008640 <xEventGroupWaitBits+0x84>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8008696:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800869a:	e7f0      	b.n	800867e <xEventGroupWaitBits+0xc2>
 800869c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086a0:	e7ce      	b.n	8008640 <xEventGroupWaitBits+0x84>
			taskENTER_CRITICAL();
 80086a2:	f001 fcd7 	bl	800a054 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 80086a6:	f8d7 9000 	ldr.w	r9, [r7]
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80086aa:	462a      	mov	r2, r5
 80086ac:	4621      	mov	r1, r4
 80086ae:	4648      	mov	r0, r9
 80086b0:	f7ff ff6a 	bl	8008588 <prvTestWaitCondition>
 80086b4:	b118      	cbz	r0, 80086be <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 80086b6:	b116      	cbz	r6, 80086be <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80086b8:	ea29 0404 	bic.w	r4, r9, r4
 80086bc:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 80086be:	f001 fceb 	bl	800a098 <vPortExitCritical>
 80086c2:	e7d3      	b.n	800866c <xEventGroupWaitBits+0xb0>

080086c4 <xEventGroupSetBits>:
{
 80086c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( xEventGroup );
 80086c6:	b168      	cbz	r0, 80086e4 <xEventGroupSetBits+0x20>
 80086c8:	460d      	mov	r5, r1
 80086ca:	4604      	mov	r4, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80086cc:	f011 477f 	ands.w	r7, r1, #4278190080	; 0xff000000
 80086d0:	d011      	beq.n	80086f6 <xEventGroupSetBits+0x32>
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	e7fe      	b.n	80086e2 <xEventGroupSetBits+0x1e>
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80086f4:	e7fe      	b.n	80086f4 <xEventGroupSetBits+0x30>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086f6:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 80086fa:	f000 fe49 	bl	8009390 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 80086fe:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	432b      	orrs	r3, r5
 8008704:	6023      	str	r3, [r4, #0]
		while( pxListItem != pxListEnd )
 8008706:	e00a      	b.n	800871e <xEventGroupSetBits+0x5a>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008708:	6821      	ldr	r1, [r4, #0]
 800870a:	ea32 0101 	bics.w	r1, r2, r1
 800870e:	d105      	bne.n	800871c <xEventGroupSetBits+0x58>
 8008710:	e011      	b.n	8008736 <xEventGroupSetBits+0x72>
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008712:	6821      	ldr	r1, [r4, #0]
 8008714:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8008718:	f001 f8aa 	bl	8009870 <vTaskRemoveFromUnorderedEventList>
{
 800871c:	4628      	mov	r0, r5
		while( pxListItem != pxListEnd )
 800871e:	42b0      	cmp	r0, r6
 8008720:	d00e      	beq.n	8008740 <xEventGroupSetBits+0x7c>
			pxNext = listGET_NEXT( pxListItem );
 8008722:	6845      	ldr	r5, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008724:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008726:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800872a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800872e:	d1eb      	bne.n	8008708 <xEventGroupSetBits+0x44>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008730:	6821      	ldr	r1, [r4, #0]
 8008732:	4211      	tst	r1, r2
 8008734:	d0f2      	beq.n	800871c <xEventGroupSetBits+0x58>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008736:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800873a:	d0ea      	beq.n	8008712 <xEventGroupSetBits+0x4e>
					uxBitsToClear |= uxBitsWaitedFor;
 800873c:	4317      	orrs	r7, r2
 800873e:	e7e8      	b.n	8008712 <xEventGroupSetBits+0x4e>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	ea23 0307 	bic.w	r3, r3, r7
 8008746:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8008748:	f000 fec8 	bl	80094dc <xTaskResumeAll>
}
 800874c:	6820      	ldr	r0, [r4, #0]
 800874e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008750 <vEventGroupSetBitsCallback>:
{
 8008750:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008752:	f7ff ffb7 	bl	80086c4 <xEventGroupSetBits>
}
 8008756:	bd08      	pop	{r3, pc}

08008758 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008758:	b508      	push	{r3, lr}
 800875a:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800875c:	460a      	mov	r2, r1
 800875e:	4601      	mov	r1, r0
 8008760:	4801      	ldr	r0, [pc, #4]	; (8008768 <xEventGroupSetBitsFromISR+0x10>)
 8008762:	f001 fbf7 	bl	8009f54 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 8008766:	bd08      	pop	{r3, pc}
 8008768:	08008751 	.word	0x08008751

0800876c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800876c:	f100 0308 	add.w	r3, r0, #8
 8008770:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008776:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008778:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800877a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008780:	4770      	bx	lr

08008782 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008782:	2300      	movs	r3, #0
 8008784:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008786:	4770      	bx	lr

08008788 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008788:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800878a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800878c:	689a      	ldr	r2, [r3, #8]
 800878e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008790:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008792:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008794:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008796:	6803      	ldr	r3, [r0, #0]
 8008798:	3301      	adds	r3, #1
 800879a:	6003      	str	r3, [r0, #0]
}
 800879c:	4770      	bx	lr

0800879e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800879e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80087a0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80087a2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80087a6:	d011      	beq.n	80087cc <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80087a8:	f100 0308 	add.w	r3, r0, #8
 80087ac:	461c      	mov	r4, r3
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	42aa      	cmp	r2, r5
 80087b4:	d9fa      	bls.n	80087ac <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80087b6:	6863      	ldr	r3, [r4, #4]
 80087b8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80087ba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80087bc:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80087be:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80087c0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80087c2:	6803      	ldr	r3, [r0, #0]
 80087c4:	3301      	adds	r3, #1
 80087c6:	6003      	str	r3, [r0, #0]
}
 80087c8:	bc30      	pop	{r4, r5}
 80087ca:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80087cc:	6904      	ldr	r4, [r0, #16]
 80087ce:	e7f2      	b.n	80087b6 <vListInsert+0x18>

080087d0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80087d0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087d2:	6841      	ldr	r1, [r0, #4]
 80087d4:	6882      	ldr	r2, [r0, #8]
 80087d6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80087d8:	6841      	ldr	r1, [r0, #4]
 80087da:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	4282      	cmp	r2, r0
 80087e0:	d006      	beq.n	80087f0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80087e2:	2200      	movs	r2, #0
 80087e4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	3a01      	subs	r2, #1
 80087ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087ec:	6818      	ldr	r0, [r3, #0]
}
 80087ee:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80087f0:	6882      	ldr	r2, [r0, #8]
 80087f2:	605a      	str	r2, [r3, #4]
 80087f4:	e7f5      	b.n	80087e2 <uxListRemove+0x12>

080087f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087f6:	b510      	push	{r4, lr}
 80087f8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087fa:	f001 fc2b 	bl	800a054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008800:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008802:	429a      	cmp	r2, r3
 8008804:	d004      	beq.n	8008810 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8008806:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8008808:	f001 fc46 	bl	800a098 <vPortExitCritical>

	return xReturn;
}
 800880c:	4620      	mov	r0, r4
 800880e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008810:	2401      	movs	r4, #1
 8008812:	e7f9      	b.n	8008808 <prvIsQueueFull+0x12>

08008814 <prvIsQueueEmpty>:
{
 8008814:	b510      	push	{r4, lr}
 8008816:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008818:	f001 fc1c 	bl	800a054 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800881c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800881e:	b923      	cbnz	r3, 800882a <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8008820:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8008822:	f001 fc39 	bl	800a098 <vPortExitCritical>
}
 8008826:	4620      	mov	r0, r4
 8008828:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800882a:	2400      	movs	r4, #0
 800882c:	e7f9      	b.n	8008822 <prvIsQueueEmpty+0xe>

0800882e <prvCopyDataToQueue>:
{
 800882e:	b570      	push	{r4, r5, r6, lr}
 8008830:	4604      	mov	r4, r0
 8008832:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008834:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008836:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008838:	b95a      	cbnz	r2, 8008852 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800883a:	6803      	ldr	r3, [r0, #0]
 800883c:	b11b      	cbz	r3, 8008846 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800883e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008840:	3601      	adds	r6, #1
 8008842:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008844:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008846:	6880      	ldr	r0, [r0, #8]
 8008848:	f001 f8be 	bl	80099c8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800884c:	2300      	movs	r3, #0
 800884e:	60a3      	str	r3, [r4, #8]
 8008850:	e7f6      	b.n	8008840 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008852:	b96d      	cbnz	r5, 8008870 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008854:	6840      	ldr	r0, [r0, #4]
 8008856:	f009 fb07 	bl	8011e68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800885a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800885c:	6863      	ldr	r3, [r4, #4]
 800885e:	4413      	add	r3, r2
 8008860:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008862:	68a2      	ldr	r2, [r4, #8]
 8008864:	4293      	cmp	r3, r2
 8008866:	d319      	bcc.n	800889c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800886c:	4628      	mov	r0, r5
 800886e:	e7e7      	b.n	8008840 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008870:	68c0      	ldr	r0, [r0, #12]
 8008872:	f009 faf9 	bl	8011e68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008876:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008878:	4251      	negs	r1, r2
 800887a:	68e3      	ldr	r3, [r4, #12]
 800887c:	1a9b      	subs	r3, r3, r2
 800887e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008880:	6822      	ldr	r2, [r4, #0]
 8008882:	4293      	cmp	r3, r2
 8008884:	d202      	bcs.n	800888c <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008886:	68a3      	ldr	r3, [r4, #8]
 8008888:	440b      	add	r3, r1
 800888a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800888c:	2d02      	cmp	r5, #2
 800888e:	d001      	beq.n	8008894 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008890:	2000      	movs	r0, #0
 8008892:	e7d5      	b.n	8008840 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008894:	b126      	cbz	r6, 80088a0 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8008896:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8008898:	2000      	movs	r0, #0
 800889a:	e7d1      	b.n	8008840 <prvCopyDataToQueue+0x12>
 800889c:	4628      	mov	r0, r5
 800889e:	e7cf      	b.n	8008840 <prvCopyDataToQueue+0x12>
 80088a0:	2000      	movs	r0, #0
 80088a2:	e7cd      	b.n	8008840 <prvCopyDataToQueue+0x12>

080088a4 <prvCopyDataFromQueue>:
{
 80088a4:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088a6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80088a8:	b16a      	cbz	r2, 80088c6 <prvCopyDataFromQueue+0x22>
{
 80088aa:	b510      	push	{r4, lr}
 80088ac:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088ae:	68d9      	ldr	r1, [r3, #12]
 80088b0:	4411      	add	r1, r2
 80088b2:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80088b4:	689c      	ldr	r4, [r3, #8]
 80088b6:	42a1      	cmp	r1, r4
 80088b8:	d301      	bcc.n	80088be <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088ba:	6819      	ldr	r1, [r3, #0]
 80088bc:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088be:	68d9      	ldr	r1, [r3, #12]
 80088c0:	f009 fad2 	bl	8011e68 <memcpy>
}
 80088c4:	bd10      	pop	{r4, pc}
 80088c6:	4770      	bx	lr

080088c8 <prvUnlockQueue>:
{
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80088cc:	f001 fbc2 	bl	800a054 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80088d0:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80088d4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088d6:	e001      	b.n	80088dc <prvUnlockQueue+0x14>
			--cTxLock;
 80088d8:	3c01      	subs	r4, #1
 80088da:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088dc:	2c00      	cmp	r4, #0
 80088de:	dd0a      	ble.n	80088f6 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088e2:	b143      	cbz	r3, 80088f6 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088e4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80088e8:	f000 ff7a 	bl	80097e0 <xTaskRemoveFromEventList>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d0f3      	beq.n	80088d8 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80088f0:	f001 f854 	bl	800999c <vTaskMissedYield>
 80088f4:	e7f0      	b.n	80088d8 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80088f6:	23ff      	movs	r3, #255	; 0xff
 80088f8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80088fc:	f001 fbcc 	bl	800a098 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008900:	f001 fba8 	bl	800a054 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008904:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8008908:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800890a:	e001      	b.n	8008910 <prvUnlockQueue+0x48>
				--cRxLock;
 800890c:	3c01      	subs	r4, #1
 800890e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008910:	2c00      	cmp	r4, #0
 8008912:	dd0a      	ble.n	800892a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008914:	692b      	ldr	r3, [r5, #16]
 8008916:	b143      	cbz	r3, 800892a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008918:	f105 0010 	add.w	r0, r5, #16
 800891c:	f000 ff60 	bl	80097e0 <xTaskRemoveFromEventList>
 8008920:	2800      	cmp	r0, #0
 8008922:	d0f3      	beq.n	800890c <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8008924:	f001 f83a 	bl	800999c <vTaskMissedYield>
 8008928:	e7f0      	b.n	800890c <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800892a:	23ff      	movs	r3, #255	; 0xff
 800892c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008930:	f001 fbb2 	bl	800a098 <vPortExitCritical>
}
 8008934:	bd38      	pop	{r3, r4, r5, pc}

08008936 <xQueueGenericReset>:
{
 8008936:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8008938:	b1e0      	cbz	r0, 8008974 <xQueueGenericReset+0x3e>
 800893a:	460d      	mov	r5, r1
 800893c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800893e:	f001 fb89 	bl	800a054 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008946:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008948:	fb01 3002 	mla	r0, r1, r2, r3
 800894c:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800894e:	2000      	movs	r0, #0
 8008950:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008952:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008954:	3a01      	subs	r2, #1
 8008956:	fb02 3301 	mla	r3, r2, r1, r3
 800895a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800895c:	23ff      	movs	r3, #255	; 0xff
 800895e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008962:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008966:	b9fd      	cbnz	r5, 80089a8 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	b963      	cbnz	r3, 8008986 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800896c:	f001 fb94 	bl	800a098 <vPortExitCritical>
}
 8008970:	2001      	movs	r0, #1
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008984:	e7fe      	b.n	8008984 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008986:	f104 0010 	add.w	r0, r4, #16
 800898a:	f000 ff29 	bl	80097e0 <xTaskRemoveFromEventList>
 800898e:	2800      	cmp	r0, #0
 8008990:	d0ec      	beq.n	800896c <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8008992:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	e7e1      	b.n	800896c <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089a8:	f104 0010 	add.w	r0, r4, #16
 80089ac:	f7ff fede 	bl	800876c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80089b4:	f7ff feda 	bl	800876c <vListInitialise>
 80089b8:	e7d8      	b.n	800896c <xQueueGenericReset+0x36>

080089ba <prvInitialiseNewQueue>:
{
 80089ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089bc:	4605      	mov	r5, r0
 80089be:	461e      	mov	r6, r3
 80089c0:	9c06      	ldr	r4, [sp, #24]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80089c2:	460f      	mov	r7, r1
 80089c4:	b979      	cbnz	r1, 80089e6 <prvInitialiseNewQueue+0x2c>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80089c6:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80089c8:	63e5      	str	r5, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80089ca:	6427      	str	r7, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80089cc:	2101      	movs	r1, #1
 80089ce:	4620      	mov	r0, r4
 80089d0:	f7ff ffb1 	bl	8008936 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80089d4:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
	traceQUEUE_CREATE( pxNewQueue );
 80089d8:	4633      	mov	r3, r6
 80089da:	463a      	mov	r2, r7
 80089dc:	4629      	mov	r1, r5
 80089de:	2073      	movs	r0, #115	; 0x73
 80089e0:	f008 faa4 	bl	8010f2c <SEGGER_SYSVIEW_RecordU32x3>
}
 80089e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80089e6:	6022      	str	r2, [r4, #0]
 80089e8:	e7ee      	b.n	80089c8 <prvInitialiseNewQueue+0xe>

080089ea <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80089ea:	b940      	cbnz	r0, 80089fe <xQueueGenericCreate+0x14>
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	e7fe      	b.n	80089fc <xQueueGenericCreate+0x12>
	{
 80089fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a00:	b083      	sub	sp, #12
 8008a02:	460c      	mov	r4, r1
 8008a04:	4615      	mov	r5, r2
 8008a06:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a08:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a0c:	3050      	adds	r0, #80	; 0x50
 8008a0e:	f001 fcd9 	bl	800a3c4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008a12:	4607      	mov	r7, r0
 8008a14:	b138      	cbz	r0, 8008a26 <xQueueGenericCreate+0x3c>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a16:	9000      	str	r0, [sp, #0]
 8008a18:	462b      	mov	r3, r5
 8008a1a:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4630      	mov	r0, r6
 8008a22:	f7ff ffca 	bl	80089ba <prvInitialiseNewQueue>
	}
 8008a26:	4638      	mov	r0, r7
 8008a28:	b003      	add	sp, #12
 8008a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a2c <xQueueGenericSend>:
{
 8008a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	9203      	str	r2, [sp, #12]
	configASSERT( pxQueue );
 8008a32:	b188      	cbz	r0, 8008a58 <xQueueGenericSend+0x2c>
 8008a34:	460e      	mov	r6, r1
 8008a36:	461d      	mov	r5, r3
 8008a38:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a3a:	b1b1      	cbz	r1, 8008a6a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a3c:	2d02      	cmp	r5, #2
 8008a3e:	d120      	bne.n	8008a82 <xQueueGenericSend+0x56>
 8008a40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d01d      	beq.n	8008a82 <xQueueGenericSend+0x56>
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	e7fe      	b.n	8008a56 <xQueueGenericSend+0x2a>
 8008a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008a68:	e7fe      	b.n	8008a68 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0e5      	beq.n	8008a3c <xQueueGenericSend+0x10>
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	e7fe      	b.n	8008a80 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a82:	f000 ff91 	bl	80099a8 <xTaskGetSchedulerState>
 8008a86:	4607      	mov	r7, r0
 8008a88:	b958      	cbnz	r0, 8008aa2 <xQueueGenericSend+0x76>
 8008a8a:	9b03      	ldr	r3, [sp, #12]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d05c      	beq.n	8008b4a <xQueueGenericSend+0x11e>
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	e7fe      	b.n	8008aa0 <xQueueGenericSend+0x74>
 8008aa2:	2700      	movs	r7, #0
 8008aa4:	e051      	b.n	8008b4a <xQueueGenericSend+0x11e>
				traceQUEUE_SEND( pxQueue );
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f008 f824 	bl	8010af4 <SEGGER_SYSVIEW_ShrinkId>
 8008aac:	4601      	mov	r1, r0
 8008aae:	9500      	str	r5, [sp, #0]
 8008ab0:	9b03      	ldr	r3, [sp, #12]
 8008ab2:	4632      	mov	r2, r6
 8008ab4:	205a      	movs	r0, #90	; 0x5a
 8008ab6:	f008 fa73 	bl	8010fa0 <SEGGER_SYSVIEW_RecordU32x4>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008aba:	462a      	mov	r2, r5
 8008abc:	4631      	mov	r1, r6
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f7ff feb5 	bl	800882e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ac6:	b97b      	cbnz	r3, 8008ae8 <xQueueGenericSend+0xbc>
					else if( xYieldRequired != pdFALSE )
 8008ac8:	b148      	cbz	r0, 8008ade <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8008aca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ad2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008ade:	f001 fadb 	bl	800a098 <vPortExitCritical>
				return pdPASS;
 8008ae2:	2001      	movs	r0, #1
}
 8008ae4:	b007      	add	sp, #28
 8008ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ae8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008aec:	f000 fe78 	bl	80097e0 <xTaskRemoveFromEventList>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	d0f4      	beq.n	8008ade <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
 8008af4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008afc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	e7e9      	b.n	8008ade <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
 8008b0a:	f001 fac5 	bl	800a098 <vPortExitCritical>
					traceQUEUE_SEND_FAILED( pxQueue );
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f007 fff0 	bl	8010af4 <SEGGER_SYSVIEW_ShrinkId>
 8008b14:	4601      	mov	r1, r0
 8008b16:	9500      	str	r5, [sp, #0]
 8008b18:	9b03      	ldr	r3, [sp, #12]
 8008b1a:	4632      	mov	r2, r6
 8008b1c:	205a      	movs	r0, #90	; 0x5a
 8008b1e:	f008 fa3f 	bl	8010fa0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8008b22:	2000      	movs	r0, #0
 8008b24:	e7de      	b.n	8008ae4 <xQueueGenericSend+0xb8>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b26:	a804      	add	r0, sp, #16
 8008b28:	f000 feea 	bl	8009900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b2c:	2701      	movs	r7, #1
 8008b2e:	e019      	b.n	8008b64 <xQueueGenericSend+0x138>
		prvLockQueue( pxQueue );
 8008b30:	2300      	movs	r3, #0
 8008b32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008b36:	e021      	b.n	8008b7c <xQueueGenericSend+0x150>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b3e:	e023      	b.n	8008b88 <xQueueGenericSend+0x15c>
				prvUnlockQueue( pxQueue );
 8008b40:	4620      	mov	r0, r4
 8008b42:	f7ff fec1 	bl	80088c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b46:	f000 fcc9 	bl	80094dc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008b4a:	f001 fa83 	bl	800a054 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008b50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d3a7      	bcc.n	8008aa6 <xQueueGenericSend+0x7a>
 8008b56:	2d02      	cmp	r5, #2
 8008b58:	d0a5      	beq.n	8008aa6 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b5a:	9b03      	ldr	r3, [sp, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d0d4      	beq.n	8008b0a <xQueueGenericSend+0xde>
				else if( xEntryTimeSet == pdFALSE )
 8008b60:	2f00      	cmp	r7, #0
 8008b62:	d0e0      	beq.n	8008b26 <xQueueGenericSend+0xfa>
		taskEXIT_CRITICAL();
 8008b64:	f001 fa98 	bl	800a098 <vPortExitCritical>
		vTaskSuspendAll();
 8008b68:	f000 fc12 	bl	8009390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b6c:	f001 fa72 	bl	800a054 <vPortEnterCritical>
 8008b70:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8008b74:	b252      	sxtb	r2, r2
 8008b76:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008b7a:	d0d9      	beq.n	8008b30 <xQueueGenericSend+0x104>
 8008b7c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8008b80:	b252      	sxtb	r2, r2
 8008b82:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008b86:	d0d7      	beq.n	8008b38 <xQueueGenericSend+0x10c>
 8008b88:	f001 fa86 	bl	800a098 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b8c:	a903      	add	r1, sp, #12
 8008b8e:	a804      	add	r0, sp, #16
 8008b90:	f000 fec2 	bl	8009918 <xTaskCheckForTimeOut>
 8008b94:	b9d8      	cbnz	r0, 8008bce <xQueueGenericSend+0x1a2>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b96:	4620      	mov	r0, r4
 8008b98:	f7ff fe2d 	bl	80087f6 <prvIsQueueFull>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d0cf      	beq.n	8008b40 <xQueueGenericSend+0x114>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ba0:	9903      	ldr	r1, [sp, #12]
 8008ba2:	f104 0010 	add.w	r0, r4, #16
 8008ba6:	f000 fdb7 	bl	8009718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008baa:	4620      	mov	r0, r4
 8008bac:	f7ff fe8c 	bl	80088c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bb0:	f000 fc94 	bl	80094dc <xTaskResumeAll>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d1c8      	bne.n	8008b4a <xQueueGenericSend+0x11e>
					portYIELD_WITHIN_API();
 8008bb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	e7bd      	b.n	8008b4a <xQueueGenericSend+0x11e>
			prvUnlockQueue( pxQueue );
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f7ff fe7a 	bl	80088c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bd4:	f000 fc82 	bl	80094dc <xTaskResumeAll>
			traceQUEUE_SEND_FAILED( pxQueue );
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f007 ff8b 	bl	8010af4 <SEGGER_SYSVIEW_ShrinkId>
 8008bde:	4601      	mov	r1, r0
 8008be0:	9500      	str	r5, [sp, #0]
 8008be2:	9b03      	ldr	r3, [sp, #12]
 8008be4:	4632      	mov	r2, r6
 8008be6:	205a      	movs	r0, #90	; 0x5a
 8008be8:	f008 f9da 	bl	8010fa0 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8008bec:	2000      	movs	r0, #0
 8008bee:	e779      	b.n	8008ae4 <xQueueGenericSend+0xb8>

08008bf0 <xQueueGenericSendFromISR>:
{
 8008bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008bf4:	b190      	cbz	r0, 8008c1c <xQueueGenericSendFromISR+0x2c>
 8008bf6:	460f      	mov	r7, r1
 8008bf8:	4616      	mov	r6, r2
 8008bfa:	461c      	mov	r4, r3
 8008bfc:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bfe:	b1b1      	cbz	r1, 8008c2e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c00:	2c02      	cmp	r4, #2
 8008c02:	d120      	bne.n	8008c46 <xQueueGenericSendFromISR+0x56>
 8008c04:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d01d      	beq.n	8008c46 <xQueueGenericSendFromISR+0x56>
 8008c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	e7fe      	b.n	8008c1a <xQueueGenericSendFromISR+0x2a>
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008c2c:	e7fe      	b.n	8008c2c <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d0e5      	beq.n	8008c00 <xQueueGenericSendFromISR+0x10>
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	e7fe      	b.n	8008c44 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c46:	f001 fb2b 	bl	800a2a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c4a:	f3ef 8911 	mrs	r9, BASEPRI
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c5e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008c60:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d301      	bcc.n	8008c6a <xQueueGenericSendFromISR+0x7a>
 8008c66:	2c02      	cmp	r4, #2
 8008c68:	d12b      	bne.n	8008cc2 <xQueueGenericSendFromISR+0xd2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c6a:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8008c6e:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c72:	6bab      	ldr	r3, [r5, #56]	; 0x38
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008c74:	4628      	mov	r0, r5
 8008c76:	f007 ff3d 	bl	8010af4 <SEGGER_SYSVIEW_ShrinkId>
 8008c7a:	4601      	mov	r1, r0
 8008c7c:	4632      	mov	r2, r6
 8008c7e:	2060      	movs	r0, #96	; 0x60
 8008c80:	f008 f912 	bl	8010ea8 <SEGGER_SYSVIEW_RecordU32x2>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c84:	4622      	mov	r2, r4
 8008c86:	4639      	mov	r1, r7
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f7ff fdd0 	bl	800882e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008c8e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8008c92:	d009      	beq.n	8008ca8 <xQueueGenericSendFromISR+0xb8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c94:	f108 0301 	add.w	r3, r8, #1
 8008c98:	b25b      	sxtb	r3, r3
 8008c9a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8008c9e:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ca0:	f389 8811 	msr	BASEPRI, r9
}
 8008ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ca8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008caa:	b90b      	cbnz	r3, 8008cb0 <xQueueGenericSendFromISR+0xc0>
			xReturn = pdPASS;
 8008cac:	2001      	movs	r0, #1
 8008cae:	e7f7      	b.n	8008ca0 <xQueueGenericSendFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cb0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008cb4:	f000 fd94 	bl	80097e0 <xTaskRemoveFromEventList>
 8008cb8:	b168      	cbz	r0, 8008cd6 <xQueueGenericSendFromISR+0xe6>
							if( pxHigherPriorityTaskWoken != NULL )
 8008cba:	b176      	cbz	r6, 8008cda <xQueueGenericSendFromISR+0xea>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cbc:	2001      	movs	r0, #1
 8008cbe:	6030      	str	r0, [r6, #0]
 8008cc0:	e7ee      	b.n	8008ca0 <xQueueGenericSendFromISR+0xb0>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f007 ff16 	bl	8010af4 <SEGGER_SYSVIEW_ShrinkId>
 8008cc8:	4601      	mov	r1, r0
 8008cca:	4632      	mov	r2, r6
 8008ccc:	2060      	movs	r0, #96	; 0x60
 8008cce:	f008 f8eb 	bl	8010ea8 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	e7e4      	b.n	8008ca0 <xQueueGenericSendFromISR+0xb0>
			xReturn = pdPASS;
 8008cd6:	2001      	movs	r0, #1
 8008cd8:	e7e2      	b.n	8008ca0 <xQueueGenericSendFromISR+0xb0>
 8008cda:	2001      	movs	r0, #1
 8008cdc:	e7e0      	b.n	8008ca0 <xQueueGenericSendFromISR+0xb0>

08008cde <xQueueReceive>:
{
 8008cde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ce0:	b087      	sub	sp, #28
 8008ce2:	9203      	str	r2, [sp, #12]
	configASSERT( ( pxQueue ) );
 8008ce4:	b190      	cbz	r0, 8008d0c <xQueueReceive+0x2e>
 8008ce6:	460f      	mov	r7, r1
 8008ce8:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cea:	b1c1      	cbz	r1, 8008d1e <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cec:	f000 fe5c 	bl	80099a8 <xTaskGetSchedulerState>
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	bb00      	cbnz	r0, 8008d36 <xQueueReceive+0x58>
 8008cf4:	9b03      	ldr	r3, [sp, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d07c      	beq.n	8008df4 <xQueueReceive+0x116>
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	e7fe      	b.n	8008d0a <xQueueReceive+0x2c>
 8008d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8008d1c:	e7fe      	b.n	8008d1c <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d1e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0e3      	beq.n	8008cec <xQueueReceive+0xe>
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	e7fe      	b.n	8008d34 <xQueueReceive+0x56>
 8008d36:	2600      	movs	r6, #0
 8008d38:	e05c      	b.n	8008df4 <xQueueReceive+0x116>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f7ff fdb1 	bl	80088a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8008d42:	4620      	mov	r0, r4
 8008d44:	f007 fed6 	bl	8010af4 <SEGGER_SYSVIEW_ShrinkId>
 8008d48:	4606      	mov	r6, r0
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	f007 fed2 	bl	8010af4 <SEGGER_SYSVIEW_ShrinkId>
 8008d50:	4602      	mov	r2, r0
 8008d52:	2301      	movs	r3, #1
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	4631      	mov	r1, r6
 8008d5a:	205c      	movs	r0, #92	; 0x5c
 8008d5c:	f008 f920 	bl	8010fa0 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d60:	3d01      	subs	r5, #1
 8008d62:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d64:	6923      	ldr	r3, [r4, #16]
 8008d66:	b923      	cbnz	r3, 8008d72 <xQueueReceive+0x94>
				taskEXIT_CRITICAL();
 8008d68:	f001 f996 	bl	800a098 <vPortExitCritical>
				return pdPASS;
 8008d6c:	2001      	movs	r0, #1
}
 8008d6e:	b007      	add	sp, #28
 8008d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d72:	f104 0010 	add.w	r0, r4, #16
 8008d76:	f000 fd33 	bl	80097e0 <xTaskRemoveFromEventList>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d0f4      	beq.n	8008d68 <xQueueReceive+0x8a>
						queueYIELD_IF_USING_PREEMPTION();
 8008d7e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d86:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	e7e9      	b.n	8008d68 <xQueueReceive+0x8a>
					taskEXIT_CRITICAL();
 8008d94:	f001 f980 	bl	800a098 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f007 feab 	bl	8010af4 <SEGGER_SYSVIEW_ShrinkId>
 8008d9e:	4604      	mov	r4, r0
 8008da0:	2000      	movs	r0, #0
 8008da2:	f007 fea7 	bl	8010af4 <SEGGER_SYSVIEW_ShrinkId>
 8008da6:	4602      	mov	r2, r0
 8008da8:	2301      	movs	r3, #1
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	9b03      	ldr	r3, [sp, #12]
 8008dae:	4621      	mov	r1, r4
 8008db0:	205c      	movs	r0, #92	; 0x5c
 8008db2:	f008 f8f5 	bl	8010fa0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8008db6:	2000      	movs	r0, #0
 8008db8:	e7d9      	b.n	8008d6e <xQueueReceive+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dba:	a804      	add	r0, sp, #16
 8008dbc:	f000 fda0 	bl	8009900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dc0:	2601      	movs	r6, #1
 8008dc2:	e021      	b.n	8008e08 <xQueueReceive+0x12a>
		prvLockQueue( pxQueue );
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008dca:	e029      	b.n	8008e20 <xQueueReceive+0x142>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dd2:	e02b      	b.n	8008e2c <xQueueReceive+0x14e>
				prvUnlockQueue( pxQueue );
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f7ff fd77 	bl	80088c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dda:	f000 fb7f 	bl	80094dc <xTaskResumeAll>
 8008dde:	e009      	b.n	8008df4 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8008de0:	4620      	mov	r0, r4
 8008de2:	f7ff fd71 	bl	80088c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008de6:	f000 fb79 	bl	80094dc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dea:	4620      	mov	r0, r4
 8008dec:	f7ff fd12 	bl	8008814 <prvIsQueueEmpty>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d13f      	bne.n	8008e74 <xQueueReceive+0x196>
		taskENTER_CRITICAL();
 8008df4:	f001 f92e 	bl	800a054 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008df8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008dfa:	2d00      	cmp	r5, #0
 8008dfc:	d19d      	bne.n	8008d3a <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0c7      	beq.n	8008d94 <xQueueReceive+0xb6>
				else if( xEntryTimeSet == pdFALSE )
 8008e04:	2e00      	cmp	r6, #0
 8008e06:	d0d8      	beq.n	8008dba <xQueueReceive+0xdc>
		taskEXIT_CRITICAL();
 8008e08:	f001 f946 	bl	800a098 <vPortExitCritical>
		vTaskSuspendAll();
 8008e0c:	f000 fac0 	bl	8009390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e10:	f001 f920 	bl	800a054 <vPortEnterCritical>
 8008e14:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008e18:	b25b      	sxtb	r3, r3
 8008e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e1e:	d0d1      	beq.n	8008dc4 <xQueueReceive+0xe6>
 8008e20:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008e24:	b25b      	sxtb	r3, r3
 8008e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e2a:	d0cf      	beq.n	8008dcc <xQueueReceive+0xee>
 8008e2c:	f001 f934 	bl	800a098 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e30:	a903      	add	r1, sp, #12
 8008e32:	a804      	add	r0, sp, #16
 8008e34:	f000 fd70 	bl	8009918 <xTaskCheckForTimeOut>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d1d1      	bne.n	8008de0 <xQueueReceive+0x102>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f7ff fce9 	bl	8008814 <prvIsQueueEmpty>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d0c6      	beq.n	8008dd4 <xQueueReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e46:	9903      	ldr	r1, [sp, #12]
 8008e48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008e4c:	f000 fc64 	bl	8009718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e50:	4620      	mov	r0, r4
 8008e52:	f7ff fd39 	bl	80088c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e56:	f000 fb41 	bl	80094dc <xTaskResumeAll>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d1ca      	bne.n	8008df4 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8008e5e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e66:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	e7bf      	b.n	8008df4 <xQueueReceive+0x116>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008e74:	4620      	mov	r0, r4
 8008e76:	f007 fe3d 	bl	8010af4 <SEGGER_SYSVIEW_ShrinkId>
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	f007 fe39 	bl	8010af4 <SEGGER_SYSVIEW_ShrinkId>
 8008e82:	4602      	mov	r2, r0
 8008e84:	2301      	movs	r3, #1
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	9b03      	ldr	r3, [sp, #12]
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	205c      	movs	r0, #92	; 0x5c
 8008e8e:	f008 f887 	bl	8010fa0 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8008e92:	2000      	movs	r0, #0
 8008e94:	e76b      	b.n	8008d6e <xQueueReceive+0x90>
	...

08008e98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e98:	b510      	push	{r4, lr}
 8008e9a:	460c      	mov	r4, r1
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	2b07      	cmp	r3, #7
 8008ea0:	d812      	bhi.n	8008ec8 <vQueueAddToRegistry+0x30>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ea2:	4a0a      	ldr	r2, [pc, #40]	; (8008ecc <vQueueAddToRegistry+0x34>)
 8008ea4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008ea8:	b10a      	cbz	r2, 8008eae <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008eaa:	3301      	adds	r3, #1
 8008eac:	e7f7      	b.n	8008e9e <vQueueAddToRegistry+0x6>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008eae:	4a07      	ldr	r2, [pc, #28]	; (8008ecc <vQueueAddToRegistry+0x34>)
 8008eb0:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008eb4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008eb8:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8008eba:	f007 fe1b 	bl	8010af4 <SEGGER_SYSVIEW_ShrinkId>
 8008ebe:	4601      	mov	r1, r0
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	2071      	movs	r0, #113	; 0x71
 8008ec4:	f007 fff0 	bl	8010ea8 <SEGGER_SYSVIEW_RecordU32x2>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ec8:	bd10      	pop	{r4, pc}
 8008eca:	bf00      	nop
 8008ecc:	20001ff4 	.word	0x20001ff4

08008ed0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ed0:	b570      	push	{r4, r5, r6, lr}
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	460d      	mov	r5, r1
 8008ed6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ed8:	f001 f8bc 	bl	800a054 <vPortEnterCritical>
 8008edc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008ee0:	b25b      	sxtb	r3, r3
 8008ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ee6:	d00d      	beq.n	8008f04 <vQueueWaitForMessageRestricted+0x34>
 8008ee8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008eec:	b25b      	sxtb	r3, r3
 8008eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef2:	d00b      	beq.n	8008f0c <vQueueWaitForMessageRestricted+0x3c>
 8008ef4:	f001 f8d0 	bl	800a098 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ef8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008efa:	b15b      	cbz	r3, 8008f14 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008efc:	4620      	mov	r0, r4
 8008efe:	f7ff fce3 	bl	80088c8 <prvUnlockQueue>
	}
 8008f02:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8008f04:	2300      	movs	r3, #0
 8008f06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008f0a:	e7ed      	b.n	8008ee8 <vQueueWaitForMessageRestricted+0x18>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f12:	e7ef      	b.n	8008ef4 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f14:	4632      	mov	r2, r6
 8008f16:	4629      	mov	r1, r5
 8008f18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f1c:	f000 fc40 	bl	80097a0 <vTaskPlaceOnEventListRestricted>
 8008f20:	e7ec      	b.n	8008efc <vQueueWaitForMessageRestricted+0x2c>
	...

08008f24 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f24:	4b08      	ldr	r3, [pc, #32]	; (8008f48 <prvResetNextTaskUnblockTime+0x24>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	b923      	cbnz	r3, 8008f36 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f2c:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <prvResetNextTaskUnblockTime+0x28>)
 8008f2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f36:	4b04      	ldr	r3, [pc, #16]	; (8008f48 <prvResetNextTaskUnblockTime+0x24>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	4b02      	ldr	r3, [pc, #8]	; (8008f4c <prvResetNextTaskUnblockTime+0x28>)
 8008f42:	601a      	str	r2, [r3, #0]
	}
}
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	20002038 	.word	0x20002038
 8008f4c:	20002114 	.word	0x20002114

08008f50 <prvInitialiseNewTask>:
{
 8008f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f54:	4680      	mov	r8, r0
 8008f56:	460d      	mov	r5, r1
 8008f58:	4617      	mov	r7, r2
 8008f5a:	4699      	mov	r9, r3
 8008f5c:	9e08      	ldr	r6, [sp, #32]
 8008f5e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008f62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f64:	0092      	lsls	r2, r2, #2
 8008f66:	21a5      	movs	r1, #165	; 0xa5
 8008f68:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008f6a:	f008 febf 	bl	8011cec <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008f70:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8008f74:	3a01      	subs	r2, #1
 8008f76:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f7a:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8008f7e:	2d00      	cmp	r5, #0
 8008f80:	d043      	beq.n	800900a <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f82:	f04f 0c00 	mov.w	ip, #0
 8008f86:	f1bc 0f0f 	cmp.w	ip, #15
 8008f8a:	d809      	bhi.n	8008fa0 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f8c:	f815 300c 	ldrb.w	r3, [r5, ip]
 8008f90:	eb04 020c 	add.w	r2, r4, ip
 8008f94:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8008f98:	b113      	cbz	r3, 8008fa0 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f9a:	f10c 0c01 	add.w	ip, ip, #1
 8008f9e:	e7f2      	b.n	8008f86 <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fa6:	2e06      	cmp	r6, #6
 8008fa8:	d900      	bls.n	8008fac <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008faa:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8008fac:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008fae:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008fb0:	2500      	movs	r5, #0
 8008fb2:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fb4:	1d20      	adds	r0, r4, #4
 8008fb6:	f7ff fbe4 	bl	8008782 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fba:	f104 0018 	add.w	r0, r4, #24
 8008fbe:	f7ff fbe0 	bl	8008782 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fc2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fc4:	f1c6 0607 	rsb	r6, r6, #7
 8008fc8:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fca:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008fcc:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ulNotifiedValue = 0;
 8008fce:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fd2:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008fd6:	224c      	movs	r2, #76	; 0x4c
 8008fd8:	4629      	mov	r1, r5
 8008fda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fde:	f008 fe85 	bl	8011cec <memset>
 8008fe2:	4b0c      	ldr	r3, [pc, #48]	; (8009014 <prvInitialiseNewTask+0xc4>)
 8008fe4:	65e3      	str	r3, [r4, #92]	; 0x5c
 8008fe6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008fea:	6622      	str	r2, [r4, #96]	; 0x60
 8008fec:	33d0      	adds	r3, #208	; 0xd0
 8008fee:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ff0:	464a      	mov	r2, r9
 8008ff2:	4641      	mov	r1, r8
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	f000 ffff 	bl	8009ff8 <pxPortInitialiseStack>
 8008ffa:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008ffc:	f1ba 0f00 	cmp.w	sl, #0
 8009000:	d001      	beq.n	8009006 <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009002:	f8ca 4000 	str.w	r4, [sl]
}
 8009006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800900a:	2300      	movs	r3, #0
 800900c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009010:	e7c9      	b.n	8008fa6 <prvInitialiseNewTask+0x56>
 8009012:	bf00      	nop
 8009014:	2000ca04 	.word	0x2000ca04

08009018 <prvInitialiseTaskLists>:
{
 8009018:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800901a:	2400      	movs	r4, #0
 800901c:	e007      	b.n	800902e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800901e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009022:	0093      	lsls	r3, r2, #2
 8009024:	480e      	ldr	r0, [pc, #56]	; (8009060 <prvInitialiseTaskLists+0x48>)
 8009026:	4418      	add	r0, r3
 8009028:	f7ff fba0 	bl	800876c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800902c:	3401      	adds	r4, #1
 800902e:	2c06      	cmp	r4, #6
 8009030:	d9f5      	bls.n	800901e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8009032:	4d0c      	ldr	r5, [pc, #48]	; (8009064 <prvInitialiseTaskLists+0x4c>)
 8009034:	4628      	mov	r0, r5
 8009036:	f7ff fb99 	bl	800876c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800903a:	4c0b      	ldr	r4, [pc, #44]	; (8009068 <prvInitialiseTaskLists+0x50>)
 800903c:	4620      	mov	r0, r4
 800903e:	f7ff fb95 	bl	800876c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009042:	480a      	ldr	r0, [pc, #40]	; (800906c <prvInitialiseTaskLists+0x54>)
 8009044:	f7ff fb92 	bl	800876c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009048:	4809      	ldr	r0, [pc, #36]	; (8009070 <prvInitialiseTaskLists+0x58>)
 800904a:	f7ff fb8f 	bl	800876c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800904e:	4809      	ldr	r0, [pc, #36]	; (8009074 <prvInitialiseTaskLists+0x5c>)
 8009050:	f7ff fb8c 	bl	800876c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009054:	4b08      	ldr	r3, [pc, #32]	; (8009078 <prvInitialiseTaskLists+0x60>)
 8009056:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009058:	4b08      	ldr	r3, [pc, #32]	; (800907c <prvInitialiseTaskLists+0x64>)
 800905a:	601c      	str	r4, [r3, #0]
}
 800905c:	bd38      	pop	{r3, r4, r5, pc}
 800905e:	bf00      	nop
 8009060:	20002040 	.word	0x20002040
 8009064:	200020e8 	.word	0x200020e8
 8009068:	200020fc 	.word	0x200020fc
 800906c:	20002120 	.word	0x20002120
 8009070:	2000214c 	.word	0x2000214c
 8009074:	20002138 	.word	0x20002138
 8009078:	20002038 	.word	0x20002038
 800907c:	2000203c 	.word	0x2000203c

08009080 <prvAddNewTaskToReadyList>:
{
 8009080:	b510      	push	{r4, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009086:	f000 ffe5 	bl	800a054 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800908a:	4a2b      	ldr	r2, [pc, #172]	; (8009138 <prvAddNewTaskToReadyList+0xb8>)
 800908c:	6813      	ldr	r3, [r2, #0]
 800908e:	3301      	adds	r3, #1
 8009090:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009092:	4b2a      	ldr	r3, [pc, #168]	; (800913c <prvAddNewTaskToReadyList+0xbc>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	b15b      	cbz	r3, 80090b0 <prvAddNewTaskToReadyList+0x30>
			if( xSchedulerRunning == pdFALSE )
 8009098:	4b29      	ldr	r3, [pc, #164]	; (8009140 <prvAddNewTaskToReadyList+0xc0>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	b96b      	cbnz	r3, 80090ba <prvAddNewTaskToReadyList+0x3a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800909e:	4b27      	ldr	r3, [pc, #156]	; (800913c <prvAddNewTaskToReadyList+0xbc>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d807      	bhi.n	80090ba <prvAddNewTaskToReadyList+0x3a>
					pxCurrentTCB = pxNewTCB;
 80090aa:	4b24      	ldr	r3, [pc, #144]	; (800913c <prvAddNewTaskToReadyList+0xbc>)
 80090ac:	601c      	str	r4, [r3, #0]
 80090ae:	e004      	b.n	80090ba <prvAddNewTaskToReadyList+0x3a>
			pxCurrentTCB = pxNewTCB;
 80090b0:	4b22      	ldr	r3, [pc, #136]	; (800913c <prvAddNewTaskToReadyList+0xbc>)
 80090b2:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090b4:	6813      	ldr	r3, [r2, #0]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d03b      	beq.n	8009132 <prvAddNewTaskToReadyList+0xb2>
		uxTaskNumber++;
 80090ba:	4a22      	ldr	r2, [pc, #136]	; (8009144 <prvAddNewTaskToReadyList+0xc4>)
 80090bc:	6813      	ldr	r3, [r2, #0]
 80090be:	3301      	adds	r3, #1
 80090c0:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090c2:	6463      	str	r3, [r4, #68]	; 0x44
		traceTASK_CREATE( pxNewTCB );
 80090c4:	b164      	cbz	r4, 80090e0 <prvAddNewTaskToReadyList+0x60>
 80090c6:	4620      	mov	r0, r4
 80090c8:	f008 f89c 	bl	8011204 <SEGGER_SYSVIEW_OnTaskCreate>
 80090cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80090ce:	6822      	ldr	r2, [r4, #0]
 80090d0:	1ad2      	subs	r2, r2, r3
 80090d2:	9200      	str	r2, [sp, #0]
 80090d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80090d6:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80090da:	4620      	mov	r0, r4
 80090dc:	f007 fa4e 	bl	801057c <SYSVIEW_AddTask>
		prvAddTaskToReadyList( pxNewTCB );
 80090e0:	4620      	mov	r0, r4
 80090e2:	f008 f8d7 	bl	8011294 <SEGGER_SYSVIEW_OnTaskStartReady>
 80090e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80090e8:	2301      	movs	r3, #1
 80090ea:	4083      	lsls	r3, r0
 80090ec:	4a16      	ldr	r2, [pc, #88]	; (8009148 <prvAddNewTaskToReadyList+0xc8>)
 80090ee:	6811      	ldr	r1, [r2, #0]
 80090f0:	430b      	orrs	r3, r1
 80090f2:	6013      	str	r3, [r2, #0]
 80090f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80090f8:	1d21      	adds	r1, r4, #4
 80090fa:	4b14      	ldr	r3, [pc, #80]	; (800914c <prvAddNewTaskToReadyList+0xcc>)
 80090fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009100:	f7ff fb42 	bl	8008788 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009104:	f000 ffc8 	bl	800a098 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009108:	4b0d      	ldr	r3, [pc, #52]	; (8009140 <prvAddNewTaskToReadyList+0xc0>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	b17b      	cbz	r3, 800912e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800910e:	4b0b      	ldr	r3, [pc, #44]	; (800913c <prvAddNewTaskToReadyList+0xbc>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009114:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009116:	429a      	cmp	r2, r3
 8009118:	d209      	bcs.n	800912e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800911a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800911e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009122:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	f3bf 8f6f 	isb	sy
}
 800912e:	b002      	add	sp, #8
 8009130:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009132:	f7ff ff71 	bl	8009018 <prvInitialiseTaskLists>
 8009136:	e7c0      	b.n	80090ba <prvAddNewTaskToReadyList+0x3a>
 8009138:	200020d4 	.word	0x200020d4
 800913c:	20002034 	.word	0x20002034
 8009140:	20002134 	.word	0x20002134
 8009144:	200020e0 	.word	0x200020e0
 8009148:	200020e4 	.word	0x200020e4
 800914c:	20002040 	.word	0x20002040

08009150 <prvDeleteTCB>:
	{
 8009150:	b510      	push	{r4, lr}
 8009152:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009154:	3058      	adds	r0, #88	; 0x58
 8009156:	f008 fde1 	bl	8011d1c <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800915a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800915c:	f001 f9b0 	bl	800a4c0 <vPortFree>
			vPortFree( pxTCB );
 8009160:	4620      	mov	r0, r4
 8009162:	f001 f9ad 	bl	800a4c0 <vPortFree>
	}
 8009166:	bd10      	pop	{r4, pc}

08009168 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009168:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <prvCheckTasksWaitingTermination+0x40>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	b1d3      	cbz	r3, 80091a4 <prvCheckTasksWaitingTermination+0x3c>
{
 800916e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8009170:	f000 ff70 	bl	800a054 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009174:	4b0d      	ldr	r3, [pc, #52]	; (80091ac <prvCheckTasksWaitingTermination+0x44>)
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800917a:	1d20      	adds	r0, r4, #4
 800917c:	f7ff fb28 	bl	80087d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009180:	4a0b      	ldr	r2, [pc, #44]	; (80091b0 <prvCheckTasksWaitingTermination+0x48>)
 8009182:	6813      	ldr	r3, [r2, #0]
 8009184:	3b01      	subs	r3, #1
 8009186:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009188:	4a07      	ldr	r2, [pc, #28]	; (80091a8 <prvCheckTasksWaitingTermination+0x40>)
 800918a:	6813      	ldr	r3, [r2, #0]
 800918c:	3b01      	subs	r3, #1
 800918e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8009190:	f000 ff82 	bl	800a098 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009194:	4620      	mov	r0, r4
 8009196:	f7ff ffdb 	bl	8009150 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800919a:	4b03      	ldr	r3, [pc, #12]	; (80091a8 <prvCheckTasksWaitingTermination+0x40>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1e6      	bne.n	8009170 <prvCheckTasksWaitingTermination+0x8>
}
 80091a2:	bd10      	pop	{r4, pc}
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	200020d8 	.word	0x200020d8
 80091ac:	2000214c 	.word	0x2000214c
 80091b0:	200020d4 	.word	0x200020d4

080091b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091b4:	b570      	push	{r4, r5, r6, lr}
 80091b6:	4604      	mov	r4, r0
 80091b8:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091ba:	4b1d      	ldr	r3, [pc, #116]	; (8009230 <prvAddCurrentTaskToDelayedList+0x7c>)
 80091bc:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091be:	4b1d      	ldr	r3, [pc, #116]	; (8009234 <prvAddCurrentTaskToDelayedList+0x80>)
 80091c0:	6818      	ldr	r0, [r3, #0]
 80091c2:	3004      	adds	r0, #4
 80091c4:	f7ff fb04 	bl	80087d0 <uxListRemove>
 80091c8:	b948      	cbnz	r0, 80091de <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80091ca:	4b1a      	ldr	r3, [pc, #104]	; (8009234 <prvAddCurrentTaskToDelayedList+0x80>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d0:	2201      	movs	r2, #1
 80091d2:	409a      	lsls	r2, r3
 80091d4:	4918      	ldr	r1, [pc, #96]	; (8009238 <prvAddCurrentTaskToDelayedList+0x84>)
 80091d6:	680b      	ldr	r3, [r1, #0]
 80091d8:	ea23 0302 	bic.w	r3, r3, r2
 80091dc:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091de:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80091e2:	d00d      	beq.n	8009200 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091e4:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091e6:	4b13      	ldr	r3, [pc, #76]	; (8009234 <prvAddCurrentTaskToDelayedList+0x80>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80091ec:	42a6      	cmp	r6, r4
 80091ee:	d910      	bls.n	8009212 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091f0:	4b12      	ldr	r3, [pc, #72]	; (800923c <prvAddCurrentTaskToDelayedList+0x88>)
 80091f2:	6818      	ldr	r0, [r3, #0]
 80091f4:	4b0f      	ldr	r3, [pc, #60]	; (8009234 <prvAddCurrentTaskToDelayedList+0x80>)
 80091f6:	6819      	ldr	r1, [r3, #0]
 80091f8:	3104      	adds	r1, #4
 80091fa:	f7ff fad0 	bl	800879e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091fe:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009200:	2d00      	cmp	r5, #0
 8009202:	d0ef      	beq.n	80091e4 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009204:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <prvAddCurrentTaskToDelayedList+0x80>)
 8009206:	6819      	ldr	r1, [r3, #0]
 8009208:	3104      	adds	r1, #4
 800920a:	480d      	ldr	r0, [pc, #52]	; (8009240 <prvAddCurrentTaskToDelayedList+0x8c>)
 800920c:	f7ff fabc 	bl	8008788 <vListInsertEnd>
 8009210:	e7f5      	b.n	80091fe <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009212:	4b0c      	ldr	r3, [pc, #48]	; (8009244 <prvAddCurrentTaskToDelayedList+0x90>)
 8009214:	6818      	ldr	r0, [r3, #0]
 8009216:	4b07      	ldr	r3, [pc, #28]	; (8009234 <prvAddCurrentTaskToDelayedList+0x80>)
 8009218:	6819      	ldr	r1, [r3, #0]
 800921a:	3104      	adds	r1, #4
 800921c:	f7ff fabf 	bl	800879e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009220:	4b09      	ldr	r3, [pc, #36]	; (8009248 <prvAddCurrentTaskToDelayedList+0x94>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	42a3      	cmp	r3, r4
 8009226:	d9ea      	bls.n	80091fe <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 8009228:	4b07      	ldr	r3, [pc, #28]	; (8009248 <prvAddCurrentTaskToDelayedList+0x94>)
 800922a:	601c      	str	r4, [r3, #0]
}
 800922c:	e7e7      	b.n	80091fe <prvAddCurrentTaskToDelayedList+0x4a>
 800922e:	bf00      	nop
 8009230:	20002160 	.word	0x20002160
 8009234:	20002034 	.word	0x20002034
 8009238:	200020e4 	.word	0x200020e4
 800923c:	2000203c 	.word	0x2000203c
 8009240:	20002138 	.word	0x20002138
 8009244:	20002038 	.word	0x20002038
 8009248:	20002114 	.word	0x20002114

0800924c <prvIdleTask>:
{
 800924c:	b508      	push	{r3, lr}
 800924e:	e00b      	b.n	8009268 <prvIdleTask+0x1c>
				taskYIELD();
 8009250:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009258:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8009264:	f7f7 fa32 	bl	80006cc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009268:	f7ff ff7e 	bl	8009168 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800926c:	4b02      	ldr	r3, [pc, #8]	; (8009278 <prvIdleTask+0x2c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d8ed      	bhi.n	8009250 <prvIdleTask+0x4>
 8009274:	e7f6      	b.n	8009264 <prvIdleTask+0x18>
 8009276:	bf00      	nop
 8009278:	20002040 	.word	0x20002040

0800927c <xTaskCreate>:
	{
 800927c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009280:	b085      	sub	sp, #20
 8009282:	4607      	mov	r7, r0
 8009284:	4688      	mov	r8, r1
 8009286:	4614      	mov	r4, r2
 8009288:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800928a:	0090      	lsls	r0, r2, #2
 800928c:	f001 f89a 	bl	800a3c4 <pvPortMalloc>
			if( pxStack != NULL )
 8009290:	b1f0      	cbz	r0, 80092d0 <xTaskCreate+0x54>
 8009292:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009294:	20ac      	movs	r0, #172	; 0xac
 8009296:	f001 f895 	bl	800a3c4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800929a:	4605      	mov	r5, r0
 800929c:	b1a0      	cbz	r0, 80092c8 <xTaskCreate+0x4c>
					pxNewTCB->pxStack = pxStack;
 800929e:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80092a2:	b1d5      	cbz	r5, 80092da <xTaskCreate+0x5e>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092a4:	2300      	movs	r3, #0
 80092a6:	9303      	str	r3, [sp, #12]
 80092a8:	9502      	str	r5, [sp, #8]
 80092aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	4633      	mov	r3, r6
 80092b4:	4622      	mov	r2, r4
 80092b6:	4641      	mov	r1, r8
 80092b8:	4638      	mov	r0, r7
 80092ba:	f7ff fe49 	bl	8008f50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092be:	4628      	mov	r0, r5
 80092c0:	f7ff fede 	bl	8009080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092c4:	2001      	movs	r0, #1
 80092c6:	e005      	b.n	80092d4 <xTaskCreate+0x58>
					vPortFree( pxStack );
 80092c8:	4648      	mov	r0, r9
 80092ca:	f001 f8f9 	bl	800a4c0 <vPortFree>
 80092ce:	e7e8      	b.n	80092a2 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 80092d4:	b005      	add	sp, #20
 80092d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80092de:	e7f9      	b.n	80092d4 <xTaskCreate+0x58>

080092e0 <vTaskStartScheduler>:
{
 80092e0:	b510      	push	{r4, lr}
 80092e2:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
 80092e4:	4b22      	ldr	r3, [pc, #136]	; (8009370 <vTaskStartScheduler+0x90>)
 80092e6:	9301      	str	r3, [sp, #4]
 80092e8:	2300      	movs	r3, #0
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	2280      	movs	r2, #128	; 0x80
 80092ee:	4921      	ldr	r1, [pc, #132]	; (8009374 <vTaskStartScheduler+0x94>)
 80092f0:	4821      	ldr	r0, [pc, #132]	; (8009378 <vTaskStartScheduler+0x98>)
 80092f2:	f7ff ffc3 	bl	800927c <xTaskCreate>
		if( xReturn == pdPASS )
 80092f6:	2801      	cmp	r0, #1
 80092f8:	d006      	beq.n	8009308 <vTaskStartScheduler+0x28>
	if( xReturn == pdPASS )
 80092fa:	2801      	cmp	r0, #1
 80092fc:	d007      	beq.n	800930e <vTaskStartScheduler+0x2e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092fe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009302:	d02c      	beq.n	800935e <vTaskStartScheduler+0x7e>
}
 8009304:	b002      	add	sp, #8
 8009306:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
 8009308:	f000 fc52 	bl	8009bb0 <xTimerCreateTimerTask>
 800930c:	e7f5      	b.n	80092fa <vTaskStartScheduler+0x1a>
 800930e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800931e:	4c17      	ldr	r4, [pc, #92]	; (800937c <vTaskStartScheduler+0x9c>)
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	3358      	adds	r3, #88	; 0x58
 8009324:	4a16      	ldr	r2, [pc, #88]	; (8009380 <vTaskStartScheduler+0xa0>)
 8009326:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8009328:	4b16      	ldr	r3, [pc, #88]	; (8009384 <vTaskStartScheduler+0xa4>)
 800932a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800932e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009330:	4b15      	ldr	r3, [pc, #84]	; (8009388 <vTaskStartScheduler+0xa8>)
 8009332:	2201      	movs	r2, #1
 8009334:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009336:	4b15      	ldr	r3, [pc, #84]	; (800938c <vTaskStartScheduler+0xac>)
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800933c:	f7f7 f9c3 	bl	80006c6 <configureTimerForRunTimeStats>
		traceTASK_SWITCHED_IN();
 8009340:	6822      	ldr	r2, [r4, #0]
 8009342:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <vTaskStartScheduler+0x90>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	429a      	cmp	r2, r3
 8009348:	d006      	beq.n	8009358 <vTaskStartScheduler+0x78>
 800934a:	4b0c      	ldr	r3, [pc, #48]	; (800937c <vTaskStartScheduler+0x9c>)
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	f007 ff7d 	bl	801124c <SEGGER_SYSVIEW_OnTaskStartExec>
		if( xPortStartScheduler() != pdFALSE )
 8009352:	f000 ff19 	bl	800a188 <xPortStartScheduler>
 8009356:	e7d5      	b.n	8009304 <vTaskStartScheduler+0x24>
		traceTASK_SWITCHED_IN();
 8009358:	f007 ff40 	bl	80111dc <SEGGER_SYSVIEW_OnIdle>
 800935c:	e7f9      	b.n	8009352 <vTaskStartScheduler+0x72>
 800935e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800936e:	e7fe      	b.n	800936e <vTaskStartScheduler+0x8e>
 8009370:	20002110 	.word	0x20002110
 8009374:	08013150 	.word	0x08013150
 8009378:	0800924d 	.word	0x0800924d
 800937c:	20002034 	.word	0x20002034
 8009380:	20001868 	.word	0x20001868
 8009384:	20002114 	.word	0x20002114
 8009388:	20002134 	.word	0x20002134
 800938c:	20002160 	.word	0x20002160

08009390 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009390:	4a02      	ldr	r2, [pc, #8]	; (800939c <vTaskSuspendAll+0xc>)
 8009392:	6813      	ldr	r3, [r2, #0]
 8009394:	3301      	adds	r3, #1
 8009396:	6013      	str	r3, [r2, #0]
}
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	200020dc 	.word	0x200020dc

080093a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80093a0:	4b01      	ldr	r3, [pc, #4]	; (80093a8 <xTaskGetTickCount+0x8>)
 80093a2:	6818      	ldr	r0, [r3, #0]
}
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	20002160 	.word	0x20002160

080093ac <xTaskGetTickCountFromISR>:
{
 80093ac:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093ae:	f000 ff77 	bl	800a2a0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80093b2:	4b01      	ldr	r3, [pc, #4]	; (80093b8 <xTaskGetTickCountFromISR+0xc>)
 80093b4:	6818      	ldr	r0, [r3, #0]
}
 80093b6:	bd08      	pop	{r3, pc}
 80093b8:	20002160 	.word	0x20002160

080093bc <xTaskIncrementTick>:
{
 80093bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093be:	4b3c      	ldr	r3, [pc, #240]	; (80094b0 <xTaskIncrementTick+0xf4>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d16c      	bne.n	80094a0 <xTaskIncrementTick+0xe4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093c6:	4b3b      	ldr	r3, [pc, #236]	; (80094b4 <xTaskIncrementTick+0xf8>)
 80093c8:	681d      	ldr	r5, [r3, #0]
 80093ca:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80093cc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093ce:	b9c5      	cbnz	r5, 8009402 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80093d0:	4b39      	ldr	r3, [pc, #228]	; (80094b8 <xTaskIncrementTick+0xfc>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	b143      	cbz	r3, 80093ea <xTaskIncrementTick+0x2e>
 80093d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	e7fe      	b.n	80093e8 <xTaskIncrementTick+0x2c>
 80093ea:	4a33      	ldr	r2, [pc, #204]	; (80094b8 <xTaskIncrementTick+0xfc>)
 80093ec:	6811      	ldr	r1, [r2, #0]
 80093ee:	4b33      	ldr	r3, [pc, #204]	; (80094bc <xTaskIncrementTick+0x100>)
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	6010      	str	r0, [r2, #0]
 80093f4:	6019      	str	r1, [r3, #0]
 80093f6:	4a32      	ldr	r2, [pc, #200]	; (80094c0 <xTaskIncrementTick+0x104>)
 80093f8:	6813      	ldr	r3, [r2, #0]
 80093fa:	3301      	adds	r3, #1
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	f7ff fd91 	bl	8008f24 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009402:	4b30      	ldr	r3, [pc, #192]	; (80094c4 <xTaskIncrementTick+0x108>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	42ab      	cmp	r3, r5
 8009408:	d940      	bls.n	800948c <xTaskIncrementTick+0xd0>
BaseType_t xSwitchRequired = pdFALSE;
 800940a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800940c:	4b2e      	ldr	r3, [pc, #184]	; (80094c8 <xTaskIncrementTick+0x10c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009416:	009a      	lsls	r2, r3, #2
 8009418:	4b2c      	ldr	r3, [pc, #176]	; (80094cc <xTaskIncrementTick+0x110>)
 800941a:	589b      	ldr	r3, [r3, r2]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d900      	bls.n	8009422 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8009420:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8009422:	4b2b      	ldr	r3, [pc, #172]	; (80094d0 <xTaskIncrementTick+0x114>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d03f      	beq.n	80094aa <xTaskIncrementTick+0xee>
				xSwitchRequired = pdTRUE;
 800942a:	2701      	movs	r7, #1
	return xSwitchRequired;
 800942c:	e03d      	b.n	80094aa <xTaskIncrementTick+0xee>
							xSwitchRequired = pdTRUE;
 800942e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009430:	4b21      	ldr	r3, [pc, #132]	; (80094b8 <xTaskIncrementTick+0xfc>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	b35b      	cbz	r3, 8009490 <xTaskIncrementTick+0xd4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009438:	4b1f      	ldr	r3, [pc, #124]	; (80094b8 <xTaskIncrementTick+0xfc>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009440:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8009442:	429d      	cmp	r5, r3
 8009444:	d329      	bcc.n	800949a <xTaskIncrementTick+0xde>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009446:	1d26      	adds	r6, r4, #4
 8009448:	4630      	mov	r0, r6
 800944a:	f7ff f9c1 	bl	80087d0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800944e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009450:	b11b      	cbz	r3, 800945a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009452:	f104 0018 	add.w	r0, r4, #24
 8009456:	f7ff f9bb 	bl	80087d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800945a:	4620      	mov	r0, r4
 800945c:	f007 ff1a 	bl	8011294 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009460:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009462:	2201      	movs	r2, #1
 8009464:	409a      	lsls	r2, r3
 8009466:	491b      	ldr	r1, [pc, #108]	; (80094d4 <xTaskIncrementTick+0x118>)
 8009468:	6808      	ldr	r0, [r1, #0]
 800946a:	4302      	orrs	r2, r0
 800946c:	600a      	str	r2, [r1, #0]
 800946e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009472:	009a      	lsls	r2, r3, #2
 8009474:	4631      	mov	r1, r6
 8009476:	4815      	ldr	r0, [pc, #84]	; (80094cc <xTaskIncrementTick+0x110>)
 8009478:	4410      	add	r0, r2
 800947a:	f7ff f985 	bl	8008788 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800947e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009480:	4b11      	ldr	r3, [pc, #68]	; (80094c8 <xTaskIncrementTick+0x10c>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009486:	429a      	cmp	r2, r3
 8009488:	d2d1      	bcs.n	800942e <xTaskIncrementTick+0x72>
 800948a:	e7d1      	b.n	8009430 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800948c:	2700      	movs	r7, #0
 800948e:	e7cf      	b.n	8009430 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009490:	4b0c      	ldr	r3, [pc, #48]	; (80094c4 <xTaskIncrementTick+0x108>)
 8009492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009496:	601a      	str	r2, [r3, #0]
					break;
 8009498:	e7b8      	b.n	800940c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800949a:	4a0a      	ldr	r2, [pc, #40]	; (80094c4 <xTaskIncrementTick+0x108>)
 800949c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800949e:	e7b5      	b.n	800940c <xTaskIncrementTick+0x50>
		++xPendedTicks;
 80094a0:	4a0d      	ldr	r2, [pc, #52]	; (80094d8 <xTaskIncrementTick+0x11c>)
 80094a2:	6813      	ldr	r3, [r2, #0]
 80094a4:	3301      	adds	r3, #1
 80094a6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80094a8:	2700      	movs	r7, #0
}
 80094aa:	4638      	mov	r0, r7
 80094ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ae:	bf00      	nop
 80094b0:	200020dc 	.word	0x200020dc
 80094b4:	20002160 	.word	0x20002160
 80094b8:	20002038 	.word	0x20002038
 80094bc:	2000203c 	.word	0x2000203c
 80094c0:	20002118 	.word	0x20002118
 80094c4:	20002114 	.word	0x20002114
 80094c8:	20002034 	.word	0x20002034
 80094cc:	20002040 	.word	0x20002040
 80094d0:	20002164 	.word	0x20002164
 80094d4:	200020e4 	.word	0x200020e4
 80094d8:	2000211c 	.word	0x2000211c

080094dc <xTaskResumeAll>:
{
 80094dc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80094de:	4b36      	ldr	r3, [pc, #216]	; (80095b8 <xTaskResumeAll+0xdc>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	b943      	cbnz	r3, 80094f6 <xTaskResumeAll+0x1a>
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	e7fe      	b.n	80094f4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80094f6:	f000 fdad 	bl	800a054 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80094fa:	4b2f      	ldr	r3, [pc, #188]	; (80095b8 <xTaskResumeAll+0xdc>)
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	3a01      	subs	r2, #1
 8009500:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d152      	bne.n	80095ae <xTaskResumeAll+0xd2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009508:	4b2c      	ldr	r3, [pc, #176]	; (80095bc <xTaskResumeAll+0xe0>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	b90b      	cbnz	r3, 8009512 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800950e:	2400      	movs	r4, #0
 8009510:	e04e      	b.n	80095b0 <xTaskResumeAll+0xd4>
TCB_t *pxTCB = NULL;
 8009512:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009514:	4b2a      	ldr	r3, [pc, #168]	; (80095c0 <xTaskResumeAll+0xe4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	b333      	cbz	r3, 8009568 <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800951a:	4b29      	ldr	r3, [pc, #164]	; (80095c0 <xTaskResumeAll+0xe4>)
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009520:	f104 0018 	add.w	r0, r4, #24
 8009524:	f7ff f954 	bl	80087d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009528:	1d25      	adds	r5, r4, #4
 800952a:	4628      	mov	r0, r5
 800952c:	f7ff f950 	bl	80087d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009530:	4620      	mov	r0, r4
 8009532:	f007 feaf 	bl	8011294 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009536:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009538:	2301      	movs	r3, #1
 800953a:	4083      	lsls	r3, r0
 800953c:	4a21      	ldr	r2, [pc, #132]	; (80095c4 <xTaskResumeAll+0xe8>)
 800953e:	6811      	ldr	r1, [r2, #0]
 8009540:	430b      	orrs	r3, r1
 8009542:	6013      	str	r3, [r2, #0]
 8009544:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009548:	4629      	mov	r1, r5
 800954a:	4b1f      	ldr	r3, [pc, #124]	; (80095c8 <xTaskResumeAll+0xec>)
 800954c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009550:	f7ff f91a 	bl	8008788 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009554:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009556:	4b1d      	ldr	r3, [pc, #116]	; (80095cc <xTaskResumeAll+0xf0>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955c:	429a      	cmp	r2, r3
 800955e:	d3d9      	bcc.n	8009514 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8009560:	4b1b      	ldr	r3, [pc, #108]	; (80095d0 <xTaskResumeAll+0xf4>)
 8009562:	2201      	movs	r2, #1
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	e7d5      	b.n	8009514 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8009568:	b10c      	cbz	r4, 800956e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800956a:	f7ff fcdb 	bl	8008f24 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800956e:	4b19      	ldr	r3, [pc, #100]	; (80095d4 <xTaskResumeAll+0xf8>)
 8009570:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8009572:	b984      	cbnz	r4, 8009596 <xTaskResumeAll+0xba>
				if( xYieldPending != pdFALSE )
 8009574:	4b16      	ldr	r3, [pc, #88]	; (80095d0 <xTaskResumeAll+0xf4>)
 8009576:	681c      	ldr	r4, [r3, #0]
 8009578:	b1d4      	cbz	r4, 80095b0 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
 800957a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800957e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009582:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800958e:	2401      	movs	r4, #1
 8009590:	e00e      	b.n	80095b0 <xTaskResumeAll+0xd4>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009592:	3c01      	subs	r4, #1
 8009594:	d007      	beq.n	80095a6 <xTaskResumeAll+0xca>
							if( xTaskIncrementTick() != pdFALSE )
 8009596:	f7ff ff11 	bl	80093bc <xTaskIncrementTick>
 800959a:	2800      	cmp	r0, #0
 800959c:	d0f9      	beq.n	8009592 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 800959e:	4b0c      	ldr	r3, [pc, #48]	; (80095d0 <xTaskResumeAll+0xf4>)
 80095a0:	2201      	movs	r2, #1
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	e7f5      	b.n	8009592 <xTaskResumeAll+0xb6>
						xPendedTicks = 0;
 80095a6:	4b0b      	ldr	r3, [pc, #44]	; (80095d4 <xTaskResumeAll+0xf8>)
 80095a8:	2200      	movs	r2, #0
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	e7e2      	b.n	8009574 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 80095ae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80095b0:	f000 fd72 	bl	800a098 <vPortExitCritical>
}
 80095b4:	4620      	mov	r0, r4
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
 80095b8:	200020dc 	.word	0x200020dc
 80095bc:	200020d4 	.word	0x200020d4
 80095c0:	20002120 	.word	0x20002120
 80095c4:	200020e4 	.word	0x200020e4
 80095c8:	20002040 	.word	0x20002040
 80095cc:	20002034 	.word	0x20002034
 80095d0:	20002164 	.word	0x20002164
 80095d4:	2000211c 	.word	0x2000211c

080095d8 <vTaskDelay>:
	{
 80095d8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095da:	b1c8      	cbz	r0, 8009610 <vTaskDelay+0x38>
 80095dc:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80095de:	4b12      	ldr	r3, [pc, #72]	; (8009628 <vTaskDelay+0x50>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	b143      	cbz	r3, 80095f6 <vTaskDelay+0x1e>
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	e7fe      	b.n	80095f4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80095f6:	f7ff fecb 	bl	8009390 <vTaskSuspendAll>
				traceTASK_DELAY();
 80095fa:	4621      	mov	r1, r4
 80095fc:	2023      	movs	r0, #35	; 0x23
 80095fe:	f007 fc33 	bl	8010e68 <SEGGER_SYSVIEW_RecordU32>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009602:	2100      	movs	r1, #0
 8009604:	4620      	mov	r0, r4
 8009606:	f7ff fdd5 	bl	80091b4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800960a:	f7ff ff67 	bl	80094dc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800960e:	b948      	cbnz	r0, 8009624 <vTaskDelay+0x4c>
			portYIELD_WITHIN_API();
 8009610:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009618:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	f3bf 8f6f 	isb	sy
	}
 8009624:	bd10      	pop	{r4, pc}
 8009626:	bf00      	nop
 8009628:	200020dc 	.word	0x200020dc

0800962c <vTaskSwitchContext>:
{
 800962c:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800962e:	4b31      	ldr	r3, [pc, #196]	; (80096f4 <vTaskSwitchContext+0xc8>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	b11b      	cbz	r3, 800963c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8009634:	4b30      	ldr	r3, [pc, #192]	; (80096f8 <vTaskSwitchContext+0xcc>)
 8009636:	2201      	movs	r2, #1
 8009638:	601a      	str	r2, [r3, #0]
}
 800963a:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 800963c:	4b2e      	ldr	r3, [pc, #184]	; (80096f8 <vTaskSwitchContext+0xcc>)
 800963e:	2200      	movs	r2, #0
 8009640:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009642:	f7f7 f841 	bl	80006c8 <getRunTimeCounterValue>
 8009646:	4b2d      	ldr	r3, [pc, #180]	; (80096fc <vTaskSwitchContext+0xd0>)
 8009648:	6018      	str	r0, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800964a:	4b2d      	ldr	r3, [pc, #180]	; (8009700 <vTaskSwitchContext+0xd4>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4298      	cmp	r0, r3
 8009650:	d905      	bls.n	800965e <vTaskSwitchContext+0x32>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009652:	4a2c      	ldr	r2, [pc, #176]	; (8009704 <vTaskSwitchContext+0xd8>)
 8009654:	6811      	ldr	r1, [r2, #0]
 8009656:	1ac3      	subs	r3, r0, r3
 8009658:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800965a:	441a      	add	r2, r3
 800965c:	654a      	str	r2, [r1, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800965e:	4b28      	ldr	r3, [pc, #160]	; (8009700 <vTaskSwitchContext+0xd4>)
 8009660:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009662:	4b29      	ldr	r3, [pc, #164]	; (8009708 <vTaskSwitchContext+0xdc>)
 8009664:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009666:	fab3 f383 	clz	r3, r3
 800966a:	b2db      	uxtb	r3, r3
 800966c:	f1c3 031f 	rsb	r3, r3, #31
 8009670:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009674:	0092      	lsls	r2, r2, #2
 8009676:	4925      	ldr	r1, [pc, #148]	; (800970c <vTaskSwitchContext+0xe0>)
 8009678:	588a      	ldr	r2, [r1, r2]
 800967a:	b942      	cbnz	r2, 800968e <vTaskSwitchContext+0x62>
	__asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	e7fe      	b.n	800968c <vTaskSwitchContext+0x60>
 800968e:	491f      	ldr	r1, [pc, #124]	; (800970c <vTaskSwitchContext+0xe0>)
 8009690:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009694:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009698:	6850      	ldr	r0, [r2, #4]
 800969a:	6840      	ldr	r0, [r0, #4]
 800969c:	6050      	str	r0, [r2, #4]
 800969e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80096a2:	0092      	lsls	r2, r2, #2
 80096a4:	3208      	adds	r2, #8
 80096a6:	4411      	add	r1, r2
 80096a8:	4288      	cmp	r0, r1
 80096aa:	d017      	beq.n	80096dc <vTaskSwitchContext+0xb0>
 80096ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80096b0:	4a16      	ldr	r2, [pc, #88]	; (800970c <vTaskSwitchContext+0xe0>)
 80096b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	68da      	ldr	r2, [r3, #12]
 80096ba:	4b12      	ldr	r3, [pc, #72]	; (8009704 <vTaskSwitchContext+0xd8>)
 80096bc:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	4b13      	ldr	r3, [pc, #76]	; (8009710 <vTaskSwitchContext+0xe4>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d011      	beq.n	80096ec <vTaskSwitchContext+0xc0>
 80096c8:	4b0e      	ldr	r3, [pc, #56]	; (8009704 <vTaskSwitchContext+0xd8>)
 80096ca:	6818      	ldr	r0, [r3, #0]
 80096cc:	f007 fdbe 	bl	801124c <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096d0:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <vTaskSwitchContext+0xd8>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	3358      	adds	r3, #88	; 0x58
 80096d6:	4a0f      	ldr	r2, [pc, #60]	; (8009714 <vTaskSwitchContext+0xe8>)
 80096d8:	6013      	str	r3, [r2, #0]
}
 80096da:	e7ae      	b.n	800963a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096dc:	6840      	ldr	r0, [r0, #4]
 80096de:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80096e2:	4a0a      	ldr	r2, [pc, #40]	; (800970c <vTaskSwitchContext+0xe0>)
 80096e4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80096e8:	6050      	str	r0, [r2, #4]
 80096ea:	e7df      	b.n	80096ac <vTaskSwitchContext+0x80>
		traceTASK_SWITCHED_IN();
 80096ec:	f007 fd76 	bl	80111dc <SEGGER_SYSVIEW_OnIdle>
 80096f0:	e7ee      	b.n	80096d0 <vTaskSwitchContext+0xa4>
 80096f2:	bf00      	nop
 80096f4:	200020dc 	.word	0x200020dc
 80096f8:	20002164 	.word	0x20002164
 80096fc:	200020d0 	.word	0x200020d0
 8009700:	200020cc 	.word	0x200020cc
 8009704:	20002034 	.word	0x20002034
 8009708:	200020e4 	.word	0x200020e4
 800970c:	20002040 	.word	0x20002040
 8009710:	20002110 	.word	0x20002110
 8009714:	20001868 	.word	0x20001868

08009718 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009718:	b158      	cbz	r0, 8009732 <vTaskPlaceOnEventList+0x1a>
{
 800971a:	b510      	push	{r4, lr}
 800971c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800971e:	4a09      	ldr	r2, [pc, #36]	; (8009744 <vTaskPlaceOnEventList+0x2c>)
 8009720:	6811      	ldr	r1, [r2, #0]
 8009722:	3118      	adds	r1, #24
 8009724:	f7ff f83b 	bl	800879e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009728:	2101      	movs	r1, #1
 800972a:	4620      	mov	r0, r4
 800972c:	f7ff fd42 	bl	80091b4 <prvAddCurrentTaskToDelayedList>
}
 8009730:	bd10      	pop	{r4, pc}
 8009732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8009742:	e7fe      	b.n	8009742 <vTaskPlaceOnEventList+0x2a>
 8009744:	20002034 	.word	0x20002034

08009748 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 8009748:	b170      	cbz	r0, 8009768 <vTaskPlaceOnUnorderedEventList+0x20>
{
 800974a:	b510      	push	{r4, lr}
 800974c:	4614      	mov	r4, r2
 800974e:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 8009750:	4b11      	ldr	r3, [pc, #68]	; (8009798 <vTaskPlaceOnUnorderedEventList+0x50>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	b98b      	cbnz	r3, 800977a <vTaskPlaceOnUnorderedEventList+0x32>
 8009756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	e7fe      	b.n	8009766 <vTaskPlaceOnUnorderedEventList+0x1e>
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8009778:	e7fe      	b.n	8009778 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800977a:	4b08      	ldr	r3, [pc, #32]	; (800979c <vTaskPlaceOnUnorderedEventList+0x54>)
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8009782:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009784:	6819      	ldr	r1, [r3, #0]
 8009786:	3118      	adds	r1, #24
 8009788:	4610      	mov	r0, r2
 800978a:	f7fe fffd 	bl	8008788 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800978e:	2101      	movs	r1, #1
 8009790:	4620      	mov	r0, r4
 8009792:	f7ff fd0f 	bl	80091b4 <prvAddCurrentTaskToDelayedList>
}
 8009796:	bd10      	pop	{r4, pc}
 8009798:	200020dc 	.word	0x200020dc
 800979c:	20002034 	.word	0x20002034

080097a0 <vTaskPlaceOnEventListRestricted>:
	{
 80097a0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80097a2:	b188      	cbz	r0, 80097c8 <vTaskPlaceOnEventListRestricted+0x28>
 80097a4:	460d      	mov	r5, r1
 80097a6:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097a8:	4a0c      	ldr	r2, [pc, #48]	; (80097dc <vTaskPlaceOnEventListRestricted+0x3c>)
 80097aa:	6811      	ldr	r1, [r2, #0]
 80097ac:	3118      	adds	r1, #24
 80097ae:	f7fe ffeb 	bl	8008788 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80097b2:	b10c      	cbz	r4, 80097b8 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80097b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80097b8:	2024      	movs	r0, #36	; 0x24
 80097ba:	f007 fb41 	bl	8010e40 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097be:	4621      	mov	r1, r4
 80097c0:	4628      	mov	r0, r5
 80097c2:	f7ff fcf7 	bl	80091b4 <prvAddCurrentTaskToDelayedList>
	}
 80097c6:	bd38      	pop	{r3, r4, r5, pc}
 80097c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80097d8:	e7fe      	b.n	80097d8 <vTaskPlaceOnEventListRestricted+0x38>
 80097da:	bf00      	nop
 80097dc:	20002034 	.word	0x20002034

080097e0 <xTaskRemoveFromEventList>:
{
 80097e0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097e2:	68c3      	ldr	r3, [r0, #12]
 80097e4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80097e6:	b33c      	cbz	r4, 8009838 <xTaskRemoveFromEventList+0x58>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097e8:	f104 0518 	add.w	r5, r4, #24
 80097ec:	4628      	mov	r0, r5
 80097ee:	f7fe ffef 	bl	80087d0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097f2:	4b19      	ldr	r3, [pc, #100]	; (8009858 <xTaskRemoveFromEventList+0x78>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	bb43      	cbnz	r3, 800984a <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097f8:	1d25      	adds	r5, r4, #4
 80097fa:	4628      	mov	r0, r5
 80097fc:	f7fe ffe8 	bl	80087d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009800:	4620      	mov	r0, r4
 8009802:	f007 fd47 	bl	8011294 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009806:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009808:	2301      	movs	r3, #1
 800980a:	4083      	lsls	r3, r0
 800980c:	4a13      	ldr	r2, [pc, #76]	; (800985c <xTaskRemoveFromEventList+0x7c>)
 800980e:	6811      	ldr	r1, [r2, #0]
 8009810:	430b      	orrs	r3, r1
 8009812:	6013      	str	r3, [r2, #0]
 8009814:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009818:	4629      	mov	r1, r5
 800981a:	4b11      	ldr	r3, [pc, #68]	; (8009860 <xTaskRemoveFromEventList+0x80>)
 800981c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009820:	f7fe ffb2 	bl	8008788 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009824:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009826:	4b0f      	ldr	r3, [pc, #60]	; (8009864 <xTaskRemoveFromEventList+0x84>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	429a      	cmp	r2, r3
 800982e:	d911      	bls.n	8009854 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8009830:	2001      	movs	r0, #1
 8009832:	4b0d      	ldr	r3, [pc, #52]	; (8009868 <xTaskRemoveFromEventList+0x88>)
 8009834:	6018      	str	r0, [r3, #0]
}
 8009836:	bd38      	pop	{r3, r4, r5, pc}
 8009838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8009848:	e7fe      	b.n	8009848 <xTaskRemoveFromEventList+0x68>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800984a:	4629      	mov	r1, r5
 800984c:	4807      	ldr	r0, [pc, #28]	; (800986c <xTaskRemoveFromEventList+0x8c>)
 800984e:	f7fe ff9b 	bl	8008788 <vListInsertEnd>
 8009852:	e7e7      	b.n	8009824 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 8009854:	2000      	movs	r0, #0
	return xReturn;
 8009856:	e7ee      	b.n	8009836 <xTaskRemoveFromEventList+0x56>
 8009858:	200020dc 	.word	0x200020dc
 800985c:	200020e4 	.word	0x200020e4
 8009860:	20002040 	.word	0x20002040
 8009864:	20002034 	.word	0x20002034
 8009868:	20002164 	.word	0x20002164
 800986c:	20002120 	.word	0x20002120

08009870 <vTaskRemoveFromUnorderedEventList>:
{
 8009870:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009872:	4b1e      	ldr	r3, [pc, #120]	; (80098ec <vTaskRemoveFromUnorderedEventList+0x7c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	b943      	cbnz	r3, 800988a <vTaskRemoveFromUnorderedEventList+0x1a>
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	e7fe      	b.n	8009888 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800988a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800988e:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009890:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 8009892:	b30c      	cbz	r4, 80098d8 <vTaskRemoveFromUnorderedEventList+0x68>
	( void ) uxListRemove( pxEventListItem );
 8009894:	f7fe ff9c 	bl	80087d0 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009898:	1d25      	adds	r5, r4, #4
 800989a:	4628      	mov	r0, r5
 800989c:	f7fe ff98 	bl	80087d0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80098a0:	4620      	mov	r0, r4
 80098a2:	f007 fcf7 	bl	8011294 <SEGGER_SYSVIEW_OnTaskStartReady>
 80098a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80098a8:	2301      	movs	r3, #1
 80098aa:	4083      	lsls	r3, r0
 80098ac:	4a10      	ldr	r2, [pc, #64]	; (80098f0 <vTaskRemoveFromUnorderedEventList+0x80>)
 80098ae:	6811      	ldr	r1, [r2, #0]
 80098b0:	430b      	orrs	r3, r1
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80098b8:	4629      	mov	r1, r5
 80098ba:	4b0e      	ldr	r3, [pc, #56]	; (80098f4 <vTaskRemoveFromUnorderedEventList+0x84>)
 80098bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80098c0:	f7fe ff62 	bl	8008788 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80098c6:	4b0c      	ldr	r3, [pc, #48]	; (80098f8 <vTaskRemoveFromUnorderedEventList+0x88>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d902      	bls.n	80098d6 <vTaskRemoveFromUnorderedEventList+0x66>
		xYieldPending = pdTRUE;
 80098d0:	4b0a      	ldr	r3, [pc, #40]	; (80098fc <vTaskRemoveFromUnorderedEventList+0x8c>)
 80098d2:	2201      	movs	r2, #1
 80098d4:	601a      	str	r2, [r3, #0]
}
 80098d6:	bd38      	pop	{r3, r4, r5, pc}
 80098d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80098e8:	e7fe      	b.n	80098e8 <vTaskRemoveFromUnorderedEventList+0x78>
 80098ea:	bf00      	nop
 80098ec:	200020dc 	.word	0x200020dc
 80098f0:	200020e4 	.word	0x200020e4
 80098f4:	20002040 	.word	0x20002040
 80098f8:	20002034 	.word	0x20002034
 80098fc:	20002164 	.word	0x20002164

08009900 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009900:	4b03      	ldr	r3, [pc, #12]	; (8009910 <vTaskInternalSetTimeOutState+0x10>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009906:	4b03      	ldr	r3, [pc, #12]	; (8009914 <vTaskInternalSetTimeOutState+0x14>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6043      	str	r3, [r0, #4]
}
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	20002118 	.word	0x20002118
 8009914:	20002160 	.word	0x20002160

08009918 <xTaskCheckForTimeOut>:
{
 8009918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800991a:	b1c8      	cbz	r0, 8009950 <xTaskCheckForTimeOut+0x38>
 800991c:	460c      	mov	r4, r1
 800991e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009920:	b1f9      	cbz	r1, 8009962 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8009922:	f000 fb97 	bl	800a054 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009926:	4b1b      	ldr	r3, [pc, #108]	; (8009994 <xTaskCheckForTimeOut+0x7c>)
 8009928:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800992a:	686b      	ldr	r3, [r5, #4]
 800992c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800992e:	6822      	ldr	r2, [r4, #0]
 8009930:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009934:	d026      	beq.n	8009984 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009936:	4e18      	ldr	r6, [pc, #96]	; (8009998 <xTaskCheckForTimeOut+0x80>)
 8009938:	6836      	ldr	r6, [r6, #0]
 800993a:	682f      	ldr	r7, [r5, #0]
 800993c:	42b7      	cmp	r7, r6
 800993e:	d001      	beq.n	8009944 <xTaskCheckForTimeOut+0x2c>
 8009940:	428b      	cmp	r3, r1
 8009942:	d924      	bls.n	800998e <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009944:	4282      	cmp	r2, r0
 8009946:	d815      	bhi.n	8009974 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800994c:	2401      	movs	r4, #1
 800994e:	e01a      	b.n	8009986 <xTaskCheckForTimeOut+0x6e>
 8009950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8009960:	e7fe      	b.n	8009960 <xTaskCheckForTimeOut+0x48>
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8009972:	e7fe      	b.n	8009972 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8009974:	1a5b      	subs	r3, r3, r1
 8009976:	4413      	add	r3, r2
 8009978:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800997a:	4628      	mov	r0, r5
 800997c:	f7ff ffc0 	bl	8009900 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009980:	2400      	movs	r4, #0
 8009982:	e000      	b.n	8009986 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8009984:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009986:	f000 fb87 	bl	800a098 <vPortExitCritical>
}
 800998a:	4620      	mov	r0, r4
 800998c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800998e:	2401      	movs	r4, #1
 8009990:	e7f9      	b.n	8009986 <xTaskCheckForTimeOut+0x6e>
 8009992:	bf00      	nop
 8009994:	20002160 	.word	0x20002160
 8009998:	20002118 	.word	0x20002118

0800999c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800999c:	4b01      	ldr	r3, [pc, #4]	; (80099a4 <vTaskMissedYield+0x8>)
 800999e:	2201      	movs	r2, #1
 80099a0:	601a      	str	r2, [r3, #0]
}
 80099a2:	4770      	bx	lr
 80099a4:	20002164 	.word	0x20002164

080099a8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80099a8:	4b05      	ldr	r3, [pc, #20]	; (80099c0 <xTaskGetSchedulerState+0x18>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	b133      	cbz	r3, 80099bc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ae:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <xTaskGetSchedulerState+0x1c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	b10b      	cbz	r3, 80099b8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80099b4:	2000      	movs	r0, #0
	}
 80099b6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80099b8:	2002      	movs	r0, #2
 80099ba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099bc:	2001      	movs	r0, #1
 80099be:	4770      	bx	lr
 80099c0:	20002134 	.word	0x20002134
 80099c4:	200020dc 	.word	0x200020dc

080099c8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d053      	beq.n	8009a74 <xTaskPriorityDisinherit+0xac>
	{
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80099d0:	4b2a      	ldr	r3, [pc, #168]	; (8009a7c <xTaskPriorityDisinherit+0xb4>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4283      	cmp	r3, r0
 80099d6:	d008      	beq.n	80099ea <xTaskPriorityDisinherit+0x22>
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	e7fe      	b.n	80099e8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80099ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80099ec:	b943      	cbnz	r3, 8009a00 <xTaskPriorityDisinherit+0x38>
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	e7fe      	b.n	80099fe <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8009a00:	3b01      	subs	r3, #1
 8009a02:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a04:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009a06:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8009a08:	4291      	cmp	r1, r2
 8009a0a:	d035      	beq.n	8009a78 <xTaskPriorityDisinherit+0xb0>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a0c:	b10b      	cbz	r3, 8009a12 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8009a0e:	2000      	movs	r0, #0
	}
 8009a10:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a12:	1d05      	adds	r5, r0, #4
 8009a14:	4628      	mov	r0, r5
 8009a16:	f7fe fedb 	bl	80087d0 <uxListRemove>
 8009a1a:	b968      	cbnz	r0, 8009a38 <xTaskPriorityDisinherit+0x70>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009a1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a1e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009a22:	0092      	lsls	r2, r2, #2
 8009a24:	4916      	ldr	r1, [pc, #88]	; (8009a80 <xTaskPriorityDisinherit+0xb8>)
 8009a26:	588a      	ldr	r2, [r1, r2]
 8009a28:	b932      	cbnz	r2, 8009a38 <xTaskPriorityDisinherit+0x70>
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	409a      	lsls	r2, r3
 8009a2e:	4915      	ldr	r1, [pc, #84]	; (8009a84 <xTaskPriorityDisinherit+0xbc>)
 8009a30:	680b      	ldr	r3, [r1, #0]
 8009a32:	ea23 0302 	bic.w	r3, r3, r2
 8009a36:	600b      	str	r3, [r1, #0]
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8009a38:	4621      	mov	r1, r4
 8009a3a:	204a      	movs	r0, #74	; 0x4a
 8009a3c:	f007 fa14 	bl	8010e68 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a40:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009a42:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a44:	f1c3 0307 	rsb	r3, r3, #7
 8009a48:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f007 fc22 	bl	8011294 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009a50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009a52:	2401      	movs	r4, #1
 8009a54:	fa04 f300 	lsl.w	r3, r4, r0
 8009a58:	4a0a      	ldr	r2, [pc, #40]	; (8009a84 <xTaskPriorityDisinherit+0xbc>)
 8009a5a:	6811      	ldr	r1, [r2, #0]
 8009a5c:	430b      	orrs	r3, r1
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009a64:	4629      	mov	r1, r5
 8009a66:	4b06      	ldr	r3, [pc, #24]	; (8009a80 <xTaskPriorityDisinherit+0xb8>)
 8009a68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009a6c:	f7fe fe8c 	bl	8008788 <vListInsertEnd>
					xReturn = pdTRUE;
 8009a70:	4620      	mov	r0, r4
 8009a72:	e7cd      	b.n	8009a10 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8009a74:	2000      	movs	r0, #0
	}
 8009a76:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8009a78:	2000      	movs	r0, #0
 8009a7a:	e7c9      	b.n	8009a10 <xTaskPriorityDisinherit+0x48>
 8009a7c:	20002034 	.word	0x20002034
 8009a80:	20002040 	.word	0x20002040
 8009a84:	200020e4 	.word	0x200020e4

08009a88 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009a88:	4a04      	ldr	r2, [pc, #16]	; (8009a9c <uxTaskResetEventItemValue+0x14>)
 8009a8a:	6813      	ldr	r3, [r2, #0]
 8009a8c:	6998      	ldr	r0, [r3, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a8e:	6813      	ldr	r3, [r2, #0]
 8009a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a92:	6812      	ldr	r2, [r2, #0]
 8009a94:	f1c3 0307 	rsb	r3, r3, #7
 8009a98:	6193      	str	r3, [r2, #24]
}
 8009a9a:	4770      	bx	lr
 8009a9c:	20002034 	.word	0x20002034

08009aa0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009aa0:	4b06      	ldr	r3, [pc, #24]	; (8009abc <prvGetNextExpireTime+0x1c>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	6813      	ldr	r3, [r2, #0]
 8009aa6:	b92b      	cbnz	r3, 8009ab4 <prvGetNextExpireTime+0x14>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009aac:	b923      	cbnz	r3, 8009ab8 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009aae:	68d3      	ldr	r3, [r2, #12]
 8009ab0:	6818      	ldr	r0, [r3, #0]
 8009ab2:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	e7f8      	b.n	8009aaa <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ab8:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8009aba:	4770      	bx	lr
 8009abc:	20002168 	.word	0x20002168

08009ac0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ac0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ac2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ac4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ac6:	4291      	cmp	r1, r2
 8009ac8:	d80c      	bhi.n	8009ae4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aca:	1ad2      	subs	r2, r2, r3
 8009acc:	6983      	ldr	r3, [r0, #24]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d301      	bcc.n	8009ad6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ad2:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8009ad4:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ad6:	1d01      	adds	r1, r0, #4
 8009ad8:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <prvInsertTimerInActiveList+0x40>)
 8009ada:	6818      	ldr	r0, [r3, #0]
 8009adc:	f7fe fe5f 	bl	800879e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	e7f7      	b.n	8009ad4 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d201      	bcs.n	8009aec <prvInsertTimerInActiveList+0x2c>
 8009ae8:	4299      	cmp	r1, r3
 8009aea:	d206      	bcs.n	8009afa <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009aec:	1d01      	adds	r1, r0, #4
 8009aee:	4b05      	ldr	r3, [pc, #20]	; (8009b04 <prvInsertTimerInActiveList+0x44>)
 8009af0:	6818      	ldr	r0, [r3, #0]
 8009af2:	f7fe fe54 	bl	800879e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009af6:	2000      	movs	r0, #0
 8009af8:	e7ec      	b.n	8009ad4 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8009afa:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009afc:	e7ea      	b.n	8009ad4 <prvInsertTimerInActiveList+0x14>
 8009afe:	bf00      	nop
 8009b00:	2000216c 	.word	0x2000216c
 8009b04:	20002168 	.word	0x20002168

08009b08 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b08:	b538      	push	{r3, r4, r5, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b0a:	f000 faa3 	bl	800a054 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <prvCheckForValidListAndQueue+0x44>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	b113      	cbz	r3, 8009b1a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b14:	f000 fac0 	bl	800a098 <vPortExitCritical>
}
 8009b18:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8009b1a:	4d0d      	ldr	r5, [pc, #52]	; (8009b50 <prvCheckForValidListAndQueue+0x48>)
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	f7fe fe25 	bl	800876c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b22:	4c0c      	ldr	r4, [pc, #48]	; (8009b54 <prvCheckForValidListAndQueue+0x4c>)
 8009b24:	4620      	mov	r0, r4
 8009b26:	f7fe fe21 	bl	800876c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b2a:	4b0b      	ldr	r3, [pc, #44]	; (8009b58 <prvCheckForValidListAndQueue+0x50>)
 8009b2c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b2e:	4b0b      	ldr	r3, [pc, #44]	; (8009b5c <prvCheckForValidListAndQueue+0x54>)
 8009b30:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009b32:	2200      	movs	r2, #0
 8009b34:	2110      	movs	r1, #16
 8009b36:	200a      	movs	r0, #10
 8009b38:	f7fe ff57 	bl	80089ea <xQueueGenericCreate>
 8009b3c:	4b03      	ldr	r3, [pc, #12]	; (8009b4c <prvCheckForValidListAndQueue+0x44>)
 8009b3e:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d0e7      	beq.n	8009b14 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b44:	4906      	ldr	r1, [pc, #24]	; (8009b60 <prvCheckForValidListAndQueue+0x58>)
 8009b46:	f7ff f9a7 	bl	8008e98 <vQueueAddToRegistry>
 8009b4a:	e7e3      	b.n	8009b14 <prvCheckForValidListAndQueue+0xc>
 8009b4c:	2000219c 	.word	0x2000219c
 8009b50:	20002170 	.word	0x20002170
 8009b54:	20002184 	.word	0x20002184
 8009b58:	20002168 	.word	0x20002168
 8009b5c:	2000216c 	.word	0x2000216c
 8009b60:	08013158 	.word	0x08013158

08009b64 <prvInitialiseNewTimer>:
{
 8009b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b68:	9f07      	ldr	r7, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009b6a:	b941      	cbnz	r1, 8009b7e <prvInitialiseNewTimer+0x1a>
 8009b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	e7fe      	b.n	8009b7c <prvInitialiseNewTimer+0x18>
 8009b7e:	4606      	mov	r6, r0
 8009b80:	4614      	mov	r4, r2
 8009b82:	461d      	mov	r5, r3
 8009b84:	4688      	mov	r8, r1
	if( pxNewTimer != NULL )
 8009b86:	b18f      	cbz	r7, 8009bac <prvInitialiseNewTimer+0x48>
		prvCheckForValidListAndQueue();
 8009b88:	f7ff ffbe 	bl	8009b08 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8009b8c:	603e      	str	r6, [r7, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009b8e:	f8c7 8018 	str.w	r8, [r7, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009b92:	61fd      	str	r5, [r7, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009b94:	9b06      	ldr	r3, [sp, #24]
 8009b96:	623b      	str	r3, [r7, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009b98:	1d38      	adds	r0, r7, #4
 8009b9a:	f7fe fdf2 	bl	8008782 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009b9e:	b12c      	cbz	r4, 8009bac <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009ba0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ba4:	f043 0304 	orr.w	r3, r3, #4
 8009ba8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
}
 8009bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009bb0 <xTimerCreateTimerTask>:
{
 8009bb0:	b500      	push	{lr}
 8009bb2:	b083      	sub	sp, #12
	prvCheckForValidListAndQueue();
 8009bb4:	f7ff ffa8 	bl	8009b08 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009bb8:	4b0d      	ldr	r3, [pc, #52]	; (8009bf0 <xTimerCreateTimerTask+0x40>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	b15b      	cbz	r3, 8009bd6 <xTimerCreateTimerTask+0x26>
			xReturn = xTaskCreate(	prvTimerTask,
 8009bbe:	4b0d      	ldr	r3, [pc, #52]	; (8009bf4 <xTimerCreateTimerTask+0x44>)
 8009bc0:	9301      	str	r3, [sp, #4]
 8009bc2:	2306      	movs	r3, #6
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bcc:	490a      	ldr	r1, [pc, #40]	; (8009bf8 <xTimerCreateTimerTask+0x48>)
 8009bce:	480b      	ldr	r0, [pc, #44]	; (8009bfc <xTimerCreateTimerTask+0x4c>)
 8009bd0:	f7ff fb54 	bl	800927c <xTaskCreate>
	configASSERT( xReturn );
 8009bd4:	b940      	cbnz	r0, 8009be8 <xTimerCreateTimerTask+0x38>
 8009bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	e7fe      	b.n	8009be6 <xTimerCreateTimerTask+0x36>
}
 8009be8:	b003      	add	sp, #12
 8009bea:	f85d fb04 	ldr.w	pc, [sp], #4
 8009bee:	bf00      	nop
 8009bf0:	2000219c 	.word	0x2000219c
 8009bf4:	200021a0 	.word	0x200021a0
 8009bf8:	08013160 	.word	0x08013160
 8009bfc:	08009f39 	.word	0x08009f39

08009c00 <xTimerCreate>:
	{
 8009c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c04:	b082      	sub	sp, #8
 8009c06:	4604      	mov	r4, r0
 8009c08:	4688      	mov	r8, r1
 8009c0a:	4617      	mov	r7, r2
 8009c0c:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009c0e:	202c      	movs	r0, #44	; 0x2c
 8009c10:	f000 fbd8 	bl	800a3c4 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8009c14:	4606      	mov	r6, r0
 8009c16:	b158      	cbz	r0, 8009c30 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009c1e:	9001      	str	r0, [sp, #4]
 8009c20:	9b08      	ldr	r3, [sp, #32]
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	462b      	mov	r3, r5
 8009c26:	463a      	mov	r2, r7
 8009c28:	4641      	mov	r1, r8
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f7ff ff9a 	bl	8009b64 <prvInitialiseNewTimer>
	}
 8009c30:	4630      	mov	r0, r6
 8009c32:	b002      	add	sp, #8
 8009c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009c38 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8009c38:	b1b8      	cbz	r0, 8009c6a <xTimerGenericCommand+0x32>
 8009c3a:	469c      	mov	ip, r3
 8009c3c:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8009c3e:	4818      	ldr	r0, [pc, #96]	; (8009ca0 <xTimerGenericCommand+0x68>)
 8009c40:	6800      	ldr	r0, [r0, #0]
 8009c42:	b358      	cbz	r0, 8009c9c <xTimerGenericCommand+0x64>
{
 8009c44:	b500      	push	{lr}
 8009c46:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8009c48:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c4a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c4c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c4e:	2905      	cmp	r1, #5
 8009c50:	dc1c      	bgt.n	8009c8c <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c52:	f7ff fea9 	bl	80099a8 <xTaskGetSchedulerState>
 8009c56:	2802      	cmp	r0, #2
 8009c58:	d010      	beq.n	8009c7c <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	4669      	mov	r1, sp
 8009c60:	480f      	ldr	r0, [pc, #60]	; (8009ca0 <xTimerGenericCommand+0x68>)
 8009c62:	6800      	ldr	r0, [r0, #0]
 8009c64:	f7fe fee2 	bl	8008a2c <xQueueGenericSend>
 8009c68:	e015      	b.n	8009c96 <xTimerGenericCommand+0x5e>
 8009c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8009c7a:	e7fe      	b.n	8009c7a <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	9a06      	ldr	r2, [sp, #24]
 8009c80:	4669      	mov	r1, sp
 8009c82:	4807      	ldr	r0, [pc, #28]	; (8009ca0 <xTimerGenericCommand+0x68>)
 8009c84:	6800      	ldr	r0, [r0, #0]
 8009c86:	f7fe fed1 	bl	8008a2c <xQueueGenericSend>
 8009c8a:	e004      	b.n	8009c96 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	4662      	mov	r2, ip
 8009c90:	4669      	mov	r1, sp
 8009c92:	f7fe ffad 	bl	8008bf0 <xQueueGenericSendFromISR>
}
 8009c96:	b005      	add	sp, #20
 8009c98:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8009c9c:	2000      	movs	r0, #0
}
 8009c9e:	4770      	bx	lr
 8009ca0:	2000219c 	.word	0x2000219c

08009ca4 <prvSwitchTimerLists>:
{
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ca8:	4b1b      	ldr	r3, [pc, #108]	; (8009d18 <prvSwitchTimerLists+0x74>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	b362      	cbz	r2, 8009d0a <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cb4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cb6:	1d25      	adds	r5, r4, #4
 8009cb8:	4628      	mov	r0, r5
 8009cba:	f7fe fd89 	bl	80087d0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cbe:	6a23      	ldr	r3, [r4, #32]
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cc4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009cc8:	f013 0f04 	tst.w	r3, #4
 8009ccc:	d0ec      	beq.n	8009ca8 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009cce:	69a3      	ldr	r3, [r4, #24]
 8009cd0:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009cd2:	429e      	cmp	r6, r3
 8009cd4:	d207      	bcs.n	8009ce6 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009cd6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cd8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cda:	4629      	mov	r1, r5
 8009cdc:	4b0e      	ldr	r3, [pc, #56]	; (8009d18 <prvSwitchTimerLists+0x74>)
 8009cde:	6818      	ldr	r0, [r3, #0]
 8009ce0:	f7fe fd5d 	bl	800879e <vListInsert>
 8009ce4:	e7e0      	b.n	8009ca8 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	9100      	str	r1, [sp, #0]
 8009cea:	460b      	mov	r3, r1
 8009cec:	4632      	mov	r2, r6
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f7ff ffa2 	bl	8009c38 <xTimerGenericCommand>
				configASSERT( xResult );
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d1d7      	bne.n	8009ca8 <prvSwitchTimerLists+0x4>
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	e7fe      	b.n	8009d08 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8009d0a:	4a04      	ldr	r2, [pc, #16]	; (8009d1c <prvSwitchTimerLists+0x78>)
 8009d0c:	6810      	ldr	r0, [r2, #0]
 8009d0e:	4902      	ldr	r1, [pc, #8]	; (8009d18 <prvSwitchTimerLists+0x74>)
 8009d10:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8009d12:	6013      	str	r3, [r2, #0]
}
 8009d14:	b002      	add	sp, #8
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
 8009d18:	20002168 	.word	0x20002168
 8009d1c:	2000216c 	.word	0x2000216c

08009d20 <prvSampleTimeNow>:
{
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8009d24:	f7ff fb3c 	bl	80093a0 <xTaskGetTickCount>
 8009d28:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8009d2a:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <prvSampleTimeNow+0x28>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4283      	cmp	r3, r0
 8009d30:	d805      	bhi.n	8009d3e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8009d32:	2300      	movs	r3, #0
 8009d34:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8009d36:	4b04      	ldr	r3, [pc, #16]	; (8009d48 <prvSampleTimeNow+0x28>)
 8009d38:	601c      	str	r4, [r3, #0]
}
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8009d3e:	f7ff ffb1 	bl	8009ca4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d42:	2301      	movs	r3, #1
 8009d44:	602b      	str	r3, [r5, #0]
 8009d46:	e7f6      	b.n	8009d36 <prvSampleTimeNow+0x16>
 8009d48:	20002198 	.word	0x20002198

08009d4c <prvProcessExpiredTimer>:
{
 8009d4c:	b570      	push	{r4, r5, r6, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	4606      	mov	r6, r0
 8009d52:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d54:	4917      	ldr	r1, [pc, #92]	; (8009db4 <prvProcessExpiredTimer+0x68>)
 8009d56:	6809      	ldr	r1, [r1, #0]
 8009d58:	68c9      	ldr	r1, [r1, #12]
 8009d5a:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d5c:	1d20      	adds	r0, r4, #4
 8009d5e:	f7fe fd37 	bl	80087d0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d62:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 8009d66:	f01c 0f04 	tst.w	ip, #4
 8009d6a:	d108      	bne.n	8009d7e <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d6c:	f02c 0c01 	bic.w	ip, ip, #1
 8009d70:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d74:	6a23      	ldr	r3, [r4, #32]
 8009d76:	4620      	mov	r0, r4
 8009d78:	4798      	blx	r3
}
 8009d7a:	b002      	add	sp, #8
 8009d7c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d7e:	69a1      	ldr	r1, [r4, #24]
 8009d80:	4633      	mov	r3, r6
 8009d82:	462a      	mov	r2, r5
 8009d84:	4431      	add	r1, r6
 8009d86:	4620      	mov	r0, r4
 8009d88:	f7ff fe9a 	bl	8009ac0 <prvInsertTimerInActiveList>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d0f1      	beq.n	8009d74 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d90:	2100      	movs	r1, #0
 8009d92:	9100      	str	r1, [sp, #0]
 8009d94:	460b      	mov	r3, r1
 8009d96:	4632      	mov	r2, r6
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f7ff ff4d 	bl	8009c38 <xTimerGenericCommand>
			configASSERT( xResult );
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d1e8      	bne.n	8009d74 <prvProcessExpiredTimer+0x28>
 8009da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	e7fe      	b.n	8009db2 <prvProcessExpiredTimer+0x66>
 8009db4:	20002168 	.word	0x20002168

08009db8 <prvProcessTimerOrBlockTask>:
{
 8009db8:	b570      	push	{r4, r5, r6, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8009dc0:	f7ff fae6 	bl	8009390 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dc4:	a801      	add	r0, sp, #4
 8009dc6:	f7ff ffab 	bl	8009d20 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009dca:	9b01      	ldr	r3, [sp, #4]
 8009dcc:	bb33      	cbnz	r3, 8009e1c <prvProcessTimerOrBlockTask+0x64>
 8009dce:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009dd0:	b90c      	cbnz	r4, 8009dd6 <prvProcessTimerOrBlockTask+0x1e>
 8009dd2:	42b0      	cmp	r0, r6
 8009dd4:	d219      	bcs.n	8009e0a <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
 8009dd6:	b124      	cbz	r4, 8009de2 <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009dd8:	4a12      	ldr	r2, [pc, #72]	; (8009e24 <prvProcessTimerOrBlockTask+0x6c>)
 8009dda:	6812      	ldr	r2, [r2, #0]
 8009ddc:	6812      	ldr	r2, [r2, #0]
 8009dde:	b9da      	cbnz	r2, 8009e18 <prvProcessTimerOrBlockTask+0x60>
 8009de0:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009de2:	4622      	mov	r2, r4
 8009de4:	1b71      	subs	r1, r6, r5
 8009de6:	4b10      	ldr	r3, [pc, #64]	; (8009e28 <prvProcessTimerOrBlockTask+0x70>)
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	f7ff f871 	bl	8008ed0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009dee:	f7ff fb75 	bl	80094dc <xTaskResumeAll>
 8009df2:	b9a8      	cbnz	r0, 8009e20 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8009df4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	e00a      	b.n	8009e20 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8009e0a:	f7ff fb67 	bl	80094dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e0e:	4629      	mov	r1, r5
 8009e10:	4630      	mov	r0, r6
 8009e12:	f7ff ff9b 	bl	8009d4c <prvProcessExpiredTimer>
 8009e16:	e003      	b.n	8009e20 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e18:	461c      	mov	r4, r3
 8009e1a:	e7e2      	b.n	8009de2 <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 8009e1c:	f7ff fb5e 	bl	80094dc <xTaskResumeAll>
}
 8009e20:	b002      	add	sp, #8
 8009e22:	bd70      	pop	{r4, r5, r6, pc}
 8009e24:	2000216c 	.word	0x2000216c
 8009e28:	2000219c 	.word	0x2000219c

08009e2c <prvProcessReceivedCommands>:
{
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e30:	e002      	b.n	8009e38 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e32:	9b04      	ldr	r3, [sp, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	da0f      	bge.n	8009e58 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e38:	2200      	movs	r2, #0
 8009e3a:	a904      	add	r1, sp, #16
 8009e3c:	4b3d      	ldr	r3, [pc, #244]	; (8009f34 <prvProcessReceivedCommands+0x108>)
 8009e3e:	6818      	ldr	r0, [r3, #0]
 8009e40:	f7fe ff4d 	bl	8008cde <xQueueReceive>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d073      	beq.n	8009f30 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e48:	9b04      	ldr	r3, [sp, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	daf1      	bge.n	8009e32 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e4e:	9907      	ldr	r1, [sp, #28]
 8009e50:	9806      	ldr	r0, [sp, #24]
 8009e52:	9b05      	ldr	r3, [sp, #20]
 8009e54:	4798      	blx	r3
 8009e56:	e7ec      	b.n	8009e32 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e58:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e5a:	6963      	ldr	r3, [r4, #20]
 8009e5c:	b113      	cbz	r3, 8009e64 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e5e:	1d20      	adds	r0, r4, #4
 8009e60:	f7fe fcb6 	bl	80087d0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e64:	a803      	add	r0, sp, #12
 8009e66:	f7ff ff5b 	bl	8009d20 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009e6a:	9b04      	ldr	r3, [sp, #16]
 8009e6c:	2b09      	cmp	r3, #9
 8009e6e:	d8e3      	bhi.n	8009e38 <prvProcessReceivedCommands+0xc>
 8009e70:	e8df f003 	tbb	[pc, r3]
 8009e74:	30050505 	.word	0x30050505
 8009e78:	05055037 	.word	0x05055037
 8009e7c:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e7e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009e82:	f043 0301 	orr.w	r3, r3, #1
 8009e86:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e8a:	9b05      	ldr	r3, [sp, #20]
 8009e8c:	69a1      	ldr	r1, [r4, #24]
 8009e8e:	4602      	mov	r2, r0
 8009e90:	4419      	add	r1, r3
 8009e92:	4620      	mov	r0, r4
 8009e94:	f7ff fe14 	bl	8009ac0 <prvInsertTimerInActiveList>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d0cd      	beq.n	8009e38 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e9c:	6a23      	ldr	r3, [r4, #32]
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ea2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009ea6:	f013 0f04 	tst.w	r3, #4
 8009eaa:	d0c5      	beq.n	8009e38 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009eac:	69a2      	ldr	r2, [r4, #24]
 8009eae:	2100      	movs	r1, #0
 8009eb0:	9100      	str	r1, [sp, #0]
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	9805      	ldr	r0, [sp, #20]
 8009eb6:	4402      	add	r2, r0
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f7ff febd 	bl	8009c38 <xTimerGenericCommand>
							configASSERT( xResult );
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d1ba      	bne.n	8009e38 <prvProcessReceivedCommands+0xc>
 8009ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	e7fe      	b.n	8009ed2 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ed4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009ed8:	f023 0301 	bic.w	r3, r3, #1
 8009edc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8009ee0:	e7aa      	b.n	8009e38 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ee2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009ee6:	f043 0301 	orr.w	r3, r3, #1
 8009eea:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009eee:	9905      	ldr	r1, [sp, #20]
 8009ef0:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ef2:	b131      	cbz	r1, 8009f02 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	4401      	add	r1, r0
 8009efa:	4620      	mov	r0, r4
 8009efc:	f7ff fde0 	bl	8009ac0 <prvInsertTimerInActiveList>
					break;
 8009f00:	e79a      	b.n	8009e38 <prvProcessReceivedCommands+0xc>
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f12:	e7fe      	b.n	8009f12 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f14:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009f18:	f013 0f02 	tst.w	r3, #2
 8009f1c:	d004      	beq.n	8009f28 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f1e:	f023 0301 	bic.w	r3, r3, #1
 8009f22:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009f26:	e787      	b.n	8009e38 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 fac9 	bl	800a4c0 <vPortFree>
 8009f2e:	e783      	b.n	8009e38 <prvProcessReceivedCommands+0xc>
}
 8009f30:	b008      	add	sp, #32
 8009f32:	bd10      	pop	{r4, pc}
 8009f34:	2000219c 	.word	0x2000219c

08009f38 <prvTimerTask>:
{
 8009f38:	b500      	push	{lr}
 8009f3a:	b083      	sub	sp, #12
		vApplicationDaemonTaskStartupHook();
 8009f3c:	f7f6 fbc7 	bl	80006ce <vApplicationDaemonTaskStartupHook>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f40:	a801      	add	r0, sp, #4
 8009f42:	f7ff fdad 	bl	8009aa0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f46:	9901      	ldr	r1, [sp, #4]
 8009f48:	f7ff ff36 	bl	8009db8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8009f4c:	f7ff ff6e 	bl	8009e2c <prvProcessReceivedCommands>
	for( ;; )
 8009f50:	e7f6      	b.n	8009f40 <prvTimerTask+0x8>
	...

08009f54 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009f54:	b510      	push	{r4, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	4614      	mov	r4, r2
 8009f5a:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009f5c:	f06f 0301 	mvn.w	r3, #1
 8009f60:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009f62:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009f64:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009f66:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f68:	2300      	movs	r3, #0
 8009f6a:	4669      	mov	r1, sp
 8009f6c:	4802      	ldr	r0, [pc, #8]	; (8009f78 <xTimerPendFunctionCallFromISR+0x24>)
 8009f6e:	6800      	ldr	r0, [r0, #0]
 8009f70:	f7fe fe3e 	bl	8008bf0 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8009f74:	b004      	add	sp, #16
 8009f76:	bd10      	pop	{r4, pc}
 8009f78:	2000219c 	.word	0x2000219c

08009f7c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f7c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f82:	4b0d      	ldr	r3, [pc, #52]	; (8009fb8 <prvTaskExitError+0x3c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f8a:	d008      	beq.n	8009f9e <prvTaskExitError+0x22>
 8009f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	e7fe      	b.n	8009f9c <prvTaskExitError+0x20>
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009fae:	9b01      	ldr	r3, [sp, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d0fc      	beq.n	8009fae <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009fb4:	b002      	add	sp, #8
 8009fb6:	4770      	bx	lr
 8009fb8:	2000011c 	.word	0x2000011c

08009fbc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fbc:	4808      	ldr	r0, [pc, #32]	; (8009fe0 <prvPortStartFirstTask+0x24>)
 8009fbe:	6800      	ldr	r0, [r0, #0]
 8009fc0:	6800      	ldr	r0, [r0, #0]
 8009fc2:	f380 8808 	msr	MSP, r0
 8009fc6:	f04f 0000 	mov.w	r0, #0
 8009fca:	f380 8814 	msr	CONTROL, r0
 8009fce:	b662      	cpsie	i
 8009fd0:	b661      	cpsie	f
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	df00      	svc	0
 8009fdc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009fde:	0000      	.short	0x0000
 8009fe0:	e000ed08 	.word	0xe000ed08

08009fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ff4 <vPortEnableVFP+0x10>
 8009fe8:	6801      	ldr	r1, [r0, #0]
 8009fea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009fee:	6001      	str	r1, [r0, #0]
 8009ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ff2:	0000      	.short	0x0000
 8009ff4:	e000ed88 	.word	0xe000ed88

08009ff8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ffc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a000:	f021 0101 	bic.w	r1, r1, #1
 800a004:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a008:	4b05      	ldr	r3, [pc, #20]	; (800a020 <pxPortInitialiseStack+0x28>)
 800a00a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a00e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a012:	f06f 0302 	mvn.w	r3, #2
 800a016:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800a01a:	3844      	subs	r0, #68	; 0x44
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	08009f7d 	.word	0x08009f7d
	...

0800a030 <SVC_Handler>:
	__asm volatile (
 800a030:	4b07      	ldr	r3, [pc, #28]	; (800a050 <pxCurrentTCBConst2>)
 800a032:	6819      	ldr	r1, [r3, #0]
 800a034:	6808      	ldr	r0, [r1, #0]
 800a036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03a:	f380 8809 	msr	PSP, r0
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f04f 0000 	mov.w	r0, #0
 800a046:	f380 8811 	msr	BASEPRI, r0
 800a04a:	4770      	bx	lr
 800a04c:	f3af 8000 	nop.w

0800a050 <pxCurrentTCBConst2>:
 800a050:	20002034 	.word	0x20002034

0800a054 <vPortEnterCritical>:
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a064:	4a0b      	ldr	r2, [pc, #44]	; (800a094 <vPortEnterCritical+0x40>)
 800a066:	6813      	ldr	r3, [r2, #0]
 800a068:	3301      	adds	r3, #1
 800a06a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d000      	beq.n	800a072 <vPortEnterCritical+0x1e>
}
 800a070:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a072:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a076:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800a07a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a07e:	d0f7      	beq.n	800a070 <vPortEnterCritical+0x1c>
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	e7fe      	b.n	800a090 <vPortEnterCritical+0x3c>
 800a092:	bf00      	nop
 800a094:	2000011c 	.word	0x2000011c

0800a098 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a098:	4b09      	ldr	r3, [pc, #36]	; (800a0c0 <vPortExitCritical+0x28>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	b943      	cbnz	r3, 800a0b0 <vPortExitCritical+0x18>
 800a09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	e7fe      	b.n	800a0ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	4a03      	ldr	r2, [pc, #12]	; (800a0c0 <vPortExitCritical+0x28>)
 800a0b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0b6:	b90b      	cbnz	r3, 800a0bc <vPortExitCritical+0x24>
	__asm volatile
 800a0b8:	f383 8811 	msr	BASEPRI, r3
}
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	2000011c 	.word	0x2000011c
	...

0800a0d0 <PendSV_Handler>:
	__asm volatile
 800a0d0:	f3ef 8009 	mrs	r0, PSP
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	4b15      	ldr	r3, [pc, #84]	; (800a130 <pxCurrentTCBConst>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	f01e 0f10 	tst.w	lr, #16
 800a0e0:	bf08      	it	eq
 800a0e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ea:	6010      	str	r0, [r2, #0]
 800a0ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a0f4:	f380 8811 	msr	BASEPRI, r0
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f7ff fa94 	bl	800962c <vTaskSwitchContext>
 800a104:	f04f 0000 	mov.w	r0, #0
 800a108:	f380 8811 	msr	BASEPRI, r0
 800a10c:	bc09      	pop	{r0, r3}
 800a10e:	6819      	ldr	r1, [r3, #0]
 800a110:	6808      	ldr	r0, [r1, #0]
 800a112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a116:	f01e 0f10 	tst.w	lr, #16
 800a11a:	bf08      	it	eq
 800a11c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a120:	f380 8809 	msr	PSP, r0
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	f3af 8000 	nop.w

0800a130 <pxCurrentTCBConst>:
 800a130:	20002034 	.word	0x20002034

0800a134 <SysTick_Handler>:
{
 800a134:	b508      	push	{r3, lr}
	__asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a146:	f7ff f939 	bl	80093bc <xTaskIncrementTick>
 800a14a:	b128      	cbz	r0, 800a158 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a14c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a154:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800a158:	2300      	movs	r3, #0
 800a15a:	f383 8811 	msr	BASEPRI, r3
}
 800a15e:	bd08      	pop	{r3, pc}

0800a160 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a160:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800a164:	2300      	movs	r3, #0
 800a166:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a168:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a16a:	4b05      	ldr	r3, [pc, #20]	; (800a180 <vPortSetupTimerInterrupt+0x20>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4905      	ldr	r1, [pc, #20]	; (800a184 <vPortSetupTimerInterrupt+0x24>)
 800a170:	fba1 1303 	umull	r1, r3, r1, r3
 800a174:	099b      	lsrs	r3, r3, #6
 800a176:	3b01      	subs	r3, #1
 800a178:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a17a:	2307      	movs	r3, #7
 800a17c:	6113      	str	r3, [r2, #16]
}
 800a17e:	4770      	bx	lr
 800a180:	20000000 	.word	0x20000000
 800a184:	10624dd3 	.word	0x10624dd3

0800a188 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a188:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a18c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800a190:	4b3d      	ldr	r3, [pc, #244]	; (800a288 <xPortStartScheduler+0x100>)
 800a192:	429a      	cmp	r2, r3
 800a194:	d01c      	beq.n	800a1d0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a196:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a19a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800a19e:	4b3b      	ldr	r3, [pc, #236]	; (800a28c <xPortStartScheduler+0x104>)
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d01e      	beq.n	800a1e2 <xPortStartScheduler+0x5a>
{
 800a1a4:	b530      	push	{r4, r5, lr}
 800a1a6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1a8:	4b39      	ldr	r3, [pc, #228]	; (800a290 <xPortStartScheduler+0x108>)
 800a1aa:	781a      	ldrb	r2, [r3, #0]
 800a1ac:	b2d2      	uxtb	r2, r2
 800a1ae:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1b0:	22ff      	movs	r2, #255	; 0xff
 800a1b2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a1c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a1c4:	4a33      	ldr	r2, [pc, #204]	; (800a294 <xPortStartScheduler+0x10c>)
 800a1c6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1c8:	4b33      	ldr	r3, [pc, #204]	; (800a298 <xPortStartScheduler+0x110>)
 800a1ca:	2207      	movs	r2, #7
 800a1cc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1ce:	e01b      	b.n	800a208 <xPortStartScheduler+0x80>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a1e0:	e7fe      	b.n	800a1e0 <xPortStartScheduler+0x58>
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a1f2:	e7fe      	b.n	800a1f2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800a1f4:	4a28      	ldr	r2, [pc, #160]	; (800a298 <xPortStartScheduler+0x110>)
 800a1f6:	6813      	ldr	r3, [r2, #0]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	b2db      	uxtb	r3, r3
 800a204:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a208:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a20c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a210:	d1f0      	bne.n	800a1f4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a212:	4b21      	ldr	r3, [pc, #132]	; (800a298 <xPortStartScheduler+0x110>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b03      	cmp	r3, #3
 800a218:	d008      	beq.n	800a22c <xPortStartScheduler+0xa4>
 800a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	e7fe      	b.n	800a22a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a22c:	021b      	lsls	r3, r3, #8
 800a22e:	4a1a      	ldr	r2, [pc, #104]	; (800a298 <xPortStartScheduler+0x110>)
 800a230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a232:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a236:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a238:	9b01      	ldr	r3, [sp, #4]
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	4a14      	ldr	r2, [pc, #80]	; (800a290 <xPortStartScheduler+0x108>)
 800a23e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a240:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800a244:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800a248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a24c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a250:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800a254:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a258:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800a25c:	f7ff ff80 	bl	800a160 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a260:	2500      	movs	r5, #0
 800a262:	4b0e      	ldr	r3, [pc, #56]	; (800a29c <xPortStartScheduler+0x114>)
 800a264:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800a266:	f7ff febd 	bl	8009fe4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a26a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800a26e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a272:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800a276:	f7ff fea1 	bl	8009fbc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a27a:	f7ff f9d7 	bl	800962c <vTaskSwitchContext>
	prvTaskExitError();
 800a27e:	f7ff fe7d 	bl	8009f7c <prvTaskExitError>
}
 800a282:	4628      	mov	r0, r5
 800a284:	b003      	add	sp, #12
 800a286:	bd30      	pop	{r4, r5, pc}
 800a288:	410fc271 	.word	0x410fc271
 800a28c:	410fc270 	.word	0x410fc270
 800a290:	e000e400 	.word	0xe000e400
 800a294:	200021a4 	.word	0x200021a4
 800a298:	200021a8 	.word	0x200021a8
 800a29c:	2000011c 	.word	0x2000011c

0800a2a0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a2a0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2a4:	2b0f      	cmp	r3, #15
 800a2a6:	d90f      	bls.n	800a2c8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2a8:	4a11      	ldr	r2, [pc, #68]	; (800a2f0 <vPortValidateInterruptPriority+0x50>)
 800a2aa:	5c9b      	ldrb	r3, [r3, r2]
 800a2ac:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2ae:	4a11      	ldr	r2, [pc, #68]	; (800a2f4 <vPortValidateInterruptPriority+0x54>)
 800a2b0:	7812      	ldrb	r2, [r2, #0]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d908      	bls.n	800a2c8 <vPortValidateInterruptPriority+0x28>
 800a2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	e7fe      	b.n	800a2c6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a2c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a2cc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800a2d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2d4:	4a08      	ldr	r2, [pc, #32]	; (800a2f8 <vPortValidateInterruptPriority+0x58>)
 800a2d6:	6812      	ldr	r2, [r2, #0]
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d908      	bls.n	800a2ee <vPortValidateInterruptPriority+0x4e>
 800a2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e0:	f383 8811 	msr	BASEPRI, r3
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	e7fe      	b.n	800a2ec <vPortValidateInterruptPriority+0x4c>
	}
 800a2ee:	4770      	bx	lr
 800a2f0:	e000e3f0 	.word	0xe000e3f0
 800a2f4:	200021a4 	.word	0x200021a4
 800a2f8:	200021a8 	.word	0x200021a8

0800a2fc <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2fc:	4a12      	ldr	r2, [pc, #72]	; (800a348 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2fe:	f012 0f07 	tst.w	r2, #7
 800a302:	d01e      	beq.n	800a342 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a304:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a306:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a30a:	f5c1 43a0 	rsb	r3, r1, #20480	; 0x5000
 800a30e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a310:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a312:	480e      	ldr	r0, [pc, #56]	; (800a34c <prvHeapInit+0x50>)
 800a314:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a316:	2100      	movs	r1, #0
 800a318:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a31a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800a31c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a31e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800a322:	480b      	ldr	r0, [pc, #44]	; (800a350 <prvHeapInit+0x54>)
 800a324:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800a326:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a328:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a32a:	1a99      	subs	r1, r3, r2
 800a32c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a32e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a330:	4b08      	ldr	r3, [pc, #32]	; (800a354 <prvHeapInit+0x58>)
 800a332:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a334:	4b08      	ldr	r3, [pc, #32]	; (800a358 <prvHeapInit+0x5c>)
 800a336:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a338:	4b08      	ldr	r3, [pc, #32]	; (800a35c <prvHeapInit+0x60>)
 800a33a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a33e:	601a      	str	r2, [r3, #0]
}
 800a340:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a342:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800a346:	e7e4      	b.n	800a312 <prvHeapInit+0x16>
 800a348:	200021b0 	.word	0x200021b0
 800a34c:	200071c4 	.word	0x200071c4
 800a350:	200021ac 	.word	0x200021ac
 800a354:	200071b8 	.word	0x200071b8
 800a358:	200071b4 	.word	0x200071b4
 800a35c:	200071b0 	.word	0x200071b0

0800a360 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a360:	4b16      	ldr	r3, [pc, #88]	; (800a3bc <prvInsertBlockIntoFreeList+0x5c>)
 800a362:	461a      	mov	r2, r3
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4283      	cmp	r3, r0
 800a368:	d3fb      	bcc.n	800a362 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a36a:	6851      	ldr	r1, [r2, #4]
 800a36c:	eb02 0c01 	add.w	ip, r2, r1
 800a370:	4584      	cmp	ip, r0
 800a372:	d009      	beq.n	800a388 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a374:	6841      	ldr	r1, [r0, #4]
 800a376:	eb00 0c01 	add.w	ip, r0, r1
 800a37a:	4563      	cmp	r3, ip
 800a37c:	d009      	beq.n	800a392 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a37e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a380:	4290      	cmp	r0, r2
 800a382:	d019      	beq.n	800a3b8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a384:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800a386:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a388:	6840      	ldr	r0, [r0, #4]
 800a38a:	4401      	add	r1, r0
 800a38c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800a38e:	4610      	mov	r0, r2
 800a390:	e7f0      	b.n	800a374 <prvInsertBlockIntoFreeList+0x14>
{
 800a392:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a394:	4c0a      	ldr	r4, [pc, #40]	; (800a3c0 <prvInsertBlockIntoFreeList+0x60>)
 800a396:	6824      	ldr	r4, [r4, #0]
 800a398:	42a3      	cmp	r3, r4
 800a39a:	d00b      	beq.n	800a3b4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	4419      	add	r1, r3
 800a3a0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3a2:	6813      	ldr	r3, [r2, #0]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800a3a8:	4290      	cmp	r0, r2
 800a3aa:	d000      	beq.n	800a3ae <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3ac:	6010      	str	r0, [r2, #0]
	}
}
 800a3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3b2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3b4:	6004      	str	r4, [r0, #0]
 800a3b6:	e7f7      	b.n	800a3a8 <prvInsertBlockIntoFreeList+0x48>
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	200071c4 	.word	0x200071c4
 800a3c0:	200021ac 	.word	0x200021ac

0800a3c4 <pvPortMalloc>:
{
 800a3c4:	b570      	push	{r4, r5, r6, lr}
 800a3c6:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800a3c8:	f7fe ffe2 	bl	8009390 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a3cc:	4b36      	ldr	r3, [pc, #216]	; (800a4a8 <pvPortMalloc+0xe4>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	b1a3      	cbz	r3, 800a3fc <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3d2:	4b36      	ldr	r3, [pc, #216]	; (800a4ac <pvPortMalloc+0xe8>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	421d      	tst	r5, r3
 800a3d8:	d14e      	bne.n	800a478 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800a3da:	b135      	cbz	r5, 800a3ea <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800a3dc:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3de:	f015 0f07 	tst.w	r5, #7
 800a3e2:	d002      	beq.n	800a3ea <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3e4:	f025 0507 	bic.w	r5, r5, #7
 800a3e8:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3ea:	2d00      	cmp	r5, #0
 800a3ec:	d046      	beq.n	800a47c <pvPortMalloc+0xb8>
 800a3ee:	4b30      	ldr	r3, [pc, #192]	; (800a4b0 <pvPortMalloc+0xec>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	42ab      	cmp	r3, r5
 800a3f4:	d351      	bcc.n	800a49a <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 800a3f6:	4a2f      	ldr	r2, [pc, #188]	; (800a4b4 <pvPortMalloc+0xf0>)
 800a3f8:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3fa:	e004      	b.n	800a406 <pvPortMalloc+0x42>
			prvHeapInit();
 800a3fc:	f7ff ff7e 	bl	800a2fc <prvHeapInit>
 800a400:	e7e7      	b.n	800a3d2 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800a402:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800a404:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a406:	6863      	ldr	r3, [r4, #4]
 800a408:	42ab      	cmp	r3, r5
 800a40a:	d202      	bcs.n	800a412 <pvPortMalloc+0x4e>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1f7      	bne.n	800a402 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800a412:	4b25      	ldr	r3, [pc, #148]	; (800a4a8 <pvPortMalloc+0xe4>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	42a3      	cmp	r3, r4
 800a418:	d041      	beq.n	800a49e <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a41a:	6816      	ldr	r6, [r2, #0]
 800a41c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a422:	6863      	ldr	r3, [r4, #4]
 800a424:	1b5b      	subs	r3, r3, r5
 800a426:	2b10      	cmp	r3, #16
 800a428:	d910      	bls.n	800a44c <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a42a:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a42c:	f010 0f07 	tst.w	r0, #7
 800a430:	d008      	beq.n	800a444 <pvPortMalloc+0x80>
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	e7fe      	b.n	800a442 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a444:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a446:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a448:	f7ff ff8a 	bl	800a360 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a44c:	6862      	ldr	r2, [r4, #4]
 800a44e:	4918      	ldr	r1, [pc, #96]	; (800a4b0 <pvPortMalloc+0xec>)
 800a450:	680b      	ldr	r3, [r1, #0]
 800a452:	1a9b      	subs	r3, r3, r2
 800a454:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a456:	4918      	ldr	r1, [pc, #96]	; (800a4b8 <pvPortMalloc+0xf4>)
 800a458:	6809      	ldr	r1, [r1, #0]
 800a45a:	428b      	cmp	r3, r1
 800a45c:	d201      	bcs.n	800a462 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a45e:	4916      	ldr	r1, [pc, #88]	; (800a4b8 <pvPortMalloc+0xf4>)
 800a460:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a462:	4b12      	ldr	r3, [pc, #72]	; (800a4ac <pvPortMalloc+0xe8>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4313      	orrs	r3, r2
 800a468:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a46a:	2300      	movs	r3, #0
 800a46c:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800a46e:	4a13      	ldr	r2, [pc, #76]	; (800a4bc <pvPortMalloc+0xf8>)
 800a470:	6813      	ldr	r3, [r2, #0]
 800a472:	3301      	adds	r3, #1
 800a474:	6013      	str	r3, [r2, #0]
 800a476:	e002      	b.n	800a47e <pvPortMalloc+0xba>
void *pvReturn = NULL;
 800a478:	2600      	movs	r6, #0
 800a47a:	e000      	b.n	800a47e <pvPortMalloc+0xba>
 800a47c:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800a47e:	f7ff f82d 	bl	80094dc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a482:	f016 0f07 	tst.w	r6, #7
 800a486:	d00c      	beq.n	800a4a2 <pvPortMalloc+0xde>
 800a488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	e7fe      	b.n	800a498 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 800a49a:	2600      	movs	r6, #0
 800a49c:	e7ef      	b.n	800a47e <pvPortMalloc+0xba>
 800a49e:	2600      	movs	r6, #0
 800a4a0:	e7ed      	b.n	800a47e <pvPortMalloc+0xba>
}
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	bd70      	pop	{r4, r5, r6, pc}
 800a4a6:	bf00      	nop
 800a4a8:	200021ac 	.word	0x200021ac
 800a4ac:	200071b0 	.word	0x200071b0
 800a4b0:	200071b4 	.word	0x200071b4
 800a4b4:	200071c4 	.word	0x200071c4
 800a4b8:	200071b8 	.word	0x200071b8
 800a4bc:	200071bc 	.word	0x200071bc

0800a4c0 <vPortFree>:
	if( pv != NULL )
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d034      	beq.n	800a52e <vPortFree+0x6e>
{
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800a4c8:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4cc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a4d0:	4a17      	ldr	r2, [pc, #92]	; (800a530 <vPortFree+0x70>)
 800a4d2:	6812      	ldr	r2, [r2, #0]
 800a4d4:	4213      	tst	r3, r2
 800a4d6:	d108      	bne.n	800a4ea <vPortFree+0x2a>
 800a4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4dc:	f383 8811 	msr	BASEPRI, r3
 800a4e0:	f3bf 8f6f 	isb	sy
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	e7fe      	b.n	800a4e8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4ea:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a4ee:	b141      	cbz	r1, 800a502 <vPortFree+0x42>
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	e7fe      	b.n	800a500 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a502:	ea23 0302 	bic.w	r3, r3, r2
 800a506:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a50a:	f7fe ff41 	bl	8009390 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a50e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800a512:	4a08      	ldr	r2, [pc, #32]	; (800a534 <vPortFree+0x74>)
 800a514:	6813      	ldr	r3, [r2, #0]
 800a516:	440b      	add	r3, r1
 800a518:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a51a:	4628      	mov	r0, r5
 800a51c:	f7ff ff20 	bl	800a360 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a520:	4a05      	ldr	r2, [pc, #20]	; (800a538 <vPortFree+0x78>)
 800a522:	6813      	ldr	r3, [r2, #0]
 800a524:	3301      	adds	r3, #1
 800a526:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800a528:	f7fe ffd8 	bl	80094dc <xTaskResumeAll>
}
 800a52c:	bd38      	pop	{r3, r4, r5, pc}
 800a52e:	4770      	bx	lr
 800a530:	200071b0 	.word	0x200071b0
 800a534:	200071b4 	.word	0x200071b4
 800a538:	200071c0 	.word	0x200071c0

0800a53c <printf_debug_msg>:
   }
   return dlc;
}

static void printf_debug_msg(struct can_iso_tp_init_t *link, char *msg)
{
 800a53c:	b508      	push	{r3, lr}
   if (NULL != link->print_debug)
 800a53e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a540:	b10b      	cbz	r3, 800a546 <printf_debug_msg+0xa>
   {
      link->print_debug(msg);
 800a542:	4608      	mov	r0, r1
 800a544:	4798      	blx	r3
   }
}
 800a546:	bd08      	pop	{r3, pc}

0800a548 <rx_event_handle_poll>:
   tx_event_cf_frame(link);
   return 0;
}

static int rx_event_handle_poll(can_iso_tp_link_t_p link, unsigned int user_ms)
{
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	4604      	mov	r4, r0
 800a54c:	460d      	mov	r5, r1
   if (link->rx_record.status == rx_wait_cf)
 800a54e:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800a552:	2b03      	cmp	r3, #3
 800a554:	d00d      	beq.n	800a572 <rx_event_handle_poll+0x2a>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_CR);
         }
         link->rx_record.status = rx_idle;
      }
   }
   if ((link->rx_record.status == rx_tx_fc_wait_confirm) || (link->rx_record.status == rx_tx_fc))
 800a556:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800a55a:	3b01      	subs	r3, #1
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d918      	bls.n	800a594 <rx_event_handle_poll+0x4c>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_A);
         }
         link->rx_record.status = rx_idle;
      }
   }
   if (link->rx_record.status == rx_tx_fc)
 800a562:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800a566:	2b01      	cmp	r3, #1
 800a568:	d026      	beq.n	800a5b8 <rx_event_handle_poll+0x70>
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
      {
         link->rx_record.status = rx_tx_fc_wait_confirm;
      }
   }
   else if (link->rx_record.status == rx_tx_fc_overrun)
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	d02f      	beq.n	800a5ce <rx_event_handle_poll+0x86>
      {
         link->rx_record.status = rx_tx_fc_overrun_wait_confirm;
      }
   }
   return 0;
}
 800a56e:	2000      	movs	r0, #0
 800a570:	bd70      	pop	{r4, r5, r6, pc}
      if ((user_ms - link->rx_record.last_msg_time_ms) > link->init_info.N_Cr)
 800a572:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
 800a576:	1acb      	subs	r3, r1, r3
 800a578:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d9eb      	bls.n	800a556 <rx_event_handle_poll+0xe>
         if (link->init_info.N_USData_indication)
 800a57e:	6946      	ldr	r6, [r0, #20]
 800a580:	b126      	cbz	r6, 800a58c <rx_event_handle_poll+0x44>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_CR);
 800a582:	2303      	movs	r3, #3
 800a584:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 800a588:	69c1      	ldr	r1, [r0, #28]
 800a58a:	47b0      	blx	r6
         link->rx_record.status = rx_idle;
 800a58c:	2300      	movs	r3, #0
 800a58e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800a592:	e7e0      	b.n	800a556 <rx_event_handle_poll+0xe>
      if ((user_ms - link->rx_record.last_msg_time_ms) > link->init_info.N_Ar)
 800a594:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
 800a598:	1ae9      	subs	r1, r5, r3
 800a59a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a59c:	4299      	cmp	r1, r3
 800a59e:	d9e0      	bls.n	800a562 <rx_event_handle_poll+0x1a>
         if (link->init_info.N_USData_indication)
 800a5a0:	6965      	ldr	r5, [r4, #20]
 800a5a2:	b12d      	cbz	r5, 800a5b0 <rx_event_handle_poll+0x68>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_A);
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
 800a5aa:	69e1      	ldr	r1, [r4, #28]
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	47a8      	blx	r5
         link->rx_record.status = rx_idle;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800a5b6:	e7d4      	b.n	800a562 <rx_event_handle_poll+0x1a>
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 800a5b8:	6923      	ldr	r3, [r4, #16]
 800a5ba:	f504 71a4 	add.w	r1, r4, #328	; 0x148
 800a5be:	4620      	mov	r0, r4
 800a5c0:	4798      	blx	r3
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	d1d3      	bne.n	800a56e <rx_event_handle_poll+0x26>
         link->rx_record.status = rx_tx_fc_wait_confirm;
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800a5cc:	e7cf      	b.n	800a56e <rx_event_handle_poll+0x26>
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 800a5ce:	6923      	ldr	r3, [r4, #16]
 800a5d0:	f504 71a4 	add.w	r1, r4, #328	; 0x148
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	4798      	blx	r3
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d1c8      	bne.n	800a56e <rx_event_handle_poll+0x26>
         link->rx_record.status = rx_tx_fc_overrun_wait_confirm;
 800a5dc:	2305      	movs	r3, #5
 800a5de:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800a5e2:	e7c4      	b.n	800a56e <rx_event_handle_poll+0x26>

0800a5e4 <rx_event_L_Data_Confirm>:

static int rx_event_L_Data_Confirm(can_iso_tp_link_t_p link, int8_t error)
{
   if (link->rx_record.status == rx_tx_fc_wait_confirm)
 800a5e4:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	d003      	beq.n	800a5f4 <rx_event_L_Data_Confirm+0x10>
   {
      link->rx_record.status = rx_wait_cf;
   }
   else if (link->rx_record.status == rx_tx_fc_overrun_wait_confirm)
 800a5ec:	2b05      	cmp	r3, #5
 800a5ee:	d005      	beq.n	800a5fc <rx_event_L_Data_Confirm+0x18>
   {
      link->rx_record.status = rx_idle;
   }
   return 0;
}
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	4770      	bx	lr
      link->rx_record.status = rx_wait_cf;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	f880 3138 	strb.w	r3, [r0, #312]	; 0x138
 800a5fa:	e7f9      	b.n	800a5f0 <rx_event_L_Data_Confirm+0xc>
      link->rx_record.status = rx_idle;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f880 3138 	strb.w	r3, [r0, #312]	; 0x138
 800a602:	e7f5      	b.n	800a5f0 <rx_event_L_Data_Confirm+0xc>

0800a604 <rx_event_poll_handle>:
   tx_event_L_Data_indication(par->link, &par->rx_msg);
   par->handle = (event_handle_t)0;
}

static void rx_event_poll_handle(void *par_src)
{
 800a604:	b510      	push	{r4, lr}
 800a606:	4604      	mov	r4, r0
   struct time_poll_par_t *par = (struct time_poll_par_t *)par_src;
   rx_event_handle_poll(par->link, par->user_ms);
 800a608:	6881      	ldr	r1, [r0, #8]
 800a60a:	6840      	ldr	r0, [r0, #4]
 800a60c:	f7ff ff9c 	bl	800a548 <rx_event_handle_poll>
   par->handle = (event_handle_t)0;
 800a610:	2300      	movs	r3, #0
 800a612:	6023      	str	r3, [r4, #0]
}
 800a614:	bd10      	pop	{r4, pc}

0800a616 <rx_event_L_Data_Confirm_handle>:

static void rx_event_L_Data_Confirm_handle(void *par_src)
{
 800a616:	b508      	push	{r3, lr}
   struct L_Data_confirm_par_t *par = (struct L_Data_confirm_par_t *)par_src;
   int8_t error = par->error;
   par->handle = (event_handle_t)0;
 800a618:	2300      	movs	r3, #0
 800a61a:	6003      	str	r3, [r0, #0]
   rx_event_L_Data_Confirm(par->link, error);
 800a61c:	f990 1008 	ldrsb.w	r1, [r0, #8]
 800a620:	6840      	ldr	r0, [r0, #4]
 800a622:	f7ff ffdf 	bl	800a5e4 <rx_event_L_Data_Confirm>
}
 800a626:	bd08      	pop	{r3, pc}

0800a628 <event_manage_block_init>:
{
 800a628:	b510      	push	{r4, lr}
 800a62a:	4604      	mov	r4, r0
   mcu_lock_init(&event->lock);
 800a62c:	f000 fec1 	bl	800b3b2 <mcu_lock_init>
   if (!QueueInit(&event->fifo, event->fifo_data, sizeof(event->fifo_data) / sizeof(event->fifo_data[0])))
 800a630:	2203      	movs	r2, #3
 800a632:	1d21      	adds	r1, r4, #4
 800a634:	f104 0010 	add.w	r0, r4, #16
 800a638:	f000 fe68 	bl	800b30c <QueueInit>
 800a63c:	b108      	cbz	r0, 800a642 <event_manage_block_init+0x1a>
   return 0;
 800a63e:	2000      	movs	r0, #0
}
 800a640:	bd10      	pop	{r4, pc}
      return -1;
 800a642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a646:	e7fb      	b.n	800a640 <event_manage_block_init+0x18>

0800a648 <tx_event_cf_frame>:
{
 800a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if (link->tx_record.status == tx_cf_wait_tx)
 800a64a:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
 800a64e:	2b06      	cmp	r3, #6
 800a650:	d001      	beq.n	800a656 <tx_event_cf_frame+0xe>
}
 800a652:	2000      	movs	r0, #0
 800a654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a656:	4604      	mov	r4, r0
      if (link->tx_record.rx_Stmin != 0)
 800a658:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
 800a65c:	b12b      	cbz	r3, 800a66a <tx_event_cf_frame+0x22>
         if ((link->current_time_ms - link->tx_record.last_msg_time_ms) < link->tx_record.rx_Stmin)
 800a65e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a660:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800a664:	1a52      	subs	r2, r2, r1
 800a666:	429a      	cmp	r2, r3
 800a668:	d3f3      	bcc.n	800a652 <tx_event_cf_frame+0xa>
         uint32_t txLen = link->tx_record.current_size - link->tx_record.current_tx_index;
 800a66a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a66e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a672:	1a53      	subs	r3, r2, r1
         if (txLen > (uint32_t)(dlc2len(link->init_info.TX_DLC) - 1))
 800a674:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800a678:	f007 000f 	and.w	r0, r7, #15
 800a67c:	4d34      	ldr	r5, [pc, #208]	; (800a750 <tx_event_cf_frame+0x108>)
 800a67e:	5c2e      	ldrb	r6, [r5, r0]
         if (txLen > (uint32_t)(dlc2len(link->init_info.TX_DLC) - 1))
 800a680:	1e75      	subs	r5, r6, #1
 800a682:	429d      	cmp	r5, r3
 800a684:	d300      	bcc.n	800a688 <tx_event_cf_frame+0x40>
         uint32_t txLen = link->tx_record.current_size - link->tx_record.current_tx_index;
 800a686:	461d      	mov	r5, r3
         if (txLen == 0)
 800a688:	b955      	cbnz	r5, 800a6a0 <tx_event_cf_frame+0x58>
            link->tx_record.status = tx_idle;
 800a68a:	2300      	movs	r3, #0
 800a68c:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
            if (link->init_info.N_USData_confirm)
 800a690:	69a5      	ldr	r5, [r4, #24]
 800a692:	2d00      	cmp	r5, #0
 800a694:	d0dd      	beq.n	800a652 <tx_event_cf_frame+0xa>
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_OK);
 800a696:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a69a:	4620      	mov	r0, r4
 800a69c:	47a8      	blx	r5
 800a69e:	e7d8      	b.n	800a652 <tx_event_cf_frame+0xa>
            link->tx_record.last_msg.id = link->init_info.tx_id;
 800a6a0:	6863      	ldr	r3, [r4, #4]
 800a6a2:	6423      	str	r3, [r4, #64]	; 0x40
            link->tx_record.last_msg.data[0] = 0x20 | (link->tx_record.current_tx_SN & 0xf);
 800a6a4:	f994 3098 	ldrsb.w	r3, [r4, #152]	; 0x98
 800a6a8:	f003 030f 	and.w	r3, r3, #15
 800a6ac:	f043 0320 	orr.w	r3, r3, #32
 800a6b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            memcpy(&link->tx_record.last_msg.data[1], &link->tx_record.current_playload[link->tx_record.current_tx_index], txLen);
 800a6b4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a6b8:	462a      	mov	r2, r5
 800a6ba:	4419      	add	r1, r3
 800a6bc:	f104 0046 	add.w	r0, r4, #70	; 0x46
 800a6c0:	f007 fbd2 	bl	8011e68 <memcpy>
            if (dlc2len(link->init_info.TX_DLC) > (1 + txLen))
 800a6c4:	1c6b      	adds	r3, r5, #1
 800a6c6:	429e      	cmp	r6, r3
 800a6c8:	d820      	bhi.n	800a70c <tx_event_cf_frame+0xc4>
               link->tx_record.last_msg.dlc = link->init_info.TX_DLC;
 800a6ca:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
            link->tx_record.current_tx_index += txLen;
 800a6ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a6d2:	442b      	add	r3, r5
 800a6d4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            link->tx_record.status = tx_cf_wait_tx;
 800a6d8:	2306      	movs	r3, #6
 800a6da:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
            link->tx_record.last_msg_time_ms = link->current_time_ms;
 800a6de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a6e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
            if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800a6e4:	6923      	ldr	r3, [r4, #16]
 800a6e6:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	4798      	blx	r3
 800a6ee:	bb58      	cbnz	r0, 800a748 <tx_event_cf_frame+0x100>
               link->tx_record.rx_BS_tx++;
 800a6f0:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
               link->tx_record.current_tx_SN++;
 800a6fa:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800a6fe:	3301      	adds	r3, #1
 800a700:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
               link->tx_record.status = tx_cf_wait_confirm;
 800a704:	2308      	movs	r3, #8
 800a706:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a70a:	e7a2      	b.n	800a652 <tx_event_cf_frame+0xa>
               memset(&link->tx_record.last_msg.data[1 + txLen], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 1 - txLen);
 800a70c:	f105 0341 	add.w	r3, r5, #65	; 0x41
 800a710:	18e0      	adds	r0, r4, r3
 800a712:	1b72      	subs	r2, r6, r5
 800a714:	3a01      	subs	r2, #1
 800a716:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800a71a:	3005      	adds	r0, #5
 800a71c:	f007 fae6 	bl	8011cec <memset>
               link->tx_record.last_msg.dlc = lenToMinDlc(txLen + 1);
 800a720:	1c69      	adds	r1, r5, #1
 800a722:	b289      	uxth	r1, r1
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800a724:	2300      	movs	r3, #0
 800a726:	2b10      	cmp	r3, #16
 800a728:	d805      	bhi.n	800a736 <tx_event_cf_frame+0xee>
      if (len <= dlc_len_table[dlc])
 800a72a:	4a09      	ldr	r2, [pc, #36]	; (800a750 <tx_event_cf_frame+0x108>)
 800a72c:	5cd2      	ldrb	r2, [r2, r3]
 800a72e:	4291      	cmp	r1, r2
 800a730:	d901      	bls.n	800a736 <tx_event_cf_frame+0xee>
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800a732:	3301      	adds	r3, #1
 800a734:	e7f7      	b.n	800a726 <tx_event_cf_frame+0xde>
               link->tx_record.last_msg.dlc = lenToMinDlc(txLen + 1);
 800a736:	b2db      	uxtb	r3, r3
 800a738:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
               if (link->tx_record.last_msg.dlc < 8)
 800a73c:	2b07      	cmp	r3, #7
 800a73e:	d8c6      	bhi.n	800a6ce <tx_event_cf_frame+0x86>
                  link->tx_record.last_msg.dlc = 8;
 800a740:	2308      	movs	r3, #8
 800a742:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a746:	e7c2      	b.n	800a6ce <tx_event_cf_frame+0x86>
               link->tx_record.status = tx_cf_wait_tx_retry;
 800a748:	2307      	movs	r3, #7
 800a74a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a74e:	e780      	b.n	800a652 <tx_event_cf_frame+0xa>
 800a750:	0801360c 	.word	0x0801360c

0800a754 <tx_event_poll>:
{
 800a754:	b538      	push	{r3, r4, r5, lr}
 800a756:	4604      	mov	r4, r0
   if (link->tx_record.status != tx_idle)
 800a758:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
 800a75c:	b193      	cbz	r3, 800a784 <tx_event_poll+0x30>
      if ((user_ms - link->tx_record.last_msg_time_ms) > link->init_info.N_As)
 800a75e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800a762:	1a89      	subs	r1, r1, r2
 800a764:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 800a766:	4291      	cmp	r1, r2
 800a768:	d918      	bls.n	800a79c <tx_event_poll+0x48>
         if (link->init_info.N_USData_confirm)
 800a76a:	6985      	ldr	r5, [r0, #24]
 800a76c:	b13d      	cbz	r5, 800a77e <tx_event_poll+0x2a>
            if (link->tx_record.status == tx_wait_fc)
 800a76e:	2b05      	cmp	r3, #5
 800a770:	d00d      	beq.n	800a78e <tx_event_poll+0x3a>
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_TIMEOUT_A);
 800a772:	2301      	movs	r3, #1
 800a774:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a778:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800a77c:	47a8      	blx	r5
         link->tx_record.status = tx_idle;
 800a77e:	2300      	movs	r3, #0
 800a780:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
   tx_event_cf_frame(link);
 800a784:	4620      	mov	r0, r4
 800a786:	f7ff ff5f 	bl	800a648 <tx_event_cf_frame>
}
 800a78a:	2000      	movs	r0, #0
 800a78c:	bd38      	pop	{r3, r4, r5, pc}
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_TIMEOUT_BS);
 800a78e:	2302      	movs	r3, #2
 800a790:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a794:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800a798:	47a8      	blx	r5
 800a79a:	e7f0      	b.n	800a77e <tx_event_poll+0x2a>
      else if (link->tx_record.status == tx_sf_wait_tx)
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d017      	beq.n	800a7d0 <tx_event_poll+0x7c>
      else if (link->tx_record.status == tx_ff_wait_tx)
 800a7a0:	2b03      	cmp	r3, #3
 800a7a2:	d01f      	beq.n	800a7e4 <tx_event_poll+0x90>
      else if (link->tx_record.status == tx_cf_wait_tx_retry)
 800a7a4:	2b07      	cmp	r3, #7
 800a7a6:	d1ed      	bne.n	800a784 <tx_event_poll+0x30>
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800a7a8:	6903      	ldr	r3, [r0, #16]
 800a7aa:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800a7ae:	4798      	blx	r3
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d1e7      	bne.n	800a784 <tx_event_poll+0x30>
            link->tx_record.rx_BS_tx++;
 800a7b4:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
            link->tx_record.current_tx_SN++;
 800a7be:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
            link->tx_record.status = tx_cf_wait_confirm;
 800a7c8:	2308      	movs	r3, #8
 800a7ca:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a7ce:	e7d9      	b.n	800a784 <tx_event_poll+0x30>
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800a7d0:	6903      	ldr	r3, [r0, #16]
 800a7d2:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800a7d6:	4798      	blx	r3
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d1d3      	bne.n	800a784 <tx_event_poll+0x30>
            link->tx_record.status = tx_sf_wait_confirm;
 800a7dc:	2302      	movs	r3, #2
 800a7de:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a7e2:	e7cf      	b.n	800a784 <tx_event_poll+0x30>
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800a7e4:	6903      	ldr	r3, [r0, #16]
 800a7e6:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800a7ea:	4798      	blx	r3
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d1c9      	bne.n	800a784 <tx_event_poll+0x30>
            link->tx_record.status = tx_ff_wait_confirm;
 800a7f0:	2304      	movs	r3, #4
 800a7f2:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a7f6:	e7c5      	b.n	800a784 <tx_event_poll+0x30>

0800a7f8 <tx_event_poll_handle>:
{
 800a7f8:	b510      	push	{r4, lr}
 800a7fa:	4604      	mov	r4, r0
   tx_event_poll(par->link, par->user_ms);
 800a7fc:	6881      	ldr	r1, [r0, #8]
 800a7fe:	6840      	ldr	r0, [r0, #4]
 800a800:	f7ff ffa8 	bl	800a754 <tx_event_poll>
   par->handle = (event_handle_t)0;
 800a804:	2300      	movs	r3, #0
 800a806:	6023      	str	r3, [r4, #0]
}
 800a808:	bd10      	pop	{r4, pc}
	...

0800a80c <tx_event_L_Data_Confirm>:
{
 800a80c:	b538      	push	{r3, r4, r5, lr}
 800a80e:	4604      	mov	r4, r0
   if (link->tx_record.status == tx_sf_wait_confirm)
 800a810:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
 800a814:	2b02      	cmp	r3, #2
 800a816:	d012      	beq.n	800a83e <tx_event_L_Data_Confirm+0x32>
   else if (link->tx_record.status == tx_ff_wait_confirm)
 800a818:	2b04      	cmp	r3, #4
 800a81a:	d025      	beq.n	800a868 <tx_event_L_Data_Confirm+0x5c>
   else if (link->tx_record.status == tx_cf_wait_confirm)
 800a81c:	2b08      	cmp	r3, #8
 800a81e:	d11a      	bne.n	800a856 <tx_event_L_Data_Confirm+0x4a>
      if (link->tx_record.rx_BS != 0)
 800a820:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
 800a824:	b11b      	cbz	r3, 800a82e <tx_event_L_Data_Confirm+0x22>
         if ((link->tx_record.rx_BS == link->tx_record.rx_BS_tx) && (link->tx_record.current_size != link->tx_record.current_tx_index))
 800a826:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d03b      	beq.n	800a8a6 <tx_event_L_Data_Confirm+0x9a>
      if (link->tx_record.status == tx_cf_wait_confirm)
 800a82e:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 800a832:	2b08      	cmp	r3, #8
 800a834:	d041      	beq.n	800a8ba <tx_event_L_Data_Confirm+0xae>
      tx_event_cf_frame(link);
 800a836:	4620      	mov	r0, r4
 800a838:	f7ff ff06 	bl	800a648 <tx_event_cf_frame>
 800a83c:	e00b      	b.n	800a856 <tx_event_L_Data_Confirm+0x4a>
      if (link->init_info.N_USData_confirm)
 800a83e:	6985      	ldr	r5, [r0, #24]
 800a840:	b135      	cbz	r5, 800a850 <tx_event_L_Data_Confirm+0x44>
         if (0 == error)
 800a842:	b951      	cbnz	r1, 800a85a <tx_event_L_Data_Confirm+0x4e>
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_OK);
 800a844:	2300      	movs	r3, #0
 800a846:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a84a:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800a84e:	47a8      	blx	r5
      link->tx_record.status = tx_idle;
 800a850:	2300      	movs	r3, #0
 800a852:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
}
 800a856:	2000      	movs	r0, #0
 800a858:	bd38      	pop	{r3, r4, r5, pc}
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_ERROR);
 800a85a:	2309      	movs	r3, #9
 800a85c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a860:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800a864:	47a8      	blx	r5
 800a866:	e7f3      	b.n	800a850 <tx_event_L_Data_Confirm+0x44>
      if (link->tx_record.current_size > 0xfff)
 800a868:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800a86c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a870:	d30f      	bcc.n	800a892 <tx_event_L_Data_Confirm+0x86>
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 6;
 800a872:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800a876:	f003 030f 	and.w	r3, r3, #15
 800a87a:	4a12      	ldr	r2, [pc, #72]	; (800a8c4 <tx_event_L_Data_Confirm+0xb8>)
 800a87c:	5cd3      	ldrb	r3, [r2, r3]
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 6;
 800a87e:	3b06      	subs	r3, #6
 800a880:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      link->tx_record.current_tx_SN = 1;
 800a884:	2301      	movs	r3, #1
 800a886:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      link->tx_record.status = tx_wait_fc;
 800a88a:	2305      	movs	r3, #5
 800a88c:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a890:	e7e1      	b.n	800a856 <tx_event_L_Data_Confirm+0x4a>
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 2;
 800a892:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800a896:	f003 030f 	and.w	r3, r3, #15
 800a89a:	4a0a      	ldr	r2, [pc, #40]	; (800a8c4 <tx_event_L_Data_Confirm+0xb8>)
 800a89c:	5cd3      	ldrb	r3, [r2, r3]
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 2;
 800a89e:	3b02      	subs	r3, #2
 800a8a0:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800a8a4:	e7ee      	b.n	800a884 <tx_event_L_Data_Confirm+0x78>
         if ((link->tx_record.rx_BS == link->tx_record.rx_BS_tx) && (link->tx_record.current_size != link->tx_record.current_tx_index))
 800a8a6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a8aa:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d0bd      	beq.n	800a82e <tx_event_L_Data_Confirm+0x22>
            link->tx_record.status = tx_wait_fc;
 800a8b2:	2305      	movs	r3, #5
 800a8b4:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
 800a8b8:	e7b9      	b.n	800a82e <tx_event_L_Data_Confirm+0x22>
         link->tx_record.status = tx_cf_wait_tx;
 800a8ba:	2306      	movs	r3, #6
 800a8bc:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a8c0:	e7b9      	b.n	800a836 <tx_event_L_Data_Confirm+0x2a>
 800a8c2:	bf00      	nop
 800a8c4:	0801360c 	.word	0x0801360c

0800a8c8 <tx_event_L_Data_Confirm_handle>:
{
 800a8c8:	b508      	push	{r3, lr}
   par->handle = (event_handle_t)0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	6003      	str	r3, [r0, #0]
   tx_event_L_Data_Confirm(par->link, par->error);
 800a8ce:	f990 1008 	ldrsb.w	r1, [r0, #8]
 800a8d2:	6840      	ldr	r0, [r0, #4]
 800a8d4:	f7ff ff9a 	bl	800a80c <tx_event_L_Data_Confirm>
}
 800a8d8:	bd08      	pop	{r3, pc}

0800a8da <tx_event_L_Data_indication>:
{
 800a8da:	b538      	push	{r3, r4, r5, lr}
 800a8dc:	4604      	mov	r4, r0
   if (link->tx_record.status == tx_wait_fc)
 800a8de:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
 800a8e2:	2b05      	cmp	r3, #5
 800a8e4:	d004      	beq.n	800a8f0 <tx_event_L_Data_indication+0x16>
   tx_event_cf_frame(link);
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f7ff feae 	bl	800a648 <tx_event_cf_frame>
}
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	bd38      	pop	{r3, r4, r5, pc}
      if (rx_msg->data[0] != 0x31)
 800a8f0:	794b      	ldrb	r3, [r1, #5]
 800a8f2:	2b31      	cmp	r3, #49	; 0x31
 800a8f4:	d002      	beq.n	800a8fc <tx_event_L_Data_indication+0x22>
         link->tx_record.N_WFT_cnt = 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
      if (rx_msg->data[0] == 0x30)
 800a8fc:	794b      	ldrb	r3, [r1, #5]
 800a8fe:	2b30      	cmp	r3, #48	; 0x30
 800a900:	d010      	beq.n	800a924 <tx_event_L_Data_indication+0x4a>
      else if (rx_msg->data[0] == 0x32)
 800a902:	2b32      	cmp	r3, #50	; 0x32
 800a904:	d029      	beq.n	800a95a <tx_event_L_Data_indication+0x80>
      else if (rx_msg->data[0] == 0x31)
 800a906:	2b31      	cmp	r3, #49	; 0x31
 800a908:	d035      	beq.n	800a976 <tx_event_L_Data_indication+0x9c>
         if (link->init_info.N_USData_confirm)
 800a90a:	69a5      	ldr	r5, [r4, #24]
 800a90c:	b135      	cbz	r5, 800a91c <tx_event_L_Data_indication+0x42>
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_INVALID_FS);
 800a90e:	2305      	movs	r3, #5
 800a910:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a914:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a918:	4620      	mov	r0, r4
 800a91a:	47a8      	blx	r5
         link->tx_record.status = tx_idle;
 800a91c:	2300      	movs	r3, #0
 800a91e:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a922:	e7e0      	b.n	800a8e6 <tx_event_L_Data_indication+0xc>
         link->tx_record.status = tx_cf_wait_tx;
 800a924:	2306      	movs	r3, #6
 800a926:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
         link->tx_record.rx_BS = rx_msg->data[1];
 800a92a:	798b      	ldrb	r3, [r1, #6]
 800a92c:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
         link->tx_record.rx_BS_tx = 0;
 800a930:	2300      	movs	r3, #0
 800a932:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
         link->tx_record.rx_Stmin = rx_msg->data[2];
 800a936:	79cb      	ldrb	r3, [r1, #7]
 800a938:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
         if (link->tx_record.rx_Stmin > 0x7f)
 800a93c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a940:	d107      	bne.n	800a952 <tx_event_L_Data_indication+0x78>
         link->tx_record.last_msg_time_ms = link->current_time_ms - link->tx_record.rx_Stmin - 1;
 800a942:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a944:	f894 209b 	ldrb.w	r2, [r4, #155]	; 0x9b
 800a948:	1a9b      	subs	r3, r3, r2
 800a94a:	3b01      	subs	r3, #1
 800a94c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800a950:	e7c9      	b.n	800a8e6 <tx_event_L_Data_indication+0xc>
            link->tx_record.rx_Stmin = 1;
 800a952:	2301      	movs	r3, #1
 800a954:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 800a958:	e7f3      	b.n	800a942 <tx_event_L_Data_indication+0x68>
         link->tx_record.status = tx_idle;
 800a95a:	2300      	movs	r3, #0
 800a95c:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
         if (link->init_info.N_USData_confirm)
 800a960:	69a5      	ldr	r5, [r4, #24]
 800a962:	2d00      	cmp	r5, #0
 800a964:	d0bf      	beq.n	800a8e6 <tx_event_L_Data_indication+0xc>
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_BUFFER_OVFLW);
 800a966:	2308      	movs	r3, #8
 800a968:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a96c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a970:	4620      	mov	r0, r4
 800a972:	47a8      	blx	r5
 800a974:	e7b7      	b.n	800a8e6 <tx_event_L_Data_indication+0xc>
         if (0 != link->init_info.N_WFTmax)
 800a976:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800a97a:	2a00      	cmp	r2, #0
 800a97c:	d0b3      	beq.n	800a8e6 <tx_event_L_Data_indication+0xc>
            link->tx_record.N_WFT_cnt++;
 800a97e:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 800a982:	3301      	adds	r3, #1
 800a984:	b2db      	uxtb	r3, r3
 800a986:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
            if (link->init_info.N_WFTmax <= link->tx_record.N_WFT_cnt)
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d8ab      	bhi.n	800a8e6 <tx_event_L_Data_indication+0xc>
               link->tx_record.N_WFT_cnt = 0;
 800a98e:	2300      	movs	r3, #0
 800a990:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
               link->tx_record.status = tx_idle;
 800a994:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a998:	e7a5      	b.n	800a8e6 <tx_event_L_Data_indication+0xc>

0800a99a <tx_event_L_Data_indication_handle>:
{
 800a99a:	b510      	push	{r4, lr}
 800a99c:	4604      	mov	r4, r0
   tx_event_L_Data_indication(par->link, &par->rx_msg);
 800a99e:	f100 0108 	add.w	r1, r0, #8
 800a9a2:	6840      	ldr	r0, [r0, #4]
 800a9a4:	f7ff ff99 	bl	800a8da <tx_event_L_Data_indication>
   par->handle = (event_handle_t)0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	6023      	str	r3, [r4, #0]
}
 800a9ac:	bd10      	pop	{r4, pc}
	...

0800a9b0 <rx_event_L_Data_indication>:
{
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	460d      	mov	r5, r1
   if ((rx_msg->data[0] & 0xf0) == 0)
 800a9b6:	794b      	ldrb	r3, [r1, #5]
 800a9b8:	f013 02f0 	ands.w	r2, r3, #240	; 0xf0
 800a9bc:	d13e      	bne.n	800aa3c <rx_event_L_Data_indication+0x8c>
      if (rx_msg->data[0] != 0)
 800a9be:	b1f3      	cbz	r3, 800a9fe <rx_event_L_Data_indication+0x4e>
         if ((rx_msg->dlc <= 8) && (rx_msg->data[0] <= 7))
 800a9c0:	790a      	ldrb	r2, [r1, #4]
 800a9c2:	2a08      	cmp	r2, #8
 800a9c4:	d83e      	bhi.n	800aa44 <rx_event_L_Data_indication+0x94>
 800a9c6:	2b07      	cmp	r3, #7
 800a9c8:	d83c      	bhi.n	800aa44 <rx_event_L_Data_indication+0x94>
   return dlc_len_table[dlc & 0xf];
 800a9ca:	f002 020f 	and.w	r2, r2, #15
 800a9ce:	499d      	ldr	r1, [pc, #628]	; (800ac44 <rx_event_L_Data_indication+0x294>)
 800a9d0:	5c8a      	ldrb	r2, [r1, r2]
            if (rx_len >= (1 + len))
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d236      	bcs.n	800aa44 <rx_event_L_Data_indication+0x94>
               if (link->init_info.N_USData_indication)
 800a9d6:	6946      	ldr	r6, [r0, #20]
 800a9d8:	2e00      	cmp	r6, #0
 800a9da:	d033      	beq.n	800aa44 <rx_event_L_Data_indication+0x94>
                  if (link->rx_record.status != rx_idle)
 800a9dc:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800a9e0:	b123      	cbz	r3, 800a9ec <rx_event_L_Data_indication+0x3c>
                     link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_UNEXP_PDU);
 800a9e2:	2306      	movs	r3, #6
 800a9e4:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 800a9e8:	69c1      	ldr	r1, [r0, #28]
 800a9ea:	47b0      	blx	r6
                  link->rx_record.status = rx_idle;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
                  link->init_info.N_USData_indication(link, &rx_msg->data[1], rx_msg->data[0], N_OK);
 800a9f2:	6966      	ldr	r6, [r4, #20]
 800a9f4:	796a      	ldrb	r2, [r5, #5]
 800a9f6:	1da9      	adds	r1, r5, #6
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	47b0      	blx	r6
 800a9fc:	e022      	b.n	800aa44 <rx_event_L_Data_indication+0x94>
         if (rx_msg->dlc > 8)
 800a9fe:	7909      	ldrb	r1, [r1, #4]
 800aa00:	2908      	cmp	r1, #8
 800aa02:	d91f      	bls.n	800aa44 <rx_event_L_Data_indication+0x94>
            uint8_t len = rx_msg->data[1];
 800aa04:	79aa      	ldrb	r2, [r5, #6]
            if (len > 0)
 800aa06:	b1ea      	cbz	r2, 800aa44 <rx_event_L_Data_indication+0x94>
   return dlc_len_table[dlc & 0xf];
 800aa08:	f001 030f 	and.w	r3, r1, #15
 800aa0c:	488d      	ldr	r0, [pc, #564]	; (800ac44 <rx_event_L_Data_indication+0x294>)
 800aa0e:	5cc3      	ldrb	r3, [r0, r3]
               if (rx_len >= (2 + len))
 800aa10:	1c50      	adds	r0, r2, #1
 800aa12:	4298      	cmp	r0, r3
 800aa14:	da16      	bge.n	800aa44 <rx_event_L_Data_indication+0x94>
                  if (lenToMinDlc(len + 2) == rx_msg->dlc)
 800aa16:	f102 0c02 	add.w	ip, r2, #2
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	2b10      	cmp	r3, #16
 800aa1e:	d805      	bhi.n	800aa2c <rx_event_L_Data_indication+0x7c>
      if (len <= dlc_len_table[dlc])
 800aa20:	4888      	ldr	r0, [pc, #544]	; (800ac44 <rx_event_L_Data_indication+0x294>)
 800aa22:	5cc0      	ldrb	r0, [r0, r3]
 800aa24:	4584      	cmp	ip, r0
 800aa26:	d901      	bls.n	800aa2c <rx_event_L_Data_indication+0x7c>
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800aa28:	3301      	adds	r3, #1
 800aa2a:	e7f7      	b.n	800aa1c <rx_event_L_Data_indication+0x6c>
                  if (lenToMinDlc(len + 2) == rx_msg->dlc)
 800aa2c:	4299      	cmp	r1, r3
 800aa2e:	d109      	bne.n	800aa44 <rx_event_L_Data_indication+0x94>
                     link->init_info.N_USData_indication(link, &rx_msg->data[2], len, N_OK);
 800aa30:	6966      	ldr	r6, [r4, #20]
 800aa32:	2300      	movs	r3, #0
 800aa34:	1de9      	adds	r1, r5, #7
 800aa36:	4620      	mov	r0, r4
 800aa38:	47b0      	blx	r6
 800aa3a:	e003      	b.n	800aa44 <rx_event_L_Data_indication+0x94>
   else if ((rx_msg->data[0] & 0xf0) == 0x10)
 800aa3c:	2a10      	cmp	r2, #16
 800aa3e:	d00b      	beq.n	800aa58 <rx_event_L_Data_indication+0xa8>
   else if ((rx_msg->data[0] & 0xf0) == 0x20)
 800aa40:	2a20      	cmp	r2, #32
 800aa42:	d049      	beq.n	800aad8 <rx_event_L_Data_indication+0x128>
   if (link->rx_record.status == rx_tx_fc)
 800aa44:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	f000 80a6 	beq.w	800ab9a <rx_event_L_Data_indication+0x1ea>
   else if (link->rx_record.status == rx_tx_fc_overrun)
 800aa4e:	2b04      	cmp	r3, #4
 800aa50:	f000 80cf 	beq.w	800abf2 <rx_event_L_Data_indication+0x242>
}
 800aa54:	2000      	movs	r0, #0
 800aa56:	bd70      	pop	{r4, r5, r6, pc}
      if (link->rx_record.status != rx_idle)
 800aa58:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800aa5c:	b12b      	cbz	r3, 800aa6a <rx_event_L_Data_indication+0xba>
         link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_UNEXP_PDU);
 800aa5e:	6946      	ldr	r6, [r0, #20]
 800aa60:	2306      	movs	r3, #6
 800aa62:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 800aa66:	69c1      	ldr	r1, [r0, #28]
 800aa68:	47b0      	blx	r6
      link->rx_record.rx_len = (rx_msg->data[0] & 0xf) * 256 + rx_msg->data[1];
 800aa6a:	796a      	ldrb	r2, [r5, #5]
 800aa6c:	f002 020f 	and.w	r2, r2, #15
 800aa70:	79ab      	ldrb	r3, [r5, #6]
 800aa72:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800aa76:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
      if (0 == link->rx_record.rx_len)
 800aa7a:	b9ab      	cbnz	r3, 800aaa8 <rx_event_L_Data_indication+0xf8>
         link->rx_record.rx_len = (((uint32_t)rx_msg->data[2]) << 24) + (((uint32_t)rx_msg->data[3]) << 16) + (((uint32_t)rx_msg->data[4]) << 8) + (((uint32_t)rx_msg->data[5]));
 800aa7c:	79ea      	ldrb	r2, [r5, #7]
 800aa7e:	7a2b      	ldrb	r3, [r5, #8]
 800aa80:	041b      	lsls	r3, r3, #16
 800aa82:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 800aa86:	7a6a      	ldrb	r2, [r5, #9]
 800aa88:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800aa8c:	7aaa      	ldrb	r2, [r5, #10]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
         rx_index_offset = 6;
 800aa94:	2106      	movs	r1, #6
      if (link->rx_record.rx_len <= link->init_info.rx_buff_len)
 800aa96:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
 800aa9a:	6a23      	ldr	r3, [r4, #32]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d905      	bls.n	800aaac <rx_event_L_Data_indication+0xfc>
         link->rx_record.status = rx_tx_fc_overrun;
 800aaa0:	2304      	movs	r3, #4
 800aaa2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800aaa6:	e7cd      	b.n	800aa44 <rx_event_L_Data_indication+0x94>
         rx_index_offset = 2;
 800aaa8:	2102      	movs	r1, #2
 800aaaa:	e7f4      	b.n	800aa96 <rx_event_L_Data_indication+0xe6>
         link->rx_record.rx_index = dlc2len(rx_msg->dlc) - rx_index_offset;
 800aaac:	792b      	ldrb	r3, [r5, #4]
   return dlc_len_table[dlc & 0xf];
 800aaae:	f003 030f 	and.w	r3, r3, #15
 800aab2:	4a64      	ldr	r2, [pc, #400]	; (800ac44 <rx_event_L_Data_indication+0x294>)
 800aab4:	5cd2      	ldrb	r2, [r2, r3]
         link->rx_record.rx_index = dlc2len(rx_msg->dlc) - rx_index_offset;
 800aab6:	1a52      	subs	r2, r2, r1
 800aab8:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
         memcpy(link->init_info.rx_buff, &rx_msg->data[rx_index_offset], link->rx_record.rx_index);
 800aabc:	4429      	add	r1, r5
 800aabe:	3105      	adds	r1, #5
 800aac0:	69e0      	ldr	r0, [r4, #28]
 800aac2:	f007 f9d1 	bl	8011e68 <memcpy>
         link->rx_record.rx_SN = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
         link->rx_record.tx_BS_cnt = 0;
 800aacc:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
         link->rx_record.status = rx_tx_fc;
 800aad0:	2301      	movs	r3, #1
 800aad2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800aad6:	e7b5      	b.n	800aa44 <rx_event_L_Data_indication+0x94>
      if (link->rx_record.status == rx_wait_cf)
 800aad8:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800aadc:	2b03      	cmp	r3, #3
 800aade:	d1b1      	bne.n	800aa44 <rx_event_L_Data_indication+0x94>
         uint32_t rx_len = link->rx_record.rx_len - link->rx_record.rx_index;
 800aae0:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 800aae4:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 800aae8:	1a11      	subs	r1, r2, r0
         if (rx_len > (uint32_t)(dlc2len(rx_msg->dlc) - 1))
 800aaea:	792b      	ldrb	r3, [r5, #4]
   return dlc_len_table[dlc & 0xf];
 800aaec:	f003 030f 	and.w	r3, r3, #15
 800aaf0:	4e54      	ldr	r6, [pc, #336]	; (800ac44 <rx_event_L_Data_indication+0x294>)
 800aaf2:	5cf6      	ldrb	r6, [r6, r3]
         if (rx_len > (uint32_t)(dlc2len(rx_msg->dlc) - 1))
 800aaf4:	3e01      	subs	r6, #1
 800aaf6:	428e      	cmp	r6, r1
 800aaf8:	d300      	bcc.n	800aafc <rx_event_L_Data_indication+0x14c>
         uint32_t rx_len = link->rx_record.rx_len - link->rx_record.rx_index;
 800aafa:	460e      	mov	r6, r1
         link->rx_record.rx_SN++;
 800aafc:	f894 3144 	ldrb.w	r3, [r4, #324]	; 0x144
 800ab00:	3301      	adds	r3, #1
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
         link->rx_record.last_msg_time_ms = link->current_time_ms;
 800ab08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ab0a:	f8c4 1190 	str.w	r1, [r4, #400]	; 0x190
         if ((link->rx_record.rx_SN & 0xf) == (rx_msg->data[0] & 0xf))
 800ab0e:	7969      	ldrb	r1, [r5, #5]
 800ab10:	404b      	eors	r3, r1
 800ab12:	f013 0f0f 	tst.w	r3, #15
 800ab16:	d008      	beq.n	800ab2a <rx_event_L_Data_indication+0x17a>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_WRONG_SN);
 800ab18:	6965      	ldr	r5, [r4, #20]
 800ab1a:	2304      	movs	r3, #4
 800ab1c:	69e1      	ldr	r1, [r4, #28]
 800ab1e:	4620      	mov	r0, r4
 800ab20:	47a8      	blx	r5
            link->rx_record.status = rx_idle;
 800ab22:	2300      	movs	r3, #0
 800ab24:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800ab28:	e78c      	b.n	800aa44 <rx_event_L_Data_indication+0x94>
            memcpy(&link->init_info.rx_buff[link->rx_record.rx_index], &rx_msg->data[1], rx_len);
 800ab2a:	69e3      	ldr	r3, [r4, #28]
 800ab2c:	4632      	mov	r2, r6
 800ab2e:	1da9      	adds	r1, r5, #6
 800ab30:	4418      	add	r0, r3
 800ab32:	f007 f999 	bl	8011e68 <memcpy>
            link->rx_record.rx_index += rx_len;
 800ab36:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800ab3a:	441e      	add	r6, r3
 800ab3c:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
            if (link->rx_record.status != rx_idle)
 800ab40:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f43f af7d 	beq.w	800aa44 <rx_event_L_Data_indication+0x94>
               if (link->rx_record.rx_index >= link->rx_record.rx_len)
 800ab4a:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
 800ab4e:	4296      	cmp	r6, r2
 800ab50:	d309      	bcc.n	800ab66 <rx_event_L_Data_indication+0x1b6>
                  if (link->init_info.N_USData_indication)
 800ab52:	6965      	ldr	r5, [r4, #20]
 800ab54:	b11d      	cbz	r5, 800ab5e <rx_event_L_Data_indication+0x1ae>
                     link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_OK);
 800ab56:	2300      	movs	r3, #0
 800ab58:	69e1      	ldr	r1, [r4, #28]
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	47a8      	blx	r5
                  link->rx_record.status = rx_idle;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800ab64:	e76e      	b.n	800aa44 <rx_event_L_Data_indication+0x94>
                  link->rx_record.tx_BS_cnt++;
 800ab66:	f894 3145 	ldrb.w	r3, [r4, #325]	; 0x145
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
                  if (link->init_info.FC_BS != 0)
 800ab72:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800ab76:	2a00      	cmp	r2, #0
 800ab78:	f43f af64 	beq.w	800aa44 <rx_event_L_Data_indication+0x94>
                     if ((link->rx_record.tx_BS_cnt % link->init_info.FC_BS) == 0)
 800ab7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab80:	fb02 3311 	mls	r3, r2, r1, r3
 800ab84:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ab88:	f47f af5c 	bne.w	800aa44 <rx_event_L_Data_indication+0x94>
                        link->rx_record.status = rx_tx_fc;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
                        link->rx_record.tx_BS_cnt = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 800ab98:	e754      	b.n	800aa44 <rx_event_L_Data_indication+0x94>
      link->rx_record.last_msg.id = link->init_info.tx_id;
 800ab9a:	6863      	ldr	r3, [r4, #4]
 800ab9c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
      link->rx_record.last_msg.data[0] = 0x30;
 800aba0:	2330      	movs	r3, #48	; 0x30
 800aba2:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
      link->rx_record.last_msg.data[1] = link->init_info.FC_BS;
 800aba6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800abaa:	f884 314e 	strb.w	r3, [r4, #334]	; 0x14e
      link->rx_record.last_msg.data[2] = link->init_info.STmin;
 800abae:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800abb2:	f884 314f 	strb.w	r3, [r4, #335]	; 0x14f
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 800abb6:	f894 502f 	ldrb.w	r5, [r4, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800abba:	f005 030f 	and.w	r3, r5, #15
 800abbe:	4a21      	ldr	r2, [pc, #132]	; (800ac44 <rx_event_L_Data_indication+0x294>)
 800abc0:	5cd2      	ldrb	r2, [r2, r3]
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 800abc2:	3a03      	subs	r2, #3
 800abc4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800abc8:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800abcc:	f007 f88e 	bl	8011cec <memset>
      link->rx_record.last_msg.dlc = link->init_info.TX_DLC;
 800abd0:	f884 514c 	strb.w	r5, [r4, #332]	; 0x14c
      link->rx_record.last_msg_time_ms = link->current_time_ms;
 800abd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800abd6:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 800abda:	6923      	ldr	r3, [r4, #16]
 800abdc:	f504 71a4 	add.w	r1, r4, #328	; 0x148
 800abe0:	4620      	mov	r0, r4
 800abe2:	4798      	blx	r3
 800abe4:	2800      	cmp	r0, #0
 800abe6:	f47f af35 	bne.w	800aa54 <rx_event_L_Data_indication+0xa4>
         link->rx_record.status = rx_tx_fc_wait_confirm;
 800abea:	2302      	movs	r3, #2
 800abec:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800abf0:	e730      	b.n	800aa54 <rx_event_L_Data_indication+0xa4>
      link->rx_record.last_msg.id = link->init_info.tx_id;
 800abf2:	6863      	ldr	r3, [r4, #4]
 800abf4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
      link->rx_record.last_msg.data[0] = 0x32;
 800abf8:	2332      	movs	r3, #50	; 0x32
 800abfa:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
      link->rx_record.last_msg.data[1] = 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	f884 314e 	strb.w	r3, [r4, #334]	; 0x14e
      link->rx_record.last_msg.data[2] = 0;
 800ac04:	f884 314f 	strb.w	r3, [r4, #335]	; 0x14f
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 800ac08:	f894 502f 	ldrb.w	r5, [r4, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800ac0c:	f005 030f 	and.w	r3, r5, #15
 800ac10:	4a0c      	ldr	r2, [pc, #48]	; (800ac44 <rx_event_L_Data_indication+0x294>)
 800ac12:	5cd2      	ldrb	r2, [r2, r3]
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 800ac14:	3a03      	subs	r2, #3
 800ac16:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800ac1a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800ac1e:	f007 f865 	bl	8011cec <memset>
      link->rx_record.last_msg.dlc = link->init_info.TX_DLC;
 800ac22:	f884 514c 	strb.w	r5, [r4, #332]	; 0x14c
      link->rx_record.last_msg_time_ms = link->current_time_ms;
 800ac26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ac28:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 800ac2c:	6923      	ldr	r3, [r4, #16]
 800ac2e:	f504 71a4 	add.w	r1, r4, #328	; 0x148
 800ac32:	4620      	mov	r0, r4
 800ac34:	4798      	blx	r3
 800ac36:	2800      	cmp	r0, #0
 800ac38:	f47f af0c 	bne.w	800aa54 <rx_event_L_Data_indication+0xa4>
         link->rx_record.status = rx_tx_fc_overrun_wait_confirm;
 800ac3c:	2305      	movs	r3, #5
 800ac3e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800ac42:	e707      	b.n	800aa54 <rx_event_L_Data_indication+0xa4>
 800ac44:	0801360c 	.word	0x0801360c

0800ac48 <rx_event_L_Data_indication_handle>:

static void rx_event_L_Data_indication_handle(void *par_src)
{
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	4604      	mov	r4, r0
   struct L_Data_indication_par_t *par = (struct L_Data_indication_par_t *)par_src;
   rx_event_L_Data_indication(par->link, &par->rx_msg);
 800ac4c:	f100 0108 	add.w	r1, r0, #8
 800ac50:	6840      	ldr	r0, [r0, #4]
 800ac52:	f7ff fead 	bl	800a9b0 <rx_event_L_Data_indication>
   par->handle = (event_handle_t)0;
 800ac56:	2300      	movs	r3, #0
 800ac58:	6023      	str	r3, [r4, #0]
}
 800ac5a:	bd10      	pop	{r4, pc}

0800ac5c <tx_event_N_USData_Request>:
{
 800ac5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5e:	4604      	mov	r4, r0
 800ac60:	4616      	mov	r6, r2
 800ac62:	461d      	mov	r5, r3
   if (link->init_info.TX_DLC > 8)
 800ac64:	f890 702f 	ldrb.w	r7, [r0, #47]	; 0x2f
 800ac68:	2f08      	cmp	r7, #8
 800ac6a:	d914      	bls.n	800ac96 <tx_event_N_USData_Request+0x3a>
   return dlc_len_table[dlc & 0xf];
 800ac6c:	f007 030f 	and.w	r3, r7, #15
 800ac70:	4a5d      	ldr	r2, [pc, #372]	; (800ade8 <tx_event_N_USData_Request+0x18c>)
 800ac72:	5cd3      	ldrb	r3, [r2, r3]
      single_frame_max_len = dlc2len(link->init_info.TX_DLC) - 2;
 800ac74:	3b02      	subs	r3, #2
 800ac76:	b2db      	uxtb	r3, r3
   if (link->tx_record.status == tx_idle)
 800ac78:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 800ac7c:	2a00      	cmp	r2, #0
 800ac7e:	f040 80a5 	bne.w	800adcc <tx_event_N_USData_Request+0x170>
      if (size <= single_frame_max_len)
 800ac82:	461a      	mov	r2, r3
 800ac84:	42ab      	cmp	r3, r5
 800ac86:	d353      	bcc.n	800ad30 <tx_event_N_USData_Request+0xd4>
         if (isFunction == 0)
 800ac88:	b939      	cbnz	r1, 800ac9a <tx_event_N_USData_Request+0x3e>
            link->tx_record.last_msg.id = link->init_info.tx_id;
 800ac8a:	6863      	ldr	r3, [r4, #4]
 800ac8c:	6423      	str	r3, [r4, #64]	; 0x40
         if (size <= 7)
 800ac8e:	2d07      	cmp	r5, #7
 800ac90:	d90e      	bls.n	800acb0 <tx_event_N_USData_Request+0x54>
            for (i = 0; i < size; i++)
 800ac92:	2000      	movs	r0, #0
 800ac94:	e01f      	b.n	800acd6 <tx_event_N_USData_Request+0x7a>
   uint8_t single_frame_max_len = 7;
 800ac96:	2307      	movs	r3, #7
 800ac98:	e7ee      	b.n	800ac78 <tx_event_N_USData_Request+0x1c>
            link->tx_record.last_msg.id = link->init_info.funtion_id;
 800ac9a:	68e3      	ldr	r3, [r4, #12]
 800ac9c:	6423      	str	r3, [r4, #64]	; 0x40
 800ac9e:	e7f6      	b.n	800ac8e <tx_event_N_USData_Request+0x32>
               link->tx_record.last_msg.data[i] = payload[i];
 800aca0:	5c31      	ldrb	r1, [r6, r0]
 800aca2:	1823      	adds	r3, r4, r0
 800aca4:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
            for (i = 0; i < size; i++)
 800aca8:	3001      	adds	r0, #1
 800acaa:	42a8      	cmp	r0, r5
 800acac:	d3f8      	bcc.n	800aca0 <tx_event_N_USData_Request+0x44>
 800acae:	e007      	b.n	800acc0 <tx_event_N_USData_Request+0x64>
 800acb0:	2000      	movs	r0, #0
 800acb2:	e7fa      	b.n	800acaa <tx_event_N_USData_Request+0x4e>
               link->tx_record.last_msg.data[i] = link->init_info.frame_pad;
 800acb4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800acb8:	1823      	adds	r3, r4, r0
 800acba:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
            for (; i < single_frame_max_len; i++)
 800acbe:	3001      	adds	r0, #1
 800acc0:	4282      	cmp	r2, r0
 800acc2:	d8f7      	bhi.n	800acb4 <tx_event_N_USData_Request+0x58>
            link->tx_record.last_msg.dlc = 8;
 800acc4:	2308      	movs	r3, #8
 800acc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800acca:	e01c      	b.n	800ad06 <tx_event_N_USData_Request+0xaa>
               link->tx_record.last_msg.data[i] = payload[i];
 800accc:	5c31      	ldrb	r1, [r6, r0]
 800acce:	1823      	adds	r3, r4, r0
 800acd0:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
            for (i = 0; i < size; i++)
 800acd4:	3001      	adds	r0, #1
 800acd6:	42a8      	cmp	r0, r5
 800acd8:	d3f8      	bcc.n	800accc <tx_event_N_USData_Request+0x70>
 800acda:	e005      	b.n	800ace8 <tx_event_N_USData_Request+0x8c>
               link->tx_record.last_msg.data[i] = link->init_info.frame_pad;
 800acdc:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800ace0:	1823      	adds	r3, r4, r0
 800ace2:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
            for (; i < single_frame_max_len; i++)
 800ace6:	3001      	adds	r0, #1
 800ace8:	4282      	cmp	r2, r0
 800acea:	d8f7      	bhi.n	800acdc <tx_event_N_USData_Request+0x80>
            link->tx_record.last_msg.dlc = lenToMinDlc(size + 2);
 800acec:	1ca9      	adds	r1, r5, #2
 800acee:	b289      	uxth	r1, r1
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800acf0:	2300      	movs	r3, #0
 800acf2:	2b10      	cmp	r3, #16
 800acf4:	d805      	bhi.n	800ad02 <tx_event_N_USData_Request+0xa6>
      if (len <= dlc_len_table[dlc])
 800acf6:	4a3c      	ldr	r2, [pc, #240]	; (800ade8 <tx_event_N_USData_Request+0x18c>)
 800acf8:	5cd2      	ldrb	r2, [r2, r3]
 800acfa:	4291      	cmp	r1, r2
 800acfc:	d901      	bls.n	800ad02 <tx_event_N_USData_Request+0xa6>
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800acfe:	3301      	adds	r3, #1
 800ad00:	e7f7      	b.n	800acf2 <tx_event_N_USData_Request+0x96>
            link->tx_record.last_msg.dlc = lenToMinDlc(size + 2);
 800ad02:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
         link->tx_record.status = tx_sf_wait_tx;
 800ad06:	2301      	movs	r3, #1
 800ad08:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
         link->tx_record.last_msg_time_ms = link->current_time_ms;
 800ad0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ad0e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
         link->tx_record.current_playload = payload;
 800ad12:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
         link->tx_record.current_size = size;
 800ad16:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800ad1a:	6923      	ldr	r3, [r4, #16]
 800ad1c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800ad20:	4620      	mov	r0, r4
 800ad22:	4798      	blx	r3
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d15c      	bne.n	800ade2 <tx_event_N_USData_Request+0x186>
            link->tx_record.status = tx_sf_wait_confirm;
 800ad28:	2302      	movs	r3, #2
 800ad2a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800ad2e:	e058      	b.n	800ade2 <tx_event_N_USData_Request+0x186>
         link->tx_record.N_WFT_cnt = 0;
 800ad30:	2300      	movs	r3, #0
 800ad32:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
         link->tx_record.last_msg.id = link->init_info.tx_id;
 800ad36:	6863      	ldr	r3, [r4, #4]
 800ad38:	6423      	str	r3, [r4, #64]	; 0x40
         if (size <= 0xfff)
 800ad3a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800ad3e:	d227      	bcs.n	800ad90 <tx_event_N_USData_Request+0x134>
            link->tx_record.last_msg.data[0] = 0x10 | ((uint8_t)(size >> 8));
 800ad40:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800ad44:	f043 0310 	orr.w	r3, r3, #16
 800ad48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            link->tx_record.last_msg.data[1] = (uint8_t)(size & 0xff);
 800ad4c:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
   return dlc_len_table[dlc & 0xf];
 800ad50:	f007 030f 	and.w	r3, r7, #15
 800ad54:	4a24      	ldr	r2, [pc, #144]	; (800ade8 <tx_event_N_USData_Request+0x18c>)
 800ad56:	5cd2      	ldrb	r2, [r2, r3]
            memcpy(&link->tx_record.last_msg.data[2], payload, dlc2len(link->init_info.TX_DLC) - 2);
 800ad58:	3a02      	subs	r2, #2
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	f104 0047 	add.w	r0, r4, #71	; 0x47
 800ad60:	f007 f882 	bl	8011e68 <memcpy>
         link->tx_record.last_msg.dlc = link->init_info.TX_DLC;
 800ad64:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
         link->tx_record.status = tx_ff_wait_tx;
 800ad68:	2303      	movs	r3, #3
 800ad6a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
         link->tx_record.last_msg_time_ms = link->current_time_ms;
 800ad6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ad70:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
         link->tx_record.current_playload = payload;
 800ad74:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
         link->tx_record.current_size = size;
 800ad78:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800ad7c:	6923      	ldr	r3, [r4, #16]
 800ad7e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800ad82:	4620      	mov	r0, r4
 800ad84:	4798      	blx	r3
 800ad86:	bb60      	cbnz	r0, 800ade2 <tx_event_N_USData_Request+0x186>
            link->tx_record.status = tx_ff_wait_confirm;
 800ad88:	2304      	movs	r3, #4
 800ad8a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800ad8e:	e028      	b.n	800ade2 <tx_event_N_USData_Request+0x186>
            link->tx_record.last_msg.data[0] = 0x10;
 800ad90:	2310      	movs	r3, #16
 800ad92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            link->tx_record.last_msg.data[1] = 0;
 800ad96:	2300      	movs	r3, #0
 800ad98:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
            link->tx_record.last_msg.data[2] = (uint8_t)(size >> 24);
 800ad9c:	0e2b      	lsrs	r3, r5, #24
 800ad9e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
            link->tx_record.last_msg.data[3] = (uint8_t)(size >> 16);
 800ada2:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800ada6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
            link->tx_record.last_msg.data[4] = (uint8_t)(size >> 8);
 800adaa:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800adae:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
            link->tx_record.last_msg.data[5] = (uint8_t)(size);
 800adb2:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
   return dlc_len_table[dlc & 0xf];
 800adb6:	f007 030f 	and.w	r3, r7, #15
 800adba:	4a0b      	ldr	r2, [pc, #44]	; (800ade8 <tx_event_N_USData_Request+0x18c>)
 800adbc:	5cd2      	ldrb	r2, [r2, r3]
            memcpy(&link->tx_record.last_msg.data[6], payload, dlc2len(link->init_info.TX_DLC) - 6);
 800adbe:	3a06      	subs	r2, #6
 800adc0:	4631      	mov	r1, r6
 800adc2:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 800adc6:	f007 f84f 	bl	8011e68 <memcpy>
 800adca:	e7cb      	b.n	800ad64 <tx_event_N_USData_Request+0x108>
      printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when last request is not done\n");
 800adcc:	4907      	ldr	r1, [pc, #28]	; (800adec <tx_event_N_USData_Request+0x190>)
 800adce:	4620      	mov	r0, r4
 800add0:	f7ff fbb4 	bl	800a53c <printf_debug_msg>
      if (link->init_info.N_USData_confirm)
 800add4:	69a7      	ldr	r7, [r4, #24]
 800add6:	b127      	cbz	r7, 800ade2 <tx_event_N_USData_Request+0x186>
         link->init_info.N_USData_confirm(link, payload, size, N_ERROR);
 800add8:	2309      	movs	r3, #9
 800adda:	462a      	mov	r2, r5
 800addc:	4631      	mov	r1, r6
 800adde:	4620      	mov	r0, r4
 800ade0:	47b8      	blx	r7
}
 800ade2:	2000      	movs	r0, #0
 800ade4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ade6:	bf00      	nop
 800ade8:	0801360c 	.word	0x0801360c
 800adec:	08013168 	.word	0x08013168

0800adf0 <tx_event_N_USData_Request_handle>:
{
 800adf0:	b510      	push	{r4, lr}
 800adf2:	4604      	mov	r4, r0
   tx_event_N_USData_Request(par->link, par->isFunction, par->payload, par->size);
 800adf4:	68c3      	ldr	r3, [r0, #12]
 800adf6:	6902      	ldr	r2, [r0, #16]
 800adf8:	7a01      	ldrb	r1, [r0, #8]
 800adfa:	6840      	ldr	r0, [r0, #4]
 800adfc:	f7ff ff2e 	bl	800ac5c <tx_event_N_USData_Request>
   par->handle = (event_handle_t)0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	6023      	str	r3, [r4, #0]
}
 800ae04:	bd10      	pop	{r4, pc}

0800ae06 <report_event_to_manage_block>:
{
 800ae06:	b530      	push	{r4, r5, lr}
 800ae08:	b083      	sub	sp, #12
 800ae0a:	4604      	mov	r4, r0
   if (QueueOperateOk != QueueIn(&task->fifo, (ElemType)par_with_handle))
 800ae0c:	f100 0510 	add.w	r5, r0, #16
 800ae10:	4628      	mov	r0, r5
 800ae12:	f000 fa89 	bl	800b328 <QueueIn>
 800ae16:	2802      	cmp	r0, #2
 800ae18:	d002      	beq.n	800ae20 <report_event_to_manage_block+0x1a>
   int res = OP_NOK;
 800ae1a:	2001      	movs	r0, #1
}
 800ae1c:	b003      	add	sp, #12
 800ae1e:	bd30      	pop	{r4, r5, pc}
      if (mcu_lock_try_lock(&task->lock))
 800ae20:	4620      	mov	r0, r4
 800ae22:	f000 fac9 	bl	800b3b8 <mcu_lock_try_lock>
 800ae26:	b180      	cbz	r0, 800ae4a <report_event_to_manage_block+0x44>
            if (QueueOperateOk != QueueOut(&task->fifo, (ElemType *)&par))
 800ae28:	a901      	add	r1, sp, #4
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f000 fa9f 	bl	800b36e <QueueOut>
 800ae30:	2802      	cmp	r0, #2
 800ae32:	d105      	bne.n	800ae40 <report_event_to_manage_block+0x3a>
               if (par->handle)
 800ae34:	9801      	ldr	r0, [sp, #4]
 800ae36:	6803      	ldr	r3, [r0, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d0f5      	beq.n	800ae28 <report_event_to_manage_block+0x22>
                  par->handle((void *)par);
 800ae3c:	4798      	blx	r3
         {
 800ae3e:	e7f3      	b.n	800ae28 <report_event_to_manage_block+0x22>
         mcu_lock_unlock(&task->lock);
 800ae40:	4620      	mov	r0, r4
 800ae42:	f000 fac9 	bl	800b3d8 <mcu_lock_unlock>
      res = OP_OK;
 800ae46:	2000      	movs	r0, #0
 800ae48:	e7e8      	b.n	800ae1c <report_event_to_manage_block+0x16>
 800ae4a:	2000      	movs	r0, #0
   return res;
 800ae4c:	e7e6      	b.n	800ae1c <report_event_to_manage_block+0x16>
	...

0800ae50 <dlc2len>:
   return dlc_len_table[dlc & 0xf];
 800ae50:	f000 000f 	and.w	r0, r0, #15
}
 800ae54:	4b01      	ldr	r3, [pc, #4]	; (800ae5c <dlc2len+0xc>)
 800ae56:	5c18      	ldrb	r0, [r3, r0]
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	0801360c 	.word	0x0801360c

0800ae60 <lenToMinDlc>:
{
 800ae60:	4602      	mov	r2, r0
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800ae62:	2000      	movs	r0, #0
 800ae64:	e000      	b.n	800ae68 <lenToMinDlc+0x8>
 800ae66:	3001      	adds	r0, #1
 800ae68:	2810      	cmp	r0, #16
 800ae6a:	d803      	bhi.n	800ae74 <lenToMinDlc+0x14>
      if (len <= dlc_len_table[dlc])
 800ae6c:	4b02      	ldr	r3, [pc, #8]	; (800ae78 <lenToMinDlc+0x18>)
 800ae6e:	5c1b      	ldrb	r3, [r3, r0]
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d3f8      	bcc.n	800ae66 <lenToMinDlc+0x6>
}
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	0801360c 	.word	0x0801360c

0800ae7c <iso_can_tp_create>:

//---------------------call interface------------------------
int iso_can_tp_create(can_iso_tp_link_t_p link, struct can_iso_tp_init_t *init)
{
   if ((struct can_iso_tp_init_t *)0 == init)
 800ae7c:	2900      	cmp	r1, #0
 800ae7e:	f000 80a7 	beq.w	800afd0 <iso_can_tp_create+0x154>
{
 800ae82:	b570      	push	{r4, r5, r6, lr}
 800ae84:	4605      	mov	r5, r0
 800ae86:	460c      	mov	r4, r1
   {
      return OP_NOK;
   }
   if ((can_iso_tp_link_t_p)0 == link)
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	f000 80a3 	beq.w	800afd4 <iso_can_tp_create+0x158>
   {
      return OP_NOK;
   }
   if ((uint8_t *)0 == init->rx_buff)
 800ae8e:	69cb      	ldr	r3, [r1, #28]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d04e      	beq.n	800af32 <iso_can_tp_create+0xb6>
   {
      printf_debug_msg(init, MODULE_PRINT "null rx_buff\n");
      return OP_NOK;
   }
   if (init->rx_buff_len < 8)
 800ae94:	6a0b      	ldr	r3, [r1, #32]
 800ae96:	2b07      	cmp	r3, #7
 800ae98:	d951      	bls.n	800af3e <iso_can_tp_create+0xc2>
//   if (memcmp(&init->rx_id, &init->tx_id, sizeof(init->tx_id)) == 0)
//   {
//      printf_debug_msg(init, MODULE_PRINT "rx_id should not = tx_id\n");
//      return OP_NOK;
//   }
   if (memcmp(&init->funtion_id, &init->tx_id, sizeof(init->tx_id)) == 0)
 800ae9a:	f101 060c 	add.w	r6, r1, #12
 800ae9e:	2204      	movs	r2, #4
 800aea0:	4411      	add	r1, r2
 800aea2:	4630      	mov	r0, r6
 800aea4:	f006 ff12 	bl	8011ccc <memcmp>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d04e      	beq.n	800af4a <iso_can_tp_create+0xce>
   {
      printf_debug_msg(init, MODULE_PRINT "function_id should not = tx_id\n");
      return OP_NOK;
   }
   if (memcmp(&init->funtion_id, &init->rx_id, sizeof(init->tx_id)) == 0)
 800aeac:	2204      	movs	r2, #4
 800aeae:	f104 0108 	add.w	r1, r4, #8
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f006 ff0a 	bl	8011ccc <memcmp>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	d04c      	beq.n	800af56 <iso_can_tp_create+0xda>
   {
      printf_debug_msg(init, MODULE_PRINT "function_id should not = rx_id\n");
      return OP_NOK;
   }
   if (init->tx_id.isRemote != 0)
 800aebc:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	db4e      	blt.n	800af62 <iso_can_tp_create+0xe6>
   {
      printf_debug_msg(init, MODULE_PRINT "tx frame should not be remote frame\n");
      init->tx_id.isRemote = 0;
   }
   if (init->funtion_id.isRemote != 0)
 800aec4:	f994 300f 	ldrsb.w	r3, [r4, #15]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	db53      	blt.n	800af74 <iso_can_tp_create+0xf8>
   {
      printf_debug_msg(init, MODULE_PRINT "function frame should not be remote frame\n");
      init->funtion_id.isRemote = 0;
   }
   if (init->rx_id.isRemote != 0)
 800aecc:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	db58      	blt.n	800af86 <iso_can_tp_create+0x10a>
   {
      printf_debug_msg(init, MODULE_PRINT "rx frame should not be remote frame\n");
      init->rx_id.isRemote = 0;
   }
#ifdef SUPPORT_CAN_FD
   if (init->TX_DLC < 8)
 800aed4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800aed8:	2b07      	cmp	r3, #7
 800aeda:	d95d      	bls.n	800af98 <iso_can_tp_create+0x11c>
   {
      printf_debug_msg(init, MODULE_PRINT "TX_DLC can not less than 8\n");
      init->TX_DLC = 8;
   }
   if (init->TX_DLC > 0xf)
 800aedc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800aee0:	2b0f      	cmp	r3, #15
 800aee2:	d861      	bhi.n	800afa8 <iso_can_tp_create+0x12c>
   {
      printf_debug_msg(init, MODULE_PRINT "rx frame can not have can-fd frame, compile with maro SUPPORT_CAN_FD if you need can-fd support\n");
      return OP_NOK;
   }
#endif
   memset(link, 0, sizeof(struct can_iso_tp_link_t));
 800aee4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800aee8:	2100      	movs	r1, #0
 800aeea:	4628      	mov	r0, r5
 800aeec:	f006 fefe 	bl	8011cec <memset>
   link->init_info = *init;
 800aef0:	46ac      	mov	ip, r5
 800aef2:	46a6      	mov	lr, r4
 800aef4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aef8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aefc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800af00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800af04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800af08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800af0c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800af10:	e88c 0003 	stmia.w	ip, {r0, r1}
   if (0 != event_manage_block_init(&link->rx_events.event_manage))
 800af14:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc
 800af18:	f7ff fb86 	bl	800a628 <event_manage_block_init>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d14b      	bne.n	800afb8 <iso_can_tp_create+0x13c>
   {
      printf_debug_msg(init, MODULE_PRINT "can not create rx_events manage block\n");
      return OP_NOK;
   }
   if (0 != event_manage_block_init(&link->tx_events.event_manage))
 800af20:	f505 708e 	add.w	r0, r5, #284	; 0x11c
 800af24:	f7ff fb80 	bl	800a628 <event_manage_block_init>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d14b      	bne.n	800afc4 <iso_can_tp_create+0x148>
   {
      printf_debug_msg(init, MODULE_PRINT "can not create tx_events manage block\n");
      return OP_NOK;
   }
   SET_INIT_DONE_FLAG(link);
 800af2c:	4b2a      	ldr	r3, [pc, #168]	; (800afd8 <iso_can_tp_create+0x15c>)
 800af2e:	63ab      	str	r3, [r5, #56]	; 0x38
   return OP_OK;
}
 800af30:	bd70      	pop	{r4, r5, r6, pc}
      printf_debug_msg(init, MODULE_PRINT "null rx_buff\n");
 800af32:	492a      	ldr	r1, [pc, #168]	; (800afdc <iso_can_tp_create+0x160>)
 800af34:	4620      	mov	r0, r4
 800af36:	f7ff fb01 	bl	800a53c <printf_debug_msg>
      return OP_NOK;
 800af3a:	2001      	movs	r0, #1
 800af3c:	e7f8      	b.n	800af30 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "rx_buff_len should not less than 8\n");
 800af3e:	4928      	ldr	r1, [pc, #160]	; (800afe0 <iso_can_tp_create+0x164>)
 800af40:	4620      	mov	r0, r4
 800af42:	f7ff fafb 	bl	800a53c <printf_debug_msg>
      return OP_NOK;
 800af46:	2001      	movs	r0, #1
 800af48:	e7f2      	b.n	800af30 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "function_id should not = tx_id\n");
 800af4a:	4926      	ldr	r1, [pc, #152]	; (800afe4 <iso_can_tp_create+0x168>)
 800af4c:	4620      	mov	r0, r4
 800af4e:	f7ff faf5 	bl	800a53c <printf_debug_msg>
      return OP_NOK;
 800af52:	2001      	movs	r0, #1
 800af54:	e7ec      	b.n	800af30 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "function_id should not = rx_id\n");
 800af56:	4924      	ldr	r1, [pc, #144]	; (800afe8 <iso_can_tp_create+0x16c>)
 800af58:	4620      	mov	r0, r4
 800af5a:	f7ff faef 	bl	800a53c <printf_debug_msg>
      return OP_NOK;
 800af5e:	2001      	movs	r0, #1
 800af60:	e7e6      	b.n	800af30 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "tx frame should not be remote frame\n");
 800af62:	4922      	ldr	r1, [pc, #136]	; (800afec <iso_can_tp_create+0x170>)
 800af64:	4620      	mov	r0, r4
 800af66:	f7ff fae9 	bl	800a53c <printf_debug_msg>
      init->tx_id.isRemote = 0;
 800af6a:	79e3      	ldrb	r3, [r4, #7]
 800af6c:	f36f 13c7 	bfc	r3, #7, #1
 800af70:	71e3      	strb	r3, [r4, #7]
 800af72:	e7a7      	b.n	800aec4 <iso_can_tp_create+0x48>
      printf_debug_msg(init, MODULE_PRINT "function frame should not be remote frame\n");
 800af74:	491e      	ldr	r1, [pc, #120]	; (800aff0 <iso_can_tp_create+0x174>)
 800af76:	4620      	mov	r0, r4
 800af78:	f7ff fae0 	bl	800a53c <printf_debug_msg>
      init->funtion_id.isRemote = 0;
 800af7c:	7be3      	ldrb	r3, [r4, #15]
 800af7e:	f36f 13c7 	bfc	r3, #7, #1
 800af82:	73e3      	strb	r3, [r4, #15]
 800af84:	e7a2      	b.n	800aecc <iso_can_tp_create+0x50>
      printf_debug_msg(init, MODULE_PRINT "rx frame should not be remote frame\n");
 800af86:	491b      	ldr	r1, [pc, #108]	; (800aff4 <iso_can_tp_create+0x178>)
 800af88:	4620      	mov	r0, r4
 800af8a:	f7ff fad7 	bl	800a53c <printf_debug_msg>
      init->rx_id.isRemote = 0;
 800af8e:	7ae3      	ldrb	r3, [r4, #11]
 800af90:	f36f 13c7 	bfc	r3, #7, #1
 800af94:	72e3      	strb	r3, [r4, #11]
 800af96:	e79d      	b.n	800aed4 <iso_can_tp_create+0x58>
      printf_debug_msg(init, MODULE_PRINT "TX_DLC can not less than 8\n");
 800af98:	4917      	ldr	r1, [pc, #92]	; (800aff8 <iso_can_tp_create+0x17c>)
 800af9a:	4620      	mov	r0, r4
 800af9c:	f7ff face 	bl	800a53c <printf_debug_msg>
      init->TX_DLC = 8;
 800afa0:	2308      	movs	r3, #8
 800afa2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800afa6:	e799      	b.n	800aedc <iso_can_tp_create+0x60>
      printf_debug_msg(init, MODULE_PRINT "TX_DLC can not more than 0xf\n");
 800afa8:	4914      	ldr	r1, [pc, #80]	; (800affc <iso_can_tp_create+0x180>)
 800afaa:	4620      	mov	r0, r4
 800afac:	f7ff fac6 	bl	800a53c <printf_debug_msg>
      init->TX_DLC = 0xf;
 800afb0:	230f      	movs	r3, #15
 800afb2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800afb6:	e795      	b.n	800aee4 <iso_can_tp_create+0x68>
      printf_debug_msg(init, MODULE_PRINT "can not create rx_events manage block\n");
 800afb8:	4911      	ldr	r1, [pc, #68]	; (800b000 <iso_can_tp_create+0x184>)
 800afba:	4620      	mov	r0, r4
 800afbc:	f7ff fabe 	bl	800a53c <printf_debug_msg>
      return OP_NOK;
 800afc0:	2001      	movs	r0, #1
 800afc2:	e7b5      	b.n	800af30 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "can not create tx_events manage block\n");
 800afc4:	490f      	ldr	r1, [pc, #60]	; (800b004 <iso_can_tp_create+0x188>)
 800afc6:	4620      	mov	r0, r4
 800afc8:	f7ff fab8 	bl	800a53c <printf_debug_msg>
      return OP_NOK;
 800afcc:	2001      	movs	r0, #1
 800afce:	e7af      	b.n	800af30 <iso_can_tp_create+0xb4>
      return OP_NOK;
 800afd0:	2001      	movs	r0, #1
}
 800afd2:	4770      	bx	lr
      return OP_NOK;
 800afd4:	2001      	movs	r0, #1
 800afd6:	e7ab      	b.n	800af30 <iso_can_tp_create+0xb4>
 800afd8:	74185295 	.word	0x74185295
 800afdc:	080131ac 	.word	0x080131ac
 800afe0:	080131c8 	.word	0x080131c8
 800afe4:	080131f8 	.word	0x080131f8
 800afe8:	08013224 	.word	0x08013224
 800afec:	08013250 	.word	0x08013250
 800aff0:	08013284 	.word	0x08013284
 800aff4:	080132bc 	.word	0x080132bc
 800aff8:	080132f0 	.word	0x080132f0
 800affc:	08013318 	.word	0x08013318
 800b000:	08013344 	.word	0x08013344
 800b004:	08013378 	.word	0x08013378

0800b008 <iso_can_tp_poll>:

void iso_can_tp_poll(can_iso_tp_link_t_p link, unsigned int user_ms)
{
 800b008:	b538      	push	{r3, r4, r5, lr}
   if (!CHECK_INIT_DONE_FLAG(link))
 800b00a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b00c:	4b1e      	ldr	r3, [pc, #120]	; (800b088 <iso_can_tp_poll+0x80>)
 800b00e:	429a      	cmp	r2, r3
 800b010:	d000      	beq.n	800b014 <iso_can_tp_poll+0xc>
   else
   {
      MCU_LOCK_EXIT_CRITICAL;
      printf_debug_msg(&link->init_info, "iso_can_tp_poll cannot insert new tx evnent when last is not done.\n");
   }
}
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	4604      	mov	r4, r0
 800b016:	460d      	mov	r5, r1
   link->current_time_ms = user_ms;
 800b018:	63c1      	str	r1, [r0, #60]	; 0x3c
   MCU_LOCK_ENTER_CRITICAL;
 800b01a:	f7ff f81b 	bl	800a054 <vPortEnterCritical>
   if (link->rx_events.time_poll_par.handle == (event_handle_t)0)
 800b01e:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 800b022:	b18b      	cbz	r3, 800b048 <iso_can_tp_poll+0x40>
      MCU_LOCK_EXIT_CRITICAL;
 800b024:	f7ff f838 	bl	800a098 <vPortExitCritical>
      printf_debug_msg(&link->init_info, "iso_can_tp_poll cannot insert new rx evnent when last is not done.\n");
 800b028:	4918      	ldr	r1, [pc, #96]	; (800b08c <iso_can_tp_poll+0x84>)
 800b02a:	4620      	mov	r0, r4
 800b02c:	f7ff fa86 	bl	800a53c <printf_debug_msg>
   MCU_LOCK_ENTER_CRITICAL;
 800b030:	f7ff f810 	bl	800a054 <vPortEnterCritical>
   if (link->tx_events.time_poll_par.handle == (event_handle_t)0)
 800b034:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800b038:	b1b3      	cbz	r3, 800b068 <iso_can_tp_poll+0x60>
      MCU_LOCK_EXIT_CRITICAL;
 800b03a:	f7ff f82d 	bl	800a098 <vPortExitCritical>
      printf_debug_msg(&link->init_info, "iso_can_tp_poll cannot insert new tx evnent when last is not done.\n");
 800b03e:	4914      	ldr	r1, [pc, #80]	; (800b090 <iso_can_tp_poll+0x88>)
 800b040:	4620      	mov	r0, r4
 800b042:	f7ff fa7b 	bl	800a53c <printf_debug_msg>
 800b046:	e7e4      	b.n	800b012 <iso_can_tp_poll+0xa>
      link->rx_events.time_poll_par.handle = rx_event_poll_handle;
 800b048:	4b12      	ldr	r3, [pc, #72]	; (800b094 <iso_can_tp_poll+0x8c>)
 800b04a:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
      MCU_LOCK_EXIT_CRITICAL;
 800b04e:	f7ff f823 	bl	800a098 <vPortExitCritical>
      link->rx_events.time_poll_par.link = link;
 800b052:	f8c4 41f4 	str.w	r4, [r4, #500]	; 0x1f4
      link->rx_events.time_poll_par.user_ms = user_ms;
 800b056:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
      report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.time_poll_par);
 800b05a:	f504 71f8 	add.w	r1, r4, #496	; 0x1f0
 800b05e:	f504 70fe 	add.w	r0, r4, #508	; 0x1fc
 800b062:	f7ff fed0 	bl	800ae06 <report_event_to_manage_block>
 800b066:	e7e3      	b.n	800b030 <iso_can_tp_poll+0x28>
      link->tx_events.time_poll_par.handle = tx_event_poll_handle;
 800b068:	4b0b      	ldr	r3, [pc, #44]	; (800b098 <iso_can_tp_poll+0x90>)
 800b06a:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
      MCU_LOCK_EXIT_CRITICAL;
 800b06e:	f7ff f813 	bl	800a098 <vPortExitCritical>
      link->tx_events.time_poll_par.link = link;
 800b072:	f8c4 4100 	str.w	r4, [r4, #256]	; 0x100
      link->tx_events.time_poll_par.user_ms = user_ms;
 800b076:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
      report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.time_poll_par);
 800b07a:	f104 01fc 	add.w	r1, r4, #252	; 0xfc
 800b07e:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 800b082:	f7ff fec0 	bl	800ae06 <report_event_to_manage_block>
 800b086:	e7c4      	b.n	800b012 <iso_can_tp_poll+0xa>
 800b088:	74185295 	.word	0x74185295
 800b08c:	080133ac 	.word	0x080133ac
 800b090:	080133f0 	.word	0x080133f0
 800b094:	0800a605 	.word	0x0800a605
 800b098:	0800a7f9 	.word	0x0800a7f9

0800b09c <iso_can_tp_L_Data_confirm>:

int iso_can_tp_L_Data_confirm(can_iso_tp_link_t_p link, const struct CAN_msg *msg, int8_t error)
{
   int res = OP_NOK;
   if ((can_iso_tp_link_t_p)0 == link)
 800b09c:	2800      	cmp	r0, #0
 800b09e:	d065      	beq.n	800b16c <iso_can_tp_L_Data_confirm+0xd0>
{
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	4614      	mov	r4, r2
 800b0a6:	4605      	mov	r5, r0
   {
      return OP_NOK;
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 800b0a8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800b0aa:	4a34      	ldr	r2, [pc, #208]	; (800b17c <iso_can_tp_L_Data_confirm+0xe0>)
 800b0ac:	4291      	cmp	r1, r2
 800b0ae:	d15f      	bne.n	800b170 <iso_can_tp_L_Data_confirm+0xd4>
   {
      return OP_NOK;
   }
   if (msg != (const struct CAN_msg *)0)
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d05f      	beq.n	800b174 <iso_can_tp_L_Data_confirm+0xd8>
   {
      // RX task only focuses on sending completed flow control messages, other messages regardless, TX task does not care about sending completed flow control messages
      if ((msg->data[0] & 0xf0) == 0x30)
 800b0b4:	795a      	ldrb	r2, [r3, #5]
 800b0b6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800b0ba:	2a30      	cmp	r2, #48	; 0x30
 800b0bc:	d007      	beq.n	800b0ce <iso_can_tp_L_Data_confirm+0x32>
         }
      }
      else
      {
         if ((msg->id.isExt == link->tx_record.last_msg.id.isExt) 
             && (msg->id.id == link->tx_record.last_msg.id.id))
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
         if ((msg->id.isExt == link->tx_record.last_msg.id.isExt) 
 800b0c2:	4053      	eors	r3, r2
 800b0c4:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 800b0c8:	d033      	beq.n	800b132 <iso_can_tp_L_Data_confirm+0x96>
   int res = OP_NOK;
 800b0ca:	2001      	movs	r0, #1
 800b0cc:	e051      	b.n	800b172 <iso_can_tp_L_Data_confirm+0xd6>
             && (msg->id.id == link->rx_record.last_msg.id.id) 
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
         if ((msg->id.isExt == link->rx_record.last_msg.id.isExt) 
 800b0d4:	404a      	eors	r2, r1
 800b0d6:	f032 4240 	bics.w	r2, r2, #3221225472	; 0xc0000000
 800b0da:	d14d      	bne.n	800b178 <iso_can_tp_L_Data_confirm+0xdc>
             && (0 == memcmp(msg->data, link->rx_record.last_msg.data, dlc2len(link->rx_record.last_msg.dlc))))
 800b0dc:	f890 214c 	ldrb.w	r2, [r0, #332]	; 0x14c
   return dlc_len_table[dlc & 0xf];
 800b0e0:	f002 020f 	and.w	r2, r2, #15
             && (0 == memcmp(msg->data, link->rx_record.last_msg.data, dlc2len(link->rx_record.last_msg.dlc))))
 800b0e4:	4926      	ldr	r1, [pc, #152]	; (800b180 <iso_can_tp_L_Data_confirm+0xe4>)
 800b0e6:	5c8a      	ldrb	r2, [r1, r2]
 800b0e8:	f200 114d 	addw	r1, r0, #333	; 0x14d
 800b0ec:	1d58      	adds	r0, r3, #5
 800b0ee:	f006 fded 	bl	8011ccc <memcmp>
 800b0f2:	b108      	cbz	r0, 800b0f8 <iso_can_tp_L_Data_confirm+0x5c>
   int res = OP_NOK;
 800b0f4:	2001      	movs	r0, #1
 800b0f6:	e03c      	b.n	800b172 <iso_can_tp_L_Data_confirm+0xd6>
            MCU_LOCK_ENTER_CRITICAL;
 800b0f8:	f7fe ffac 	bl	800a054 <vPortEnterCritical>
            if (link->rx_events.L_Data_confirm_par.handle == (event_handle_t)0)
 800b0fc:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
 800b100:	b13b      	cbz	r3, 800b112 <iso_can_tp_L_Data_confirm+0x76>
               MCU_LOCK_EXIT_CRITICAL;
 800b102:	f7fe ffc9 	bl	800a098 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_confirm cannot insert new rx evnent when last is not done.\n");
 800b106:	491f      	ldr	r1, [pc, #124]	; (800b184 <iso_can_tp_L_Data_confirm+0xe8>)
 800b108:	4628      	mov	r0, r5
 800b10a:	f7ff fa17 	bl	800a53c <printf_debug_msg>
   int res = OP_NOK;
 800b10e:	2001      	movs	r0, #1
 800b110:	e02f      	b.n	800b172 <iso_can_tp_L_Data_confirm+0xd6>
               link->rx_events.L_Data_confirm_par.handle = rx_event_L_Data_Confirm_handle;
 800b112:	4b1d      	ldr	r3, [pc, #116]	; (800b188 <iso_can_tp_L_Data_confirm+0xec>)
 800b114:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
               MCU_LOCK_EXIT_CRITICAL;
 800b118:	f7fe ffbe 	bl	800a098 <vPortExitCritical>
               link->rx_events.L_Data_confirm_par.link = link;
 800b11c:	f8c5 51e8 	str.w	r5, [r5, #488]	; 0x1e8
               link->rx_events.L_Data_confirm_par.error = error;
 800b120:	f885 41ec 	strb.w	r4, [r5, #492]	; 0x1ec
               res = report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.L_Data_confirm_par);
 800b124:	f505 71f2 	add.w	r1, r5, #484	; 0x1e4
 800b128:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc
 800b12c:	f7ff fe6b 	bl	800ae06 <report_event_to_manage_block>
 800b130:	e01f      	b.n	800b172 <iso_can_tp_L_Data_confirm+0xd6>
         {
            MCU_LOCK_ENTER_CRITICAL;
 800b132:	f7fe ff8f 	bl	800a054 <vPortEnterCritical>
            if (link->tx_events.L_Data_confirm_par.handle == (event_handle_t)0)
 800b136:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 800b13a:	b13b      	cbz	r3, 800b14c <iso_can_tp_L_Data_confirm+0xb0>
               link->tx_events.L_Data_confirm_par.error = error;
               res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.L_Data_confirm_par);
            }
            else
            {
               MCU_LOCK_EXIT_CRITICAL;
 800b13c:	f7fe ffac 	bl	800a098 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_confirm cannot insert new tx event when last is not done.\n");
 800b140:	4912      	ldr	r1, [pc, #72]	; (800b18c <iso_can_tp_L_Data_confirm+0xf0>)
 800b142:	4628      	mov	r0, r5
 800b144:	f7ff f9fa 	bl	800a53c <printf_debug_msg>
   int res = OP_NOK;
 800b148:	2001      	movs	r0, #1
 800b14a:	e012      	b.n	800b172 <iso_can_tp_L_Data_confirm+0xd6>
               link->tx_events.L_Data_confirm_par.handle = tx_event_L_Data_Confirm_handle;
 800b14c:	4b10      	ldr	r3, [pc, #64]	; (800b190 <iso_can_tp_L_Data_confirm+0xf4>)
 800b14e:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
               MCU_LOCK_EXIT_CRITICAL;
 800b152:	f7fe ffa1 	bl	800a098 <vPortExitCritical>
               link->tx_events.L_Data_confirm_par.link = link;
 800b156:	f8c5 50f4 	str.w	r5, [r5, #244]	; 0xf4
               link->tx_events.L_Data_confirm_par.error = error;
 800b15a:	f885 40f8 	strb.w	r4, [r5, #248]	; 0xf8
               res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.L_Data_confirm_par);
 800b15e:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
 800b162:	f505 708e 	add.w	r0, r5, #284	; 0x11c
 800b166:	f7ff fe4e 	bl	800ae06 <report_event_to_manage_block>
 800b16a:	e002      	b.n	800b172 <iso_can_tp_L_Data_confirm+0xd6>
      return OP_NOK;
 800b16c:	2001      	movs	r0, #1
   else
   {
      // no need to print info
   }
   return res;
}
 800b16e:	4770      	bx	lr
      return OP_NOK;
 800b170:	2001      	movs	r0, #1
}
 800b172:	bd38      	pop	{r3, r4, r5, pc}
   int res = OP_NOK;
 800b174:	2001      	movs	r0, #1
 800b176:	e7fc      	b.n	800b172 <iso_can_tp_L_Data_confirm+0xd6>
 800b178:	2001      	movs	r0, #1
 800b17a:	e7fa      	b.n	800b172 <iso_can_tp_L_Data_confirm+0xd6>
 800b17c:	74185295 	.word	0x74185295
 800b180:	0801360c 	.word	0x0801360c
 800b184:	08013434 	.word	0x08013434
 800b188:	0800a617 	.word	0x0800a617
 800b18c:	08013478 	.word	0x08013478
 800b190:	0800a8c9 	.word	0x0800a8c9

0800b194 <iso_can_tp_L_Data_indication>:

int iso_can_tp_L_Data_indication(can_iso_tp_link_t_p link, const struct CAN_msg *msg)
{
   int res = OP_NOK;
   if ((can_iso_tp_link_t_p)0 == link)
 800b194:	2800      	cmp	r0, #0
 800b196:	d05e      	beq.n	800b256 <iso_can_tp_L_Data_indication+0xc2>
{
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	460c      	mov	r4, r1
 800b19c:	4605      	mov	r5, r0
   {
      return OP_NOK;
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 800b19e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b1a0:	4b32      	ldr	r3, [pc, #200]	; (800b26c <iso_can_tp_L_Data_indication+0xd8>)
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d159      	bne.n	800b25a <iso_can_tp_L_Data_indication+0xc6>
   {
      return OP_NOK;
   }
   if (msg)
 800b1a6:	2900      	cmp	r1, #0
 800b1a8:	d059      	beq.n	800b25e <iso_can_tp_L_Data_indication+0xca>
   {
      // ignore remote frames
      if (msg->id.isRemote != 0)
 800b1aa:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	db57      	blt.n	800b262 <iso_can_tp_L_Data_indication+0xce>
      {
         printf_debug_msg(&link->init_info, "L_Data_indication cannot handle CANFD frame when SUPPORT_CAN_FD is not defined.\n");
         return OP_NOK;
      }
#endif
      if (((msg->id.isExt == link->init_info.rx_id.isExt) && (msg->id.id == link->init_info.rx_id.id)) 
 800b1b2:	680a      	ldr	r2, [r1, #0]
 800b1b4:	6883      	ldr	r3, [r0, #8]
 800b1b6:	4053      	eors	r3, r2
 800b1b8:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 800b1bc:	d004      	beq.n	800b1c8 <iso_can_tp_L_Data_indication+0x34>
          || ((msg->id.isExt == link->init_info.funtion_id.isExt) && (msg->id.id == link->init_info.funtion_id.id)))
 800b1be:	68c3      	ldr	r3, [r0, #12]
 800b1c0:	405a      	eors	r2, r3
 800b1c2:	f032 4340 	bics.w	r3, r2, #3221225472	; 0xc0000000
 800b1c6:	d14e      	bne.n	800b266 <iso_can_tp_L_Data_indication+0xd2>
      {
         // TX task only pays attention to receiving flow control message, other receive message can be ignored, RX task no matter receiving flow control message
         if ((msg->data[0] & 0xf0) == 0x30)
 800b1c8:	7963      	ldrb	r3, [r4, #5]
 800b1ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1ce:	2b30      	cmp	r3, #48	; 0x30
 800b1d0:	d00c      	beq.n	800b1ec <iso_can_tp_L_Data_indication+0x58>
               printf_debug_msg(&link->init_info, "L_Data_indication cannot insert new tx event when last is not done.\n");
            }
         }
         else
         {
            MCU_LOCK_ENTER_CRITICAL;
 800b1d2:	f7fe ff3f 	bl	800a054 <vPortEnterCritical>
            if (link->rx_events.L_Data_indication_par.handle == (event_handle_t)0)
 800b1d6:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
 800b1da:	b343      	cbz	r3, 800b22e <iso_can_tp_L_Data_indication+0x9a>
               link->rx_events.L_Data_indication_par.rx_msg = *msg;
               res = report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.L_Data_indication_par);
            }
            else
            {
               MCU_LOCK_EXIT_CRITICAL;
 800b1dc:	f7fe ff5c 	bl	800a098 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_indication cannot insert new rx event when last is not done.\n");
 800b1e0:	4923      	ldr	r1, [pc, #140]	; (800b270 <iso_can_tp_L_Data_indication+0xdc>)
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	f7ff f9aa 	bl	800a53c <printf_debug_msg>
   int res = OP_NOK;
 800b1e8:	2001      	movs	r0, #1
 800b1ea:	e037      	b.n	800b25c <iso_can_tp_L_Data_indication+0xc8>
            MCU_LOCK_ENTER_CRITICAL;
 800b1ec:	f7fe ff32 	bl	800a054 <vPortEnterCritical>
            if (link->tx_events.L_Data_indication_par.handle == (event_handle_t)0)
 800b1f0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 800b1f4:	b13b      	cbz	r3, 800b206 <iso_can_tp_L_Data_indication+0x72>
               MCU_LOCK_EXIT_CRITICAL;
 800b1f6:	f7fe ff4f 	bl	800a098 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_indication cannot insert new tx event when last is not done.\n");
 800b1fa:	491e      	ldr	r1, [pc, #120]	; (800b274 <iso_can_tp_L_Data_indication+0xe0>)
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	f7ff f99d 	bl	800a53c <printf_debug_msg>
   int res = OP_NOK;
 800b202:	2001      	movs	r0, #1
 800b204:	e02a      	b.n	800b25c <iso_can_tp_L_Data_indication+0xc8>
               link->tx_events.L_Data_indication_par.handle = tx_event_L_Data_indication_handle;
 800b206:	4b1c      	ldr	r3, [pc, #112]	; (800b278 <iso_can_tp_L_Data_indication+0xe4>)
 800b208:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
               MCU_LOCK_EXIT_CRITICAL;
 800b20c:	f7fe ff44 	bl	800a098 <vPortExitCritical>
               link->tx_events.L_Data_indication_par.link = link;
 800b210:	f8c5 50a4 	str.w	r5, [r5, #164]	; 0xa4
               link->tx_events.L_Data_indication_par.rx_msg = *msg;
 800b214:	2248      	movs	r2, #72	; 0x48
 800b216:	4621      	mov	r1, r4
 800b218:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
 800b21c:	f006 fe24 	bl	8011e68 <memcpy>
               res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.L_Data_indication_par);
 800b220:	f105 01a0 	add.w	r1, r5, #160	; 0xa0
 800b224:	f505 708e 	add.w	r0, r5, #284	; 0x11c
 800b228:	f7ff fded 	bl	800ae06 <report_event_to_manage_block>
 800b22c:	e016      	b.n	800b25c <iso_can_tp_L_Data_indication+0xc8>
               link->rx_events.L_Data_indication_par.handle = rx_event_L_Data_indication_handle;
 800b22e:	4b13      	ldr	r3, [pc, #76]	; (800b27c <iso_can_tp_L_Data_indication+0xe8>)
 800b230:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
               MCU_LOCK_EXIT_CRITICAL;
 800b234:	f7fe ff30 	bl	800a098 <vPortExitCritical>
               link->rx_events.L_Data_indication_par.link = link;
 800b238:	f8c5 5198 	str.w	r5, [r5, #408]	; 0x198
               link->rx_events.L_Data_indication_par.rx_msg = *msg;
 800b23c:	2248      	movs	r2, #72	; 0x48
 800b23e:	4621      	mov	r1, r4
 800b240:	f505 70ce 	add.w	r0, r5, #412	; 0x19c
 800b244:	f006 fe10 	bl	8011e68 <memcpy>
               res = report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.L_Data_indication_par);
 800b248:	f505 71ca 	add.w	r1, r5, #404	; 0x194
 800b24c:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc
 800b250:	f7ff fdd9 	bl	800ae06 <report_event_to_manage_block>
 800b254:	e002      	b.n	800b25c <iso_can_tp_L_Data_indication+0xc8>
      return OP_NOK;
 800b256:	2001      	movs	r0, #1
            }
         }
      }
   }
   return res;
}
 800b258:	4770      	bx	lr
      return OP_NOK;
 800b25a:	2001      	movs	r0, #1
}
 800b25c:	bd38      	pop	{r3, r4, r5, pc}
   int res = OP_NOK;
 800b25e:	2001      	movs	r0, #1
 800b260:	e7fc      	b.n	800b25c <iso_can_tp_L_Data_indication+0xc8>
         return OP_NOK;
 800b262:	2001      	movs	r0, #1
 800b264:	e7fa      	b.n	800b25c <iso_can_tp_L_Data_indication+0xc8>
   int res = OP_NOK;
 800b266:	2001      	movs	r0, #1
 800b268:	e7f8      	b.n	800b25c <iso_can_tp_L_Data_indication+0xc8>
 800b26a:	bf00      	nop
 800b26c:	74185295 	.word	0x74185295
 800b270:	08013504 	.word	0x08013504
 800b274:	080134bc 	.word	0x080134bc
 800b278:	0800a99b 	.word	0x0800a99b
 800b27c:	0800ac49 	.word	0x0800ac49

0800b280 <iso_can_tp_N_USData_request>:

int iso_can_tp_N_USData_request(can_iso_tp_link_t_p link, uint8_t isFunction, const uint8_t payload[], uint32_t size)
{
   int res = OP_NOK;
   
   if ((can_iso_tp_link_t_p)0 == link)
 800b280:	b3a8      	cbz	r0, 800b2ee <iso_can_tp_N_USData_request+0x6e>
{
 800b282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b284:	460f      	mov	r7, r1
 800b286:	4616      	mov	r6, r2
 800b288:	461d      	mov	r5, r3
 800b28a:	4604      	mov	r4, r0
   {
      return OP_NOK;
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 800b28c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b28e:	4b1a      	ldr	r3, [pc, #104]	; (800b2f8 <iso_can_tp_N_USData_request+0x78>)
 800b290:	429a      	cmp	r2, r3
 800b292:	d12e      	bne.n	800b2f2 <iso_can_tp_N_USData_request+0x72>
   {
      return OP_NOK;
   }
   if ((const uint8_t *)0 == payload)
 800b294:	b12e      	cbz	r6, 800b2a2 <iso_can_tp_N_USData_request+0x22>
      res = OP_NOK;
      printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when payload == (const uint8_t*)0\n");
   }
   else
   {
      if (0 == size)
 800b296:	b94d      	cbnz	r5, 800b2ac <iso_can_tp_N_USData_request+0x2c>
      {
         res = OP_NOK;
         printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when size == 0\n");
 800b298:	4918      	ldr	r1, [pc, #96]	; (800b2fc <iso_can_tp_N_USData_request+0x7c>)
 800b29a:	f7ff f94f 	bl	800a53c <printf_debug_msg>
         res = OP_NOK;
 800b29e:	2001      	movs	r0, #1
 800b2a0:	e028      	b.n	800b2f4 <iso_can_tp_N_USData_request+0x74>
      printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when payload == (const uint8_t*)0\n");
 800b2a2:	4917      	ldr	r1, [pc, #92]	; (800b300 <iso_can_tp_N_USData_request+0x80>)
 800b2a4:	f7ff f94a 	bl	800a53c <printf_debug_msg>
      res = OP_NOK;
 800b2a8:	2001      	movs	r0, #1
 800b2aa:	e023      	b.n	800b2f4 <iso_can_tp_N_USData_request+0x74>
      }
      else
      {
         MCU_LOCK_ENTER_CRITICAL;
 800b2ac:	f7fe fed2 	bl	800a054 <vPortEnterCritical>
         if (link->tx_events.N_USData_request_par.handle == (event_handle_t)0)
 800b2b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800b2b4:	b13b      	cbz	r3, 800b2c6 <iso_can_tp_N_USData_request+0x46>
            link->tx_events.N_USData_request_par.size = size;
            res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.N_USData_request_par);
         }
         else
         {
            MCU_LOCK_EXIT_CRITICAL;
 800b2b6:	f7fe feef 	bl	800a098 <vPortExitCritical>
            printf_debug_msg(&link->init_info, "N_USData_request cannot insert new tx event when last is not done.\n");
 800b2ba:	4912      	ldr	r1, [pc, #72]	; (800b304 <iso_can_tp_N_USData_request+0x84>)
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f7ff f93d 	bl	800a53c <printf_debug_msg>
   int res = OP_NOK;
 800b2c2:	2001      	movs	r0, #1
 800b2c4:	e016      	b.n	800b2f4 <iso_can_tp_N_USData_request+0x74>
            link->tx_events.N_USData_request_par.handle = tx_event_N_USData_Request_handle;
 800b2c6:	4b10      	ldr	r3, [pc, #64]	; (800b308 <iso_can_tp_N_USData_request+0x88>)
 800b2c8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            MCU_LOCK_EXIT_CRITICAL;
 800b2cc:	f7fe fee4 	bl	800a098 <vPortExitCritical>
            link->tx_events.N_USData_request_par.link = link;
 800b2d0:	f8c4 410c 	str.w	r4, [r4, #268]	; 0x10c
            link->tx_events.N_USData_request_par.isFunction = isFunction;
 800b2d4:	f884 7110 	strb.w	r7, [r4, #272]	; 0x110
            link->tx_events.N_USData_request_par.payload = payload;
 800b2d8:	f8c4 6118 	str.w	r6, [r4, #280]	; 0x118
            link->tx_events.N_USData_request_par.size = size;
 800b2dc:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
            res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.N_USData_request_par);
 800b2e0:	f504 7184 	add.w	r1, r4, #264	; 0x108
 800b2e4:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 800b2e8:	f7ff fd8d 	bl	800ae06 <report_event_to_manage_block>
 800b2ec:	e002      	b.n	800b2f4 <iso_can_tp_N_USData_request+0x74>
      return OP_NOK;
 800b2ee:	2001      	movs	r0, #1
         }
      }
   }
   return res;
}
 800b2f0:	4770      	bx	lr
      return OP_NOK;
 800b2f2:	2001      	movs	r0, #1
}
 800b2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	74185295 	.word	0x74185295
 800b2fc:	08013594 	.word	0x08013594
 800b300:	0801354c 	.word	0x0801354c
 800b304:	080135c8 	.word	0x080135c8
 800b308:	0800adf1 	.word	0x0800adf1

0800b30c <QueueInit>:
/*Queue Init*/
uint8_t
QueueInit(struct FifoQueue *Queue, ElemType *dat, uint16_t queue_size)
{
   uint8_t ret = (0 == 1);
   Queue->queue_size = queue_size;
 800b30c:	8082      	strh	r2, [r0, #4]
   Queue->dat = dat;
 800b30e:	6001      	str	r1, [r0, #0]
   if ((Queue->dat != (ElemType *)0) && (Queue->queue_size != 0))
 800b310:	b131      	cbz	r1, 800b320 <QueueInit+0x14>
 800b312:	b13a      	cbz	r2, 800b324 <QueueInit+0x18>
   {
      Queue->front = 0;
 800b314:	2300      	movs	r3, #0
 800b316:	80c3      	strh	r3, [r0, #6]
      Queue->rear = 0;
 800b318:	8103      	strh	r3, [r0, #8]
      ;
      Queue->count = 0;
 800b31a:	8143      	strh	r3, [r0, #10]
      ret = (1 == 1);
 800b31c:	2001      	movs	r0, #1
 800b31e:	4770      	bx	lr
   uint8_t ret = (0 == 1);
 800b320:	2000      	movs	r0, #0
 800b322:	4770      	bx	lr
 800b324:	2000      	movs	r0, #0
   }
   return ret;
}
 800b326:	4770      	bx	lr

0800b328 <QueueIn>:

/* Queue In */
uint8_t
QueueIn(register struct FifoQueue *Queue, ElemType sdat)
{
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4604      	mov	r4, r0
 800b32c:	460d      	mov	r5, r1
   MCU_LOCK_ENTER_CRITICAL;
 800b32e:	f7fe fe91 	bl	800a054 <vPortEnterCritical>
   if ((Queue->front == Queue->rear) && (Queue->count == Queue->queue_size))
 800b332:	88e2      	ldrh	r2, [r4, #6]
 800b334:	8923      	ldrh	r3, [r4, #8]
 800b336:	429a      	cmp	r2, r3
 800b338:	d103      	bne.n	800b342 <QueueIn+0x1a>
 800b33a:	8961      	ldrh	r1, [r4, #10]
 800b33c:	88a2      	ldrh	r2, [r4, #4]
 800b33e:	4291      	cmp	r1, r2
 800b340:	d011      	beq.n	800b366 <QueueIn+0x3e>
      MCU_LOCK_EXIT_CRITICAL;
      return QueueFull;
   }
   else
   {
      Queue->dat[Queue->rear] = sdat;
 800b342:	6822      	ldr	r2, [r4, #0]
 800b344:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
      Queue->rear = (Queue->rear + 1) % Queue->queue_size;
 800b348:	8923      	ldrh	r3, [r4, #8]
 800b34a:	3301      	adds	r3, #1
 800b34c:	88a2      	ldrh	r2, [r4, #4]
 800b34e:	fb93 f1f2 	sdiv	r1, r3, r2
 800b352:	fb02 3311 	mls	r3, r2, r1, r3
 800b356:	8123      	strh	r3, [r4, #8]
      Queue->count = Queue->count + 1;
 800b358:	8963      	ldrh	r3, [r4, #10]
 800b35a:	3301      	adds	r3, #1
 800b35c:	8163      	strh	r3, [r4, #10]
      MCU_LOCK_EXIT_CRITICAL;
 800b35e:	f7fe fe9b 	bl	800a098 <vPortExitCritical>
      return QueueOperateOk;
 800b362:	2002      	movs	r0, #2
   }
}
 800b364:	bd38      	pop	{r3, r4, r5, pc}
      MCU_LOCK_EXIT_CRITICAL;
 800b366:	f7fe fe97 	bl	800a098 <vPortExitCritical>
      return QueueFull;
 800b36a:	2000      	movs	r0, #0
 800b36c:	e7fa      	b.n	800b364 <QueueIn+0x3c>

0800b36e <QueueOut>:

/* Queue Out*/
uint8_t
QueueOut(register struct FifoQueue *Queue, ElemType *sdat)
{
 800b36e:	b538      	push	{r3, r4, r5, lr}
 800b370:	4604      	mov	r4, r0
 800b372:	460d      	mov	r5, r1
   MCU_LOCK_ENTER_CRITICAL;
 800b374:	f7fe fe6e 	bl	800a054 <vPortEnterCritical>
   if ((Queue->front == Queue->rear) && (Queue->count == 0))
 800b378:	88e3      	ldrh	r3, [r4, #6]
 800b37a:	8922      	ldrh	r2, [r4, #8]
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d101      	bne.n	800b384 <QueueOut+0x16>
 800b380:	8962      	ldrh	r2, [r4, #10]
 800b382:	b192      	cbz	r2, 800b3aa <QueueOut+0x3c>
      MCU_LOCK_EXIT_CRITICAL;
      return QueueEmpty;
   }
   else
   {
      *sdat = Queue->dat[Queue->front];
 800b384:	6822      	ldr	r2, [r4, #0]
 800b386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b38a:	602b      	str	r3, [r5, #0]
      Queue->front = (Queue->front + 1) % Queue->queue_size;
 800b38c:	88e3      	ldrh	r3, [r4, #6]
 800b38e:	3301      	adds	r3, #1
 800b390:	88a2      	ldrh	r2, [r4, #4]
 800b392:	fb93 f1f2 	sdiv	r1, r3, r2
 800b396:	fb02 3311 	mls	r3, r2, r1, r3
 800b39a:	80e3      	strh	r3, [r4, #6]
      Queue->count = Queue->count - 1;
 800b39c:	8963      	ldrh	r3, [r4, #10]
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	8163      	strh	r3, [r4, #10]
      MCU_LOCK_EXIT_CRITICAL;
 800b3a2:	f7fe fe79 	bl	800a098 <vPortExitCritical>
      return QueueOperateOk;
 800b3a6:	2002      	movs	r0, #2
   }
 800b3a8:	bd38      	pop	{r3, r4, r5, pc}
      MCU_LOCK_EXIT_CRITICAL;
 800b3aa:	f7fe fe75 	bl	800a098 <vPortExitCritical>
      return QueueEmpty;
 800b3ae:	2001      	movs	r0, #1
 800b3b0:	e7fa      	b.n	800b3a8 <QueueOut+0x3a>

0800b3b2 <mcu_lock_init>:
#include <stdint.h>
#include "can_iso_tp_mcu_lock.h"

void mcu_lock_init(mcu_lock_t *lock)
{
   *lock = 0;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	6003      	str	r3, [r0, #0]
}
 800b3b6:	4770      	bx	lr

0800b3b8 <mcu_lock_try_lock>:

unsigned int mcu_lock_try_lock(register mcu_lock_t *lock)
{
 800b3b8:	b538      	push	{r3, r4, r5, lr}
   register volatile cpu_status_t cpu_sr;
   register unsigned int ret = (0 == 1);
   if (0 == *lock)
 800b3ba:	6805      	ldr	r5, [r0, #0]
 800b3bc:	b115      	cbz	r5, 800b3c4 <mcu_lock_try_lock+0xc>
   register unsigned int ret = (0 == 1);
 800b3be:	2500      	movs	r5, #0
         ret = (1 == 1);
      }
      MCU_LOCK_EXIT_CRITICAL;
   }
   return ret;
}
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	bd38      	pop	{r3, r4, r5, pc}
 800b3c4:	4604      	mov	r4, r0
      MCU_LOCK_ENTER_CRITICAL;
 800b3c6:	f7fe fe45 	bl	800a054 <vPortEnterCritical>
      if (0 == *lock)
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	b90b      	cbnz	r3, 800b3d2 <mcu_lock_try_lock+0x1a>
         *lock = 1;
 800b3ce:	2501      	movs	r5, #1
 800b3d0:	6025      	str	r5, [r4, #0]
      MCU_LOCK_EXIT_CRITICAL;
 800b3d2:	f7fe fe61 	bl	800a098 <vPortExitCritical>
 800b3d6:	e7f3      	b.n	800b3c0 <mcu_lock_try_lock+0x8>

0800b3d8 <mcu_lock_unlock>:
      {
         *lock = false;
      }
      MCU_LOCK_EXIT_CRITICAL;
   }*/
   *lock = 0;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	6003      	str	r3, [r0, #0]
 800b3dc:	4770      	bx	lr
	...

0800b3e0 <lan9252_cmd_read>:
#include "lan9252.h"
#include "spiDma.h"

static void lan9252_cmd_read(uint16_t address)
{
 800b3e0:	b500      	push	{lr}
 800b3e2:	b083      	sub	sp, #12
   uint8_t command[4] = {0u};
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	9301      	str	r3, [sp, #4]

   /* Prepare the data structure contains read command. */
   command[0] = (uint8_t)LAN9252_ESC_CMD_SERIAL_FAST_READ;
 800b3e8:	230b      	movs	r3, #11
 800b3ea:	f88d 3004 	strb.w	r3, [sp, #4]
   command[1] = (uint8_t)((address >> 8u) & 0xFF);
 800b3ee:	0a03      	lsrs	r3, r0, #8
 800b3f0:	f88d 3005 	strb.w	r3, [sp, #5]
   command[2] = (uint8_t)(address & 0xFF);
 800b3f4:	f88d 0006 	strb.w	r0, [sp, #6]
   command[3] = (uint8_t)(0x01);
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	f88d 3007 	strb.w	r3, [sp, #7]

   /* Send the command to Lan9252. */
   SpiDma_write(&spiDmaModule, (uint8_t *)&command[0], sizeof(command));
 800b3fe:	2204      	movs	r2, #4
 800b400:	eb0d 0102 	add.w	r1, sp, r2
 800b404:	4802      	ldr	r0, [pc, #8]	; (800b410 <lan9252_cmd_read+0x30>)
 800b406:	f003 fc2f 	bl	800ec68 <SpiDma_write>
}
 800b40a:	b003      	add	sp, #12
 800b40c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b410:	20000120 	.word	0x20000120

0800b414 <lan9252_cmd_write>:

static void lan9252_cmd_write(uint16_t address)
{
 800b414:	b500      	push	{lr}
 800b416:	b083      	sub	sp, #12
   uint8_t command[3] = {0u};
 800b418:	4b0b      	ldr	r3, [pc, #44]	; (800b448 <lan9252_cmd_write+0x34>)
 800b41a:	881b      	ldrh	r3, [r3, #0]
 800b41c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800b420:	2300      	movs	r3, #0
 800b422:	f88d 3006 	strb.w	r3, [sp, #6]

   /* Prepare the data structure contains read command. */
   command[0] = (uint8_t)LAN9252_ESC_CMD_SERIAL_WRITE;
 800b426:	2302      	movs	r3, #2
 800b428:	f88d 3004 	strb.w	r3, [sp, #4]
   command[1] = (uint8_t)((address >> 8u) & 0xFF);
 800b42c:	0a03      	lsrs	r3, r0, #8
 800b42e:	f88d 3005 	strb.w	r3, [sp, #5]
   command[2] = (uint8_t)(address & 0xFF);
 800b432:	f88d 0006 	strb.w	r0, [sp, #6]

   /* Send the command to tmc slave. */
   SpiDma_write(&spiDmaModule, (uint8_t *)&command[0], sizeof(command));
 800b436:	2203      	movs	r2, #3
 800b438:	a901      	add	r1, sp, #4
 800b43a:	4804      	ldr	r0, [pc, #16]	; (800b44c <lan9252_cmd_write+0x38>)
 800b43c:	f003 fc14 	bl	800ec68 <SpiDma_write>
}
 800b440:	b003      	add	sp, #12
 800b442:	f85d fb04 	ldr.w	pc, [sp], #4
 800b446:	bf00      	nop
 800b448:	08012e20 	.word	0x08012e20
 800b44c:	20000120 	.word	0x20000120

0800b450 <lan9252_Init>:

void lan9252_Init(void)
{
 800b450:	b508      	push	{r3, lr}
   /* Initialize the SPI DMA module. */
   SpiDma_Init(&spiDmaModule);
 800b452:	4802      	ldr	r0, [pc, #8]	; (800b45c <lan9252_Init+0xc>)
 800b454:	f003 fbde 	bl	800ec14 <SpiDma_Init>

   /* Verify the connection with Lan9252. */

   /* Reset all register status of lan9252. */
}
 800b458:	bd08      	pop	{r3, pc}
 800b45a:	bf00      	nop
 800b45c:	20000120 	.word	0x20000120

0800b460 <lan9252_read_data>:
{
   SpiDma_Deinit(&spiDmaModule);
}

void lan9252_read_data(uint8_t *data_ptr, uint16_t address, uint16_t len)
{
 800b460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b462:	b0a1      	sub	sp, #132	; 0x84
 800b464:	4605      	mov	r5, r0
 800b466:	460e      	mov	r6, r1
 800b468:	4614      	mov	r4, r2
   uint8_t iter = 0u;
   uint8_t tx_dummy_arr[128];

   /* Prepare the tx data dummy. */
   for (iter = 0U; iter < len; iter++)
 800b46a:	f04f 0c00 	mov.w	ip, #0
 800b46e:	e00a      	b.n	800b486 <lan9252_read_data+0x26>
   {
      tx_dummy_arr[iter] = 0xFFu;
 800b470:	f10c 0380 	add.w	r3, ip, #128	; 0x80
 800b474:	eb0d 0e03 	add.w	lr, sp, r3
 800b478:	23ff      	movs	r3, #255	; 0xff
 800b47a:	f80e 3c80 	strb.w	r3, [lr, #-128]
   for (iter = 0U; iter < len; iter++)
 800b47e:	f10c 0c01 	add.w	ip, ip, #1
 800b482:	fa5f fc8c 	uxtb.w	ip, ip
 800b486:	fa1f fe8c 	uxth.w	lr, ip
 800b48a:	45a6      	cmp	lr, r4
 800b48c:	d3f0      	bcc.n	800b470 <lan9252_read_data+0x10>
   }

   /* Change the CS pin to active state. */
   SpiDma_CsPinChangeState(&spiDmaModule, true);
 800b48e:	4f0a      	ldr	r7, [pc, #40]	; (800b4b8 <lan9252_read_data+0x58>)
 800b490:	2101      	movs	r1, #1
 800b492:	4638      	mov	r0, r7
 800b494:	f003 fbda 	bl	800ec4c <SpiDma_CsPinChangeState>

   /* Send Read command to address. */
   lan9252_cmd_read(address);
 800b498:	4630      	mov	r0, r6
 800b49a:	f7ff ffa1 	bl	800b3e0 <lan9252_cmd_read>

   /* Read data. */
   SpiDma_read(&spiDmaModule, data_ptr, tx_dummy_arr, len);
 800b49e:	4623      	mov	r3, r4
 800b4a0:	466a      	mov	r2, sp
 800b4a2:	4629      	mov	r1, r5
 800b4a4:	4638      	mov	r0, r7
 800b4a6:	f003 fc1b 	bl	800ece0 <SpiDma_read>

   /* Change the CS pin to inactive state. */
   SpiDma_CsPinChangeState(&spiDmaModule, false);
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	f003 fbcd 	bl	800ec4c <SpiDma_CsPinChangeState>
}
 800b4b2:	b021      	add	sp, #132	; 0x84
 800b4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20000120 	.word	0x20000120

0800b4bc <lan9252_read_32>:

   return ret;
}

uint32_t lan9252_read_32(uint16_t address)
{
 800b4bc:	b500      	push	{lr}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	4601      	mov	r1, r0
   uint32_t ret = 0u;
   uint8_t buffer[4] = {0u};
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	9301      	str	r3, [sp, #4]

   lan9252_read_data(buffer, address, sizeof(buffer));
 800b4c6:	2204      	movs	r2, #4
 800b4c8:	eb0d 0002 	add.w	r0, sp, r2
 800b4cc:	f7ff ffc8 	bl	800b460 <lan9252_read_data>

   ret = (((uint32_t)buffer[3] << 24u) |
 800b4d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
          ((uint32_t)buffer[2] << 16u) |
 800b4d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b4d8:	041b      	lsls	r3, r3, #16
   ret = (((uint32_t)buffer[3] << 24u) |
 800b4da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          ((uint32_t)buffer[1] << 8u) |
 800b4de:	f89d 2005 	ldrb.w	r2, [sp, #5]
          ((uint32_t)buffer[2] << 16u) |
 800b4e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          ((uint32_t)buffer[0] << 0u));
 800b4e6:	f89d 0004 	ldrb.w	r0, [sp, #4]

   return ret;
}
 800b4ea:	4318      	orrs	r0, r3
 800b4ec:	b003      	add	sp, #12
 800b4ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b4f4 <lan9252_write_data>:

void lan9252_write_data(uint8_t *data_ptr, uint16_t address, uint16_t len)
{
 800b4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f6:	4605      	mov	r5, r0
 800b4f8:	460f      	mov	r7, r1
 800b4fa:	4616      	mov	r6, r2
   /* Change the CS pin to active state. */
   SpiDma_CsPinChangeState(&spiDmaModule, true);
 800b4fc:	4c08      	ldr	r4, [pc, #32]	; (800b520 <lan9252_write_data+0x2c>)
 800b4fe:	2101      	movs	r1, #1
 800b500:	4620      	mov	r0, r4
 800b502:	f003 fba3 	bl	800ec4c <SpiDma_CsPinChangeState>

   /* Send request write. */
   lan9252_cmd_write(address);
 800b506:	4638      	mov	r0, r7
 800b508:	f7ff ff84 	bl	800b414 <lan9252_cmd_write>

   /* Send data to lan9252. */
   SpiDma_write (&spiDmaModule, data_ptr, len);
 800b50c:	4632      	mov	r2, r6
 800b50e:	4629      	mov	r1, r5
 800b510:	4620      	mov	r0, r4
 800b512:	f003 fba9 	bl	800ec68 <SpiDma_write>

   /* Change the CS pin to inactive state. */
   SpiDma_CsPinChangeState(&spiDmaModule, false);
 800b516:	2100      	movs	r1, #0
 800b518:	4620      	mov	r0, r4
 800b51a:	f003 fb97 	bl	800ec4c <SpiDma_CsPinChangeState>
}
 800b51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b520:	20000120 	.word	0x20000120

0800b524 <lan9252_write_32>:

   lan9252_write_data (data, address, 2);
}

void lan9252_write_32 (uint16_t address, uint32_t value)
{
 800b524:	b500      	push	{lr}
 800b526:	b083      	sub	sp, #12
   uint8_t data[4] = {0u};
 800b528:	2300      	movs	r3, #0
 800b52a:	9301      	str	r3, [sp, #4]

   data[0] = (uint8_t)(value & 0xFF);
 800b52c:	f88d 1004 	strb.w	r1, [sp, #4]
   data[1] = (uint8_t)((value >> 8u) & 0xFF);
 800b530:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800b534:	f88d 3005 	strb.w	r3, [sp, #5]
   data[2] = (uint8_t)((value >> 16u) & 0xFF);
 800b538:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800b53c:	f88d 3006 	strb.w	r3, [sp, #6]
   data[3] = (uint8_t)((value >> 24u) & 0xFF);
 800b540:	0e09      	lsrs	r1, r1, #24
 800b542:	f88d 1007 	strb.w	r1, [sp, #7]

   lan9252_write_data (data, address, 4u);
 800b546:	2204      	movs	r2, #4
 800b548:	4601      	mov	r1, r0
 800b54a:	eb0d 0002 	add.w	r0, sp, r2
 800b54e:	f7ff ffd1 	bl	800b4f4 <lan9252_write_data>
}
 800b552:	b003      	add	sp, #12
 800b554:	f85d fb04 	ldr.w	pc, [sp], #4

0800b558 <lwrb_init>:
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t *buff, void *buffdata, size_t size)
{
   if (buff == NULL || buffdata == NULL || size == 0)
 800b558:	4603      	mov	r3, r0
 800b55a:	b198      	cbz	r0, 800b584 <lwrb_init+0x2c>
 800b55c:	b1a1      	cbz	r1, 800b588 <lwrb_init+0x30>
 800b55e:	b90a      	cbnz	r2, 800b564 <lwrb_init+0xc>
   {
      return 0;
 800b560:	2000      	movs	r0, #0
   buff->magic1 = 0xDEADBEEF;
   buff->magic2 = ~0xDEADBEEF;
#endif /* LWRB_USE_MAGIC */

   return 1;
}
 800b562:	4770      	bx	lr
   BUF_MEMSET((void *)buff, 0x00, sizeof(*buff));
 800b564:	2000      	movs	r0, #0
 800b566:	6018      	str	r0, [r3, #0]
 800b568:	6058      	str	r0, [r3, #4]
 800b56a:	6098      	str	r0, [r3, #8]
 800b56c:	60d8      	str	r0, [r3, #12]
 800b56e:	6118      	str	r0, [r3, #16]
 800b570:	6158      	str	r0, [r3, #20]
 800b572:	6198      	str	r0, [r3, #24]
   buff->size = size;
 800b574:	609a      	str	r2, [r3, #8]
   buff->buff = buffdata;
 800b576:	6059      	str	r1, [r3, #4]
   buff->magic1 = 0xDEADBEEF;
 800b578:	4a04      	ldr	r2, [pc, #16]	; (800b58c <lwrb_init+0x34>)
 800b57a:	601a      	str	r2, [r3, #0]
   buff->magic2 = ~0xDEADBEEF;
 800b57c:	4a04      	ldr	r2, [pc, #16]	; (800b590 <lwrb_init+0x38>)
 800b57e:	619a      	str	r2, [r3, #24]
   return 1;
 800b580:	2001      	movs	r0, #1
 800b582:	4770      	bx	lr
      return 0;
 800b584:	2000      	movs	r0, #0
 800b586:	4770      	bx	lr
 800b588:	2000      	movs	r0, #0
 800b58a:	4770      	bx	lr
 800b58c:	deadbeef 	.word	0xdeadbeef
 800b590:	21524110 	.word	0x21524110

0800b594 <lwrb_get_full>:
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t *buff)
{
   size_t w, r, size;

   if (!BUF_IS_VALID(buff))
 800b594:	4603      	mov	r3, r0
 800b596:	b1b0      	cbz	r0, 800b5c6 <lwrb_get_full+0x32>
 800b598:	6801      	ldr	r1, [r0, #0]
 800b59a:	4a10      	ldr	r2, [pc, #64]	; (800b5dc <lwrb_get_full+0x48>)
 800b59c:	4291      	cmp	r1, r2
 800b59e:	d114      	bne.n	800b5ca <lwrb_get_full+0x36>
 800b5a0:	6981      	ldr	r1, [r0, #24]
 800b5a2:	4a0f      	ldr	r2, [pc, #60]	; (800b5e0 <lwrb_get_full+0x4c>)
 800b5a4:	4291      	cmp	r1, r2
 800b5a6:	d112      	bne.n	800b5ce <lwrb_get_full+0x3a>
 800b5a8:	6842      	ldr	r2, [r0, #4]
 800b5aa:	b192      	cbz	r2, 800b5d2 <lwrb_get_full+0x3e>
 800b5ac:	6880      	ldr	r0, [r0, #8]
 800b5ae:	b198      	cbz	r0, 800b5d8 <lwrb_get_full+0x44>
   {
      return 0;
   }

   /* Use temporary values in case they are changed during operations */
   w = buff->w;
 800b5b0:	691a      	ldr	r2, [r3, #16]
   r = buff->r;
 800b5b2:	68d9      	ldr	r1, [r3, #12]
   if (w == r)
 800b5b4:	428a      	cmp	r2, r1
 800b5b6:	d00e      	beq.n	800b5d6 <lwrb_get_full+0x42>
   {
      size = 0;
   }
   else if (w > r)
 800b5b8:	d901      	bls.n	800b5be <lwrb_get_full+0x2a>
   {
      size = w - r;
 800b5ba:	1a50      	subs	r0, r2, r1
 800b5bc:	4770      	bx	lr
   }
   else
   {
      size = buff->size - (r - w);
 800b5be:	6898      	ldr	r0, [r3, #8]
 800b5c0:	1a52      	subs	r2, r2, r1
 800b5c2:	4410      	add	r0, r2
 800b5c4:	4770      	bx	lr
      return 0;
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	4770      	bx	lr
 800b5ca:	2000      	movs	r0, #0
 800b5cc:	4770      	bx	lr
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	4770      	bx	lr
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	4770      	bx	lr
      size = 0;
 800b5d6:	2000      	movs	r0, #0
   }
   return size;
}
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	deadbeef 	.word	0xdeadbeef
 800b5e0:	21524110 	.word	0x21524110

0800b5e4 <lwrb_get_linear_block_read_address>:
 * \return          Linear buffer start address
 */
void *
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t *buff)
{
   if (!BUF_IS_VALID(buff))
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	b178      	cbz	r0, 800b608 <lwrb_get_linear_block_read_address+0x24>
 800b5e8:	6801      	ldr	r1, [r0, #0]
 800b5ea:	4a0b      	ldr	r2, [pc, #44]	; (800b618 <lwrb_get_linear_block_read_address+0x34>)
 800b5ec:	4291      	cmp	r1, r2
 800b5ee:	d10c      	bne.n	800b60a <lwrb_get_linear_block_read_address+0x26>
 800b5f0:	6981      	ldr	r1, [r0, #24]
 800b5f2:	4a0a      	ldr	r2, [pc, #40]	; (800b61c <lwrb_get_linear_block_read_address+0x38>)
 800b5f4:	4291      	cmp	r1, r2
 800b5f6:	d10a      	bne.n	800b60e <lwrb_get_linear_block_read_address+0x2a>
 800b5f8:	6840      	ldr	r0, [r0, #4]
 800b5fa:	b158      	cbz	r0, 800b614 <lwrb_get_linear_block_read_address+0x30>
 800b5fc:	689a      	ldr	r2, [r3, #8]
 800b5fe:	b142      	cbz	r2, 800b612 <lwrb_get_linear_block_read_address+0x2e>
   {
      return NULL;
   }
   return &buff->buff[buff->r];
 800b600:	6858      	ldr	r0, [r3, #4]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	4418      	add	r0, r3
 800b606:	4770      	bx	lr
 800b608:	4770      	bx	lr
      return NULL;
 800b60a:	2000      	movs	r0, #0
 800b60c:	4770      	bx	lr
 800b60e:	2000      	movs	r0, #0
 800b610:	4770      	bx	lr
 800b612:	2000      	movs	r0, #0
}
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	deadbeef 	.word	0xdeadbeef
 800b61c:	21524110 	.word	0x21524110

0800b620 <lwrb_get_linear_block_read_length>:
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t *buff)
{
   size_t w, r, len;

   if (!BUF_IS_VALID(buff))
 800b620:	4603      	mov	r3, r0
 800b622:	b1b0      	cbz	r0, 800b652 <lwrb_get_linear_block_read_length+0x32>
 800b624:	6801      	ldr	r1, [r0, #0]
 800b626:	4a10      	ldr	r2, [pc, #64]	; (800b668 <lwrb_get_linear_block_read_length+0x48>)
 800b628:	4291      	cmp	r1, r2
 800b62a:	d114      	bne.n	800b656 <lwrb_get_linear_block_read_length+0x36>
 800b62c:	6981      	ldr	r1, [r0, #24]
 800b62e:	4a0f      	ldr	r2, [pc, #60]	; (800b66c <lwrb_get_linear_block_read_length+0x4c>)
 800b630:	4291      	cmp	r1, r2
 800b632:	d112      	bne.n	800b65a <lwrb_get_linear_block_read_length+0x3a>
 800b634:	6842      	ldr	r2, [r0, #4]
 800b636:	b192      	cbz	r2, 800b65e <lwrb_get_linear_block_read_length+0x3e>
 800b638:	6880      	ldr	r0, [r0, #8]
 800b63a:	b198      	cbz	r0, 800b664 <lwrb_get_linear_block_read_length+0x44>
   {
      return 0;
   }

   /* Use temporary values in case they are changed during operations */
   w = buff->w;
 800b63c:	691a      	ldr	r2, [r3, #16]
   r = buff->r;
 800b63e:	68d8      	ldr	r0, [r3, #12]
   if (w > r)
 800b640:	4282      	cmp	r2, r0
 800b642:	d901      	bls.n	800b648 <lwrb_get_linear_block_read_length+0x28>
   {
      len = w - r;
 800b644:	1a10      	subs	r0, r2, r0
 800b646:	4770      	bx	lr
   }
   else if (r > w)
 800b648:	4282      	cmp	r2, r0
 800b64a:	d20a      	bcs.n	800b662 <lwrb_get_linear_block_read_length+0x42>
   {
      len = buff->size - r;
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	1a18      	subs	r0, r3, r0
 800b650:	4770      	bx	lr
      return 0;
 800b652:	2000      	movs	r0, #0
 800b654:	4770      	bx	lr
 800b656:	2000      	movs	r0, #0
 800b658:	4770      	bx	lr
 800b65a:	2000      	movs	r0, #0
 800b65c:	4770      	bx	lr
 800b65e:	2000      	movs	r0, #0
 800b660:	4770      	bx	lr
   }
   else
   {
      len = 0;
 800b662:	2000      	movs	r0, #0
   }
   return len;
}
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	deadbeef 	.word	0xdeadbeef
 800b66c:	21524110 	.word	0x21524110

0800b670 <lwrb_skip>:
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t *buff, size_t len)
{
 800b670:	b570      	push	{r4, r5, r6, lr}
   size_t full;

   if (!BUF_IS_VALID(buff) || len == 0)
 800b672:	b348      	cbz	r0, 800b6c8 <lwrb_skip+0x58>
 800b674:	460d      	mov	r5, r1
 800b676:	4606      	mov	r6, r0
 800b678:	6802      	ldr	r2, [r0, #0]
 800b67a:	4b18      	ldr	r3, [pc, #96]	; (800b6dc <lwrb_skip+0x6c>)
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d125      	bne.n	800b6cc <lwrb_skip+0x5c>
 800b680:	6982      	ldr	r2, [r0, #24]
 800b682:	4b17      	ldr	r3, [pc, #92]	; (800b6e0 <lwrb_skip+0x70>)
 800b684:	429a      	cmp	r2, r3
 800b686:	d124      	bne.n	800b6d2 <lwrb_skip+0x62>
 800b688:	6843      	ldr	r3, [r0, #4]
 800b68a:	b323      	cbz	r3, 800b6d6 <lwrb_skip+0x66>
 800b68c:	6884      	ldr	r4, [r0, #8]
 800b68e:	b1f4      	cbz	r4, 800b6ce <lwrb_skip+0x5e>
 800b690:	b909      	cbnz	r1, 800b696 <lwrb_skip+0x26>
   {
      return 0;
 800b692:	460c      	mov	r4, r1
 800b694:	e01b      	b.n	800b6ce <lwrb_skip+0x5e>
   }

   full = lwrb_get_full(buff);
 800b696:	f7ff ff7d 	bl	800b594 <lwrb_get_full>
   len = BUF_MIN(len, full);
 800b69a:	462c      	mov	r4, r5
 800b69c:	4285      	cmp	r5, r0
 800b69e:	bf28      	it	cs
 800b6a0:	4604      	movcs	r4, r0
   buff->r += len;
 800b6a2:	68f3      	ldr	r3, [r6, #12]
 800b6a4:	4423      	add	r3, r4
 800b6a6:	60f3      	str	r3, [r6, #12]
   if (buff->r >= buff->size)
 800b6a8:	68f2      	ldr	r2, [r6, #12]
 800b6aa:	68b3      	ldr	r3, [r6, #8]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d303      	bcc.n	800b6b8 <lwrb_skip+0x48>
   {
      buff->r -= buff->size;
 800b6b0:	68b2      	ldr	r2, [r6, #8]
 800b6b2:	68f3      	ldr	r3, [r6, #12]
 800b6b4:	1a9b      	subs	r3, r3, r2
 800b6b6:	60f3      	str	r3, [r6, #12]
   }
   BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 800b6b8:	6973      	ldr	r3, [r6, #20]
 800b6ba:	b143      	cbz	r3, 800b6ce <lwrb_skip+0x5e>
 800b6bc:	6973      	ldr	r3, [r6, #20]
 800b6be:	4622      	mov	r2, r4
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	4798      	blx	r3
 800b6c6:	e002      	b.n	800b6ce <lwrb_skip+0x5e>
      return 0;
 800b6c8:	2400      	movs	r4, #0
 800b6ca:	e000      	b.n	800b6ce <lwrb_skip+0x5e>
 800b6cc:	2400      	movs	r4, #0
   return len;
}
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	bd70      	pop	{r4, r5, r6, pc}
      return 0;
 800b6d2:	2400      	movs	r4, #0
 800b6d4:	e7fb      	b.n	800b6ce <lwrb_skip+0x5e>
 800b6d6:	2400      	movs	r4, #0
 800b6d8:	e7f9      	b.n	800b6ce <lwrb_skip+0x5e>
 800b6da:	bf00      	nop
 800b6dc:	deadbeef 	.word	0xdeadbeef
 800b6e0:	21524110 	.word	0x21524110

0800b6e4 <md80_PackImpedanceFrame>:
   return (me->local.isEnabled);
}

static void md80_PackImpedanceFrame(tMd80_Device *const me)
{
   me->local.command.toMd80.length = 32u;
 800b6e4:	2320      	movs	r3, #32
 800b6e6:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_IMP_CONTROL;
 800b6ea:	2312      	movs	r3, #18
 800b6ec:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->config.impedanceController.kp;
 800b6f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b6f8:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = me->config.impedanceController.kd;
 800b6fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b6fe:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = me->input.position;
 800b702:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b704:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
   *(float *)&me->local.command.toMd80.data[14] = me->input.velocity;
 800b708:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b70a:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
   *(float *)&me->local.command.toMd80.data[18] = me->input.torque;
 800b70e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b710:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
   *(float *)&me->local.command.toMd80.data[22] = me->config.torqueMax;
 800b714:	6843      	ldr	r3, [r0, #4]
 800b716:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
}
 800b71a:	4770      	bx	lr

0800b71c <md80_PackPositionFrame>:

static void md80_PackPositionFrame(tMd80_Device *const me)
{
   me->local.command.toMd80.length = 32;
 800b71c:	2320      	movs	r3, #32
 800b71e:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_POS_CONTROL;
 800b722:	2310      	movs	r3, #16
 800b724:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b728:	2300      	movs	r3, #0
 800b72a:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->config.positionController.kp;
 800b72e:	6a03      	ldr	r3, [r0, #32]
 800b730:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = me->config.positionController.ki;
 800b734:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b736:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = me->config.positionController.kd;
 800b73a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b73c:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
   *(float *)&me->local.command.toMd80.data[14] = me->config.positionController.i_windup;
 800b740:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b742:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
   *(float *)&me->local.command.toMd80.data[18] = me->config.velocityMax;
 800b746:	6883      	ldr	r3, [r0, #8]
 800b748:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
   *(float *)&me->local.command.toMd80.data[22] = me->input.position;
 800b74c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b74e:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
}
 800b752:	4770      	bx	lr

0800b754 <md80_PackVelocityFrame>:

static void md80_PackVelocityFrame(tMd80_Device *const me)
{
   me->local.command.toMd80.length = 32;
 800b754:	2320      	movs	r3, #32
 800b756:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_VEL_CONTROL;
 800b75a:	2311      	movs	r3, #17
 800b75c:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b760:	2300      	movs	r3, #0
 800b762:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->config.velocityController.kp;
 800b766:	6903      	ldr	r3, [r0, #16]
 800b768:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = me->config.velocityController.ki;
 800b76c:	6943      	ldr	r3, [r0, #20]
 800b76e:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = me->config.velocityController.kd;
 800b772:	6983      	ldr	r3, [r0, #24]
 800b774:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
   *(float *)&me->local.command.toMd80.data[14] = me->config.velocityController.i_windup;
 800b778:	69c3      	ldr	r3, [r0, #28]
 800b77a:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
   *(float *)&me->local.command.toMd80.data[18] = me->config.torqueMax;
 800b77e:	6843      	ldr	r3, [r0, #4]
 800b780:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
   *(float *)&me->local.command.toMd80.data[22] = me->input.velocity;
 800b784:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b786:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
}
 800b78a:	4770      	bx	lr

0800b78c <md80_PackMotionTargetsFrame>:

static void md80_PackMotionTargetsFrame(tMd80_Device *const me)
{
   me->local.command.toMd80.length = 24;
 800b78c:	2318      	movs	r3, #24
 800b78e:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_SET_MOTION_TARGETS;
 800b792:	2314      	movs	r3, #20
 800b794:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b798:	2300      	movs	r3, #0
 800b79a:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->input.velocity;
 800b79e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b7a0:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = me->input.position;
 800b7a4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b7a6:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = me->input.torque;
 800b7aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b7ac:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
   *(float *)&me->local.command.toMd80.data[18] = (true == me->config.isTorqueMaxAdjust) ? me->config.velocityMax : 0;
 800b7b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b7b4:	b13b      	cbz	r3, 800b7c6 <md80_PackMotionTargetsFrame+0x3a>
 800b7b6:	6882      	ldr	r2, [r0, #8]
 800b7b8:	f8c0 21bc 	str.w	r2, [r0, #444]	; 0x1bc
   *(float *)&me->local.command.toMd80.data[14] = (true == me->config.isTorqueMaxAdjust) ? me->config.torqueMax : 0;
 800b7bc:	b12b      	cbz	r3, 800b7ca <md80_PackMotionTargetsFrame+0x3e>
 800b7be:	6843      	ldr	r3, [r0, #4]
 800b7c0:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
}
 800b7c4:	4770      	bx	lr
   *(float *)&me->local.command.toMd80.data[18] = (true == me->config.isTorqueMaxAdjust) ? me->config.velocityMax : 0;
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	e7f6      	b.n	800b7b8 <md80_PackMotionTargetsFrame+0x2c>
   *(float *)&me->local.command.toMd80.data[14] = (true == me->config.isTorqueMaxAdjust) ? me->config.torqueMax : 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	e7f8      	b.n	800b7c0 <md80_PackMotionTargetsFrame+0x34>

0800b7ce <md80_UpdateCommandFrame>:
{
 800b7ce:	b510      	push	{r4, lr}
 800b7d0:	4604      	mov	r4, r0
   switch (me->local.mode)
 800b7d2:	f890 31ed 	ldrb.w	r3, [r0, #493]	; 0x1ed
 800b7d6:	2b04      	cmp	r3, #4
 800b7d8:	d80d      	bhi.n	800b7f6 <md80_UpdateCommandFrame+0x28>
 800b7da:	e8df f003 	tbb	[pc, r3]
 800b7de:	1903      	.short	0x1903
 800b7e0:	0c2e      	.short	0x0c2e
 800b7e2:	0d          	.byte	0x0d
 800b7e3:	00          	.byte	0x00
		  me->local.command.toMd80.length = 2u;
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
		  me->local.command.toMd80.data[0] = MD80_FRAME_GET_INFO;
 800b7ea:	2305      	movs	r3, #5
 800b7ec:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
		  me->local.command.toMd80.data[1] = 0x00;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
}
 800b7f6:	bd10      	pop	{r4, pc}
		  if (true == me->config.isRegularsAdjust)
 800b7f8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b7fc:	b12b      	cbz	r3, 800b80a <md80_UpdateCommandFrame+0x3c>
			 md80_PackImpedanceFrame(me);
 800b7fe:	f7ff ff71 	bl	800b6e4 <md80_PackImpedanceFrame>
			 me->config.isRegularsAdjust = false;
 800b802:	2300      	movs	r3, #0
 800b804:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b808:	e7f5      	b.n	800b7f6 <md80_UpdateCommandFrame+0x28>
			 md80_PackMotionTargetsFrame(me);
 800b80a:	f7ff ffbf 	bl	800b78c <md80_PackMotionTargetsFrame>
 800b80e:	e7f2      	b.n	800b7f6 <md80_UpdateCommandFrame+0x28>
		  if (true == me->config.isRegularsAdjust)
 800b810:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b814:	b943      	cbnz	r3, 800b828 <md80_UpdateCommandFrame+0x5a>
		  else if (true == me->config.isVelocityRegulatorAdjust)
 800b816:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800b81a:	b15b      	cbz	r3, 800b834 <md80_UpdateCommandFrame+0x66>
			 md80_PackVelocityFrame(me);
 800b81c:	f7ff ff9a 	bl	800b754 <md80_PackVelocityFrame>
			 me->config.isVelocityRegulatorAdjust = false;
 800b820:	2300      	movs	r3, #0
 800b822:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b826:	e7e6      	b.n	800b7f6 <md80_UpdateCommandFrame+0x28>
			 md80_PackPositionFrame(me);
 800b828:	f7ff ff78 	bl	800b71c <md80_PackPositionFrame>
			 me->config.isRegularsAdjust = false;
 800b82c:	2300      	movs	r3, #0
 800b82e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b832:	e7e0      	b.n	800b7f6 <md80_UpdateCommandFrame+0x28>
			 md80_PackMotionTargetsFrame(me);
 800b834:	f7ff ffaa 	bl	800b78c <md80_PackMotionTargetsFrame>
 800b838:	e7dd      	b.n	800b7f6 <md80_UpdateCommandFrame+0x28>
		  if (true == me->config.isVelocityRegulatorAdjust)
 800b83a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800b83e:	b12b      	cbz	r3, 800b84c <md80_UpdateCommandFrame+0x7e>
			 md80_PackVelocityFrame(me);
 800b840:	f7ff ff88 	bl	800b754 <md80_PackVelocityFrame>
			 me->config.isVelocityRegulatorAdjust = false;
 800b844:	2300      	movs	r3, #0
 800b846:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b84a:	e7d4      	b.n	800b7f6 <md80_UpdateCommandFrame+0x28>
			 md80_PackMotionTargetsFrame(me);
 800b84c:	f7ff ff9e 	bl	800b78c <md80_PackMotionTargetsFrame>
}
 800b850:	e7d1      	b.n	800b7f6 <md80_UpdateCommandFrame+0x28>
	...

0800b854 <md80_Transmit>:
{
 800b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b856:	4604      	mov	r4, r0
   uint32_t timeoutTemp = pdMS_TO_TICKS(timeout);
 800b858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b85c:	fb03 f601 	mul.w	r6, r3, r1
 800b860:	4b19      	ldr	r3, [pc, #100]	; (800b8c8 <md80_Transmit+0x74>)
 800b862:	fba3 3606 	umull	r3, r6, r3, r6
 800b866:	09b6      	lsrs	r6, r6, #6
 800b868:	4635      	mov	r5, r6
 800b86a:	e000      	b.n	800b86e <md80_Transmit+0x1a>
   } while (timeoutTemp--);
 800b86c:	461d      	mov	r5, r3
      ret = canM_Send(me->config.canId, me->local.command.toMd80.data, me->local.command.toMd80.length);
 800b86e:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
 800b872:	f504 71d5 	add.w	r1, r4, #426	; 0x1aa
 800b876:	7820      	ldrb	r0, [r4, #0]
 800b878:	f004 fc72 	bl	8010160 <canM_Send>
      if (ret)
 800b87c:	4607      	mov	r7, r0
 800b87e:	b928      	cbnz	r0, 800b88c <md80_Transmit+0x38>
      vTaskDelay(1);
 800b880:	2001      	movs	r0, #1
 800b882:	f7fd fea9 	bl	80095d8 <vTaskDelay>
   } while (timeoutTemp--);
 800b886:	1e6b      	subs	r3, r5, #1
 800b888:	2d00      	cmp	r5, #0
 800b88a:	d1ef      	bne.n	800b86c <md80_Transmit+0x18>
   if (true == ret)
 800b88c:	b92f      	cbnz	r7, 800b89a <md80_Transmit+0x46>
}
 800b88e:	4638      	mov	r0, r7
 800b890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         vTaskDelay(1);
 800b892:	2001      	movs	r0, #1
 800b894:	f7fd fea0 	bl	80095d8 <vTaskDelay>
      while (timeoutTemp--)
 800b898:	462e      	mov	r6, r5
 800b89a:	1e75      	subs	r5, r6, #1
 800b89c:	2e00      	cmp	r6, #0
 800b89e:	d0f6      	beq.n	800b88e <md80_Transmit+0x3a>
         if (true == canM_Read(&me->local.response.canId, me->local.response.fromMd80.data, (uint8_t *)&me->local.response.fromMd80.length))
 800b8a0:	f204 12cb 	addw	r2, r4, #459	; 0x1cb
 800b8a4:	f504 71e6 	add.w	r1, r4, #460	; 0x1cc
 800b8a8:	f504 70e5 	add.w	r0, r4, #458	; 0x1ca
 800b8ac:	f004 fca0 	bl	80101f0 <canM_Read>
 800b8b0:	4607      	mov	r7, r0
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d0ed      	beq.n	800b892 <md80_Transmit+0x3e>
            ret = (me->local.response.canId == me->config.canId) ? true : false;
 800b8b6:	f894 21ca 	ldrb.w	r2, [r4, #458]	; 0x1ca
 800b8ba:	7823      	ldrb	r3, [r4, #0]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	bf0c      	ite	eq
 800b8c0:	2701      	moveq	r7, #1
 800b8c2:	2700      	movne	r7, #0
            if (ret)
 800b8c4:	d1e5      	bne.n	800b892 <md80_Transmit+0x3e>
 800b8c6:	e7e2      	b.n	800b88e <md80_Transmit+0x3a>
 800b8c8:	10624dd3 	.word	0x10624dd3

0800b8cc <md80_Init>:
}
 800b8cc:	4770      	bx	lr

0800b8ce <md80_UpdateRespondeData>:
   if ((me->config.canId != respFrame->canId) || (respFrame->fromMd80.data[0] != MD80_RESPONSE_DEFAULT))
 800b8ce:	7802      	ldrb	r2, [r0, #0]
 800b8d0:	780b      	ldrb	r3, [r1, #0]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d11b      	bne.n	800b90e <md80_UpdateRespondeData+0x40>
 800b8d6:	788b      	ldrb	r3, [r1, #2]
 800b8d8:	2ba0      	cmp	r3, #160	; 0xa0
 800b8da:	d118      	bne.n	800b90e <md80_UpdateRespondeData+0x40>
   me->output.errorVector = *(uint16_t *)&respFrame->fromMd80.data[1];
 800b8dc:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 800b8e0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
   me->output.temperature = respFrame->fromMd80.data[3];
 800b8e4:	794b      	ldrb	r3, [r1, #5]
 800b8e6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
   me->output.position = *(float *)&respFrame->fromMd80.data[4];
 800b8ea:	1d8b      	adds	r3, r1, #6
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	6543      	str	r3, [r0, #84]	; 0x54
   me->output.velocity = *(float *)&respFrame->fromMd80.data[8];
 800b8f0:	f101 030a 	add.w	r3, r1, #10
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	6583      	str	r3, [r0, #88]	; 0x58
   me->output.torque = *(float *)&respFrame->fromMd80.data[12];
 800b8f8:	f101 030e 	add.w	r3, r1, #14
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	65c3      	str	r3, [r0, #92]	; 0x5c
   me->output.encoderPosition = *(float *)&respFrame->fromMd80.data[16];
 800b900:	f101 0312 	add.w	r3, r1, #18
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	6603      	str	r3, [r0, #96]	; 0x60
   me->output.encoderVelocity = *(float *)&respFrame->fromMd80.data[20];
 800b908:	3116      	adds	r1, #22
 800b90a:	680b      	ldr	r3, [r1, #0]
 800b90c:	6643      	str	r3, [r0, #100]	; 0x64
}
 800b90e:	4770      	bx	lr

0800b910 <md80_ConfigBlink>:
{
 800b910:	b508      	push	{r3, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_FLASH_LED;
 800b912:	2200      	movs	r2, #0
 800b914:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b918:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800b91c:	2202      	movs	r2, #2
 800b91e:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 500))
 800b922:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b926:	f7ff ff95 	bl	800b854 <md80_Transmit>
}
 800b92a:	bd08      	pop	{r3, pc}

0800b92c <md80_setupCalibration>:
{
 800b92c:	b508      	push	{r3, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_CALIBRATION;
 800b92e:	2270      	movs	r2, #112	; 0x70
 800b930:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b934:	2200      	movs	r2, #0
 800b936:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800b93a:	2202      	movs	r2, #2
 800b93c:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800b940:	2132      	movs	r1, #50	; 0x32
 800b942:	f7ff ff87 	bl	800b854 <md80_Transmit>
}
 800b946:	bd08      	pop	{r3, pc}

0800b948 <md80_setupCalibrationOutput>:
{
 800b948:	b508      	push	{r3, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_CALIBRATION_OUTPUT;
 800b94a:	2271      	movs	r2, #113	; 0x71
 800b94c:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b950:	2200      	movs	r2, #0
 800b952:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800b956:	2202      	movs	r2, #2
 800b958:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800b95c:	2132      	movs	r1, #50	; 0x32
 800b95e:	f7ff ff79 	bl	800b854 <md80_Transmit>
}
 800b962:	bd08      	pop	{r3, pc}

0800b964 <md80_Restart>:
{
 800b964:	b508      	push	{r3, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_RESTART;
 800b966:	2213      	movs	r2, #19
 800b968:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b96c:	2200      	movs	r2, #0
 800b96e:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800b972:	2202      	movs	r2, #2
 800b974:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800b978:	2132      	movs	r1, #50	; 0x32
 800b97a:	f7ff ff6b 	bl	800b854 <md80_Transmit>
}
 800b97e:	bd08      	pop	{r3, pc}

0800b980 <md80_ConfigMd80Can>:
{
 800b980:	b510      	push	{r4, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_CAN_CONFIG;
 800b982:	2420      	movs	r4, #32
 800b984:	f880 41aa 	strb.w	r4, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b988:	2400      	movs	r4, #0
 800b98a:	f880 41ab 	strb.w	r4, [r0, #427]	; 0x1ab
   *(uint16_t *)&me->local.command.toMd80.data[2] = canM_Devices[me->config.canId].local.init_info.tx_id.id;
 800b98e:	f890 c000 	ldrb.w	ip, [r0]
 800b992:	4c0e      	ldr	r4, [pc, #56]	; (800b9cc <md80_ConfigMd80Can+0x4c>)
 800b994:	f44f 7e16 	mov.w	lr, #600	; 0x258
 800b998:	fb0e 4c0c 	mla	ip, lr, ip, r4
 800b99c:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 800b9a0:	f8a0 41ac 	strh.w	r4, [r0, #428]	; 0x1ac
   *(uint32_t *)&me->local.command.toMd80.data[4] = newBaudrateMbps * 1000000;
 800b9a4:	4c0a      	ldr	r4, [pc, #40]	; (800b9d0 <md80_ConfigMd80Can+0x50>)
 800b9a6:	fb04 f101 	mul.w	r1, r4, r1
 800b9aa:	f8c0 11ae 	str.w	r1, [r0, #430]	; 0x1ae
   *(uint16_t *)&me->local.command.toMd80.data[8] = newTimeout;
 800b9ae:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
   *(uint16_t *)&me->local.command.toMd80.data[10] = (uint16_t)(true == canTermination) ? 1U : 0U;
 800b9b2:	b14b      	cbz	r3, 800b9c8 <md80_ConfigMd80Can+0x48>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	f8a0 31b4 	strh.w	r3, [r0, #436]	; 0x1b4
   me->local.command.toMd80.length = 12u;
 800b9ba:	230c      	movs	r3, #12
 800b9bc:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 100))
 800b9c0:	2164      	movs	r1, #100	; 0x64
 800b9c2:	f7ff ff47 	bl	800b854 <md80_Transmit>
}
 800b9c6:	bd10      	pop	{r4, pc}
   *(uint16_t *)&me->local.command.toMd80.data[10] = (uint16_t)(true == canTermination) ? 1U : 0U;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	e7f4      	b.n	800b9b6 <md80_ConfigMd80Can+0x36>
 800b9cc:	2000016c 	.word	0x2000016c
 800b9d0:	000f4240 	.word	0x000f4240

0800b9d4 <md80_ConfigMd80Save>:
{
 800b9d4:	b508      	push	{r3, lr}
   me->local.command.toMd80.length = 2u;
 800b9d6:	2202      	movs	r2, #2
 800b9d8:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_CAN_SAVE;
 800b9dc:	2221      	movs	r2, #33	; 0x21
 800b9de:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   if (true == md80_Transmit(me, 100))
 800b9e8:	2164      	movs	r1, #100	; 0x64
 800b9ea:	f7ff ff33 	bl	800b854 <md80_Transmit>
}
 800b9ee:	bd08      	pop	{r3, pc}

0800b9f0 <md80_SendMotionCommand>:
{
 800b9f0:	b510      	push	{r4, lr}
 800b9f2:	4604      	mov	r4, r0
   me->local.command.toMd80.length = 16U;
 800b9f4:	2310      	movs	r3, #16
 800b9f6:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_SET_MOTION_TARGETS;
 800b9fa:	2314      	movs	r3, #20
 800b9fc:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800ba00:	2300      	movs	r3, #0
 800ba02:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = vel;
 800ba06:	edc0 0a6b 	vstr	s1, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = pos;
 800ba0a:	ed80 0a6c 	vstr	s0, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = torque;
 800ba0e:	ed80 1a6d 	vstr	s2, [r0, #436]	; 0x1b4
   if (true == md80_Transmit(me, 100))
 800ba12:	2164      	movs	r1, #100	; 0x64
 800ba14:	f7ff ff1e 	bl	800b854 <md80_Transmit>
 800ba18:	b900      	cbnz	r0, 800ba1c <md80_SendMotionCommand+0x2c>
}
 800ba1a:	bd10      	pop	{r4, pc}
      md80_UpdateRespondeData(me, (tMd80_ResponseFrame *)&me->local.response);
 800ba1c:	f504 71e5 	add.w	r1, r4, #458	; 0x1ca
 800ba20:	4620      	mov	r0, r4
 800ba22:	f7ff ff54 	bl	800b8ce <md80_UpdateRespondeData>
}
 800ba26:	e7f8      	b.n	800ba1a <md80_SendMotionCommand+0x2a>

0800ba28 <md80_SetCurrentLimit>:
{
 800ba28:	b510      	push	{r4, lr}
 800ba2a:	ed2d 8b02 	vpush	{d8}
 800ba2e:	4604      	mov	r4, r0
   if (MD80_DRIVER_MAXCURRENT < currentLimit)
 800ba30:	eddf 7a14 	vldr	s15, [pc, #80]	; 800ba84 <md80_SetCurrentLimit+0x5c>
 800ba34:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ba38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba3c:	dc0b      	bgt.n	800ba56 <md80_SetCurrentLimit+0x2e>
 800ba3e:	eeb0 8a40 	vmov.f32	s16, s0
   else if (MD80_DRIVER_MINCURRENT > currentLimit)
 800ba42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ba4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4e:	d504      	bpl.n	800ba5a <md80_SetCurrentLimit+0x32>
      currentLimit = MD80_DRIVER_MINCURRENT;
 800ba50:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ba54:	e001      	b.n	800ba5a <md80_SetCurrentLimit+0x32>
      currentLimit = MD80_DRIVER_MAXCURRENT;
 800ba56:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 800ba84 <md80_SetCurrentLimit+0x5c>
   me->local.command.toMd80.data[0] = MD80_FRAME_BASE_CONFIG;
 800ba5a:	2304      	movs	r3, #4
 800ba5c:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800ba60:	2300      	movs	r3, #0
 800ba62:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
   me->local.command.toMd80.length = 6u;
 800ba66:	2306      	movs	r3, #6
 800ba68:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
   *(float *)&me->local.command.toMd80.data[2] = currentLimit;
 800ba6c:	ed84 8a6b 	vstr	s16, [r4, #428]	; 0x1ac
   if (true == md80_Transmit(me, 50))
 800ba70:	2132      	movs	r1, #50	; 0x32
 800ba72:	4620      	mov	r0, r4
 800ba74:	f7ff feee 	bl	800b854 <md80_Transmit>
 800ba78:	b108      	cbz	r0, 800ba7e <md80_SetCurrentLimit+0x56>
      me->config.currentMax = currentLimit;
 800ba7a:	ed84 8a03 	vstr	s16, [r4, #12]
}
 800ba7e:	ecbd 8b02 	vpop	{d8}
 800ba82:	bd10      	pop	{r4, pc}
 800ba84:	42200000 	.word	0x42200000

0800ba88 <md80_ControlMd80Mode>:
{
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	460d      	mov	r5, r1
   me->local.command.toMd80.data[0] = MD80_FRAME_CONTROL_SELECT;
 800ba8e:	2302      	movs	r3, #2
 800ba90:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800ba94:	2300      	movs	r3, #0
 800ba96:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   me->local.command.toMd80.data[2] = (uint8_t)mode;
 800ba9a:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
   me->local.command.toMd80.length = 3u;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800baa4:	2132      	movs	r1, #50	; 0x32
 800baa6:	f7ff fed5 	bl	800b854 <md80_Transmit>
 800baaa:	b108      	cbz	r0, 800bab0 <md80_ControlMd80Mode+0x28>
      me->local.mode = mode;
 800baac:	f884 51ed 	strb.w	r5, [r4, #493]	; 0x1ed
}
 800bab0:	bd38      	pop	{r3, r4, r5, pc}

0800bab2 <md80_ControlMd80Enable>:
{
 800bab2:	b538      	push	{r3, r4, r5, lr}
 800bab4:	4604      	mov	r4, r0
 800bab6:	460d      	mov	r5, r1
   me->local.command.toMd80.data[0] = MD80_FRAME_MOTOR_ENABLE;
 800bab8:	2301      	movs	r3, #1
 800baba:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800babe:	2300      	movs	r3, #0
 800bac0:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   me->local.command.toMd80.data[2] = (uint8_t)enable;
 800bac4:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
   me->local.command.toMd80.length = 3u;
 800bac8:	2303      	movs	r3, #3
 800baca:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800bace:	2132      	movs	r1, #50	; 0x32
 800bad0:	f7ff fec0 	bl	800b854 <md80_Transmit>
 800bad4:	b108      	cbz	r0, 800bada <md80_ControlMd80Enable+0x28>
      me->local.isEnabled = (enable == true) ? true : false;
 800bad6:	f884 51ec 	strb.w	r5, [r4, #492]	; 0x1ec
}
 800bada:	bd38      	pop	{r3, r4, r5, pc}

0800badc <md80_MainFunction>:
   if ((true == me->config.isMd80Detected) && (true == me->local.isEnabled))
 800badc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bae0:	b19b      	cbz	r3, 800bb0a <md80_MainFunction+0x2e>
{
 800bae2:	b510      	push	{r4, lr}
 800bae4:	4604      	mov	r4, r0
   if ((true == me->config.isMd80Detected) && (true == me->local.isEnabled))
 800bae6:	f890 31ec 	ldrb.w	r3, [r0, #492]	; 0x1ec
 800baea:	b903      	cbnz	r3, 800baee <md80_MainFunction+0x12>
}
 800baec:	bd10      	pop	{r4, pc}
      md80_UpdateCommandFrame(me);
 800baee:	f7ff fe6e 	bl	800b7ce <md80_UpdateCommandFrame>
      if (true == md80_Transmit(me, 100))
 800baf2:	2164      	movs	r1, #100	; 0x64
 800baf4:	4620      	mov	r0, r4
 800baf6:	f7ff fead 	bl	800b854 <md80_Transmit>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	d0f6      	beq.n	800baec <md80_MainFunction+0x10>
         md80_UpdateRespondeData(me, (tMd80_ResponseFrame *)&me->local.response);
 800bafe:	f504 71e5 	add.w	r1, r4, #458	; 0x1ca
 800bb02:	4620      	mov	r0, r4
 800bb04:	f7ff fee3 	bl	800b8ce <md80_UpdateRespondeData>
}
 800bb08:	e7f0      	b.n	800baec <md80_MainFunction+0x10>
 800bb0a:	4770      	bx	lr

0800bb0c <md80_SetPositionControllerParams>:
   me->config.isRegularsAdjust = true;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   me->config.positionController.kp = kp;
 800bb12:	ed80 0a08 	vstr	s0, [r0, #32]
   me->config.positionController.ki = ki;
 800bb16:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
   me->config.positionController.kd = kd;
 800bb1a:	ed80 1a0a 	vstr	s2, [r0, #40]	; 0x28
   me->config.positionController.i_windup = iWindup;
 800bb1e:	edc0 1a0b 	vstr	s3, [r0, #44]	; 0x2c
}
 800bb22:	4770      	bx	lr

0800bb24 <md80_SetVelocityControllerParams>:
   me->config.velocityController.kp = kp;
 800bb24:	ed80 0a04 	vstr	s0, [r0, #16]
   me->config.velocityController.ki = ki;
 800bb28:	edc0 0a05 	vstr	s1, [r0, #20]
   me->config.velocityController.kd = kd;
 800bb2c:	ed80 1a06 	vstr	s2, [r0, #24]
   me->config.velocityController.i_windup = iWindup;
 800bb30:	edc0 1a07 	vstr	s3, [r0, #28]
   me->config.isVelocityRegulatorAdjust = true;
 800bb34:	2301      	movs	r3, #1
 800bb36:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
}
 800bb3a:	4770      	bx	lr

0800bb3c <md80_SetImpedanceControllerParams>:
   me->config.impedanceController.kp = kp;
 800bb3c:	ed80 0a0c 	vstr	s0, [r0, #48]	; 0x30
   me->config.impedanceController.kd = kd;
 800bb40:	edc0 0a0d 	vstr	s1, [r0, #52]	; 0x34
   me->config.isRegularsAdjust = true;
 800bb44:	2301      	movs	r3, #1
 800bb46:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
}
 800bb4a:	4770      	bx	lr

0800bb4c <md80_SetMaxTorque>:
{
 800bb4c:	ee07 1a90 	vmov	s15, r1
   me->config.torqueMax = maxTorque;
 800bb50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb54:	edc0 7a01 	vstr	s15, [r0, #4]
   me->config.isTorqueMaxAdjust = true;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800bb5e:	4770      	bx	lr

0800bb60 <md80_SetMaxVelocity>:
   me->config.velocityMax = maxVelocity;
 800bb60:	ed80 0a02 	vstr	s0, [r0, #8]
   me->config.isVelocityAdjust = true;
 800bb64:	2301      	movs	r3, #1
 800bb66:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800bb6a:	4770      	bx	lr

0800bb6c <md80_SetTargetPosition>:
   me->input.position = pos;
 800bb6c:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
}
 800bb70:	4770      	bx	lr
	...

0800bb74 <md80_SetEncoderZero>:
{
 800bb74:	b538      	push	{r3, r4, r5, lr}
 800bb76:	ed2d 8b02 	vpush	{d8}
 800bb7a:	4604      	mov	r4, r0
   me->local.command.toMd80.data[0] = MD80_FRAME_ZERO_ENCODER;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800bb82:	2300      	movs	r3, #0
 800bb84:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800bb88:	2302      	movs	r3, #2
 800bb8a:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800bb8e:	2132      	movs	r1, #50	; 0x32
 800bb90:	f7ff fe60 	bl	800b854 <md80_Transmit>
 800bb94:	4605      	mov	r5, r0
 800bb96:	b918      	cbnz	r0, 800bba0 <md80_SetEncoderZero+0x2c>
}
 800bb98:	4628      	mov	r0, r5
 800bb9a:	ecbd 8b02 	vpop	{d8}
 800bb9e:	bd38      	pop	{r3, r4, r5, pc}
      md80_SendMotionCommand(me, 0.0f, 0.0f, 0.0f);
 800bba0:	ed9f 8a08 	vldr	s16, [pc, #32]	; 800bbc4 <md80_SetEncoderZero+0x50>
 800bba4:	eeb0 1a48 	vmov.f32	s2, s16
 800bba8:	eef0 0a48 	vmov.f32	s1, s16
 800bbac:	eeb0 0a48 	vmov.f32	s0, s16
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f7ff ff1d 	bl	800b9f0 <md80_SendMotionCommand>
      md80_SetTargetPosition(me, 0.0f);
 800bbb6:	eeb0 0a48 	vmov.f32	s0, s16
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f7ff ffd6 	bl	800bb6c <md80_SetTargetPosition>
      ret = true;
 800bbc0:	e7ea      	b.n	800bb98 <md80_SetEncoderZero+0x24>
 800bbc2:	bf00      	nop
 800bbc4:	00000000 	.word	0x00000000

0800bbc8 <md80_IsEnabled>:
}
 800bbc8:	f890 01ec 	ldrb.w	r0, [r0, #492]	; 0x1ec
 800bbcc:	4770      	bx	lr
	...

0800bbd0 <ESC_download_pre_objecthandler>:
uint32_t ESC_download_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t size,
      uint16_t flags)
{
 800bbd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbd4:	b083      	sub	sp, #12
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	460d      	mov	r5, r1
 800bbda:	4616      	mov	r6, r2
 800bbdc:	461f      	mov	r7, r3
 800bbde:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   if (IS_RXPDO (index) ||
 800bbe2:	f5a0 51b0 	sub.w	r1, r0, #5632	; 0x1600
 800bbe6:	b289      	uxth	r1, r1
 800bbe8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bbec:	d30d      	bcc.n	800bc0a <ESC_download_pre_objecthandler+0x3a>
       IS_TXPDO (index) ||
 800bbee:	f5a0 53d0 	sub.w	r3, r0, #6656	; 0x1a00
 800bbf2:	b29b      	uxth	r3, r3
   if (IS_RXPDO (index) ||
 800bbf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbf8:	d307      	bcc.n	800bc0a <ESC_download_pre_objecthandler+0x3a>
       IS_TXPDO (index) ||
 800bbfa:	f641 4312 	movw	r3, #7186	; 0x1c12
 800bbfe:	4298      	cmp	r0, r3
 800bc00:	d003      	beq.n	800bc0a <ESC_download_pre_objecthandler+0x3a>
       index == RX_PDO_OBJIDX ||
 800bc02:	f641 4313 	movw	r3, #7187	; 0x1c13
 800bc06:	4298      	cmp	r0, r3
 800bc08:	d102      	bne.n	800bc10 <ESC_download_pre_objecthandler+0x40>
       index == TX_PDO_OBJIDX)
   {
      uint8_t minSub = ((flags & COMPLETE_ACCESS_FLAG) == 0) ? 0 : 1;
      if (subindex > minSub && COE_maxSub (index) != 0)
 800bc0a:	ebb5 3fd8 	cmp.w	r5, r8, lsr #15
 800bc0e:	d80f      	bhi.n	800bc30 <ESC_download_pre_objecthandler+0x60>
      {
         return ABORT_SUBINDEX0_NOT_ZERO;
      }
   }

   if (ESCvar.pre_object_download_hook)
 800bc10:	4b0c      	ldr	r3, [pc, #48]	; (800bc44 <ESC_download_pre_objecthandler+0x74>)
 800bc12:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 800bc16:	f1b9 0f00 	cmp.w	r9, #0
 800bc1a:	d010      	beq.n	800bc3e <ESC_download_pre_objecthandler+0x6e>
   {
      return (ESCvar.pre_object_download_hook) (index,
 800bc1c:	f8cd 8000 	str.w	r8, [sp]
 800bc20:	463b      	mov	r3, r7
 800bc22:	4632      	mov	r2, r6
 800bc24:	4629      	mov	r1, r5
 800bc26:	4620      	mov	r0, r4
 800bc28:	47c8      	blx	r9
            size,
            flags);
   }

   return 0;
}
 800bc2a:	b003      	add	sp, #12
 800bc2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (subindex > minSub && COE_maxSub (index) != 0)
 800bc30:	4620      	mov	r0, r4
 800bc32:	f002 fdad 	bl	800e790 <COE_maxSub>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d0ea      	beq.n	800bc10 <ESC_download_pre_objecthandler+0x40>
         return ABORT_SUBINDEX0_NOT_ZERO;
 800bc3a:	4803      	ldr	r0, [pc, #12]	; (800bc48 <ESC_download_pre_objecthandler+0x78>)
 800bc3c:	e7f5      	b.n	800bc2a <ESC_download_pre_objecthandler+0x5a>
   return 0;
 800bc3e:	2000      	movs	r0, #0
 800bc40:	e7f3      	b.n	800bc2a <ESC_download_pre_objecthandler+0x5a>
 800bc42:	bf00      	nop
 800bc44:	2000814c 	.word	0x2000814c
 800bc48:	06010003 	.word	0x06010003

0800bc4c <ESC_download_post_objecthandler>:
 * @param[in] index      = index of SDO download request to handle
 * @param[in] sub-index  = sub-index of SDO download request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_download_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 800bc4c:	b508      	push	{r3, lr}
   if (ESCvar.post_object_download_hook != NULL)
 800bc4e:	4b03      	ldr	r3, [pc, #12]	; (800bc5c <ESC_download_post_objecthandler+0x10>)
 800bc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc52:	b10b      	cbz	r3, 800bc58 <ESC_download_post_objecthandler+0xc>
   {
      return (ESCvar.post_object_download_hook)(index, subindex, flags);
 800bc54:	4798      	blx	r3
   }

   return 0;
}
 800bc56:	bd08      	pop	{r3, pc}
   return 0;
 800bc58:	2000      	movs	r0, #0
 800bc5a:	e7fc      	b.n	800bc56 <ESC_download_post_objecthandler+0xa>
 800bc5c:	2000814c 	.word	0x2000814c

0800bc60 <ESC_upload_pre_objecthandler>:
uint32_t ESC_upload_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t *size,
      uint16_t flags)
{
 800bc60:	b530      	push	{r4, r5, lr}
 800bc62:	b083      	sub	sp, #12
   if (ESCvar.pre_object_upload_hook != NULL)
 800bc64:	4c05      	ldr	r4, [pc, #20]	; (800bc7c <ESC_upload_pre_objecthandler+0x1c>)
 800bc66:	6c64      	ldr	r4, [r4, #68]	; 0x44
 800bc68:	b12c      	cbz	r4, 800bc76 <ESC_upload_pre_objecthandler+0x16>
   {
      return (ESCvar.pre_object_upload_hook) (index,
 800bc6a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 800bc6e:	9500      	str	r5, [sp, #0]
 800bc70:	47a0      	blx	r4
            size,
            flags);
   }

   return 0;
}
 800bc72:	b003      	add	sp, #12
 800bc74:	bd30      	pop	{r4, r5, pc}
   return 0;
 800bc76:	2000      	movs	r0, #0
 800bc78:	e7fb      	b.n	800bc72 <ESC_upload_pre_objecthandler+0x12>
 800bc7a:	bf00      	nop
 800bc7c:	2000814c 	.word	0x2000814c

0800bc80 <ESC_upload_post_objecthandler>:
 * @param[in] index      = index of SDO upload request to handle
 * @param[in] sub-index  = sub-index of SDO upload request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_upload_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 800bc80:	b508      	push	{r3, lr}
   if (ESCvar.post_object_upload_hook != NULL)
 800bc82:	4b03      	ldr	r3, [pc, #12]	; (800bc90 <ESC_upload_post_objecthandler+0x10>)
 800bc84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc86:	b10b      	cbz	r3, 800bc8c <ESC_upload_post_objecthandler+0xc>
   {
      return (ESCvar.post_object_upload_hook)(index, subindex, flags);
 800bc88:	4798      	blx	r3
   }

   return 0;
}
 800bc8a:	bd08      	pop	{r3, pc}
   return 0;
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	e7fc      	b.n	800bc8a <ESC_upload_post_objecthandler+0xa>
 800bc90:	2000814c 	.word	0x2000814c

0800bc94 <APP_safeoutput>:

/** Hook called from the slave stack ESC_stopoutputs to act on state changes
 * forcing us to stop outputs. Here we can set them to a safe state.
 */
void APP_safeoutput (void)
{
 800bc94:	b508      	push	{r3, lr}
   DPRINT ("APP_safeoutput\n");

   if(ESCvar.safeoutput_override != NULL)
 800bc96:	4b02      	ldr	r3, [pc, #8]	; (800bca0 <APP_safeoutput+0xc>)
 800bc98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9a:	b103      	cbz	r3, 800bc9e <APP_safeoutput+0xa>
   {
      (ESCvar.safeoutput_override)();
 800bc9c:	4798      	blx	r3
   }
}
 800bc9e:	bd08      	pop	{r3, pc}
 800bca0:	2000814c 	.word	0x2000814c

0800bca4 <TXPDO_update>:

/** Write local process data to Sync Manager 3, Master Inputs.
 */
void TXPDO_update (void)
{
 800bca4:	b538      	push	{r3, r4, r5, lr}
	//TODO TOUCH HERE
   if(ESCvar.txpdo_override != NULL)
 800bca6:	4b0a      	ldr	r3, [pc, #40]	; (800bcd0 <TXPDO_update+0x2c>)
 800bca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcaa:	b10b      	cbz	r3, 800bcb0 <TXPDO_update+0xc>
   {
      (ESCvar.txpdo_override)();
 800bcac:	4798      	blx	r3
      {
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
      }
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
   }
}
 800bcae:	bd38      	pop	{r3, r4, r5, pc}
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
 800bcb0:	4d07      	ldr	r5, [pc, #28]	; (800bcd0 <TXPDO_update+0x2c>)
 800bcb2:	4c08      	ldr	r4, [pc, #32]	; (800bcd4 <TXPDO_update+0x30>)
 800bcb4:	4a08      	ldr	r2, [pc, #32]	; (800bcd8 <TXPDO_update+0x34>)
 800bcb6:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f002 fcf4 	bl	800e6a8 <COE_pdoPack>
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
 800bcc0:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800bcca:	f002 ff29 	bl	800eb20 <ESC_write>
}
 800bcce:	e7ee      	b.n	800bcae <TXPDO_update+0xa>
 800bcd0:	2000814c 	.word	0x2000814c
 800bcd4:	20009640 	.word	0x20009640
 800bcd8:	2000907c 	.word	0x2000907c

0800bcdc <RXPDO_update>:

/** Read Sync Manager 2 to local process data, Master Outputs.
 */
void RXPDO_update (void)
{
 800bcdc:	b538      	push	{r3, r4, r5, lr}
   if(ESCvar.rxpdo_override != NULL)
 800bcde:	4b0a      	ldr	r3, [pc, #40]	; (800bd08 <RXPDO_update+0x2c>)
 800bce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bce2:	b10b      	cbz	r3, 800bce8 <RXPDO_update+0xc>
   {
      (ESCvar.rxpdo_override)();
 800bce4:	4798      	blx	r3
      if (MAX_MAPPINGS_SM2 > 0)
      {
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
      }
   }
}
 800bce6:	bd38      	pop	{r3, r4, r5, pc}
      ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 800bce8:	4d07      	ldr	r5, [pc, #28]	; (800bd08 <RXPDO_update+0x2c>)
 800bcea:	4c08      	ldr	r4, [pc, #32]	; (800bd0c <RXPDO_update+0x30>)
 800bcec:	f8b5 2078 	ldrh.w	r2, [r5, #120]	; 0x78
 800bcf0:	4621      	mov	r1, r4
 800bcf2:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800bcf6:	f002 fed7 	bl	800eaa8 <ESC_read>
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
 800bcfa:	4a05      	ldr	r2, [pc, #20]	; (800bd10 <RXPDO_update+0x34>)
 800bcfc:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800bd00:	4620      	mov	r0, r4
 800bd02:	f002 fd0d 	bl	800e720 <COE_pdoUnpack>
}
 800bd06:	e7ee      	b.n	800bce6 <RXPDO_update+0xa>
 800bd08:	2000814c 	.word	0x2000814c
 800bd0c:	20009440 	.word	0x20009440
 800bd10:	20008e3c 	.word	0x20008e3c

0800bd14 <DIG_process>:
/* Function to update local I/O, call read ethercat outputs, call
 * write ethercat inputs. Implement watch-dog counter to count-out if we have
 * made state change affecting the App.state.
 */
void DIG_process (uint8_t flags)
{
 800bd14:	b510      	push	{r4, lr}
 800bd16:	4604      	mov	r4, r0
   /* Handle watchdog */
   if((flags & DIG_PROCESS_WD_FLAG) > 0)
 800bd18:	f010 0f04 	tst.w	r0, #4
 800bd1c:	d10d      	bne.n	800bd3a <DIG_process+0x26>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
      }
   }

   /* Handle Outputs */
   if ((flags & DIG_PROCESS_OUTPUTS_FLAG) > 0)
 800bd1e:	f014 0f02 	tst.w	r4, #2
 800bd22:	d14e      	bne.n	800bdc2 <DIG_process+0xae>
         ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
      }
   }

   /* Call application */
   if ((flags & DIG_PROCESS_APP_HOOK_FLAG) > 0)
 800bd24:	f014 0f08 	tst.w	r4, #8
 800bd28:	d003      	beq.n	800bd32 <DIG_process+0x1e>
   {
      /* Call application callback if set */
      if (ESCvar.application_hook != NULL)
 800bd2a:	4b43      	ldr	r3, [pc, #268]	; (800be38 <DIG_process+0x124>)
 800bd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2e:	b103      	cbz	r3, 800bd32 <DIG_process+0x1e>
      {
         (ESCvar.application_hook)();
 800bd30:	4798      	blx	r3
      }
   }

   /* Handle Inputs */
   if ((flags & DIG_PROCESS_INPUTS_FLAG) > 0)
 800bd32:	f014 0f01 	tst.w	r4, #1
 800bd36:	d171      	bne.n	800be1c <DIG_process+0x108>
         /* Update inputs */
         cb_get_inputs();
         TXPDO_update();
      }
   }
}
 800bd38:	bd10      	pop	{r4, pc}
      if (CC_ATOMIC_GET(watchdog) > 0)
 800bd3a:	f3bf 8f5b 	dmb	ish
 800bd3e:	4b3f      	ldr	r3, [pc, #252]	; (800be3c <DIG_process+0x128>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f3bf 8f5b 	dmb	ish
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	dd0b      	ble.n	800bd62 <DIG_process+0x4e>
         CC_ATOMIC_SUB(watchdog, 1);
 800bd4a:	4b3c      	ldr	r3, [pc, #240]	; (800be3c <DIG_process+0x128>)
 800bd4c:	f3bf 8f5b 	dmb	ish
 800bd50:	e853 1f00 	ldrex	r1, [r3]
 800bd54:	3901      	subs	r1, #1
 800bd56:	e843 1200 	strex	r2, r1, [r3]
 800bd5a:	2a00      	cmp	r2, #0
 800bd5c:	d1f8      	bne.n	800bd50 <DIG_process+0x3c>
 800bd5e:	f3bf 8f5b 	dmb	ish
      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 800bd62:	f3bf 8f5b 	dmb	ish
 800bd66:	4b35      	ldr	r3, [pc, #212]	; (800be3c <DIG_process+0x128>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f3bf 8f5b 	dmb	ish
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	dd13      	ble.n	800bd9a <DIG_process+0x86>
      else if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) == 0))
 800bd72:	f3bf 8f5b 	dmb	ish
 800bd76:	4b30      	ldr	r3, [pc, #192]	; (800be38 <DIG_process+0x124>)
 800bd78:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800bd7c:	f3bf 8f5b 	dmb	ish
 800bd80:	f013 0f02 	tst.w	r3, #2
 800bd84:	d1cb      	bne.n	800bd1e <DIG_process+0xa>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 800bd86:	4b2c      	ldr	r3, [pc, #176]	; (800be38 <DIG_process+0x124>)
 800bd88:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800bd8c:	f3bf 8f5b 	dmb	ish
 800bd90:	4b2a      	ldr	r3, [pc, #168]	; (800be3c <DIG_process+0x128>)
 800bd92:	601a      	str	r2, [r3, #0]
 800bd94:	f3bf 8f5b 	dmb	ish
 800bd98:	e7c1      	b.n	800bd1e <DIG_process+0xa>
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800bd9a:	f3bf 8f5b 	dmb	ish
 800bd9e:	4b26      	ldr	r3, [pc, #152]	; (800be38 <DIG_process+0x124>)
 800bda0:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800bda4:	f3bf 8f5b 	dmb	ish
      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 800bda8:	f013 0f02 	tst.w	r3, #2
 800bdac:	d0e1      	beq.n	800bd72 <DIG_process+0x5e>
           (ESCvar.ESC_SM2_sml > 0))
 800bdae:	4b22      	ldr	r3, [pc, #136]	; (800be38 <DIG_process+0x124>)
 800bdb0:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d0dc      	beq.n	800bd72 <DIG_process+0x5e>
         ESC_ALstatusgotoerror((ESCsafeop | ESCerror), ALERR_WATCHDOG);
 800bdb8:	211b      	movs	r1, #27
 800bdba:	2014      	movs	r0, #20
 800bdbc:	f000 fdb2 	bl	800c924 <ESC_ALstatusgotoerror>
 800bdc0:	e7ad      	b.n	800bd1e <DIG_process+0xa>
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800bdc2:	f3bf 8f5b 	dmb	ish
 800bdc6:	4b1c      	ldr	r3, [pc, #112]	; (800be38 <DIG_process+0x124>)
 800bdc8:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800bdcc:	f3bf 8f5b 	dmb	ish
 800bdd0:	f013 0f02 	tst.w	r3, #2
 800bdd4:	d005      	beq.n	800bde2 <DIG_process+0xce>
         (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
 800bdd6:	4b18      	ldr	r3, [pc, #96]	; (800be38 <DIG_process+0x124>)
 800bdd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800bddc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800bde0:	d10e      	bne.n	800be00 <DIG_process+0xec>
      else if (ESCvar.ALevent & ESCREG_ALEVENT_SM2)
 800bde2:	4b15      	ldr	r3, [pc, #84]	; (800be38 <DIG_process+0x124>)
 800bde4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bde8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800bdec:	d09a      	beq.n	800bd24 <DIG_process+0x10>
         ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 800bdee:	4b12      	ldr	r3, [pc, #72]	; (800be38 <DIG_process+0x124>)
 800bdf0:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 800bdf4:	4912      	ldr	r1, [pc, #72]	; (800be40 <DIG_process+0x12c>)
 800bdf6:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800bdfa:	f002 fe55 	bl	800eaa8 <ESC_read>
 800bdfe:	e791      	b.n	800bd24 <DIG_process+0x10>
         RXPDO_update();
 800be00:	f7ff ff6c 	bl	800bcdc <RXPDO_update>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 800be04:	4b0c      	ldr	r3, [pc, #48]	; (800be38 <DIG_process+0x124>)
 800be06:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800be0a:	f3bf 8f5b 	dmb	ish
 800be0e:	4b0b      	ldr	r3, [pc, #44]	; (800be3c <DIG_process+0x128>)
 800be10:	601a      	str	r2, [r3, #0]
 800be12:	f3bf 8f5b 	dmb	ish
         cb_set_outputs();
 800be16:	f004 fb38 	bl	801048a <cb_set_outputs>
 800be1a:	e783      	b.n	800bd24 <DIG_process+0x10>
      if(CC_ATOMIC_GET(ESCvar.App.state) > 0)
 800be1c:	f3bf 8f5b 	dmb	ish
 800be20:	4b05      	ldr	r3, [pc, #20]	; (800be38 <DIG_process+0x124>)
 800be22:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800be26:	f3bf 8f5b 	dmb	ish
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d084      	beq.n	800bd38 <DIG_process+0x24>
         cb_get_inputs();
 800be2e:	f004 fb2b 	bl	8010488 <cb_get_inputs>
         TXPDO_update();
 800be32:	f7ff ff37 	bl	800bca4 <TXPDO_update>
}
 800be36:	e77f      	b.n	800bd38 <DIG_process+0x24>
 800be38:	2000814c 	.word	0x2000814c
 800be3c:	20009840 	.word	0x20009840
 800be40:	20009440 	.word	0x20009440

0800be44 <ecat_slv_poll>:
 * when only SM2/DC interrupt is active.
 * Read and handle events for the EtherCAT state, status, mailbox and eeprom.
 */
//#define testSend
void ecat_slv_poll (void)
{
 800be44:	b510      	push	{r4, lr}

   /* Read local time from ESC*/
#ifdef testSend
	sendMessage(ETHCat,1,0);
#endif
   ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 800be46:	4c0e      	ldr	r4, [pc, #56]	; (800be80 <ecat_slv_poll+0x3c>)
 800be48:	2204      	movs	r2, #4
 800be4a:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 800be4e:	f44f 6011 	mov.w	r0, #2320	; 0x910
 800be52:	f002 fe29 	bl	800eaa8 <ESC_read>
   ESCvar.Time = etohl (ESCvar.Time);
 800be56:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800be5a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
#ifdef testSend
   sendMessage(ETHCat,1,1);
#endif
   //cdc_printf("poll %u, %u %u\n", ESCvar.Time, (uint32_t)(reader>>32)  , (uint32_t)(reader&0xffffffff ));
   /* Check the state machine */
   ESC_state();
 800be5e:	f000 fe29 	bl	800cab4 <ESC_state>
#ifdef testSend
   sendMessage(ETHCat,1,2);
#endif
   /* Check the SM activation event */
   ESC_sm_act_event();
 800be62:	f000 fd9d 	bl	800c9a0 <ESC_sm_act_event>
#ifdef testSend
   sendMessage(ETHCat,1,3);
#endif
   /* Check mailboxes */
   if (ESC_mbxprocess())
 800be66:	f000 fb27 	bl	800c4b8 <ESC_mbxprocess>
 800be6a:	b920      	cbnz	r0, 800be76 <ecat_slv_poll+0x32>
#if USE_EOE
   ESC_eoeprocess_tx();
#endif

   /* Call emulated eeprom handler if set */
   if (ESCvar.esc_hw_eep_handler != NULL)
 800be6c:	4b04      	ldr	r3, [pc, #16]	; (800be80 <ecat_slv_poll+0x3c>)
 800be6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be70:	b103      	cbz	r3, 800be74 <ecat_slv_poll+0x30>
   {
      (ESCvar.esc_hw_eep_handler)();
 800be72:	4798      	blx	r3
   }

}
 800be74:	bd10      	pop	{r4, pc}
      ESC_coeprocess();
 800be76:	f002 fb39 	bl	800e4ec <ESC_coeprocess>
      ESC_xoeprocess();
 800be7a:	f000 fc03 	bl	800c684 <ESC_xoeprocess>
 800be7e:	e7f5      	b.n	800be6c <ecat_slv_poll+0x28>
 800be80:	2000814c 	.word	0x2000814c

0800be84 <ecat_slv>:

/*
 * Poll all events in a free-run application
 */
void ecat_slv (void)
{
 800be84:	b508      	push	{r3, lr}
   ecat_slv_poll();
 800be86:	f7ff ffdd 	bl	800be44 <ecat_slv_poll>
   DIG_process(DIG_PROCESS_WD_FLAG | DIG_PROCESS_OUTPUTS_FLAG |
 800be8a:	200f      	movs	r0, #15
 800be8c:	f7ff ff42 	bl	800bd14 <DIG_process>
         DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
}
 800be90:	bd08      	pop	{r3, pc}
	...

0800be94 <ecat_slv_init>:

/*
 * Initialize the slave stack.
 */
void ecat_slv_init (esc_cfg_t * config)
{
 800be94:	b510      	push	{r4, lr}
 800be96:	4604      	mov	r4, r0
   DPRINT ("Slave stack init started\n\n");

   /* Init watchdog */
   watchdog = config->watchdog_cnt;
 800be98:	6882      	ldr	r2, [r0, #8]
 800be9a:	4b11      	ldr	r3, [pc, #68]	; (800bee0 <ecat_slv_init+0x4c>)
 800be9c:	601a      	str	r2, [r3, #0]

   /* Call stack configuration */
   ESC_config (config);
 800be9e:	f000 ffdd 	bl	800ce5c <ESC_config>
   /* Call HW init */
   ESC_init (config);
 800bea2:	4620      	mov	r0, r4
 800bea4:	f002 fe78 	bl	800eb98 <ESC_init>

   /*  wait until ESC is started up */
   while ((ESCvar.DLstatus & 0x0001) == 0)
 800bea8:	e005      	b.n	800beb6 <ecat_slv_init+0x22>
   {
      ESC_read (ESCREG_DLSTATUS, (void *) &ESCvar.DLstatus,
 800beaa:	2202      	movs	r2, #2
 800beac:	490d      	ldr	r1, [pc, #52]	; (800bee4 <ecat_slv_init+0x50>)
 800beae:	f44f 7088 	mov.w	r0, #272	; 0x110
 800beb2:	f002 fdf9 	bl	800eaa8 <ESC_read>
   while ((ESCvar.DLstatus & 0x0001) == 0)
 800beb6:	4b0c      	ldr	r3, [pc, #48]	; (800bee8 <ecat_slv_init+0x54>)
 800beb8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bebc:	f013 0f01 	tst.w	r3, #1
 800bec0:	d0f3      	beq.n	800beaa <ecat_slv_init+0x16>
   /* Init EoE */
   EOE_init ();
#endif

   /* reset ESC to init state */
   ESC_ALstatus (ESCinit);
 800bec2:	2001      	movs	r0, #1
 800bec4:	f000 f86e 	bl	800bfa4 <ESC_ALstatus>
   ESC_ALerror (ALERR_NONE);
 800bec8:	2000      	movs	r0, #0
 800beca:	f000 f837 	bl	800bf3c <ESC_ALerror>
   ESC_stopmbx ();
 800bece:	f000 f9cd 	bl	800c26c <ESC_stopmbx>
   ESC_stopinput ();
 800bed2:	f000 fcd7 	bl	800c884 <ESC_stopinput>
   ESC_stopoutput ();
 800bed6:	f000 fd0f 	bl	800c8f8 <ESC_stopoutput>
   /* Init Object Dictionary default values */
   COE_initDefaultValues ();
 800beda:	f002 fbaf 	bl	800e63c <COE_initDefaultValues>
}
 800bede:	bd10      	pop	{r4, pc}
 800bee0:	20009840 	.word	0x20009840
 800bee4:	200081d2 	.word	0x200081d2
 800bee8:	2000814c 	.word	0x2000814c

0800beec <ESC_check_id_request>:
   }
}

static bool ESC_check_id_request (uint16_t ALcontrol, uint8_t * an)
{
   if ((ALcontrol & ESCREG_AL_ID_REQUEST) != 0)
 800beec:	f010 0f20 	tst.w	r0, #32
 800bef0:	d01f      	beq.n	800bf32 <ESC_check_id_request+0x46>
   {
      uint8_t state = ALcontrol & ESCREG_AL_ERRACKMASK;
 800bef2:	b2c3      	uxtb	r3, r0
 800bef4:	f000 000f 	and.w	r0, r0, #15

      if ((state != ESCboot) &&
 800bef8:	2803      	cmp	r0, #3
 800befa:	d01c      	beq.n	800bf36 <ESC_check_id_request+0x4a>
 800befc:	f013 0f0c 	tst.w	r3, #12
 800bf00:	d006      	beq.n	800bf10 <ESC_check_id_request+0x24>
          ((state < ESCsafeop) || (*an == ESCsafeop) || (*an == ESCop)))
 800bf02:	780b      	ldrb	r3, [r1, #0]
 800bf04:	2b04      	cmp	r3, #4
 800bf06:	d003      	beq.n	800bf10 <ESC_check_id_request+0x24>
 800bf08:	2b08      	cmp	r3, #8
 800bf0a:	d001      	beq.n	800bf10 <ESC_check_id_request+0x24>

         return (ALstatuscode == ALERR_NONE);
      }
   }

   return false;
 800bf0c:	2000      	movs	r0, #0
}
 800bf0e:	4770      	bx	lr
{
 800bf10:	b500      	push	{lr}
 800bf12:	b083      	sub	sp, #12
         ESC_read (ESCREG_ALERROR,
 800bf14:	2202      	movs	r2, #2
 800bf16:	f10d 0106 	add.w	r1, sp, #6
 800bf1a:	f44f 709a 	mov.w	r0, #308	; 0x134
 800bf1e:	f002 fdc3 	bl	800eaa8 <ESC_read>
         return (ALstatuscode == ALERR_NONE);
 800bf22:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800bf26:	fab0 f080 	clz	r0, r0
 800bf2a:	0940      	lsrs	r0, r0, #5
}
 800bf2c:	b003      	add	sp, #12
 800bf2e:	f85d fb04 	ldr.w	pc, [sp], #4
   return false;
 800bf32:	2000      	movs	r0, #0
 800bf34:	4770      	bx	lr
 800bf36:	2000      	movs	r0, #0
 800bf38:	4770      	bx	lr
	...

0800bf3c <ESC_ALerror>:
{
 800bf3c:	b500      	push	{lr}
 800bf3e:	b083      	sub	sp, #12
   ESCvar.ALerror = errornumber;
 800bf40:	4b07      	ldr	r3, [pc, #28]	; (800bf60 <ESC_ALerror+0x24>)
 800bf42:	f8a3 0084 	strh.w	r0, [r3, #132]	; 0x84
   dummy = htoes (errornumber);
 800bf46:	f8ad 0006 	strh.w	r0, [sp, #6]
   ESC_write (ESCREG_ALERROR, &dummy, sizeof (dummy));
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	f10d 0106 	add.w	r1, sp, #6
 800bf50:	f44f 709a 	mov.w	r0, #308	; 0x134
 800bf54:	f002 fde4 	bl	800eb20 <ESC_write>
}
 800bf58:	b003      	add	sp, #12
 800bf5a:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf5e:	bf00      	nop
 800bf60:	2000814c 	.word	0x2000814c

0800bf64 <ESC_load_device_id>:

static uint8_t ESC_load_device_id (void)
{
 800bf64:	b500      	push	{lr}
 800bf66:	b083      	sub	sp, #12
   uint16_t device_id;

   if (ESCvar.get_device_id != NULL)
 800bf68:	4b0d      	ldr	r3, [pc, #52]	; (800bfa0 <ESC_load_device_id+0x3c>)
 800bf6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf6c:	b16b      	cbz	r3, 800bf8a <ESC_load_device_id+0x26>
   {
      if (ESCvar.get_device_id (&device_id) != 0)
 800bf6e:	f10d 0006 	add.w	r0, sp, #6
 800bf72:	4798      	blx	r3
 800bf74:	b110      	cbz	r0, 800bf7c <ESC_load_device_id+0x18>
      {
         device_id = 0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	f8ad 3006 	strh.w	r3, [sp, #6]
      ESC_read (ESCREG_CONF_STATION_ALIAS,
                (void *)&device_id,
                sizeof (device_id));
   }

   if (device_id != 0)
 800bf7c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800bf80:	b950      	cbnz	r0, 800bf98 <ESC_load_device_id+0x34>
      ESC_ALerror (device_id);

      return ESCREG_AL_ID_REQUEST;
   }

   return 0;
 800bf82:	2000      	movs	r0, #0
}
 800bf84:	b003      	add	sp, #12
 800bf86:	f85d fb04 	ldr.w	pc, [sp], #4
      ESC_read (ESCREG_CONF_STATION_ALIAS,
 800bf8a:	2202      	movs	r2, #2
 800bf8c:	f10d 0106 	add.w	r1, sp, #6
 800bf90:	2012      	movs	r0, #18
 800bf92:	f002 fd89 	bl	800eaa8 <ESC_read>
 800bf96:	e7f1      	b.n	800bf7c <ESC_load_device_id+0x18>
      ESC_ALerror (device_id);
 800bf98:	f7ff ffd0 	bl	800bf3c <ESC_ALerror>
      return ESCREG_AL_ID_REQUEST;
 800bf9c:	2020      	movs	r0, #32
 800bf9e:	e7f1      	b.n	800bf84 <ESC_load_device_id+0x20>
 800bfa0:	2000814c 	.word	0x2000814c

0800bfa4 <ESC_ALstatus>:
{
 800bfa4:	b500      	push	{lr}
 800bfa6:	b083      	sub	sp, #12
   ESCvar.ALstatus = status;
 800bfa8:	4b07      	ldr	r3, [pc, #28]	; (800bfc8 <ESC_ALstatus+0x24>)
 800bfaa:	f8a3 0080 	strh.w	r0, [r3, #128]	; 0x80
   dummy = htoes ((uint16_t) status);
 800bfae:	f8ad 0006 	strh.w	r0, [sp, #6]
   ESC_write (ESCREG_ALSTATUS, &dummy, sizeof (dummy));
 800bfb2:	2202      	movs	r2, #2
 800bfb4:	f10d 0106 	add.w	r1, sp, #6
 800bfb8:	f44f 7098 	mov.w	r0, #304	; 0x130
 800bfbc:	f002 fdb0 	bl	800eb20 <ESC_write>
}
 800bfc0:	b003      	add	sp, #12
 800bfc2:	f85d fb04 	ldr.w	pc, [sp], #4
 800bfc6:	bf00      	nop
 800bfc8:	2000814c 	.word	0x2000814c

0800bfcc <ESC_ALeventmaskwrite>:
{
 800bfcc:	b500      	push	{lr}
 800bfce:	b083      	sub	sp, #12
   aleventmask = htoel(mask);
 800bfd0:	9001      	str	r0, [sp, #4]
   ESC_write (ESCREG_ALEVENTMASK, &aleventmask, sizeof(aleventmask));
 800bfd2:	2204      	movs	r2, #4
 800bfd4:	eb0d 0102 	add.w	r1, sp, r2
 800bfd8:	f44f 7001 	mov.w	r0, #516	; 0x204
 800bfdc:	f002 fda0 	bl	800eb20 <ESC_write>
}
 800bfe0:	b003      	add	sp, #12
 800bfe2:	f85d fb04 	ldr.w	pc, [sp], #4

0800bfe6 <ESC_SMack>:
{
 800bfe6:	b500      	push	{lr}
 800bfe8:	b083      	sub	sp, #12
   ESC_read ((uint16_t)(ESCREG_SM0ACTIVATE + (n << 3)), &dummy, 1);
 800bfea:	00c0      	lsls	r0, r0, #3
 800bfec:	2201      	movs	r2, #1
 800bfee:	f10d 0107 	add.w	r1, sp, #7
 800bff2:	f600 0006 	addw	r0, r0, #2054	; 0x806
 800bff6:	f002 fd57 	bl	800eaa8 <ESC_read>
}
 800bffa:	b003      	add	sp, #12
 800bffc:	f85d fb04 	ldr.w	pc, [sp], #4

0800c000 <ESC_SMstatus>:
{
 800c000:	b508      	push	{r3, lr}
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800c002:	f100 0317 	add.w	r3, r0, #23
 800c006:	4905      	ldr	r1, [pc, #20]	; (800c01c <ESC_SMstatus+0x1c>)
 800c008:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ESC_read ((uint16_t)(ESCREG_SM0STATUS + (n << 3)), &(sm->Status), 1);
 800c00c:	00c0      	lsls	r0, r0, #3
 800c00e:	2201      	movs	r2, #1
 800c010:	3109      	adds	r1, #9
 800c012:	f600 0005 	addw	r0, r0, #2053	; 0x805
 800c016:	f002 fd47 	bl	800eaa8 <ESC_read>
}
 800c01a:	bd08      	pop	{r3, pc}
 800c01c:	2000814c 	.word	0x2000814c

0800c020 <ESC_SMwritepdi>:
{
 800c020:	b508      	push	{r3, lr}
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800c022:	f100 0317 	add.w	r3, r0, #23
 800c026:	4905      	ldr	r1, [pc, #20]	; (800c03c <ESC_SMwritepdi+0x1c>)
 800c028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ESC_write ((uint16_t)(ESCREG_SM0PDI + (n << 3)), &(sm->ActPDI), 1);
 800c02c:	00c0      	lsls	r0, r0, #3
 800c02e:	2201      	movs	r2, #1
 800c030:	310b      	adds	r1, #11
 800c032:	f600 0007 	addw	r0, r0, #2055	; 0x807
 800c036:	f002 fd73 	bl	800eb20 <ESC_write>
}
 800c03a:	bd08      	pop	{r3, pc}
 800c03c:	2000814c 	.word	0x2000814c

0800c040 <ESC_SMenable>:
{
 800c040:	b508      	push	{r3, lr}
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800c042:	f100 0217 	add.w	r2, r0, #23
 800c046:	4b05      	ldr	r3, [pc, #20]	; (800c05c <ESC_SMenable+0x1c>)
 800c048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   sm->ActPDI &= (uint8_t)~ESCREG_SMENABLE_BIT;
 800c04c:	7ada      	ldrb	r2, [r3, #11]
 800c04e:	f022 0201 	bic.w	r2, r2, #1
 800c052:	72da      	strb	r2, [r3, #11]
   ESC_SMwritepdi (n);
 800c054:	f7ff ffe4 	bl	800c020 <ESC_SMwritepdi>
}
 800c058:	bd08      	pop	{r3, pc}
 800c05a:	bf00      	nop
 800c05c:	2000814c 	.word	0x2000814c

0800c060 <ESC_SMdisable>:
{
 800c060:	b508      	push	{r3, lr}
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800c062:	f100 0217 	add.w	r2, r0, #23
 800c066:	4b05      	ldr	r3, [pc, #20]	; (800c07c <ESC_SMdisable+0x1c>)
 800c068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   sm->ActPDI |= ESCREG_SMENABLE_BIT;
 800c06c:	7ada      	ldrb	r2, [r3, #11]
 800c06e:	f042 0201 	orr.w	r2, r2, #1
 800c072:	72da      	strb	r2, [r3, #11]
   ESC_SMwritepdi (n);
 800c074:	f7ff ffd4 	bl	800c020 <ESC_SMwritepdi>
}
 800c078:	bd08      	pop	{r3, pc}
 800c07a:	bf00      	nop
 800c07c:	2000814c 	.word	0x2000814c

0800c080 <ESC_address>:
{
 800c080:	b508      	push	{r3, lr}
   ESC_read (ESCREG_ADDRESS, (void *) &ESCvar.address, sizeof (ESCvar.address));
 800c082:	2202      	movs	r2, #2
 800c084:	4902      	ldr	r1, [pc, #8]	; (800c090 <ESC_address+0x10>)
 800c086:	2010      	movs	r0, #16
 800c088:	f002 fd0e 	bl	800eaa8 <ESC_read>
}
 800c08c:	bd08      	pop	{r3, pc}
 800c08e:	bf00      	nop
 800c090:	200081d4 	.word	0x200081d4

0800c094 <ESC_SYNCactivation>:
{
 800c094:	b500      	push	{lr}
 800c096:	b083      	sub	sp, #12
   ESC_read (ESCREG_SYNC_ACT, &activation, sizeof(activation));
 800c098:	2201      	movs	r2, #1
 800c09a:	f10d 0107 	add.w	r1, sp, #7
 800c09e:	f640 1081 	movw	r0, #2433	; 0x981
 800c0a2:	f002 fd01 	bl	800eaa8 <ESC_read>
}
 800c0a6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c0aa:	b003      	add	sp, #12
 800c0ac:	f85d fb04 	ldr.w	pc, [sp], #4

0800c0b0 <ESC_checkDC>:
{
 800c0b0:	b508      	push	{r3, lr}
   uint8_t sync_act = ESC_SYNCactivation();
 800c0b2:	f7ff ffef 	bl	800c094 <ESC_SYNCactivation>
   if((sync_act & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_AUTO_ACTIVATED)) > 0)
 800c0b6:	f010 0f09 	tst.w	r0, #9
 800c0ba:	d004      	beq.n	800c0c6 <ESC_checkDC+0x16>
      if(ESCvar.esc_check_dc_handler != NULL)
 800c0bc:	4b06      	ldr	r3, [pc, #24]	; (800c0d8 <ESC_checkDC+0x28>)
 800c0be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0c0:	b143      	cbz	r3, 800c0d4 <ESC_checkDC+0x24>
         ret = (ESCvar.esc_check_dc_handler)();
 800c0c2:	4798      	blx	r3
 800c0c4:	e005      	b.n	800c0d2 <ESC_checkDC+0x22>
      ESCvar.dcsync = 0;
 800c0c6:	4b04      	ldr	r3, [pc, #16]	; (800c0d8 <ESC_checkDC+0x28>)
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	f883 007c 	strb.w	r0, [r3, #124]	; 0x7c
      ESCvar.synccounter = 0;
 800c0ce:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
}
 800c0d2:	bd08      	pop	{r3, pc}
      ret = ALERR_DCINVALIDSYNCCFG;
 800c0d4:	2030      	movs	r0, #48	; 0x30
 800c0d6:	e7fc      	b.n	800c0d2 <ESC_checkDC+0x22>
 800c0d8:	2000814c 	.word	0x2000814c

0800c0dc <ESC_checkmbx>:
{
 800c0dc:	b538      	push	{r3, r4, r5, lr}
 800c0de:	4605      	mov	r5, r0
   ESC_read (ESCREG_SM0, (void *) &ESCvar.SM[0], sizeof (ESCvar.SM[0]));
 800c0e0:	4c2b      	ldr	r4, [pc, #172]	; (800c190 <ESC_checkmbx+0xb4>)
 800c0e2:	2208      	movs	r2, #8
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c0ea:	f002 fcdd 	bl	800eaa8 <ESC_read>
   ESC_read (ESCREG_SM1, (void *) &ESCvar.SM[1], sizeof (ESCvar.SM[1]));
 800c0ee:	2208      	movs	r2, #8
 800c0f0:	18a1      	adds	r1, r4, r2
 800c0f2:	f640 0008 	movw	r0, #2056	; 0x808
 800c0f6:	f002 fcd7 	bl	800eaa8 <ESC_read>
   if ((etohs (SM->PSA) != ESC_MBX0_sma) || (etohs (SM->Length) != ESC_MBX0_sml)
 800c0fa:	f834 19bc 	ldrh.w	r1, [r4], #-188
 800c0fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c100:	881a      	ldrh	r2, [r3, #0]
 800c102:	4291      	cmp	r1, r2
 800c104:	d12c      	bne.n	800c160 <ESC_checkmbx+0x84>
 800c106:	4a23      	ldr	r2, [pc, #140]	; (800c194 <ESC_checkmbx+0xb8>)
 800c108:	f8b2 10be 	ldrh.w	r1, [r2, #190]	; 0xbe
 800c10c:	885a      	ldrh	r2, [r3, #2]
 800c10e:	4291      	cmp	r1, r2
 800c110:	d126      	bne.n	800c160 <ESC_checkmbx+0x84>
       || (SM->Command != ESC_MBX0_smc) || (ESCvar.SM[0].ECsm == 0))
 800c112:	4a20      	ldr	r2, [pc, #128]	; (800c194 <ESC_checkmbx+0xb8>)
 800c114:	f892 20c0 	ldrb.w	r2, [r2, #192]	; 0xc0
 800c118:	799b      	ldrb	r3, [r3, #6]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d120      	bne.n	800c160 <ESC_checkmbx+0x84>
 800c11e:	4b1d      	ldr	r3, [pc, #116]	; (800c194 <ESC_checkmbx+0xb8>)
 800c120:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800c124:	f013 0f01 	tst.w	r3, #1
 800c128:	d01a      	beq.n	800c160 <ESC_checkmbx+0x84>
   if ((etohs (SM->PSA) != ESC_MBX1_sma) || (etohs (SM->Length) != ESC_MBX1_sml)
 800c12a:	4b1a      	ldr	r3, [pc, #104]	; (800c194 <ESC_checkmbx+0xb8>)
 800c12c:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
 800c130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c132:	881a      	ldrh	r2, [r3, #0]
 800c134:	4291      	cmp	r1, r2
 800c136:	d11f      	bne.n	800c178 <ESC_checkmbx+0x9c>
 800c138:	4a16      	ldr	r2, [pc, #88]	; (800c194 <ESC_checkmbx+0xb8>)
 800c13a:	f8b2 10c6 	ldrh.w	r1, [r2, #198]	; 0xc6
 800c13e:	885a      	ldrh	r2, [r3, #2]
 800c140:	4291      	cmp	r1, r2
 800c142:	d119      	bne.n	800c178 <ESC_checkmbx+0x9c>
       || (SM->Command != ESC_MBX1_smc) || (ESCvar.SM[1].ECsm == 0))
 800c144:	4a13      	ldr	r2, [pc, #76]	; (800c194 <ESC_checkmbx+0xb8>)
 800c146:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
 800c14a:	799b      	ldrb	r3, [r3, #6]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d113      	bne.n	800c178 <ESC_checkmbx+0x9c>
 800c150:	4b10      	ldr	r3, [pc, #64]	; (800c194 <ESC_checkmbx+0xb8>)
 800c152:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 800c156:	f013 0f01 	tst.w	r3, #1
 800c15a:	d00d      	beq.n	800c178 <ESC_checkmbx+0x9c>
   return state;
 800c15c:	4628      	mov	r0, r5
 800c15e:	e00a      	b.n	800c176 <ESC_checkmbx+0x9a>
      ESCvar.SMtestresult = SMRESULT_ERRSM0;
 800c160:	2401      	movs	r4, #1
 800c162:	4b0c      	ldr	r3, [pc, #48]	; (800c194 <ESC_checkmbx+0xb8>)
 800c164:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
      ESC_SMdisable (0);
 800c168:	2000      	movs	r0, #0
 800c16a:	f7ff ff79 	bl	800c060 <ESC_SMdisable>
      ESC_SMdisable (1);
 800c16e:	4620      	mov	r0, r4
 800c170:	f7ff ff76 	bl	800c060 <ESC_SMdisable>
      return (uint8_t) (ESCinit | ESCerror);      //fail state change
 800c174:	2011      	movs	r0, #17
}
 800c176:	bd38      	pop	{r3, r4, r5, pc}
      ESCvar.SMtestresult = SMRESULT_ERRSM1;
 800c178:	4b06      	ldr	r3, [pc, #24]	; (800c194 <ESC_checkmbx+0xb8>)
 800c17a:	2202      	movs	r2, #2
 800c17c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      ESC_SMdisable (0);
 800c180:	2000      	movs	r0, #0
 800c182:	f7ff ff6d 	bl	800c060 <ESC_SMdisable>
      ESC_SMdisable (1);
 800c186:	2001      	movs	r0, #1
 800c188:	f7ff ff6a 	bl	800c060 <ESC_SMdisable>
      return ESCinit | ESCerror;        //fail state change
 800c18c:	2011      	movs	r0, #17
 800c18e:	e7f2      	b.n	800c176 <ESC_checkmbx+0x9a>
 800c190:	20008208 	.word	0x20008208
 800c194:	2000814c 	.word	0x2000814c

0800c198 <ESC_startmbx>:
{
 800c198:	b510      	push	{r4, lr}
 800c19a:	4604      	mov	r4, r0
   ESCvar.activembxsize = MBXSIZE;
 800c19c:	4b17      	ldr	r3, [pc, #92]	; (800c1fc <ESC_startmbx+0x64>)
 800c19e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1a2:	66da      	str	r2, [r3, #108]	; 0x6c
   ESCvar.activemb0 = &ESCvar.mb[0];
 800c1a4:	1d1a      	adds	r2, r3, #4
 800c1a6:	671a      	str	r2, [r3, #112]	; 0x70
   ESCvar.activemb1 = &ESCvar.mb[1];
 800c1a8:	f103 020c 	add.w	r2, r3, #12
 800c1ac:	675a      	str	r2, [r3, #116]	; 0x74
   ESC_SMenable (0);
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	f7ff ff46 	bl	800c040 <ESC_SMenable>
   ESC_SMenable (1);
 800c1b4:	2001      	movs	r0, #1
 800c1b6:	f7ff ff43 	bl	800c040 <ESC_SMenable>
   ESC_SMstatus (0);
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	f7ff ff20 	bl	800c000 <ESC_SMstatus>
   ESC_SMstatus (1);
 800c1c0:	2001      	movs	r0, #1
 800c1c2:	f7ff ff1d 	bl	800c000 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f7ff ff88 	bl	800c0dc <ESC_checkmbx>
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	f010 0f10 	tst.w	r0, #16
 800c1d2:	d10b      	bne.n	800c1ec <ESC_startmbx+0x54>
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 800c1d4:	4b09      	ldr	r3, [pc, #36]	; (800c1fc <ESC_startmbx+0x64>)
 800c1d6:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
 800c1da:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800c1de:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      ESCvar.MBXrun = 1;
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	bd10      	pop	{r4, pc}
      ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 800c1ec:	2016      	movs	r0, #22
 800c1ee:	f7ff fea5 	bl	800bf3c <ESC_ALerror>
      ESCvar.MBXrun = 0;
 800c1f2:	4b02      	ldr	r3, [pc, #8]	; (800c1fc <ESC_startmbx+0x64>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c1fa:	e7f5      	b.n	800c1e8 <ESC_startmbx+0x50>
 800c1fc:	2000814c 	.word	0x2000814c

0800c200 <ESC_startmbxboot>:
{
 800c200:	b510      	push	{r4, lr}
 800c202:	4604      	mov	r4, r0
   ESCvar.activembxsize = MBXSIZEBOOT;
 800c204:	4b18      	ldr	r3, [pc, #96]	; (800c268 <ESC_startmbxboot+0x68>)
 800c206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c20a:	66da      	str	r2, [r3, #108]	; 0x6c
   ESCvar.activemb0 = &ESCvar.mbboot[0];
 800c20c:	f103 0214 	add.w	r2, r3, #20
 800c210:	671a      	str	r2, [r3, #112]	; 0x70
   ESCvar.activemb1 = &ESCvar.mbboot[1];
 800c212:	f103 021c 	add.w	r2, r3, #28
 800c216:	675a      	str	r2, [r3, #116]	; 0x74
   ESC_SMenable (0);
 800c218:	2000      	movs	r0, #0
 800c21a:	f7ff ff11 	bl	800c040 <ESC_SMenable>
   ESC_SMenable (1);
 800c21e:	2001      	movs	r0, #1
 800c220:	f7ff ff0e 	bl	800c040 <ESC_SMenable>
   ESC_SMstatus (0);
 800c224:	2000      	movs	r0, #0
 800c226:	f7ff feeb 	bl	800c000 <ESC_SMstatus>
   ESC_SMstatus (1);
 800c22a:	2001      	movs	r0, #1
 800c22c:	f7ff fee8 	bl	800c000 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 800c230:	4620      	mov	r0, r4
 800c232:	f7ff ff53 	bl	800c0dc <ESC_checkmbx>
 800c236:	4604      	mov	r4, r0
 800c238:	f010 0f10 	tst.w	r0, #16
 800c23c:	d10b      	bne.n	800c256 <ESC_startmbxboot+0x56>
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 800c23e:	4b0a      	ldr	r3, [pc, #40]	; (800c268 <ESC_startmbxboot+0x68>)
 800c240:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
 800c244:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800c248:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      ESCvar.MBXrun = 1;
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800c252:	4620      	mov	r0, r4
 800c254:	bd10      	pop	{r4, pc}
      ESC_ALerror (ALERR_INVALIDBOOTMBXCONFIG);
 800c256:	2015      	movs	r0, #21
 800c258:	f7ff fe70 	bl	800bf3c <ESC_ALerror>
      ESCvar.MBXrun = 0;
 800c25c:	4b02      	ldr	r3, [pc, #8]	; (800c268 <ESC_startmbxboot+0x68>)
 800c25e:	2200      	movs	r2, #0
 800c260:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c264:	e7f5      	b.n	800c252 <ESC_startmbxboot+0x52>
 800c266:	bf00      	nop
 800c268:	2000814c 	.word	0x2000814c

0800c26c <ESC_stopmbx>:
{
 800c26c:	b510      	push	{r4, lr}
   ESCvar.MBXrun = 0;
 800c26e:	2400      	movs	r4, #0
 800c270:	4b17      	ldr	r3, [pc, #92]	; (800c2d0 <ESC_stopmbx+0x64>)
 800c272:	f883 4068 	strb.w	r4, [r3, #104]	; 0x68
   ESC_SMdisable (0);
 800c276:	4620      	mov	r0, r4
 800c278:	f7ff fef2 	bl	800c060 <ESC_SMdisable>
   ESC_SMdisable (1);
 800c27c:	2001      	movs	r0, #1
 800c27e:	f7ff feef 	bl	800c060 <ESC_SMdisable>
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 800c282:	4620      	mov	r0, r4
 800c284:	e004      	b.n	800c290 <ESC_stopmbx+0x24>
      MBXcontrol[n].state = MBXstate_idle;
 800c286:	4b13      	ldr	r3, [pc, #76]	; (800c2d4 <ESC_stopmbx+0x68>)
 800c288:	2200      	movs	r2, #0
 800c28a:	541a      	strb	r2, [r3, r0]
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 800c28c:	3001      	adds	r0, #1
 800c28e:	b2c0      	uxtb	r0, r0
 800c290:	2802      	cmp	r0, #2
 800c292:	d9f8      	bls.n	800c286 <ESC_stopmbx+0x1a>
   ESCvar.mbxoutpost = 0;
 800c294:	4b0e      	ldr	r3, [pc, #56]	; (800c2d0 <ESC_stopmbx+0x64>)
 800c296:	2200      	movs	r2, #0
 800c298:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
   ESCvar.mbxbackup = 0;
 800c29c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
   ESCvar.xoe = 0;
 800c2a0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   ESCvar.mbxfree = 1;
 800c2a4:	2101      	movs	r1, #1
 800c2a6:	f883 1090 	strb.w	r1, [r3, #144]	; 0x90
   ESCvar.toggle = 0;
 800c2aa:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
   ESCvar.mbxincnt = 0;
 800c2ae:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
   ESCvar.segmented = 0;
 800c2b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
   ESCvar.frags = 0;
 800c2b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   ESCvar.fragsleft = 0;
 800c2ba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   ESCvar.txcue = 0;
 800c2be:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
   ESCvar.index = 0;
 800c2c2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
   ESCvar.subindex = 0;
 800c2c6:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
   ESCvar.flags = 0;
 800c2ca:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 800c2ce:	bd10      	pop	{r4, pc}
 800c2d0:	2000814c 	.word	0x2000814c
 800c2d4:	20008e38 	.word	0x20008e38

0800c2d8 <ESC_readmbx>:
{
 800c2d8:	b530      	push	{r4, r5, lr}
 800c2da:	b083      	sub	sp, #12
   ESC_read (ESC_MBX0_sma, MB, ESC_MBXHSIZE);
 800c2dc:	4c17      	ldr	r4, [pc, #92]	; (800c33c <ESC_readmbx+0x64>)
 800c2de:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c2e0:	4d17      	ldr	r5, [pc, #92]	; (800c340 <ESC_readmbx+0x68>)
 800c2e2:	2206      	movs	r2, #6
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	8818      	ldrh	r0, [r3, #0]
 800c2e8:	f002 fbde 	bl	800eaa8 <ESC_read>
   length = etohs (MB->header.length);
 800c2ec:	882b      	ldrh	r3, [r5, #0]
 800c2ee:	b298      	uxth	r0, r3
 800c2f0:	f8ad 3006 	strh.w	r3, [sp, #6]
   if (length > (ESC_MBX0_sml - ESC_MBXHSIZE))
 800c2f4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c2f6:	8853      	ldrh	r3, [r2, #2]
 800c2f8:	1f99      	subs	r1, r3, #6
 800c2fa:	4288      	cmp	r0, r1
 800c2fc:	d901      	bls.n	800c302 <ESC_readmbx+0x2a>
      length = (uint16_t)(ESC_MBX0_sml - ESC_MBXHSIZE);
 800c2fe:	f8ad 1006 	strh.w	r1, [sp, #6]
   ESC_read ((uint16_t)(ESC_MBX0_sma + ESC_MBXHSIZE), MB->b, length);
 800c302:	8810      	ldrh	r0, [r2, #0]
 800c304:	3006      	adds	r0, #6
 800c306:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c30a:	490e      	ldr	r1, [pc, #56]	; (800c344 <ESC_readmbx+0x6c>)
 800c30c:	b280      	uxth	r0, r0
 800c30e:	f002 fbcb 	bl	800eaa8 <ESC_read>
   if (length + ESC_MBXHSIZE < ESC_MBX0_sml)
 800c312:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c316:	3306      	adds	r3, #6
 800c318:	4a08      	ldr	r2, [pc, #32]	; (800c33c <ESC_readmbx+0x64>)
 800c31a:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800c31c:	8842      	ldrh	r2, [r0, #2]
 800c31e:	4293      	cmp	r3, r2
 800c320:	d304      	bcc.n	800c32c <ESC_readmbx+0x54>
   MBXcontrol[0].state = MBXstate_inclaim;
 800c322:	4b09      	ldr	r3, [pc, #36]	; (800c348 <ESC_readmbx+0x70>)
 800c324:	2201      	movs	r2, #1
 800c326:	701a      	strb	r2, [r3, #0]
}
 800c328:	b003      	add	sp, #12
 800c32a:	bd30      	pop	{r4, r5, pc}
      ESC_read (ESC_MBX0_sme, &length, 1);
 800c32c:	2201      	movs	r2, #1
 800c32e:	f10d 0106 	add.w	r1, sp, #6
 800c332:	8880      	ldrh	r0, [r0, #4]
 800c334:	f002 fbb8 	bl	800eaa8 <ESC_read>
 800c338:	e7f3      	b.n	800c322 <ESC_readmbx+0x4a>
 800c33a:	bf00      	nop
 800c33c:	2000814c 	.word	0x2000814c
 800c340:	20008838 	.word	0x20008838
 800c344:	2000883e 	.word	0x2000883e
 800c348:	20008e38 	.word	0x20008e38

0800c34c <ESC_writembx>:
{
 800c34c:	b510      	push	{r4, lr}
 800c34e:	b082      	sub	sp, #8
   _MBXh *MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 800c350:	4a13      	ldr	r2, [pc, #76]	; (800c3a0 <ESC_writembx+0x54>)
 800c352:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 800c354:	fb03 f000 	mul.w	r0, r3, r0
 800c358:	4b12      	ldr	r3, [pc, #72]	; (800c3a4 <ESC_writembx+0x58>)
 800c35a:	18c1      	adds	r1, r0, r3
   uint8_t dummy = 0;
 800c35c:	2400      	movs	r4, #0
 800c35e:	f88d 4007 	strb.w	r4, [sp, #7]
   length = etohs (MBh->length);
 800c362:	5a1b      	ldrh	r3, [r3, r0]
   if (length > (ESC_MBX1_sml - ESC_MBXHSIZE))
 800c364:	6f50      	ldr	r0, [r2, #116]	; 0x74
 800c366:	8842      	ldrh	r2, [r0, #2]
 800c368:	1f94      	subs	r4, r2, #6
 800c36a:	42a3      	cmp	r3, r4
 800c36c:	d900      	bls.n	800c370 <ESC_writembx+0x24>
      length = (uint16_t)(ESC_MBX1_sml - ESC_MBXHSIZE);
 800c36e:	b2a3      	uxth	r3, r4
   ESC_write (ESC_MBX1_sma, MBh, (uint16_t)(ESC_MBXHSIZE + length));
 800c370:	1d9c      	adds	r4, r3, #6
 800c372:	b2a2      	uxth	r2, r4
 800c374:	8800      	ldrh	r0, [r0, #0]
 800c376:	f002 fbd3 	bl	800eb20 <ESC_write>
   if (length + ESC_MBXHSIZE < ESC_MBX1_sml)
 800c37a:	4b09      	ldr	r3, [pc, #36]	; (800c3a0 <ESC_writembx+0x54>)
 800c37c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c37e:	885a      	ldrh	r2, [r3, #2]
 800c380:	4294      	cmp	r4, r2
 800c382:	d305      	bcc.n	800c390 <ESC_writembx+0x44>
   ESCvar.mbxfree = 0;
 800c384:	4b06      	ldr	r3, [pc, #24]	; (800c3a0 <ESC_writembx+0x54>)
 800c386:	2200      	movs	r2, #0
 800c388:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 800c38c:	b002      	add	sp, #8
 800c38e:	bd10      	pop	{r4, pc}
      ESC_write (ESC_MBX1_sme, &dummy, 1);
 800c390:	2201      	movs	r2, #1
 800c392:	f10d 0107 	add.w	r1, sp, #7
 800c396:	8898      	ldrh	r0, [r3, #4]
 800c398:	f002 fbc2 	bl	800eb20 <ESC_write>
 800c39c:	e7f2      	b.n	800c384 <ESC_writembx+0x38>
 800c39e:	bf00      	nop
 800c3a0:	2000814c 	.word	0x2000814c
 800c3a4:	20008838 	.word	0x20008838

0800c3a8 <ESC_ackmbxread>:
{
 800c3a8:	b510      	push	{r4, lr}
 800c3aa:	b082      	sub	sp, #8
   uint8_t dummy = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f88d 3007 	strb.w	r3, [sp, #7]
   ESC_write (ESC_MBX1_sma, &dummy, 1);
 800c3b2:	4c06      	ldr	r4, [pc, #24]	; (800c3cc <ESC_ackmbxread+0x24>)
 800c3b4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	f10d 0107 	add.w	r1, sp, #7
 800c3bc:	8818      	ldrh	r0, [r3, #0]
 800c3be:	f002 fbaf 	bl	800eb20 <ESC_write>
   ESCvar.mbxfree = 1;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800c3c8:	b002      	add	sp, #8
 800c3ca:	bd10      	pop	{r4, pc}
 800c3cc:	2000814c 	.word	0x2000814c

0800c3d0 <ESC_claimbuffer>:
   uint8_t n = ESC_MBXBUFFERS - 1;
 800c3d0:	2002      	movs	r0, #2
   while ((n > 0) && (MBXcontrol[n].state))
 800c3d2:	e001      	b.n	800c3d8 <ESC_claimbuffer+0x8>
      n--;
 800c3d4:	3801      	subs	r0, #1
 800c3d6:	b2c0      	uxtb	r0, r0
   while ((n > 0) && (MBXcontrol[n].state))
 800c3d8:	b118      	cbz	r0, 800c3e2 <ESC_claimbuffer+0x12>
 800c3da:	4b1a      	ldr	r3, [pc, #104]	; (800c444 <ESC_claimbuffer+0x74>)
 800c3dc:	5c1b      	ldrb	r3, [r3, r0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1f8      	bne.n	800c3d4 <ESC_claimbuffer+0x4>
   if (n)
 800c3e2:	b368      	cbz	r0, 800c440 <ESC_claimbuffer+0x70>
      MBXcontrol[n].state = MBXstate_outclaim;
 800c3e4:	4b17      	ldr	r3, [pc, #92]	; (800c444 <ESC_claimbuffer+0x74>)
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	541a      	strb	r2, [r3, r0]
      MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 800c3ea:	4917      	ldr	r1, [pc, #92]	; (800c448 <ESC_claimbuffer+0x78>)
 800c3ec:	6eca      	ldr	r2, [r1, #108]	; 0x6c
 800c3ee:	4b17      	ldr	r3, [pc, #92]	; (800c44c <ESC_claimbuffer+0x7c>)
 800c3f0:	fb02 3300 	mla	r3, r2, r0, r3
      ESCvar.mbxcnt++;
 800c3f4:	f891 208a 	ldrb.w	r2, [r1, #138]	; 0x8a
 800c3f8:	3201      	adds	r2, #1
 800c3fa:	b2d2      	uxtb	r2, r2
 800c3fc:	f881 208a 	strb.w	r2, [r1, #138]	; 0x8a
      ESCvar.mbxcnt = (ESCvar.mbxcnt & 0x07);
 800c400:	f002 0207 	and.w	r2, r2, #7
 800c404:	f881 208a 	strb.w	r2, [r1, #138]	; 0x8a
      if (ESCvar.mbxcnt == 0)
 800c408:	b91a      	cbnz	r2, 800c412 <ESC_claimbuffer+0x42>
         ESCvar.mbxcnt = 1;
 800c40a:	460a      	mov	r2, r1
 800c40c:	2101      	movs	r1, #1
 800c40e:	f882 108a 	strb.w	r1, [r2, #138]	; 0x8a
      MBh->address = htoes (0x0000);      // destination is master
 800c412:	2200      	movs	r2, #0
 800c414:	709a      	strb	r2, [r3, #2]
 800c416:	70da      	strb	r2, [r3, #3]
      MBh->channel = 0;
 800c418:	7919      	ldrb	r1, [r3, #4]
 800c41a:	f362 0105 	bfi	r1, r2, #0, #6
 800c41e:	7119      	strb	r1, [r3, #4]
      MBh->priority = 0;
 800c420:	b2c9      	uxtb	r1, r1
 800c422:	f362 1187 	bfi	r1, r2, #6, #2
 800c426:	7119      	strb	r1, [r3, #4]
      MBh->mbxcnt = ESCvar.mbxcnt & 0xFU;
 800c428:	4a07      	ldr	r2, [pc, #28]	; (800c448 <ESC_claimbuffer+0x78>)
 800c42a:	f892 c08a 	ldrb.w	ip, [r2, #138]	; 0x8a
 800c42e:	7959      	ldrb	r1, [r3, #5]
 800c430:	f36c 1107 	bfi	r1, ip, #4, #4
 800c434:	7159      	strb	r1, [r3, #5]
      ESCvar.txcue++;
 800c436:	f892 308f 	ldrb.w	r3, [r2, #143]	; 0x8f
 800c43a:	3301      	adds	r3, #1
 800c43c:	f882 308f 	strb.w	r3, [r2, #143]	; 0x8f
}
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	20008e38 	.word	0x20008e38
 800c448:	2000814c 	.word	0x2000814c
 800c44c:	20008838 	.word	0x20008838

0800c450 <ESC_outreqbuffer>:
   uint8_t n = ESC_MBXBUFFERS - 1;
 800c450:	2002      	movs	r0, #2
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 800c452:	e001      	b.n	800c458 <ESC_outreqbuffer+0x8>
      n--;
 800c454:	3801      	subs	r0, #1
 800c456:	b2c0      	uxtb	r0, r0
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 800c458:	b118      	cbz	r0, 800c462 <ESC_outreqbuffer+0x12>
 800c45a:	4b02      	ldr	r3, [pc, #8]	; (800c464 <ESC_outreqbuffer+0x14>)
 800c45c:	5c1b      	ldrb	r3, [r3, r0]
 800c45e:	2b03      	cmp	r3, #3
 800c460:	d1f8      	bne.n	800c454 <ESC_outreqbuffer+0x4>
}
 800c462:	4770      	bx	lr
 800c464:	20008e38 	.word	0x20008e38

0800c468 <MBX_error>:
{
 800c468:	b510      	push	{r4, lr}
 800c46a:	4604      	mov	r4, r0
   MBXout = ESC_claimbuffer ();
 800c46c:	f7ff ffb0 	bl	800c3d0 <ESC_claimbuffer>
   if (MBXout)
 800c470:	b1d0      	cbz	r0, 800c4a8 <MBX_error+0x40>
 800c472:	4601      	mov	r1, r0
      mbxerr = (_MBXerr *) &MBX[MBXout * ESC_MBXSIZE];
 800c474:	4b0d      	ldr	r3, [pc, #52]	; (800c4ac <MBX_error+0x44>)
 800c476:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c478:	fb00 f202 	mul.w	r2, r0, r2
 800c47c:	480c      	ldr	r0, [pc, #48]	; (800c4b0 <MBX_error+0x48>)
 800c47e:	1813      	adds	r3, r2, r0
      mbxerr->mbxheader.length = htoes ((uint16_t) 0x04);
 800c480:	f04f 0c00 	mov.w	ip, #0
 800c484:	f04f 0e04 	mov.w	lr, #4
 800c488:	f800 e002 	strb.w	lr, [r0, r2]
 800c48c:	f883 c001 	strb.w	ip, [r3, #1]
      mbxerr->mbxheader.mbxtype = MBXERR;
 800c490:	795a      	ldrb	r2, [r3, #5]
 800c492:	f36c 0203 	bfi	r2, ip, #0, #4
 800c496:	715a      	strb	r2, [r3, #5]
      mbxerr->type = htoes ((uint16_t) 0x01);
 800c498:	2201      	movs	r2, #1
 800c49a:	719a      	strb	r2, [r3, #6]
 800c49c:	f883 c007 	strb.w	ip, [r3, #7]
      mbxerr->detail = htoes (error);
 800c4a0:	811c      	strh	r4, [r3, #8]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800c4a2:	4b04      	ldr	r3, [pc, #16]	; (800c4b4 <MBX_error+0x4c>)
 800c4a4:	2203      	movs	r2, #3
 800c4a6:	545a      	strb	r2, [r3, r1]
}
 800c4a8:	bd10      	pop	{r4, pc}
 800c4aa:	bf00      	nop
 800c4ac:	2000814c 	.word	0x2000814c
 800c4b0:	20008838 	.word	0x20008838
 800c4b4:	20008e38 	.word	0x20008e38

0800c4b8 <ESC_mbxprocess>:
   if (ESCvar.MBXrun == 0)
 800c4b8:	4b6f      	ldr	r3, [pc, #444]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c4ba:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	f000 80d8 	beq.w	800c674 <ESC_mbxprocess+0x1bc>
{
 800c4c4:	b510      	push	{r4, lr}
   if (ESCvar.ALevent & (ESCREG_ALEVENT_SM0 | ESCREG_ALEVENT_SM1))
 800c4c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c4ca:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c4ce:	d12f      	bne.n	800c530 <ESC_mbxprocess+0x78>
   if (ESCvar.mbxoutpost && (ESCvar.ALevent & ESCREG_ALEVENT_SM1))
 800c4d0:	4b69      	ldr	r3, [pc, #420]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c4d2:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
 800c4d6:	b121      	cbz	r1, 800c4e2 <ESC_mbxprocess+0x2a>
 800c4d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c4dc:	f413 7f00 	tst.w	r3, #512	; 0x200
 800c4e0:	d12d      	bne.n	800c53e <ESC_mbxprocess+0x86>
   if (ESCvar.SM[1].ECrep != ESCvar.toggle)
 800c4e2:	4a65      	ldr	r2, [pc, #404]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c4e4:	f892 30ca 	ldrb.w	r3, [r2, #202]	; 0xca
 800c4e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c4ec:	f892 20aa 	ldrb.w	r2, [r2, #170]	; 0xaa
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d059      	beq.n	800c5a8 <ESC_mbxprocess+0xf0>
      if (ESCvar.mbxoutpost || ESCvar.mbxbackup)
 800c4f4:	4b60      	ldr	r3, [pc, #384]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c4f6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800c4fa:	b1bb      	cbz	r3, 800c52c <ESC_mbxprocess+0x74>
         if (ESCvar.mbxoutpost == 0)
 800c4fc:	2900      	cmp	r1, #0
 800c4fe:	d142      	bne.n	800c586 <ESC_mbxprocess+0xce>
            ESC_writembx (ESCvar.mbxbackup);
 800c500:	4b5d      	ldr	r3, [pc, #372]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c502:	f893 008d 	ldrb.w	r0, [r3, #141]	; 0x8d
 800c506:	f7ff ff21 	bl	800c34c <ESC_writembx>
         ESCvar.toggle = ESCvar.SM[1].ECrep;
 800c50a:	4b5b      	ldr	r3, [pc, #364]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c50c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
 800c510:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800c514:	460a      	mov	r2, r1
 800c516:	f883 10aa 	strb.w	r1, [r3, #170]	; 0xaa
         ESCvar.SM[1].PDIrep = ESCvar.toggle & 0x1U;
 800c51a:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
 800c51e:	f362 0141 	bfi	r1, r2, #1, #1
 800c522:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
         ESC_SMwritepdi (1);
 800c526:	2001      	movs	r0, #1
 800c528:	f7ff fd7a 	bl	800c020 <ESC_SMwritepdi>
      return 0;
 800c52c:	2000      	movs	r0, #0
}
 800c52e:	bd10      	pop	{r4, pc}
      ESC_SMstatus (0);
 800c530:	2000      	movs	r0, #0
 800c532:	f7ff fd65 	bl	800c000 <ESC_SMstatus>
      ESC_SMstatus (1);
 800c536:	2001      	movs	r0, #1
 800c538:	f7ff fd62 	bl	800c000 <ESC_SMstatus>
 800c53c:	e7c8      	b.n	800c4d0 <ESC_mbxprocess+0x18>
      ESC_ackmbxread ();
 800c53e:	f7ff ff33 	bl	800c3a8 <ESC_ackmbxread>
      if (ESCvar.mbxbackup)
 800c542:	4b4d      	ldr	r3, [pc, #308]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c544:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800c548:	b113      	cbz	r3, 800c550 <ESC_mbxprocess+0x98>
         MBXcontrol[ESCvar.mbxbackup].state = MBXstate_idle;
 800c54a:	4a4c      	ldr	r2, [pc, #304]	; (800c67c <ESC_mbxprocess+0x1c4>)
 800c54c:	2100      	movs	r1, #0
 800c54e:	54d1      	strb	r1, [r2, r3]
      if (MBXcontrol[ESCvar.mbxoutpost].state == MBXstate_again)
 800c550:	4b49      	ldr	r3, [pc, #292]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c552:	f893 008c 	ldrb.w	r0, [r3, #140]	; 0x8c
 800c556:	4b49      	ldr	r3, [pc, #292]	; (800c67c <ESC_mbxprocess+0x1c4>)
 800c558:	5c1b      	ldrb	r3, [r3, r0]
 800c55a:	2b06      	cmp	r3, #6
 800c55c:	d010      	beq.n	800c580 <ESC_mbxprocess+0xc8>
      MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_backup;
 800c55e:	4b46      	ldr	r3, [pc, #280]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c560:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800c564:	4945      	ldr	r1, [pc, #276]	; (800c67c <ESC_mbxprocess+0x1c4>)
 800c566:	2005      	movs	r0, #5
 800c568:	5488      	strb	r0, [r1, r2]
      ESCvar.mbxbackup = ESCvar.mbxoutpost;
 800c56a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
      ESCvar.mbxoutpost = 0;
 800c56e:	2200      	movs	r2, #0
 800c570:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      if(ESCvar.xoe > 0)
 800c574:	f893 008e 	ldrb.w	r0, [r3, #142]	; 0x8e
 800c578:	2800      	cmp	r0, #0
 800c57a:	d0d8      	beq.n	800c52e <ESC_mbxprocess+0x76>
         return 1;
 800c57c:	2001      	movs	r0, #1
 800c57e:	e7d6      	b.n	800c52e <ESC_mbxprocess+0x76>
         ESC_writembx (ESCvar.mbxoutpost);
 800c580:	f7ff fee4 	bl	800c34c <ESC_writembx>
 800c584:	e7eb      	b.n	800c55e <ESC_mbxprocess+0xa6>
            ESC_SMdisable (1);
 800c586:	2001      	movs	r0, #1
 800c588:	f7ff fd6a 	bl	800c060 <ESC_SMdisable>
            MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_again;
 800c58c:	4c3a      	ldr	r4, [pc, #232]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c58e:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800c592:	4a3a      	ldr	r2, [pc, #232]	; (800c67c <ESC_mbxprocess+0x1c4>)
 800c594:	2106      	movs	r1, #6
 800c596:	54d1      	strb	r1, [r2, r3]
            ESC_SMenable (1);
 800c598:	2001      	movs	r0, #1
 800c59a:	f7ff fd51 	bl	800c040 <ESC_SMenable>
            ESC_writembx (ESCvar.mbxbackup);
 800c59e:	f894 008d 	ldrb.w	r0, [r4, #141]	; 0x8d
 800c5a2:	f7ff fed3 	bl	800c34c <ESC_writembx>
 800c5a6:	e7b0      	b.n	800c50a <ESC_mbxprocess+0x52>
   if (ESCvar.txcue && (ESCvar.mbxfree || !ESCvar.SM[1].MBXstat))
 800c5a8:	4b33      	ldr	r3, [pc, #204]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c5aa:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800c5ae:	b173      	cbz	r3, 800c5ce <ESC_mbxprocess+0x116>
 800c5b0:	4b31      	ldr	r3, [pc, #196]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c5b2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c5b6:	b92b      	cbnz	r3, 800c5c4 <ESC_mbxprocess+0x10c>
 800c5b8:	4b2f      	ldr	r3, [pc, #188]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c5ba:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c5be:	f013 0f08 	tst.w	r3, #8
 800c5c2:	d104      	bne.n	800c5ce <ESC_mbxprocess+0x116>
      mbxhandle = ESC_outreqbuffer ();
 800c5c4:	f7ff ff44 	bl	800c450 <ESC_outreqbuffer>
      if (mbxhandle)
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d131      	bne.n	800c632 <ESC_mbxprocess+0x17a>
   if ((ESCvar.SM[0].MBXstat != 0) && (MBXcontrol[0].state == 0)
 800c5ce:	4b2a      	ldr	r3, [pc, #168]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c5d0:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
 800c5d4:	f010 0008 	ands.w	r0, r0, #8
 800c5d8:	d0a9      	beq.n	800c52e <ESC_mbxprocess+0x76>
 800c5da:	4b28      	ldr	r3, [pc, #160]	; (800c67c <ESC_mbxprocess+0x1c4>)
 800c5dc:	7818      	ldrb	r0, [r3, #0]
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	d146      	bne.n	800c670 <ESC_mbxprocess+0x1b8>
         && (ESCvar.mbxoutpost == 0) && (ESCvar.xoe == 0))
 800c5e2:	4b25      	ldr	r3, [pc, #148]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c5e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5e8:	f013 1fff 	tst.w	r3, #16711935	; 0xff00ff
 800c5ec:	d19f      	bne.n	800c52e <ESC_mbxprocess+0x76>
      ESC_readmbx ();
 800c5ee:	f7ff fe73 	bl	800c2d8 <ESC_readmbx>
      ESCvar.SM[0].MBXstat = 0;
 800c5f2:	4b21      	ldr	r3, [pc, #132]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c5f4:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
 800c5f8:	f36f 02c3 	bfc	r2, #3, #1
 800c5fc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
      if (etohs (MBh->length) == 0)
 800c600:	4b1f      	ldr	r3, [pc, #124]	; (800c680 <ESC_mbxprocess+0x1c8>)
 800c602:	881b      	ldrh	r3, [r3, #0]
 800c604:	b34b      	cbz	r3, 800c65a <ESC_mbxprocess+0x1a2>
      if ((MBh->mbxcnt != 0) && (MBh->mbxcnt == ESCvar.mbxincnt))
 800c606:	4b1e      	ldr	r3, [pc, #120]	; (800c680 <ESC_mbxprocess+0x1c8>)
 800c608:	795b      	ldrb	r3, [r3, #5]
 800c60a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800c60e:	d007      	beq.n	800c620 <ESC_mbxprocess+0x168>
 800c610:	4b1b      	ldr	r3, [pc, #108]	; (800c680 <ESC_mbxprocess+0x1c8>)
 800c612:	795a      	ldrb	r2, [r3, #5]
 800c614:	4b18      	ldr	r3, [pc, #96]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c616:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800c61a:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 800c61e:	d023      	beq.n	800c668 <ESC_mbxprocess+0x1b0>
      ESCvar.mbxincnt = MBh->mbxcnt;
 800c620:	4b17      	ldr	r3, [pc, #92]	; (800c680 <ESC_mbxprocess+0x1c8>)
 800c622:	795b      	ldrb	r3, [r3, #5]
 800c624:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c628:	4a13      	ldr	r2, [pc, #76]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c62a:	f882 308b 	strb.w	r3, [r2, #139]	; 0x8b
      return 1;
 800c62e:	2001      	movs	r0, #1
 800c630:	e77d      	b.n	800c52e <ESC_mbxprocess+0x76>
         ESC_writembx (mbxhandle);
 800c632:	f7ff fe8b 	bl	800c34c <ESC_writembx>
         ESC_SMstatus (1);
 800c636:	2001      	movs	r0, #1
 800c638:	f7ff fce2 	bl	800c000 <ESC_SMstatus>
         MBXcontrol[mbxhandle].state = MBXstate_outpost;
 800c63c:	4b0f      	ldr	r3, [pc, #60]	; (800c67c <ESC_mbxprocess+0x1c4>)
 800c63e:	2204      	movs	r2, #4
 800c640:	551a      	strb	r2, [r3, r4]
         ESCvar.mbxoutpost = mbxhandle;
 800c642:	4b0d      	ldr	r3, [pc, #52]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c644:	f883 408c 	strb.w	r4, [r3, #140]	; 0x8c
         if (ESCvar.txcue)
 800c648:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d0be      	beq.n	800c5ce <ESC_mbxprocess+0x116>
            ESCvar.txcue--;
 800c650:	3b01      	subs	r3, #1
 800c652:	4a09      	ldr	r2, [pc, #36]	; (800c678 <ESC_mbxprocess+0x1c0>)
 800c654:	f882 308f 	strb.w	r3, [r2, #143]	; 0x8f
 800c658:	e7b9      	b.n	800c5ce <ESC_mbxprocess+0x116>
         MBX_error (MBXERR_INVALIDHEADER);
 800c65a:	2005      	movs	r0, #5
 800c65c:	f7ff ff04 	bl	800c468 <MBX_error>
         MBXcontrol[0].state = MBXstate_idle;
 800c660:	4b06      	ldr	r3, [pc, #24]	; (800c67c <ESC_mbxprocess+0x1c4>)
 800c662:	2200      	movs	r2, #0
 800c664:	701a      	strb	r2, [r3, #0]
 800c666:	e7ce      	b.n	800c606 <ESC_mbxprocess+0x14e>
         MBXcontrol[0].state = MBXstate_idle;
 800c668:	4b04      	ldr	r3, [pc, #16]	; (800c67c <ESC_mbxprocess+0x1c4>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	701a      	strb	r2, [r3, #0]
 800c66e:	e7d7      	b.n	800c620 <ESC_mbxprocess+0x168>
   return 0;
 800c670:	2000      	movs	r0, #0
 800c672:	e75c      	b.n	800c52e <ESC_mbxprocess+0x76>
}
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	2000814c 	.word	0x2000814c
 800c67c:	20008e38 	.word	0x20008e38
 800c680:	20008838 	.word	0x20008838

0800c684 <ESC_xoeprocess>:
{
 800c684:	b508      	push	{r3, lr}
   if (ESCvar.MBXrun == 0)
 800c686:	4b10      	ldr	r3, [pc, #64]	; (800c6c8 <ESC_xoeprocess+0x44>)
 800c688:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c68c:	b13b      	cbz	r3, 800c69e <ESC_xoeprocess+0x1a>
   if ((ESCvar.xoe == 0) && (MBXcontrol[0].state == MBXstate_inclaim))
 800c68e:	4b0e      	ldr	r3, [pc, #56]	; (800c6c8 <ESC_xoeprocess+0x44>)
 800c690:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800c694:	b91b      	cbnz	r3, 800c69e <ESC_xoeprocess+0x1a>
 800c696:	4b0d      	ldr	r3, [pc, #52]	; (800c6cc <ESC_xoeprocess+0x48>)
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d000      	beq.n	800c6a0 <ESC_xoeprocess+0x1c>
}
 800c69e:	bd08      	pop	{r3, pc}
      if ((mbh->mbxtype == 0) || (etohs (mbh->length) == 0))
 800c6a0:	4b0b      	ldr	r3, [pc, #44]	; (800c6d0 <ESC_xoeprocess+0x4c>)
 800c6a2:	795b      	ldrb	r3, [r3, #5]
 800c6a4:	f013 0f0f 	tst.w	r3, #15
 800c6a8:	d002      	beq.n	800c6b0 <ESC_xoeprocess+0x2c>
 800c6aa:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <ESC_xoeprocess+0x4c>)
 800c6ac:	881b      	ldrh	r3, [r3, #0]
 800c6ae:	b933      	cbnz	r3, 800c6be <ESC_xoeprocess+0x3a>
         MBX_error (MBXERR_INVALIDHEADER);
 800c6b0:	2005      	movs	r0, #5
 800c6b2:	f7ff fed9 	bl	800c468 <MBX_error>
      MBXcontrol[0].state = MBXstate_idle;
 800c6b6:	4b05      	ldr	r3, [pc, #20]	; (800c6cc <ESC_xoeprocess+0x48>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	701a      	strb	r2, [r3, #0]
 800c6bc:	e7ef      	b.n	800c69e <ESC_xoeprocess+0x1a>
         MBX_error (MBXERR_UNSUPPORTEDPROTOCOL);
 800c6be:	2002      	movs	r0, #2
 800c6c0:	f7ff fed2 	bl	800c468 <MBX_error>
 800c6c4:	e7f7      	b.n	800c6b6 <ESC_xoeprocess+0x32>
 800c6c6:	bf00      	nop
 800c6c8:	2000814c 	.word	0x2000814c
 800c6cc:	20008e38 	.word	0x20008e38
 800c6d0:	20008838 	.word	0x20008838

0800c6d4 <ESC_checkSM23>:
{
 800c6d4:	b538      	push	{r3, r4, r5, lr}
 800c6d6:	4605      	mov	r5, r0
   ESC_read (ESCREG_SM2, (void *) &ESCvar.SM[2], sizeof (ESCvar.SM[2]));
 800c6d8:	4c38      	ldr	r4, [pc, #224]	; (800c7bc <ESC_checkSM23+0xe8>)
 800c6da:	2208      	movs	r2, #8
 800c6dc:	4621      	mov	r1, r4
 800c6de:	f44f 6001 	mov.w	r0, #2064	; 0x810
 800c6e2:	f002 f9e1 	bl	800eaa8 <ESC_read>
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 800c6e6:	8823      	ldrh	r3, [r4, #0]
 800c6e8:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 800c6ec:	d139      	bne.n	800c762 <ESC_checkSM23+0x8e>
       (SM->Command != ESC_SM2_smc))
 800c6ee:	f1a4 03cc 	sub.w	r3, r4, #204	; 0xcc
 800c6f2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 800c6f6:	2b24      	cmp	r3, #36	; 0x24
 800c6f8:	d133      	bne.n	800c762 <ESC_checkSM23+0x8e>
   else if (etohs (SM->Length) != ESCvar.ESC_SM2_sml)
 800c6fa:	4a31      	ldr	r2, [pc, #196]	; (800c7c0 <ESC_checkSM23+0xec>)
 800c6fc:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
 800c700:	f8b2 2078 	ldrh.w	r2, [r2, #120]	; 0x78
 800c704:	4293      	cmp	r3, r2
 800c706:	d132      	bne.n	800c76e <ESC_checkSM23+0x9a>
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800c708:	492d      	ldr	r1, [pc, #180]	; (800c7c0 <ESC_checkSM23+0xec>)
 800c70a:	f891 10d2 	ldrb.w	r1, [r1, #210]	; 0xd2
   else if (((ESC_SM2_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 800c70e:	f011 0f01 	tst.w	r1, #1
 800c712:	d100      	bne.n	800c716 <ESC_checkSM23+0x42>
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800c714:	bb8a      	cbnz	r2, 800c77a <ESC_checkSM23+0xa6>
   if ((ESC_SM2_sma + (etohs (SM->Length) * 3)) > ESC_SM3_sma)
 800c716:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c71a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c71e:	dc32      	bgt.n	800c786 <ESC_checkSM23+0xb2>
   ESC_read (ESCREG_SM3, (void *) &ESCvar.SM[3], sizeof (ESCvar.SM[3]));
 800c720:	4c28      	ldr	r4, [pc, #160]	; (800c7c4 <ESC_checkSM23+0xf0>)
 800c722:	2208      	movs	r2, #8
 800c724:	4621      	mov	r1, r4
 800c726:	f640 0018 	movw	r0, #2072	; 0x818
 800c72a:	f002 f9bd 	bl	800eaa8 <ESC_read>
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 800c72e:	8823      	ldrh	r3, [r4, #0]
 800c730:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 800c734:	d12d      	bne.n	800c792 <ESC_checkSM23+0xbe>
       (SM->Command != ESC_SM3_smc))
 800c736:	f1a4 03d4 	sub.w	r3, r4, #212	; 0xd4
 800c73a:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 800c73e:	2b20      	cmp	r3, #32
 800c740:	d127      	bne.n	800c792 <ESC_checkSM23+0xbe>
   else if (etohs (SM->Length) != ESCvar.ESC_SM3_sml)
 800c742:	4b1f      	ldr	r3, [pc, #124]	; (800c7c0 <ESC_checkSM23+0xec>)
 800c744:	f8b3 20d6 	ldrh.w	r2, [r3, #214]	; 0xd6
 800c748:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d126      	bne.n	800c79e <ESC_checkSM23+0xca>
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800c750:	4a1b      	ldr	r2, [pc, #108]	; (800c7c0 <ESC_checkSM23+0xec>)
 800c752:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
   else if (((ESC_SM3_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 800c756:	f012 0f01 	tst.w	r2, #1
 800c75a:	d12c      	bne.n	800c7b6 <ESC_checkSM23+0xe2>
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800c75c:	bb2b      	cbnz	r3, 800c7aa <ESC_checkSM23+0xd6>
   return state;
 800c75e:	4628      	mov	r0, r5
 800c760:	e004      	b.n	800c76c <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800c762:	4b17      	ldr	r3, [pc, #92]	; (800c7c0 <ESC_checkSM23+0xec>)
 800c764:	2204      	movs	r2, #4
 800c766:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c76a:	2012      	movs	r0, #18
}
 800c76c:	bd38      	pop	{r3, r4, r5, pc}
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800c76e:	4b14      	ldr	r3, [pc, #80]	; (800c7c0 <ESC_checkSM23+0xec>)
 800c770:	2204      	movs	r2, #4
 800c772:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c776:	2012      	movs	r0, #18
 800c778:	e7f8      	b.n	800c76c <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800c77a:	4b11      	ldr	r3, [pc, #68]	; (800c7c0 <ESC_checkSM23+0xec>)
 800c77c:	2204      	movs	r2, #4
 800c77e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c782:	2012      	movs	r0, #18
 800c784:	e7f2      	b.n	800c76c <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800c786:	4b0e      	ldr	r3, [pc, #56]	; (800c7c0 <ESC_checkSM23+0xec>)
 800c788:	2204      	movs	r2, #4
 800c78a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c78e:	2012      	movs	r0, #18
 800c790:	e7ec      	b.n	800c76c <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800c792:	4b0b      	ldr	r3, [pc, #44]	; (800c7c0 <ESC_checkSM23+0xec>)
 800c794:	2208      	movs	r2, #8
 800c796:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c79a:	2012      	movs	r0, #18
 800c79c:	e7e6      	b.n	800c76c <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800c79e:	4b08      	ldr	r3, [pc, #32]	; (800c7c0 <ESC_checkSM23+0xec>)
 800c7a0:	2208      	movs	r2, #8
 800c7a2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c7a6:	2012      	movs	r0, #18
 800c7a8:	e7e0      	b.n	800c76c <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800c7aa:	4b05      	ldr	r3, [pc, #20]	; (800c7c0 <ESC_checkSM23+0xec>)
 800c7ac:	2208      	movs	r2, #8
 800c7ae:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c7b2:	2012      	movs	r0, #18
 800c7b4:	e7da      	b.n	800c76c <ESC_checkSM23+0x98>
   return state;
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	e7d8      	b.n	800c76c <ESC_checkSM23+0x98>
 800c7ba:	bf00      	nop
 800c7bc:	20008218 	.word	0x20008218
 800c7c0:	2000814c 	.word	0x2000814c
 800c7c4:	20008220 	.word	0x20008220

0800c7c8 <ESC_startinput>:
{
 800c7c8:	b510      	push	{r4, lr}
   state = ESC_checkSM23 (state);
 800c7ca:	f7ff ff83 	bl	800c6d4 <ESC_checkSM23>
 800c7ce:	4604      	mov	r4, r0
   if (state != (ESCpreop | ESCerror))
 800c7d0:	2812      	cmp	r0, #18
 800c7d2:	d015      	beq.n	800c800 <ESC_startinput+0x38>
      if (ESCvar.ESC_SM3_sml > 0)
 800c7d4:	4b29      	ldr	r3, [pc, #164]	; (800c87c <ESC_startinput+0xb4>)
 800c7d6:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800c7da:	b96b      	cbnz	r3, 800c7f8 <ESC_startinput+0x30>
      CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_INPUT);
 800c7dc:	f3bf 8f5b 	dmb	ish
 800c7e0:	4b27      	ldr	r3, [pc, #156]	; (800c880 <ESC_startinput+0xb8>)
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	701a      	strb	r2, [r3, #0]
 800c7e6:	f3bf 8f5b 	dmb	ish
   if (ESCvar.use_interrupt == 0)
 800c7ea:	4b24      	ldr	r3, [pc, #144]	; (800c87c <ESC_startinput+0xb4>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	b10b      	cbz	r3, 800c7f4 <ESC_startinput+0x2c>
   if (state != (ESCpreop | ESCerror))
 800c7f0:	2c12      	cmp	r4, #18
 800c7f2:	d119      	bne.n	800c828 <ESC_startinput+0x60>
}
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	bd10      	pop	{r4, pc}
         ESC_SMenable (3);
 800c7f8:	2003      	movs	r0, #3
 800c7fa:	f7ff fc21 	bl	800c040 <ESC_SMenable>
 800c7fe:	e7ed      	b.n	800c7dc <ESC_startinput+0x14>
      ESC_SMdisable (2);
 800c800:	2002      	movs	r0, #2
 800c802:	f7ff fc2d 	bl	800c060 <ESC_SMdisable>
      ESC_SMdisable (3);
 800c806:	2003      	movs	r0, #3
 800c808:	f7ff fc2a 	bl	800c060 <ESC_SMdisable>
      if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 800c80c:	4b1b      	ldr	r3, [pc, #108]	; (800c87c <ESC_startinput+0xb4>)
 800c80e:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800c812:	f013 0f08 	tst.w	r3, #8
 800c816:	d003      	beq.n	800c820 <ESC_startinput+0x58>
         ESC_ALerror (ALERR_INVALIDINPUTSM);
 800c818:	201e      	movs	r0, #30
 800c81a:	f7ff fb8f 	bl	800bf3c <ESC_ALerror>
 800c81e:	e7e4      	b.n	800c7ea <ESC_startinput+0x22>
         ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800c820:	201d      	movs	r0, #29
 800c822:	f7ff fb8b 	bl	800bf3c <ESC_ALerror>
 800c826:	e7e0      	b.n	800c7ea <ESC_startinput+0x22>
      dc_check_result = ESC_checkDC();
 800c828:	f7ff fc42 	bl	800c0b0 <ESC_checkDC>
      if(dc_check_result > 0)
 800c82c:	b988      	cbnz	r0, 800c852 <ESC_startinput+0x8a>
         if (ESCvar.esc_hw_interrupt_enable != NULL)
 800c82e:	4b13      	ldr	r3, [pc, #76]	; (800c87c <ESC_startinput+0xb4>)
 800c830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c832:	2b00      	cmp	r3, #0
 800c834:	d0de      	beq.n	800c7f4 <ESC_startinput+0x2c>
            if (ESCvar.ESC_SM2_sml == 0)
 800c836:	4a11      	ldr	r2, [pc, #68]	; (800c87c <ESC_startinput+0xb4>)
 800c838:	f8b2 2078 	ldrh.w	r2, [r2, #120]	; 0x78
 800c83c:	b9d2      	cbnz	r2, 800c874 <ESC_startinput+0xac>
               int_mask = ESCREG_ALEVENT_SM3;
 800c83e:	f44f 6000 	mov.w	r0, #2048	; 0x800
            if (ESCvar.dcsync > 0)
 800c842:	4a0e      	ldr	r2, [pc, #56]	; (800c87c <ESC_startinput+0xb4>)
 800c844:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 800c848:	b10a      	cbz	r2, 800c84e <ESC_startinput+0x86>
               int_mask |= ESCREG_ALEVENT_DC_SYNC0;
 800c84a:	f040 0004 	orr.w	r0, r0, #4
            ESCvar.esc_hw_interrupt_enable (int_mask);
 800c84e:	4798      	blx	r3
 800c850:	e7d0      	b.n	800c7f4 <ESC_startinput+0x2c>
         ESC_ALerror (dc_check_result);
 800c852:	f7ff fb73 	bl	800bf3c <ESC_ALerror>
         ESC_SMdisable (2);
 800c856:	2002      	movs	r0, #2
 800c858:	f7ff fc02 	bl	800c060 <ESC_SMdisable>
         ESC_SMdisable (3);
 800c85c:	2003      	movs	r0, #3
 800c85e:	f7ff fbff 	bl	800c060 <ESC_SMdisable>
         CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 800c862:	f3bf 8f5b 	dmb	ish
 800c866:	4b06      	ldr	r3, [pc, #24]	; (800c880 <ESC_startinput+0xb8>)
 800c868:	2200      	movs	r2, #0
 800c86a:	701a      	strb	r2, [r3, #0]
 800c86c:	f3bf 8f5b 	dmb	ish
         state = (ESCpreop | ESCerror);
 800c870:	2412      	movs	r4, #18
 800c872:	e7bf      	b.n	800c7f4 <ESC_startinput+0x2c>
               int_mask = ESCREG_ALEVENT_SM2;
 800c874:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c878:	e7e3      	b.n	800c842 <ESC_startinput+0x7a>
 800c87a:	bf00      	nop
 800c87c:	2000814c 	.word	0x2000814c
 800c880:	20008235 	.word	0x20008235

0800c884 <ESC_stopinput>:
{
 800c884:	b510      	push	{r4, lr}
   CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 800c886:	4c0c      	ldr	r4, [pc, #48]	; (800c8b8 <ESC_stopinput+0x34>)
 800c888:	f3bf 8f5b 	dmb	ish
 800c88c:	2300      	movs	r3, #0
 800c88e:	7023      	strb	r3, [r4, #0]
 800c890:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (3);
 800c894:	2003      	movs	r0, #3
 800c896:	f7ff fbe3 	bl	800c060 <ESC_SMdisable>
   ESC_SMdisable (2);
 800c89a:	2002      	movs	r0, #2
 800c89c:	f7ff fbe0 	bl	800c060 <ESC_SMdisable>
   if ((ESCvar.use_interrupt != 0) &&
 800c8a0:	f854 3ce9 	ldr.w	r3, [r4, #-233]
 800c8a4:	b133      	cbz	r3, 800c8b4 <ESC_stopinput+0x30>
         (ESCvar.esc_hw_interrupt_disable != NULL))
 800c8a6:	f1a4 03e9 	sub.w	r3, r4, #233	; 0xe9
 800c8aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   if ((ESCvar.use_interrupt != 0) &&
 800c8ac:	b113      	cbz	r3, 800c8b4 <ESC_stopinput+0x30>
      ESCvar.esc_hw_interrupt_disable (ESCREG_ALEVENT_DC_SYNC0 |
 800c8ae:	f640 4004 	movw	r0, #3076	; 0xc04
 800c8b2:	4798      	blx	r3
}
 800c8b4:	bd10      	pop	{r4, pc}
 800c8b6:	bf00      	nop
 800c8b8:	20008235 	.word	0x20008235

0800c8bc <ESC_startoutput>:
{
 800c8bc:	b510      	push	{r4, lr}
 800c8be:	4604      	mov	r4, r0
   if (ESCvar.ESC_SM2_sml > 0)
 800c8c0:	4b0b      	ldr	r3, [pc, #44]	; (800c8f0 <ESC_startoutput+0x34>)
 800c8c2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800c8c6:	b973      	cbnz	r3, 800c8e6 <ESC_startoutput+0x2a>
   CC_ATOMIC_OR(ESCvar.App.state, APPSTATE_OUTPUT);
 800c8c8:	4b0a      	ldr	r3, [pc, #40]	; (800c8f4 <ESC_startoutput+0x38>)
 800c8ca:	f3bf 8f5b 	dmb	ish
 800c8ce:	e8d3 1f4f 	ldrexb	r1, [r3]
 800c8d2:	f041 0102 	orr.w	r1, r1, #2
 800c8d6:	e8c3 1f42 	strexb	r2, r1, [r3]
 800c8da:	2a00      	cmp	r2, #0
 800c8dc:	d1f7      	bne.n	800c8ce <ESC_startoutput+0x12>
 800c8de:	f3bf 8f5b 	dmb	ish
}
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	bd10      	pop	{r4, pc}
      ESC_SMenable (2);
 800c8e6:	2002      	movs	r0, #2
 800c8e8:	f7ff fbaa 	bl	800c040 <ESC_SMenable>
 800c8ec:	e7ec      	b.n	800c8c8 <ESC_startoutput+0xc>
 800c8ee:	bf00      	nop
 800c8f0:	2000814c 	.word	0x2000814c
 800c8f4:	20008235 	.word	0x20008235

0800c8f8 <ESC_stopoutput>:
{
 800c8f8:	b508      	push	{r3, lr}
   CC_ATOMIC_AND(ESCvar.App.state, APPSTATE_INPUT);
 800c8fa:	4b09      	ldr	r3, [pc, #36]	; (800c920 <ESC_stopoutput+0x28>)
 800c8fc:	f3bf 8f5b 	dmb	ish
 800c900:	e8d3 1f4f 	ldrexb	r1, [r3]
 800c904:	f001 0101 	and.w	r1, r1, #1
 800c908:	e8c3 1f42 	strexb	r2, r1, [r3]
 800c90c:	2a00      	cmp	r2, #0
 800c90e:	d1f7      	bne.n	800c900 <ESC_stopoutput+0x8>
 800c910:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (2);
 800c914:	2002      	movs	r0, #2
 800c916:	f7ff fba3 	bl	800c060 <ESC_SMdisable>
   APP_safeoutput ();
 800c91a:	f7ff f9bb 	bl	800bc94 <APP_safeoutput>
}
 800c91e:	bd08      	pop	{r3, pc}
 800c920:	20008235 	.word	0x20008235

0800c924 <ESC_ALstatusgotoerror>:
   if(status & ESCop)
 800c924:	f010 0f08 	tst.w	r0, #8
 800c928:	d135      	bne.n	800c996 <ESC_ALstatusgotoerror+0x72>
{
 800c92a:	b530      	push	{r4, r5, lr}
 800c92c:	b083      	sub	sp, #12
 800c92e:	4604      	mov	r4, r0
 800c930:	460d      	mov	r5, r1
   as = ESCvar.ALstatus & ESCREG_AL_ERRACKMASK;
 800c932:	4a19      	ldr	r2, [pc, #100]	; (800c998 <ESC_ALstatusgotoerror+0x74>)
 800c934:	f8b2 3080 	ldrh.w	r3, [r2, #128]	; 0x80
 800c938:	f003 030f 	and.w	r3, r3, #15
 800c93c:	f88d 3006 	strb.w	r3, [sp, #6]
   an = as;
 800c940:	f88d 3007 	strb.w	r3, [sp, #7]
   as = (uint8_t)(((status & ESCREG_AL_ERRACKMASK) << 4) | (as & 0x0f));
 800c944:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800c948:	f88d 3006 	strb.w	r3, [sp, #6]
   if (ESCvar.pre_state_change_hook != NULL)
 800c94c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c94e:	b123      	cbz	r3, 800c95a <ESC_ALstatusgotoerror+0x36>
      ESCvar.pre_state_change_hook (&as, &an);
 800c950:	f10d 0107 	add.w	r1, sp, #7
 800c954:	f10d 0006 	add.w	r0, sp, #6
 800c958:	4798      	blx	r3
   if ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 800c95a:	f3bf 8f5b 	dmb	ish
 800c95e:	4b0f      	ldr	r3, [pc, #60]	; (800c99c <ESC_ALstatusgotoerror+0x78>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	f3bf 8f5b 	dmb	ish
 800c966:	f013 0f02 	tst.w	r3, #2
 800c96a:	d111      	bne.n	800c990 <ESC_ALstatusgotoerror+0x6c>
   ESC_ALerror(errornumber);
 800c96c:	4628      	mov	r0, r5
 800c96e:	f7ff fae5 	bl	800bf3c <ESC_ALerror>
   ESC_ALstatus(status);
 800c972:	4620      	mov	r0, r4
 800c974:	f7ff fb16 	bl	800bfa4 <ESC_ALstatus>
   an = status;
 800c978:	f88d 4007 	strb.w	r4, [sp, #7]
   if (ESCvar.post_state_change_hook != NULL)
 800c97c:	4b06      	ldr	r3, [pc, #24]	; (800c998 <ESC_ALstatusgotoerror+0x74>)
 800c97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c980:	b123      	cbz	r3, 800c98c <ESC_ALstatusgotoerror+0x68>
      ESCvar.post_state_change_hook (&as, &an);
 800c982:	f10d 0107 	add.w	r1, sp, #7
 800c986:	f10d 0006 	add.w	r0, sp, #6
 800c98a:	4798      	blx	r3
}
 800c98c:	b003      	add	sp, #12
 800c98e:	bd30      	pop	{r4, r5, pc}
      ESC_stopoutput();
 800c990:	f7ff ffb2 	bl	800c8f8 <ESC_stopoutput>
 800c994:	e7ea      	b.n	800c96c <ESC_ALstatusgotoerror+0x48>
 800c996:	4770      	bx	lr
 800c998:	2000814c 	.word	0x2000814c
 800c99c:	20008235 	.word	0x20008235

0800c9a0 <ESC_sm_act_event>:
{
 800c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if ((ESCvar.ALevent & ESCREG_ALEVENT_SMCHANGE) == 0)
 800c9a2:	4b42      	ldr	r3, [pc, #264]	; (800caac <ESC_sm_act_event+0x10c>)
 800c9a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c9a8:	f013 0f10 	tst.w	r3, #16
 800c9ac:	d034      	beq.n	800ca18 <ESC_sm_act_event+0x78>
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 800c9ae:	4b3f      	ldr	r3, [pc, #252]	; (800caac <ESC_sm_act_event+0x10c>)
 800c9b0:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800c9b4:	f002 051f 	and.w	r5, r2, #31
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 800c9b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9bc:	f003 041f 	and.w	r4, r3, #31
   if (((ac & ESCerror) || (ac == ESCinit)))
 800c9c0:	f012 0f10 	tst.w	r2, #16
 800c9c4:	d103      	bne.n	800c9ce <ESC_sm_act_event+0x2e>
 800c9c6:	2d01      	cmp	r5, #1
 800c9c8:	d001      	beq.n	800c9ce <ESC_sm_act_event+0x2e>
   an = as;
 800c9ca:	4626      	mov	r6, r4
 800c9cc:	e003      	b.n	800c9d6 <ESC_sm_act_event+0x36>
      ac &= ESCREG_AL_ERRACKMASK;
 800c9ce:	f002 050f 	and.w	r5, r2, #15
      an &= ESCREG_AL_ERRACKMASK;
 800c9d2:	f003 060f 	and.w	r6, r3, #15
   if ((as & ESCREG_AL_ALLBUTINITMASK) &&
 800c9d6:	f013 0f0e 	tst.w	r3, #14
 800c9da:	d005      	beq.n	800c9e8 <ESC_sm_act_event+0x48>
 800c9dc:	2c03      	cmp	r4, #3
 800c9de:	d003      	beq.n	800c9e8 <ESC_sm_act_event+0x48>
       ((as == ESCboot) == 0) && ESCvar.MBXrun)
 800c9e0:	4b32      	ldr	r3, [pc, #200]	; (800caac <ESC_sm_act_event+0x10c>)
 800c9e2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c9e6:	b9c3      	cbnz	r3, 800ca1a <ESC_sm_act_event+0x7a>
      ESC_SMack (0);
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	f7ff fafc 	bl	800bfe6 <ESC_SMack>
      ESC_SMack (1);
 800c9ee:	2001      	movs	r0, #1
 800c9f0:	f7ff faf9 	bl	800bfe6 <ESC_SMack>
      ESC_SMack (2);
 800c9f4:	2002      	movs	r0, #2
 800c9f6:	f7ff faf6 	bl	800bfe6 <ESC_SMack>
      ESC_SMack (3);
 800c9fa:	2003      	movs	r0, #3
 800c9fc:	f7ff faf3 	bl	800bfe6 <ESC_SMack>
      ESC_SMack (4);
 800ca00:	2004      	movs	r0, #4
 800ca02:	f7ff faf0 	bl	800bfe6 <ESC_SMack>
      ESC_SMack (5);
 800ca06:	2005      	movs	r0, #5
 800ca08:	f7ff faed 	bl	800bfe6 <ESC_SMack>
      ESC_SMack (6);
 800ca0c:	2006      	movs	r0, #6
 800ca0e:	f7ff faea 	bl	800bfe6 <ESC_SMack>
      ESC_SMack (7);
 800ca12:	2007      	movs	r0, #7
 800ca14:	f7ff fae7 	bl	800bfe6 <ESC_SMack>
}
 800ca18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ax = ESC_checkmbx (as);
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	f7ff fb5e 	bl	800c0dc <ESC_checkmbx>
 800ca20:	4607      	mov	r7, r0
      ax23 = ESC_checkSM23 (as);
 800ca22:	4620      	mov	r0, r4
 800ca24:	f7ff fe56 	bl	800c6d4 <ESC_checkSM23>
 800ca28:	4604      	mov	r4, r0
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800ca2a:	f016 0f10 	tst.w	r6, #16
 800ca2e:	d002      	beq.n	800ca36 <ESC_sm_act_event+0x96>
 800ca30:	f015 0f10 	tst.w	r5, #16
 800ca34:	d0f0      	beq.n	800ca18 <ESC_sm_act_event+0x78>
      else if (ax == (ESCinit | ESCerror))
 800ca36:	2f11      	cmp	r7, #17
 800ca38:	d01a      	beq.n	800ca70 <ESC_sm_act_event+0xd0>
      else if (CC_ATOMIC_GET(ESCvar.App.state) && (ax23 == (ESCpreop | ESCerror)))
 800ca3a:	f3bf 8f5b 	dmb	ish
 800ca3e:	4b1c      	ldr	r3, [pc, #112]	; (800cab0 <ESC_sm_act_event+0x110>)
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	f3bf 8f5b 	dmb	ish
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d0e6      	beq.n	800ca18 <ESC_sm_act_event+0x78>
 800ca4a:	2c12      	cmp	r4, #18
 800ca4c:	d1e4      	bne.n	800ca18 <ESC_sm_act_event+0x78>
         ESC_stopoutput ();
 800ca4e:	f7ff ff53 	bl	800c8f8 <ESC_stopoutput>
         ESC_stopinput ();
 800ca52:	f7ff ff17 	bl	800c884 <ESC_stopinput>
         if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 800ca56:	4b15      	ldr	r3, [pc, #84]	; (800caac <ESC_sm_act_event+0x10c>)
 800ca58:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800ca5c:	f013 0f08 	tst.w	r3, #8
 800ca60:	d01f      	beq.n	800caa2 <ESC_sm_act_event+0x102>
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 800ca62:	201e      	movs	r0, #30
 800ca64:	f7ff fa6a 	bl	800bf3c <ESC_ALerror>
         ESC_ALstatus (ax23);
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f7ff fa9b 	bl	800bfa4 <ESC_ALstatus>
 800ca6e:	e7d3      	b.n	800ca18 <ESC_sm_act_event+0x78>
         if (CC_ATOMIC_GET(ESCvar.App.state))
 800ca70:	f3bf 8f5b 	dmb	ish
 800ca74:	4b0e      	ldr	r3, [pc, #56]	; (800cab0 <ESC_sm_act_event+0x110>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	f3bf 8f5b 	dmb	ish
 800ca7c:	b963      	cbnz	r3, 800ca98 <ESC_sm_act_event+0xf8>
         ESC_stopmbx ();
 800ca7e:	f7ff fbf5 	bl	800c26c <ESC_stopmbx>
         ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 800ca82:	2016      	movs	r0, #22
 800ca84:	f7ff fa5a 	bl	800bf3c <ESC_ALerror>
         ESCvar.MBXrun = 0;
 800ca88:	4b08      	ldr	r3, [pc, #32]	; (800caac <ESC_sm_act_event+0x10c>)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
         ESC_ALstatus (ax);
 800ca90:	4638      	mov	r0, r7
 800ca92:	f7ff fa87 	bl	800bfa4 <ESC_ALstatus>
         return;
 800ca96:	e7bf      	b.n	800ca18 <ESC_sm_act_event+0x78>
            ESC_stopoutput ();
 800ca98:	f7ff ff2e 	bl	800c8f8 <ESC_stopoutput>
            ESC_stopinput ();
 800ca9c:	f7ff fef2 	bl	800c884 <ESC_stopinput>
 800caa0:	e7ed      	b.n	800ca7e <ESC_sm_act_event+0xde>
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800caa2:	201d      	movs	r0, #29
 800caa4:	f7ff fa4a 	bl	800bf3c <ESC_ALerror>
 800caa8:	e7de      	b.n	800ca68 <ESC_sm_act_event+0xc8>
 800caaa:	bf00      	nop
 800caac:	2000814c 	.word	0x2000814c
 800cab0:	20008235 	.word	0x20008235

0800cab4 <ESC_state>:
void ESC_state (void)
{
   uint8_t ac, an, as;

   /* Do we have a state change request pending */
   if (ESCvar.ALevent & ESCREG_ALEVENT_CONTROL)
 800cab4:	4ba5      	ldr	r3, [pc, #660]	; (800cd4c <ESC_state+0x298>)
 800cab6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800caba:	f013 0f01 	tst.w	r3, #1
 800cabe:	d100      	bne.n	800cac2 <ESC_state+0xe>
 800cac0:	4770      	bx	lr
{
 800cac2:	b530      	push	{r4, r5, lr}
 800cac4:	b083      	sub	sp, #12
   {
      ESC_read (ESCREG_ALCONTROL, (void *) &ESCvar.ALcontrol,
 800cac6:	4ca2      	ldr	r4, [pc, #648]	; (800cd50 <ESC_state+0x29c>)
 800cac8:	2202      	movs	r2, #2
 800caca:	4621      	mov	r1, r4
 800cacc:	f44f 7090 	mov.w	r0, #288	; 0x120
 800cad0:	f001 ffea 	bl	800eaa8 <ESC_read>
                sizeof (ESCvar.ALcontrol));
      ESCvar.ALcontrol = etohs (ESCvar.ALcontrol);
 800cad4:	4621      	mov	r1, r4
   {
      /* nothing to do */
      return;
   }
   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 800cad6:	f811 2982 	ldrb.w	r2, [r1], #-130
 800cada:	f002 041f 	and.w	r4, r2, #31
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 800cade:	f8b1 3080 	ldrh.w	r3, [r1, #128]	; 0x80
 800cae2:	f003 031f 	and.w	r3, r3, #31
 800cae6:	f88d 3006 	strb.w	r3, [sp, #6]
   an = as;
 800caea:	f88d 3007 	strb.w	r3, [sp, #7]
   if (((ac & ESCerror) || (ac == ESCinit)))
 800caee:	f012 0f10 	tst.w	r2, #16
 800caf2:	d101      	bne.n	800caf8 <ESC_state+0x44>
 800caf4:	2c01      	cmp	r4, #1
 800caf6:	d105      	bne.n	800cb04 <ESC_state+0x50>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 800caf8:	f002 040f 	and.w	r4, r2, #15
      an &= ESCREG_AL_ERRACKMASK;
 800cafc:	f003 020f 	and.w	r2, r3, #15
 800cb00:	f88d 2007 	strb.w	r2, [sp, #7]
   }

   /* Error state not acked, leave original */
   if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800cb04:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cb08:	f012 0f10 	tst.w	r2, #16
 800cb0c:	d003      	beq.n	800cb16 <ESC_state+0x62>
 800cb0e:	f014 0f10 	tst.w	r4, #16
 800cb12:	f000 80b6 	beq.w	800cc82 <ESC_state+0x1ce>
   {
      return;
   }

   /* Mask high bits ALcommand, low bits ALstatus */
   as = (uint8_t)((ac << 4) | (as & 0x0f));
 800cb16:	f003 030f 	and.w	r3, r3, #15
 800cb1a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800cb1e:	f88d 3006 	strb.w	r3, [sp, #6]

   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 800cb22:	4b8a      	ldr	r3, [pc, #552]	; (800cd4c <ESC_state+0x298>)
 800cb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb26:	b123      	cbz	r3, 800cb32 <ESC_state+0x7e>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 800cb28:	f10d 0107 	add.w	r1, sp, #7
 800cb2c:	f10d 0006 	add.w	r0, sp, #6
 800cb30:	4798      	blx	r3
   }

   /* Switch through the state change requested via AlControl from
    * current state read in AL status
    */
   switch (as)
 800cb32:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cb36:	3b11      	subs	r3, #17
 800cb38:	2b77      	cmp	r3, #119	; 0x77
 800cb3a:	f200 815a 	bhi.w	800cdf2 <ESC_state+0x33e>
 800cb3e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cb42:	007f      	.short	0x007f
 800cb44:	00c800c2 	.word	0x00c800c2
 800cb48:	015800ba 	.word	0x015800ba
 800cb4c:	01580158 	.word	0x01580158
 800cb50:	015800b0 	.word	0x015800b0
 800cb54:	01580158 	.word	0x01580158
 800cb58:	01580158 	.word	0x01580158
 800cb5c:	01580158 	.word	0x01580158
 800cb60:	00780158 	.word	0x00780158
 800cb64:	00ce007f 	.word	0x00ce007f
 800cb68:	01580127 	.word	0x01580127
 800cb6c:	01580158 	.word	0x01580158
 800cb70:	0158011f 	.word	0x0158011f
 800cb74:	01580158 	.word	0x01580158
 800cb78:	01580158 	.word	0x01580158
 800cb7c:	01580158 	.word	0x01580158
 800cb80:	00a20158 	.word	0x00a20158
 800cb84:	00a200ce 	.word	0x00a200ce
 800cb88:	0158012d 	.word	0x0158012d
 800cb8c:	01580158 	.word	0x01580158
 800cb90:	0158013a 	.word	0x0158013a
 800cb94:	01580158 	.word	0x01580158
 800cb98:	01580158 	.word	0x01580158
 800cb9c:	01580158 	.word	0x01580158
 800cba0:	00aa0158 	.word	0x00aa0158
 800cba4:	00ce00d5 	.word	0x00ce00d5
 800cba8:	015800d5 	.word	0x015800d5
 800cbac:	01580158 	.word	0x01580158
 800cbb0:	01580152 	.word	0x01580152
 800cbb4:	01580158 	.word	0x01580158
 800cbb8:	01580158 	.word	0x01580158
 800cbbc:	01580158 	.word	0x01580158
 800cbc0:	01580158 	.word	0x01580158
 800cbc4:	01580158 	.word	0x01580158
 800cbc8:	01580158 	.word	0x01580158
 800cbcc:	01580158 	.word	0x01580158
 800cbd0:	01580158 	.word	0x01580158
 800cbd4:	01580158 	.word	0x01580158
 800cbd8:	01580158 	.word	0x01580158
 800cbdc:	01580158 	.word	0x01580158
 800cbe0:	01580158 	.word	0x01580158
 800cbe4:	01580158 	.word	0x01580158
 800cbe8:	01580158 	.word	0x01580158
 800cbec:	01580158 	.word	0x01580158
 800cbf0:	01580158 	.word	0x01580158
 800cbf4:	01580158 	.word	0x01580158
 800cbf8:	01580158 	.word	0x01580158
 800cbfc:	01580158 	.word	0x01580158
 800cc00:	01580158 	.word	0x01580158
 800cc04:	01580158 	.word	0x01580158
 800cc08:	01580158 	.word	0x01580158
 800cc0c:	01580158 	.word	0x01580158
 800cc10:	01580158 	.word	0x01580158
 800cc14:	01580158 	.word	0x01580158
 800cc18:	01580158 	.word	0x01580158
 800cc1c:	01580158 	.word	0x01580158
 800cc20:	00aa0158 	.word	0x00aa0158
 800cc24:	00ce0118 	.word	0x00ce0118
 800cc28:	01580134 	.word	0x01580134
 800cc2c:	01580158 	.word	0x01580158
 800cc30:	007f      	.short	0x007f
         break;
      }
      case INIT_TO_PREOP:
      {
         /* get station address */
         ESC_address ();
 800cc32:	f7ff fa25 	bl	800c080 <ESC_address>
         an = ESC_startmbx (ac);
 800cc36:	4620      	mov	r0, r4
 800cc38:	f7ff faae 	bl	800c198 <ESC_startmbx>
 800cc3c:	f88d 0007 	strb.w	r0, [sp, #7]
         break;
      }
   }

   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 800cc40:	4b42      	ldr	r3, [pc, #264]	; (800cd4c <ESC_state+0x298>)
 800cc42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc44:	b123      	cbz	r3, 800cc50 <ESC_state+0x19c>
   {
      ESCvar.post_state_change_hook (&as, &an);
 800cc46:	f10d 0107 	add.w	r1, sp, #7
 800cc4a:	f10d 0006 	add.w	r0, sp, #6
 800cc4e:	4798      	blx	r3
   }

   if (!(an & ESCerror) && (ESCvar.ALerror))
 800cc50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cc54:	f013 0f10 	tst.w	r3, #16
 800cc58:	d105      	bne.n	800cc66 <ESC_state+0x1b2>
 800cc5a:	4b3c      	ldr	r3, [pc, #240]	; (800cd4c <ESC_state+0x298>)
 800cc5c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	f040 80ed 	bne.w	800ce40 <ESC_state+0x38c>
   {
      /* clear error */
      ESC_ALerror (ALERR_NONE);
   }

   if (ESC_check_id_request (ESCvar.ALcontrol, &an))
 800cc66:	f10d 0107 	add.w	r1, sp, #7
 800cc6a:	4b38      	ldr	r3, [pc, #224]	; (800cd4c <ESC_state+0x298>)
 800cc6c:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800cc70:	f7ff f93c 	bl	800beec <ESC_check_id_request>
 800cc74:	2800      	cmp	r0, #0
 800cc76:	f040 80e7 	bne.w	800ce48 <ESC_state+0x394>
   {
      an |= ESC_load_device_id ();
   }

   ESC_ALstatus (an);
 800cc7a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800cc7e:	f7ff f991 	bl	800bfa4 <ESC_ALstatus>

#ifdef ESC_DEBUG
   DPRINT ("state %s\n", ESC_state_to_string (an & 0xF));
#endif
}
 800cc82:	b003      	add	sp, #12
 800cc84:	bd30      	pop	{r4, r5, pc}
         ESC_address ();
 800cc86:	f7ff f9fb 	bl	800c080 <ESC_address>
         an = ESC_startmbxboot (ac);
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	f7ff fab8 	bl	800c200 <ESC_startmbxboot>
 800cc90:	f88d 0007 	strb.w	r0, [sp, #7]
         break;
 800cc94:	e7d4      	b.n	800cc40 <ESC_state+0x18c>
         an = ESCinit | ESCerror;
 800cc96:	2011      	movs	r0, #17
 800cc98:	f88d 0007 	strb.w	r0, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800cc9c:	f7ff f94e 	bl	800bf3c <ESC_ALerror>
         break;
 800cca0:	e7ce      	b.n	800cc40 <ESC_state+0x18c>
         ESC_stopoutput ();
 800cca2:	f7ff fe29 	bl	800c8f8 <ESC_stopoutput>
         ESC_stopinput ();
 800cca6:	f7ff fded 	bl	800c884 <ESC_stopinput>
         ESC_stopmbx ();
 800ccaa:	f7ff fadf 	bl	800c26c <ESC_stopmbx>
         an = ESCinit;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800ccb4:	e7c4      	b.n	800cc40 <ESC_state+0x18c>
         ESC_stopinput ();
 800ccb6:	f7ff fde5 	bl	800c884 <ESC_stopinput>
         ESC_stopmbx ();
 800ccba:	f7ff fad7 	bl	800c26c <ESC_stopmbx>
         an = ESCinit;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800ccc4:	e7bc      	b.n	800cc40 <ESC_state+0x18c>
         ESC_stopmbx ();
 800ccc6:	f7ff fad1 	bl	800c26c <ESC_stopmbx>
         an = ESCinit;
 800ccca:	2301      	movs	r3, #1
 800cccc:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800ccd0:	e7b6      	b.n	800cc40 <ESC_state+0x18c>
         ESC_stopmbx ();
 800ccd2:	f7ff facb 	bl	800c26c <ESC_stopmbx>
         an = ESCinit;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800ccdc:	e7b0      	b.n	800cc40 <ESC_state+0x18c>
         an = ESCpreop | ESCerror;
 800ccde:	2312      	movs	r3, #18
 800cce0:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800cce4:	2011      	movs	r0, #17
 800cce6:	f7ff f929 	bl	800bf3c <ESC_ALerror>
         break;
 800ccea:	e7a9      	b.n	800cc40 <ESC_state+0x18c>
         ESCvar.ESC_SM2_sml = sizeOfPDO (RX_PDO_OBJIDX, &ESCvar.sm2mappings,
 800ccec:	4d19      	ldr	r5, [pc, #100]	; (800cd54 <ESC_state+0x2a0>)
 800ccee:	2330      	movs	r3, #48	; 0x30
 800ccf0:	4a19      	ldr	r2, [pc, #100]	; (800cd58 <ESC_state+0x2a4>)
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	f641 4012 	movw	r0, #7186	; 0x1c12
 800ccf8:	f001 fb34 	bl	800e364 <sizeOfPDO>
 800ccfc:	f825 0c34 	strh.w	r0, [r5, #-52]
 800cd00:	3dac      	subs	r5, #172	; 0xac
         if (ESCvar.sm2mappings < 0)
 800cd02:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	db19      	blt.n	800cd3e <ESC_state+0x28a>
         ESCvar.ESC_SM3_sml = sizeOfPDO (TX_PDO_OBJIDX, &ESCvar.sm3mappings,
 800cd0a:	4d14      	ldr	r5, [pc, #80]	; (800cd5c <ESC_state+0x2a8>)
 800cd0c:	2350      	movs	r3, #80	; 0x50
 800cd0e:	4a14      	ldr	r2, [pc, #80]	; (800cd60 <ESC_state+0x2ac>)
 800cd10:	4629      	mov	r1, r5
 800cd12:	f641 4013 	movw	r0, #7187	; 0x1c13
 800cd16:	f001 fb25 	bl	800e364 <sizeOfPDO>
 800cd1a:	f825 0c36 	strh.w	r0, [r5, #-54]
 800cd1e:	3db0      	subs	r5, #176	; 0xb0
         if (ESCvar.sm3mappings < 0)
 800cd20:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	db1d      	blt.n	800cd64 <ESC_state+0x2b0>
         an = ESC_startinput (ac);
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f7ff fd4d 	bl	800c7c8 <ESC_startinput>
 800cd2e:	f88d 0007 	strb.w	r0, [sp, #7]
         if (an == ac)
 800cd32:	42a0      	cmp	r0, r4
 800cd34:	d184      	bne.n	800cc40 <ESC_state+0x18c>
            ESC_SMenable (2);
 800cd36:	2002      	movs	r0, #2
 800cd38:	f7ff f982 	bl	800c040 <ESC_SMenable>
 800cd3c:	e780      	b.n	800cc40 <ESC_state+0x18c>
            an = ESCpreop | ESCerror;
 800cd3e:	2312      	movs	r3, #18
 800cd40:	f88d 3007 	strb.w	r3, [sp, #7]
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800cd44:	201d      	movs	r0, #29
 800cd46:	f7ff f8f9 	bl	800bf3c <ESC_ALerror>
            break;
 800cd4a:	e779      	b.n	800cc40 <ESC_state+0x18c>
 800cd4c:	2000814c 	.word	0x2000814c
 800cd50:	200081ce 	.word	0x200081ce
 800cd54:	200081f8 	.word	0x200081f8
 800cd58:	20008e3c 	.word	0x20008e3c
 800cd5c:	200081fc 	.word	0x200081fc
 800cd60:	2000907c 	.word	0x2000907c
            an = ESCpreop | ESCerror;
 800cd64:	2312      	movs	r3, #18
 800cd66:	f88d 3007 	strb.w	r3, [sp, #7]
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 800cd6a:	201e      	movs	r0, #30
 800cd6c:	f7ff f8e6 	bl	800bf3c <ESC_ALerror>
            break;
 800cd70:	e766      	b.n	800cc40 <ESC_state+0x18c>
         an = ESCpreop | ESCerror;
 800cd72:	2312      	movs	r3, #18
 800cd74:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800cd78:	2011      	movs	r0, #17
 800cd7a:	f7ff f8df 	bl	800bf3c <ESC_ALerror>
         break;
 800cd7e:	e75f      	b.n	800cc40 <ESC_state+0x18c>
         ESC_stopoutput ();
 800cd80:	f7ff fdba 	bl	800c8f8 <ESC_stopoutput>
         ESC_stopinput ();
 800cd84:	f7ff fd7e 	bl	800c884 <ESC_stopinput>
         an = ESCpreop;
 800cd88:	2302      	movs	r3, #2
 800cd8a:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800cd8e:	e757      	b.n	800cc40 <ESC_state+0x18c>
         ESC_stopinput ();
 800cd90:	f7ff fd78 	bl	800c884 <ESC_stopinput>
         an = ESCpreop;
 800cd94:	2302      	movs	r3, #2
 800cd96:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800cd9a:	e751      	b.n	800cc40 <ESC_state+0x18c>
         an = ESCsafeop | ESCerror;
 800cd9c:	2314      	movs	r3, #20
 800cd9e:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800cda2:	2011      	movs	r0, #17
 800cda4:	f7ff f8ca 	bl	800bf3c <ESC_ALerror>
         break;
 800cda8:	e74a      	b.n	800cc40 <ESC_state+0x18c>
         an = ESC_startoutput (ac);
 800cdaa:	4620      	mov	r0, r4
 800cdac:	f7ff fd86 	bl	800c8bc <ESC_startoutput>
 800cdb0:	f88d 0007 	strb.w	r0, [sp, #7]
         break;
 800cdb4:	e744      	b.n	800cc40 <ESC_state+0x18c>
         an = ESCsafeop | ESCerror;
 800cdb6:	2314      	movs	r3, #20
 800cdb8:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800cdbc:	2011      	movs	r0, #17
 800cdbe:	f7ff f8bd 	bl	800bf3c <ESC_ALerror>
         ESC_stopoutput ();
 800cdc2:	f7ff fd99 	bl	800c8f8 <ESC_stopoutput>
         if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 800cdc6:	4b24      	ldr	r3, [pc, #144]	; (800ce58 <ESC_state+0x3a4>)
 800cdc8:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f47f af37 	bne.w	800cc40 <ESC_state+0x18c>
 800cdd2:	4b21      	ldr	r3, [pc, #132]	; (800ce58 <ESC_state+0x3a4>)
 800cdd4:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f43f af31 	beq.w	800cc40 <ESC_state+0x18c>
            ESC_SMdisable (3);
 800cdde:	2003      	movs	r0, #3
 800cde0:	f7ff f93e 	bl	800c060 <ESC_SMdisable>
 800cde4:	e72c      	b.n	800cc40 <ESC_state+0x18c>
         an = ESCsafeop;
 800cde6:	2304      	movs	r3, #4
 800cde8:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_stopoutput ();
 800cdec:	f7ff fd84 	bl	800c8f8 <ESC_stopoutput>
         break;
 800cdf0:	e726      	b.n	800cc40 <ESC_state+0x18c>
         if (an == ESCop)
 800cdf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cdf6:	2b08      	cmp	r3, #8
 800cdf8:	d00d      	beq.n	800ce16 <ESC_state+0x362>
         if (as == ESCsafeop)
 800cdfa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cdfe:	2b04      	cmp	r3, #4
 800ce00:	d01b      	beq.n	800ce3a <ESC_state+0x386>
         an |= ESCerror;
 800ce02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ce06:	f043 0310 	orr.w	r3, r3, #16
 800ce0a:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_UNKNOWNSTATE);
 800ce0e:	2012      	movs	r0, #18
 800ce10:	f7ff f894 	bl	800bf3c <ESC_ALerror>
         break;
 800ce14:	e714      	b.n	800cc40 <ESC_state+0x18c>
            ESC_stopoutput ();
 800ce16:	f7ff fd6f 	bl	800c8f8 <ESC_stopoutput>
            if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 800ce1a:	4b0f      	ldr	r3, [pc, #60]	; (800ce58 <ESC_state+0x3a4>)
 800ce1c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800ce20:	b91b      	cbnz	r3, 800ce2a <ESC_state+0x376>
 800ce22:	4b0d      	ldr	r3, [pc, #52]	; (800ce58 <ESC_state+0x3a4>)
 800ce24:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800ce28:	b91b      	cbnz	r3, 800ce32 <ESC_state+0x37e>
            an = ESCsafeop;
 800ce2a:	2304      	movs	r3, #4
 800ce2c:	f88d 3007 	strb.w	r3, [sp, #7]
 800ce30:	e7e3      	b.n	800cdfa <ESC_state+0x346>
               ESC_SMdisable (3);
 800ce32:	2003      	movs	r0, #3
 800ce34:	f7ff f914 	bl	800c060 <ESC_SMdisable>
 800ce38:	e7f7      	b.n	800ce2a <ESC_state+0x376>
            ESC_stopinput ();
 800ce3a:	f7ff fd23 	bl	800c884 <ESC_stopinput>
 800ce3e:	e7e0      	b.n	800ce02 <ESC_state+0x34e>
      ESC_ALerror (ALERR_NONE);
 800ce40:	2000      	movs	r0, #0
 800ce42:	f7ff f87b 	bl	800bf3c <ESC_ALerror>
 800ce46:	e70e      	b.n	800cc66 <ESC_state+0x1b2>
      an |= ESC_load_device_id ();
 800ce48:	f7ff f88c 	bl	800bf64 <ESC_load_device_id>
 800ce4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ce50:	4318      	orrs	r0, r3
 800ce52:	f88d 0007 	strb.w	r0, [sp, #7]
 800ce56:	e710      	b.n	800cc7a <ESC_state+0x1c6>
 800ce58:	2000814c 	.word	0x2000814c

0800ce5c <ESC_config>:
 *
 * @param[in] cfg   = Pointer to the Application configuration variable
 * holding application specific details. Data is copied.
 */
void ESC_config (esc_cfg_t * cfg)
{
 800ce5c:	4602      	mov	r2, r0
   static sm_cfg_t mb1 = {MBX1_sma, MBX1_sml, MBX1_sme, MBX1_smc, 0};
   static sm_cfg_t mbboot0 = {MBX0_sma_b, MBX0_sml_b, MBX0_sme_b, MBX0_smc_b, 0};
   static sm_cfg_t mbboot1 = {MBX1_sma_b, MBX1_sml_b, MBX1_sme_b, MBX1_smc_b, 0};

   /* Configure stack */
   ESCvar.use_interrupt = cfg->use_interrupt;
 800ce5e:	6841      	ldr	r1, [r0, #4]
 800ce60:	4b20      	ldr	r3, [pc, #128]	; (800cee4 <ESC_config+0x88>)
 800ce62:	6019      	str	r1, [r3, #0]
   ESCvar.watchdogcnt = cfg->watchdog_cnt;
 800ce64:	6881      	ldr	r1, [r0, #8]
 800ce66:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc

   ESCvar.mb[0] = mb0;
 800ce6a:	491f      	ldr	r1, [pc, #124]	; (800cee8 <ESC_config+0x8c>)
 800ce6c:	f103 0c04 	add.w	ip, r3, #4
 800ce70:	c903      	ldmia	r1, {r0, r1}
 800ce72:	e88c 0003 	stmia.w	ip, {r0, r1}
   ESCvar.mb[1] = mb1;
 800ce76:	491d      	ldr	r1, [pc, #116]	; (800ceec <ESC_config+0x90>)
 800ce78:	f103 0c0c 	add.w	ip, r3, #12
 800ce7c:	c903      	ldmia	r1, {r0, r1}
 800ce7e:	e88c 0003 	stmia.w	ip, {r0, r1}
   ESCvar.mbboot[0] = mbboot0;
 800ce82:	491b      	ldr	r1, [pc, #108]	; (800cef0 <ESC_config+0x94>)
 800ce84:	f103 0c14 	add.w	ip, r3, #20
 800ce88:	c903      	ldmia	r1, {r0, r1}
 800ce8a:	e88c 0003 	stmia.w	ip, {r0, r1}
   ESCvar.mbboot[1] = mbboot1;
 800ce8e:	4919      	ldr	r1, [pc, #100]	; (800cef4 <ESC_config+0x98>)
 800ce90:	f103 0c1c 	add.w	ip, r3, #28
 800ce94:	c903      	ldmia	r1, {r0, r1}
 800ce96:	e88c 0003 	stmia.w	ip, {r0, r1}

   ESCvar.skip_default_initialization = cfg->skip_default_initialization;
 800ce9a:	7b11      	ldrb	r1, [r2, #12]
 800ce9c:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
   ESCvar.set_defaults_hook = cfg->set_defaults_hook;
 800cea0:	6911      	ldr	r1, [r2, #16]
 800cea2:	6299      	str	r1, [r3, #40]	; 0x28
   ESCvar.pre_state_change_hook = cfg->pre_state_change_hook;
 800cea4:	6951      	ldr	r1, [r2, #20]
 800cea6:	62d9      	str	r1, [r3, #44]	; 0x2c
   ESCvar.post_state_change_hook = cfg->post_state_change_hook;
 800cea8:	6991      	ldr	r1, [r2, #24]
 800ceaa:	6319      	str	r1, [r3, #48]	; 0x30
   ESCvar.application_hook = cfg->application_hook;
 800ceac:	69d1      	ldr	r1, [r2, #28]
 800ceae:	6359      	str	r1, [r3, #52]	; 0x34
   ESCvar.safeoutput_override = cfg->safeoutput_override;
 800ceb0:	6a11      	ldr	r1, [r2, #32]
 800ceb2:	6399      	str	r1, [r3, #56]	; 0x38
   ESCvar.pre_object_download_hook = cfg->pre_object_download_hook;
 800ceb4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800ceb6:	63d9      	str	r1, [r3, #60]	; 0x3c
   ESCvar.post_object_download_hook = cfg->post_object_download_hook;
 800ceb8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ceba:	6419      	str	r1, [r3, #64]	; 0x40
   ESCvar.pre_object_upload_hook = cfg->pre_object_upload_hook;
 800cebc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800cebe:	6459      	str	r1, [r3, #68]	; 0x44
   ESCvar.post_object_upload_hook = cfg->post_object_upload_hook;
 800cec0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800cec2:	6499      	str	r1, [r3, #72]	; 0x48
   ESCvar.rxpdo_override = cfg->rxpdo_override;
 800cec4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800cec6:	64d9      	str	r1, [r3, #76]	; 0x4c
   ESCvar.txpdo_override = cfg->txpdo_override;
 800cec8:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800ceca:	6519      	str	r1, [r3, #80]	; 0x50
   ESCvar.esc_hw_interrupt_enable = cfg->esc_hw_interrupt_enable;
 800cecc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800cece:	6559      	str	r1, [r3, #84]	; 0x54
   ESCvar.esc_hw_interrupt_disable = cfg->esc_hw_interrupt_disable;
 800ced0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ced2:	6599      	str	r1, [r3, #88]	; 0x58
   ESCvar.esc_hw_eep_handler = cfg->esc_hw_eep_handler;
 800ced4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800ced6:	65d9      	str	r1, [r3, #92]	; 0x5c
   ESCvar.esc_check_dc_handler = cfg->esc_check_dc_handler;
 800ced8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800ceda:	6619      	str	r1, [r3, #96]	; 0x60
   ESCvar.get_device_id = cfg->get_device_id;
 800cedc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800cede:	665a      	str	r2, [r3, #100]	; 0x64
}
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	2000814c 	.word	0x2000814c
 800cee8:	0801361c 	.word	0x0801361c
 800ceec:	08013624 	.word	0x08013624
 800cef0:	0801362c 	.word	0x0801362c
 800cef4:	08013634 	.word	0x08013634

0800cef8 <init_coesdo>:
static void init_coesdo(_COEsdo *coesdo,
                        uint8_t sdoservice,
                        uint8_t command,
                        uint16_t index,
                        uint8_t subindex)
{
 800cef8:	b500      	push	{lr}
   coesdo->mbxheader.length = htoes(COE_DEFAULTLENGTH);
 800cefa:	f04f 0c0a 	mov.w	ip, #10
 800cefe:	f8a0 c000 	strh.w	ip, [r0]
   coesdo->mbxheader.mbxtype = MBXCOE;
 800cf02:	f890 c005 	ldrb.w	ip, [r0, #5]
 800cf06:	f04f 0e03 	mov.w	lr, #3
 800cf0a:	f36e 0c03 	bfi	ip, lr, #0, #4
 800cf0e:	f880 c005 	strb.w	ip, [r0, #5]
   coesdo->coeheader.numberservice = htoes(sdoservice << 12);
 800cf12:	0309      	lsls	r1, r1, #12
 800cf14:	80c1      	strh	r1, [r0, #6]
   coesdo->command = command;
 800cf16:	7202      	strb	r2, [r0, #8]
   coesdo->index = htoes(index);
 800cf18:	f8a0 3009 	strh.w	r3, [r0, #9]
   coesdo->subindex = subindex;
 800cf1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cf20:	72c3      	strb	r3, [r0, #11]
}
 800cf22:	f85d fb04 	ldr.w	pc, [sp], #4

0800cf26 <COE_bitsliceGet>:
 * @param[in] offset = start offset
 * @param[in] length = number of bits to get
 * @return bitslice value
 */
static uint64_t COE_bitsliceGet (uint64_t * bitmap, unsigned int offset, unsigned int length)
{
 800cf26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   const unsigned int word_offset = offset / 64;
 800cf2a:	098d      	lsrs	r5, r1, #6
   const unsigned int bit_offset = offset % 64;
 800cf2c:	f001 033f 	and.w	r3, r1, #63	; 0x3f
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800cf30:	2a40      	cmp	r2, #64	; 0x40
 800cf32:	d043      	beq.n	800cfbc <COE_bitsliceGet+0x96>
 800cf34:	f04f 0e01 	mov.w	lr, #1
 800cf38:	f1a2 0120 	sub.w	r1, r2, #32
 800cf3c:	f1c2 0420 	rsb	r4, r2, #32
 800cf40:	fa0e f101 	lsl.w	r1, lr, r1
 800cf44:	fa2e f404 	lsr.w	r4, lr, r4
 800cf48:	4321      	orrs	r1, r4
 800cf4a:	fa0e fe02 	lsl.w	lr, lr, r2
 800cf4e:	f11e 3eff 	adds.w	lr, lr, #4294967295	; 0xffffffff
 800cf52:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
   uint64_t w0;
   uint64_t w1 = 0;

   /* Get the least significant word */
   w0 = bitmap[word_offset];
 800cf56:	eb00 04c5 	add.w	r4, r0, r5, lsl #3
 800cf5a:	6864      	ldr	r4, [r4, #4]
   w0 = w0 >> bit_offset;
 800cf5c:	f1c3 0720 	rsb	r7, r3, #32
 800cf60:	f1a3 0620 	sub.w	r6, r3, #32
 800cf64:	f850 1035 	ldr.w	r1, [r0, r5, lsl #3]
 800cf68:	fa21 fc03 	lsr.w	ip, r1, r3
 800cf6c:	fa04 f707 	lsl.w	r7, r4, r7
 800cf70:	ea4c 0c07 	orr.w	ip, ip, r7
 800cf74:	fa24 f606 	lsr.w	r6, r4, r6
 800cf78:	ea4c 0c06 	orr.w	ip, ip, r6
 800cf7c:	40dc      	lsrs	r4, r3

   /* Get the most significant word, if required */
   if (length + bit_offset > 64)
 800cf7e:	441a      	add	r2, r3
 800cf80:	2a40      	cmp	r2, #64	; 0x40
 800cf82:	d91f      	bls.n	800cfc4 <COE_bitsliceGet+0x9e>
   {
      w1 = bitmap[word_offset + 1];
 800cf84:	3501      	adds	r5, #1
 800cf86:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 800cf8a:	f850 0035 	ldr.w	r0, [r0, r5, lsl #3]
 800cf8e:	6852      	ldr	r2, [r2, #4]
      w1 = w1 << (64 - bit_offset);
 800cf90:	f1c3 0640 	rsb	r6, r3, #64	; 0x40
 800cf94:	f1c3 0520 	rsb	r5, r3, #32
 800cf98:	3b20      	subs	r3, #32
 800cf9a:	40b2      	lsls	r2, r6
 800cf9c:	fa00 f505 	lsl.w	r5, r0, r5
 800cfa0:	432a      	orrs	r2, r5
 800cfa2:	fa20 f303 	lsr.w	r3, r0, r3
 800cfa6:	431a      	orrs	r2, r3
 800cfa8:	40b0      	lsls	r0, r6
   }

   w0 = (w1 | w0);
 800cfaa:	ea40 000c 	orr.w	r0, r0, ip
 800cfae:	4322      	orrs	r2, r4
   return (w0 & mask);
}
 800cfb0:	ea0e 0000 	and.w	r0, lr, r0
 800cfb4:	ea08 0102 	and.w	r1, r8, r2
 800cfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800cfbc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800cfc0:	46f0      	mov	r8, lr
 800cfc2:	e7c8      	b.n	800cf56 <COE_bitsliceGet+0x30>
   uint64_t w1 = 0;
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	e7ef      	b.n	800cfaa <COE_bitsliceGet+0x84>

0800cfca <COE_bitsliceSet>:
 * @param[in] length = number of bits to set
 * @param[in] value  = value to set
 */
static void COE_bitsliceSet (uint64_t * bitmap, unsigned int offset, unsigned int length,
                             uint64_t value)
{
 800cfca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cfd2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   const unsigned int word_offset = offset / 64;
 800cfd4:	098e      	lsrs	r6, r1, #6
   const unsigned int bit_offset = offset % 64;
 800cfd6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800cfda:	2a40      	cmp	r2, #64	; 0x40
 800cfdc:	d079      	beq.n	800d0d2 <COE_bitsliceSet+0x108>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	f1a2 0e20 	sub.w	lr, r2, #32
 800cfe4:	f1c2 0520 	rsb	r5, r2, #32
 800cfe8:	fa03 fe0e 	lsl.w	lr, r3, lr
 800cfec:	fa23 f505 	lsr.w	r5, r3, r5
 800cff0:	ea4e 0e05 	orr.w	lr, lr, r5
 800cff4:	4093      	lsls	r3, r2
 800cff6:	3b01      	subs	r3, #1
 800cff8:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
   const uint64_t mask0 = mask << bit_offset;
 800cffc:	f1a1 0c20 	sub.w	ip, r1, #32
 800d000:	f1c1 0520 	rsb	r5, r1, #32
 800d004:	fa0e f801 	lsl.w	r8, lr, r1
 800d008:	fa03 fc0c 	lsl.w	ip, r3, ip
 800d00c:	ea48 080c 	orr.w	r8, r8, ip
 800d010:	fa23 f505 	lsr.w	r5, r3, r5
 800d014:	ea48 0805 	orr.w	r8, r8, r5
 800d018:	fa03 f501 	lsl.w	r5, r3, r1
 800d01c:	9501      	str	r5, [sp, #4]
   uint64_t v0 = value << bit_offset;
 800d01e:	f1a1 0a20 	sub.w	sl, r1, #32
 800d022:	f1c1 0920 	rsb	r9, r1, #32
 800d026:	fa07 fc01 	lsl.w	ip, r7, r1
 800d02a:	fa04 fa0a 	lsl.w	sl, r4, sl
 800d02e:	ea4c 0c0a 	orr.w	ip, ip, sl
 800d032:	fa24 f909 	lsr.w	r9, r4, r9
 800d036:	ea4c 0c09 	orr.w	ip, ip, r9
 800d03a:	fa04 f901 	lsl.w	r9, r4, r1
   uint64_t w0 = bitmap[word_offset];
 800d03e:	eb00 0ac6 	add.w	sl, r0, r6, lsl #3
 800d042:	f850 b036 	ldr.w	fp, [r0, r6, lsl #3]

   /* Set the least significant word */
   w0 = (w0 & ~mask0) | (v0 & mask0);
 800d046:	ea89 090b 	eor.w	r9, r9, fp
 800d04a:	f8da 5004 	ldr.w	r5, [sl, #4]
 800d04e:	ea8c 0c05 	eor.w	ip, ip, r5
 800d052:	9d01      	ldr	r5, [sp, #4]
 800d054:	ea09 0505 	and.w	r5, r9, r5
 800d058:	ea0c 0c08 	and.w	ip, ip, r8
 800d05c:	ea85 0b0b 	eor.w	fp, r5, fp
 800d060:	f8da 5004 	ldr.w	r5, [sl, #4]
 800d064:	ea8c 0505 	eor.w	r5, ip, r5
   bitmap[word_offset] = w0;
 800d068:	f840 b036 	str.w	fp, [r0, r6, lsl #3]
 800d06c:	f8ca 5004 	str.w	r5, [sl, #4]

   /* Set the most significant word, if required */
   if (length + bit_offset > 64)
 800d070:	440a      	add	r2, r1
 800d072:	2a40      	cmp	r2, #64	; 0x40
 800d074:	d92a      	bls.n	800d0cc <COE_bitsliceSet+0x102>
   {
      const uint64_t mask1 = mask >> (64 - bit_offset);
 800d076:	f1c1 0240 	rsb	r2, r1, #64	; 0x40
 800d07a:	f1a1 0520 	sub.w	r5, r1, #32
 800d07e:	f1c1 0120 	rsb	r1, r1, #32
 800d082:	40d3      	lsrs	r3, r2
 800d084:	fa0e f505 	lsl.w	r5, lr, r5
 800d088:	432b      	orrs	r3, r5
 800d08a:	fa2e f101 	lsr.w	r1, lr, r1
 800d08e:	430b      	orrs	r3, r1
 800d090:	fa2e fe02 	lsr.w	lr, lr, r2
      uint64_t v1 = value >> (64 - bit_offset);
 800d094:	f1c2 0520 	rsb	r5, r2, #32
 800d098:	f1a2 0120 	sub.w	r1, r2, #32
 800d09c:	40d4      	lsrs	r4, r2
 800d09e:	fa07 f505 	lsl.w	r5, r7, r5
 800d0a2:	432c      	orrs	r4, r5
 800d0a4:	fa27 f101 	lsr.w	r1, r7, r1
 800d0a8:	430c      	orrs	r4, r1
 800d0aa:	40d7      	lsrs	r7, r2
      uint64_t w1 = bitmap[word_offset + 1];
 800d0ac:	3601      	adds	r6, #1
 800d0ae:	eb00 05c6 	add.w	r5, r0, r6, lsl #3
 800d0b2:	f850 1036 	ldr.w	r1, [r0, r6, lsl #3]
 800d0b6:	686a      	ldr	r2, [r5, #4]

      w1 = (w1 & ~mask1) | (v1 & mask1);
 800d0b8:	404c      	eors	r4, r1
 800d0ba:	4057      	eors	r7, r2
 800d0bc:	401c      	ands	r4, r3
 800d0be:	ea07 070e 	and.w	r7, r7, lr
 800d0c2:	4061      	eors	r1, r4
 800d0c4:	407a      	eors	r2, r7
      bitmap[word_offset + 1] = w1;
 800d0c6:	f840 1036 	str.w	r1, [r0, r6, lsl #3]
 800d0ca:	606a      	str	r2, [r5, #4]
   }
}
 800d0cc:	b003      	add	sp, #12
 800d0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800d0d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0d6:	469e      	mov	lr, r3
 800d0d8:	e790      	b.n	800cffc <COE_bitsliceSet+0x32>

0800d0da <COE_setValue>:
 * @param[in] obj   = object description
 * @param[in] value = new value
 */
static void COE_setValue (const _objd * obj, uint64_t value)
{
   switch(obj->datatype)
 800d0da:	8841      	ldrh	r1, [r0, #2]
 800d0dc:	3901      	subs	r1, #1
 800d0de:	2936      	cmp	r1, #54	; 0x36
 800d0e0:	d829      	bhi.n	800d136 <COE_setValue+0x5c>
 800d0e2:	e8df f001 	tbb	[pc, r1]
 800d0e6:	1c1c      	.short	0x1c1c
 800d0e8:	1f1c221f 	.word	0x1f1c221f
 800d0ec:	28282222 	.word	0x28282222
 800d0f0:	28282828 	.word	0x28282828
 800d0f4:	28252828 	.word	0x28252828
 800d0f8:	28252828 	.word	0x28252828
 800d0fc:	28282828 	.word	0x28282828
 800d100:	28282825 	.word	0x28282825
 800d104:	28282828 	.word	0x28282828
 800d108:	28282828 	.word	0x28282828
 800d10c:	28282828 	.word	0x28282828
 800d110:	1f1c2828 	.word	0x1f1c2828
 800d114:	1c1c1c22 	.word	0x1c1c1c22
 800d118:	1c1c1c1c 	.word	0x1c1c1c1c
 800d11c:	1c          	.byte	0x1c
 800d11d:	00          	.byte	0x00
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
   case DTYPE_BITARR8:
      *(uint8_t *)obj->data = value & UINT8_MAX;
 800d11e:	6903      	ldr	r3, [r0, #16]
 800d120:	701a      	strb	r2, [r3, #0]
      break;
 800d122:	4770      	bx	lr

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
   case DTYPE_BITARR16:
      *(uint16_t *)obj->data = value & UINT16_MAX;
 800d124:	6903      	ldr	r3, [r0, #16]
 800d126:	801a      	strh	r2, [r3, #0]
      break;
 800d128:	4770      	bx	lr

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
   case DTYPE_BITARR32:
      *(uint32_t *)obj->data = value & UINT32_MAX;
 800d12a:	6903      	ldr	r3, [r0, #16]
 800d12c:	601a      	str	r2, [r3, #0]
      break;
 800d12e:	4770      	bx	lr

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      *(uint64_t *)obj->data = value;
 800d130:	6901      	ldr	r1, [r0, #16]
 800d132:	600a      	str	r2, [r1, #0]
 800d134:	604b      	str	r3, [r1, #4]

   default:
      DPRINT ("ignored\n");
      break;
   }
}
 800d136:	4770      	bx	lr

0800d138 <SDO_getodlistcont>:
{
 800d138:	b570      	push	{r4, r5, r6, lr}
   MBXout = ESC_claimbuffer ();
 800d13a:	f7ff f949 	bl	800c3d0 <ESC_claimbuffer>
   if (MBXout)
 800d13e:	2800      	cmp	r0, #0
 800d140:	d059      	beq.n	800d1f6 <SDO_getodlistcont+0xbe>
 800d142:	4686      	mov	lr, r0
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800d144:	492c      	ldr	r1, [pc, #176]	; (800d1f8 <SDO_getodlistcont+0xc0>)
 800d146:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
 800d148:	fb03 fc00 	mul.w	ip, r3, r0
 800d14c:	4c2b      	ldr	r4, [pc, #172]	; (800d1fc <SDO_getodlistcont+0xc4>)
 800d14e:	eb0c 0204 	add.w	r2, ip, r4
      coel->mbxheader.mbxtype = MBXCOE;
 800d152:	7953      	ldrb	r3, [r2, #5]
 800d154:	2003      	movs	r0, #3
 800d156:	f360 0303 	bfi	r3, r0, #0, #4
 800d15a:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 800d15c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d160:	80d3      	strh	r3, [r2, #6]
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 800d162:	7a13      	ldrb	r3, [r2, #8]
 800d164:	2002      	movs	r0, #2
 800d166:	f360 0306 	bfi	r3, r0, #0, #7
 800d16a:	7213      	strb	r3, [r2, #8]
      s = (uint16_t)((ESCvar.frags - ESCvar.fragsleft) * (ODLISTSIZE >> 1));
 800d16c:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 800d170:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 800d174:	1a1e      	subs	r6, r3, r0
 800d176:	b2b6      	uxth	r6, r6
 800d178:	6f49      	ldr	r1, [r1, #116]	; 0x74
 800d17a:	884b      	ldrh	r3, [r1, #2]
 800d17c:	3b0e      	subs	r3, #14
 800d17e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800d182:	fb16 f603 	smulbb	r6, r6, r3
 800d186:	b2b6      	uxth	r6, r6
      if (ESCvar.fragsleft > 1)
 800d188:	2801      	cmp	r0, #1
 800d18a:	d913      	bls.n	800d1b4 <SDO_getodlistcont+0x7c>
         coel->infoheader.incomplete = 1;
 800d18c:	7a13      	ldrb	r3, [r2, #8]
 800d18e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d192:	7213      	strb	r3, [r2, #8]
         n = (uint16_t)(s + (ODLISTSIZE >> 1));
 800d194:	8849      	ldrh	r1, [r1, #2]
 800d196:	390e      	subs	r1, #14
 800d198:	f3c1 014e 	ubfx	r1, r1, #1, #15
 800d19c:	4431      	add	r1, r6
 800d19e:	b289      	uxth	r1, r1
      coel->infoheader.reserved = 0x00;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	7253      	strb	r3, [r2, #9]
      ESCvar.fragsleft--;
 800d1a4:	3801      	subs	r0, #1
 800d1a6:	4b14      	ldr	r3, [pc, #80]	; (800d1f8 <SDO_getodlistcont+0xc0>)
 800d1a8:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
      coel->infoheader.fragmentsleft = htoes ((uint16_t)ESCvar.fragsleft);
 800d1ac:	8150      	strh	r0, [r2, #10]
      p = &(coel->index);
 800d1ae:	320c      	adds	r2, #12
      for (i = s; i < n; i++)
 800d1b0:	4633      	mov	r3, r6
 800d1b2:	e013      	b.n	800d1dc <SDO_getodlistcont+0xa4>
         coel->infoheader.incomplete = 0;
 800d1b4:	7a13      	ldrb	r3, [r2, #8]
 800d1b6:	f36f 13c7 	bfc	r3, #7, #1
 800d1ba:	7213      	strb	r3, [r2, #8]
         MBXcontrol[0].state = MBXstate_idle;
 800d1bc:	2100      	movs	r1, #0
 800d1be:	4b10      	ldr	r3, [pc, #64]	; (800d200 <SDO_getodlistcont+0xc8>)
 800d1c0:	7019      	strb	r1, [r3, #0]
         ESCvar.xoe = 0;
 800d1c2:	4b0d      	ldr	r3, [pc, #52]	; (800d1f8 <SDO_getodlistcont+0xc0>)
 800d1c4:	f883 108e 	strb.w	r1, [r3, #142]	; 0x8e
         n = ESCvar.entries;
 800d1c8:	f8b3 1098 	ldrh.w	r1, [r3, #152]	; 0x98
 800d1cc:	e7e8      	b.n	800d1a0 <SDO_getodlistcont+0x68>
         *p = htoes (SDOobjects[i].index);
 800d1ce:	0118      	lsls	r0, r3, #4
 800d1d0:	4d0c      	ldr	r5, [pc, #48]	; (800d204 <SDO_getodlistcont+0xcc>)
 800d1d2:	5a28      	ldrh	r0, [r5, r0]
 800d1d4:	f822 0b02 	strh.w	r0, [r2], #2
      for (i = s; i < n; i++)
 800d1d8:	3301      	adds	r3, #1
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	428b      	cmp	r3, r1
 800d1de:	d3f6      	bcc.n	800d1ce <SDO_getodlistcont+0x96>
      coel->mbxheader.length = htoes (0x06 + ((n - s) << 1));
 800d1e0:	1b8b      	subs	r3, r1, r6
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	005b      	lsls	r3, r3, #1
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	3306      	adds	r3, #6
 800d1ea:	f824 300c 	strh.w	r3, [r4, ip]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d1ee:	4b04      	ldr	r3, [pc, #16]	; (800d200 <SDO_getodlistcont+0xc8>)
 800d1f0:	2203      	movs	r2, #3
 800d1f2:	f803 200e 	strb.w	r2, [r3, lr]
}
 800d1f6:	bd70      	pop	{r4, r5, r6, pc}
 800d1f8:	2000814c 	.word	0x2000814c
 800d1fc:	20008838 	.word	0x20008838
 800d200:	20008e38 	.word	0x20008e38
 800d204:	0801557c 	.word	0x0801557c

0800d208 <SDO_infoerror>:
{
 800d208:	b538      	push	{r3, r4, r5, lr}
 800d20a:	4604      	mov	r4, r0
   MBXout = ESC_claimbuffer ();
 800d20c:	f7ff f8e0 	bl	800c3d0 <ESC_claimbuffer>
   if (MBXout)
 800d210:	b340      	cbz	r0, 800d264 <SDO_infoerror+0x5c>
 800d212:	4601      	mov	r1, r0
      coeres = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800d214:	4814      	ldr	r0, [pc, #80]	; (800d268 <SDO_infoerror+0x60>)
 800d216:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800d218:	fb01 f202 	mul.w	r2, r1, r2
 800d21c:	4d13      	ldr	r5, [pc, #76]	; (800d26c <SDO_infoerror+0x64>)
 800d21e:	1953      	adds	r3, r2, r5
      coeres->mbxheader.length = htoes (COE_HEADERSIZE);
 800d220:	f04f 0c0a 	mov.w	ip, #10
 800d224:	f825 c002 	strh.w	ip, [r5, r2]
      coeres->mbxheader.mbxtype = MBXCOE;
 800d228:	795a      	ldrb	r2, [r3, #5]
 800d22a:	f04f 0c03 	mov.w	ip, #3
 800d22e:	f36c 0203 	bfi	r2, ip, #0, #4
 800d232:	715a      	strb	r2, [r3, #5]
      coeres->coeheader.numberservice =
 800d234:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d238:	80da      	strh	r2, [r3, #6]
      coeres->infoheader.opcode = COE_INFOERROR;
 800d23a:	7a1a      	ldrb	r2, [r3, #8]
 800d23c:	2507      	movs	r5, #7
 800d23e:	f365 0206 	bfi	r2, r5, #0, #7
 800d242:	721a      	strb	r2, [r3, #8]
      coeres->infoheader.incomplete = 0;
 800d244:	b2d2      	uxtb	r2, r2
 800d246:	f36f 12c7 	bfc	r2, #7, #1
 800d24a:	721a      	strb	r2, [r3, #8]
      coeres->infoheader.reserved = 0x00;
 800d24c:	2200      	movs	r2, #0
 800d24e:	725a      	strb	r2, [r3, #9]
      coeres->infoheader.fragmentsleft = 0;
 800d250:	815a      	strh	r2, [r3, #10]
      coeres->index = (uint16_t)htoel (abortcode);
 800d252:	819c      	strh	r4, [r3, #12]
      coeres->datatype = (uint16_t)(htoel (abortcode) >> 16);
 800d254:	0c24      	lsrs	r4, r4, #16
 800d256:	81dc      	strh	r4, [r3, #14]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d258:	4b05      	ldr	r3, [pc, #20]	; (800d270 <SDO_infoerror+0x68>)
 800d25a:	f803 c001 	strb.w	ip, [r3, r1]
      MBXcontrol[0].state = MBXstate_idle;
 800d25e:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 800d260:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
}
 800d264:	bd38      	pop	{r3, r4, r5, pc}
 800d266:	bf00      	nop
 800d268:	2000814c 	.word	0x2000814c
 800d26c:	20008838 	.word	0x20008838
 800d270:	20008e38 	.word	0x20008e38

0800d274 <SDO_getodlist>:
{
 800d274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t entries = 0;
 800d276:	2400      	movs	r4, #0
   while (SDOobjects[entries].index != 0xffff)
 800d278:	e001      	b.n	800d27e <SDO_getodlist+0xa>
      entries++;
 800d27a:	3401      	adds	r4, #1
 800d27c:	b2a4      	uxth	r4, r4
   while (SDOobjects[entries].index != 0xffff)
 800d27e:	0123      	lsls	r3, r4, #4
 800d280:	4a46      	ldr	r2, [pc, #280]	; (800d39c <SDO_getodlist+0x128>)
 800d282:	5ad2      	ldrh	r2, [r2, r3]
 800d284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d288:	429a      	cmp	r2, r3
 800d28a:	d1f6      	bne.n	800d27a <SDO_getodlist+0x6>
   ESCvar.entries = entries;
 800d28c:	4b44      	ldr	r3, [pc, #272]	; (800d3a0 <SDO_getodlist+0x12c>)
 800d28e:	f8a3 4098 	strh.w	r4, [r3, #152]	; 0x98
   frags = ((uint32_t)(entries << 1) + ODLISTSIZE - 1U);
 800d292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d294:	885b      	ldrh	r3, [r3, #2]
 800d296:	3b0e      	subs	r3, #14
 800d298:	f023 0301 	bic.w	r3, r3, #1
 800d29c:	041b      	lsls	r3, r3, #16
 800d29e:	0c1b      	lsrs	r3, r3, #16
 800d2a0:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800d2a4:	3901      	subs	r1, #1
   frags /= ODLISTSIZE;
 800d2a6:	fbb1 f5f3 	udiv	r5, r1, r3
   if (etohs (coer->index) > 0x01)
 800d2aa:	4b3e      	ldr	r3, [pc, #248]	; (800d3a4 <SDO_getodlist+0x130>)
 800d2ac:	899b      	ldrh	r3, [r3, #12]
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d903      	bls.n	800d2ba <SDO_getodlist+0x46>
      SDO_infoerror (ABORT_UNSUPPORTED);
 800d2b2:	483d      	ldr	r0, [pc, #244]	; (800d3a8 <SDO_getodlist+0x134>)
 800d2b4:	f7ff ffa8 	bl	800d208 <SDO_infoerror>
}
 800d2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MBXout = ESC_claimbuffer ();
 800d2ba:	f7ff f889 	bl	800c3d0 <ESC_claimbuffer>
   if (MBXout)
 800d2be:	4684      	mov	ip, r0
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	d0f9      	beq.n	800d2b8 <SDO_getodlist+0x44>
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800d2c4:	4b36      	ldr	r3, [pc, #216]	; (800d3a0 <SDO_getodlist+0x12c>)
 800d2c6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d2c8:	fb00 f00c 	mul.w	r0, r0, ip
 800d2cc:	4e35      	ldr	r6, [pc, #212]	; (800d3a4 <SDO_getodlist+0x130>)
 800d2ce:	1983      	adds	r3, r0, r6
      coel->mbxheader.mbxtype = MBXCOE;
 800d2d0:	795a      	ldrb	r2, [r3, #5]
 800d2d2:	2103      	movs	r1, #3
 800d2d4:	f361 0203 	bfi	r2, r1, #0, #4
 800d2d8:	715a      	strb	r2, [r3, #5]
      coel->coeheader.numberservice =
 800d2da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d2de:	80da      	strh	r2, [r3, #6]
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 800d2e0:	7a1a      	ldrb	r2, [r3, #8]
 800d2e2:	2102      	movs	r1, #2
 800d2e4:	f361 0206 	bfi	r2, r1, #0, #7
 800d2e8:	721a      	strb	r2, [r3, #8]
      if (etohs (coer->index) == 0x00)
 800d2ea:	89b2      	ldrh	r2, [r6, #12]
 800d2ec:	b9ba      	cbnz	r2, 800d31e <SDO_getodlist+0xaa>
         coel->index = htoes (0x00);
 800d2ee:	819a      	strh	r2, [r3, #12]
         coel->infoheader.incomplete = 0;
 800d2f0:	7a19      	ldrb	r1, [r3, #8]
 800d2f2:	f362 11c7 	bfi	r1, r2, #7, #1
 800d2f6:	7219      	strb	r1, [r3, #8]
         coel->infoheader.reserved = 0x00;
 800d2f8:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 800d2fa:	815a      	strh	r2, [r3, #10]
         MBXcontrol[0].state = MBXstate_idle;
 800d2fc:	492b      	ldr	r1, [pc, #172]	; (800d3ac <SDO_getodlist+0x138>)
 800d2fe:	700a      	strb	r2, [r1, #0]
         ESCvar.xoe = 0;
 800d300:	4927      	ldr	r1, [pc, #156]	; (800d3a0 <SDO_getodlist+0x12c>)
 800d302:	f881 208e 	strb.w	r2, [r1, #142]	; 0x8e
         ESCvar.frags = frags;
 800d306:	f8c1 509c 	str.w	r5, [r1, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 800d30a:	1e6f      	subs	r7, r5, #1
 800d30c:	f8c1 70a0 	str.w	r7, [r1, #160]	; 0xa0
         *p = htoes (entries);
 800d310:	81dc      	strh	r4, [r3, #14]
         *p = 0;
 800d312:	821a      	strh	r2, [r3, #16]
         *p = 0;
 800d314:	825a      	strh	r2, [r3, #18]
         *p = 0;
 800d316:	829a      	strh	r2, [r3, #20]
         *p = 0;
 800d318:	82da      	strh	r2, [r3, #22]
         coel->mbxheader.length = htoes (0x08 + (5 << 1));
 800d31a:	2212      	movs	r2, #18
 800d31c:	5232      	strh	r2, [r6, r0]
      if (etohs (coer->index) == 0x01)
 800d31e:	4a21      	ldr	r2, [pc, #132]	; (800d3a4 <SDO_getodlist+0x130>)
 800d320:	8992      	ldrh	r2, [r2, #12]
 800d322:	2a01      	cmp	r2, #1
 800d324:	d004      	beq.n	800d330 <SDO_getodlist+0xbc>
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d326:	4b21      	ldr	r3, [pc, #132]	; (800d3ac <SDO_getodlist+0x138>)
 800d328:	2203      	movs	r2, #3
 800d32a:	f803 200c 	strb.w	r2, [r3, ip]
}
 800d32e:	e7c3      	b.n	800d2b8 <SDO_getodlist+0x44>
         if (frags > 1)
 800d330:	2d01      	cmp	r5, #1
 800d332:	d919      	bls.n	800d368 <SDO_getodlist+0xf4>
            coel->infoheader.incomplete = 1;
 800d334:	7a1a      	ldrb	r2, [r3, #8]
 800d336:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d33a:	721a      	strb	r2, [r3, #8]
            ESCvar.xoe = MBXCOE + MBXODL;
 800d33c:	4a18      	ldr	r2, [pc, #96]	; (800d3a0 <SDO_getodlist+0x12c>)
 800d33e:	2113      	movs	r1, #19
 800d340:	f882 108e 	strb.w	r1, [r2, #142]	; 0x8e
            n = ODLISTSIZE >> 1;
 800d344:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d346:	8854      	ldrh	r4, [r2, #2]
 800d348:	3c0e      	subs	r4, #14
 800d34a:	f3c4 044e 	ubfx	r4, r4, #1, #15
         coel->infoheader.reserved = 0x00;
 800d34e:	2200      	movs	r2, #0
 800d350:	725a      	strb	r2, [r3, #9]
         ESCvar.frags = frags;
 800d352:	4f13      	ldr	r7, [pc, #76]	; (800d3a0 <SDO_getodlist+0x12c>)
 800d354:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 800d358:	3d01      	subs	r5, #1
 800d35a:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
         coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 800d35e:	815d      	strh	r5, [r3, #10]
         coel->index = htoes (0x01);
 800d360:	2101      	movs	r1, #1
 800d362:	8199      	strh	r1, [r3, #12]
         p = &(coel->datatype);
 800d364:	330e      	adds	r3, #14
         for (i = 0; i < n; i++)
 800d366:	e011      	b.n	800d38c <SDO_getodlist+0x118>
            coel->infoheader.incomplete = 0;
 800d368:	7a1a      	ldrb	r2, [r3, #8]
 800d36a:	f36f 12c7 	bfc	r2, #7, #1
 800d36e:	721a      	strb	r2, [r3, #8]
            MBXcontrol[0].state = MBXstate_idle;
 800d370:	2200      	movs	r2, #0
 800d372:	490e      	ldr	r1, [pc, #56]	; (800d3ac <SDO_getodlist+0x138>)
 800d374:	700a      	strb	r2, [r1, #0]
            ESCvar.xoe = 0;
 800d376:	490a      	ldr	r1, [pc, #40]	; (800d3a0 <SDO_getodlist+0x12c>)
 800d378:	f881 208e 	strb.w	r2, [r1, #142]	; 0x8e
            n = entries;
 800d37c:	e7e7      	b.n	800d34e <SDO_getodlist+0xda>
            *p = htoes (SDOobjects[i].index);
 800d37e:	0111      	lsls	r1, r2, #4
 800d380:	4d06      	ldr	r5, [pc, #24]	; (800d39c <SDO_getodlist+0x128>)
 800d382:	5a69      	ldrh	r1, [r5, r1]
 800d384:	f823 1b02 	strh.w	r1, [r3], #2
         for (i = 0; i < n; i++)
 800d388:	3201      	adds	r2, #1
 800d38a:	b292      	uxth	r2, r2
 800d38c:	42a2      	cmp	r2, r4
 800d38e:	d3f6      	bcc.n	800d37e <SDO_getodlist+0x10a>
         coel->mbxheader.length = htoes (0x08 + (n << 1));
 800d390:	0063      	lsls	r3, r4, #1
 800d392:	b29b      	uxth	r3, r3
 800d394:	3308      	adds	r3, #8
 800d396:	5233      	strh	r3, [r6, r0]
 800d398:	e7c5      	b.n	800d326 <SDO_getodlist+0xb2>
 800d39a:	bf00      	nop
 800d39c:	0801557c 	.word	0x0801557c
 800d3a0:	2000814c 	.word	0x2000814c
 800d3a4:	20008838 	.word	0x20008838
 800d3a8:	06010000 	.word	0x06010000
 800d3ac:	20008e38 	.word	0x20008e38

0800d3b0 <SDO_abort>:
{
 800d3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b2:	460e      	mov	r6, r1
 800d3b4:	4615      	mov	r5, r2
 800d3b6:	461f      	mov	r7, r3
   if (reusembx)
 800d3b8:	4604      	mov	r4, r0
 800d3ba:	b300      	cbz	r0, 800d3fe <SDO_abort+0x4e>
   if (MBXout)
 800d3bc:	b1f4      	cbz	r4, 800d3fc <SDO_abort+0x4c>
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800d3be:	4b12      	ldr	r3, [pc, #72]	; (800d408 <SDO_abort+0x58>)
 800d3c0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d3c2:	fb04 f000 	mul.w	r0, r4, r0
 800d3c6:	4b11      	ldr	r3, [pc, #68]	; (800d40c <SDO_abort+0x5c>)
 800d3c8:	eb00 0c03 	add.w	ip, r0, r3
      coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800d3cc:	220a      	movs	r2, #10
 800d3ce:	521a      	strh	r2, [r3, r0]
      coeres->mbxheader.mbxtype = MBXCOE;
 800d3d0:	f89c 2005 	ldrb.w	r2, [ip, #5]
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	f363 0203 	bfi	r2, r3, #0, #4
 800d3da:	f88c 2005 	strb.w	r2, [ip, #5]
      coeres->coeheader.numberservice =
 800d3de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d3e2:	f8ac 2006 	strh.w	r2, [ip, #6]
      coeres->index = htoes (index);
 800d3e6:	f8ac 6009 	strh.w	r6, [ip, #9]
      coeres->subindex = subindex;
 800d3ea:	f88c 500b 	strb.w	r5, [ip, #11]
      coeres->command = COE_COMMAND_SDOABORT;
 800d3ee:	2280      	movs	r2, #128	; 0x80
 800d3f0:	f88c 2008 	strb.w	r2, [ip, #8]
      coeres->size = htoel (abortcode);
 800d3f4:	f8cc 700c 	str.w	r7, [ip, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d3f8:	4a05      	ldr	r2, [pc, #20]	; (800d410 <SDO_abort+0x60>)
 800d3fa:	5513      	strb	r3, [r2, r4]
}
 800d3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MBXout = ESC_claimbuffer ();
 800d3fe:	f7fe ffe7 	bl	800c3d0 <ESC_claimbuffer>
 800d402:	4604      	mov	r4, r0
 800d404:	e7da      	b.n	800d3bc <SDO_abort+0xc>
 800d406:	bf00      	nop
 800d408:	2000814c 	.word	0x2000814c
 800d40c:	20008838 	.word	0x20008838
 800d410:	20008e38 	.word	0x20008e38

0800d414 <set_state_idle>:
{
 800d414:	b508      	push	{r3, lr}
   if (abortcode != 0)
 800d416:	b933      	cbnz	r3, 800d426 <set_state_idle+0x12>
   MBXcontrol[0].state = MBXstate_idle;
 800d418:	2300      	movs	r3, #0
 800d41a:	4a04      	ldr	r2, [pc, #16]	; (800d42c <set_state_idle+0x18>)
 800d41c:	7013      	strb	r3, [r2, #0]
   ESCvar.xoe = 0;
 800d41e:	4a04      	ldr	r2, [pc, #16]	; (800d430 <set_state_idle+0x1c>)
 800d420:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
}
 800d424:	bd08      	pop	{r3, pc}
      SDO_abort (reusembx, index, subindex, abortcode);
 800d426:	f7ff ffc3 	bl	800d3b0 <SDO_abort>
 800d42a:	e7f5      	b.n	800d418 <set_state_idle+0x4>
 800d42c:	20008e38 	.word	0x20008e38
 800d430:	2000814c 	.word	0x2000814c

0800d434 <copy2mbx>:
{
 800d434:	b508      	push	{r3, lr}
 800d436:	460b      	mov	r3, r1
   memcpy (dest, source, size);
 800d438:	4601      	mov	r1, r0
 800d43a:	4618      	mov	r0, r3
 800d43c:	f004 fd14 	bl	8011e68 <memcpy>
}
 800d440:	bd08      	pop	{r3, pc}
	...

0800d444 <SDO_uploadsegment>:
{
 800d444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d448:	b082      	sub	sp, #8
   MBXout = ESC_claimbuffer ();
 800d44a:	f7fe ffc1 	bl	800c3d0 <ESC_claimbuffer>
   if (MBXout)
 800d44e:	b940      	cbnz	r0, 800d462 <SDO_uploadsegment+0x1e>
   MBXcontrol[0].state = MBXstate_idle;
 800d450:	2300      	movs	r3, #0
 800d452:	4a39      	ldr	r2, [pc, #228]	; (800d538 <SDO_uploadsegment+0xf4>)
 800d454:	7013      	strb	r3, [r2, #0]
   ESCvar.xoe = 0;
 800d456:	4a39      	ldr	r2, [pc, #228]	; (800d53c <SDO_uploadsegment+0xf8>)
 800d458:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
}
 800d45c:	b002      	add	sp, #8
 800d45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d462:	4606      	mov	r6, r0
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800d464:	4f35      	ldr	r7, [pc, #212]	; (800d53c <SDO_uploadsegment+0xf8>)
 800d466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d468:	fb03 f800 	mul.w	r8, r3, r0
 800d46c:	4d34      	ldr	r5, [pc, #208]	; (800d540 <SDO_uploadsegment+0xfc>)
 800d46e:	eb08 0905 	add.w	r9, r8, r5
      offset = ESCvar.fragsleft;
 800d472:	f8d7 a0a0 	ldr.w	sl, [r7, #160]	; 0xa0
      size = ESCvar.frags - ESCvar.fragsleft;
 800d476:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800d47a:	eba4 040a 	sub.w	r4, r4, sl
            (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 800d47e:	7a2a      	ldrb	r2, [r5, #8]
      init_coesdo(coeres, COE_SDORESPONSE, command,
 800d480:	7aeb      	ldrb	r3, [r5, #11]
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800d488:	f002 0210 	and.w	r2, r2, #16
 800d48c:	2103      	movs	r1, #3
 800d48e:	4648      	mov	r0, r9
 800d490:	f7ff fd32 	bl	800cef8 <init_coesdo>
      if ((size + COE_SEGMENTHEADERSIZE) > ESC_MBXDSIZE)
 800d494:	1ce1      	adds	r1, r4, #3
 800d496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d498:	1f9a      	subs	r2, r3, #6
 800d49a:	4291      	cmp	r1, r2
 800d49c:	d919      	bls.n	800d4d2 <SDO_uploadsegment+0x8e>
         size = ESC_MBXDSIZE - COE_SEGMENTHEADERSIZE;
 800d49e:	f1a3 0409 	sub.w	r4, r3, #9
         ESCvar.fragsleft += size;
 800d4a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d4a6:	4423      	add	r3, r4
 800d4a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
         coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 800d4ac:	1ce3      	adds	r3, r4, #3
 800d4ae:	f825 3008 	strh.w	r3, [r5, r8]
      copy2mbx ((uint8_t *) ESCvar.data + offset, (&(coeres->command)) + 1,
 800d4b2:	4d22      	ldr	r5, [pc, #136]	; (800d53c <SDO_uploadsegment+0xf8>)
 800d4b4:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 800d4b8:	4622      	mov	r2, r4
 800d4ba:	f109 0109 	add.w	r1, r9, #9
 800d4be:	4450      	add	r0, sl
 800d4c0:	f7ff ffb8 	bl	800d434 <copy2mbx>
      if (ESCvar.segmented == 0)
 800d4c4:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
 800d4c8:	b31b      	cbz	r3, 800d512 <SDO_uploadsegment+0xce>
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d4ca:	4b1b      	ldr	r3, [pc, #108]	; (800d538 <SDO_uploadsegment+0xf4>)
 800d4cc:	2203      	movs	r2, #3
 800d4ce:	559a      	strb	r2, [r3, r6]
 800d4d0:	e7be      	b.n	800d450 <SDO_uploadsegment+0xc>
         ESCvar.segmented = 0;
 800d4d2:	4b1a      	ldr	r3, [pc, #104]	; (800d53c <SDO_uploadsegment+0xf8>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.frags = 0;
 800d4da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = 0;
 800d4de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         coeres->command |= COE_COMMAND_LASTSEGMENTBIT;
 800d4e2:	f899 3008 	ldrb.w	r3, [r9, #8]
 800d4e6:	f043 0301 	orr.w	r3, r3, #1
 800d4ea:	f889 3008 	strb.w	r3, [r9, #8]
         if (size >= 7)
 800d4ee:	2c06      	cmp	r4, #6
 800d4f0:	d903      	bls.n	800d4fa <SDO_uploadsegment+0xb6>
            coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 800d4f2:	1ce3      	adds	r3, r4, #3
 800d4f4:	f825 3008 	strh.w	r3, [r5, r8]
 800d4f8:	e7db      	b.n	800d4b2 <SDO_uploadsegment+0x6e>
            coeres->command |= (uint8_t)((7U - size) << 1);
 800d4fa:	f1c4 0207 	rsb	r2, r4, #7
 800d4fe:	b2d2      	uxtb	r2, r2
 800d500:	0052      	lsls	r2, r2, #1
 800d502:	b2d2      	uxtb	r2, r2
 800d504:	4313      	orrs	r3, r2
 800d506:	f889 3008 	strb.w	r3, [r9, #8]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800d50a:	230a      	movs	r3, #10
 800d50c:	f825 3008 	strh.w	r3, [r5, r8]
 800d510:	e7cf      	b.n	800d4b2 <SDO_uploadsegment+0x6e>
         abort = ESC_upload_post_objecthandler (etohs (coesdo->index),
 800d512:	4b0b      	ldr	r3, [pc, #44]	; (800d540 <SDO_uploadsegment+0xfc>)
 800d514:	f8b5 20a8 	ldrh.w	r2, [r5, #168]	; 0xa8
 800d518:	7ad9      	ldrb	r1, [r3, #11]
 800d51a:	f8b3 0009 	ldrh.w	r0, [r3, #9]
 800d51e:	f7fe fbaf 	bl	800bc80 <ESC_upload_post_objecthandler>
         if (abort != 0)
 800d522:	4603      	mov	r3, r0
 800d524:	2800      	cmp	r0, #0
 800d526:	d0d0      	beq.n	800d4ca <SDO_uploadsegment+0x86>
            set_state_idle (MBXout, etohs (coesdo->index), coesdo->subindex, abort);
 800d528:	4905      	ldr	r1, [pc, #20]	; (800d540 <SDO_uploadsegment+0xfc>)
 800d52a:	7aca      	ldrb	r2, [r1, #11]
 800d52c:	f8b1 1009 	ldrh.w	r1, [r1, #9]
 800d530:	4630      	mov	r0, r6
 800d532:	f7ff ff6f 	bl	800d414 <set_state_idle>
            return;
 800d536:	e791      	b.n	800d45c <SDO_uploadsegment+0x18>
 800d538:	20008e38 	.word	0x20008e38
 800d53c:	2000814c 	.word	0x2000814c
 800d540:	20008838 	.word	0x20008838

0800d544 <complete_access_subindex_loop>:
{
 800d544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d548:	461f      	mov	r7, r3
 800d54a:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
 800d54e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 800d552:	8843      	ldrh	r3, [r0, #2]
       (objd->datatype == DTYPE_OCTET_STRING)   ||
 800d554:	3b09      	subs	r3, #9
 800d556:	b29b      	uxth	r3, r3
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 800d558:	2b02      	cmp	r3, #2
 800d55a:	f240 80a0 	bls.w	800d69e <complete_access_subindex_loop+0x15a>
 800d55e:	4681      	mov	r9, r0
 800d560:	468a      	mov	sl, r1
 800d562:	4614      	mov	r4, r2
   if ((load_type == UPLOAD) && (mbxdata != NULL))
 800d564:	f1bb 0f00 	cmp.w	fp, #0
 800d568:	d102      	bne.n	800d570 <complete_access_subindex_loop+0x2c>
 800d56a:	b10f      	cbz	r7, 800d570 <complete_access_subindex_loop+0x2c>
      mbxdata[1] = 0;
 800d56c:	2300      	movs	r3, #0
 800d56e:	707b      	strb	r3, [r7, #1]
      size += (nsub == 0) ? 16 : bitlen;
 800d570:	2600      	movs	r6, #0
 800d572:	e049      	b.n	800d608 <complete_access_subindex_loop+0xc4>
            (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800d574:	f103 010c 	add.w	r1, r3, #12
 800d578:	e055      	b.n	800d626 <complete_access_subindex_loop+0xe2>
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 800d57a:	1df0      	adds	r0, r6, #7
                        BITS2BYTES(bitlen));
 800d57c:	1dea      	adds	r2, r5, #7
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 800d57e:	08d2      	lsrs	r2, r2, #3
 800d580:	eb07 00d0 	add.w	r0, r7, r0, lsr #3
 800d584:	f004 fc70 	bl	8011e68 <memcpy>
 800d588:	e032      	b.n	800d5f0 <complete_access_subindex_loop+0xac>
            else if (WRITE_ACCESS(access, state))
 800d58a:	f01c 0f08 	tst.w	ip, #8
 800d58e:	d001      	beq.n	800d594 <complete_access_subindex_loop+0x50>
 800d590:	2b02      	cmp	r3, #2
 800d592:	d009      	beq.n	800d5a8 <complete_access_subindex_loop+0x64>
 800d594:	f01c 0f10 	tst.w	ip, #16
 800d598:	d001      	beq.n	800d59e <complete_access_subindex_loop+0x5a>
 800d59a:	2b04      	cmp	r3, #4
 800d59c:	d004      	beq.n	800d5a8 <complete_access_subindex_loop+0x64>
 800d59e:	f01c 0f20 	tst.w	ip, #32
 800d5a2:	d025      	beq.n	800d5f0 <complete_access_subindex_loop+0xac>
 800d5a4:	2b08      	cmp	r3, #8
 800d5a6:	d123      	bne.n	800d5f0 <complete_access_subindex_loop+0xac>
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 800d5a8:	1df1      	adds	r1, r6, #7
                     BITS2BYTES(bitlen));
 800d5aa:	1dea      	adds	r2, r5, #7
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 800d5ac:	08d2      	lsrs	r2, r2, #3
 800d5ae:	eb07 01d1 	add.w	r1, r7, r1, lsr #3
 800d5b2:	f004 fc59 	bl	8011e68 <memcpy>
 800d5b6:	e01b      	b.n	800d5f0 <complete_access_subindex_loop+0xac>
      else if ((load_type == UPLOAD) && (mbxdata != NULL))
 800d5b8:	f1bb 0f00 	cmp.w	fp, #0
 800d5bc:	d118      	bne.n	800d5f0 <complete_access_subindex_loop+0xac>
 800d5be:	b1bf      	cbz	r7, 800d5f0 <complete_access_subindex_loop+0xac>
         uint32_t bitmask = (1U << bitlen) - 1U;
 800d5c0:	2001      	movs	r0, #1
 800d5c2:	40a8      	lsls	r0, r5
 800d5c4:	3801      	subs	r0, #1
         if (READ_ACCESS(access, state))
 800d5c6:	f01c 0f01 	tst.w	ip, #1
 800d5ca:	d001      	beq.n	800d5d0 <complete_access_subindex_loop+0x8c>
 800d5cc:	2b02      	cmp	r3, #2
 800d5ce:	d057      	beq.n	800d680 <complete_access_subindex_loop+0x13c>
 800d5d0:	f01c 0f02 	tst.w	ip, #2
 800d5d4:	d001      	beq.n	800d5da <complete_access_subindex_loop+0x96>
 800d5d6:	2b04      	cmp	r3, #4
 800d5d8:	d052      	beq.n	800d680 <complete_access_subindex_loop+0x13c>
 800d5da:	f01c 0f04 	tst.w	ip, #4
 800d5de:	d001      	beq.n	800d5e4 <complete_access_subindex_loop+0xa0>
 800d5e0:	2b08      	cmp	r3, #8
 800d5e2:	d04d      	beq.n	800d680 <complete_access_subindex_loop+0x13c>
            tempmask = ~(bitmask << bitoffset);
 800d5e4:	4090      	lsls	r0, r2
            mbxdata[BITSPOS2BYTESOFFSET(size)] &= (uint8_t)tempmask;
 800d5e6:	08f2      	lsrs	r2, r6, #3
 800d5e8:	5cbb      	ldrb	r3, [r7, r2]
 800d5ea:	ea23 0300 	bic.w	r3, r3, r0
 800d5ee:	54bb      	strb	r3, [r7, r2]
      size += (nsub == 0) ? 16 : bitlen;
 800d5f0:	b904      	cbnz	r4, 800d5f4 <complete_access_subindex_loop+0xb0>
 800d5f2:	2510      	movs	r5, #16
 800d5f4:	442e      	add	r6, r5
      nsub++;
 800d5f6:	3401      	adds	r4, #1
 800d5f8:	b224      	sxth	r4, r4
      if ((max_bytes > 0) && (BITS2BYTES(size) >= max_bytes))
 800d5fa:	f1b8 0f00 	cmp.w	r8, #0
 800d5fe:	d003      	beq.n	800d608 <complete_access_subindex_loop+0xc4>
 800d600:	1df3      	adds	r3, r6, #7
 800d602:	ebb8 0fd3 	cmp.w	r8, r3, lsr #3
 800d606:	d94b      	bls.n	800d6a0 <complete_access_subindex_loop+0x15c>
   while (nsub <= SDOobjects[nidx].maxsub)
 800d608:	4b27      	ldr	r3, [pc, #156]	; (800d6a8 <complete_access_subindex_loop+0x164>)
 800d60a:	eb03 130a 	add.w	r3, r3, sl, lsl #4
 800d60e:	791b      	ldrb	r3, [r3, #4]
 800d610:	429c      	cmp	r4, r3
 800d612:	dc45      	bgt.n	800d6a0 <complete_access_subindex_loop+0x15c>
      uint16_t bitlen = (objd + nsub)->bitlength;
 800d614:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800d618:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d61c:	889d      	ldrh	r5, [r3, #4]
      void *ul_source = ((objd + nsub)->data != NULL) ?
 800d61e:	6918      	ldr	r0, [r3, #16]
            (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800d620:	2800      	cmp	r0, #0
 800d622:	d0a7      	beq.n	800d574 <complete_access_subindex_loop+0x30>
 800d624:	4601      	mov	r1, r0
      uint8_t bitoffset = size % 8;
 800d626:	f006 0207 	and.w	r2, r6, #7
      uint8_t access = (objd + nsub)->flags & 0x3f;
 800d62a:	f893 c006 	ldrb.w	ip, [r3, #6]
      uint8_t state = ESCvar.ALstatus & 0x0f;
 800d62e:	4b1f      	ldr	r3, [pc, #124]	; (800d6ac <complete_access_subindex_loop+0x168>)
 800d630:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d634:	f003 030f 	and.w	r3, r3, #15
      if ((bitlen % 8) == 0)
 800d638:	f015 0f07 	tst.w	r5, #7
 800d63c:	d1bc      	bne.n	800d5b8 <complete_access_subindex_loop+0x74>
         if (bitoffset != 0)
 800d63e:	b112      	cbz	r2, 800d646 <complete_access_subindex_loop+0x102>
            size += (8U - bitoffset);
 800d640:	1ab2      	subs	r2, r6, r2
 800d642:	f102 0608 	add.w	r6, r2, #8
         if (mbxdata != NULL)
 800d646:	2f00      	cmp	r7, #0
 800d648:	d0d2      	beq.n	800d5f0 <complete_access_subindex_loop+0xac>
            if (load_type == UPLOAD)
 800d64a:	f1bb 0f00 	cmp.w	fp, #0
 800d64e:	d19c      	bne.n	800d58a <complete_access_subindex_loop+0x46>
               if (READ_ACCESS(access, state))
 800d650:	f01c 0f01 	tst.w	ip, #1
 800d654:	d001      	beq.n	800d65a <complete_access_subindex_loop+0x116>
 800d656:	2b02      	cmp	r3, #2
 800d658:	d08f      	beq.n	800d57a <complete_access_subindex_loop+0x36>
 800d65a:	f01c 0f02 	tst.w	ip, #2
 800d65e:	d001      	beq.n	800d664 <complete_access_subindex_loop+0x120>
 800d660:	2b04      	cmp	r3, #4
 800d662:	d08a      	beq.n	800d57a <complete_access_subindex_loop+0x36>
 800d664:	f01c 0f04 	tst.w	ip, #4
 800d668:	d001      	beq.n	800d66e <complete_access_subindex_loop+0x12a>
 800d66a:	2b08      	cmp	r3, #8
 800d66c:	d085      	beq.n	800d57a <complete_access_subindex_loop+0x36>
                  memset(&mbxdata[BITS2BYTES(size)], 0, BITS2BYTES(bitlen));
 800d66e:	1df0      	adds	r0, r6, #7
 800d670:	1dea      	adds	r2, r5, #7
 800d672:	08d2      	lsrs	r2, r2, #3
 800d674:	2100      	movs	r1, #0
 800d676:	eb07 00d0 	add.w	r0, r7, r0, lsr #3
 800d67a:	f004 fb37 	bl	8011cec <memset>
 800d67e:	e7b7      	b.n	800d5f0 <complete_access_subindex_loop+0xac>
            if (bitoffset == 0)
 800d680:	b922      	cbnz	r2, 800d68c <complete_access_subindex_loop+0x148>
               mbxdata[BITSPOS2BYTESOFFSET(size)] = 0;
 800d682:	08f3      	lsrs	r3, r6, #3
 800d684:	f04f 0c00 	mov.w	ip, #0
 800d688:	f807 c003 	strb.w	ip, [r7, r3]
            tempmask = (*(uint8_t *)ul_source & bitmask) << bitoffset;
 800d68c:	780b      	ldrb	r3, [r1, #0]
 800d68e:	4003      	ands	r3, r0
 800d690:	4093      	lsls	r3, r2
            mbxdata[BITSPOS2BYTESOFFSET(size)] |= (uint8_t)tempmask;
 800d692:	08f2      	lsrs	r2, r6, #3
 800d694:	b2db      	uxtb	r3, r3
 800d696:	5cb9      	ldrb	r1, [r7, r2]
 800d698:	430b      	orrs	r3, r1
 800d69a:	54bb      	strb	r3, [r7, r2]
 800d69c:	e7a8      	b.n	800d5f0 <complete_access_subindex_loop+0xac>
      return ABORT_CA_NOT_SUPPORTED;
 800d69e:	4e04      	ldr	r6, [pc, #16]	; (800d6b0 <complete_access_subindex_loop+0x16c>)
}
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a6:	bf00      	nop
 800d6a8:	0801557c 	.word	0x0801557c
 800d6ac:	2000814c 	.word	0x2000814c
 800d6b0:	06010004 	.word	0x06010004

0800d6b4 <COE_getValue>:
{
 800d6b4:	b508      	push	{r3, lr}
   switch(obj->datatype)
 800d6b6:	8843      	ldrh	r3, [r0, #2]
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	2b36      	cmp	r3, #54	; 0x36
 800d6bc:	d82d      	bhi.n	800d71a <COE_getValue+0x66>
 800d6be:	e8df f003 	tbb	[pc, r3]
 800d6c2:	1c1c      	.short	0x1c1c
 800d6c4:	201c2420 	.word	0x201c2420
 800d6c8:	2c2c2424 	.word	0x2c2c2424
 800d6cc:	2c2c2c2c 	.word	0x2c2c2c2c
 800d6d0:	2c282c2c 	.word	0x2c282c2c
 800d6d4:	2c282c2c 	.word	0x2c282c2c
 800d6d8:	2c2c2c2c 	.word	0x2c2c2c2c
 800d6dc:	2c2c2c28 	.word	0x2c2c2c28
 800d6e0:	2c2c2c2c 	.word	0x2c2c2c2c
 800d6e4:	2c2c2c2c 	.word	0x2c2c2c2c
 800d6e8:	2c2c2c2c 	.word	0x2c2c2c2c
 800d6ec:	201c2c2c 	.word	0x201c2c2c
 800d6f0:	1c1c1c24 	.word	0x1c1c1c24
 800d6f4:	1c1c1c1c 	.word	0x1c1c1c1c
 800d6f8:	1c          	.byte	0x1c
 800d6f9:	00          	.byte	0x00
      value = *(uint8_t *)obj->data;
 800d6fa:	6903      	ldr	r3, [r0, #16]
 800d6fc:	7818      	ldrb	r0, [r3, #0]
 800d6fe:	2100      	movs	r1, #0
}
 800d700:	bd08      	pop	{r3, pc}
      value = *(uint16_t *)obj->data;
 800d702:	6903      	ldr	r3, [r0, #16]
 800d704:	8818      	ldrh	r0, [r3, #0]
 800d706:	2100      	movs	r1, #0
      break;
 800d708:	e7fa      	b.n	800d700 <COE_getValue+0x4c>
      value = *(uint32_t *)obj->data;
 800d70a:	6903      	ldr	r3, [r0, #16]
 800d70c:	6818      	ldr	r0, [r3, #0]
 800d70e:	2100      	movs	r1, #0
      break;
 800d710:	e7f6      	b.n	800d700 <COE_getValue+0x4c>
      value = *(uint64_t *)obj->data;
 800d712:	6903      	ldr	r3, [r0, #16]
 800d714:	6818      	ldr	r0, [r3, #0]
 800d716:	6859      	ldr	r1, [r3, #4]
      break;
 800d718:	e7f2      	b.n	800d700 <COE_getValue+0x4c>
      CC_ASSERT (0);
 800d71a:	4b03      	ldr	r3, [pc, #12]	; (800d728 <COE_getValue+0x74>)
 800d71c:	4a03      	ldr	r2, [pc, #12]	; (800d72c <COE_getValue+0x78>)
 800d71e:	f240 618d 	movw	r1, #1677	; 0x68d
 800d722:	4803      	ldr	r0, [pc, #12]	; (800d730 <COE_getValue+0x7c>)
 800d724:	f004 f976 	bl	8011a14 <__assert_func>
 800d728:	0801363c 	.word	0x0801363c
 800d72c:	08013694 	.word	0x08013694
 800d730:	08013640 	.word	0x08013640

0800d734 <SDO_findsubindex>:
{
 800d734:	b410      	push	{r4}
   objd = SDOobjects[nidx].objdesc;
 800d736:	4b14      	ldr	r3, [pc, #80]	; (800d788 <SDO_findsubindex+0x54>)
 800d738:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800d73c:	68c4      	ldr	r4, [r0, #12]
   maxsub = SDOobjects[nidx].maxsub;
 800d73e:	f890 c004 	ldrb.w	ip, [r0, #4]
   if ((subindex <= maxsub) && ((objd + subindex)->subindex == subindex))
 800d742:	458c      	cmp	ip, r1
 800d744:	d20c      	bcs.n	800d760 <SDO_findsubindex+0x2c>
 800d746:	2000      	movs	r0, #0
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 800d748:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800d74c:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 800d750:	b28b      	uxth	r3, r1
 800d752:	429a      	cmp	r2, r3
 800d754:	d20f      	bcs.n	800d776 <SDO_findsubindex+0x42>
 800d756:	4560      	cmp	r0, ip
 800d758:	da0d      	bge.n	800d776 <SDO_findsubindex+0x42>
      n++;
 800d75a:	3001      	adds	r0, #1
 800d75c:	b200      	sxth	r0, r0
 800d75e:	e7f3      	b.n	800d748 <SDO_findsubindex+0x14>
   if ((subindex <= maxsub) && ((objd + subindex)->subindex == subindex))
 800d760:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d764:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 800d768:	b28b      	uxth	r3, r1
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d001      	beq.n	800d772 <SDO_findsubindex+0x3e>
 800d76e:	2000      	movs	r0, #0
 800d770:	e7ea      	b.n	800d748 <SDO_findsubindex+0x14>
      return subindex;
 800d772:	b208      	sxth	r0, r1
 800d774:	e001      	b.n	800d77a <SDO_findsubindex+0x46>
   if ((objd + n)->subindex != subindex)
 800d776:	429a      	cmp	r2, r3
 800d778:	d102      	bne.n	800d780 <SDO_findsubindex+0x4c>
}
 800d77a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d77e:	4770      	bx	lr
      return -1;
 800d780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d784:	e7f9      	b.n	800d77a <SDO_findsubindex+0x46>
 800d786:	bf00      	nop
 800d788:	0801557c 	.word	0x0801557c

0800d78c <SDO_findobject>:
{
 800d78c:	4601      	mov	r1, r0
   int32_t n = 0;
 800d78e:	2000      	movs	r0, #0
   while (SDOobjects[n].index < index)
 800d790:	e000      	b.n	800d794 <SDO_findobject+0x8>
      n++;
 800d792:	3001      	adds	r0, #1
   while (SDOobjects[n].index < index)
 800d794:	0103      	lsls	r3, r0, #4
 800d796:	4a04      	ldr	r2, [pc, #16]	; (800d7a8 <SDO_findobject+0x1c>)
 800d798:	5ad3      	ldrh	r3, [r2, r3]
 800d79a:	428b      	cmp	r3, r1
 800d79c:	d3f9      	bcc.n	800d792 <SDO_findobject+0x6>
   if (SDOobjects[n].index != index)
 800d79e:	d100      	bne.n	800d7a2 <SDO_findobject+0x16>
}
 800d7a0:	4770      	bx	lr
      return -1;
 800d7a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7a6:	e7fb      	b.n	800d7a0 <SDO_findobject+0x14>
 800d7a8:	0801557c 	.word	0x0801557c

0800d7ac <complete_access_get_variables>:
{
 800d7ac:	b538      	push	{r3, r4, r5, lr}
 800d7ae:	461d      	mov	r5, r3
   *index = etohs (coesdo->index);
 800d7b0:	f8b0 3009 	ldrh.w	r3, [r0, #9]
 800d7b4:	800b      	strh	r3, [r1, #0]
   *subindex = coesdo->subindex;
 800d7b6:	7ac3      	ldrb	r3, [r0, #11]
 800d7b8:	7013      	strb	r3, [r2, #0]
   if (*subindex > 1)
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d80f      	bhi.n	800d7de <complete_access_get_variables+0x32>
 800d7be:	4614      	mov	r4, r2
   *nidx = SDO_findobject (*index);
 800d7c0:	8808      	ldrh	r0, [r1, #0]
 800d7c2:	f7ff ffe3 	bl	800d78c <SDO_findobject>
 800d7c6:	6028      	str	r0, [r5, #0]
   if (*nidx < 0)
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	db0a      	blt.n	800d7e2 <complete_access_get_variables+0x36>
   *nsub = SDO_findsubindex (*nidx, *subindex);
 800d7cc:	7821      	ldrb	r1, [r4, #0]
 800d7ce:	f7ff ffb1 	bl	800d734 <SDO_findsubindex>
 800d7d2:	9b04      	ldr	r3, [sp, #16]
 800d7d4:	8018      	strh	r0, [r3, #0]
   if (*nsub < 0)
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	db05      	blt.n	800d7e6 <complete_access_get_variables+0x3a>
   return 0;
 800d7da:	2000      	movs	r0, #0
}
 800d7dc:	bd38      	pop	{r3, r4, r5, pc}
      return ABORT_UNSUPPORTED;
 800d7de:	4803      	ldr	r0, [pc, #12]	; (800d7ec <complete_access_get_variables+0x40>)
 800d7e0:	e7fc      	b.n	800d7dc <complete_access_get_variables+0x30>
      return ABORT_NOOBJECT;
 800d7e2:	4803      	ldr	r0, [pc, #12]	; (800d7f0 <complete_access_get_variables+0x44>)
 800d7e4:	e7fa      	b.n	800d7dc <complete_access_get_variables+0x30>
      return ABORT_NOSUBINDEX;
 800d7e6:	4803      	ldr	r0, [pc, #12]	; (800d7f4 <complete_access_get_variables+0x48>)
 800d7e8:	e7f8      	b.n	800d7dc <complete_access_get_variables+0x30>
 800d7ea:	bf00      	nop
 800d7ec:	06010000 	.word	0x06010000
 800d7f0:	06020000 	.word	0x06020000
 800d7f4:	06090011 	.word	0x06090011

0800d7f8 <SDO_upload_complete_access>:
{
 800d7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7fc:	b087      	sub	sp, #28
   uint32_t abortcode = complete_access_get_variables
 800d7fe:	f10d 030e 	add.w	r3, sp, #14
 800d802:	9300      	str	r3, [sp, #0]
 800d804:	ab04      	add	r3, sp, #16
 800d806:	f10d 0215 	add.w	r2, sp, #21
 800d80a:	f10d 0116 	add.w	r1, sp, #22
 800d80e:	4876      	ldr	r0, [pc, #472]	; (800d9e8 <SDO_upload_complete_access+0x1f0>)
 800d810:	f7ff ffcc 	bl	800d7ac <complete_access_get_variables>
   if (abortcode != 0)
 800d814:	2800      	cmp	r0, #0
 800d816:	f040 80a1 	bne.w	800d95c <SDO_upload_complete_access+0x164>
   uint8_t MBXout = ESC_claimbuffer ();
 800d81a:	f7fe fdd9 	bl	800c3d0 <ESC_claimbuffer>
   if (MBXout == 0)
 800d81e:	4606      	mov	r6, r0
 800d820:	2800      	cmp	r0, #0
 800d822:	f000 80a6 	beq.w	800d972 <SDO_upload_complete_access+0x17a>
   const _objd *objd = SDOobjects[nidx].objdesc;
 800d826:	9904      	ldr	r1, [sp, #16]
 800d828:	4b70      	ldr	r3, [pc, #448]	; (800d9ec <SDO_upload_complete_access+0x1f4>)
 800d82a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d82e:	68dd      	ldr	r5, [r3, #12]
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, UPLOAD, 0);
 800d830:	2300      	movs	r3, #0
 800d832:	9301      	str	r3, [sp, #4]
 800d834:	9300      	str	r3, [sp, #0]
 800d836:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800d83a:	4628      	mov	r0, r5
 800d83c:	f7ff fe82 	bl	800d544 <complete_access_subindex_loop>
 800d840:	9002      	str	r0, [sp, #8]
   uint8_t dss = (size > 24) ? 0 : (uint8_t)(4U * (3U - ((size - 1U) >> 3)));
 800d842:	2818      	cmp	r0, #24
 800d844:	f200 809e 	bhi.w	800d984 <SDO_upload_complete_access+0x18c>
 800d848:	1e44      	subs	r4, r0, #1
 800d84a:	08e4      	lsrs	r4, r4, #3
 800d84c:	f1c4 0403 	rsb	r4, r4, #3
 800d850:	b2e4      	uxtb	r4, r4
 800d852:	00a4      	lsls	r4, r4, #2
 800d854:	b2e4      	uxtb	r4, r4
   size = BITS2BYTES(size);
 800d856:	3007      	adds	r0, #7
 800d858:	08c3      	lsrs	r3, r0, #3
 800d85a:	9302      	str	r3, [sp, #8]
   if (size > 0xffff)
 800d85c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d860:	f080 8092 	bcs.w	800d988 <SDO_upload_complete_access+0x190>
   if ((size + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 800d864:	331e      	adds	r3, #30
 800d866:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d86a:	f200 8095 	bhi.w	800d998 <SDO_upload_complete_access+0x1a0>
         objd->data, (size_t *)&size, objd->flags | COMPLETE_ACCESS_FLAG);
 800d86e:	692a      	ldr	r2, [r5, #16]
 800d870:	88eb      	ldrh	r3, [r5, #6]
   abortcode = ESC_upload_pre_objecthandler(index, subindex,
 800d872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	ab02      	add	r3, sp, #8
 800d87a:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800d87e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800d882:	f7fe f9ed 	bl	800bc60 <ESC_upload_pre_objecthandler>
   if (abortcode != 0)
 800d886:	4603      	mov	r3, r0
 800d888:	2800      	cmp	r0, #0
 800d88a:	f040 808e 	bne.w	800d9aa <SDO_upload_complete_access+0x1b2>
   complete_access_subindex_loop(objd, nidx, nsub, ESCvar.mbxdata, UPLOAD, 0);
 800d88e:	4f58      	ldr	r7, [pc, #352]	; (800d9f0 <SDO_upload_complete_access+0x1f8>)
 800d890:	f04f 0a00 	mov.w	sl, #0
 800d894:	f8cd a004 	str.w	sl, [sp, #4]
 800d898:	f8cd a000 	str.w	sl, [sp]
 800d89c:	463b      	mov	r3, r7
 800d89e:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800d8a2:	9904      	ldr	r1, [sp, #16]
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	f7ff fe4d 	bl	800d544 <complete_access_subindex_loop>
   _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800d8aa:	f857 3c7e 	ldr.w	r3, [r7, #-126]
 800d8ae:	fb03 f806 	mul.w	r8, r3, r6
 800d8b2:	f8df b134 	ldr.w	fp, [pc, #308]	; 800d9e8 <SDO_upload_complete_access+0x1f0>
 800d8b6:	eb08 090b 	add.w	r9, r8, fp
   init_coesdo(coeres, COE_SDORESPONSE,
 800d8ba:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800d8c4:	2251      	movs	r2, #81	; 0x51
 800d8c6:	2103      	movs	r1, #3
 800d8c8:	4648      	mov	r0, r9
 800d8ca:	f7ff fb15 	bl	800cef8 <init_coesdo>
   ESCvar.segmented = 0;
 800d8ce:	f807 ac59 	strb.w	sl, [r7, #-89]
   _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800d8d2:	3fea      	subs	r7, #234	; 0xea
   if (size <= 4)
 800d8d4:	9a02      	ldr	r2, [sp, #8]
 800d8d6:	2a04      	cmp	r2, #4
 800d8d8:	d96f      	bls.n	800d9ba <SDO_upload_complete_access+0x1c2>
      coeres->size = htoel (size);
 800d8da:	f8c9 200c 	str.w	r2, [r9, #12]
      if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 800d8de:	f102 030a 	add.w	r3, r2, #10
 800d8e2:	4944      	ldr	r1, [pc, #272]	; (800d9f4 <SDO_upload_complete_access+0x1fc>)
 800d8e4:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 800d8e6:	1f88      	subs	r0, r1, #6
 800d8e8:	4283      	cmp	r3, r0
 800d8ea:	d911      	bls.n	800d910 <SDO_upload_complete_access+0x118>
         ESCvar.frags = size;
 800d8ec:	4b41      	ldr	r3, [pc, #260]	; (800d9f4 <SDO_upload_complete_access+0x1fc>)
 800d8ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800d8f2:	3910      	subs	r1, #16
 800d8f4:	9102      	str	r1, [sp, #8]
         ESCvar.fragsleft = size;
 800d8f6:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
         ESCvar.segmented = MBXSEU;
 800d8fa:	2240      	movs	r2, #64	; 0x40
 800d8fc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.data = ESCvar.mbxdata;
 800d900:	f103 02ea 	add.w	r2, r3, #234	; 0xea
 800d904:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 800d908:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d90c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
      coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 800d910:	9a02      	ldr	r2, [sp, #8]
 800d912:	f102 030a 	add.w	r3, r2, #10
 800d916:	f82b 3008 	strh.w	r3, [fp, r8]
      memcpy((&(coeres->size)) + 1, ESCvar.mbxdata, size);
 800d91a:	4935      	ldr	r1, [pc, #212]	; (800d9f0 <SDO_upload_complete_access+0x1f8>)
 800d91c:	f109 0010 	add.w	r0, r9, #16
 800d920:	f004 faa2 	bl	8011e68 <memcpy>
   if (ESCvar.segmented == 0)
 800d924:	4b33      	ldr	r3, [pc, #204]	; (800d9f4 <SDO_upload_complete_access+0x1fc>)
 800d926:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d92a:	b95b      	cbnz	r3, 800d944 <SDO_upload_complete_access+0x14c>
            objd->flags | COMPLETE_ACCESS_FLAG);
 800d92c:	88ea      	ldrh	r2, [r5, #6]
      abortcode = ESC_upload_post_objecthandler (index, subindex,
 800d92e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d932:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800d936:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800d93a:	f7fe f9a1 	bl	800bc80 <ESC_upload_post_objecthandler>
      if (abortcode != 0)
 800d93e:	4603      	mov	r3, r0
 800d940:	2800      	cmp	r0, #0
 800d942:	d148      	bne.n	800d9d6 <SDO_upload_complete_access+0x1de>
   MBXcontrol[MBXout].state = MBXstate_outreq;
 800d944:	4b2c      	ldr	r3, [pc, #176]	; (800d9f8 <SDO_upload_complete_access+0x200>)
 800d946:	2203      	movs	r2, #3
 800d948:	559a      	strb	r2, [r3, r6]
   set_state_idle (MBXout, index, subindex, 0);
 800d94a:	2300      	movs	r3, #0
 800d94c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d950:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d954:	4630      	mov	r0, r6
 800d956:	f7ff fd5d 	bl	800d414 <set_state_idle>
 800d95a:	e007      	b.n	800d96c <SDO_upload_complete_access+0x174>
 800d95c:	4603      	mov	r3, r0
      set_state_idle (0, index, subindex, abortcode);
 800d95e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d962:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d966:	2000      	movs	r0, #0
 800d968:	f7ff fd54 	bl	800d414 <set_state_idle>
}
 800d96c:	b007      	add	sp, #28
 800d96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      set_state_idle (0, index, subindex, 0);
 800d972:	2300      	movs	r3, #0
 800d974:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d978:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7ff fd49 	bl	800d414 <set_state_idle>
      return;
 800d982:	e7f3      	b.n	800d96c <SDO_upload_complete_access+0x174>
   uint8_t dss = (size > 24) ? 0 : (uint8_t)(4U * (3U - ((size - 1U) >> 3)));
 800d984:	2400      	movs	r4, #0
 800d986:	e766      	b.n	800d856 <SDO_upload_complete_access+0x5e>
      set_state_idle (MBXout, index, subindex, size);
 800d988:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d98c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d990:	4630      	mov	r0, r6
 800d992:	f7ff fd3f 	bl	800d414 <set_state_idle>
      return;
 800d996:	e7e9      	b.n	800d96c <SDO_upload_complete_access+0x174>
      set_state_idle (MBXout, index, subindex, ABORT_CA_NOT_SUPPORTED);
 800d998:	4b18      	ldr	r3, [pc, #96]	; (800d9fc <SDO_upload_complete_access+0x204>)
 800d99a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d99e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d9a2:	4630      	mov	r0, r6
 800d9a4:	f7ff fd36 	bl	800d414 <set_state_idle>
      return;
 800d9a8:	e7e0      	b.n	800d96c <SDO_upload_complete_access+0x174>
      set_state_idle (MBXout, index, subindex, abortcode);
 800d9aa:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d9ae:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	f7ff fd2e 	bl	800d414 <set_state_idle>
      return;
 800d9b8:	e7d8      	b.n	800d96c <SDO_upload_complete_access+0x174>
      coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 800d9ba:	f899 3008 	ldrb.w	r3, [r9, #8]
 800d9be:	431c      	orrs	r4, r3
 800d9c0:	f044 0402 	orr.w	r4, r4, #2
 800d9c4:	f889 4008 	strb.w	r4, [r9, #8]
      memcpy(&(coeres->size), ESCvar.mbxdata, size);
 800d9c8:	f107 01ea 	add.w	r1, r7, #234	; 0xea
 800d9cc:	f109 000c 	add.w	r0, r9, #12
 800d9d0:	f004 fa4a 	bl	8011e68 <memcpy>
 800d9d4:	e7a6      	b.n	800d924 <SDO_upload_complete_access+0x12c>
         set_state_idle (MBXout, index, subindex, abortcode);
 800d9d6:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d9da:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d9de:	4630      	mov	r0, r6
 800d9e0:	f7ff fd18 	bl	800d414 <set_state_idle>
         return;
 800d9e4:	e7c2      	b.n	800d96c <SDO_upload_complete_access+0x174>
 800d9e6:	bf00      	nop
 800d9e8:	20008838 	.word	0x20008838
 800d9ec:	0801557c 	.word	0x0801557c
 800d9f0:	20008236 	.word	0x20008236
 800d9f4:	2000814c 	.word	0x2000814c
 800d9f8:	20008e38 	.word	0x20008e38
 800d9fc:	06010004 	.word	0x06010004

0800da00 <SDO_download_complete_access>:
{
 800da00:	b570      	push	{r4, r5, r6, lr}
 800da02:	b086      	sub	sp, #24
   uint32_t abortcode = complete_access_get_variables
 800da04:	f10d 030e 	add.w	r3, sp, #14
 800da08:	9300      	str	r3, [sp, #0]
 800da0a:	ab04      	add	r3, sp, #16
 800da0c:	f10d 0215 	add.w	r2, sp, #21
 800da10:	f10d 0116 	add.w	r1, sp, #22
 800da14:	4869      	ldr	r0, [pc, #420]	; (800dbbc <SDO_download_complete_access+0x1bc>)
 800da16:	f7ff fec9 	bl	800d7ac <complete_access_get_variables>
   if (abortcode != 0)
 800da1a:	2800      	cmp	r0, #0
 800da1c:	d166      	bne.n	800daec <SDO_download_complete_access+0xec>
   if (coesdo->command & COE_EXPEDITED_INDICATOR)
 800da1e:	4b67      	ldr	r3, [pc, #412]	; (800dbbc <SDO_download_complete_access+0x1bc>)
 800da20:	7a1c      	ldrb	r4, [r3, #8]
 800da22:	f014 0f02 	tst.w	r4, #2
 800da26:	d06a      	beq.n	800dafe <SDO_download_complete_access+0xfe>
      bytes = 4U - ((coesdo->command & 0x0CU) >> 2);
 800da28:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800da2c:	f1c4 0404 	rsb	r4, r4, #4
   uint32_t *mbxdata = &(coesdo->size);
 800da30:	f103 050c 	add.w	r5, r3, #12
   const _objd *objd = SDOobjects[nidx].objdesc;
 800da34:	9904      	ldr	r1, [sp, #16]
 800da36:	4b62      	ldr	r3, [pc, #392]	; (800dbc0 <SDO_download_complete_access+0x1c0>)
 800da38:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800da3c:	68de      	ldr	r6, [r3, #12]
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, DOWNLOAD, 0);
 800da3e:	2300      	movs	r3, #0
 800da40:	9301      	str	r3, [sp, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	9200      	str	r2, [sp, #0]
 800da46:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800da4a:	4630      	mov	r0, r6
 800da4c:	f7ff fd7a 	bl	800d544 <complete_access_subindex_loop>
   size = BITS2BYTES(size);
 800da50:	3007      	adds	r0, #7
 800da52:	08c3      	lsrs	r3, r0, #3
   if (size > 0xffff)
 800da54:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800da58:	d256      	bcs.n	800db08 <SDO_download_complete_access+0x108>
   else if (bytes <= size)
 800da5a:	429c      	cmp	r4, r3
 800da5c:	f200 808f 	bhi.w	800db7e <SDO_download_complete_access+0x17e>
            size, objd->flags | COMPLETE_ACCESS_FLAG);
 800da60:	88f2      	ldrh	r2, [r6, #6]
      abortcode = ESC_download_pre_objecthandler(index, subindex, mbxdata,
 800da62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800da66:	9200      	str	r2, [sp, #0]
 800da68:	462a      	mov	r2, r5
 800da6a:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800da6e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800da72:	f7fe f8ad 	bl	800bbd0 <ESC_download_pre_objecthandler>
      if (abortcode != 0)
 800da76:	4603      	mov	r3, r0
 800da78:	2800      	cmp	r0, #0
 800da7a:	d14d      	bne.n	800db18 <SDO_download_complete_access+0x118>
      if ((bytes + COE_HEADERSIZE) > ESC_MBXDSIZE)
 800da7c:	f104 030a 	add.w	r3, r4, #10
 800da80:	4a50      	ldr	r2, [pc, #320]	; (800dbc4 <SDO_download_complete_access+0x1c4>)
 800da82:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800da84:	1f91      	subs	r1, r2, #6
 800da86:	428b      	cmp	r3, r1
 800da88:	d957      	bls.n	800db3a <SDO_download_complete_access+0x13a>
         if ((bytes + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 800da8a:	f104 031e 	add.w	r3, r4, #30
 800da8e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800da92:	d849      	bhi.n	800db28 <SDO_download_complete_access+0x128>
         ESCvar.frags = bytes;
 800da94:	4b4b      	ldr	r3, [pc, #300]	; (800dbc4 <SDO_download_complete_access+0x1c4>)
 800da96:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800da9a:	3a10      	subs	r2, #16
         ESCvar.fragsleft = size;
 800da9c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         ESCvar.segmented = MBXSED;
 800daa0:	2150      	movs	r1, #80	; 0x50
 800daa2:	f883 1091 	strb.w	r1, [r3, #145]	; 0x91
         ESCvar.data = ESCvar.mbxdata + size;
 800daa6:	f103 01ea 	add.w	r1, r3, #234	; 0xea
 800daaa:	1850      	adds	r0, r2, r1
 800daac:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
         ESCvar.index = index;
 800dab0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800dab4:	f8a3 00a4 	strh.w	r0, [r3, #164]	; 0xa4
         ESCvar.subindex = subindex;
 800dab8:	f89d 0015 	ldrb.w	r0, [sp, #21]
 800dabc:	f883 00a6 	strb.w	r0, [r3, #166]	; 0xa6
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 800dac0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800dac4:	f8a3 00a8 	strh.w	r0, [r3, #168]	; 0xa8
         copy2mbx (mbxdata, ESCvar.mbxdata, size);
 800dac8:	4628      	mov	r0, r5
 800daca:	f7ff fcb3 	bl	800d434 <copy2mbx>
   uint8_t MBXout = ESC_claimbuffer ();
 800dace:	f7fe fc7f 	bl	800c3d0 <ESC_claimbuffer>
   if (MBXout > 0)
 800dad2:	4604      	mov	r4, r0
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d15b      	bne.n	800db90 <SDO_download_complete_access+0x190>
   set_state_idle (MBXout, index, subindex, 0);
 800dad8:	2300      	movs	r3, #0
 800dada:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800dade:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800dae2:	4620      	mov	r0, r4
 800dae4:	f7ff fc96 	bl	800d414 <set_state_idle>
}
 800dae8:	b006      	add	sp, #24
 800daea:	bd70      	pop	{r4, r5, r6, pc}
 800daec:	4603      	mov	r3, r0
      set_state_idle (0, index, subindex, abortcode);
 800daee:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800daf2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800daf6:	2000      	movs	r0, #0
 800daf8:	f7ff fc8c 	bl	800d414 <set_state_idle>
      return;
 800dafc:	e7f4      	b.n	800dae8 <SDO_download_complete_access+0xe8>
      bytes = (etohl (coesdo->size) & 0xffff);
 800dafe:	4d2f      	ldr	r5, [pc, #188]	; (800dbbc <SDO_download_complete_access+0x1bc>)
 800db00:	68ec      	ldr	r4, [r5, #12]
 800db02:	b2a4      	uxth	r4, r4
      mbxdata++;
 800db04:	3510      	adds	r5, #16
 800db06:	e795      	b.n	800da34 <SDO_download_complete_access+0x34>
      set_state_idle (0, index, subindex, size);
 800db08:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800db0c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800db10:	2000      	movs	r0, #0
 800db12:	f7ff fc7f 	bl	800d414 <set_state_idle>
      return;
 800db16:	e7e7      	b.n	800dae8 <SDO_download_complete_access+0xe8>
         set_state_idle (0, index, subindex, abortcode);
 800db18:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800db1c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800db20:	2000      	movs	r0, #0
 800db22:	f7ff fc77 	bl	800d414 <set_state_idle>
         return;
 800db26:	e7df      	b.n	800dae8 <SDO_download_complete_access+0xe8>
             set_state_idle(0, index, subindex, ABORT_CA_NOT_SUPPORTED);
 800db28:	4b27      	ldr	r3, [pc, #156]	; (800dbc8 <SDO_download_complete_access+0x1c8>)
 800db2a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800db2e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800db32:	2000      	movs	r0, #0
 800db34:	f7ff fc6e 	bl	800d414 <set_state_idle>
             return;
 800db38:	e7d6      	b.n	800dae8 <SDO_download_complete_access+0xe8>
         ESCvar.segmented = 0;
 800db3a:	4b22      	ldr	r3, [pc, #136]	; (800dbc4 <SDO_download_complete_access+0x1c4>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         complete_access_subindex_loop(objd, nidx, nsub, (uint8_t *)mbxdata, DOWNLOAD, bytes);
 800db42:	9401      	str	r4, [sp, #4]
 800db44:	2301      	movs	r3, #1
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	462b      	mov	r3, r5
 800db4a:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800db4e:	9904      	ldr	r1, [sp, #16]
 800db50:	4630      	mov	r0, r6
 800db52:	f7ff fcf7 	bl	800d544 <complete_access_subindex_loop>
               objd->flags | COMPLETE_ACCESS_FLAG);
 800db56:	88f2      	ldrh	r2, [r6, #6]
         abortcode = ESC_download_post_objecthandler(index, subindex,
 800db58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800db5c:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800db60:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800db64:	f7fe f872 	bl	800bc4c <ESC_download_post_objecthandler>
         if (abortcode != 0)
 800db68:	4603      	mov	r3, r0
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d0af      	beq.n	800dace <SDO_download_complete_access+0xce>
            set_state_idle (0, index, subindex, abortcode);
 800db6e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800db72:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800db76:	2000      	movs	r0, #0
 800db78:	f7ff fc4c 	bl	800d414 <set_state_idle>
            return;
 800db7c:	e7b4      	b.n	800dae8 <SDO_download_complete_access+0xe8>
      set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 800db7e:	4b13      	ldr	r3, [pc, #76]	; (800dbcc <SDO_download_complete_access+0x1cc>)
 800db80:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800db84:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800db88:	2000      	movs	r0, #0
 800db8a:	f7ff fc43 	bl	800d414 <set_state_idle>
      return;
 800db8e:	e7ab      	b.n	800dae8 <SDO_download_complete_access+0xe8>
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800db90:	4b0c      	ldr	r3, [pc, #48]	; (800dbc4 <SDO_download_complete_access+0x1c4>)
 800db92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db94:	4d09      	ldr	r5, [pc, #36]	; (800dbbc <SDO_download_complete_access+0x1bc>)
 800db96:	fb03 5500 	mla	r5, r3, r0, r5
      init_coesdo(coeres, COE_SDORESPONSE,
 800db9a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800db9e:	9300      	str	r3, [sp, #0]
 800dba0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800dba4:	2270      	movs	r2, #112	; 0x70
 800dba6:	2103      	movs	r1, #3
 800dba8:	4628      	mov	r0, r5
 800dbaa:	f7ff f9a5 	bl	800cef8 <init_coesdo>
      coeres->size = 0;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	60eb      	str	r3, [r5, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800dbb2:	4b07      	ldr	r3, [pc, #28]	; (800dbd0 <SDO_download_complete_access+0x1d0>)
 800dbb4:	2203      	movs	r2, #3
 800dbb6:	551a      	strb	r2, [r3, r4]
 800dbb8:	e78e      	b.n	800dad8 <SDO_download_complete_access+0xd8>
 800dbba:	bf00      	nop
 800dbbc:	20008838 	.word	0x20008838
 800dbc0:	0801557c 	.word	0x0801557c
 800dbc4:	2000814c 	.word	0x2000814c
 800dbc8:	06010004 	.word	0x06010004
 800dbcc:	06070010 	.word	0x06070010
 800dbd0:	20008e38 	.word	0x20008e38

0800dbd4 <SDO_upload>:
{
 800dbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd8:	b085      	sub	sp, #20
   index = etohs (coesdo->index);
 800dbda:	4b7c      	ldr	r3, [pc, #496]	; (800ddcc <SDO_upload+0x1f8>)
 800dbdc:	f8b3 6009 	ldrh.w	r6, [r3, #9]
 800dbe0:	b2b5      	uxth	r5, r6
   subindex = coesdo->subindex;
 800dbe2:	7adf      	ldrb	r7, [r3, #11]
   nidx = SDO_findobject (index);
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	f7ff fdd1 	bl	800d78c <SDO_findobject>
   if (nidx >= 0)
 800dbea:	1e04      	subs	r4, r0, #0
 800dbec:	f2c0 80de 	blt.w	800ddac <SDO_upload+0x1d8>
      nsub = SDO_findsubindex (nidx, subindex);
 800dbf0:	4639      	mov	r1, r7
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f7ff fd9e 	bl	800d734 <SDO_findsubindex>
      if (nsub >= 0)
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	f2c0 80d0 	blt.w	800dd9e <SDO_upload+0x1ca>
         objd = SDOobjects[nidx].objdesc;
 800dbfe:	4b74      	ldr	r3, [pc, #464]	; (800ddd0 <SDO_upload+0x1fc>)
 800dc00:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800dc04:	68dc      	ldr	r4, [r3, #12]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 800dc06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dc0a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800dc0e:	79a2      	ldrb	r2, [r4, #6]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 800dc10:	4b70      	ldr	r3, [pc, #448]	; (800ddd4 <SDO_upload+0x200>)
 800dc12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc16:	f003 030f 	and.w	r3, r3, #15
         if (!READ_ACCESS(access, state))
 800dc1a:	f012 0f01 	tst.w	r2, #1
 800dc1e:	d001      	beq.n	800dc24 <SDO_upload+0x50>
 800dc20:	2b02      	cmp	r3, #2
 800dc22:	d010      	beq.n	800dc46 <SDO_upload+0x72>
 800dc24:	f012 0f02 	tst.w	r2, #2
 800dc28:	d001      	beq.n	800dc2e <SDO_upload+0x5a>
 800dc2a:	2b04      	cmp	r3, #4
 800dc2c:	d00b      	beq.n	800dc46 <SDO_upload+0x72>
 800dc2e:	f012 0f04 	tst.w	r2, #4
 800dc32:	d001      	beq.n	800dc38 <SDO_upload+0x64>
 800dc34:	2b08      	cmp	r3, #8
 800dc36:	d006      	beq.n	800dc46 <SDO_upload+0x72>
            set_state_idle (0, index, subindex, ABORT_WRITEONLY);
 800dc38:	4b67      	ldr	r3, [pc, #412]	; (800ddd8 <SDO_upload+0x204>)
 800dc3a:	463a      	mov	r2, r7
 800dc3c:	4629      	mov	r1, r5
 800dc3e:	2000      	movs	r0, #0
 800dc40:	f7ff fbe8 	bl	800d414 <set_state_idle>
            return;
 800dc44:	e0be      	b.n	800ddc4 <SDO_upload+0x1f0>
         MBXout = ESC_claimbuffer ();
 800dc46:	f7fe fbc3 	bl	800c3d0 <ESC_claimbuffer>
         if (MBXout)
 800dc4a:	4682      	mov	sl, r0
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	f000 80b3 	beq.w	800ddb8 <SDO_upload+0x1e4>
            coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800dc52:	4b60      	ldr	r3, [pc, #384]	; (800ddd4 <SDO_upload+0x200>)
 800dc54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc56:	fb03 f900 	mul.w	r9, r3, r0
 800dc5a:	f8df b170 	ldr.w	fp, [pc, #368]	; 800ddcc <SDO_upload+0x1f8>
 800dc5e:	eb09 080b 	add.w	r8, r9, fp
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800dc62:	230a      	movs	r3, #10
 800dc64:	f82b 3009 	strh.w	r3, [fp, r9]
            coeres->mbxheader.mbxtype = MBXCOE;
 800dc68:	f898 3005 	ldrb.w	r3, [r8, #5]
 800dc6c:	2203      	movs	r2, #3
 800dc6e:	f362 0303 	bfi	r3, r2, #0, #4
 800dc72:	f888 3005 	strb.w	r3, [r8, #5]
            coeres->coeheader.numberservice =
 800dc76:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800dc7a:	f8a8 3006 	strh.w	r3, [r8, #6]
            size = (objd + nsub)->bitlength;
 800dc7e:	88a3      	ldrh	r3, [r4, #4]
 800dc80:	9303      	str	r3, [sp, #12]
            if (size > 8)
 800dc82:	2b08      	cmp	r3, #8
 800dc84:	d833      	bhi.n	800dcee <SDO_upload+0x11a>
            dss = 0x0c;
 800dc86:	220c      	movs	r2, #12
            if (size > 16)
 800dc88:	2b10      	cmp	r3, #16
 800dc8a:	d900      	bls.n	800dc8e <SDO_upload+0xba>
               dss = 0x04;
 800dc8c:	2204      	movs	r2, #4
            if (size > 24)
 800dc8e:	2b18      	cmp	r3, #24
 800dc90:	d900      	bls.n	800dc94 <SDO_upload+0xc0>
               dss = 0x00;
 800dc92:	2200      	movs	r2, #0
            coeres->index = htoes (index);
 800dc94:	f8a8 6009 	strh.w	r6, [r8, #9]
            coeres->subindex = subindex;
 800dc98:	f888 700b 	strb.w	r7, [r8, #11]
            coeres->command = COE_COMMAND_UPLOADRESPONSE |
 800dc9c:	2141      	movs	r1, #65	; 0x41
 800dc9e:	f888 1008 	strb.w	r1, [r8, #8]
            size = BITS2BYTES(size);
 800dca2:	3307      	adds	r3, #7
 800dca4:	08db      	lsrs	r3, r3, #3
 800dca6:	9303      	str	r3, [sp, #12]
            if (size <= 4)
 800dca8:	2b04      	cmp	r3, #4
 800dcaa:	d830      	bhi.n	800dd0e <SDO_upload+0x13a>
               coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 800dcac:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 800dcb0:	f888 2008 	strb.w	r2, [r8, #8]
               void *dataptr = ((objd + nsub)->data) ?
 800dcb4:	6922      	ldr	r2, [r4, #16]
                     (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800dcb6:	b1e2      	cbz	r2, 800dcf2 <SDO_upload+0x11e>
                     dataptr, (size_t *)&size, (objd + nsub)->flags);
 800dcb8:	88e3      	ldrh	r3, [r4, #6]
               abort = ESC_upload_pre_objecthandler (index, subindex,
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	ab03      	add	r3, sp, #12
 800dcbe:	4639      	mov	r1, r7
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	f7fd ffcd 	bl	800bc60 <ESC_upload_pre_objecthandler>
               if (abort == 0)
 800dcc6:	4606      	mov	r6, r0
 800dcc8:	b9d0      	cbnz	r0, 800dd00 <SDO_upload+0x12c>
                  if ((objd + nsub)->data == NULL)
 800dcca:	6920      	ldr	r0, [r4, #16]
 800dccc:	b1a0      	cbz	r0, 800dcf8 <SDO_upload+0x124>
                     copy2mbx ((objd + nsub)->data, &(coeres->size), size);
 800dcce:	9a03      	ldr	r2, [sp, #12]
 800dcd0:	f108 010c 	add.w	r1, r8, #12
 800dcd4:	f7ff fbae 	bl	800d434 <copy2mbx>
            if ((abort == 0) && (ESCvar.segmented == 0))
 800dcd8:	b926      	cbnz	r6, 800dce4 <SDO_upload+0x110>
 800dcda:	4b3e      	ldr	r3, [pc, #248]	; (800ddd4 <SDO_upload+0x200>)
 800dcdc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d04e      	beq.n	800dd82 <SDO_upload+0x1ae>
            MBXcontrol[MBXout].state = MBXstate_outreq;
 800dce4:	4b3d      	ldr	r3, [pc, #244]	; (800dddc <SDO_upload+0x208>)
 800dce6:	2203      	movs	r2, #3
 800dce8:	f803 200a 	strb.w	r2, [r3, sl]
 800dcec:	e064      	b.n	800ddb8 <SDO_upload+0x1e4>
               dss = 0x08;
 800dcee:	2208      	movs	r2, #8
 800dcf0:	e7ca      	b.n	800dc88 <SDO_upload+0xb4>
                     (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800dcf2:	f104 020c 	add.w	r2, r4, #12
 800dcf6:	e7df      	b.n	800dcb8 <SDO_upload+0xe4>
                     coeres->size = htoel ((objd + nsub)->value);
 800dcf8:	68e3      	ldr	r3, [r4, #12]
 800dcfa:	f8c8 300c 	str.w	r3, [r8, #12]
 800dcfe:	e7eb      	b.n	800dcd8 <SDO_upload+0x104>
                  set_state_idle (MBXout, index, subindex, abort);
 800dd00:	4603      	mov	r3, r0
 800dd02:	463a      	mov	r2, r7
 800dd04:	4629      	mov	r1, r5
 800dd06:	4650      	mov	r0, sl
 800dd08:	f7ff fb84 	bl	800d414 <set_state_idle>
                  return;
 800dd0c:	e05a      	b.n	800ddc4 <SDO_upload+0x1f0>
                     (objd + nsub)->data, (size_t *)&size, (objd + nsub)->flags);
 800dd0e:	6922      	ldr	r2, [r4, #16]
 800dd10:	88e3      	ldrh	r3, [r4, #6]
               abort = ESC_upload_pre_objecthandler (index, subindex,
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	ab03      	add	r3, sp, #12
 800dd16:	4639      	mov	r1, r7
 800dd18:	4628      	mov	r0, r5
 800dd1a:	f7fd ffa1 	bl	800bc60 <ESC_upload_pre_objecthandler>
               if (abort == 0)
 800dd1e:	4606      	mov	r6, r0
 800dd20:	bb40      	cbnz	r0, 800dd74 <SDO_upload+0x1a0>
                  ESCvar.frags = size;
 800dd22:	9b03      	ldr	r3, [sp, #12]
 800dd24:	4a2b      	ldr	r2, [pc, #172]	; (800ddd4 <SDO_upload+0x200>)
 800dd26:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                  coeres->size = htoel (size);
 800dd2a:	f8c8 300c 	str.w	r3, [r8, #12]
                  if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 800dd2e:	330a      	adds	r3, #10
 800dd30:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800dd32:	1f91      	subs	r1, r2, #6
 800dd34:	428b      	cmp	r3, r1
 800dd36:	d918      	bls.n	800dd6a <SDO_upload+0x196>
                     size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800dd38:	3a10      	subs	r2, #16
 800dd3a:	9203      	str	r2, [sp, #12]
                     ESCvar.fragsleft = size;
 800dd3c:	4b25      	ldr	r3, [pc, #148]	; (800ddd4 <SDO_upload+0x200>)
 800dd3e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                     ESCvar.segmented = MBXSEU;
 800dd42:	2240      	movs	r2, #64	; 0x40
 800dd44:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                     ESCvar.data = (objd + nsub)->data;
 800dd48:	6922      	ldr	r2, [r4, #16]
 800dd4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                     ESCvar.flags = (objd + nsub)->flags;
 800dd4e:	88e2      	ldrh	r2, [r4, #6]
 800dd50:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
                  coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 800dd54:	9a03      	ldr	r2, [sp, #12]
 800dd56:	f102 030a 	add.w	r3, r2, #10
 800dd5a:	f82b 3009 	strh.w	r3, [fp, r9]
                  copy2mbx ((objd + nsub)->data, (&(coeres->size)) + 1, size);
 800dd5e:	f108 0110 	add.w	r1, r8, #16
 800dd62:	6920      	ldr	r0, [r4, #16]
 800dd64:	f7ff fb66 	bl	800d434 <copy2mbx>
 800dd68:	e7b6      	b.n	800dcd8 <SDO_upload+0x104>
                     ESCvar.segmented = 0;
 800dd6a:	4b1a      	ldr	r3, [pc, #104]	; (800ddd4 <SDO_upload+0x200>)
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800dd72:	e7ef      	b.n	800dd54 <SDO_upload+0x180>
                  set_state_idle (MBXout, index, subindex, abort);
 800dd74:	4603      	mov	r3, r0
 800dd76:	463a      	mov	r2, r7
 800dd78:	4629      	mov	r1, r5
 800dd7a:	4650      	mov	r0, sl
 800dd7c:	f7ff fb4a 	bl	800d414 <set_state_idle>
                  return;
 800dd80:	e020      	b.n	800ddc4 <SDO_upload+0x1f0>
               abort = ESC_upload_post_objecthandler (index, subindex,
 800dd82:	88e2      	ldrh	r2, [r4, #6]
 800dd84:	4639      	mov	r1, r7
 800dd86:	4628      	mov	r0, r5
 800dd88:	f7fd ff7a 	bl	800bc80 <ESC_upload_post_objecthandler>
               if (abort != 0)
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	d0a8      	beq.n	800dce4 <SDO_upload+0x110>
                  set_state_idle (MBXout, index, subindex, abort);
 800dd92:	463a      	mov	r2, r7
 800dd94:	4629      	mov	r1, r5
 800dd96:	4650      	mov	r0, sl
 800dd98:	f7ff fb3c 	bl	800d414 <set_state_idle>
                  return;
 800dd9c:	e012      	b.n	800ddc4 <SDO_upload+0x1f0>
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 800dd9e:	4b10      	ldr	r3, [pc, #64]	; (800dde0 <SDO_upload+0x20c>)
 800dda0:	463a      	mov	r2, r7
 800dda2:	4629      	mov	r1, r5
 800dda4:	2000      	movs	r0, #0
 800dda6:	f7ff fb03 	bl	800d3b0 <SDO_abort>
 800ddaa:	e005      	b.n	800ddb8 <SDO_upload+0x1e4>
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 800ddac:	4b0d      	ldr	r3, [pc, #52]	; (800dde4 <SDO_upload+0x210>)
 800ddae:	463a      	mov	r2, r7
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	2000      	movs	r0, #0
 800ddb4:	f7ff fafc 	bl	800d3b0 <SDO_abort>
   MBXcontrol[0].state = MBXstate_idle;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	4a08      	ldr	r2, [pc, #32]	; (800dddc <SDO_upload+0x208>)
 800ddbc:	7013      	strb	r3, [r2, #0]
   ESCvar.xoe = 0;
 800ddbe:	4a05      	ldr	r2, [pc, #20]	; (800ddd4 <SDO_upload+0x200>)
 800ddc0:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
}
 800ddc4:	b005      	add	sp, #20
 800ddc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddca:	bf00      	nop
 800ddcc:	20008838 	.word	0x20008838
 800ddd0:	0801557c 	.word	0x0801557c
 800ddd4:	2000814c 	.word	0x2000814c
 800ddd8:	06010001 	.word	0x06010001
 800dddc:	20008e38 	.word	0x20008e38
 800dde0:	06090011 	.word	0x06090011
 800dde4:	06020000 	.word	0x06020000

0800dde8 <SDO_download>:
{
 800dde8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddec:	b083      	sub	sp, #12
   index = etohs (coesdo->index);
 800ddee:	4b77      	ldr	r3, [pc, #476]	; (800dfcc <SDO_download+0x1e4>)
 800ddf0:	f8b3 7009 	ldrh.w	r7, [r3, #9]
 800ddf4:	b2bd      	uxth	r5, r7
   subindex = coesdo->subindex;
 800ddf6:	7ade      	ldrb	r6, [r3, #11]
   nidx = SDO_findobject (index);
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f7ff fcc7 	bl	800d78c <SDO_findobject>
   if (nidx >= 0)
 800ddfe:	1e04      	subs	r4, r0, #0
 800de00:	f2c0 80d5 	blt.w	800dfae <SDO_download+0x1c6>
      nsub = SDO_findsubindex (nidx, subindex);
 800de04:	4631      	mov	r1, r6
 800de06:	4620      	mov	r0, r4
 800de08:	f7ff fc94 	bl	800d734 <SDO_findsubindex>
      if (nsub >= 0)
 800de0c:	2800      	cmp	r0, #0
 800de0e:	f2c0 80c7 	blt.w	800dfa0 <SDO_download+0x1b8>
         objd = SDOobjects[nidx].objdesc;
 800de12:	4b6f      	ldr	r3, [pc, #444]	; (800dfd0 <SDO_download+0x1e8>)
 800de14:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800de18:	68dc      	ldr	r4, [r3, #12]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 800de1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800de1e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800de22:	79a3      	ldrb	r3, [r4, #6]
 800de24:	f003 013f 	and.w	r1, r3, #63	; 0x3f
         uint8_t state = ESCvar.ALstatus & 0x0f;
 800de28:	4a6a      	ldr	r2, [pc, #424]	; (800dfd4 <SDO_download+0x1ec>)
 800de2a:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800de2e:	f002 020f 	and.w	r2, r2, #15
         if (WRITE_ACCESS(access, state))
 800de32:	f013 0f08 	tst.w	r3, #8
 800de36:	d001      	beq.n	800de3c <SDO_download+0x54>
 800de38:	2a02      	cmp	r2, #2
 800de3a:	d013      	beq.n	800de64 <SDO_download+0x7c>
 800de3c:	f013 0f10 	tst.w	r3, #16
 800de40:	d001      	beq.n	800de46 <SDO_download+0x5e>
 800de42:	2a04      	cmp	r2, #4
 800de44:	d00e      	beq.n	800de64 <SDO_download+0x7c>
 800de46:	f013 0f20 	tst.w	r3, #32
 800de4a:	d001      	beq.n	800de50 <SDO_download+0x68>
 800de4c:	2a08      	cmp	r2, #8
 800de4e:	d009      	beq.n	800de64 <SDO_download+0x7c>
            if (access == ATYPE_RO)
 800de50:	2907      	cmp	r1, #7
 800de52:	f000 809e 	beq.w	800df92 <SDO_download+0x1aa>
               SDO_abort (0, index, subindex, ABORT_NOTINTHISSTATE);
 800de56:	4b60      	ldr	r3, [pc, #384]	; (800dfd8 <SDO_download+0x1f0>)
 800de58:	4632      	mov	r2, r6
 800de5a:	4629      	mov	r1, r5
 800de5c:	2000      	movs	r0, #0
 800de5e:	f7ff faa7 	bl	800d3b0 <SDO_abort>
 800de62:	e0aa      	b.n	800dfba <SDO_download+0x1d2>
            if (coesdo->command & COE_EXPEDITED_INDICATOR)
 800de64:	4b59      	ldr	r3, [pc, #356]	; (800dfcc <SDO_download+0x1e4>)
 800de66:	f893 8008 	ldrb.w	r8, [r3, #8]
 800de6a:	f018 0f02 	tst.w	r8, #2
 800de6e:	d019      	beq.n	800dea4 <SDO_download+0xbc>
               size = 4U - ((coesdo->command & 0x0CU) >> 2);
 800de70:	f3c8 0881 	ubfx	r8, r8, #2, #2
 800de74:	f1c8 0804 	rsb	r8, r8, #4
               mbxdata = &(coesdo->size);
 800de78:	f103 090c 	add.w	r9, r3, #12
            actsize = BITS2BYTES((objd + nsub)->bitlength);
 800de7c:	88a3      	ldrh	r3, [r4, #4]
 800de7e:	3307      	adds	r3, #7
 800de80:	08da      	lsrs	r2, r3, #3
            if (actsize != size)
 800de82:	ebb8 0fd3 	cmp.w	r8, r3, lsr #3
 800de86:	d022      	beq.n	800dece <SDO_download+0xe6>
               uint16_t type = (objd + nsub)->datatype;
 800de88:	8863      	ldrh	r3, [r4, #2]
               if (type == DTYPE_VISIBLE_STRING)
 800de8a:	2b09      	cmp	r3, #9
 800de8c:	d012      	beq.n	800deb4 <SDO_download+0xcc>
               else if ((type != DTYPE_OCTET_STRING) &&
 800de8e:	2b0b      	cmp	r3, #11
 800de90:	d818      	bhi.n	800dec4 <SDO_download+0xdc>
 800de92:	2b0a      	cmp	r3, #10
 800de94:	d21b      	bcs.n	800dece <SDO_download+0xe6>
                  set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 800de96:	4b51      	ldr	r3, [pc, #324]	; (800dfdc <SDO_download+0x1f4>)
 800de98:	4632      	mov	r2, r6
 800de9a:	4629      	mov	r1, r5
 800de9c:	2000      	movs	r0, #0
 800de9e:	f7ff fab9 	bl	800d414 <set_state_idle>
                  return;
 800dea2:	e090      	b.n	800dfc6 <SDO_download+0x1de>
               size = (etohl (coesdo->size) & 0xffff);
 800dea4:	4b49      	ldr	r3, [pc, #292]	; (800dfcc <SDO_download+0x1e4>)
 800dea6:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800deaa:	fa1f f888 	uxth.w	r8, r8
               mbxdata = (&(coesdo->size)) + 1;
 800deae:	f103 0910 	add.w	r9, r3, #16
 800deb2:	e7e3      	b.n	800de7c <SDO_download+0x94>
                  memset((objd + nsub)->data + size, 0, actsize - size);
 800deb4:	6920      	ldr	r0, [r4, #16]
 800deb6:	eba2 0208 	sub.w	r2, r2, r8
 800deba:	2100      	movs	r1, #0
 800debc:	4440      	add	r0, r8
 800debe:	f003 ff15 	bl	8011cec <memset>
 800dec2:	e004      	b.n	800dece <SDO_download+0xe6>
 800dec4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800dec8:	b29b      	uxth	r3, r3
 800deca:	2b03      	cmp	r3, #3
 800decc:	d8e3      	bhi.n	800de96 <SDO_download+0xae>
                  (objd + nsub)->flags
 800dece:	88e3      	ldrh	r3, [r4, #6]
            abort = ESC_download_pre_objecthandler (
 800ded0:	9300      	str	r3, [sp, #0]
 800ded2:	4643      	mov	r3, r8
 800ded4:	464a      	mov	r2, r9
 800ded6:	4631      	mov	r1, r6
 800ded8:	4628      	mov	r0, r5
 800deda:	f7fd fe79 	bl	800bbd0 <ESC_download_pre_objecthandler>
            if (abort == 0)
 800dede:	4603      	mov	r3, r0
 800dee0:	2800      	cmp	r0, #0
 800dee2:	d150      	bne.n	800df86 <SDO_download+0x19e>
               if ((size > 4) &&
 800dee4:	f1b8 0f04 	cmp.w	r8, #4
 800dee8:	d915      	bls.n	800df16 <SDO_download+0x12e>
                     (size > (coesdo->mbxheader.length - COE_HEADERSIZE)))
 800deea:	4b38      	ldr	r3, [pc, #224]	; (800dfcc <SDO_download+0x1e4>)
 800deec:	881b      	ldrh	r3, [r3, #0]
 800deee:	3b0a      	subs	r3, #10
               if ((size > 4) &&
 800def0:	4543      	cmp	r3, r8
 800def2:	d210      	bcs.n	800df16 <SDO_download+0x12e>
                  ESCvar.segmented = MBXSED;
 800def4:	4a37      	ldr	r2, [pc, #220]	; (800dfd4 <SDO_download+0x1ec>)
 800def6:	2150      	movs	r1, #80	; 0x50
 800def8:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
                  ESCvar.data = (objd + nsub)->data + size;
 800defc:	6921      	ldr	r1, [r4, #16]
 800defe:	4419      	add	r1, r3
 800df00:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
                  ESCvar.index = index;
 800df04:	f8a2 70a4 	strh.w	r7, [r2, #164]	; 0xa4
                  ESCvar.subindex = subindex;
 800df08:	f882 60a6 	strb.w	r6, [r2, #166]	; 0xa6
                  ESCvar.flags = (objd + nsub)->flags;
 800df0c:	88e1      	ldrh	r1, [r4, #6]
 800df0e:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
                  size = coesdo->mbxheader.length - COE_HEADERSIZE;
 800df12:	4698      	mov	r8, r3
                  ESCvar.flags = (objd + nsub)->flags;
 800df14:	e003      	b.n	800df1e <SDO_download+0x136>
                  ESCvar.segmented = 0;
 800df16:	4b2f      	ldr	r3, [pc, #188]	; (800dfd4 <SDO_download+0x1ec>)
 800df18:	2200      	movs	r2, #0
 800df1a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
               copy2mbx (mbxdata, (objd + nsub)->data, size);
 800df1e:	4642      	mov	r2, r8
 800df20:	6921      	ldr	r1, [r4, #16]
 800df22:	4648      	mov	r0, r9
 800df24:	f7ff fa86 	bl	800d434 <copy2mbx>
               MBXout = ESC_claimbuffer ();
 800df28:	f7fe fa52 	bl	800c3d0 <ESC_claimbuffer>
               if (MBXout)
 800df2c:	4680      	mov	r8, r0
 800df2e:	b1c8      	cbz	r0, 800df64 <SDO_download+0x17c>
                  coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800df30:	4b28      	ldr	r3, [pc, #160]	; (800dfd4 <SDO_download+0x1ec>)
 800df32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800df34:	fb02 f200 	mul.w	r2, r2, r0
 800df38:	4924      	ldr	r1, [pc, #144]	; (800dfcc <SDO_download+0x1e4>)
 800df3a:	1853      	adds	r3, r2, r1
                  coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800df3c:	200a      	movs	r0, #10
 800df3e:	5288      	strh	r0, [r1, r2]
                  coeres->mbxheader.mbxtype = MBXCOE;
 800df40:	7959      	ldrb	r1, [r3, #5]
 800df42:	2203      	movs	r2, #3
 800df44:	f362 0103 	bfi	r1, r2, #0, #4
 800df48:	7159      	strb	r1, [r3, #5]
                  coeres->coeheader.numberservice =
 800df4a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800df4e:	80d9      	strh	r1, [r3, #6]
                  coeres->index = htoes (index);
 800df50:	f8a3 7009 	strh.w	r7, [r3, #9]
                  coeres->subindex = subindex;
 800df54:	72de      	strb	r6, [r3, #11]
                  coeres->command = COE_COMMAND_DOWNLOADRESPONSE;
 800df56:	2160      	movs	r1, #96	; 0x60
 800df58:	7219      	strb	r1, [r3, #8]
                  coeres->size = htoel (0);
 800df5a:	2100      	movs	r1, #0
 800df5c:	60d9      	str	r1, [r3, #12]
                  MBXcontrol[MBXout].state = MBXstate_outreq;
 800df5e:	4b20      	ldr	r3, [pc, #128]	; (800dfe0 <SDO_download+0x1f8>)
 800df60:	f803 2008 	strb.w	r2, [r3, r8]
               if (ESCvar.segmented == 0)
 800df64:	4b1b      	ldr	r3, [pc, #108]	; (800dfd4 <SDO_download+0x1ec>)
 800df66:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800df6a:	bb33      	cbnz	r3, 800dfba <SDO_download+0x1d2>
                  abort = ESC_download_post_objecthandler (index, subindex, (objd + nsub)->flags);
 800df6c:	88e2      	ldrh	r2, [r4, #6]
 800df6e:	4631      	mov	r1, r6
 800df70:	4628      	mov	r0, r5
 800df72:	f7fd fe6b 	bl	800bc4c <ESC_download_post_objecthandler>
                  if (abort != 0)
 800df76:	4603      	mov	r3, r0
 800df78:	b1f8      	cbz	r0, 800dfba <SDO_download+0x1d2>
                     SDO_abort (MBXout, index, subindex, abort);
 800df7a:	4632      	mov	r2, r6
 800df7c:	4629      	mov	r1, r5
 800df7e:	4640      	mov	r0, r8
 800df80:	f7ff fa16 	bl	800d3b0 <SDO_abort>
 800df84:	e019      	b.n	800dfba <SDO_download+0x1d2>
               SDO_abort (0, index, subindex, abort);
 800df86:	4632      	mov	r2, r6
 800df88:	4629      	mov	r1, r5
 800df8a:	2000      	movs	r0, #0
 800df8c:	f7ff fa10 	bl	800d3b0 <SDO_abort>
 800df90:	e013      	b.n	800dfba <SDO_download+0x1d2>
               SDO_abort (0, index, subindex, ABORT_READONLY);
 800df92:	4b14      	ldr	r3, [pc, #80]	; (800dfe4 <SDO_download+0x1fc>)
 800df94:	4632      	mov	r2, r6
 800df96:	4629      	mov	r1, r5
 800df98:	2000      	movs	r0, #0
 800df9a:	f7ff fa09 	bl	800d3b0 <SDO_abort>
 800df9e:	e00c      	b.n	800dfba <SDO_download+0x1d2>
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 800dfa0:	4b11      	ldr	r3, [pc, #68]	; (800dfe8 <SDO_download+0x200>)
 800dfa2:	4632      	mov	r2, r6
 800dfa4:	4629      	mov	r1, r5
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	f7ff fa02 	bl	800d3b0 <SDO_abort>
 800dfac:	e005      	b.n	800dfba <SDO_download+0x1d2>
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 800dfae:	4b0f      	ldr	r3, [pc, #60]	; (800dfec <SDO_download+0x204>)
 800dfb0:	4632      	mov	r2, r6
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	f7ff f9fb 	bl	800d3b0 <SDO_abort>
   MBXcontrol[0].state = MBXstate_idle;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	4a08      	ldr	r2, [pc, #32]	; (800dfe0 <SDO_download+0x1f8>)
 800dfbe:	7013      	strb	r3, [r2, #0]
   ESCvar.xoe = 0;
 800dfc0:	4a04      	ldr	r2, [pc, #16]	; (800dfd4 <SDO_download+0x1ec>)
 800dfc2:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
}
 800dfc6:	b003      	add	sp, #12
 800dfc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfcc:	20008838 	.word	0x20008838
 800dfd0:	0801557c 	.word	0x0801557c
 800dfd4:	2000814c 	.word	0x2000814c
 800dfd8:	08000022 	.word	0x08000022
 800dfdc:	06070010 	.word	0x06070010
 800dfe0:	20008e38 	.word	0x20008e38
 800dfe4:	06010002 	.word	0x06010002
 800dfe8:	06090011 	.word	0x06090011
 800dfec:	06020000 	.word	0x06020000

0800dff0 <SDO_downloadsegment>:
{
 800dff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff4:	b082      	sub	sp, #8
   uint8_t MBXout = ESC_claimbuffer ();
 800dff6:	f7fe f9eb 	bl	800c3d0 <ESC_claimbuffer>
   if (MBXout)
 800dffa:	2800      	cmp	r0, #0
 800dffc:	f000 808c 	beq.w	800e118 <SDO_downloadsegment+0x128>
 800e000:	4606      	mov	r6, r0
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800e002:	4b4a      	ldr	r3, [pc, #296]	; (800e12c <SDO_downloadsegment+0x13c>)
 800e004:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e006:	4b4a      	ldr	r3, [pc, #296]	; (800e130 <SDO_downloadsegment+0x140>)
 800e008:	fb00 3006 	mla	r0, r0, r6, r3
      uint32_t size = coesdo->mbxheader.length - 3U;
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	1edc      	subs	r4, r3, #3
      if (size == 7)
 800e010:	2b0a      	cmp	r3, #10
 800e012:	d05b      	beq.n	800e0cc <SDO_downloadsegment+0xdc>
      uint8_t command2 = (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 800e014:	4d46      	ldr	r5, [pc, #280]	; (800e130 <SDO_downloadsegment+0x140>)
 800e016:	7a2a      	ldrb	r2, [r5, #8]
 800e018:	f002 0210 	and.w	r2, r2, #16
      init_coesdo(coeres, COE_SDORESPONSE, command, 0, 0);
 800e01c:	2300      	movs	r3, #0
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	f042 0220 	orr.w	r2, r2, #32
 800e024:	2103      	movs	r1, #3
 800e026:	f7fe ff67 	bl	800cef8 <init_coesdo>
      copy2mbx (mbxdata, ESCvar.data, size);
 800e02a:	4622      	mov	r2, r4
 800e02c:	4b3f      	ldr	r3, [pc, #252]	; (800e12c <SDO_downloadsegment+0x13c>)
 800e02e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e032:	f105 0009 	add.w	r0, r5, #9
 800e036:	f7ff f9fd 	bl	800d434 <copy2mbx>
      if (coesdo->command & COE_COMMAND_LASTSEGMENTBIT)
 800e03a:	7a2b      	ldrb	r3, [r5, #8]
 800e03c:	f013 0f01 	tst.w	r3, #1
 800e040:	d05c      	beq.n	800e0fc <SDO_downloadsegment+0x10c>
         if(ESCvar.flags == COMPLETE_ACCESS_FLAG)
 800e042:	4b3a      	ldr	r3, [pc, #232]	; (800e12c <SDO_downloadsegment+0x13c>)
 800e044:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800e048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e04c:	d123      	bne.n	800e096 <SDO_downloadsegment+0xa6>
            if(ESCvar.frags > ESCvar.fragsleft + size)
 800e04e:	4b37      	ldr	r3, [pc, #220]	; (800e12c <SDO_downloadsegment+0x13c>)
 800e050:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 800e054:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e058:	4423      	add	r3, r4
 800e05a:	429d      	cmp	r5, r3
 800e05c:	d83d      	bhi.n	800e0da <SDO_downloadsegment+0xea>
            nidx = SDO_findobject(ESCvar.index);
 800e05e:	4f33      	ldr	r7, [pc, #204]	; (800e12c <SDO_downloadsegment+0x13c>)
 800e060:	f8b7 80a4 	ldrh.w	r8, [r7, #164]	; 0xa4
 800e064:	4640      	mov	r0, r8
 800e066:	f7ff fb91 	bl	800d78c <SDO_findobject>
 800e06a:	4604      	mov	r4, r0
            nsub = SDO_findsubindex (nidx, ESCvar.subindex);
 800e06c:	f897 70a6 	ldrb.w	r7, [r7, #166]	; 0xa6
 800e070:	4639      	mov	r1, r7
 800e072:	f7ff fb5f 	bl	800d734 <SDO_findsubindex>
 800e076:	4602      	mov	r2, r0
            if ((nidx < 0) || (nsub < 0))
 800e078:	2c00      	cmp	r4, #0
 800e07a:	db38      	blt.n	800e0ee <SDO_downloadsegment+0xfe>
 800e07c:	2800      	cmp	r0, #0
 800e07e:	db36      	blt.n	800e0ee <SDO_downloadsegment+0xfe>
            const _objd *objd = SDOobjects[nidx].objdesc;
 800e080:	482c      	ldr	r0, [pc, #176]	; (800e134 <SDO_downloadsegment+0x144>)
 800e082:	eb00 1004 	add.w	r0, r0, r4, lsl #4
            complete_access_subindex_loop(objd,
 800e086:	9501      	str	r5, [sp, #4]
 800e088:	2301      	movs	r3, #1
 800e08a:	9300      	str	r3, [sp, #0]
 800e08c:	4b2a      	ldr	r3, [pc, #168]	; (800e138 <SDO_downloadsegment+0x148>)
 800e08e:	4621      	mov	r1, r4
 800e090:	68c0      	ldr	r0, [r0, #12]
 800e092:	f7ff fa57 	bl	800d544 <complete_access_subindex_loop>
         ESCvar.segmented = 0;
 800e096:	4b25      	ldr	r3, [pc, #148]	; (800e12c <SDO_downloadsegment+0x13c>)
 800e098:	2200      	movs	r2, #0
 800e09a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.frags = 0;
 800e09e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = 0;
 800e0a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         uint32_t abort = ESC_download_post_objecthandler
 800e0a6:	f8b3 20a8 	ldrh.w	r2, [r3, #168]	; 0xa8
 800e0aa:	f893 10a6 	ldrb.w	r1, [r3, #166]	; 0xa6
 800e0ae:	f8b3 00a4 	ldrh.w	r0, [r3, #164]	; 0xa4
 800e0b2:	f7fd fdcb 	bl	800bc4c <ESC_download_post_objecthandler>
         if (abort != 0)
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	b358      	cbz	r0, 800e112 <SDO_downloadsegment+0x122>
            set_state_idle (MBXout, ESCvar.index, ESCvar.subindex, abort);
 800e0ba:	491c      	ldr	r1, [pc, #112]	; (800e12c <SDO_downloadsegment+0x13c>)
 800e0bc:	f891 20a6 	ldrb.w	r2, [r1, #166]	; 0xa6
 800e0c0:	f8b1 10a4 	ldrh.w	r1, [r1, #164]	; 0xa4
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	f7ff f9a5 	bl	800d414 <set_state_idle>
            return;
 800e0ca:	e02b      	b.n	800e124 <SDO_downloadsegment+0x134>
         size = 7 - ((coesdo->command >> 1) & 7);
 800e0cc:	4b18      	ldr	r3, [pc, #96]	; (800e130 <SDO_downloadsegment+0x140>)
 800e0ce:	7a1c      	ldrb	r4, [r3, #8]
 800e0d0:	ea6f 0454 	mvn.w	r4, r4, lsr #1
 800e0d4:	f004 0407 	and.w	r4, r4, #7
 800e0d8:	e79c      	b.n	800e014 <SDO_downloadsegment+0x24>
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_TYPEMISMATCH);
 800e0da:	4914      	ldr	r1, [pc, #80]	; (800e12c <SDO_downloadsegment+0x13c>)
 800e0dc:	4b17      	ldr	r3, [pc, #92]	; (800e13c <SDO_downloadsegment+0x14c>)
 800e0de:	f891 20a6 	ldrb.w	r2, [r1, #166]	; 0xa6
 800e0e2:	f8b1 10a4 	ldrh.w	r1, [r1, #164]	; 0xa4
 800e0e6:	2000      	movs	r0, #0
 800e0e8:	f7ff f994 	bl	800d414 <set_state_idle>
               return;
 800e0ec:	e01a      	b.n	800e124 <SDO_downloadsegment+0x134>
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_NOOBJECT);
 800e0ee:	4b14      	ldr	r3, [pc, #80]	; (800e140 <SDO_downloadsegment+0x150>)
 800e0f0:	463a      	mov	r2, r7
 800e0f2:	4641      	mov	r1, r8
 800e0f4:	2000      	movs	r0, #0
 800e0f6:	f7ff f98d 	bl	800d414 <set_state_idle>
               return;
 800e0fa:	e013      	b.n	800e124 <SDO_downloadsegment+0x134>
         ESCvar.data += size;
 800e0fc:	4b0b      	ldr	r3, [pc, #44]	; (800e12c <SDO_downloadsegment+0x13c>)
 800e0fe:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e102:	4422      	add	r2, r4
 800e104:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
         ESCvar.fragsleft += size;
 800e108:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e10c:	4422      	add	r2, r4
 800e10e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800e112:	4b0c      	ldr	r3, [pc, #48]	; (800e144 <SDO_downloadsegment+0x154>)
 800e114:	2203      	movs	r2, #3
 800e116:	559a      	strb	r2, [r3, r6]
   set_state_idle (0, 0, 0, 0);
 800e118:	2300      	movs	r3, #0
 800e11a:	461a      	mov	r2, r3
 800e11c:	4619      	mov	r1, r3
 800e11e:	4618      	mov	r0, r3
 800e120:	f7ff f978 	bl	800d414 <set_state_idle>
}
 800e124:	b002      	add	sp, #8
 800e126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e12a:	bf00      	nop
 800e12c:	2000814c 	.word	0x2000814c
 800e130:	20008838 	.word	0x20008838
 800e134:	0801557c 	.word	0x0801557c
 800e138:	20008236 	.word	0x20008236
 800e13c:	06070010 	.word	0x06070010
 800e140:	06020000 	.word	0x06020000
 800e144:	20008e38 	.word	0x20008e38

0800e148 <SDO_getod>:
{
 800e148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   index = etohs (coer->index);
 800e14c:	4b44      	ldr	r3, [pc, #272]	; (800e260 <SDO_getod+0x118>)
 800e14e:	f8b3 900c 	ldrh.w	r9, [r3, #12]
   nidx = SDO_findobject (index);
 800e152:	fa1f f089 	uxth.w	r0, r9
 800e156:	f7ff fb19 	bl	800d78c <SDO_findobject>
   if (nidx >= 0)
 800e15a:	f1b0 0800 	subs.w	r8, r0, #0
 800e15e:	db7a      	blt.n	800e256 <SDO_getod+0x10e>
      MBXout = ESC_claimbuffer ();
 800e160:	f7fe f936 	bl	800c3d0 <ESC_claimbuffer>
      if (MBXout)
 800e164:	4605      	mov	r5, r0
 800e166:	2800      	cmp	r0, #0
 800e168:	d078      	beq.n	800e25c <SDO_getod+0x114>
         coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800e16a:	4b3e      	ldr	r3, [pc, #248]	; (800e264 <SDO_getod+0x11c>)
 800e16c:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800e16e:	fb00 f404 	mul.w	r4, r0, r4
 800e172:	4e3b      	ldr	r6, [pc, #236]	; (800e260 <SDO_getod+0x118>)
 800e174:	19a7      	adds	r7, r4, r6
         coel->mbxheader.mbxtype = MBXCOE;
 800e176:	797b      	ldrb	r3, [r7, #5]
 800e178:	2203      	movs	r2, #3
 800e17a:	f362 0303 	bfi	r3, r2, #0, #4
 800e17e:	717b      	strb	r3, [r7, #5]
         coel->coeheader.numberservice =
 800e180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e184:	80fb      	strh	r3, [r7, #6]
         coel->infoheader.opcode = COE_GETODRESPONSE;
 800e186:	7a3b      	ldrb	r3, [r7, #8]
 800e188:	2204      	movs	r2, #4
 800e18a:	f362 0306 	bfi	r3, r2, #0, #7
 800e18e:	723b      	strb	r3, [r7, #8]
         coel->infoheader.incomplete = 0;
 800e190:	b2db      	uxtb	r3, r3
 800e192:	f36f 13c7 	bfc	r3, #7, #1
 800e196:	723b      	strb	r3, [r7, #8]
         coel->infoheader.reserved = 0x00;
 800e198:	2300      	movs	r3, #0
 800e19a:	727b      	strb	r3, [r7, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 800e19c:	817b      	strh	r3, [r7, #10]
         coel->index = htoes (index);
 800e19e:	f8a7 900c 	strh.w	r9, [r7, #12]
         if (SDOobjects[nidx].objtype == OTYPE_VAR)
 800e1a2:	4b31      	ldr	r3, [pc, #196]	; (800e268 <SDO_getod+0x120>)
 800e1a4:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e1a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e1ac:	f1b9 0f07 	cmp.w	r9, #7
 800e1b0:	d015      	beq.n	800e1de <SDO_getod+0x96>
         else if (SDOobjects[nidx].objtype == OTYPE_ARRAY)
 800e1b2:	f1b9 0f08 	cmp.w	r9, #8
 800e1b6:	d023      	beq.n	800e200 <SDO_getod+0xb8>
            coel->datatype = htoes (0);
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	81fb      	strh	r3, [r7, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 800e1bc:	4b2a      	ldr	r3, [pc, #168]	; (800e268 <SDO_getod+0x120>)
 800e1be:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e1c2:	68db      	ldr	r3, [r3, #12]
 800e1c4:	7b1b      	ldrb	r3, [r3, #12]
 800e1c6:	743b      	strb	r3, [r7, #16]
         coel->objectcode = (uint8_t)SDOobjects[nidx].objtype;
 800e1c8:	f887 9011 	strb.w	r9, [r7, #17]
         s = (uint8_t *) SDOobjects[nidx].name;
 800e1cc:	4b26      	ldr	r3, [pc, #152]	; (800e268 <SDO_getod+0x120>)
 800e1ce:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e1d2:	f8d3 c008 	ldr.w	ip, [r3, #8]
         d = (uint8_t *) &(coel->name);
 800e1d6:	f107 0112 	add.w	r1, r7, #18
   uint8_t n = 0;
 800e1da:	2300      	movs	r3, #0
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 800e1dc:	e027      	b.n	800e22e <SDO_getod+0xe6>
            int32_t nsub = SDO_findsubindex (nidx, 0);
 800e1de:	2100      	movs	r1, #0
 800e1e0:	4640      	mov	r0, r8
 800e1e2:	f7ff faa7 	bl	800d734 <SDO_findsubindex>
            const _objd *objd = SDOobjects[nidx].objdesc;
 800e1e6:	4b20      	ldr	r3, [pc, #128]	; (800e268 <SDO_getod+0x120>)
 800e1e8:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e1ec:	68da      	ldr	r2, [r3, #12]
            coel->datatype = htoes ((objd + nsub)->datatype);
 800e1ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e1f2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e1f6:	8852      	ldrh	r2, [r2, #2]
 800e1f8:	81fa      	strh	r2, [r7, #14]
            coel->maxsub = SDOobjects[nidx].maxsub;
 800e1fa:	791b      	ldrb	r3, [r3, #4]
 800e1fc:	743b      	strb	r3, [r7, #16]
 800e1fe:	e7e3      	b.n	800e1c8 <SDO_getod+0x80>
            int32_t nsub = SDO_findsubindex (nidx, 0);
 800e200:	2100      	movs	r1, #0
 800e202:	4640      	mov	r0, r8
 800e204:	f7ff fa96 	bl	800d734 <SDO_findsubindex>
            const _objd *objd = SDOobjects[nidx].objdesc;
 800e208:	4b17      	ldr	r3, [pc, #92]	; (800e268 <SDO_getod+0x120>)
 800e20a:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e20e:	68db      	ldr	r3, [r3, #12]
            coel->datatype = htoes ((objd + nsub)->datatype);
 800e210:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e214:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e218:	8842      	ldrh	r2, [r0, #2]
 800e21a:	81fa      	strh	r2, [r7, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 800e21c:	7b1b      	ldrb	r3, [r3, #12]
 800e21e:	743b      	strb	r3, [r7, #16]
 800e220:	e7d2      	b.n	800e1c8 <SDO_getod+0x80>
            *d = *s;
 800e222:	f801 0b01 	strb.w	r0, [r1], #1
            n++;
 800e226:	3301      	adds	r3, #1
 800e228:	b2db      	uxtb	r3, r3
            s++;
 800e22a:	f10c 0c01 	add.w	ip, ip, #1
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 800e22e:	f89c 0000 	ldrb.w	r0, [ip]
 800e232:	b120      	cbz	r0, 800e23e <SDO_getod+0xf6>
 800e234:	4a0b      	ldr	r2, [pc, #44]	; (800e264 <SDO_getod+0x11c>)
 800e236:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e238:	3a12      	subs	r2, #18
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d3f1      	bcc.n	800e222 <SDO_getod+0xda>
         *d = *s;
 800e23e:	7008      	strb	r0, [r1, #0]
         coel->mbxheader.length = htoes (0x0C + n);
 800e240:	330c      	adds	r3, #12
 800e242:	5333      	strh	r3, [r6, r4]
         MBXcontrol[MBXout].state = MBXstate_outreq;
 800e244:	4a09      	ldr	r2, [pc, #36]	; (800e26c <SDO_getod+0x124>)
 800e246:	2303      	movs	r3, #3
 800e248:	5553      	strb	r3, [r2, r5]
         MBXcontrol[0].state = MBXstate_idle;
 800e24a:	2300      	movs	r3, #0
 800e24c:	7013      	strb	r3, [r2, #0]
         ESCvar.xoe = 0;
 800e24e:	4a05      	ldr	r2, [pc, #20]	; (800e264 <SDO_getod+0x11c>)
 800e250:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 800e254:	e002      	b.n	800e25c <SDO_getod+0x114>
      SDO_infoerror (ABORT_NOOBJECT);
 800e256:	4806      	ldr	r0, [pc, #24]	; (800e270 <SDO_getod+0x128>)
 800e258:	f7fe ffd6 	bl	800d208 <SDO_infoerror>
}
 800e25c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e260:	20008838 	.word	0x20008838
 800e264:	2000814c 	.word	0x2000814c
 800e268:	0801557c 	.word	0x0801557c
 800e26c:	20008e38 	.word	0x20008e38
 800e270:	06020000 	.word	0x06020000

0800e274 <SDO_geted>:
{
 800e274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   index = etohs (coer->index);
 800e278:	4b34      	ldr	r3, [pc, #208]	; (800e34c <SDO_geted+0xd8>)
 800e27a:	899d      	ldrh	r5, [r3, #12]
   subindex = coer->subindex;
 800e27c:	7b9e      	ldrb	r6, [r3, #14]
   nidx = SDO_findobject (index);
 800e27e:	b2a8      	uxth	r0, r5
 800e280:	f7ff fa84 	bl	800d78c <SDO_findobject>
   if (nidx >= 0)
 800e284:	1e07      	subs	r7, r0, #0
 800e286:	db5d      	blt.n	800e344 <SDO_geted+0xd0>
      nsub = SDO_findsubindex (nidx, subindex);
 800e288:	4631      	mov	r1, r6
 800e28a:	4638      	mov	r0, r7
 800e28c:	f7ff fa52 	bl	800d734 <SDO_findsubindex>
      if (nsub >= 0)
 800e290:	1e04      	subs	r4, r0, #0
 800e292:	db52      	blt.n	800e33a <SDO_geted+0xc6>
         objd = SDOobjects[nidx].objdesc;
 800e294:	4b2e      	ldr	r3, [pc, #184]	; (800e350 <SDO_geted+0xdc>)
 800e296:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800e29a:	68df      	ldr	r7, [r3, #12]
         MBXout = ESC_claimbuffer ();
 800e29c:	f7fe f898 	bl	800c3d0 <ESC_claimbuffer>
         if (MBXout)
 800e2a0:	4684      	mov	ip, r0
 800e2a2:	2800      	cmp	r0, #0
 800e2a4:	d04c      	beq.n	800e340 <SDO_geted+0xcc>
            coel = (_COEentdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800e2a6:	4b2b      	ldr	r3, [pc, #172]	; (800e354 <SDO_geted+0xe0>)
 800e2a8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e2aa:	fb00 f00c 	mul.w	r0, r0, ip
 800e2ae:	f8df e09c 	ldr.w	lr, [pc, #156]	; 800e34c <SDO_geted+0xd8>
 800e2b2:	eb00 020e 	add.w	r2, r0, lr
            coel->mbxheader.mbxtype = MBXCOE;
 800e2b6:	7953      	ldrb	r3, [r2, #5]
 800e2b8:	2103      	movs	r1, #3
 800e2ba:	f361 0303 	bfi	r3, r1, #0, #4
 800e2be:	7153      	strb	r3, [r2, #5]
            coel->coeheader.numberservice =
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	7193      	strb	r3, [r2, #6]
 800e2c4:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800e2c8:	71d1      	strb	r1, [r2, #7]
            coel->infoheader.opcode = COE_ENTRYDESCRIPTIONRESPONSE;
 800e2ca:	7a11      	ldrb	r1, [r2, #8]
 800e2cc:	f04f 0806 	mov.w	r8, #6
 800e2d0:	f368 0106 	bfi	r1, r8, #0, #7
 800e2d4:	7211      	strb	r1, [r2, #8]
            coel->infoheader.incomplete = 0;
 800e2d6:	b2c9      	uxtb	r1, r1
 800e2d8:	f363 11c7 	bfi	r1, r3, #7, #1
 800e2dc:	7211      	strb	r1, [r2, #8]
            coel->infoheader.reserved = 0x00;
 800e2de:	7253      	strb	r3, [r2, #9]
            coel->infoheader.fragmentsleft = htoes (0);
 800e2e0:	7293      	strb	r3, [r2, #10]
 800e2e2:	72d3      	strb	r3, [r2, #11]
            coel->index = htoes (index);
 800e2e4:	8195      	strh	r5, [r2, #12]
            coel->subindex = subindex;
 800e2e6:	7396      	strb	r6, [r2, #14]
            coel->valueinfo = COE_VALUEINFO_ACCESS +
 800e2e8:	2107      	movs	r1, #7
 800e2ea:	73d1      	strb	r1, [r2, #15]
            coel->datatype = htoes ((objd + nsub)->datatype);
 800e2ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e2f0:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 800e2f4:	8879      	ldrh	r1, [r7, #2]
 800e2f6:	8211      	strh	r1, [r2, #16]
            coel->bitlength = htoes ((objd + nsub)->bitlength);
 800e2f8:	88b9      	ldrh	r1, [r7, #4]
 800e2fa:	8251      	strh	r1, [r2, #18]
            coel->access = htoes ((objd + nsub)->flags);
 800e2fc:	88f9      	ldrh	r1, [r7, #6]
 800e2fe:	8291      	strh	r1, [r2, #20]
            s = (uint8_t *) (objd + nsub)->name;
 800e300:	68bd      	ldr	r5, [r7, #8]
            d = (uint8_t *) &(coel->name);
 800e302:	3216      	adds	r2, #22
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 800e304:	782c      	ldrb	r4, [r5, #0]
 800e306:	b154      	cbz	r4, 800e31e <SDO_geted+0xaa>
 800e308:	4912      	ldr	r1, [pc, #72]	; (800e354 <SDO_geted+0xe0>)
 800e30a:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 800e30c:	3916      	subs	r1, #22
 800e30e:	428b      	cmp	r3, r1
 800e310:	d205      	bcs.n	800e31e <SDO_geted+0xaa>
               *d = *s;
 800e312:	f802 4b01 	strb.w	r4, [r2], #1
               n++;
 800e316:	3301      	adds	r3, #1
 800e318:	b2db      	uxtb	r3, r3
               s++;
 800e31a:	3501      	adds	r5, #1
               d++;
 800e31c:	e7f2      	b.n	800e304 <SDO_geted+0x90>
            *d = *s;
 800e31e:	7014      	strb	r4, [r2, #0]
            coel->mbxheader.length = htoes (0x10 + n);
 800e320:	3310      	adds	r3, #16
 800e322:	f82e 3000 	strh.w	r3, [lr, r0]
            MBXcontrol[MBXout].state = MBXstate_outreq;
 800e326:	4a0c      	ldr	r2, [pc, #48]	; (800e358 <SDO_geted+0xe4>)
 800e328:	2303      	movs	r3, #3
 800e32a:	f802 300c 	strb.w	r3, [r2, ip]
            MBXcontrol[0].state = MBXstate_idle;
 800e32e:	2300      	movs	r3, #0
 800e330:	7013      	strb	r3, [r2, #0]
            ESCvar.xoe = 0;
 800e332:	4a08      	ldr	r2, [pc, #32]	; (800e354 <SDO_geted+0xe0>)
 800e334:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 800e338:	e002      	b.n	800e340 <SDO_geted+0xcc>
         SDO_infoerror (ABORT_NOSUBINDEX);
 800e33a:	4808      	ldr	r0, [pc, #32]	; (800e35c <SDO_geted+0xe8>)
 800e33c:	f7fe ff64 	bl	800d208 <SDO_infoerror>
}
 800e340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SDO_infoerror (ABORT_NOOBJECT);
 800e344:	4806      	ldr	r0, [pc, #24]	; (800e360 <SDO_geted+0xec>)
 800e346:	f7fe ff5f 	bl	800d208 <SDO_infoerror>
}
 800e34a:	e7f9      	b.n	800e340 <SDO_geted+0xcc>
 800e34c:	20008838 	.word	0x20008838
 800e350:	0801557c 	.word	0x0801557c
 800e354:	2000814c 	.word	0x2000814c
 800e358:	20008e38 	.word	0x20008e38
 800e35c:	06090011 	.word	0x06090011
 800e360:	06020000 	.word	0x06020000

0800e364 <sizeOfPDO>:
{
 800e364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e368:	b087      	sub	sp, #28
 800e36a:	9105      	str	r1, [sp, #20]
 800e36c:	9201      	str	r2, [sp, #4]
 800e36e:	469b      	mov	fp, r3
   if ((index != RX_PDO_OBJIDX) && (index != TX_PDO_OBJIDX))
 800e370:	f5a0 53e0 	sub.w	r3, r0, #7168	; 0x1c00
 800e374:	3b12      	subs	r3, #18
 800e376:	b29b      	uxth	r3, r3
 800e378:	2b01      	cmp	r3, #1
 800e37a:	f200 80ae 	bhi.w	800e4da <sizeOfPDO+0x176>
   nidx = SDO_findobject (index);
 800e37e:	f7ff fa05 	bl	800d78c <SDO_findobject>
   if(nidx < 0)
 800e382:	2800      	cmp	r0, #0
 800e384:	f2c0 80ad 	blt.w	800e4e2 <sizeOfPDO+0x17e>
   objd1c1x = SDOobjects[nidx].objdesc;
 800e388:	4b57      	ldr	r3, [pc, #348]	; (800e4e8 <sizeOfPDO+0x184>)
 800e38a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	9304      	str	r3, [sp, #16]
   si = OBJ_VALUE_FETCH (si, objd1c1x[0]);
 800e392:	691b      	ldr	r3, [r3, #16]
 800e394:	b19b      	cbz	r3, 800e3be <sizeOfPDO+0x5a>
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	9303      	str	r3, [sp, #12]
   if (si)
 800e39a:	9b03      	ldr	r3, [sp, #12]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	f040 8092 	bne.w	800e4c6 <sizeOfPDO+0x162>
   int mapIx = 0;
 800e3a2:	f04f 0800 	mov.w	r8, #0
   uint32_t offset = 0;
 800e3a6:	4647      	mov	r7, r8
   if (max_mappings > 0)
 800e3a8:	f1bb 0f00 	cmp.w	fp, #0
 800e3ac:	f340 8091 	ble.w	800e4d2 <sizeOfPDO+0x16e>
      *nmappings = mapIx;
 800e3b0:	9b05      	ldr	r3, [sp, #20]
 800e3b2:	f8c3 8000 	str.w	r8, [r3]
   return BITS2BYTES (offset) & 0xFFFF;
 800e3b6:	1df8      	adds	r0, r7, #7
 800e3b8:	f3c0 00cf 	ubfx	r0, r0, #3, #16
 800e3bc:	e08e      	b.n	800e4dc <sizeOfPDO+0x178>
   si = OBJ_VALUE_FETCH (si, objd1c1x[0]);
 800e3be:	9b04      	ldr	r3, [sp, #16]
 800e3c0:	7b1b      	ldrb	r3, [r3, #12]
 800e3c2:	9303      	str	r3, [sp, #12]
 800e3c4:	e7e9      	b.n	800e39a <sizeOfPDO+0x36>
         hobj = OBJ_VALUE_FETCH (hobj, objd1c1x[sic]);
 800e3c6:	8998      	ldrh	r0, [r3, #12]
 800e3c8:	e06c      	b.n	800e4a4 <sizeOfPDO+0x140>
            maxsub = OBJ_VALUE_FETCH (maxsub, objd[0]);
 800e3ca:	f89a 300c 	ldrb.w	r3, [sl, #12]
 800e3ce:	9300      	str	r3, [sp, #0]
 800e3d0:	e077      	b.n	800e4c2 <sizeOfPDO+0x15e>
               uint32_t value = OBJ_VALUE_FETCH (value, objd[c]);
 800e3d2:	68de      	ldr	r6, [r3, #12]
 800e3d4:	e036      	b.n	800e444 <sizeOfPDO+0xe0>
                     *nmappings = -1;
 800e3d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3da:	9a05      	ldr	r2, [sp, #20]
 800e3dc:	6013      	str	r3, [r2, #0]
                     return 0;
 800e3de:	2000      	movs	r0, #0
 800e3e0:	e07c      	b.n	800e4dc <sizeOfPDO+0x178>
                     nidx = SDO_findobject (index);
 800e3e2:	f7ff f9d3 	bl	800d78c <SDO_findobject>
                     if (nidx >= 0)
 800e3e6:	1e05      	subs	r5, r0, #0
 800e3e8:	db41      	blt.n	800e46e <sizeOfPDO+0x10a>
                        nsub = SDO_findsubindex (nidx, subindex);
 800e3ea:	4649      	mov	r1, r9
 800e3ec:	4628      	mov	r0, r5
 800e3ee:	f7ff f9a1 	bl	800d734 <SDO_findsubindex>
                        if (nsub < 0)
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	db35      	blt.n	800e462 <sizeOfPDO+0xfe>
                        mapping = &SDOobjects[nidx].objdesc[nsub];
 800e3f6:	4b3c      	ldr	r3, [pc, #240]	; (800e4e8 <sizeOfPDO+0x184>)
 800e3f8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e402:	eb03 0380 	add.w	r3, r3, r0, lsl #2
                  mappings[mapIx].obj = mapping;
 800e406:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800e40a:	9801      	ldr	r0, [sp, #4]
 800e40c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800e410:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
                  if(mapping != NULL)
 800e414:	2b00      	cmp	r3, #0
 800e416:	d030      	beq.n	800e47a <sizeOfPDO+0x116>
                     mappings[mapIx].objectlistitem = &SDOobjects[nidx];
 800e418:	4b33      	ldr	r3, [pc, #204]	; (800e4e8 <sizeOfPDO+0x184>)
 800e41a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800e41e:	604b      	str	r3, [r1, #4]
                  mappings[mapIx++].offset = offset;
 800e420:	f108 0801 	add.w	r8, r8, #1
 800e424:	608f      	str	r7, [r1, #8]
               offset += bitlength;
 800e426:	fa57 f786 	uxtab	r7, r7, r6
            for (c = 1; c <= maxsub; c++)
 800e42a:	3401      	adds	r4, #1
 800e42c:	b2e4      	uxtb	r4, r4
 800e42e:	9b00      	ldr	r3, [sp, #0]
 800e430:	429c      	cmp	r4, r3
 800e432:	d825      	bhi.n	800e480 <sizeOfPDO+0x11c>
               uint32_t value = OBJ_VALUE_FETCH (value, objd[c]);
 800e434:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e438:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800e43c:	691a      	ldr	r2, [r3, #16]
 800e43e:	2a00      	cmp	r2, #0
 800e440:	d0c7      	beq.n	800e3d2 <sizeOfPDO+0x6e>
 800e442:	6816      	ldr	r6, [r2, #0]
               if (max_mappings > 0)
 800e444:	f1bb 0f00 	cmp.w	fp, #0
 800e448:	dded      	ble.n	800e426 <sizeOfPDO+0xc2>
                  uint16_t index = (uint16_t)(value >> 16);
 800e44a:	0c30      	lsrs	r0, r6, #16
                  uint8_t subindex = (value >> 8) & 0xFF;
 800e44c:	f3c6 2907 	ubfx	r9, r6, #8, #8
                  if (mapIx == max_mappings)
 800e450:	45d8      	cmp	r8, fp
 800e452:	d0c0      	beq.n	800e3d6 <sizeOfPDO+0x72>
                  if (index == 0 && subindex == 0)
 800e454:	2800      	cmp	r0, #0
 800e456:	d1c4      	bne.n	800e3e2 <sizeOfPDO+0x7e>
 800e458:	f1b9 0f00 	cmp.w	r9, #0
 800e45c:	d1c1      	bne.n	800e3e2 <sizeOfPDO+0x7e>
                     mapping = NULL;
 800e45e:	2300      	movs	r3, #0
 800e460:	e7d1      	b.n	800e406 <sizeOfPDO+0xa2>
                           *nmappings = -1;
 800e462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e466:	9a05      	ldr	r2, [sp, #20]
 800e468:	6013      	str	r3, [r2, #0]
                           return 0;
 800e46a:	2000      	movs	r0, #0
 800e46c:	e036      	b.n	800e4dc <sizeOfPDO+0x178>
                        *nmappings = -1;
 800e46e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e472:	9a05      	ldr	r2, [sp, #20]
 800e474:	6013      	str	r3, [r2, #0]
                        return 0;
 800e476:	2000      	movs	r0, #0
 800e478:	e030      	b.n	800e4dc <sizeOfPDO+0x178>
                     mappings[mapIx].objectlistitem = NULL;
 800e47a:	2300      	movs	r3, #0
 800e47c:	604b      	str	r3, [r1, #4]
 800e47e:	e7cf      	b.n	800e420 <sizeOfPDO+0xbc>
      for (sic = 1; sic <= si; sic++)
 800e480:	9b02      	ldr	r3, [sp, #8]
 800e482:	3301      	adds	r3, #1
 800e484:	b2db      	uxtb	r3, r3
 800e486:	9302      	str	r3, [sp, #8]
 800e488:	9b02      	ldr	r3, [sp, #8]
 800e48a:	9a03      	ldr	r2, [sp, #12]
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d88b      	bhi.n	800e3a8 <sizeOfPDO+0x44>
         hobj = OBJ_VALUE_FETCH (hobj, objd1c1x[sic]);
 800e490:	9b02      	ldr	r3, [sp, #8]
 800e492:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e496:	9a04      	ldr	r2, [sp, #16]
 800e498:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e49c:	691a      	ldr	r2, [r3, #16]
 800e49e:	2a00      	cmp	r2, #0
 800e4a0:	d091      	beq.n	800e3c6 <sizeOfPDO+0x62>
 800e4a2:	8810      	ldrh	r0, [r2, #0]
         nidx = SDO_findobject (hobj);
 800e4a4:	f7ff f972 	bl	800d78c <SDO_findobject>
         if (nidx >= 0)
 800e4a8:	1e05      	subs	r5, r0, #0
 800e4aa:	dbe9      	blt.n	800e480 <sizeOfPDO+0x11c>
            objd = SDOobjects[nidx].objdesc;
 800e4ac:	4b0e      	ldr	r3, [pc, #56]	; (800e4e8 <sizeOfPDO+0x184>)
 800e4ae:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800e4b2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
            maxsub = OBJ_VALUE_FETCH (maxsub, objd[0]);
 800e4b6:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d085      	beq.n	800e3ca <sizeOfPDO+0x66>
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	9300      	str	r3, [sp, #0]
            for (c = 1; c <= maxsub; c++)
 800e4c2:	2401      	movs	r4, #1
 800e4c4:	e7b3      	b.n	800e42e <sizeOfPDO+0xca>
   int mapIx = 0;
 800e4c6:	f04f 0800 	mov.w	r8, #0
      for (sic = 1; sic <= si; sic++)
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	9302      	str	r3, [sp, #8]
   uint32_t offset = 0;
 800e4ce:	4647      	mov	r7, r8
 800e4d0:	e7da      	b.n	800e488 <sizeOfPDO+0x124>
      *nmappings = 0;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	9a05      	ldr	r2, [sp, #20]
 800e4d6:	6013      	str	r3, [r2, #0]
 800e4d8:	e76d      	b.n	800e3b6 <sizeOfPDO+0x52>
      return 0;
 800e4da:	2000      	movs	r0, #0
}
 800e4dc:	b007      	add	sp, #28
 800e4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return 0;
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	e7fa      	b.n	800e4dc <sizeOfPDO+0x178>
 800e4e6:	bf00      	nop
 800e4e8:	0801557c 	.word	0x0801557c

0800e4ec <ESC_coeprocess>:
{
 800e4ec:	b508      	push	{r3, lr}
   if (ESCvar.MBXrun == 0)
 800e4ee:	4b4f      	ldr	r3, [pc, #316]	; (800e62c <ESC_coeprocess+0x140>)
 800e4f0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800e4f4:	b1a3      	cbz	r3, 800e520 <ESC_coeprocess+0x34>
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 800e4f6:	4b4d      	ldr	r3, [pc, #308]	; (800e62c <ESC_coeprocess+0x140>)
 800e4f8:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800e4fc:	b91b      	cbnz	r3, 800e506 <ESC_coeprocess+0x1a>
 800e4fe:	4b4c      	ldr	r3, [pc, #304]	; (800e630 <ESC_coeprocess+0x144>)
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	2b01      	cmp	r3, #1
 800e504:	d00d      	beq.n	800e522 <ESC_coeprocess+0x36>
   if ((ESCvar.xoe == (MBXCOE + MBXODL)) && (!ESCvar.mbxoutpost))
 800e506:	4b49      	ldr	r3, [pc, #292]	; (800e62c <ESC_coeprocess+0x140>)
 800e508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e50c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800e510:	f5b3 1f98 	cmp.w	r3, #1245184	; 0x130000
 800e514:	d018      	beq.n	800e548 <ESC_coeprocess+0x5c>
   if (ESCvar.xoe == MBXCOE)   {
 800e516:	4b45      	ldr	r3, [pc, #276]	; (800e62c <ESC_coeprocess+0x140>)
 800e518:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800e51c:	2b03      	cmp	r3, #3
 800e51e:	d016      	beq.n	800e54e <ESC_coeprocess+0x62>
}
 800e520:	bd08      	pop	{r3, pc}
      if (mbh->mbxtype == MBXCOE)
 800e522:	4b44      	ldr	r3, [pc, #272]	; (800e634 <ESC_coeprocess+0x148>)
 800e524:	795b      	ldrb	r3, [r3, #5]
 800e526:	f003 030f 	and.w	r3, r3, #15
 800e52a:	2b03      	cmp	r3, #3
 800e52c:	d1eb      	bne.n	800e506 <ESC_coeprocess+0x1a>
         if (etohs (mbh->length) < COE_MINIMUM_LENGTH)
 800e52e:	4b41      	ldr	r3, [pc, #260]	; (800e634 <ESC_coeprocess+0x148>)
 800e530:	881b      	ldrh	r3, [r3, #0]
 800e532:	2b07      	cmp	r3, #7
 800e534:	d904      	bls.n	800e540 <ESC_coeprocess+0x54>
            ESCvar.xoe = MBXCOE;
 800e536:	4b3d      	ldr	r3, [pc, #244]	; (800e62c <ESC_coeprocess+0x140>)
 800e538:	2203      	movs	r2, #3
 800e53a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 800e53e:	e7e2      	b.n	800e506 <ESC_coeprocess+0x1a>
            MBX_error (MBXERR_INVALIDSIZE);
 800e540:	2008      	movs	r0, #8
 800e542:	f7fd ff91 	bl	800c468 <MBX_error>
 800e546:	e7de      	b.n	800e506 <ESC_coeprocess+0x1a>
      SDO_getodlistcont ();
 800e548:	f7fe fdf6 	bl	800d138 <SDO_getodlistcont>
 800e54c:	e7e3      	b.n	800e516 <ESC_coeprocess+0x2a>
      service = etohs (coesdo->coeheader.numberservice) >> 12;
 800e54e:	4b39      	ldr	r3, [pc, #228]	; (800e634 <ESC_coeprocess+0x148>)
 800e550:	88db      	ldrh	r3, [r3, #6]
 800e552:	0b1b      	lsrs	r3, r3, #12
      if (service == COE_SDOREQUEST)
 800e554:	2b02      	cmp	r3, #2
 800e556:	d011      	beq.n	800e57c <ESC_coeprocess+0x90>
         if ((service == COE_SDOINFORMATION)
 800e558:	2b08      	cmp	r3, #8
 800e55a:	d042      	beq.n	800e5e2 <ESC_coeprocess+0xf6>
            if ((service == COE_SDOINFORMATION)
 800e55c:	2b08      	cmp	r3, #8
 800e55e:	d049      	beq.n	800e5f4 <ESC_coeprocess+0x108>
               if ((service == COE_SDOINFORMATION)
 800e560:	2b08      	cmp	r3, #8
 800e562:	d050      	beq.n	800e606 <ESC_coeprocess+0x11a>
                     if (service == 0)
 800e564:	2b00      	cmp	r3, #0
 800e566:	d157      	bne.n	800e618 <ESC_coeprocess+0x12c>
                        MBX_error (MBXERR_INVALIDHEADER);
 800e568:	2005      	movs	r0, #5
 800e56a:	f7fd ff7d 	bl	800c468 <MBX_error>
                     MBXcontrol[0].state = MBXstate_idle;
 800e56e:	2300      	movs	r3, #0
 800e570:	4a2f      	ldr	r2, [pc, #188]	; (800e630 <ESC_coeprocess+0x144>)
 800e572:	7013      	strb	r3, [r2, #0]
                     ESCvar.xoe = 0;
 800e574:	4a2d      	ldr	r2, [pc, #180]	; (800e62c <ESC_coeprocess+0x140>)
 800e576:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 800e57a:	e7d1      	b.n	800e520 <ESC_coeprocess+0x34>
         if ((SDO_COMMAND(coesdo->command) == COE_COMMAND_UPLOADREQUEST)
 800e57c:	4b2d      	ldr	r3, [pc, #180]	; (800e634 <ESC_coeprocess+0x148>)
 800e57e:	7a1a      	ldrb	r2, [r3, #8]
 800e580:	f002 03e0 	and.w	r3, r2, #224	; 0xe0
 800e584:	2b40      	cmp	r3, #64	; 0x40
 800e586:	d00a      	beq.n	800e59e <ESC_coeprocess+0xb2>
         else if (((coesdo->command & 0xef) == COE_COMMAND_UPLOADSEGREQ)
 800e588:	f002 01ef 	and.w	r1, r2, #239	; 0xef
 800e58c:	2960      	cmp	r1, #96	; 0x60
 800e58e:	d013      	beq.n	800e5b8 <ESC_coeprocess+0xcc>
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADREQUEST)
 800e590:	2b20      	cmp	r3, #32
 800e592:	d01d      	beq.n	800e5d0 <ESC_coeprocess+0xe4>
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADSEGREQ)
 800e594:	2b00      	cmp	r3, #0
 800e596:	d1c3      	bne.n	800e520 <ESC_coeprocess+0x34>
            SDO_downloadsegment ();
 800e598:	f7ff fd2a 	bl	800dff0 <SDO_downloadsegment>
 800e59c:	e7c0      	b.n	800e520 <ESC_coeprocess+0x34>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE))
 800e59e:	4925      	ldr	r1, [pc, #148]	; (800e634 <ESC_coeprocess+0x148>)
 800e5a0:	8809      	ldrh	r1, [r1, #0]
 800e5a2:	290a      	cmp	r1, #10
 800e5a4:	d1f0      	bne.n	800e588 <ESC_coeprocess+0x9c>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 800e5a6:	f012 0f10 	tst.w	r2, #16
 800e5aa:	d002      	beq.n	800e5b2 <ESC_coeprocess+0xc6>
               SDO_upload_complete_access ();
 800e5ac:	f7ff f924 	bl	800d7f8 <SDO_upload_complete_access>
 800e5b0:	e7b6      	b.n	800e520 <ESC_coeprocess+0x34>
               SDO_upload ();
 800e5b2:	f7ff fb0f 	bl	800dbd4 <SDO_upload>
 800e5b6:	e7b3      	b.n	800e520 <ESC_coeprocess+0x34>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE)
 800e5b8:	491e      	ldr	r1, [pc, #120]	; (800e634 <ESC_coeprocess+0x148>)
 800e5ba:	8809      	ldrh	r1, [r1, #0]
 800e5bc:	290a      	cmp	r1, #10
 800e5be:	d1e7      	bne.n	800e590 <ESC_coeprocess+0xa4>
               && (ESCvar.segmented == MBXSEU))
 800e5c0:	491a      	ldr	r1, [pc, #104]	; (800e62c <ESC_coeprocess+0x140>)
 800e5c2:	f891 1091 	ldrb.w	r1, [r1, #145]	; 0x91
 800e5c6:	2940      	cmp	r1, #64	; 0x40
 800e5c8:	d1e2      	bne.n	800e590 <ESC_coeprocess+0xa4>
            SDO_uploadsegment ();
 800e5ca:	f7fe ff3b 	bl	800d444 <SDO_uploadsegment>
 800e5ce:	e7a7      	b.n	800e520 <ESC_coeprocess+0x34>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 800e5d0:	f012 0f10 	tst.w	r2, #16
 800e5d4:	d002      	beq.n	800e5dc <ESC_coeprocess+0xf0>
               SDO_download_complete_access ();
 800e5d6:	f7ff fa13 	bl	800da00 <SDO_download_complete_access>
 800e5da:	e7a1      	b.n	800e520 <ESC_coeprocess+0x34>
               SDO_download ();
 800e5dc:	f7ff fc04 	bl	800dde8 <SDO_download>
 800e5e0:	e79e      	b.n	800e520 <ESC_coeprocess+0x34>
               && (coeobjdesc->infoheader.opcode == 0x01))
 800e5e2:	4a14      	ldr	r2, [pc, #80]	; (800e634 <ESC_coeprocess+0x148>)
 800e5e4:	7a12      	ldrb	r2, [r2, #8]
 800e5e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e5ea:	2a01      	cmp	r2, #1
 800e5ec:	d1b6      	bne.n	800e55c <ESC_coeprocess+0x70>
            SDO_getodlist ();
 800e5ee:	f7fe fe41 	bl	800d274 <SDO_getodlist>
 800e5f2:	e795      	b.n	800e520 <ESC_coeprocess+0x34>
                  && (coeobjdesc->infoheader.opcode == 0x03))
 800e5f4:	4a0f      	ldr	r2, [pc, #60]	; (800e634 <ESC_coeprocess+0x148>)
 800e5f6:	7a12      	ldrb	r2, [r2, #8]
 800e5f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e5fc:	2a03      	cmp	r2, #3
 800e5fe:	d1af      	bne.n	800e560 <ESC_coeprocess+0x74>
               SDO_getod ();
 800e600:	f7ff fda2 	bl	800e148 <SDO_getod>
 800e604:	e78c      	b.n	800e520 <ESC_coeprocess+0x34>
                     && (coeobjdesc->infoheader.opcode == 0x05))
 800e606:	4a0b      	ldr	r2, [pc, #44]	; (800e634 <ESC_coeprocess+0x148>)
 800e608:	7a12      	ldrb	r2, [r2, #8]
 800e60a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e60e:	2a05      	cmp	r2, #5
 800e610:	d1a8      	bne.n	800e564 <ESC_coeprocess+0x78>
                  SDO_geted ();
 800e612:	f7ff fe2f 	bl	800e274 <SDO_geted>
 800e616:	e783      	b.n	800e520 <ESC_coeprocess+0x34>
                        SDO_abort (0, etohs (coesdo->index), coesdo->subindex, ABORT_UNSUPPORTED);
 800e618:	4906      	ldr	r1, [pc, #24]	; (800e634 <ESC_coeprocess+0x148>)
 800e61a:	4b07      	ldr	r3, [pc, #28]	; (800e638 <ESC_coeprocess+0x14c>)
 800e61c:	7aca      	ldrb	r2, [r1, #11]
 800e61e:	f8b1 1009 	ldrh.w	r1, [r1, #9]
 800e622:	2000      	movs	r0, #0
 800e624:	f7fe fec4 	bl	800d3b0 <SDO_abort>
 800e628:	e7a1      	b.n	800e56e <ESC_coeprocess+0x82>
 800e62a:	bf00      	nop
 800e62c:	2000814c 	.word	0x2000814c
 800e630:	20008e38 	.word	0x20008e38
 800e634:	20008838 	.word	0x20008838
 800e638:	06010000 	.word	0x06010000

0800e63c <COE_initDefaultValues>:
   const _objd *objd;
   int n;
   uint8_t maxsub;

   /* Let application decide if initialization will be skipped */
   if (ESCvar.skip_default_initialization)
 800e63c:	4b18      	ldr	r3, [pc, #96]	; (800e6a0 <COE_initDefaultValues+0x64>)
 800e63e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e642:	bb63      	cbnz	r3, 800e69e <COE_initDefaultValues+0x62>
{
 800e644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   {
      return;
   }

   /* Set default values from object descriptor */
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 800e648:	f04f 0800 	mov.w	r8, #0
 800e64c:	e012      	b.n	800e674 <COE_initDefaultValues+0x38>
      i = 0;
      do
      {
         if (objd[i].data != NULL)
         {
            COE_setValue (&objd[i], objd[i].value);
 800e64e:	68c2      	ldr	r2, [r0, #12]
 800e650:	2300      	movs	r3, #0
 800e652:	f7fe fd42 	bl	800d0da <COE_setValue>
            DPRINT ("%04x:%02x = %x\n", SDOobjects[n].index, objd[i].subindex, objd[i].value);
         }
      } while (objd[i++].subindex < maxsub);
 800e656:	3401      	adds	r4, #1
 800e658:	5b72      	ldrh	r2, [r6, r5]
 800e65a:	b2bb      	uxth	r3, r7
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d207      	bcs.n	800e670 <COE_initDefaultValues+0x34>
         if (objd[i].data != NULL)
 800e660:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e664:	009d      	lsls	r5, r3, #2
 800e666:	1970      	adds	r0, r6, r5
 800e668:	6903      	ldr	r3, [r0, #16]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d1ef      	bne.n	800e64e <COE_initDefaultValues+0x12>
 800e66e:	e7f2      	b.n	800e656 <COE_initDefaultValues+0x1a>
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 800e670:	f108 0801 	add.w	r8, r8, #1
 800e674:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800e678:	4a0a      	ldr	r2, [pc, #40]	; (800e6a4 <COE_initDefaultValues+0x68>)
 800e67a:	5ad2      	ldrh	r2, [r2, r3]
 800e67c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e680:	429a      	cmp	r2, r3
 800e682:	d006      	beq.n	800e692 <COE_initDefaultValues+0x56>
      objd = SDOobjects[n].objdesc;
 800e684:	4b07      	ldr	r3, [pc, #28]	; (800e6a4 <COE_initDefaultValues+0x68>)
 800e686:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e68a:	68de      	ldr	r6, [r3, #12]
      maxsub = SDOobjects[n].maxsub;
 800e68c:	791f      	ldrb	r7, [r3, #4]
      i = 0;
 800e68e:	2400      	movs	r4, #0
 800e690:	e7e6      	b.n	800e660 <COE_initDefaultValues+0x24>
   }

   /* Let application override default values */
   if (ESCvar.set_defaults_hook != NULL)
 800e692:	4b03      	ldr	r3, [pc, #12]	; (800e6a0 <COE_initDefaultValues+0x64>)
 800e694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e696:	b103      	cbz	r3, 800e69a <COE_initDefaultValues+0x5e>
   {
      ESCvar.set_defaults_hook();
 800e698:	4798      	blx	r3
   }
}
 800e69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e69e:	4770      	bx	lr
 800e6a0:	2000814c 	.word	0x2000814c
 800e6a4:	0801557c 	.word	0x0801557c

0800e6a8 <COE_pdoPack>:
 * @param[in] buffer     = input process data
 * @param[in] nmappings  = number of mappings in sync manager
 * @param[in] mappings   = list of mapped objects in sync manager
 */
void COE_pdoPack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 800e6a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6ac:	b083      	sub	sp, #12
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 800e6ae:	f010 0f07 	tst.w	r0, #7
 800e6b2:	d104      	bne.n	800e6be <COE_pdoPack+0x16>
 800e6b4:	4680      	mov	r8, r0
 800e6b6:	460f      	mov	r7, r1
 800e6b8:	4616      	mov	r6, r2

   for (ix = 0; ix < nmappings; ix++)
 800e6ba:	2400      	movs	r4, #0
 800e6bc:	e010      	b.n	800e6e0 <COE_pdoPack+0x38>
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 800e6be:	4b15      	ldr	r3, [pc, #84]	; (800e714 <COE_pdoPack+0x6c>)
 800e6c0:	4a15      	ldr	r2, [pc, #84]	; (800e718 <COE_pdoPack+0x70>)
 800e6c2:	f240 61ff 	movw	r1, #1791	; 0x6ff
 800e6c6:	4815      	ldr	r0, [pc, #84]	; (800e71c <COE_pdoPack+0x74>)
 800e6c8:	f003 f9a4 	bl	8011a14 <__assert_func>
            );
         }
         else
         {
            /* Atomically get object value */
            uint64_t value = COE_getValue (obj);
 800e6cc:	f7fe fff2 	bl	800d6b4 <COE_getValue>
            COE_bitsliceSet (
 800e6d0:	e9cd 0100 	strd	r0, r1, [sp]
 800e6d4:	462a      	mov	r2, r5
 800e6d6:	4649      	mov	r1, r9
 800e6d8:	4640      	mov	r0, r8
 800e6da:	f7fe fc76 	bl	800cfca <COE_bitsliceSet>
   for (ix = 0; ix < nmappings; ix++)
 800e6de:	3401      	adds	r4, #1
 800e6e0:	42bc      	cmp	r4, r7
 800e6e2:	da14      	bge.n	800e70e <COE_pdoPack+0x66>
      const _objd * obj = mappings[ix].obj;
 800e6e4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e6e8:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800e6ec:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
      uint32_t offset = mappings[ix].offset;
 800e6f0:	f8d2 9008 	ldr.w	r9, [r2, #8]
      if (obj != NULL)
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	d0f2      	beq.n	800e6de <COE_pdoPack+0x36>
         if (obj->bitlength > 64)
 800e6f8:	8885      	ldrh	r5, [r0, #4]
 800e6fa:	2d40      	cmp	r5, #64	; 0x40
 800e6fc:	d9e6      	bls.n	800e6cc <COE_pdoPack+0x24>
               BITS2BYTES (obj->bitlength)
 800e6fe:	1dea      	adds	r2, r5, #7
            memcpy (
 800e700:	08d2      	lsrs	r2, r2, #3
 800e702:	6901      	ldr	r1, [r0, #16]
 800e704:	eb08 00d9 	add.w	r0, r8, r9, lsr #3
 800e708:	f003 fbae 	bl	8011e68 <memcpy>
 800e70c:	e7e7      	b.n	800e6de <COE_pdoPack+0x36>
               value
            );
         }
      }
   }
}
 800e70e:	b003      	add	sp, #12
 800e710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e714:	08013664 	.word	0x08013664
 800e718:	080136a4 	.word	0x080136a4
 800e71c:	08013640 	.word	0x08013640

0800e720 <COE_pdoUnpack>:
 * @param[in] buffer    = output process data
 * @param[in] nmappings = number of mappings in sync manager
 * @param[in] mappings  = list of mapped objects in sync manager
 */
void COE_pdoUnpack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 800e720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 800e724:	f010 0f07 	tst.w	r0, #7
 800e728:	d104      	bne.n	800e734 <COE_pdoUnpack+0x14>
 800e72a:	4680      	mov	r8, r0
 800e72c:	460f      	mov	r7, r1
 800e72e:	4616      	mov	r6, r2

   for (ix = 0; ix < nmappings; ix++)
 800e730:	2400      	movs	r4, #0
 800e732:	e00f      	b.n	800e754 <COE_pdoUnpack+0x34>
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 800e734:	4b13      	ldr	r3, [pc, #76]	; (800e784 <COE_pdoUnpack+0x64>)
 800e736:	4a14      	ldr	r2, [pc, #80]	; (800e788 <COE_pdoUnpack+0x68>)
 800e738:	f240 712e 	movw	r1, #1838	; 0x72e
 800e73c:	4813      	ldr	r0, [pc, #76]	; (800e78c <COE_pdoUnpack+0x6c>)
 800e73e:	f003 f969 	bl	8011a14 <__assert_func>
            );
         }
         else
         {
            /* Atomically set object value */
            uint64_t value = COE_bitsliceGet (
 800e742:	4640      	mov	r0, r8
 800e744:	f7fe fbef 	bl	800cf26 <COE_bitsliceGet>
 800e748:	4602      	mov	r2, r0
 800e74a:	460b      	mov	r3, r1
               (uint64_t *)buffer,
               offset,
               obj->bitlength
            );
            COE_setValue (obj, value);
 800e74c:	4628      	mov	r0, r5
 800e74e:	f7fe fcc4 	bl	800d0da <COE_setValue>
   for (ix = 0; ix < nmappings; ix++)
 800e752:	3401      	adds	r4, #1
 800e754:	42bc      	cmp	r4, r7
 800e756:	da13      	bge.n	800e780 <COE_pdoUnpack+0x60>
      const _objd * obj = mappings[ix].obj;
 800e758:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e75c:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800e760:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
      uint32_t offset = mappings[ix].offset;
 800e764:	6891      	ldr	r1, [r2, #8]
      if (obj != NULL)
 800e766:	2d00      	cmp	r5, #0
 800e768:	d0f3      	beq.n	800e752 <COE_pdoUnpack+0x32>
         if (obj->bitlength > 64)
 800e76a:	88aa      	ldrh	r2, [r5, #4]
 800e76c:	2a40      	cmp	r2, #64	; 0x40
 800e76e:	d9e8      	bls.n	800e742 <COE_pdoUnpack+0x22>
               BITS2BYTES (obj->bitlength)
 800e770:	3207      	adds	r2, #7
            memcpy (
 800e772:	08d2      	lsrs	r2, r2, #3
 800e774:	eb08 01d1 	add.w	r1, r8, r1, lsr #3
 800e778:	6928      	ldr	r0, [r5, #16]
 800e77a:	f003 fb75 	bl	8011e68 <memcpy>
 800e77e:	e7e8      	b.n	800e752 <COE_pdoUnpack+0x32>
         }
      }
   }
}
 800e780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e784:	08013664 	.word	0x08013664
 800e788:	08013684 	.word	0x08013684
 800e78c:	08013640 	.word	0x08013640

0800e790 <COE_maxSub>:
 * This function fetches the value of subindex 0 (max subindex).
 *
 * @param[in] index = object index
 */
uint8_t COE_maxSub (uint16_t index)
{
 800e790:	b508      	push	{r3, lr}
   int32_t nidx;
   uint8_t maxsub;

   nidx = SDO_findobject (index);
 800e792:	f7fe fffb 	bl	800d78c <SDO_findobject>
   if (nidx == -1)
 800e796:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e79a:	d009      	beq.n	800e7b0 <COE_maxSub+0x20>
      return 0;

   maxsub = OBJ_VALUE_FETCH (maxsub, SDOobjects[nidx].objdesc[0]);
 800e79c:	4b05      	ldr	r3, [pc, #20]	; (800e7b4 <COE_maxSub+0x24>)
 800e79e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800e7a2:	68da      	ldr	r2, [r3, #12]
 800e7a4:	6913      	ldr	r3, [r2, #16]
 800e7a6:	b10b      	cbz	r3, 800e7ac <COE_maxSub+0x1c>
 800e7a8:	7818      	ldrb	r0, [r3, #0]
   return maxsub;
}
 800e7aa:	bd08      	pop	{r3, pc}
   maxsub = OBJ_VALUE_FETCH (maxsub, SDOobjects[nidx].objdesc[0]);
 800e7ac:	7b10      	ldrb	r0, [r2, #12]
 800e7ae:	e7fc      	b.n	800e7aa <COE_maxSub+0x1a>
      return 0;
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	e7fa      	b.n	800e7aa <COE_maxSub+0x1a>
 800e7b4:	0801557c 	.word	0x0801557c

0800e7b8 <ESC_read_pram>:
   } while(value & LAN9252_ESC_CSR_CMD_BUSY);
}

/* ESC read process data ram function */
static void ESC_read_pram (uint16_t address, void *buf, uint16_t len)
{
 800e7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7bc:	b0c2      	sub	sp, #264	; 0x108
 800e7be:	4607      	mov	r7, r0
 800e7c0:	4688      	mov	r8, r1
 800e7c2:	4615      	mov	r5, r2
   uint32_t value;
   uint8_t * temp_buf = buf;
   uint16_t quotient, remainder, byte_offset = 0;
   uint8_t fifo_cnt, fifo_size, fifo_range, first_byte_position, temp_len;
   uint8_t buffer[256] = {0};
 800e7c4:	2100      	movs	r1, #0
 800e7c6:	9101      	str	r1, [sp, #4]
 800e7c8:	22fc      	movs	r2, #252	; 0xfc
 800e7ca:	a802      	add	r0, sp, #8
 800e7cc:	f003 fa8e 	bl	8011cec <memset>
   int i, size;

   lan9252_write_32 (LAN9252_ESC_PRAM_RD_CMD_REG, LAN9252_ESC_PRAM_CMD_ABORT);
 800e7d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e7d4:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800e7d8:	f7fc fea4 	bl	800b524 <lan9252_write_32>

   do
   {
      value = lan9252_read_32 (LAN9252_ESC_PRAM_RD_CMD_REG);
 800e7dc:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800e7e0:	f7fc fe6c 	bl	800b4bc <lan9252_read_32>
 800e7e4:	9041      	str	r0, [sp, #260]	; 0x104
   } while(value & LAN9252_ESC_PRAM_CMD_BUSY);
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	dbf8      	blt.n	800e7dc <ESC_read_pram+0x24>

   lan9252_write_32 (LAN9252_ESC_PRAM_RD_ADDR_LEN_REG, (LAN9252_ESC_PRAM_SIZE(len) | LAN9252_ESC_PRAM_ADDR(address)));
 800e7ea:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800e7ee:	f44f 7042 	mov.w	r0, #776	; 0x308
 800e7f2:	f7fc fe97 	bl	800b524 <lan9252_write_32>
   lan9252_write_32 (LAN9252_ESC_PRAM_RD_CMD_REG, LAN9252_ESC_PRAM_CMD_BUSY);
 800e7f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e7fa:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800e7fe:	f7fc fe91 	bl	800b524 <lan9252_write_32>

   /* Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet and MicroChip SDK code
    */
   first_byte_position = (address & 0x03);
 800e802:	f007 0703 	and.w	r7, r7, #3
   uint16_t quotient, remainder, byte_offset = 0;
 800e806:	2600      	movs	r6, #0

   /* Transfer data */
   while (len > 0)
 800e808:	2d00      	cmp	r5, #0
 800e80a:	d06f      	beq.n	800e8ec <ESC_read_pram+0x134>
   {
      /* Wait for read availability */
      if (byte_offset > 0)
 800e80c:	b346      	cbz	r6, 800e860 <ESC_read_pram+0xa8>
      {
         quotient = len/4;
 800e80e:	08ac      	lsrs	r4, r5, #2
         remainder = len - quotient*4;
 800e810:	f005 0303 	and.w	r3, r5, #3
      {
         quotient = (len + first_byte_position)/4;
         remainder = (len + first_byte_position) - quotient*4;
      }

      if (remainder != 0)
 800e814:	b10b      	cbz	r3, 800e81a <ESC_read_pram+0x62>
      {
         quotient++;
 800e816:	3401      	adds	r4, #1
 800e818:	b2a4      	uxth	r4, r4
      }

      fifo_range = MIN(quotient,16);
 800e81a:	2c10      	cmp	r4, #16
 800e81c:	bf28      	it	cs
 800e81e:	2410      	movcs	r4, #16
 800e820:	b2e4      	uxtb	r4, r4

      do
      {
         value = lan9252_read_32 (LAN9252_ESC_PRAM_RD_CMD_REG);
 800e822:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800e826:	f7fc fe49 	bl	800b4bc <lan9252_read_32>
 800e82a:	9041      	str	r0, [sp, #260]	; 0x104
      }while(!(value & LAN9252_ESC_PRAM_CMD_AVAIL) || (LAN9252_ESC_PRAM_CMD_CNT(value) < fifo_range));
 800e82c:	f010 0f01 	tst.w	r0, #1
 800e830:	d0f7      	beq.n	800e822 <ESC_read_pram+0x6a>
 800e832:	ea4f 2910 	mov.w	r9, r0, lsr #8
 800e836:	f3c0 2004 	ubfx	r0, r0, #8, #5
 800e83a:	42a0      	cmp	r0, r4
 800e83c:	d3f1      	bcc.n	800e822 <ESC_read_pram+0x6a>

      /* Fifo size */
      fifo_size = LAN9252_ESC_PRAM_CMD_CNT(value);
 800e83e:	f009 091f 	and.w	r9, r9, #31

      /* Transfer data size */
      size = 4*fifo_size;
 800e842:	ea4f 0489 	mov.w	r4, r9, lsl #2

      /* Reset fifo count */
      fifo_cnt = fifo_size;

      /* Reset buffer */
      memset(buffer,0,size);
 800e846:	4622      	mov	r2, r4
 800e848:	2100      	movs	r1, #0
 800e84a:	a801      	add	r0, sp, #4
 800e84c:	f003 fa4e 	bl	8011cec <memset>

      /* Transfer batch of data */
      lan9252_read_data ((uint8_t *)buffer, LAN9252_ESC_PRAM_RD_FIFO_REG, size);
 800e850:	4622      	mov	r2, r4
 800e852:	2100      	movs	r1, #0
 800e854:	a801      	add	r0, sp, #4
 800e856:	f7fc fe03 	bl	800b460 <lan9252_read_data>

      i = 0;
 800e85a:	f04f 0a00 	mov.w	sl, #0
      while (fifo_cnt > 0 && len > 0)
 800e85e:	e01f      	b.n	800e8a0 <ESC_read_pram+0xe8>
         quotient = (len + first_byte_position)/4;
 800e860:	19ec      	adds	r4, r5, r7
 800e862:	f3c4 048f 	ubfx	r4, r4, #2, #16
         remainder = (len + first_byte_position) - quotient*4;
 800e866:	19eb      	adds	r3, r5, r7
 800e868:	b29b      	uxth	r3, r3
 800e86a:	00a2      	lsls	r2, r4, #2
 800e86c:	b292      	uxth	r2, r2
 800e86e:	1a9b      	subs	r3, r3, r2
 800e870:	b29b      	uxth	r3, r3
 800e872:	e7cf      	b.n	800e814 <ESC_read_pram+0x5c>
            temp_len = (len > 4) ? 4: len;
            memcpy(temp_buf + byte_offset ,&value, temp_len);
         }
         else
         {
            temp_len = (len > (4 - first_byte_position)) ? (4 - first_byte_position) : len;
 800e874:	f1c7 0404 	rsb	r4, r7, #4
 800e878:	42ac      	cmp	r4, r5
 800e87a:	bfa8      	it	ge
 800e87c:	462c      	movge	r4, r5
 800e87e:	b2e4      	uxtb	r4, r4
            memcpy(temp_buf ,((uint8_t *)&value + first_byte_position), temp_len);
 800e880:	4622      	mov	r2, r4
 800e882:	ab41      	add	r3, sp, #260	; 0x104
 800e884:	19d9      	adds	r1, r3, r7
 800e886:	4640      	mov	r0, r8
 800e888:	f003 faee 	bl	8011e68 <memcpy>
         }

         i += 4;
 800e88c:	f10a 0a04 	add.w	sl, sl, #4
         fifo_cnt--;
 800e890:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e894:	fa5f f989 	uxtb.w	r9, r9
         len -= temp_len;
 800e898:	1b2d      	subs	r5, r5, r4
 800e89a:	b2ad      	uxth	r5, r5
         byte_offset += temp_len;
 800e89c:	4434      	add	r4, r6
 800e89e:	b2a6      	uxth	r6, r4
      while (fifo_cnt > 0 && len > 0)
 800e8a0:	f1b9 0f00 	cmp.w	r9, #0
 800e8a4:	d0b0      	beq.n	800e808 <ESC_read_pram+0x50>
 800e8a6:	2d00      	cmp	r5, #0
 800e8a8:	d0ae      	beq.n	800e808 <ESC_read_pram+0x50>
         value = buffer[i] | (buffer[i+1] << 8) | (buffer[i+2] << 16) | (buffer[i+3] << 24);
 800e8aa:	aa01      	add	r2, sp, #4
 800e8ac:	f812 300a 	ldrb.w	r3, [r2, sl]
 800e8b0:	f10a 0101 	add.w	r1, sl, #1
 800e8b4:	5c51      	ldrb	r1, [r2, r1]
 800e8b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e8ba:	f10a 0102 	add.w	r1, sl, #2
 800e8be:	5c51      	ldrb	r1, [r2, r1]
 800e8c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800e8c4:	f10a 0103 	add.w	r1, sl, #3
 800e8c8:	5c52      	ldrb	r2, [r2, r1]
 800e8ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e8ce:	9341      	str	r3, [sp, #260]	; 0x104
         if (byte_offset > 0)
 800e8d0:	2e00      	cmp	r6, #0
 800e8d2:	d0cf      	beq.n	800e874 <ESC_read_pram+0xbc>
            temp_len = (len > 4) ? 4: len;
 800e8d4:	462c      	mov	r4, r5
 800e8d6:	2d04      	cmp	r5, #4
 800e8d8:	bf28      	it	cs
 800e8da:	2404      	movcs	r4, #4
 800e8dc:	b2e4      	uxtb	r4, r4
            memcpy(temp_buf + byte_offset ,&value, temp_len);
 800e8de:	4622      	mov	r2, r4
 800e8e0:	a941      	add	r1, sp, #260	; 0x104
 800e8e2:	eb08 0006 	add.w	r0, r8, r6
 800e8e6:	f003 fabf 	bl	8011e68 <memcpy>
 800e8ea:	e7cf      	b.n	800e88c <ESC_read_pram+0xd4>
      }

      // vPortFree(buffer);
   }
}
 800e8ec:	b042      	add	sp, #264	; 0x108
 800e8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e8f2 <ESC_read_csr>:
{
 800e8f2:	b530      	push	{r4, r5, lr}
 800e8f4:	b083      	sub	sp, #12
 800e8f6:	460d      	mov	r5, r1
 800e8f8:	4614      	mov	r4, r2
   value = (LAN9252_ESC_CSR_CMD_READ | LAN9252_ESC_CSR_CMD_SIZE(len) | address);
 800e8fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e8fe:	f040 4140 	orr.w	r1, r0, #3221225472	; 0xc0000000
 800e902:	9101      	str	r1, [sp, #4]
   lan9252_write_32 (LAN9252_ESC_CSR_CMD_REG, value);
 800e904:	f44f 7041 	mov.w	r0, #772	; 0x304
 800e908:	f7fc fe0c 	bl	800b524 <lan9252_write_32>
      value = lan9252_read_32 (LAN9252_ESC_CSR_CMD_REG);
 800e90c:	f44f 7041 	mov.w	r0, #772	; 0x304
 800e910:	f7fc fdd4 	bl	800b4bc <lan9252_read_32>
 800e914:	9001      	str	r0, [sp, #4]
   } while (value & LAN9252_ESC_CSR_CMD_BUSY);
 800e916:	2800      	cmp	r0, #0
 800e918:	dbf8      	blt.n	800e90c <ESC_read_csr+0x1a>
   value = lan9252_read_32 (LAN9252_ESC_CSR_DATA_REG);
 800e91a:	f44f 7040 	mov.w	r0, #768	; 0x300
 800e91e:	f7fc fdcd 	bl	800b4bc <lan9252_read_32>
 800e922:	9001      	str	r0, [sp, #4]
   memcpy(buf, (uint8_t *)&value, len);
 800e924:	4622      	mov	r2, r4
 800e926:	a901      	add	r1, sp, #4
 800e928:	4628      	mov	r0, r5
 800e92a:	f003 fa9d 	bl	8011e68 <memcpy>
}
 800e92e:	b003      	add	sp, #12
 800e930:	bd30      	pop	{r4, r5, pc}

0800e932 <ESC_write_csr>:
{
 800e932:	b530      	push	{r4, r5, lr}
 800e934:	b083      	sub	sp, #12
 800e936:	4604      	mov	r4, r0
 800e938:	4615      	mov	r5, r2
   memcpy((uint8_t*)&value, buf,len);
 800e93a:	a801      	add	r0, sp, #4
 800e93c:	f003 fa94 	bl	8011e68 <memcpy>
   lan9252_write_32 (LAN9252_ESC_CSR_DATA_REG, value);
 800e940:	9901      	ldr	r1, [sp, #4]
 800e942:	f44f 7040 	mov.w	r0, #768	; 0x300
 800e946:	f7fc fded 	bl	800b524 <lan9252_write_32>
   value = (LAN9252_ESC_CSR_CMD_WRITE | LAN9252_ESC_CSR_CMD_SIZE(len) | address);
 800e94a:	ea44 4105 	orr.w	r1, r4, r5, lsl #16
 800e94e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800e952:	9101      	str	r1, [sp, #4]
   lan9252_write_32 (LAN9252_ESC_CSR_CMD_REG, value);
 800e954:	f44f 7041 	mov.w	r0, #772	; 0x304
 800e958:	f7fc fde4 	bl	800b524 <lan9252_write_32>
      value = lan9252_read_32 (LAN9252_ESC_CSR_CMD_REG);
 800e95c:	f44f 7041 	mov.w	r0, #772	; 0x304
 800e960:	f7fc fdac 	bl	800b4bc <lan9252_read_32>
 800e964:	9001      	str	r0, [sp, #4]
   } while(value & LAN9252_ESC_CSR_CMD_BUSY);
 800e966:	2800      	cmp	r0, #0
 800e968:	dbf8      	blt.n	800e95c <ESC_write_csr+0x2a>
}
 800e96a:	b003      	add	sp, #12
 800e96c:	bd30      	pop	{r4, r5, pc}

0800e96e <ESC_write_pram>:

/* ESC write process data ram function */
static void ESC_write_pram (uint16_t address, void *buf, uint16_t len)
{
 800e96e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e972:	b0c3      	sub	sp, #268	; 0x10c
 800e974:	4607      	mov	r7, r0
 800e976:	4688      	mov	r8, r1
 800e978:	4615      	mov	r5, r2
   uint32_t value;
   uint8_t * temp_buf = buf;
   uint16_t quotient, remainder, byte_offset = 0;
   uint8_t fifo_cnt, fifo_size, fifo_range, first_byte_position, temp_len;
   uint8_t buffer[256] = {0};
 800e97a:	2100      	movs	r1, #0
 800e97c:	9101      	str	r1, [sp, #4]
 800e97e:	22fc      	movs	r2, #252	; 0xfc
 800e980:	a802      	add	r0, sp, #8
 800e982:	f003 f9b3 	bl	8011cec <memset>
   int i, size;

   lan9252_write_32 (LAN9252_ESC_PRAM_WR_CMD_REG, LAN9252_ESC_PRAM_CMD_ABORT);
 800e986:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e98a:	f44f 7045 	mov.w	r0, #788	; 0x314
 800e98e:	f7fc fdc9 	bl	800b524 <lan9252_write_32>

   do
   {
      value = lan9252_read_32 (LAN9252_ESC_PRAM_WR_CMD_REG);
 800e992:	f44f 7045 	mov.w	r0, #788	; 0x314
 800e996:	f7fc fd91 	bl	800b4bc <lan9252_read_32>
 800e99a:	9041      	str	r0, [sp, #260]	; 0x104
   } while(value & LAN9252_ESC_PRAM_CMD_BUSY);
 800e99c:	2800      	cmp	r0, #0
 800e99e:	dbf8      	blt.n	800e992 <ESC_write_pram+0x24>

   lan9252_write_32 (LAN9252_ESC_PRAM_WR_ADDR_LEN_REG, (LAN9252_ESC_PRAM_SIZE(len) | LAN9252_ESC_PRAM_ADDR(address)));
 800e9a0:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800e9a4:	f44f 7044 	mov.w	r0, #784	; 0x310
 800e9a8:	f7fc fdbc 	bl	800b524 <lan9252_write_32>
   lan9252_write_32 (LAN9252_ESC_PRAM_WR_CMD_REG, LAN9252_ESC_PRAM_CMD_BUSY);
 800e9ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e9b0:	f44f 7045 	mov.w	r0, #788	; 0x314
 800e9b4:	f7fc fdb6 	bl	800b524 <lan9252_write_32>

   /* Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet and MicroChip SDK code
    */
   first_byte_position = (address & 0x03);
 800e9b8:	f007 0703 	and.w	r7, r7, #3
   uint16_t quotient, remainder, byte_offset = 0;
 800e9bc:	2600      	movs	r6, #0

   /* Transfer data */
   while (len > 0)
 800e9be:	e048      	b.n	800ea52 <ESC_write_pram+0xe4>
         quotient = len/4;
         remainder = len - quotient*4;
      }
      else
      {
         quotient = (len + first_byte_position)/4;
 800e9c0:	19ec      	adds	r4, r5, r7
 800e9c2:	f3c4 048f 	ubfx	r4, r4, #2, #16
         remainder = (len + first_byte_position) - quotient*4;
 800e9c6:	19eb      	adds	r3, r5, r7
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	00a2      	lsls	r2, r4, #2
 800e9cc:	b292      	uxth	r2, r2
 800e9ce:	1a9b      	subs	r3, r3, r2
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	e044      	b.n	800ea5e <ESC_write_pram+0xf0>
            temp_len = (len > 4) ? 4: len;
            memcpy(&value, (temp_buf + byte_offset), temp_len);
         }
         else
         {
            temp_len = (len > (4 - first_byte_position)) ? (4 - first_byte_position) : len;
 800e9d4:	f1c7 0404 	rsb	r4, r7, #4
 800e9d8:	42ac      	cmp	r4, r5
 800e9da:	bfa8      	it	ge
 800e9dc:	462c      	movge	r4, r5
 800e9de:	b2e4      	uxtb	r4, r4
            memcpy(((uint8_t *)&value + first_byte_position), temp_buf, temp_len);
 800e9e0:	4622      	mov	r2, r4
 800e9e2:	4641      	mov	r1, r8
 800e9e4:	ab41      	add	r3, sp, #260	; 0x104
 800e9e6:	19d8      	adds	r0, r3, r7
 800e9e8:	f003 fa3e 	bl	8011e68 <memcpy>
         }

         buffer[i] = (value & 0xFF);
 800e9ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e9ee:	aa01      	add	r2, sp, #4
 800e9f0:	f802 300a 	strb.w	r3, [r2, sl]
         buffer[i+1] = ((value >> 8) & 0xFF);
 800e9f4:	0a18      	lsrs	r0, r3, #8
 800e9f6:	f10a 0101 	add.w	r1, sl, #1
 800e9fa:	5450      	strb	r0, [r2, r1]
         buffer[i+2] = ((value >> 16) & 0xFF);
 800e9fc:	0c18      	lsrs	r0, r3, #16
 800e9fe:	f10a 0102 	add.w	r1, sl, #2
 800ea02:	5450      	strb	r0, [r2, r1]
         buffer[i+3] = ((value >> 24) & 0xFF);
 800ea04:	0e1b      	lsrs	r3, r3, #24
 800ea06:	f10a 0103 	add.w	r1, sl, #3
 800ea0a:	5453      	strb	r3, [r2, r1]

         i += 4;
 800ea0c:	f10a 0a04 	add.w	sl, sl, #4
         fifo_cnt--;
 800ea10:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ea14:	fa5f f989 	uxtb.w	r9, r9
         len -= temp_len;
 800ea18:	1b2d      	subs	r5, r5, r4
 800ea1a:	b2ad      	uxth	r5, r5
         byte_offset += temp_len;
 800ea1c:	4434      	add	r4, r6
 800ea1e:	b2a6      	uxth	r6, r4
      while (fifo_cnt > 0 && len > 0)
 800ea20:	f1b9 0f00 	cmp.w	r9, #0
 800ea24:	d010      	beq.n	800ea48 <ESC_write_pram+0xda>
 800ea26:	b17d      	cbz	r5, 800ea48 <ESC_write_pram+0xda>
         value = 0;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	9341      	str	r3, [sp, #260]	; 0x104
         if (byte_offset > 0)
 800ea2c:	2e00      	cmp	r6, #0
 800ea2e:	d0d1      	beq.n	800e9d4 <ESC_write_pram+0x66>
            temp_len = (len > 4) ? 4: len;
 800ea30:	462c      	mov	r4, r5
 800ea32:	2d04      	cmp	r5, #4
 800ea34:	bf28      	it	cs
 800ea36:	2404      	movcs	r4, #4
 800ea38:	b2e4      	uxtb	r4, r4
            memcpy(&value, (temp_buf + byte_offset), temp_len);
 800ea3a:	4622      	mov	r2, r4
 800ea3c:	eb08 0106 	add.w	r1, r8, r6
 800ea40:	a841      	add	r0, sp, #260	; 0x104
 800ea42:	f003 fa11 	bl	8011e68 <memcpy>
 800ea46:	e7d1      	b.n	800e9ec <ESC_write_pram+0x7e>
      }

      /* Transfer batch of data */
      lan9252_write_data ((uint8_t *)buffer, LAN9252_ESC_PRAM_WR_FIFO_REG, size);
 800ea48:	465a      	mov	r2, fp
 800ea4a:	2120      	movs	r1, #32
 800ea4c:	a801      	add	r0, sp, #4
 800ea4e:	f7fc fd51 	bl	800b4f4 <lan9252_write_data>
   while (len > 0)
 800ea52:	b32d      	cbz	r5, 800eaa0 <ESC_write_pram+0x132>
      if (byte_offset > 0)
 800ea54:	2e00      	cmp	r6, #0
 800ea56:	d0b3      	beq.n	800e9c0 <ESC_write_pram+0x52>
         quotient = len/4;
 800ea58:	08ac      	lsrs	r4, r5, #2
         remainder = len - quotient*4;
 800ea5a:	f005 0303 	and.w	r3, r5, #3
      if (remainder != 0)
 800ea5e:	b10b      	cbz	r3, 800ea64 <ESC_write_pram+0xf6>
         quotient++;
 800ea60:	3401      	adds	r4, #1
 800ea62:	b2a4      	uxth	r4, r4
      fifo_range = MIN(quotient,16);
 800ea64:	2c10      	cmp	r4, #16
 800ea66:	bf28      	it	cs
 800ea68:	2410      	movcs	r4, #16
 800ea6a:	b2e4      	uxtb	r4, r4
         value = lan9252_read_32 (LAN9252_ESC_PRAM_WR_CMD_REG);
 800ea6c:	f44f 7045 	mov.w	r0, #788	; 0x314
 800ea70:	f7fc fd24 	bl	800b4bc <lan9252_read_32>
 800ea74:	9041      	str	r0, [sp, #260]	; 0x104
      }while(!(value & LAN9252_ESC_PRAM_CMD_AVAIL) || (LAN9252_ESC_PRAM_CMD_CNT(value) < fifo_range));
 800ea76:	f010 0f01 	tst.w	r0, #1
 800ea7a:	d0f7      	beq.n	800ea6c <ESC_write_pram+0xfe>
 800ea7c:	ea4f 2910 	mov.w	r9, r0, lsr #8
 800ea80:	f3c0 2004 	ubfx	r0, r0, #8, #5
 800ea84:	42a0      	cmp	r0, r4
 800ea86:	d3f1      	bcc.n	800ea6c <ESC_write_pram+0xfe>
      fifo_size = LAN9252_ESC_PRAM_CMD_CNT(value);
 800ea88:	f009 091f 	and.w	r9, r9, #31
      size = 4*fifo_size;
 800ea8c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
      memset(buffer,0,size);
 800ea90:	465a      	mov	r2, fp
 800ea92:	2100      	movs	r1, #0
 800ea94:	a801      	add	r0, sp, #4
 800ea96:	f003 f929 	bl	8011cec <memset>
      i = 0;
 800ea9a:	f04f 0a00 	mov.w	sl, #0
      while (fifo_cnt > 0 && len > 0)
 800ea9e:	e7bf      	b.n	800ea20 <ESC_write_pram+0xb2>
      // vPortFree(buffer);
   }
}
 800eaa0:	b043      	add	sp, #268	; 0x10c
 800eaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800eaa8 <ESC_read>:
 * @param[in]   address     = address of ESC register to read
 * @param[out]  buf         = pointer to buffer to read in
 * @param[in]   len         = number of bytes to read
 */
void ESC_read (uint16_t address, void *buf, uint16_t len)
{
 800eaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaaa:	4604      	mov	r4, r0
 800eaac:	460f      	mov	r7, r1
 800eaae:	4615      	mov	r5, r2
   /* Select Read function depending on address, process data ram or not */
   if (address >= 0x1000)
 800eab0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800eab4:	d31e      	bcc.n	800eaf4 <ESC_read+0x4c>
   {
      ESC_read_pram (address, buf, len);
 800eab6:	f7ff fe7f 	bl	800e7b8 <ESC_read_pram>
         temp_buf += size;
         address += size;
      }
   }
   /* To mimic the ET1100 always providing AlEvent on every read or write */
   ESC_read_csr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
 800eaba:	4c18      	ldr	r4, [pc, #96]	; (800eb1c <ESC_read+0x74>)
 800eabc:	2204      	movs	r2, #4
 800eabe:	4621      	mov	r1, r4
 800eac0:	f44f 7008 	mov.w	r0, #544	; 0x220
 800eac4:	f7ff ff15 	bl	800e8f2 <ESC_read_csr>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 800eac8:	4621      	mov	r1, r4
 800eaca:	f851 39e4 	ldr.w	r3, [r1], #-228
 800eace:	b29b      	uxth	r3, r3
 800ead0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4

}
 800ead4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         else if (size == 3)
 800ead6:	2d03      	cmp	r5, #3
 800ead8:	d102      	bne.n	800eae0 <ESC_read+0x38>
            size = 1;
 800eada:	2601      	movs	r6, #1
 800eadc:	e000      	b.n	800eae0 <ESC_read+0x38>
            size = 1;
 800eade:	2601      	movs	r6, #1
         ESC_read_csr(address, temp_buf, size);
 800eae0:	4632      	mov	r2, r6
 800eae2:	4639      	mov	r1, r7
 800eae4:	4620      	mov	r0, r4
 800eae6:	f7ff ff04 	bl	800e8f2 <ESC_read_csr>
         len -= size;
 800eaea:	1bad      	subs	r5, r5, r6
 800eaec:	b2ad      	uxth	r5, r5
         temp_buf += size;
 800eaee:	4437      	add	r7, r6
         address += size;
 800eaf0:	4434      	add	r4, r6
 800eaf2:	b2a4      	uxth	r4, r4
      while(len > 0)
 800eaf4:	2d00      	cmp	r5, #0
 800eaf6:	d0e0      	beq.n	800eaba <ESC_read+0x12>
         size = (len > 4) ? 4 : len;
 800eaf8:	462e      	mov	r6, r5
 800eafa:	2d04      	cmp	r5, #4
 800eafc:	bf28      	it	cs
 800eafe:	2604      	movcs	r6, #4
         if(address & BIT(0))
 800eb00:	f014 0f01 	tst.w	r4, #1
 800eb04:	d1eb      	bne.n	800eade <ESC_read+0x36>
         else if (address & BIT(1))
 800eb06:	f014 0f02 	tst.w	r4, #2
 800eb0a:	d0e4      	beq.n	800ead6 <ESC_read+0x2e>
            size = (size & BIT(0)) ? 1 : 2;
 800eb0c:	f016 0f01 	tst.w	r6, #1
 800eb10:	d001      	beq.n	800eb16 <ESC_read+0x6e>
 800eb12:	2601      	movs	r6, #1
 800eb14:	e7e4      	b.n	800eae0 <ESC_read+0x38>
 800eb16:	2602      	movs	r6, #2
 800eb18:	e7e2      	b.n	800eae0 <ESC_read+0x38>
 800eb1a:	bf00      	nop
 800eb1c:	20008230 	.word	0x20008230

0800eb20 <ESC_write>:
 * @param[in]   address     = address of ESC register to write
 * @param[out]  buf         = pointer to buffer to write from
 * @param[in]   len         = number of bytes to write
 */
void ESC_write (uint16_t address, void *buf, uint16_t len)
{
 800eb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb22:	4604      	mov	r4, r0
 800eb24:	460f      	mov	r7, r1
 800eb26:	4615      	mov	r5, r2
   /* Select Write function depending on address, process data ram or not */
   if (address >= 0x1000)
 800eb28:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800eb2c:	d31e      	bcc.n	800eb6c <ESC_write+0x4c>
   {
      ESC_write_pram(address, buf, len);
 800eb2e:	f7ff ff1e 	bl	800e96e <ESC_write_pram>
         address += size;
      }
   }

   /* To mimic the ET1x00 always providing AlEvent on every read or write */
   ESC_read_csr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
 800eb32:	4c18      	ldr	r4, [pc, #96]	; (800eb94 <ESC_write+0x74>)
 800eb34:	2204      	movs	r2, #4
 800eb36:	4621      	mov	r1, r4
 800eb38:	f44f 7008 	mov.w	r0, #544	; 0x220
 800eb3c:	f7ff fed9 	bl	800e8f2 <ESC_read_csr>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 800eb40:	4621      	mov	r1, r4
 800eb42:	f851 39e4 	ldr.w	r3, [r1], #-228
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
}
 800eb4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         else if (size == 3)
 800eb4e:	2d03      	cmp	r5, #3
 800eb50:	d102      	bne.n	800eb58 <ESC_write+0x38>
            size = 1;
 800eb52:	2601      	movs	r6, #1
 800eb54:	e000      	b.n	800eb58 <ESC_write+0x38>
            size = 1;
 800eb56:	2601      	movs	r6, #1
         ESC_write_csr(address, temp_buf, size);
 800eb58:	4632      	mov	r2, r6
 800eb5a:	4639      	mov	r1, r7
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	f7ff fee8 	bl	800e932 <ESC_write_csr>
         len -= size;
 800eb62:	1bad      	subs	r5, r5, r6
 800eb64:	b2ad      	uxth	r5, r5
         temp_buf += size;
 800eb66:	4437      	add	r7, r6
         address += size;
 800eb68:	4434      	add	r4, r6
 800eb6a:	b2a4      	uxth	r4, r4
      while(len > 0)
 800eb6c:	2d00      	cmp	r5, #0
 800eb6e:	d0e0      	beq.n	800eb32 <ESC_write+0x12>
         size = (len > 4) ? 4 : len;
 800eb70:	462e      	mov	r6, r5
 800eb72:	2d04      	cmp	r5, #4
 800eb74:	bf28      	it	cs
 800eb76:	2604      	movcs	r6, #4
         if(address & BIT(0))
 800eb78:	f014 0f01 	tst.w	r4, #1
 800eb7c:	d1eb      	bne.n	800eb56 <ESC_write+0x36>
         else if (address & BIT(1))
 800eb7e:	f014 0f02 	tst.w	r4, #2
 800eb82:	d0e4      	beq.n	800eb4e <ESC_write+0x2e>
            size = (size & BIT(0)) ? 1 : 2;
 800eb84:	f016 0f01 	tst.w	r6, #1
 800eb88:	d001      	beq.n	800eb8e <ESC_write+0x6e>
 800eb8a:	2601      	movs	r6, #1
 800eb8c:	e7e4      	b.n	800eb58 <ESC_write+0x38>
 800eb8e:	2602      	movs	r6, #2
 800eb90:	e7e2      	b.n	800eb58 <ESC_write+0x38>
 800eb92:	bf00      	nop
 800eb94:	20008230 	.word	0x20008230

0800eb98 <ESC_init>:
{

}

void ESC_init (const esc_cfg_t * config)
{
 800eb98:	b510      	push	{r4, lr}
   uint32_t counter = 0;
   uint32_t timeout = 1000; // wait 100msec

   // start initialization
   // Reset the ecat core here due to evb-lan9252-digio not having any GPIO for that purpose.
   lan9252_write_32(LAN9252_ESC_CMD_RESET_CTL, LAN9252_ESC_RESET_CTRL_RST);
 800eb9a:	2141      	movs	r1, #65	; 0x41
 800eb9c:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 800eba0:	f7fc fcc0 	bl	800b524 <lan9252_write_32>
   uint32_t counter = 0;
 800eba4:	2400      	movs	r4, #0

   // Wait until reset command has been executed
   do
   {
      osDelay(100);
 800eba6:	2064      	movs	r0, #100	; 0x64
 800eba8:	f7f9 fcd3 	bl	8008552 <osDelay>
      counter++;
 800ebac:	3401      	adds	r4, #1
      value = lan9252_read_32(LAN9252_ESC_CMD_RESET_CTL);
 800ebae:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 800ebb2:	f7fc fc83 	bl	800b4bc <lan9252_read_32>
   } while ((value & LAN9252_ESC_RESET_CTRL_RST) && (counter < timeout));
 800ebb6:	f010 0f41 	tst.w	r0, #65	; 0x41
 800ebba:	d002      	beq.n	800ebc2 <ESC_init+0x2a>
 800ebbc:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800ebc0:	d3f1      	bcc.n	800eba6 <ESC_init+0xe>

   // Perform byte test
   do
   {
      osDelay(100);
 800ebc2:	2064      	movs	r0, #100	; 0x64
 800ebc4:	f7f9 fcc5 	bl	8008552 <osDelay>
      counter++;
 800ebc8:	3401      	adds	r4, #1
      value = lan9252_read_32(LAN9252_ESC_CMD_BYTE_TEST);
 800ebca:	2064      	movs	r0, #100	; 0x64
 800ebcc:	f7fc fc76 	bl	800b4bc <lan9252_read_32>
   } while ((value != LAN9252_ESC_BYTE_TEST_OK) && (counter < timeout));
 800ebd0:	4b0f      	ldr	r3, [pc, #60]	; (800ec10 <ESC_init+0x78>)
 800ebd2:	4298      	cmp	r0, r3
 800ebd4:	d002      	beq.n	800ebdc <ESC_init+0x44>
 800ebd6:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800ebda:	d3f2      	bcc.n	800ebc2 <ESC_init+0x2a>

   // Check hardware is ready
   do
   {
      osDelay(100);
 800ebdc:	2064      	movs	r0, #100	; 0x64
 800ebde:	f7f9 fcb8 	bl	8008552 <osDelay>
      counter++;
 800ebe2:	3401      	adds	r4, #1
      value = lan9252_read_32(LAN9252_ESC_CMD_HW_CFG);
 800ebe4:	2074      	movs	r0, #116	; 0x74
 800ebe6:	f7fc fc69 	bl	800b4bc <lan9252_read_32>
   } while (!(value & LAN9252_ESC_HW_CFG_READY) && (counter < timeout));
 800ebea:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 800ebee:	d102      	bne.n	800ebf6 <ESC_init+0x5e>
 800ebf0:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800ebf4:	d3f2      	bcc.n	800ebdc <ESC_init+0x44>

   // Check if timeout occured
   if (counter < timeout)
 800ebf6:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800ebfa:	d300      	bcc.n	800ebfe <ESC_init+0x66>
   }
   else
   {
      DPRINT("Timeout occurred during reset \n");
   }
}
 800ebfc:	bd10      	pop	{r4, pc}
      value = lan9252_read_32(LAN9252_ESC_CMD_ID_REV);
 800ebfe:	2050      	movs	r0, #80	; 0x50
 800ec00:	f7fc fc5c 	bl	800b4bc <lan9252_read_32>
      ESC_ALeventmaskwrite(value);
 800ec04:	f240 3011 	movw	r0, #785	; 0x311
 800ec08:	f7fd f9e0 	bl	800bfcc <ESC_ALeventmaskwrite>
}
 800ec0c:	e7f6      	b.n	800ebfc <ESC_init+0x64>
 800ec0e:	bf00      	nop
 800ec10:	87654321 	.word	0x87654321

0800ec14 <SpiDma_Init>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

bool SpiDma_Init (tSpiDmaModule * const me)
{
 800ec14:	b570      	push	{r4, r5, r6, lr}
   bool ret = true;

   /* Create the spiDma event group. */
   spiDma_event = xEventGroupCreate();
 800ec16:	f7f9 fcc4 	bl	80085a2 <xEventGroupCreate>
 800ec1a:	4b0a      	ldr	r3, [pc, #40]	; (800ec44 <SpiDma_Init+0x30>)
 800ec1c:	6018      	str	r0, [r3, #0]
   
   /* Was the event group created successfully? */
   if (NULL == spiDma_event) {
 800ec1e:	b178      	cbz	r0, 800ec40 <SpiDma_Init+0x2c>
   bool ret = true;
 800ec20:	2601      	movs	r6, #1
      ret = false;
   }

   /* Clear the buffer. */
   bzero (SPIDMA_Rx_Buffer, SPIDMA_RX_SIZE);
 800ec22:	4c09      	ldr	r4, [pc, #36]	; (800ec48 <SpiDma_Init+0x34>)
 800ec24:	f44f 7580 	mov.w	r5, #256	; 0x100
 800ec28:	462a      	mov	r2, r5
 800ec2a:	2100      	movs	r1, #0
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	f003 f85d 	bl	8011cec <memset>
   bzero (SPIDMA_Tx_Buffer, SPIDMA_TX_SIZE);
 800ec32:	462a      	mov	r2, r5
 800ec34:	2100      	movs	r1, #0
 800ec36:	1960      	adds	r0, r4, r5
 800ec38:	f003 f858 	bl	8011cec <memset>

   return ret;
}
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	bd70      	pop	{r4, r5, r6, pc}
      ret = false;
 800ec40:	2600      	movs	r6, #0
 800ec42:	e7ee      	b.n	800ec22 <SpiDma_Init+0xe>
 800ec44:	20009844 	.word	0x20009844
 800ec48:	2000d150 	.word	0x2000d150

0800ec4c <SpiDma_CsPinChangeState>:
{
   return ((me->states != SPIDMA_IDLE) ? true : false);
}

void SpiDma_CsPinChangeState (tSpiDmaModule * const me, bool state)
{
 800ec4c:	b508      	push	{r3, lr}
   GPIO_PinState pinSt = GPIO_PIN_RESET;

   pinSt = (true == state) ? (me->config.csActiveLevel) : 
 800ec4e:	b129      	cbz	r1, 800ec5c <SpiDma_CsPinChangeState+0x10>
 800ec50:	7802      	ldrb	r2, [r0, #0]
      ((GPIO_PIN_RESET == me->config.csActiveLevel) ? GPIO_PIN_SET : GPIO_PIN_RESET);
   
   HAL_GPIO_WritePin (me->config.csPort, me->config.csPin, pinSt);
 800ec52:	8901      	ldrh	r1, [r0, #8]
 800ec54:	6840      	ldr	r0, [r0, #4]
 800ec56:	f7f3 fce5 	bl	8002624 <HAL_GPIO_WritePin>
}
 800ec5a:	bd08      	pop	{r3, pc}
      ((GPIO_PIN_RESET == me->config.csActiveLevel) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800ec5c:	7802      	ldrb	r2, [r0, #0]
 800ec5e:	fab2 f282 	clz	r2, r2
 800ec62:	0952      	lsrs	r2, r2, #5
 800ec64:	e7f5      	b.n	800ec52 <SpiDma_CsPinChangeState+0x6>
	...

0800ec68 <SpiDma_write>:
{
   bool ret = true;
   EventBits_t bits = (EventBits_t)0U; 

   /* Verify the parameters input. */
   if (NULL == me)
 800ec68:	b378      	cbz	r0, 800ecca <SpiDma_write+0x62>
{
 800ec6a:	b570      	push	{r4, r5, r6, lr}
 800ec6c:	b082      	sub	sp, #8
 800ec6e:	460c      	mov	r4, r1
 800ec70:	4615      	mov	r5, r2
 800ec72:	4606      	mov	r6, r0
   {
      /* Pointer to the module SpiDma is NULL. */
      ret = false;
   }
   else if (NULL == data_ptr)
 800ec74:	b359      	cbz	r1, 800ecce <SpiDma_write+0x66>
   {
      /* Pointer to data array is NULL. */
      ret = false;
   }
   else if (0 >= len)
 800ec76:	b912      	cbnz	r2, 800ec7e <SpiDma_write+0x16>
   {
      /* The length of data input is equal 0. */
      ret = false;
 800ec78:	2000      	movs	r0, #0
      }
   }

   /* Return state. */
   return ret;
}
 800ec7a:	b002      	add	sp, #8
 800ec7c:	bd70      	pop	{r4, r5, r6, pc}
      taskENTER_CRITICAL();
 800ec7e:	f7fb f9e9 	bl	800a054 <vPortEnterCritical>
      memcpy (me->ptrTxArr, data_ptr, len);
 800ec82:	462a      	mov	r2, r5
 800ec84:	4621      	mov	r1, r4
 800ec86:	69b0      	ldr	r0, [r6, #24]
 800ec88:	f003 f8ee 	bl	8011e68 <memcpy>
      HAL_SPI_Transmit_DMA (me->spiModule, me->ptrTxArr, len);
 800ec8c:	462a      	mov	r2, r5
 800ec8e:	69b1      	ldr	r1, [r6, #24]
 800ec90:	6970      	ldr	r0, [r6, #20]
 800ec92:	f7f6 f89b 	bl	8004dcc <HAL_SPI_Transmit_DMA>
      me->states = SPIDMA_TX;
 800ec96:	2401      	movs	r4, #1
 800ec98:	7434      	strb	r4, [r6, #16]
      taskEXIT_CRITICAL();
 800ec9a:	f7fb f9fd 	bl	800a098 <vPortExitCritical>
      bits = xEventGroupWaitBits (spiDma_event, SPIDMA_TX_DONE, pdTRUE, pdFALSE, pdMS_TO_TICKS(me->timeOut));
 800ec9e:	8c33      	ldrh	r3, [r6, #32]
 800eca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eca4:	fb02 f303 	mul.w	r3, r2, r3
 800eca8:	4a0b      	ldr	r2, [pc, #44]	; (800ecd8 <SpiDma_write+0x70>)
 800ecaa:	fba2 2303 	umull	r2, r3, r2, r3
 800ecae:	099b      	lsrs	r3, r3, #6
 800ecb0:	9300      	str	r3, [sp, #0]
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	4622      	mov	r2, r4
 800ecb6:	4621      	mov	r1, r4
 800ecb8:	4808      	ldr	r0, [pc, #32]	; (800ecdc <SpiDma_write+0x74>)
 800ecba:	6800      	ldr	r0, [r0, #0]
 800ecbc:	f7f9 fc7e 	bl	80085bc <xEventGroupWaitBits>
      if (SPIDMA_TX_DONE != (bits & SPIDMA_TX_DONE))
 800ecc0:	f010 0f01 	tst.w	r0, #1
 800ecc4:	d005      	beq.n	800ecd2 <SpiDma_write+0x6a>
   bool ret = true;
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	e7d7      	b.n	800ec7a <SpiDma_write+0x12>
      ret = false;
 800ecca:	2000      	movs	r0, #0
}
 800eccc:	4770      	bx	lr
      ret = false;
 800ecce:	2000      	movs	r0, #0
 800ecd0:	e7d3      	b.n	800ec7a <SpiDma_write+0x12>
         ret = false;
 800ecd2:	2000      	movs	r0, #0
 800ecd4:	e7d1      	b.n	800ec7a <SpiDma_write+0x12>
 800ecd6:	bf00      	nop
 800ecd8:	10624dd3 	.word	0x10624dd3
 800ecdc:	20009844 	.word	0x20009844

0800ece0 <SpiDma_read>:

bool SpiDma_read (tSpiDmaModule * const me, uint8_t * data_rx_ptr, uint8_t * data_tx_dummy, uint16_t len)
{
 800ece0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ece2:	b083      	sub	sp, #12
   bool ret = true;
   EventBits_t bits = (EventBits_t)0U; 

   /* Verify the parameters input. */
   if (NULL == me)
 800ece4:	2800      	cmp	r0, #0
 800ece6:	d038      	beq.n	800ed5a <SpiDma_read+0x7a>
 800ece8:	460e      	mov	r6, r1
 800ecea:	4614      	mov	r4, r2
 800ecec:	461d      	mov	r5, r3
 800ecee:	4607      	mov	r7, r0
   {
      /* Pointer to the module SpiDma is NULL. */
      ret = false;
   }
   else if ((NULL == data_rx_ptr) || (NULL == data_tx_dummy))
 800ecf0:	2900      	cmp	r1, #0
 800ecf2:	d036      	beq.n	800ed62 <SpiDma_read+0x82>
 800ecf4:	2a00      	cmp	r2, #0
 800ecf6:	d036      	beq.n	800ed66 <SpiDma_read+0x86>
   {
      /* Pointer to data array is NULL. */
      ret = false;
   }
   else if (0 >= len)
 800ecf8:	b90b      	cbnz	r3, 800ecfe <SpiDma_read+0x1e>
   {
      /* The length of data input is equal 0. */
      ret = false;
 800ecfa:	2400      	movs	r4, #0
 800ecfc:	e02e      	b.n	800ed5c <SpiDma_read+0x7c>
   
   /* If the params input are valid, send data to DMA to transfer dummy to read data from slave.*/
   if (ret)
   {
      /* Enter Critical section. */
      taskENTER_CRITICAL();
 800ecfe:	f7fb f9a9 	bl	800a054 <vPortEnterCritical>

      /* Copy the data to TX buffer. */
      memcpy (me->ptrTxArr, data_tx_dummy, len);
 800ed02:	462a      	mov	r2, r5
 800ed04:	4621      	mov	r1, r4
 800ed06:	69b8      	ldr	r0, [r7, #24]
 800ed08:	f003 f8ae 	bl	8011e68 <memcpy>

      /* Start transmit data via DMA. */
      HAL_SPI_TransmitReceive_DMA (me->spiModule, me->ptrTxArr, me->ptrRxArr, len);
 800ed0c:	462b      	mov	r3, r5
 800ed0e:	69fa      	ldr	r2, [r7, #28]
 800ed10:	69b9      	ldr	r1, [r7, #24]
 800ed12:	6978      	ldr	r0, [r7, #20]
 800ed14:	f7f6 f910 	bl	8004f38 <HAL_SPI_TransmitReceive_DMA>

      /* Change state into TX. */
      me->states = SPIDMA_RX;
 800ed18:	2402      	movs	r4, #2
 800ed1a:	743c      	strb	r4, [r7, #16]

      /* Exit Critical section. */
      taskEXIT_CRITICAL();
 800ed1c:	f7fb f9bc 	bl	800a098 <vPortExitCritical>

      /* Blocking the currently executing task until SPI transmit data is finished. */
      bits = xEventGroupWaitBits (spiDma_event, SPIDMA_RX_DONE, pdTRUE, pdFALSE, pdMS_TO_TICKS(me->timeOut));
 800ed20:	8c3b      	ldrh	r3, [r7, #32]
 800ed22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ed26:	fb02 f303 	mul.w	r3, r2, r3
 800ed2a:	4a10      	ldr	r2, [pc, #64]	; (800ed6c <SpiDma_read+0x8c>)
 800ed2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ed30:	099b      	lsrs	r3, r3, #6
 800ed32:	9300      	str	r3, [sp, #0]
 800ed34:	2300      	movs	r3, #0
 800ed36:	2201      	movs	r2, #1
 800ed38:	4621      	mov	r1, r4
 800ed3a:	480d      	ldr	r0, [pc, #52]	; (800ed70 <SpiDma_read+0x90>)
 800ed3c:	6800      	ldr	r0, [r0, #0]
 800ed3e:	f7f9 fc3d 	bl	80085bc <xEventGroupWaitBits>

      /* Update new state. */
      if (SPIDMA_RX_DONE != (bits & SPIDMA_RX_DONE))
 800ed42:	f010 0f02 	tst.w	r0, #2
 800ed46:	d006      	beq.n	800ed56 <SpiDma_read+0x76>
   bool ret = true;
 800ed48:	2401      	movs	r4, #1
      {
         ret = false;
      }

      /* Copy data to data array return. */
      memcpy (data_rx_ptr, me->ptrRxArr, len);
 800ed4a:	462a      	mov	r2, r5
 800ed4c:	69f9      	ldr	r1, [r7, #28]
 800ed4e:	4630      	mov	r0, r6
 800ed50:	f003 f88a 	bl	8011e68 <memcpy>
 800ed54:	e002      	b.n	800ed5c <SpiDma_read+0x7c>
         ret = false;
 800ed56:	2400      	movs	r4, #0
 800ed58:	e7f7      	b.n	800ed4a <SpiDma_read+0x6a>
      ret = false;
 800ed5a:	2400      	movs	r4, #0
   }

   /* Return state. */
   return ret;
}
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	b003      	add	sp, #12
 800ed60:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = false;
 800ed62:	2400      	movs	r4, #0
 800ed64:	e7fa      	b.n	800ed5c <SpiDma_read+0x7c>
 800ed66:	2400      	movs	r4, #0
 800ed68:	e7f8      	b.n	800ed5c <SpiDma_read+0x7c>
 800ed6a:	bf00      	nop
 800ed6c:	10624dd3 	.word	0x10624dd3
 800ed70:	20009844 	.word	0x20009844

0800ed74 <SpiDma_WriteCompleteIrq>:


void SpiDma_WriteCompleteIrq (tSpiDmaModule * const me)
{
 800ed74:	b500      	push	{lr}
 800ed76:	b083      	sub	sp, #12
   /* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	9301      	str	r3, [sp, #4]

   /* Write data complete, change the state of this module to TxEnd. */
   me->states = SPIDMA_IDLE;
 800ed7c:	7403      	strb	r3, [r0, #16]

   /* Set bit to inform the TX is finish. */
   xEventGroupSetBitsFromISR (spiDma_event, SPIDMA_TX_DONE, &xHigherPriorityTaskWoken);
 800ed7e:	aa01      	add	r2, sp, #4
 800ed80:	2101      	movs	r1, #1
 800ed82:	4b03      	ldr	r3, [pc, #12]	; (800ed90 <SpiDma_WriteCompleteIrq+0x1c>)
 800ed84:	6818      	ldr	r0, [r3, #0]
 800ed86:	f7f9 fce7 	bl	8008758 <xEventGroupSetBitsFromISR>
}  
 800ed8a:	b003      	add	sp, #12
 800ed8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed90:	20009844 	.word	0x20009844

0800ed94 <SpiDma_ReadCompleteIrq>:

void SpiDma_ReadCompleteIrq (tSpiDmaModule * const me)
{
 800ed94:	b500      	push	{lr}
 800ed96:	b083      	sub	sp, #12
   /* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	9301      	str	r3, [sp, #4]

   /* Read data complete, change the state of this module to RxEnd. */
   me->states = SPIDMA_IDLE;
 800ed9c:	7403      	strb	r3, [r0, #16]

   /* Set bit to inform the RX is finish. */
   xEventGroupSetBitsFromISR (spiDma_event, SPIDMA_RX_DONE, &xHigherPriorityTaskWoken);
 800ed9e:	aa01      	add	r2, sp, #4
 800eda0:	2102      	movs	r1, #2
 800eda2:	4b03      	ldr	r3, [pc, #12]	; (800edb0 <SpiDma_ReadCompleteIrq+0x1c>)
 800eda4:	6818      	ldr	r0, [r3, #0]
 800eda6:	f7f9 fcd7 	bl	8008758 <xEventGroupSetBitsFromISR>
}
 800edaa:	b003      	add	sp, #12
 800edac:	f85d fb04 	ldr.w	pc, [sp], #4
 800edb0:	20009844 	.word	0x20009844

0800edb4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800edb4:	b508      	push	{r3, lr}
   SpiDma_WriteCompleteIrq (&spiDmaModule);
 800edb6:	4802      	ldr	r0, [pc, #8]	; (800edc0 <HAL_SPI_TxCpltCallback+0xc>)
 800edb8:	f7ff ffdc 	bl	800ed74 <SpiDma_WriteCompleteIrq>
}
 800edbc:	bd08      	pop	{r3, pc}
 800edbe:	bf00      	nop
 800edc0:	20000120 	.word	0x20000120

0800edc4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800edc4:	b508      	push	{r3, lr}
   SpiDma_ReadCompleteIrq (&spiDmaModule);
 800edc6:	4802      	ldr	r0, [pc, #8]	; (800edd0 <HAL_SPI_TxRxCpltCallback+0xc>)
 800edc8:	f7ff ffe4 	bl	800ed94 <SpiDma_ReadCompleteIrq>
}
 800edcc:	bd08      	pop	{r3, pc}
 800edce:	bf00      	nop
 800edd0:	20000120 	.word	0x20000120

0800edd4 <uartDma_init>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

void  uartDma_init (void)
{
 800edd4:	b508      	push	{r3, lr}
   /* Initialize ringbuffer. */
   lwrb_init((volatile lwrb_t *)&uartDmaModule.tx_buff, uartDmaModule.p_tx_buff_data, UARTDMA_TX_SIZE);
 800edd6:	4804      	ldr	r0, [pc, #16]	; (800ede8 <uartDma_init+0x14>)
 800edd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eddc:	6a01      	ldr	r1, [r0, #32]
 800edde:	3004      	adds	r0, #4
 800ede0:	f7fc fbba 	bl	800b558 <lwrb_init>
}
 800ede4:	bd08      	pop	{r3, pc}
 800ede6:	bf00      	nop
 800ede8:	20000144 	.word	0x20000144

0800edec <uartDma_start_tx_dma_transfer>:

#endif 
}

uint8_t  uartDma_start_tx_dma_transfer(void)
{
 800edec:	b538      	push	{r3, r4, r5, lr}
   uint8_t started = 0;
   if (uartDmaModule.tx_dma_current_len == 0)
 800edee:	4b11      	ldr	r3, [pc, #68]	; (800ee34 <uartDma_start_tx_dma_transfer+0x48>)
 800edf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf2:	b10b      	cbz	r3, 800edf8 <uartDma_start_tx_dma_transfer+0xc>
   uint8_t started = 0;
 800edf4:	2000      	movs	r0, #0
                               uartDmaModule.tx_dma_current_len);
      }
   }

   return started;
}
 800edf6:	bd38      	pop	{r3, r4, r5, pc}
      uartDmaModule.tx_dma_current_len = lwrb_get_linear_block_read_length(&uartDmaModule.tx_buff);
 800edf8:	4c0e      	ldr	r4, [pc, #56]	; (800ee34 <uartDma_start_tx_dma_transfer+0x48>)
 800edfa:	1d20      	adds	r0, r4, #4
 800edfc:	f7fc fc10 	bl	800b620 <lwrb_get_linear_block_read_length>
 800ee00:	6260      	str	r0, [r4, #36]	; 0x24
      if (uartDmaModule.tx_dma_current_len > 0)
 800ee02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee04:	b19b      	cbz	r3, 800ee2e <uartDma_start_tx_dma_transfer+0x42>
            (uartDmaModule.tx_dma_current_len > 32) ? 32 : uartDmaModule.tx_dma_current_len;
 800ee06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee08:	2b20      	cmp	r3, #32
 800ee0a:	d80e      	bhi.n	800ee2a <uartDma_start_tx_dma_transfer+0x3e>
 800ee0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
         uartDmaModule.tx_dma_current_len = 
 800ee0e:	4c09      	ldr	r4, [pc, #36]	; (800ee34 <uartDma_start_tx_dma_transfer+0x48>)
 800ee10:	6263      	str	r3, [r4, #36]	; 0x24
         started = HAL_UART_Transmit_DMA((UART_HandleTypeDef *)uartDmaModule.huart,
 800ee12:	4620      	mov	r0, r4
 800ee14:	f850 5b04 	ldr.w	r5, [r0], #4
                               (uint8_t *) lwrb_get_linear_block_read_address(&uartDmaModule.tx_buff),
 800ee18:	f7fc fbe4 	bl	800b5e4 <lwrb_get_linear_block_read_address>
 800ee1c:	4601      	mov	r1, r0
                               uartDmaModule.tx_dma_current_len);
 800ee1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
         started = HAL_UART_Transmit_DMA((UART_HandleTypeDef *)uartDmaModule.huart,
 800ee20:	b292      	uxth	r2, r2
 800ee22:	4628      	mov	r0, r5
 800ee24:	f7f6 fd5e 	bl	80058e4 <HAL_UART_Transmit_DMA>
 800ee28:	e7e5      	b.n	800edf6 <uartDma_start_tx_dma_transfer+0xa>
            (uartDmaModule.tx_dma_current_len > 32) ? 32 : uartDmaModule.tx_dma_current_len;
 800ee2a:	2320      	movs	r3, #32
 800ee2c:	e7ef      	b.n	800ee0e <uartDma_start_tx_dma_transfer+0x22>
   uint8_t started = 0;
 800ee2e:	2000      	movs	r0, #0
 800ee30:	e7e1      	b.n	800edf6 <uartDma_start_tx_dma_transfer+0xa>
 800ee32:	bf00      	nop
 800ee34:	20000144 	.word	0x20000144

0800ee38 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ee38:	b510      	push	{r4, lr}
   lwrb_skip(&uartDmaModule.tx_buff, uartDmaModule.tx_dma_current_len);
 800ee3a:	4c05      	ldr	r4, [pc, #20]	; (800ee50 <HAL_UART_TxCpltCallback+0x18>)
 800ee3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ee3e:	1d20      	adds	r0, r4, #4
 800ee40:	f7fc fc16 	bl	800b670 <lwrb_skip>
   uartDmaModule.tx_dma_current_len = 0;
 800ee44:	2300      	movs	r3, #0
 800ee46:	6263      	str	r3, [r4, #36]	; 0x24

   /* Send next data remaining in tx buffer. */
   uartDma_start_tx_dma_transfer();
 800ee48:	f7ff ffd0 	bl	800edec <uartDma_start_tx_dma_transfer>
}
 800ee4c:	bd10      	pop	{r4, pc}
 800ee4e:	bf00      	nop
 800ee50:	20000144 	.word	0x20000144

0800ee54 <canIdle_Begin>:
   }
}

static void canIdle_Begin(tCanIdle_Data *const app)
{
   if (app->workState == CANIDLE_STOP)
 800ee54:	7f03      	ldrb	r3, [r0, #28]
 800ee56:	b90b      	cbnz	r3, 800ee5c <canIdle_Begin+0x8>
   {
	  //cdc_printf("[Command]@%u:\t inputs: %d %d\r\n",GetCycleCount(),app->cmd.frId, app->cmd.motorId)
      app->workState = CANIDLE_RUN;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	7703      	strb	r3, [r0, #28]
   }
}
 800ee5c:	4770      	bx	lr

0800ee5e <canIdle_End>:

static void canIdle_End (tCanIdle_Data *const app)
{
   if (app->workState == CANIDLE_RUN)
 800ee5e:	7f03      	ldrb	r3, [r0, #28]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d000      	beq.n	800ee66 <canIdle_End+0x8>
   {
      app->workState = CANIDLE_STOP;
   }
}
 800ee64:	4770      	bx	lr
      app->workState = CANIDLE_STOP;
 800ee66:	2300      	movs	r3, #0
 800ee68:	7703      	strb	r3, [r0, #28]
}
 800ee6a:	e7fb      	b.n	800ee64 <canIdle_End+0x6>

0800ee6c <canIdle_EventHandle>:
static tCanIdle_States canIdle_EventHandle(tCanIdle_Data *const app)
{
   tCanIdle_States nextState = CANIDLE_IDLE;

   /** Determine if there has new command. */
   if (true == app->isNewCommand)
 800ee6c:	7f43      	ldrb	r3, [r0, #29]
 800ee6e:	b11b      	cbz	r3, 800ee78 <canIdle_EventHandle+0xc>
   {
      /* Update next state to Command. */
      nextState = CANIDLE_COMMAND_ENTER;

      /* Clear the flag.*/
      app->isNewCommand = false;
 800ee70:	2300      	movs	r3, #0
 800ee72:	7743      	strb	r3, [r0, #29]
      nextState = CANIDLE_COMMAND_ENTER;
 800ee74:	2001      	movs	r0, #1
 800ee76:	4770      	bx	lr
   tCanIdle_States nextState = CANIDLE_IDLE;
 800ee78:	2000      	movs	r0, #0
   {
      /* Keep is in Control state. */
   }

   return (nextState);
}
 800ee7a:	4770      	bx	lr

0800ee7c <canIdle_Command_Enter>:

static tCanIdle_States canIdle_Command_Enter(tCanIdle_Data *const app)
{
 800ee7c:	b508      	push	{r3, lr}
   tCanIdle_States nextState = CANIDLE_COMMAND_ENTER;

   /* Copy data to local. */
   app->cmd.frId = app->hostReq.frId;
 800ee7e:	7843      	ldrb	r3, [r0, #1]
 800ee80:	77c3      	strb	r3, [r0, #31]
   app->cmd.motorId = app->hostReq.motorId;
 800ee82:	7803      	ldrb	r3, [r0, #0]
 800ee84:	7783      	strb	r3, [r0, #30]
   app->cmd.size = app->hostReq.size;
 800ee86:	7882      	ldrb	r2, [r0, #2]
 800ee88:	f880 2020 	strb.w	r2, [r0, #32]

   memcpy((uint8_t *)app->cmd.data, (uint8_t *)app->hostReq.data, app->cmd.size);
 800ee8c:	1cc1      	adds	r1, r0, #3
 800ee8e:	3021      	adds	r0, #33	; 0x21
 800ee90:	f002 ffea 	bl	8011e68 <memcpy>
   /* Go to next state. */
   nextState = CANIDLE_COMMAND;

   /* Update next state. */
   return nextState;
}
 800ee94:	2002      	movs	r0, #2
 800ee96:	bd08      	pop	{r3, pc}

0800ee98 <canIdle_ConfigBaudrate>:

static void canIdle_ConfigBaudrate (tCanIdle_Data * const app)
{
 800ee98:	b510      	push	{r4, lr}
 800ee9a:	4604      	mov	r4, r0
   uint8_t md80Id = 0u;

   /* Get baudrate. */
   newBaudrate = app->cmd.data[0];

   app->rsp.frId = app->cmd.frId;
 800ee9c:	7fc3      	ldrb	r3, [r0, #31]
 800ee9e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   
   /* Configure new baudrate. */
   if (true == canM_SetNewBaudrate(newBaudrate))
 800eea2:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 800eea6:	f001 f8f5 	bl	8010094 <canM_SetNewBaudrate>
 800eeaa:	b118      	cbz	r0, 800eeb4 <canIdle_ConfigBaudrate+0x1c>
   {
      app->rsp.data[0] = true;
 800eeac:	2301      	movs	r3, #1
 800eeae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   }
   else 
   {
      app->rsp.data[0] = false;
   }
}
 800eeb2:	bd10      	pop	{r4, pc}
      app->rsp.data[0] = false;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800eeba:	e7fa      	b.n	800eeb2 <canIdle_ConfigBaudrate+0x1a>

0800eebc <canIdle_UpdateDataControl>:
{
 800eebc:	b570      	push	{r4, r5, r6, lr}
   for (md80idx = 0u; md80idx < canIdle_Module.numMd80Det; md80idx ++)
 800eebe:	2400      	movs	r4, #0
 800eec0:	e074      	b.n	800efac <canIdle_UpdateDataControl+0xf0>
      cdc_printf("@%u\t[Motor packet]:\tid:%d\tpos:%d\r\n", GetCycleCount(),md80idx,pEcatObj->md80_0_DataControl.Position  );
 800eec2:	f7f1 fe8b 	bl	8000bdc <GetCycleCount>
 800eec6:	4601      	mov	r1, r0
 800eec8:	4eb6      	ldr	r6, [pc, #728]	; (800f1a4 <canIdle_UpdateDataControl+0x2e8>)
 800eeca:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
 800eece:	4622      	mov	r2, r4
 800eed0:	48b5      	ldr	r0, [pc, #724]	; (800f1a8 <canIdle_UpdateDataControl+0x2ec>)
 800eed2:	f7f1 fe57 	bl	8000b84 <cdc_printf>
      old_position = pEcatObj->md80_0_DataControl.Position;
 800eed6:	f8b6 20c4 	ldrh.w	r2, [r6, #196]	; 0xc4
 800eeda:	4bb4      	ldr	r3, [pc, #720]	; (800f1ac <canIdle_UpdateDataControl+0x2f0>)
 800eedc:	801a      	strh	r2, [r3, #0]
 800eede:	e07d      	b.n	800efdc <canIdle_UpdateDataControl+0x120>
            taskENTER_CRITICAL();
 800eee0:	f7fb f8b8 	bl	800a054 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_0_DataControl.Velocity);
 800eee4:	4eaf      	ldr	r6, [pc, #700]	; (800f1a4 <canIdle_UpdateDataControl+0x2e8>)
 800eee6:	f8b6 30c6 	ldrh.w	r3, [r6, #198]	; 0xc6
 800eeea:	ee07 3a10 	vmov	s14, r3
 800eeee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eef2:	eddf 7aaf 	vldr	s15, [pc, #700]	; 800f1b0 <canIdle_UpdateDataControl+0x2f4>
 800eef6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800eefa:	49ae      	ldr	r1, [pc, #696]	; (800f1b4 <canIdle_UpdateDataControl+0x2f8>)
 800eefc:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800ef00:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800ef04:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_0_DataControl.Position);
 800ef08:	f8b6 20c4 	ldrh.w	r2, [r6, #196]	; 0xc4
 800ef0c:	ee07 2a10 	vmov	s14, r2
 800ef10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ef14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ef18:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_0_DataControl.Torque);
 800ef1c:	f8b6 20c8 	ldrh.w	r2, [r6, #200]	; 0xc8
 800ef20:	ee07 2a10 	vmov	s14, r2
 800ef24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ef28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ef2c:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_0_DataReturn.enabled = true;
 800ef30:	2201      	movs	r2, #1
 800ef32:	f886 202e 	strb.w	r2, [r6, #46]	; 0x2e
            pEcatObj->md80_0_DataReturn.Mode = pMd80dev->local.mode;
 800ef36:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800ef3a:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
            pEcatObj->md80_0_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800ef3e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800ef42:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef46:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ef4a:	ee17 2a10 	vmov	r2, s14
 800ef4e:	84f2      	strh	r2, [r6, #38]	; 0x26
            pEcatObj->md80_0_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800ef50:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800ef54:	ee07 2a10 	vmov	s14, r2
 800ef58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ef5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef60:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ef64:	ee17 2a10 	vmov	r2, s14
 800ef68:	f886 202c 	strb.w	r2, [r6, #44]	; 0x2c
            pEcatObj->md80_0_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800ef6c:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800ef70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef74:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ef78:	ee17 3a10 	vmov	r3, s14
 800ef7c:	8573      	strh	r3, [r6, #42]	; 0x2a
            pEcatObj->md80_0_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800ef7e:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800ef82:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800ef86:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800ef8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef92:	ee17 3a90 	vmov	r3, s15
 800ef96:	8533      	strh	r3, [r6, #40]	; 0x28
            pEcatObj->md80_0_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800ef98:	f7fa fa02 	bl	80093a0 <xTaskGetTickCount>
 800ef9c:	6370      	str	r0, [r6, #52]	; 0x34
            pEcatObj->md80_0_DataReturn.counter++;
 800ef9e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800efa0:	3301      	adds	r3, #1
 800efa2:	6333      	str	r3, [r6, #48]	; 0x30
            taskEXIT_CRITICAL();
 800efa4:	f7fb f878 	bl	800a098 <vPortExitCritical>
   for (md80idx = 0u; md80idx < canIdle_Module.numMd80Det; md80idx ++)
 800efa8:	3401      	adds	r4, #1
 800efaa:	b2e4      	uxtb	r4, r4
 800efac:	4b82      	ldr	r3, [pc, #520]	; (800f1b8 <canIdle_UpdateDataControl+0x2fc>)
 800efae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800efb2:	42a3      	cmp	r3, r4
 800efb4:	f240 831d 	bls.w	800f5f2 <canIdle_UpdateDataControl+0x736>
      pMd80dev = (tMd80_Device *)&md80Dev[md80idx];
 800efb8:	4625      	mov	r5, r4
      if (true == pMd80dev->local.isEnabled)
 800efba:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
 800efbe:	4b7d      	ldr	r3, [pc, #500]	; (800f1b4 <canIdle_UpdateDataControl+0x2f8>)
 800efc0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800efc4:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d0ed      	beq.n	800efa8 <canIdle_UpdateDataControl+0xec>
    	  if(old_position != pEcatObj->md80_0_DataControl.Position ){
 800efcc:	4b75      	ldr	r3, [pc, #468]	; (800f1a4 <canIdle_UpdateDataControl+0x2e8>)
 800efce:	f8b3 20c4 	ldrh.w	r2, [r3, #196]	; 0xc4
 800efd2:	4b76      	ldr	r3, [pc, #472]	; (800f1ac <canIdle_UpdateDataControl+0x2f0>)
 800efd4:	881b      	ldrh	r3, [r3, #0]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	f47f af73 	bne.w	800eec2 <canIdle_UpdateDataControl+0x6>
         switch (md80idx)
 800efdc:	2c07      	cmp	r4, #7
 800efde:	d8e3      	bhi.n	800efa8 <canIdle_UpdateDataControl+0xec>
 800efe0:	a301      	add	r3, pc, #4	; (adr r3, 800efe8 <canIdle_UpdateDataControl+0x12c>)
 800efe2:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800efe6:	bf00      	nop
 800efe8:	0800eee1 	.word	0x0800eee1
 800efec:	0800f009 	.word	0x0800f009
 800eff0:	0800f0d3 	.word	0x0800f0d3
 800eff4:	0800f1bd 	.word	0x0800f1bd
 800eff8:	0800f28d 	.word	0x0800f28d
 800effc:	0800f363 	.word	0x0800f363
 800f000:	0800f439 	.word	0x0800f439
 800f004:	0800f51d 	.word	0x0800f51d
            taskENTER_CRITICAL();
 800f008:	f7fb f824 	bl	800a054 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_1_DataControl.Velocity);
 800f00c:	4e65      	ldr	r6, [pc, #404]	; (800f1a4 <canIdle_UpdateDataControl+0x2e8>)
 800f00e:	f8b6 30d2 	ldrh.w	r3, [r6, #210]	; 0xd2
 800f012:	ee07 3a10 	vmov	s14, r3
 800f016:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f01a:	eddf 7a65 	vldr	s15, [pc, #404]	; 800f1b0 <canIdle_UpdateDataControl+0x2f4>
 800f01e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f022:	4964      	ldr	r1, [pc, #400]	; (800f1b4 <canIdle_UpdateDataControl+0x2f8>)
 800f024:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f028:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f02c:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_1_DataControl.Position);
 800f030:	f8b6 20d0 	ldrh.w	r2, [r6, #208]	; 0xd0
 800f034:	ee07 2a10 	vmov	s14, r2
 800f038:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f03c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f040:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_1_DataControl.Torque);
 800f044:	f8b6 20d4 	ldrh.w	r2, [r6, #212]	; 0xd4
 800f048:	ee07 2a10 	vmov	s14, r2
 800f04c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f050:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f054:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_1_DataReturn.enabled = true;
 800f058:	2201      	movs	r2, #1
 800f05a:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
            pEcatObj->md80_1_DataReturn.Mode = pMd80dev->local.mode;
 800f05e:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f062:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
            pEcatObj->md80_1_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f066:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f06a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f06e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f072:	ee17 2a10 	vmov	r2, s14
 800f076:	8772      	strh	r2, [r6, #58]	; 0x3a
            pEcatObj->md80_1_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f078:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f07c:	ee07 2a10 	vmov	s14, r2
 800f080:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f084:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f088:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f08c:	ee17 2a10 	vmov	r2, s14
 800f090:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
            pEcatObj->md80_1_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f094:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f09c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f0a0:	ee17 3a10 	vmov	r3, s14
 800f0a4:	87f3      	strh	r3, [r6, #62]	; 0x3e
            pEcatObj->md80_1_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f0a6:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f0aa:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f0ae:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0ba:	ee17 3a90 	vmov	r3, s15
 800f0be:	87b3      	strh	r3, [r6, #60]	; 0x3c
            pEcatObj->md80_1_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f0c0:	f7fa f96e 	bl	80093a0 <xTaskGetTickCount>
 800f0c4:	64b0      	str	r0, [r6, #72]	; 0x48
            pEcatObj->md80_1_DataReturn.counter++;
 800f0c6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	6473      	str	r3, [r6, #68]	; 0x44
            taskEXIT_CRITICAL();
 800f0cc:	f7fa ffe4 	bl	800a098 <vPortExitCritical>
            break;
 800f0d0:	e76a      	b.n	800efa8 <canIdle_UpdateDataControl+0xec>
            taskENTER_CRITICAL();
 800f0d2:	f7fa ffbf 	bl	800a054 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_2_DataControl.Velocity);
 800f0d6:	4e33      	ldr	r6, [pc, #204]	; (800f1a4 <canIdle_UpdateDataControl+0x2e8>)
 800f0d8:	f8b6 30de 	ldrh.w	r3, [r6, #222]	; 0xde
 800f0dc:	ee07 3a10 	vmov	s14, r3
 800f0e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f0e4:	eddf 7a32 	vldr	s15, [pc, #200]	; 800f1b0 <canIdle_UpdateDataControl+0x2f4>
 800f0e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f0ec:	4931      	ldr	r1, [pc, #196]	; (800f1b4 <canIdle_UpdateDataControl+0x2f8>)
 800f0ee:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f0f2:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f0f6:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_2_DataControl.Position);
 800f0fa:	f8b6 20dc 	ldrh.w	r2, [r6, #220]	; 0xdc
 800f0fe:	ee07 2a10 	vmov	s14, r2
 800f102:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f106:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f10a:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_2_DataControl.Torque);
 800f10e:	f8b6 20e0 	ldrh.w	r2, [r6, #224]	; 0xe0
 800f112:	ee07 2a10 	vmov	s14, r2
 800f116:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f11a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f11e:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_2_DataReturn.enabled = true;
 800f122:	2201      	movs	r2, #1
 800f124:	f886 2056 	strb.w	r2, [r6, #86]	; 0x56
            pEcatObj->md80_2_DataReturn.Mode = pMd80dev->local.mode;
 800f128:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f12c:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
            pEcatObj->md80_2_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f130:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f134:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f138:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f13c:	ee17 2a10 	vmov	r2, s14
 800f140:	f8a6 204e 	strh.w	r2, [r6, #78]	; 0x4e
            pEcatObj->md80_2_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f144:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f148:	ee07 2a10 	vmov	s14, r2
 800f14c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f150:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f154:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f158:	ee17 2a10 	vmov	r2, s14
 800f15c:	f886 2054 	strb.w	r2, [r6, #84]	; 0x54
            pEcatObj->md80_2_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f160:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f164:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f168:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f16c:	ee17 3a10 	vmov	r3, s14
 800f170:	f8a6 3052 	strh.w	r3, [r6, #82]	; 0x52
            pEcatObj->md80_2_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f174:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f178:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f17c:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f180:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f188:	ee17 3a90 	vmov	r3, s15
 800f18c:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
            pEcatObj->md80_2_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f190:	f7fa f906 	bl	80093a0 <xTaskGetTickCount>
 800f194:	65f0      	str	r0, [r6, #92]	; 0x5c
            pEcatObj->md80_2_DataReturn.counter++;
 800f196:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800f198:	3301      	adds	r3, #1
 800f19a:	65b3      	str	r3, [r6, #88]	; 0x58
            taskEXIT_CRITICAL();
 800f19c:	f7fa ff7c 	bl	800a098 <vPortExitCritical>
            break;
 800f1a0:	e702      	b.n	800efa8 <canIdle_UpdateDataControl+0xec>
 800f1a2:	bf00      	nop
 800f1a4:	2000d350 	.word	0x2000d350
 800f1a8:	080136b0 	.word	0x080136b0
 800f1ac:	20009848 	.word	0x20009848
 800f1b0:	42c80000 	.word	0x42c80000
 800f1b4:	200071cc 	.word	0x200071cc
 800f1b8:	2000984c 	.word	0x2000984c
            taskENTER_CRITICAL();
 800f1bc:	f7fa ff4a 	bl	800a054 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_3_DataControl.Velocity);
 800f1c0:	4ed3      	ldr	r6, [pc, #844]	; (800f510 <canIdle_UpdateDataControl+0x654>)
 800f1c2:	f8b6 30ea 	ldrh.w	r3, [r6, #234]	; 0xea
 800f1c6:	ee07 3a10 	vmov	s14, r3
 800f1ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f1ce:	eddf 7ad1 	vldr	s15, [pc, #836]	; 800f514 <canIdle_UpdateDataControl+0x658>
 800f1d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f1d6:	49d0      	ldr	r1, [pc, #832]	; (800f518 <canIdle_UpdateDataControl+0x65c>)
 800f1d8:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f1dc:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f1e0:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_3_DataControl.Position);
 800f1e4:	f8b6 20e8 	ldrh.w	r2, [r6, #232]	; 0xe8
 800f1e8:	ee07 2a10 	vmov	s14, r2
 800f1ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f1f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f1f4:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_3_DataControl.Torque);
 800f1f8:	f8b6 20ec 	ldrh.w	r2, [r6, #236]	; 0xec
 800f1fc:	ee07 2a10 	vmov	s14, r2
 800f200:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f204:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f208:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_3_DataReturn.enabled = true;
 800f20c:	2201      	movs	r2, #1
 800f20e:	f886 206a 	strb.w	r2, [r6, #106]	; 0x6a
            pEcatObj->md80_3_DataReturn.Mode = pMd80dev->local.mode;
 800f212:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f216:	f886 2060 	strb.w	r2, [r6, #96]	; 0x60
            pEcatObj->md80_3_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f21a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f21e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f222:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f226:	ee17 2a10 	vmov	r2, s14
 800f22a:	f8a6 2062 	strh.w	r2, [r6, #98]	; 0x62
            pEcatObj->md80_3_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f22e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f232:	ee07 2a10 	vmov	s14, r2
 800f236:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f23a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f23e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f242:	ee17 2a10 	vmov	r2, s14
 800f246:	f886 2068 	strb.w	r2, [r6, #104]	; 0x68
            pEcatObj->md80_3_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f24a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f24e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f252:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f256:	ee17 3a10 	vmov	r3, s14
 800f25a:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
            pEcatObj->md80_3_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f25e:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f262:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f266:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f26a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f26e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f272:	ee17 3a90 	vmov	r3, s15
 800f276:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            pEcatObj->md80_3_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f27a:	f7fa f891 	bl	80093a0 <xTaskGetTickCount>
 800f27e:	6730      	str	r0, [r6, #112]	; 0x70
            pEcatObj->md80_3_DataReturn.counter++;
 800f280:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 800f282:	3301      	adds	r3, #1
 800f284:	66f3      	str	r3, [r6, #108]	; 0x6c
            taskEXIT_CRITICAL();
 800f286:	f7fa ff07 	bl	800a098 <vPortExitCritical>
            break;
 800f28a:	e68d      	b.n	800efa8 <canIdle_UpdateDataControl+0xec>
            taskENTER_CRITICAL();
 800f28c:	f7fa fee2 	bl	800a054 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_4_DataControl.Velocity);
 800f290:	4e9f      	ldr	r6, [pc, #636]	; (800f510 <canIdle_UpdateDataControl+0x654>)
 800f292:	f8b6 30f6 	ldrh.w	r3, [r6, #246]	; 0xf6
 800f296:	ee07 3a10 	vmov	s14, r3
 800f29a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f29e:	eddf 7a9d 	vldr	s15, [pc, #628]	; 800f514 <canIdle_UpdateDataControl+0x658>
 800f2a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f2a6:	499c      	ldr	r1, [pc, #624]	; (800f518 <canIdle_UpdateDataControl+0x65c>)
 800f2a8:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f2ac:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f2b0:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_4_DataControl.Position);
 800f2b4:	f8b6 20f4 	ldrh.w	r2, [r6, #244]	; 0xf4
 800f2b8:	ee07 2a10 	vmov	s14, r2
 800f2bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f2c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f2c4:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_4_DataControl.Torque);
 800f2c8:	f8b6 20f8 	ldrh.w	r2, [r6, #248]	; 0xf8
 800f2cc:	ee07 2a10 	vmov	s14, r2
 800f2d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f2d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f2d8:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_4_DataReturn.enabled = true;
 800f2dc:	2201      	movs	r2, #1
 800f2de:	f886 207e 	strb.w	r2, [r6, #126]	; 0x7e
            pEcatObj->md80_4_DataReturn.Mode = pMd80dev->local.mode;
 800f2e2:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f2e6:	f886 2074 	strb.w	r2, [r6, #116]	; 0x74
            pEcatObj->md80_4_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f2ea:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f2ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2f2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f2f6:	ee17 2a10 	vmov	r2, s14
 800f2fa:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
            pEcatObj->md80_4_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f2fe:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f302:	ee07 2a10 	vmov	s14, r2
 800f306:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f30a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f30e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f312:	ee17 2a10 	vmov	r2, s14
 800f316:	f886 207c 	strb.w	r2, [r6, #124]	; 0x7c
            pEcatObj->md80_4_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f31a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f31e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f322:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f326:	ee17 3a10 	vmov	r3, s14
 800f32a:	f8a6 307a 	strh.w	r3, [r6, #122]	; 0x7a
            pEcatObj->md80_4_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f32e:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f332:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f336:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f33a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f33e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f342:	ee17 3a90 	vmov	r3, s15
 800f346:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
            pEcatObj->md80_4_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f34a:	f7fa f829 	bl	80093a0 <xTaskGetTickCount>
 800f34e:	f8c6 0084 	str.w	r0, [r6, #132]	; 0x84
            pEcatObj->md80_4_DataReturn.counter++;
 800f352:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f356:	3301      	adds	r3, #1
 800f358:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
            taskEXIT_CRITICAL();
 800f35c:	f7fa fe9c 	bl	800a098 <vPortExitCritical>
            break;
 800f360:	e622      	b.n	800efa8 <canIdle_UpdateDataControl+0xec>
            taskENTER_CRITICAL();
 800f362:	f7fa fe77 	bl	800a054 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_5_DataControl.Velocity);
 800f366:	4e6a      	ldr	r6, [pc, #424]	; (800f510 <canIdle_UpdateDataControl+0x654>)
 800f368:	f8b6 3102 	ldrh.w	r3, [r6, #258]	; 0x102
 800f36c:	ee07 3a10 	vmov	s14, r3
 800f370:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f374:	eddf 7a67 	vldr	s15, [pc, #412]	; 800f514 <canIdle_UpdateDataControl+0x658>
 800f378:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f37c:	4966      	ldr	r1, [pc, #408]	; (800f518 <canIdle_UpdateDataControl+0x65c>)
 800f37e:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f382:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f386:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_5_DataControl.Position);
 800f38a:	f8b6 2100 	ldrh.w	r2, [r6, #256]	; 0x100
 800f38e:	ee07 2a10 	vmov	s14, r2
 800f392:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f396:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f39a:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_5_DataControl.Torque);
 800f39e:	f8b6 2104 	ldrh.w	r2, [r6, #260]	; 0x104
 800f3a2:	ee07 2a10 	vmov	s14, r2
 800f3a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f3aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f3ae:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_5_DataReturn.enabled = true;
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	f886 2092 	strb.w	r2, [r6, #146]	; 0x92
            pEcatObj->md80_5_DataReturn.Mode = pMd80dev->local.mode;
 800f3b8:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f3bc:	f886 2088 	strb.w	r2, [r6, #136]	; 0x88
            pEcatObj->md80_5_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f3c0:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f3c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3c8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f3cc:	ee17 2a10 	vmov	r2, s14
 800f3d0:	f8a6 208a 	strh.w	r2, [r6, #138]	; 0x8a
            pEcatObj->md80_5_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f3d4:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f3d8:	ee07 2a10 	vmov	s14, r2
 800f3dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f3e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3e4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f3e8:	ee17 2a10 	vmov	r2, s14
 800f3ec:	f886 2090 	strb.w	r2, [r6, #144]	; 0x90
            pEcatObj->md80_5_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f3f0:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f3f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3f8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f3fc:	ee17 3a10 	vmov	r3, s14
 800f400:	f8a6 308e 	strh.w	r3, [r6, #142]	; 0x8e
            pEcatObj->md80_5_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f404:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f408:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f40c:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f410:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f418:	ee17 3a90 	vmov	r3, s15
 800f41c:	f8a6 308c 	strh.w	r3, [r6, #140]	; 0x8c
            pEcatObj->md80_5_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f420:	f7f9 ffbe 	bl	80093a0 <xTaskGetTickCount>
 800f424:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
            pEcatObj->md80_5_DataReturn.counter++;
 800f428:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800f42c:	3301      	adds	r3, #1
 800f42e:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
            taskEXIT_CRITICAL();
 800f432:	f7fa fe31 	bl	800a098 <vPortExitCritical>
            break;
 800f436:	e5b7      	b.n	800efa8 <canIdle_UpdateDataControl+0xec>
            taskENTER_CRITICAL();
 800f438:	f7fa fe0c 	bl	800a054 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_6_DataControl.Velocity);
 800f43c:	4e34      	ldr	r6, [pc, #208]	; (800f510 <canIdle_UpdateDataControl+0x654>)
 800f43e:	f8b6 310e 	ldrh.w	r3, [r6, #270]	; 0x10e
 800f442:	ee07 3a10 	vmov	s14, r3
 800f446:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f44a:	eddf 7a32 	vldr	s15, [pc, #200]	; 800f514 <canIdle_UpdateDataControl+0x658>
 800f44e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f452:	4931      	ldr	r1, [pc, #196]	; (800f518 <canIdle_UpdateDataControl+0x65c>)
 800f454:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f458:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f45c:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_6_DataControl.Position);
 800f460:	f8b6 210c 	ldrh.w	r2, [r6, #268]	; 0x10c
 800f464:	ee07 2a10 	vmov	s14, r2
 800f468:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f46c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f470:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_6_DataControl.Torque);
 800f474:	f8b6 2110 	ldrh.w	r2, [r6, #272]	; 0x110
 800f478:	ee07 2a10 	vmov	s14, r2
 800f47c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f480:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f484:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_6_DataReturn.enabled = true;
 800f488:	2201      	movs	r2, #1
 800f48a:	f886 20a6 	strb.w	r2, [r6, #166]	; 0xa6
            pEcatObj->md80_6_DataReturn.Mode = pMd80dev->local.mode;
 800f48e:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f492:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
            pEcatObj->md80_6_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f496:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f49a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f49e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f4a2:	ee17 2a10 	vmov	r2, s14
 800f4a6:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
            pEcatObj->md80_6_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f4aa:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f4ae:	ee07 2a10 	vmov	s14, r2
 800f4b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f4b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4ba:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f4be:	ee17 2a10 	vmov	r2, s14
 800f4c2:	f886 20a4 	strb.w	r2, [r6, #164]	; 0xa4
            pEcatObj->md80_6_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f4c6:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f4ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4ce:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f4d2:	ee17 3a10 	vmov	r3, s14
 800f4d6:	f8a6 30a2 	strh.w	r3, [r6, #162]	; 0xa2
            pEcatObj->md80_6_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f4da:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f4de:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f4e2:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f4ee:	ee17 3a90 	vmov	r3, s15
 800f4f2:	f8a6 30a0 	strh.w	r3, [r6, #160]	; 0xa0
            pEcatObj->md80_6_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f4f6:	f7f9 ff53 	bl	80093a0 <xTaskGetTickCount>
 800f4fa:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
            pEcatObj->md80_6_DataReturn.counter++;
 800f4fe:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 800f502:	3301      	adds	r3, #1
 800f504:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
            taskEXIT_CRITICAL();
 800f508:	f7fa fdc6 	bl	800a098 <vPortExitCritical>
            break;
 800f50c:	e54c      	b.n	800efa8 <canIdle_UpdateDataControl+0xec>
 800f50e:	bf00      	nop
 800f510:	2000d350 	.word	0x2000d350
 800f514:	42c80000 	.word	0x42c80000
 800f518:	200071cc 	.word	0x200071cc
            taskENTER_CRITICAL();
 800f51c:	f7fa fd9a 	bl	800a054 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_7_DataControl.Velocity);
 800f520:	4e34      	ldr	r6, [pc, #208]	; (800f5f4 <canIdle_UpdateDataControl+0x738>)
 800f522:	f8b6 311a 	ldrh.w	r3, [r6, #282]	; 0x11a
 800f526:	ee07 3a10 	vmov	s14, r3
 800f52a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f52e:	eddf 7a32 	vldr	s15, [pc, #200]	; 800f5f8 <canIdle_UpdateDataControl+0x73c>
 800f532:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f536:	4931      	ldr	r1, [pc, #196]	; (800f5fc <canIdle_UpdateDataControl+0x740>)
 800f538:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f53c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f540:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_7_DataControl.Position);
 800f544:	f8b6 2118 	ldrh.w	r2, [r6, #280]	; 0x118
 800f548:	ee07 2a10 	vmov	s14, r2
 800f54c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f550:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f554:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_7_DataControl.Torque);
 800f558:	f8b6 211c 	ldrh.w	r2, [r6, #284]	; 0x11c
 800f55c:	ee07 2a10 	vmov	s14, r2
 800f560:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f564:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f568:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_7_DataReturn.enabled = true;
 800f56c:	2201      	movs	r2, #1
 800f56e:	f886 20ba 	strb.w	r2, [r6, #186]	; 0xba
            pEcatObj->md80_7_DataReturn.Mode = pMd80dev->local.mode;
 800f572:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f576:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
            pEcatObj->md80_7_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f57a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f57e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f582:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f586:	ee17 2a10 	vmov	r2, s14
 800f58a:	f8a6 20b2 	strh.w	r2, [r6, #178]	; 0xb2
            pEcatObj->md80_7_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f58e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f592:	ee07 2a10 	vmov	s14, r2
 800f596:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f59a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f59e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f5a2:	ee17 2a10 	vmov	r2, s14
 800f5a6:	f886 20b8 	strb.w	r2, [r6, #184]	; 0xb8
            pEcatObj->md80_7_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f5aa:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f5ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f5b2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f5b6:	ee17 3a10 	vmov	r3, s14
 800f5ba:	f8a6 30b6 	strh.w	r3, [r6, #182]	; 0xb6
            pEcatObj->md80_7_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f5be:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f5c2:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f5c6:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f5ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f5d2:	ee17 3a90 	vmov	r3, s15
 800f5d6:	f8a6 30b4 	strh.w	r3, [r6, #180]	; 0xb4
            pEcatObj->md80_7_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f5da:	f7f9 fee1 	bl	80093a0 <xTaskGetTickCount>
 800f5de:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
            pEcatObj->md80_7_DataReturn.counter++;
 800f5e2:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
            taskEXIT_CRITICAL();
 800f5ec:	f7fa fd54 	bl	800a098 <vPortExitCritical>
            break;
 800f5f0:	e4da      	b.n	800efa8 <canIdle_UpdateDataControl+0xec>
}
 800f5f2:	bd70      	pop	{r4, r5, r6, pc}
 800f5f4:	2000d350 	.word	0x2000d350
 800f5f8:	42c80000 	.word	0x42c80000
 800f5fc:	200071cc 	.word	0x200071cc

0800f600 <canIdle_ScanDevice>:
{
 800f600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f604:	b096      	sub	sp, #88	; 0x58
 800f606:	4607      	mov	r7, r0
   uint8_t data[2u] = {0u};
 800f608:	2600      	movs	r6, #0
 800f60a:	f8ad 6054 	strh.w	r6, [sp, #84]	; 0x54
   uint8_t dataResp[64u] = {0};
 800f60e:	9605      	str	r6, [sp, #20]
 800f610:	223c      	movs	r2, #60	; 0x3c
 800f612:	4631      	mov	r1, r6
 800f614:	a806      	add	r0, sp, #24
 800f616:	f002 fb69 	bl	8011cec <memset>
   uint8_t dataSize = 0;
 800f61a:	f88d 6013 	strb.w	r6, [sp, #19]
   uint16_t md80Addr[CANIDLE_TOTAL_DEV_SUPPORT] = {0};
 800f61e:	9600      	str	r6, [sp, #0]
 800f620:	9601      	str	r6, [sp, #4]
 800f622:	9602      	str	r6, [sp, #8]
 800f624:	9603      	str	r6, [sp, #12]
   data[0] = MD80_FRAME_GET_INFO;
 800f626:	2305      	movs	r3, #5
 800f628:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
   for (addr = CANIDLE_START_ADDR; addr <= CANIDLE_END_ADDR; addr++)
 800f62c:	240a      	movs	r4, #10
 800f62e:	e00e      	b.n	800f64e <canIdle_ScanDevice+0x4e>
		 cdc_printf("@%u\t[scan adder] addr: %d id %d\n",xTaskGetTickCount()/portTICK_PERIOD_MS, addr,md80Addr[md80num] );
 800f630:	f7f9 feb6 	bl	80093a0 <xTaskGetTickCount>
 800f634:	4601      	mov	r1, r0
 800f636:	ab16      	add	r3, sp, #88	; 0x58
 800f638:	eb03 0846 	add.w	r8, r3, r6, lsl #1
 800f63c:	f838 3c58 	ldrh.w	r3, [r8, #-88]
 800f640:	4622      	mov	r2, r4
 800f642:	481a      	ldr	r0, [pc, #104]	; (800f6ac <canIdle_ScanDevice+0xac>)
 800f644:	f7f1 fa9e 	bl	8000b84 <cdc_printf>
               md80num++;
 800f648:	3601      	adds	r6, #1
 800f64a:	b2f6      	uxtb	r6, r6
   for (addr = CANIDLE_START_ADDR; addr <= CANIDLE_END_ADDR; addr++)
 800f64c:	3401      	adds	r4, #1
 800f64e:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 800f652:	d81b      	bhi.n	800f68c <canIdle_ScanDevice+0x8c>
      if (true == canM_SendToAddr(addr, data, 2u))
 800f654:	2202      	movs	r2, #2
 800f656:	a915      	add	r1, sp, #84	; 0x54
 800f658:	4620      	mov	r0, r4
 800f65a:	f000 fd9f 	bl	801019c <canM_SendToAddr>
 800f65e:	2800      	cmp	r0, #0
 800f660:	d0f4      	beq.n	800f64c <canIdle_ScanDevice+0x4c>
 800f662:	2201      	movs	r2, #1
         while (timeout--)
 800f664:	1e53      	subs	r3, r2, #1
 800f666:	b2dd      	uxtb	r5, r3
 800f668:	2a00      	cmp	r2, #0
 800f66a:	d0ef      	beq.n	800f64c <canIdle_ScanDevice+0x4c>
            if (true == canM_ReadAddr((uint32_t *)&md80Addr[md80num], (uint8_t *)dataResp, (uint8_t *)&dataSize))
 800f66c:	f10d 0213 	add.w	r2, sp, #19
 800f670:	a905      	add	r1, sp, #20
 800f672:	eb0d 0046 	add.w	r0, sp, r6, lsl #1
 800f676:	f000 fddb 	bl	8010230 <canM_ReadAddr>
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d1d8      	bne.n	800f630 <canIdle_ScanDevice+0x30>
            if (md80num >= CANIDLE_TOTAL_DEV_SUPPORT)
 800f67e:	2e07      	cmp	r6, #7
 800f680:	d8e4      	bhi.n	800f64c <canIdle_ScanDevice+0x4c>
            osDelay(1);
 800f682:	2001      	movs	r0, #1
 800f684:	f7f8 ff65 	bl	8008552 <osDelay>
         while (timeout--)
 800f688:	462a      	mov	r2, r5
 800f68a:	e7eb      	b.n	800f664 <canIdle_ScanDevice+0x64>
   if (md80num > 0)
 800f68c:	b916      	cbnz	r6, 800f694 <canIdle_ScanDevice+0x94>
}
 800f68e:	b016      	add	sp, #88	; 0x58
 800f690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      memcpy(app->rsp.data, md80Addr, md80num * 2u);
 800f694:	0074      	lsls	r4, r6, #1
 800f696:	4622      	mov	r2, r4
 800f698:	4669      	mov	r1, sp
 800f69a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800f69e:	f002 fbe3 	bl	8011e68 <memcpy>
      app->rsp.size = md80num * 2u;
 800f6a2:	f887 403b 	strb.w	r4, [r7, #59]	; 0x3b
      app->numMd80Det = md80num;
 800f6a6:	f887 6054 	strb.w	r6, [r7, #84]	; 0x54
}
 800f6aa:	e7f0      	b.n	800f68e <canIdle_ScanDevice+0x8e>
 800f6ac:	080136d4 	.word	0x080136d4

0800f6b0 <canIdle_AddMd80>:
{
 800f6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b4:	b082      	sub	sp, #8
   uint16_t canTxAddr = 0u;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	f8ad 3006 	strh.w	r3, [sp, #6]
   uint16_t canRxAddr = 0u;
 800f6bc:	f8ad 3004 	strh.w	r3, [sp, #4]
   if (app->cmd.size > 2u)
 800f6c0:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f6c4:	2b02      	cmp	r3, #2
 800f6c6:	d91c      	bls.n	800f702 <canIdle_AddMd80+0x52>
      canAddr = (((uint16_t)app->cmd.data[1] << 8u) & 0xFF00U) | (((uint16_t)app->cmd.data[0]) & 0x00FFU);
 800f6c8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800f6cc:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
 800f6d0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
      for (iter = 0u; iter < CANIDLE_TOTAL_DEV_SUPPORT; iter++)
 800f6d4:	2400      	movs	r4, #0
 800f6d6:	e019      	b.n	800f70c <canIdle_AddMd80+0x5c>
            md80_Init((tMd80_Device *)pMd80dev);
 800f6d8:	f7fc f8f8 	bl	800b8cc <md80_Init>
            pMd80dev->config.canId = iter;
 800f6dc:	4f18      	ldr	r7, [pc, #96]	; (800f740 <canIdle_AddMd80+0x90>)
 800f6de:	ea4f 1844 	mov.w	r8, r4, lsl #5
 800f6e2:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 800f6e6:	011b      	lsls	r3, r3, #4
 800f6e8:	54fc      	strb	r4, [r7, r3]
            canM_SetAddrTxRxDev(iter, canAddr, canAddr);
 800f6ea:	462a      	mov	r2, r5
 800f6ec:	4629      	mov	r1, r5
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	f000 fd10 	bl	8010114 <canM_SetAddrTxRxDev>
            pMd80dev->config.isMd80Detected = true;
 800f6f4:	eba8 0804 	sub.w	r8, r8, r4
 800f6f8:	eb07 1708 	add.w	r7, r7, r8, lsl #4
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
}
 800f702:	b002      	add	sp, #8
 800f704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      for (iter = 0u; iter < CANIDLE_TOTAL_DEV_SUPPORT; iter++)
 800f708:	3401      	adds	r4, #1
 800f70a:	b2e4      	uxtb	r4, r4
 800f70c:	2c07      	cmp	r4, #7
 800f70e:	d8f8      	bhi.n	800f702 <canIdle_AddMd80+0x52>
         pMd80dev = (tMd80_Device *)&md80Dev[iter];
 800f710:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 800f714:	480a      	ldr	r0, [pc, #40]	; (800f740 <canIdle_AddMd80+0x90>)
 800f716:	eb00 1003 	add.w	r0, r0, r3, lsl #4
         if (false == pMd80dev->config.isMd80Detected)
 800f71a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d0da      	beq.n	800f6d8 <canIdle_AddMd80+0x28>
            canM_GetAddrTxRxDev(iter, &canTxAddr, &canRxAddr);
 800f722:	aa01      	add	r2, sp, #4
 800f724:	f10d 0106 	add.w	r1, sp, #6
 800f728:	4620      	mov	r0, r4
 800f72a:	f000 fd09 	bl	8010140 <canM_GetAddrTxRxDev>
            if ((canAddr == canTxAddr) && (canAddr == canRxAddr))
 800f72e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f732:	42ab      	cmp	r3, r5
 800f734:	d1e8      	bne.n	800f708 <canIdle_AddMd80+0x58>
 800f736:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f73a:	42ab      	cmp	r3, r5
 800f73c:	d1e4      	bne.n	800f708 <canIdle_AddMd80+0x58>
 800f73e:	e7e0      	b.n	800f702 <canIdle_AddMd80+0x52>
 800f740:	200071cc 	.word	0x200071cc

0800f744 <canIdle_Reset>:
{
 800f744:	b570      	push	{r4, r5, r6, lr}
 800f746:	4606      	mov	r6, r0
   canIdle_End(app);
 800f748:	f7ff fb89 	bl	800ee5e <canIdle_End>
   taskENTER_CRITICAL();
 800f74c:	f7fa fc82 	bl	800a054 <vPortEnterCritical>
   if (app->numMd80Det > 0)
 800f750:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
 800f754:	b9fb      	cbnz	r3, 800f796 <canIdle_Reset+0x52>
   app->numMd80Det = 0;
 800f756:	2300      	movs	r3, #0
 800f758:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   app->state = CANIDLE_IDLE;
 800f75c:	76f3      	strb	r3, [r6, #27]
   app->isNewCommand = false;
 800f75e:	7773      	strb	r3, [r6, #29]
   taskEXIT_CRITICAL();
 800f760:	f7fa fc9a 	bl	800a098 <vPortExitCritical>
}
 800f764:	bd70      	pop	{r4, r5, r6, pc}
      for (md80Idx = 0u; md80Idx < app->numMd80Det; md80Idx ++)
 800f766:	3401      	adds	r4, #1
 800f768:	b2e4      	uxtb	r4, r4
 800f76a:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
 800f76e:	42a3      	cmp	r3, r4
 800f770:	d913      	bls.n	800f79a <canIdle_Reset+0x56>
         pMd80dev = (tMd80_Device *)&md80Dev[md80Idx];
 800f772:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 800f776:	4d0f      	ldr	r5, [pc, #60]	; (800f7b4 <canIdle_Reset+0x70>)
 800f778:	eb05 1503 	add.w	r5, r5, r3, lsl #4
         if (true == md80_IsEnabled(pMd80dev))
 800f77c:	4628      	mov	r0, r5
 800f77e:	f7fc fa23 	bl	800bbc8 <md80_IsEnabled>
 800f782:	2800      	cmp	r0, #0
 800f784:	d0ef      	beq.n	800f766 <canIdle_Reset+0x22>
            md80_ControlMd80Enable (pMd80dev, false);
 800f786:	2100      	movs	r1, #0
 800f788:	4628      	mov	r0, r5
 800f78a:	f7fc f992 	bl	800bab2 <md80_ControlMd80Enable>
            pMd80dev->config.isMd80Detected = false;
 800f78e:	2200      	movs	r2, #0
 800f790:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
 800f794:	e7e7      	b.n	800f766 <canIdle_Reset+0x22>
      for (md80Idx = 0u; md80Idx < app->numMd80Det; md80Idx ++)
 800f796:	2400      	movs	r4, #0
 800f798:	e7e7      	b.n	800f76a <canIdle_Reset+0x26>
      for (md80Idx = 0u; md80Idx < CANIDLE_TOTAL_DEV_SUPPORT; md80Idx ++)
 800f79a:	2300      	movs	r3, #0
 800f79c:	e006      	b.n	800f7ac <canIdle_Reset+0x68>
         Obj.md80_addrs[md80Idx] = 0x00;
 800f79e:	4a06      	ldr	r2, [pc, #24]	; (800f7b8 <canIdle_Reset+0x74>)
 800f7a0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	6051      	str	r1, [r2, #4]
      for (md80Idx = 0u; md80Idx < CANIDLE_TOTAL_DEV_SUPPORT; md80Idx ++)
 800f7a8:	3301      	adds	r3, #1
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	2b07      	cmp	r3, #7
 800f7ae:	d9f6      	bls.n	800f79e <canIdle_Reset+0x5a>
 800f7b0:	e7d1      	b.n	800f756 <canIdle_Reset+0x12>
 800f7b2:	bf00      	nop
 800f7b4:	200071cc 	.word	0x200071cc
 800f7b8:	2000d350 	.word	0x2000d350

0800f7bc <canIdle_Control>:
   /* Update state. */
   return nextState;
}

static void canIdle_Control(tCanIdle_Data * const app)
{
 800f7bc:	b538      	push	{r3, r4, r5, lr}
 800f7be:	4605      	mov	r5, r0
   uint8_t iter = 0u;
   tMd80_Device *pMd80dev = NULL;

   for (iter = 0u; iter < app->numMd80Det; iter++)
 800f7c0:	2400      	movs	r4, #0
 800f7c2:	e008      	b.n	800f7d6 <canIdle_Control+0x1a>
   {
      /* Get the data structure of md80. */
      pMd80dev = (tMd80_Device *)&md80Dev[iter];
 800f7c4:	ebc4 1044 	rsb	r0, r4, r4, lsl #5

      /* Run the main function. */
      md80_MainFunction(pMd80dev);
 800f7c8:	4b05      	ldr	r3, [pc, #20]	; (800f7e0 <canIdle_Control+0x24>)
 800f7ca:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800f7ce:	f7fc f985 	bl	800badc <md80_MainFunction>
   for (iter = 0u; iter < app->numMd80Det; iter++)
 800f7d2:	3401      	adds	r4, #1
 800f7d4:	b2e4      	uxtb	r4, r4
 800f7d6:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 800f7da:	42a3      	cmp	r3, r4
 800f7dc:	d8f2      	bhi.n	800f7c4 <canIdle_Control+0x8>
   }
}
 800f7de:	bd38      	pop	{r3, r4, r5, pc}
 800f7e0:	200071cc 	.word	0x200071cc

0800f7e4 <frameTypeName>:
	switch (idType){
 800f7e4:	2871      	cmp	r0, #113	; 0x71
 800f7e6:	d83e      	bhi.n	800f866 <frameTypeName+0x82>
 800f7e8:	2871      	cmp	r0, #113	; 0x71
 800f7ea:	d862      	bhi.n	800f8b2 <frameTypeName+0xce>
 800f7ec:	e8df f000 	tbb	[pc, r0]
 800f7f0:	413f6339 	.word	0x413f6339
 800f7f4:	61474543 	.word	0x61474543
 800f7f8:	61616161 	.word	0x61616161
 800f7fc:	61616161 	.word	0x61616161
 800f800:	4f4d4b49 	.word	0x4f4d4b49
 800f804:	61616151 	.word	0x61616151
 800f808:	61616161 	.word	0x61616161
 800f80c:	61616161 	.word	0x61616161
 800f810:	61615553 	.word	0x61615553
 800f814:	61616161 	.word	0x61616161
 800f818:	61616161 	.word	0x61616161
 800f81c:	61616161 	.word	0x61616161
 800f820:	61616161 	.word	0x61616161
 800f824:	61616161 	.word	0x61616161
 800f828:	61616161 	.word	0x61616161
 800f82c:	61616161 	.word	0x61616161
 800f830:	61615957 	.word	0x61615957
 800f834:	61616161 	.word	0x61616161
 800f838:	61616161 	.word	0x61616161
 800f83c:	61616161 	.word	0x61616161
 800f840:	61616161 	.word	0x61616161
 800f844:	61616161 	.word	0x61616161
 800f848:	61616161 	.word	0x61616161
 800f84c:	61616161 	.word	0x61616161
 800f850:	61616161 	.word	0x61616161
 800f854:	61616161 	.word	0x61616161
 800f858:	61615b61 	.word	0x61615b61
 800f85c:	61616161 	.word	0x61616161
 800f860:	5f5d      	.short	0x5f5d
 800f862:	4817      	ldr	r0, [pc, #92]	; (800f8c0 <frameTypeName+0xdc>)
 800f864:	4770      	bx	lr
 800f866:	28a0      	cmp	r0, #160	; 0xa0
 800f868:	d127      	bne.n	800f8ba <frameTypeName+0xd6>
				return "RESPONSE_DEFAULT";
 800f86a:	4816      	ldr	r0, [pc, #88]	; (800f8c4 <frameTypeName+0xe0>)
 800f86c:	4770      	bx	lr
				return "CONTROL_SELECT";
 800f86e:	4816      	ldr	r0, [pc, #88]	; (800f8c8 <frameTypeName+0xe4>)
 800f870:	4770      	bx	lr
				return "ZERO_ENCODER";
 800f872:	4816      	ldr	r0, [pc, #88]	; (800f8cc <frameTypeName+0xe8>)
 800f874:	4770      	bx	lr
				return "BASE_CONFIG";
 800f876:	4816      	ldr	r0, [pc, #88]	; (800f8d0 <frameTypeName+0xec>)
 800f878:	4770      	bx	lr
				return "GET_INFO";
 800f87a:	4816      	ldr	r0, [pc, #88]	; (800f8d4 <frameTypeName+0xf0>)
 800f87c:	4770      	bx	lr
				return "SET_TORQUE_BW";
 800f87e:	4816      	ldr	r0, [pc, #88]	; (800f8d8 <frameTypeName+0xf4>)
 800f880:	4770      	bx	lr
				return "POS_CONTROL";
 800f882:	4816      	ldr	r0, [pc, #88]	; (800f8dc <frameTypeName+0xf8>)
 800f884:	4770      	bx	lr
				return "VEL_CONTROL";
 800f886:	4816      	ldr	r0, [pc, #88]	; (800f8e0 <frameTypeName+0xfc>)
 800f888:	4770      	bx	lr
				return "IMP_CONTROL";
 800f88a:	4816      	ldr	r0, [pc, #88]	; (800f8e4 <frameTypeName+0x100>)
 800f88c:	4770      	bx	lr
				return "RESTART";
 800f88e:	4816      	ldr	r0, [pc, #88]	; (800f8e8 <frameTypeName+0x104>)
 800f890:	4770      	bx	lr
				return "SET_MOTION_TARGETS";
 800f892:	4816      	ldr	r0, [pc, #88]	; (800f8ec <frameTypeName+0x108>)
 800f894:	4770      	bx	lr
				return "CAN_CONFIG";
 800f896:	4816      	ldr	r0, [pc, #88]	; (800f8f0 <frameTypeName+0x10c>)
 800f898:	4770      	bx	lr
				return "CAN_SAVE";
 800f89a:	4816      	ldr	r0, [pc, #88]	; (800f8f4 <frameTypeName+0x110>)
 800f89c:	4770      	bx	lr
				return "WRITE_REGISTER";
 800f89e:	4816      	ldr	r0, [pc, #88]	; (800f8f8 <frameTypeName+0x114>)
 800f8a0:	4770      	bx	lr
				return "READ_REGISTER";
 800f8a2:	4816      	ldr	r0, [pc, #88]	; (800f8fc <frameTypeName+0x118>)
 800f8a4:	4770      	bx	lr
				return "DIAGNOSTIC";
 800f8a6:	4816      	ldr	r0, [pc, #88]	; (800f900 <frameTypeName+0x11c>)
 800f8a8:	4770      	bx	lr
				return "CALIBRATION";
 800f8aa:	4816      	ldr	r0, [pc, #88]	; (800f904 <frameTypeName+0x120>)
 800f8ac:	4770      	bx	lr
				return "CALIBRATION_OUTPUT";
 800f8ae:	4816      	ldr	r0, [pc, #88]	; (800f908 <frameTypeName+0x124>)
 800f8b0:	4770      	bx	lr
			return "Unknown command";
 800f8b2:	4816      	ldr	r0, [pc, #88]	; (800f90c <frameTypeName+0x128>)
 800f8b4:	4770      	bx	lr
				return "MOTOR_ENABLE";
 800f8b6:	4816      	ldr	r0, [pc, #88]	; (800f910 <frameTypeName+0x12c>)
 800f8b8:	4770      	bx	lr
			return "Unknown command";
 800f8ba:	4814      	ldr	r0, [pc, #80]	; (800f90c <frameTypeName+0x128>)
}
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	08013818 	.word	0x08013818
 800f8c4:	08013804 	.word	0x08013804
 800f8c8:	08013718 	.word	0x08013718
 800f8cc:	08013728 	.word	0x08013728
 800f8d0:	08013738 	.word	0x08013738
 800f8d4:	08013744 	.word	0x08013744
 800f8d8:	08013750 	.word	0x08013750
 800f8dc:	08013760 	.word	0x08013760
 800f8e0:	0801376c 	.word	0x0801376c
 800f8e4:	08013778 	.word	0x08013778
 800f8e8:	08013784 	.word	0x08013784
 800f8ec:	0801378c 	.word	0x0801378c
 800f8f0:	080137a0 	.word	0x080137a0
 800f8f4:	080137ac 	.word	0x080137ac
 800f8f8:	080137b8 	.word	0x080137b8
 800f8fc:	080137c8 	.word	0x080137c8
 800f900:	080137d8 	.word	0x080137d8
 800f904:	080137e4 	.word	0x080137e4
 800f908:	080137f0 	.word	0x080137f0
 800f90c:	080136f8 	.word	0x080136f8
 800f910:	08013708 	.word	0x08013708

0800f914 <canIdle_GenericFrame>:
{
 800f914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f918:	b083      	sub	sp, #12
 800f91a:	4605      	mov	r5, r0
   cmd = app->cmd.data[0];
 800f91c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
   md80Id = app->cmd.motorId;
 800f920:	7f86      	ldrb	r6, [r0, #30]
   pMd80dev = (tMd80_Device *)&md80Dev[md80Id];
 800f922:	ebc6 1246 	rsb	r2, r6, r6, lsl #5
 800f926:	4b56      	ldr	r3, [pc, #344]	; (800fa80 <canIdle_GenericFrame+0x16c>)
 800f928:	eb03 1902 	add.w	r9, r3, r2, lsl #4
   sendMessage(canIde_bringUp_motor, 2, cmd, md80Id);
 800f92c:	4633      	mov	r3, r6
 800f92e:	4622      	mov	r2, r4
 800f930:	2102      	movs	r1, #2
 800f932:	2004      	movs	r0, #4
 800f934:	f7f1 f8ea 	bl	8000b0c <sendMessage>
   cdc_printf("@%u\t[Bring up Motor Command]:\t %s for %d\r\n",xTaskGetTickCount()/portTICK_PERIOD_MS,frameTypeName((tMd80_FrameId) cmd) ,md80Id);
 800f938:	f7f9 fd32 	bl	80093a0 <xTaskGetTickCount>
 800f93c:	4607      	mov	r7, r0
 800f93e:	4620      	mov	r0, r4
 800f940:	f7ff ff50 	bl	800f7e4 <frameTypeName>
 800f944:	4602      	mov	r2, r0
 800f946:	4633      	mov	r3, r6
 800f948:	4639      	mov	r1, r7
 800f94a:	484e      	ldr	r0, [pc, #312]	; (800fa84 <canIdle_GenericFrame+0x170>)
 800f94c:	f7f1 f91a 	bl	8000b84 <cdc_printf>
   switch (cmd)
 800f950:	2c21      	cmp	r4, #33	; 0x21
 800f952:	d816      	bhi.n	800f982 <canIdle_GenericFrame+0x6e>
 800f954:	f04f 0800 	mov.w	r8, #0
 800f958:	2c21      	cmp	r4, #33	; 0x21
 800f95a:	d81d      	bhi.n	800f998 <canIdle_GenericFrame+0x84>
 800f95c:	e8df f004 	tbb	[pc, r4]
 800f960:	192c231f 	.word	0x192c231f
 800f964:	1c3a1c32 	.word	0x1c3a1c32
 800f968:	1c1c1c1c 	.word	0x1c1c1c1c
 800f96c:	1c1c1c1c 	.word	0x1c1c1c1c
 800f970:	8c67533f 	.word	0x8c67533f
 800f974:	1c1c1c1c 	.word	0x1c1c1c1c
 800f978:	1c1c1c1c 	.word	0x1c1c1c1c
 800f97c:	1c1c1c1c 	.word	0x1c1c1c1c
 800f980:	8877      	.short	0x8877
 800f982:	2c70      	cmp	r4, #112	; 0x70
 800f984:	d05f      	beq.n	800fa46 <canIdle_GenericFrame+0x132>
 800f986:	2c71      	cmp	r4, #113	; 0x71
 800f988:	d106      	bne.n	800f998 <canIdle_GenericFrame+0x84>
      md80_setupCalibrationOutput(pMd80dev);
 800f98a:	4648      	mov	r0, r9
 800f98c:	f7fb ffdc 	bl	800b948 <md80_setupCalibrationOutput>
      break;
 800f990:	e002      	b.n	800f998 <canIdle_GenericFrame+0x84>
      md80_SetEncoderZero(pMd80dev);
 800f992:	4648      	mov	r0, r9
 800f994:	f7fc f8ee 	bl	800bb74 <md80_SetEncoderZero>
}
 800f998:	b003      	add	sp, #12
 800f99a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      md80_ConfigBlink(pMd80dev);
 800f99e:	4648      	mov	r0, r9
 800f9a0:	f7fb ffb6 	bl	800b910 <md80_ConfigBlink>
      break;
 800f9a4:	e7f8      	b.n	800f998 <canIdle_GenericFrame+0x84>
      md80En = app->cmd.data[1];
 800f9a6:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
      md80_ControlMd80Enable(pMd80dev, md80En);
 800f9aa:	3900      	subs	r1, #0
 800f9ac:	bf18      	it	ne
 800f9ae:	2101      	movne	r1, #1
 800f9b0:	4648      	mov	r0, r9
 800f9b2:	f7fc f87e 	bl	800bab2 <md80_ControlMd80Enable>
      break;
 800f9b6:	e7ef      	b.n	800f998 <canIdle_GenericFrame+0x84>
      md80_ControlMd80Mode(pMd80dev, md80Mode);
 800f9b8:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
 800f9bc:	4648      	mov	r0, r9
 800f9be:	f7fc f863 	bl	800ba88 <md80_ControlMd80Mode>
      break;
 800f9c2:	e7e9      	b.n	800f998 <canIdle_GenericFrame+0x84>
      md80_SetCurrentLimit(pMd80dev, currentLimit);
 800f9c4:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
 800f9c8:	ee00 3a10 	vmov	s0, r3
 800f9cc:	4648      	mov	r0, r9
 800f9ce:	f7fc f82b 	bl	800ba28 <md80_SetCurrentLimit>
      break;
 800f9d2:	e7e1      	b.n	800f998 <canIdle_GenericFrame+0x84>
      md80_SetMaxTorque(pMd80dev, torqueBandwidth);
 800f9d4:	8c69      	ldrh	r1, [r5, #34]	; 0x22
 800f9d6:	4648      	mov	r0, r9
 800f9d8:	f7fc f8b8 	bl	800bb4c <md80_SetMaxTorque>
      break;
 800f9dc:	e7dc      	b.n	800f998 <canIdle_GenericFrame+0x84>
      md80_SetPositionControllerParams(pMd80dev, kp, ki, kd, iWindup);
 800f9de:	f8d5 302e 	ldr.w	r3, [r5, #46]	; 0x2e
 800f9e2:	ee01 3a90 	vmov	s3, r3
 800f9e6:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
 800f9ea:	ee01 3a10 	vmov	s2, r3
 800f9ee:	f8d5 3026 	ldr.w	r3, [r5, #38]	; 0x26
 800f9f2:	ee00 3a90 	vmov	s1, r3
 800f9f6:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
 800f9fa:	ee00 3a10 	vmov	s0, r3
 800f9fe:	4648      	mov	r0, r9
 800fa00:	f7fc f884 	bl	800bb0c <md80_SetPositionControllerParams>
      break;
 800fa04:	e7c8      	b.n	800f998 <canIdle_GenericFrame+0x84>
      md80_SetVelocityControllerParams(pMd80dev, kp, ki, kd, iWindup);
 800fa06:	f8d5 302e 	ldr.w	r3, [r5, #46]	; 0x2e
 800fa0a:	ee01 3a90 	vmov	s3, r3
 800fa0e:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
 800fa12:	ee01 3a10 	vmov	s2, r3
 800fa16:	f8d5 3026 	ldr.w	r3, [r5, #38]	; 0x26
 800fa1a:	ee00 3a90 	vmov	s1, r3
 800fa1e:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
 800fa22:	ee00 3a10 	vmov	s0, r3
 800fa26:	4648      	mov	r0, r9
 800fa28:	f7fc f87c 	bl	800bb24 <md80_SetVelocityControllerParams>
      break;
 800fa2c:	e7b4      	b.n	800f998 <canIdle_GenericFrame+0x84>
      md80_SetImpedanceControllerParams(pMd80dev, kp, kd);
 800fa2e:	f8d5 3026 	ldr.w	r3, [r5, #38]	; 0x26
 800fa32:	ee00 3a90 	vmov	s1, r3
 800fa36:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
 800fa3a:	ee00 3a10 	vmov	s0, r3
 800fa3e:	4648      	mov	r0, r9
 800fa40:	f7fc f87c 	bl	800bb3c <md80_SetImpedanceControllerParams>
      break;
 800fa44:	e7a8      	b.n	800f998 <canIdle_GenericFrame+0x84>
      md80_setupCalibration(pMd80dev);
 800fa46:	4648      	mov	r0, r9
 800fa48:	f7fb ff70 	bl	800b92c <md80_setupCalibration>
      break;
 800fa4c:	e7a4      	b.n	800f998 <canIdle_GenericFrame+0x84>
      memcpy((void *)&newBaudrate, (void *)&app->cmd.data[2], sizeof(uint32_t));
 800fa4e:	f8d5 3023 	ldr.w	r3, [r5, #35]	; 0x23
 800fa52:	f8cd 3007 	str.w	r3, [sp, #7]
      memcpy((void *)&newTimeout, (void *)&app->cmd.data[6], sizeof(uint16_t));
 800fa56:	f8b5 3027 	ldrh.w	r3, [r5, #39]	; 0x27
 800fa5a:	f363 080f 	bfi	r8, r3, #0, #16
      md80_ConfigMd80Can(pMd80dev, newBaudrate, newTimeout, canTermination);
 800fa5e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800fa62:	4642      	mov	r2, r8
 800fa64:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fa68:	4648      	mov	r0, r9
 800fa6a:	f7fb ff89 	bl	800b980 <md80_ConfigMd80Can>
      break;
 800fa6e:	e793      	b.n	800f998 <canIdle_GenericFrame+0x84>
      md80_ConfigMd80Save(pMd80dev);
 800fa70:	4648      	mov	r0, r9
 800fa72:	f7fb ffaf 	bl	800b9d4 <md80_ConfigMd80Save>
      break;
 800fa76:	e78f      	b.n	800f998 <canIdle_GenericFrame+0x84>
      md80_Restart(pMd80dev);
 800fa78:	4648      	mov	r0, r9
 800fa7a:	f7fb ff73 	bl	800b964 <md80_Restart>
}
 800fa7e:	e78b      	b.n	800f998 <canIdle_GenericFrame+0x84>
 800fa80:	200071cc 	.word	0x200071cc
 800fa84:	08013824 	.word	0x08013824

0800fa88 <busFrameName>:
	switch (state){
 800fa88:	280a      	cmp	r0, #10
 800fa8a:	d81b      	bhi.n	800fac4 <busFrameName+0x3c>
 800fa8c:	e8df f000 	tbb	[pc, r0]
 800fa90:	0a081c06 	.word	0x0a081c06
 800fa94:	12100e0c 	.word	0x12100e0c
 800fa98:	1614      	.short	0x1614
 800fa9a:	18          	.byte	0x18
 800fa9b:	00          	.byte	0x00
 800fa9c:	480b      	ldr	r0, [pc, #44]	; (800facc <busFrameName+0x44>)
 800fa9e:	4770      	bx	lr
				return "CANDLE_CFG_BR";
 800faa0:	480b      	ldr	r0, [pc, #44]	; (800fad0 <busFrameName+0x48>)
 800faa2:	4770      	bx	lr
				return "MD80_ADD";
 800faa4:	480b      	ldr	r0, [pc, #44]	; (800fad4 <busFrameName+0x4c>)
 800faa6:	4770      	bx	lr
				return "GENERIC_FRAME";
 800faa8:	480b      	ldr	r0, [pc, #44]	; (800fad8 <busFrameName+0x50>)
 800faaa:	4770      	bx	lr
				return "CONFIG_CAN";
 800faac:	480b      	ldr	r0, [pc, #44]	; (800fadc <busFrameName+0x54>)
 800faae:	4770      	bx	lr
				return "B_F_BEGIN";
 800fab0:	480b      	ldr	r0, [pc, #44]	; (800fae0 <busFrameName+0x58>)
 800fab2:	4770      	bx	lr
				return "B_F_END";
 800fab4:	480b      	ldr	r0, [pc, #44]	; (800fae4 <busFrameName+0x5c>)
 800fab6:	4770      	bx	lr
				return "B_F_UPDATE";
 800fab8:	480b      	ldr	r0, [pc, #44]	; (800fae8 <busFrameName+0x60>)
 800faba:	4770      	bx	lr
				return "B_F_RESET";
 800fabc:	480b      	ldr	r0, [pc, #44]	; (800faec <busFrameName+0x64>)
 800fabe:	4770      	bx	lr
				return "B_F_INVALID";
 800fac0:	480b      	ldr	r0, [pc, #44]	; (800faf0 <busFrameName+0x68>)
 800fac2:	4770      	bx	lr
			return "Unknown command";
 800fac4:	480b      	ldr	r0, [pc, #44]	; (800faf4 <busFrameName+0x6c>)
 800fac6:	4770      	bx	lr
				return "PING_START";
 800fac8:	480b      	ldr	r0, [pc, #44]	; (800faf8 <busFrameName+0x70>)
}
 800faca:	4770      	bx	lr
 800facc:	08013850 	.word	0x08013850
 800fad0:	08013868 	.word	0x08013868
 800fad4:	08013878 	.word	0x08013878
 800fad8:	08013884 	.word	0x08013884
 800fadc:	08013894 	.word	0x08013894
 800fae0:	080138a0 	.word	0x080138a0
 800fae4:	080138ac 	.word	0x080138ac
 800fae8:	080138b4 	.word	0x080138b4
 800faec:	080138c0 	.word	0x080138c0
 800faf0:	080138cc 	.word	0x080138cc
 800faf4:	080136f8 	.word	0x080136f8
 800faf8:	0801385c 	.word	0x0801385c

0800fafc <canIdle_Command>:
{
 800fafc:	b538      	push	{r3, r4, r5, lr}
 800fafe:	4604      	mov	r4, r0
   cdc_printf("[canIdle_Command]@%u:\t %s\ for %d\r\n",GetCycleCount(),busFrameName(app->hostReq.frId),app->cmd.motorId );
 800fb00:	f7f1 f86c 	bl	8000bdc <GetCycleCount>
 800fb04:	4605      	mov	r5, r0
 800fb06:	7860      	ldrb	r0, [r4, #1]
 800fb08:	f7ff ffbe 	bl	800fa88 <busFrameName>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	7fa3      	ldrb	r3, [r4, #30]
 800fb10:	4629      	mov	r1, r5
 800fb12:	481b      	ldr	r0, [pc, #108]	; (800fb80 <canIdle_Command+0x84>)
 800fb14:	f7f1 f836 	bl	8000b84 <cdc_printf>
   switch (app->hostReq.frId)
 800fb18:	7863      	ldrb	r3, [r4, #1]
 800fb1a:	2b09      	cmp	r3, #9
 800fb1c:	d823      	bhi.n	800fb66 <canIdle_Command+0x6a>
 800fb1e:	e8df f003 	tbb	[pc, r3]
 800fb22:	0508      	.short	0x0508
 800fb24:	220e0a1e 	.word	0x220e0a1e
 800fb28:	1a221612 	.word	0x1a221612
      canIdle_ScanDevice(app);
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	f7ff fd67 	bl	800f600 <canIdle_ScanDevice>
}
 800fb32:	2003      	movs	r0, #3
 800fb34:	bd38      	pop	{r3, r4, r5, pc}
      canIdle_AddMd80(app);
 800fb36:	4620      	mov	r0, r4
 800fb38:	f7ff fdba 	bl	800f6b0 <canIdle_AddMd80>
      break;
 800fb3c:	e7f9      	b.n	800fb32 <canIdle_Command+0x36>
      canIdle_GenericFrame(app);
 800fb3e:	4620      	mov	r0, r4
 800fb40:	f7ff fee8 	bl	800f914 <canIdle_GenericFrame>
      break;
 800fb44:	e7f5      	b.n	800fb32 <canIdle_Command+0x36>
      canIdle_Begin(app);
 800fb46:	4620      	mov	r0, r4
 800fb48:	f7ff f984 	bl	800ee54 <canIdle_Begin>
      break;
 800fb4c:	e7f1      	b.n	800fb32 <canIdle_Command+0x36>
      canIdle_End(app);
 800fb4e:	4620      	mov	r0, r4
 800fb50:	f7ff f985 	bl	800ee5e <canIdle_End>
      break;
 800fb54:	e7ed      	b.n	800fb32 <canIdle_Command+0x36>
      canIdle_Reset(app);
 800fb56:	4620      	mov	r0, r4
 800fb58:	f7ff fdf4 	bl	800f744 <canIdle_Reset>
      break;
 800fb5c:	e7e9      	b.n	800fb32 <canIdle_Command+0x36>
      canIdle_ConfigBaudrate(app);
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f7ff f99a 	bl	800ee98 <canIdle_ConfigBaudrate>
      break;
 800fb64:	e7e5      	b.n	800fb32 <canIdle_Command+0x36>
      cdc_printf("[canIdle_Command]@%u:\t unhandled command %s\r\n",GetCycleCount(),busFrameName(nextState) );
 800fb66:	f7f1 f839 	bl	8000bdc <GetCycleCount>
 800fb6a:	4604      	mov	r4, r0
 800fb6c:	2002      	movs	r0, #2
 800fb6e:	f7ff ff8b 	bl	800fa88 <busFrameName>
 800fb72:	4602      	mov	r2, r0
 800fb74:	4621      	mov	r1, r4
 800fb76:	4803      	ldr	r0, [pc, #12]	; (800fb84 <canIdle_Command+0x88>)
 800fb78:	f7f1 f804 	bl	8000b84 <cdc_printf>
      break;
 800fb7c:	e7d9      	b.n	800fb32 <canIdle_Command+0x36>
 800fb7e:	bf00      	nop
 800fb80:	080138d8 	.word	0x080138d8
 800fb84:	080138fc 	.word	0x080138fc

0800fb88 <busFrameTypeName>:


const char* busFrameTypeName(tMd80_BusFrameId type){
	switch(type){
 800fb88:	280a      	cmp	r0, #10
 800fb8a:	d81b      	bhi.n	800fbc4 <busFrameTypeName+0x3c>
 800fb8c:	e8df f000 	tbb	[pc, r0]
 800fb90:	0a081c06 	.word	0x0a081c06
 800fb94:	12100e0c 	.word	0x12100e0c
 800fb98:	1614      	.short	0x1614
 800fb9a:	18          	.byte	0x18
 800fb9b:	00          	.byte	0x00
 800fb9c:	480b      	ldr	r0, [pc, #44]	; (800fbcc <busFrameTypeName+0x44>)
 800fb9e:	4770      	bx	lr
	case(BUS_FRAME_NONE ):
		return "NONE";
	case(BUS_FRAME_PING_START ):
		return "PING_START";
	case(BUS_FRAME_CANDLE_CONFIG_BAUDRATE ):
		return "CANDLE_CONF_BAUDRATE";
 800fba0:	480b      	ldr	r0, [pc, #44]	; (800fbd0 <busFrameTypeName+0x48>)
 800fba2:	4770      	bx	lr
	case(BUS_FRAME_MD80_ADD ):
		return "MD80_ADD";
 800fba4:	480b      	ldr	r0, [pc, #44]	; (800fbd4 <busFrameTypeName+0x4c>)
 800fba6:	4770      	bx	lr
	case(BUS_FRAME_MD80_GENERIC_FRAME ):
		return "MD80_GENERIC_FRAME";
 800fba8:	480b      	ldr	r0, [pc, #44]	; (800fbd8 <busFrameTypeName+0x50>)
 800fbaa:	4770      	bx	lr
	case(BUS_FRAME_MD80_CONFIG_CAN ):
		return "MD80_CONFIG_CAN";
 800fbac:	480b      	ldr	r0, [pc, #44]	; (800fbdc <busFrameTypeName+0x54>)
 800fbae:	4770      	bx	lr
	case(BUS_FRAME_BEGIN ):
		return "BEGIN";
 800fbb0:	480b      	ldr	r0, [pc, #44]	; (800fbe0 <busFrameTypeName+0x58>)
 800fbb2:	4770      	bx	lr
	case(BUS_FRAME_END ):
		return "END";
 800fbb4:	480b      	ldr	r0, [pc, #44]	; (800fbe4 <busFrameTypeName+0x5c>)
 800fbb6:	4770      	bx	lr
	case(BUS_FRAME_UPDATE ):
		return "UPDATE";
 800fbb8:	480b      	ldr	r0, [pc, #44]	; (800fbe8 <busFrameTypeName+0x60>)
 800fbba:	4770      	bx	lr
	case(BUS_FRAME_RESET ):
		return "RESET";
 800fbbc:	480b      	ldr	r0, [pc, #44]	; (800fbec <busFrameTypeName+0x64>)
 800fbbe:	4770      	bx	lr
	case(BUS_FRAME_INVALID):
		return "INVALID";
 800fbc0:	480b      	ldr	r0, [pc, #44]	; (800fbf0 <busFrameTypeName+0x68>)
 800fbc2:	4770      	bx	lr
	default:
		return "Unknown";
 800fbc4:	480b      	ldr	r0, [pc, #44]	; (800fbf4 <busFrameTypeName+0x6c>)
 800fbc6:	4770      	bx	lr
		return "PING_START";
 800fbc8:	480b      	ldr	r0, [pc, #44]	; (800fbf8 <busFrameTypeName+0x70>)
	}

}
 800fbca:	4770      	bx	lr
 800fbcc:	08013854 	.word	0x08013854
 800fbd0:	0801392c 	.word	0x0801392c
 800fbd4:	08013878 	.word	0x08013878
 800fbd8:	08013944 	.word	0x08013944
 800fbdc:	08013958 	.word	0x08013958
 800fbe0:	080138a4 	.word	0x080138a4
 800fbe4:	080138b0 	.word	0x080138b0
 800fbe8:	080138b8 	.word	0x080138b8
 800fbec:	080138c4 	.word	0x080138c4
 800fbf0:	080138d0 	.word	0x080138d0
 800fbf4:	08013968 	.word	0x08013968
 800fbf8:	0801385c 	.word	0x0801385c

0800fbfc <canIdle_UpdateResp>:

static void canIdle_UpdateResp (tCanIdle_Data * const app)
{
 800fbfc:	b570      	push	{r4, r5, r6, lr}
 800fbfe:	4604      	mov	r4, r0
   uint8_t iter = 0u;
   uint8_t md80Id = 0u;
   tMd80_Device *pMd80dev = NULL;

   if (app->rsp.frId == BUS_FRAME_PING_START)
 800fc00:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d05a      	beq.n	800fcbe <canIdle_UpdateResp+0xc2>
         {
            Obj.md80_addrs[iter] = 0U;
         }
      }
   }
   else if (app->rsp.frId == BUS_FRAME_CANDLE_CONFIG_BAUDRATE)
 800fc08:	2b02      	cmp	r3, #2
 800fc0a:	d02d      	beq.n	800fc68 <canIdle_UpdateResp+0x6c>
   }
   /* Another command. */
   else
   {
      /* Get the data structure of md80. */
      pMd80dev = (tMd80_Device *)&md80Dev[app->cmd.motorId];
 800fc0c:	7f83      	ldrb	r3, [r0, #30]

      memcpy((void *)&app->rsp.data[0], (void *)&pMd80dev->output.errorVector, sizeof(uint16_t));
 800fc0e:	4942      	ldr	r1, [pc, #264]	; (800fd18 <canIdle_UpdateResp+0x11c>)
 800fc10:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800fc14:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800fc18:	f8b2 006a 	ldrh.w	r0, [r2, #106]	; 0x6a
 800fc1c:	87a0      	strh	r0, [r4, #60]	; 0x3c
      memcpy((void *)&app->rsp.data[2], (void *)&pMd80dev->output.temperature, sizeof(uint8_t));
 800fc1e:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 800fc22:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      memcpy((void *)&app->rsp.data[3], (void *)&pMd80dev->output.position, sizeof(float));
 800fc26:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800fc2a:	0112      	lsls	r2, r2, #4
 800fc2c:	3250      	adds	r2, #80	; 0x50
 800fc2e:	440a      	add	r2, r1
 800fc30:	6850      	ldr	r0, [r2, #4]
 800fc32:	f8c4 003f 	str.w	r0, [r4, #63]	; 0x3f
      memcpy((void *)&app->rsp.data[7], (void *)&pMd80dev->output.velocity, sizeof(float));
 800fc36:	6892      	ldr	r2, [r2, #8]
 800fc38:	f8c4 2043 	str.w	r2, [r4, #67]	; 0x43
      memcpy((void *)&app->rsp.data[11], (void *)&pMd80dev->output.torque, sizeof(float));
 800fc3c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800fc40:	0112      	lsls	r2, r2, #4
 800fc42:	3258      	adds	r2, #88	; 0x58
 800fc44:	440a      	add	r2, r1
 800fc46:	6850      	ldr	r0, [r2, #4]
 800fc48:	f8c4 0047 	str.w	r0, [r4, #71]	; 0x47
      memcpy((void *)&app->rsp.data[15], (void *)&pMd80dev->output.encoderPosition, sizeof(float));
 800fc4c:	6892      	ldr	r2, [r2, #8]
 800fc4e:	f8c4 204b 	str.w	r2, [r4, #75]	; 0x4b
      memcpy((void *)&app->rsp.data[19], (void *)&pMd80dev->output.encoderVelocity, sizeof(float));
 800fc52:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800fc56:	011b      	lsls	r3, r3, #4
 800fc58:	3360      	adds	r3, #96	; 0x60
 800fc5a:	440b      	add	r3, r1
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	f8c4 304f 	str.w	r3, [r4, #79]	; 0x4f
      app->rsp.size = 23u;
 800fc62:	2317      	movs	r3, #23
 800fc64:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   }

   /* Update to object. */
   Obj.md80_Respond.md80_dev_no = app->rsp.motorId;
 800fc68:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800fc6c:	4d2b      	ldr	r5, [pc, #172]	; (800fd1c <canIdle_UpdateResp+0x120>)
 800fc6e:	f885 3124 	strb.w	r3, [r5, #292]	; 0x124
   Obj.md80_Respond.command = app->rsp.frId;
 800fc72:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800fc76:	f885 3125 	strb.w	r3, [r5, #293]	; 0x125
   Obj.md80_Respond.size = app->rsp.size;
 800fc7a:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 800fc7e:	f885 3126 	strb.w	r3, [r5, #294]	; 0x126
   Obj.md80_Respond.timestamp = xTaskGetTickCount()/portTICK_PERIOD_MS;
 800fc82:	f7f9 fb8d 	bl	80093a0 <xTaskGetTickCount>
 800fc86:	4606      	mov	r6, r0
 800fc88:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
   //cdc_printf("response@%u: %d\r\n", GetCycleCount(), Obj.md80_Respond.command);
   cdc_printf("@%u\t[canM response]:\t%s\r\n", Obj.md80_Respond.timestamp, busFrameTypeName(Obj.md80_Respond.command));
 800fc8c:	f895 0125 	ldrb.w	r0, [r5, #293]	; 0x125
 800fc90:	f7ff ff7a 	bl	800fb88 <busFrameTypeName>
 800fc94:	4602      	mov	r2, r0
 800fc96:	4631      	mov	r1, r6
 800fc98:	4821      	ldr	r0, [pc, #132]	; (800fd20 <canIdle_UpdateResp+0x124>)
 800fc9a:	f7f0 ff73 	bl	8000b84 <cdc_printf>
   memcpy((void *)&Obj.md80_Respond.dataRet0, (void *)&app->rsp.data[0], 4);
 800fc9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fca0:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
   memcpy((void *)&Obj.md80_Respond.dataRet1, (void *)&app->rsp.data[4], 4);
 800fca4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fca6:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
   memcpy((void *)&Obj.md80_Respond.dataRet2, (void *)&app->rsp.data[8], 4);
 800fcaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fcac:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
   memcpy((void *)&Obj.md80_Respond.dataRet3, (void *)&app->rsp.data[12], 4);
 800fcb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fcb2:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
   memcpy((void *)&Obj.md80_Respond.dataRet4, (void *)&app->rsp.data[16], 4);
 800fcb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800fcb8:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
}
 800fcbc:	bd70      	pop	{r4, r5, r6, pc}
      if (app->numMd80Det > 0u)
 800fcbe:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 800fcc2:	b330      	cbz	r0, 800fd12 <canIdle_UpdateResp+0x116>
         for (iter = 0u; iter < app->numMd80Det; iter++)
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	e010      	b.n	800fcea <canIdle_UpdateResp+0xee>
            Obj.md80_addrs[iter] = (uint32_t)app->rsp.data[iter * 2u] + ((uint32_t)app->rsp.data[(iter * 2u) + 1u] << 8);
 800fcc8:	005a      	lsls	r2, r3, #1
 800fcca:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 800fcce:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 800fcd2:	3201      	adds	r2, #1
 800fcd4:	4422      	add	r2, r4
 800fcd6:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800fcda:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 800fcde:	4a0f      	ldr	r2, [pc, #60]	; (800fd1c <canIdle_UpdateResp+0x120>)
 800fce0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fce4:	6051      	str	r1, [r2, #4]
         for (iter = 0u; iter < app->numMd80Det; iter++)
 800fce6:	3301      	adds	r3, #1
 800fce8:	b2db      	uxtb	r3, r3
 800fcea:	4298      	cmp	r0, r3
 800fcec:	d8ec      	bhi.n	800fcc8 <canIdle_UpdateResp+0xcc>
 800fcee:	e006      	b.n	800fcfe <canIdle_UpdateResp+0x102>
            Obj.md80_addrs[iter] = 0U;
 800fcf0:	4a0a      	ldr	r2, [pc, #40]	; (800fd1c <canIdle_UpdateResp+0x120>)
 800fcf2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fcf6:	2100      	movs	r1, #0
 800fcf8:	6051      	str	r1, [r2, #4]
         for (;iter < CANIDLE_TOTAL_DEV_SUPPORT; iter++)
 800fcfa:	3301      	adds	r3, #1
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	2b07      	cmp	r3, #7
 800fd00:	d9f6      	bls.n	800fcf0 <canIdle_UpdateResp+0xf4>
 800fd02:	e7b1      	b.n	800fc68 <canIdle_UpdateResp+0x6c>
            Obj.md80_addrs[iter] = 0U;
 800fd04:	4b05      	ldr	r3, [pc, #20]	; (800fd1c <canIdle_UpdateResp+0x120>)
 800fd06:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	605a      	str	r2, [r3, #4]
         for (iter = 0u; iter < CANIDLE_TOTAL_DEV_SUPPORT; iter++)
 800fd0e:	3001      	adds	r0, #1
 800fd10:	b2c0      	uxtb	r0, r0
 800fd12:	2807      	cmp	r0, #7
 800fd14:	d9f6      	bls.n	800fd04 <canIdle_UpdateResp+0x108>
 800fd16:	e7a7      	b.n	800fc68 <canIdle_UpdateResp+0x6c>
 800fd18:	200071cc 	.word	0x200071cc
 800fd1c:	2000d350 	.word	0x2000d350
 800fd20:	08013970 	.word	0x08013970

0800fd24 <canIdle_Command_Exit>:
{
 800fd24:	b510      	push	{r4, lr}
 800fd26:	4604      	mov	r4, r0
   taskENTER_CRITICAL();
 800fd28:	f7fa f994 	bl	800a054 <vPortEnterCritical>
   app->rsp.frId = app->cmd.frId;
 800fd2c:	7fe3      	ldrb	r3, [r4, #31]
 800fd2e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   app->rsp.motorId = app->cmd.motorId;
 800fd32:	7fa3      	ldrb	r3, [r4, #30]
 800fd34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   app->rsp.size = app->cmd.size;
 800fd38:	f894 3020 	ldrb.w	r3, [r4, #32]
 800fd3c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   canIdle_UpdateResp(app);
 800fd40:	4620      	mov	r0, r4
 800fd42:	f7ff ff5b 	bl	800fbfc <canIdle_UpdateResp>
   taskEXIT_CRITICAL();
 800fd46:	f7fa f9a7 	bl	800a098 <vPortExitCritical>
}
 800fd4a:	2000      	movs	r0, #0
 800fd4c:	bd10      	pop	{r4, pc}
	...

0800fd50 <canIdle_UpdateCmd>:

void canIdle_UpdateCmd (uint8_t md80id, uint8_t command, uint8_t size, uint8_t *cmd)
{
 800fd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd54:	b082      	sub	sp, #8
 800fd56:	4604      	mov	r4, r0
 800fd58:	460e      	mov	r6, r1
 800fd5a:	4617      	mov	r7, r2
 800fd5c:	4698      	mov	r8, r3
   isMd80IdExist = true;

   if (true == isMd80IdExist)
   {
      /* Enter critical section. */
      taskENTER_CRITICAL();
 800fd5e:	f7fa f979 	bl	800a054 <vPortEnterCritical>

      /* Save the cmd. */
      pCanIdleM->hostReq.motorId = md80id;
 800fd62:	4d12      	ldr	r5, [pc, #72]	; (800fdac <canIdle_UpdateCmd+0x5c>)
 800fd64:	702c      	strb	r4, [r5, #0]
      pCanIdleM->hostReq.frId = command;
 800fd66:	706e      	strb	r6, [r5, #1]
      pCanIdleM->hostReq.size = size;
 800fd68:	70af      	strb	r7, [r5, #2]
      memcpy((uint8_t *)&pCanIdleM->hostReq.data[0], (uint8_t *)cmd, size);
 800fd6a:	463a      	mov	r2, r7
 800fd6c:	4641      	mov	r1, r8
 800fd6e:	1ce8      	adds	r0, r5, #3
 800fd70:	f002 f87a 	bl	8011e68 <memcpy>

      /* Set flag determine it having new command.*/
      pCanIdleM->isNewCommand = true;
 800fd74:	2301      	movs	r3, #1
 800fd76:	776b      	strb	r3, [r5, #29]

      /* Exit critical section. */
      taskEXIT_CRITICAL();
 800fd78:	f7fa f98e 	bl	800a098 <vPortExitCritical>

      cdc_printf("@%u\t[canM command]:\t%s for %d\r\n", Obj.md80_Respond.timestamp, busFrameTypeName(command), md80id);
 800fd7c:	4f0c      	ldr	r7, [pc, #48]	; (800fdb0 <canIdle_UpdateCmd+0x60>)
 800fd7e:	f8d7 8128 	ldr.w	r8, [r7, #296]	; 0x128
 800fd82:	4630      	mov	r0, r6
 800fd84:	f7ff ff00 	bl	800fb88 <busFrameTypeName>
 800fd88:	4605      	mov	r5, r0
 800fd8a:	4623      	mov	r3, r4
 800fd8c:	4602      	mov	r2, r0
 800fd8e:	4641      	mov	r1, r8
 800fd90:	4808      	ldr	r0, [pc, #32]	; (800fdb4 <canIdle_UpdateCmd+0x64>)
 800fd92:	f7f0 fef7 	bl	8000b84 <cdc_printf>
      sendMessage(canM_command, 3, Obj.md80_Respond.timestamp, busFrameTypeName(command), md80id);
 800fd96:	9400      	str	r4, [sp, #0]
 800fd98:	462b      	mov	r3, r5
 800fd9a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800fd9e:	2103      	movs	r1, #3
 800fda0:	2006      	movs	r0, #6
 800fda2:	f7f0 feb3 	bl	8000b0c <sendMessage>
   }
   else
   {
      /* Do nothing. */
   }
}
 800fda6:	b002      	add	sp, #8
 800fda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdac:	2000984c 	.word	0x2000984c
 800fdb0:	2000d350 	.word	0x2000d350
 800fdb4:	0801398c 	.word	0x0801398c

0800fdb8 <canIdle_Init>:

void canIdle_Init()
{
 800fdb8:	b508      	push	{r3, lr}
   /* Configuration the baudrate of CAN to 1M. */
   canM_SetNewBaudrate(CAN_BAUD_1M);
 800fdba:	2001      	movs	r0, #1
 800fdbc:	f000 f96a 	bl	8010094 <canM_SetNewBaudrate>
}
 800fdc0:	bd08      	pop	{r3, pc}
	...

0800fdc4 <canIdle_MainFunction>:
	}
	return ret;
}

void canIdle_MainFunction()
{
 800fdc4:	b510      	push	{r4, lr}
   tCanIdle_Data * const pCanIdleM = (tCanIdle_Data *)&canIdle_Module;
   tCanIdle_States nextState = pCanIdleM->state;
 800fdc6:	4b12      	ldr	r3, [pc, #72]	; (800fe10 <canIdle_MainFunction+0x4c>)
 800fdc8:	7edc      	ldrb	r4, [r3, #27]

   /* Update data control. */
   //if(nextState != CANIDLE_IDLE) cdc_printf("[can2motor]@%u:\t %s\n",GetCycleCount(), tCanIdle_StatesName(nextState));
   canIdle_UpdateDataControl();
 800fdca:	f7ff f877 	bl	800eebc <canIdle_UpdateDataControl>

   /* Run mode. */
   switch (nextState)
 800fdce:	2c03      	cmp	r4, #3
 800fdd0:	d818      	bhi.n	800fe04 <canIdle_MainFunction+0x40>
 800fdd2:	e8df f004 	tbb	[pc, r4]
 800fdd6:	0b02      	.short	0x0b02
 800fdd8:	130f      	.short	0x130f
   {
   case CANIDLE_IDLE:
      nextState = canIdle_EventHandle(pCanIdleM);
 800fdda:	480d      	ldr	r0, [pc, #52]	; (800fe10 <canIdle_MainFunction+0x4c>)
 800fddc:	f7ff f846 	bl	800ee6c <canIdle_EventHandle>
   default:
      nextState = CANIDLE_IDLE;
      break;
   }

   pCanIdleM->state = nextState;
 800fde0:	4b0b      	ldr	r3, [pc, #44]	; (800fe10 <canIdle_MainFunction+0x4c>)
 800fde2:	76d8      	strb	r0, [r3, #27]

   if (CANIDLE_RUN == pCanIdleM->workState)
 800fde4:	7f1b      	ldrb	r3, [r3, #28]
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	d00e      	beq.n	800fe08 <canIdle_MainFunction+0x44>
   {
	  //we switched to running mode and from now on commands will run constantly - position/impedance commands only change the targets.
      canIdle_Control(pCanIdleM);
   }
}
 800fdea:	bd10      	pop	{r4, pc}
      nextState = canIdle_Command_Enter(pCanIdleM);
 800fdec:	4808      	ldr	r0, [pc, #32]	; (800fe10 <canIdle_MainFunction+0x4c>)
 800fdee:	f7ff f845 	bl	800ee7c <canIdle_Command_Enter>
      break;
 800fdf2:	e7f5      	b.n	800fde0 <canIdle_MainFunction+0x1c>
      nextState = canIdle_Command(pCanIdleM);
 800fdf4:	4806      	ldr	r0, [pc, #24]	; (800fe10 <canIdle_MainFunction+0x4c>)
 800fdf6:	f7ff fe81 	bl	800fafc <canIdle_Command>
      break;
 800fdfa:	e7f1      	b.n	800fde0 <canIdle_MainFunction+0x1c>
      nextState = canIdle_Command_Exit(pCanIdleM);
 800fdfc:	4804      	ldr	r0, [pc, #16]	; (800fe10 <canIdle_MainFunction+0x4c>)
 800fdfe:	f7ff ff91 	bl	800fd24 <canIdle_Command_Exit>
      break;
 800fe02:	e7ed      	b.n	800fde0 <canIdle_MainFunction+0x1c>
   switch (nextState)
 800fe04:	2000      	movs	r0, #0
 800fe06:	e7eb      	b.n	800fde0 <canIdle_MainFunction+0x1c>
      canIdle_Control(pCanIdleM);
 800fe08:	4801      	ldr	r0, [pc, #4]	; (800fe10 <canIdle_MainFunction+0x4c>)
 800fe0a:	f7ff fcd7 	bl	800f7bc <canIdle_Control>
}
 800fe0e:	e7ec      	b.n	800fdea <canIdle_MainFunction+0x26>
 800fe10:	2000984c 	.word	0x2000984c

0800fe14 <canM_getDeviceId>:
 * @param id - Device Can id.
 * 
 * @return the device ID as a uint8_t value.
 */
static uint8_t canM_getDeviceId(tCanM_DeviceId id)
{
 800fe14:	4601      	mov	r1, r0
   uint8_t iter = 0u;
   uint8_t deviceId = CAN_DEV_ID_INVALID;

   for (iter = 0u; iter < CAN_DEV_TOTAL; iter++)
 800fe16:	2000      	movs	r0, #0
 800fe18:	e001      	b.n	800fe1e <canM_getDeviceId+0xa>
 800fe1a:	3001      	adds	r0, #1
 800fe1c:	b2c0      	uxtb	r0, r0
 800fe1e:	2807      	cmp	r0, #7
 800fe20:	d80a      	bhi.n	800fe38 <canM_getDeviceId+0x24>
   {
      if ((id == canM_Devices[iter].deviceId) && (CAN_DEV_ID_INVALID != canM_Devices[iter].deviceId))
 800fe22:	f44f 7316 	mov.w	r3, #600	; 0x258
 800fe26:	fb00 f303 	mul.w	r3, r0, r3
 800fe2a:	4a04      	ldr	r2, [pc, #16]	; (800fe3c <canM_getDeviceId+0x28>)
 800fe2c:	5cd3      	ldrb	r3, [r2, r3]
 800fe2e:	428b      	cmp	r3, r1
 800fe30:	d1f3      	bne.n	800fe1a <canM_getDeviceId+0x6>
 800fe32:	2b0a      	cmp	r3, #10
 800fe34:	d0f1      	beq.n	800fe1a <canM_getDeviceId+0x6>
 800fe36:	e000      	b.n	800fe3a <canM_getDeviceId+0x26>
   uint8_t deviceId = CAN_DEV_ID_INVALID;
 800fe38:	200a      	movs	r0, #10
         break;
      }
   }

   return (deviceId);
}
 800fe3a:	4770      	bx	lr
 800fe3c:	2000016c 	.word	0x2000016c

0800fe40 <canM_N_USData_indication>:
                                    uint32_t size,
                                    CAN_ISO_TP_RESAULT error)
{
   int ret = 0;

   if (N_TIMEOUT_CR == error)
 800fe40:	2b03      	cmp	r3, #3
 800fe42:	d001      	beq.n	800fe48 <canM_N_USData_indication+0x8>
   {
      canM_Module.local.state = CANM_IDLE;
   }

   return ret;
}
 800fe44:	2000      	movs	r0, #0
 800fe46:	4770      	bx	lr
      canM_Module.local.state = CANM_IDLE;
 800fe48:	4b02      	ldr	r3, [pc, #8]	; (800fe54 <canM_N_USData_indication+0x14>)
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800fe50:	e7f8      	b.n	800fe44 <canM_N_USData_indication+0x4>
 800fe52:	bf00      	nop
 800fe54:	2000142c 	.word	0x2000142c

0800fe58 <canM_N_USData_confirm>:
                                 uint32_t size,
                                 CAN_ISO_TP_RESAULT error)
{
   int ret = 0;

   if (N_TIMEOUT_A == error)
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	d001      	beq.n	800fe60 <canM_N_USData_confirm+0x8>
   {
      canM_Module.local.state = CANM_IDLE;
   }

   return ret;
}
 800fe5c:	2000      	movs	r0, #0
 800fe5e:	4770      	bx	lr
      canM_Module.local.state = CANM_IDLE;
 800fe60:	4b02      	ldr	r3, [pc, #8]	; (800fe6c <canM_N_USData_confirm+0x14>)
 800fe62:	2200      	movs	r2, #0
 800fe64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800fe68:	e7f8      	b.n	800fe5c <canM_N_USData_confirm+0x4>
 800fe6a:	bf00      	nop
 800fe6c:	2000142c 	.word	0x2000142c

0800fe70 <canM_WaitingEvent>:
 * @param module A pointer to a structure of type tCanM_Module, which contains various variables and flags related to the CAN module.
 * 
 * @return the value of the variable "nextState".
 */
static tCanM_State canM_WaitingEvent(tCanM_Module *const module)
{
 800fe70:	b538      	push	{r3, r4, r5, lr}
   tCanM_State nextState = CANM_IDLE;
   uint8_t idx = CAN_DEV_ID_INVALID;

   if (true == module->local.isNewReq)
 800fe72:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 800fe76:	b19b      	cbz	r3, 800fea0 <canM_WaitingEvent+0x30>
 800fe78:	4604      	mov	r4, r0
   {
      /* Reset flag. */
      module->local.isNewReq = false;
 800fe7a:	2500      	movs	r5, #0
 800fe7c:	f880 5049 	strb.w	r5, [r0, #73]	; 0x49
      module->local.isRecMsg = false;
 800fe80:	f880 504a 	strb.w	r5, [r0, #74]	; 0x4a
      module->output.isNewResp = false;
 800fe84:	f880 511a 	strb.w	r5, [r0, #282]	; 0x11a

      /* Verify the can id before module jump to next state. */
      idx = canM_getDeviceId (module->input.id);
 800fe88:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800fe8c:	f7ff ffc2 	bl	800fe14 <canM_getDeviceId>
      module->local.isFunction = false;
 800fe90:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b

      if (CAN_DEV_ID_INVALID != idx)
 800fe94:	280a      	cmp	r0, #10
 800fe96:	d005      	beq.n	800fea4 <canM_WaitingEvent+0x34>
      {
         module->local.idx = idx;
 800fe98:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
         /* Change mode to next state. */
         nextState = CANM_PROCESS_ENTRY;
 800fe9c:	2001      	movs	r0, #1
 800fe9e:	e000      	b.n	800fea2 <canM_WaitingEvent+0x32>
   tCanM_State nextState = CANM_IDLE;
 800fea0:	2000      	movs	r0, #0
      }
   }

   return (nextState);
}
 800fea2:	bd38      	pop	{r3, r4, r5, pc}
   tCanM_State nextState = CANM_IDLE;
 800fea4:	2000      	movs	r0, #0
 800fea6:	e7fc      	b.n	800fea2 <canM_WaitingEvent+0x32>

0800fea8 <canM_Process>:
}

static tCanM_State canM_Process (tCanM_Module *const module)
{
   tCanM_State nextState = CANM_PROCESS;
   uint8_t idx = module->local.idx;
 800fea8:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c

   if (CAN_DEV_ID_INVALID != idx)
 800feac:	2b0a      	cmp	r3, #10
 800feae:	d007      	beq.n	800fec0 <canM_Process+0x18>
   {
      /* FIXME - Consider add the code to manage the state timeout, device can not send data and receive data from
      Device can on bus after command sent. */

      if (true == module->local.isRecMsg)
 800feb0:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 800feb4:	b133      	cbz	r3, 800fec4 <canM_Process+0x1c>
      {
         /* Update new state. */
         nextState = CANM_PROCESS_POST;

         /* Reset flag. */
         module->local.isRecMsg = false;
 800feb6:	2300      	movs	r3, #0
 800feb8:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
         nextState = CANM_PROCESS_POST;
 800febc:	2003      	movs	r0, #3
 800febe:	4770      	bx	lr
   tCanM_State nextState = CANM_PROCESS;
 800fec0:	2002      	movs	r0, #2
 800fec2:	4770      	bx	lr
 800fec4:	2002      	movs	r0, #2
//      }
   }


   return (nextState);
}
 800fec6:	4770      	bx	lr

0800fec8 <canM_FDCanSend>:
{
 800fec8:	b530      	push	{r4, r5, lr}
 800feca:	b08b      	sub	sp, #44	; 0x2c
 800fecc:	4605      	mov	r5, r0
 800fece:	460c      	mov	r4, r1
   FDCAN_TxHeaderTypeDef txHeader = {0};
 800fed0:	2224      	movs	r2, #36	; 0x24
 800fed2:	2100      	movs	r1, #0
 800fed4:	a801      	add	r0, sp, #4
 800fed6:	f001 ff09 	bl	8011cec <memset>
   txHeader.Identifier = msg->id.id;
 800feda:	6823      	ldr	r3, [r4, #0]
 800fedc:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800fee0:	9301      	str	r3, [sp, #4]
   txHeader.IdType = (true == msg->id.isExt) ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 800fee2:	78e3      	ldrb	r3, [r4, #3]
 800fee4:	065a      	lsls	r2, r3, #25
 800fee6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800feea:	9202      	str	r2, [sp, #8]
   txHeader.DataLength = (FDCAN_DLC_BYTES_0 | ((uint32_t)CANM_DLC_OFF(msg->dlc)));
 800feec:	7922      	ldrb	r2, [r4, #4]
 800feee:	0412      	lsls	r2, r2, #16
 800fef0:	9204      	str	r2, [sp, #16]
   txHeader.FDFormat = (true == msg->id.isCANFD) ? FDCAN_FD_CAN : FDCAN_CLASSIC_CAN;
 800fef2:	03da      	lsls	r2, r3, #15
 800fef4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800fef8:	9207      	str	r2, [sp, #28]
   txHeader.TxFrameType = (true == msg->id.isRemote) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 800fefa:	059b      	lsls	r3, r3, #22
 800fefc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ff00:	9303      	str	r3, [sp, #12]
   if (HAL_OK == HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, (uint8_t *)msg->data))
 800ff02:	1d62      	adds	r2, r4, #5
 800ff04:	a901      	add	r1, sp, #4
 800ff06:	4807      	ldr	r0, [pc, #28]	; (800ff24 <canM_FDCanSend+0x5c>)
 800ff08:	f7f1 ff56 	bl	8001db8 <HAL_FDCAN_AddMessageToTxFifoQ>
 800ff0c:	b928      	cbnz	r0, 800ff1a <canM_FDCanSend+0x52>
      if (NULL != link->init_info.print_debug)
 800ff0e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ff10:	b133      	cbz	r3, 800ff20 <canM_FDCanSend+0x58>
         link->init_info.print_debug(canM_msg);
 800ff12:	4805      	ldr	r0, [pc, #20]	; (800ff28 <canM_FDCanSend+0x60>)
 800ff14:	4798      	blx	r3
      ret = OP_OK;
 800ff16:	2000      	movs	r0, #0
 800ff18:	e000      	b.n	800ff1c <canM_FDCanSend+0x54>
   int ret = OP_NOK;
 800ff1a:	2001      	movs	r0, #1
}
 800ff1c:	b00b      	add	sp, #44	; 0x2c
 800ff1e:	bd30      	pop	{r4, r5, pc}
      ret = OP_OK;
 800ff20:	2000      	movs	r0, #0
   return (ret);
 800ff22:	e7fb      	b.n	800ff1c <canM_FDCanSend+0x54>
 800ff24:	20001ca0 	.word	0x20001ca0
 800ff28:	200098a4 	.word	0x200098a4

0800ff2c <canM_getCurrentTimeInMillis>:
{
 800ff2c:	b508      	push	{r3, lr}
   uint32_t milliseconds = (uint32_t)(xTaskGetTickCount()/portTICK_PERIOD_MS);
 800ff2e:	f7f9 fa37 	bl	80093a0 <xTaskGetTickCount>
}
 800ff32:	bd08      	pop	{r3, pc}

0800ff34 <canM_pollEvent>:
{
 800ff34:	b510      	push	{r4, lr}
   uint8_t idx = module->input.id;
 800ff36:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
      currTimeMs = canM_getCurrentTimeInMillis();
 800ff3a:	f7ff fff7 	bl	800ff2c <canM_getCurrentTimeInMillis>
 800ff3e:	4601      	mov	r1, r0
      link = (can_iso_tp_link_t_p)&canM_Devices[idx].local;
 800ff40:	f44f 7316 	mov.w	r3, #600	; 0x258
 800ff44:	fb03 f404 	mul.w	r4, r3, r4
 800ff48:	3438      	adds	r4, #56	; 0x38
 800ff4a:	4b03      	ldr	r3, [pc, #12]	; (800ff58 <canM_pollEvent+0x24>)
 800ff4c:	441c      	add	r4, r3
      iso_can_tp_poll(link, currTimeMs);
 800ff4e:	1d20      	adds	r0, r4, #4
 800ff50:	f7fb f85a 	bl	800b008 <iso_can_tp_poll>
}
 800ff54:	bd10      	pop	{r4, pc}
 800ff56:	bf00      	nop
 800ff58:	2000016c 	.word	0x2000016c

0800ff5c <canM_ProcessEntry>:
{
 800ff5c:	b508      	push	{r3, lr}
   uint8_t idx = module->local.idx;
 800ff5e:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   uint8_t isFunctionId = (uint8_t)module->local.isFunction;
 800ff62:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
   if (CAN_DEV_ID_INVALID != idx)
 800ff66:	2b0a      	cmp	r3, #10
 800ff68:	d101      	bne.n	800ff6e <canM_ProcessEntry+0x12>
   tCanM_State nextState = CANM_PROCESS_ENTRY;
 800ff6a:	2001      	movs	r0, #1
}
 800ff6c:	bd08      	pop	{r3, pc}
      link = (can_iso_tp_link_t_p)&canM_Devices[idx].local;
 800ff6e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ff72:	fb02 fc03 	mul.w	ip, r2, r3
 800ff76:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 800ff7a:	4b05      	ldr	r3, [pc, #20]	; (800ff90 <canM_ProcessEntry+0x34>)
 800ff7c:	449c      	add	ip, r3
      if (OP_OK != iso_can_tp_N_USData_request (link, isFunctionId, (uint8_t *)module->input.dataReq, module->input.size))
 800ff7e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800ff82:	1d02      	adds	r2, r0, #4
 800ff84:	f10c 0004 	add.w	r0, ip, #4
 800ff88:	f7fb f97a 	bl	800b280 <iso_can_tp_N_USData_request>
      nextState = CANM_PROCESS;
 800ff8c:	2002      	movs	r0, #2
 800ff8e:	e7ed      	b.n	800ff6c <canM_ProcessEntry+0x10>
 800ff90:	2000016c 	.word	0x2000016c

0800ff94 <canM_ProcessPost>:

static tCanM_State canM_ProcessPost(tCanM_Module *const module)
{
 800ff94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff96:	4605      	mov	r5, r0
   tCanM_State nextState = CANM_PROCESS_POST;
   can_iso_tp_link_t_p link = NULL;
   uint8_t idx = module->local.idx;
 800ff98:	f890 604c 	ldrb.w	r6, [r0, #76]	; 0x4c

   /* Get the link and config of device. */
   link = (can_iso_tp_link_t_p)&canM_Devices[idx].local;
 800ff9c:	f44f 7416 	mov.w	r4, #600	; 0x258
 800ffa0:	fb06 f404 	mul.w	r4, r6, r4
 800ffa4:	3438      	adds	r4, #56	; 0x38
 800ffa6:	4b20      	ldr	r3, [pc, #128]	; (8010028 <canM_ProcessPost+0x94>)
 800ffa8:	441c      	add	r4, r3
 800ffaa:	3404      	adds	r4, #4

   if (OP_OK == iso_can_tp_L_Data_indication(link, (struct CAN_msg *)&module->local.canResp))
 800ffac:	f100 0790 	add.w	r7, r0, #144	; 0x90
 800ffb0:	4639      	mov	r1, r7
 800ffb2:	4620      	mov	r0, r4
 800ffb4:	f7fb f8ee 	bl	800b194 <iso_can_tp_L_Data_indication>
 800ffb8:	b108      	cbz	r0, 800ffbe <canM_ProcessPost+0x2a>

   /* Back to IDLE state. */
   nextState = CANM_IDLE;

   return (nextState);
}
 800ffba:	2000      	movs	r0, #0
 800ffbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      iso_can_tp_L_Data_confirm(link, (struct CAN_msg *)&module->local.canResp, N_OK);
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	4639      	mov	r1, r7
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	f7fb f86a 	bl	800b09c <iso_can_tp_L_Data_confirm>
      taskENTER_CRITICAL();
 800ffc8:	f7fa f844 	bl	800a054 <vPortEnterCritical>
      memcpy((uint8_t *)module->output.dataResp, (uint8_t *)module->local.canResp.data, dlc2len(module->local.canResp.dlc));
 800ffcc:	f105 04d8 	add.w	r4, r5, #216	; 0xd8
 800ffd0:	f105 0795 	add.w	r7, r5, #149	; 0x95
 800ffd4:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
 800ffd8:	f7fa ff3a 	bl	800ae50 <dlc2len>
 800ffdc:	4602      	mov	r2, r0
 800ffde:	4639      	mov	r1, r7
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	f001 ff41 	bl	8011e68 <memcpy>
      module->output.size = dlc2len(module->local.canResp.dlc);
 800ffe6:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
 800ffea:	f7fa ff31 	bl	800ae50 <dlc2len>
 800ffee:	f885 0118 	strb.w	r0, [r5, #280]	; 0x118
      module->output.id = canM_Devices[idx].deviceId;
 800fff2:	f44f 7416 	mov.w	r4, #600	; 0x258
 800fff6:	fb04 f306 	mul.w	r3, r4, r6
 800fffa:	4a0b      	ldr	r2, [pc, #44]	; (8010028 <canM_ProcessPost+0x94>)
 800fffc:	5cd3      	ldrb	r3, [r2, r3]
 800fffe:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
      module->output.isNewResp = true;
 8010002:	2301      	movs	r3, #1
 8010004:	f885 311a 	strb.w	r3, [r5, #282]	; 0x11a
      taskEXIT_CRITICAL();
 8010008:	f7fa f846 	bl	800a098 <vPortExitCritical>
      if (NULL != module->dev[idx].funIrq)
 801000c:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8010010:	fb04 3306 	mla	r3, r4, r6, r3
 8010014:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8010018:	2b00      	cmp	r3, #0
 801001a:	d0ce      	beq.n	800ffba <canM_ProcessPost+0x26>
         module->dev[idx].funIrq(module->local.dataResp, module->output.size);
 801001c:	f895 1118 	ldrb.w	r1, [r5, #280]	; 0x118
 8010020:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8010024:	4798      	blx	r3
 8010026:	e7c8      	b.n	800ffba <canM_ProcessPost+0x26>
 8010028:	2000016c 	.word	0x2000016c

0801002c <canM_Start>:

   return ret;
}

bool canM_Start (void)
{
 801002c:	b510      	push	{r4, lr}
   bool ret = false;
   tCanM_Module * pModule = (tCanM_Module *)&canM_Module;

   /* Enter critical section. */
   taskENTER_CRITICAL();
 801002e:	f7fa f811 	bl	800a054 <vPortEnterCritical>

   /* Active notify when receive new msg. */
   HAL_FDCAN_ActivateNotification (pModule->config.phfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8010032:	4c0b      	ldr	r4, [pc, #44]	; (8010060 <canM_Start+0x34>)
 8010034:	2200      	movs	r2, #0
 8010036:	2101      	movs	r1, #1
 8010038:	6820      	ldr	r0, [r4, #0]
 801003a:	f7f2 f817 	bl	800206c <HAL_FDCAN_ActivateNotification>

   /* Start FDCAN core. */
   if (HAL_OK == HAL_FDCAN_Start (pModule->config.phfdcan))
 801003e:	6820      	ldr	r0, [r4, #0]
 8010040:	f7f1 fe5e 	bl	8001d00 <HAL_FDCAN_Start>
 8010044:	b948      	cbnz	r0, 801005a <canM_Start+0x2e>
   {
      /* Reset state of module to Idle. */
      pModule->local.isNewReq = false;
 8010046:	2200      	movs	r2, #0
 8010048:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
      pModule->local.state = CANM_IDLE;
 801004c:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48

      ret = true;
 8010050:	2401      	movs	r4, #1
   }

   /* Exit critical section. */
   taskEXIT_CRITICAL();
 8010052:	f7fa f821 	bl	800a098 <vPortExitCritical>

   return (ret);
}
 8010056:	4620      	mov	r0, r4
 8010058:	bd10      	pop	{r4, pc}
   bool ret = false;
 801005a:	2400      	movs	r4, #0
 801005c:	e7f9      	b.n	8010052 <canM_Start+0x26>
 801005e:	bf00      	nop
 8010060:	2000142c 	.word	0x2000142c

08010064 <canM_Stop>:

bool canM_Stop (void)
{
 8010064:	b510      	push	{r4, lr}
   bool ret = false;
   tCanM_Module * pModule = (tCanM_Module *)&canM_Module;

   /* Enter critical section. */
   taskENTER_CRITICAL();
 8010066:	f7f9 fff5 	bl	800a054 <vPortEnterCritical>

   if (HAL_OK == HAL_FDCAN_Stop (pModule->config.phfdcan))
 801006a:	4b09      	ldr	r3, [pc, #36]	; (8010090 <canM_Stop+0x2c>)
 801006c:	6818      	ldr	r0, [r3, #0]
 801006e:	f7f1 fe5e 	bl	8001d2e <HAL_FDCAN_Stop>
 8010072:	b950      	cbnz	r0, 801008a <canM_Stop+0x26>
   {
      /* Reset state of module to Idle. */
      pModule->local.isNewReq = false;
 8010074:	4b06      	ldr	r3, [pc, #24]	; (8010090 <canM_Stop+0x2c>)
 8010076:	2200      	movs	r2, #0
 8010078:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
      pModule->local.state = CANM_IDLE;
 801007c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

      ret = true;
 8010080:	2401      	movs	r4, #1
   }

   /* Exit critical section. */
   taskEXIT_CRITICAL();
 8010082:	f7fa f809 	bl	800a098 <vPortExitCritical>

   return (ret);
}
 8010086:	4620      	mov	r0, r4
 8010088:	bd10      	pop	{r4, pc}
   bool ret = false;
 801008a:	2400      	movs	r4, #0
 801008c:	e7f9      	b.n	8010082 <canM_Stop+0x1e>
 801008e:	bf00      	nop
 8010090:	2000142c 	.word	0x2000142c

08010094 <canM_SetNewBaudrate>:
{
 8010094:	b570      	push	{r4, r5, r6, lr}
   if (pModule->local.state == CANM_IDLE)
 8010096:	4b1d      	ldr	r3, [pc, #116]	; (801010c <canM_SetNewBaudrate+0x78>)
 8010098:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801009c:	2b00      	cmp	r3, #0
 801009e:	d12f      	bne.n	8010100 <canM_SetNewBaudrate+0x6c>
 80100a0:	4604      	mov	r4, r0
      switch (newBaudrateMbps)
 80100a2:	2808      	cmp	r0, #8
 80100a4:	bf94      	ite	ls
 80100a6:	2600      	movls	r6, #0
 80100a8:	2601      	movhi	r6, #1
 80100aa:	bb66      	cbnz	r6, 8010106 <canM_SetNewBaudrate+0x72>
 80100ac:	f44f 709b 	mov.w	r0, #310	; 0x136
 80100b0:	40e0      	lsrs	r0, r4
 80100b2:	f010 0501 	ands.w	r5, r0, #1
 80100b6:	d024      	beq.n	8010102 <canM_SetNewBaudrate+0x6e>
         taskENTER_CRITICAL();
 80100b8:	f7f9 ffcc 	bl	800a054 <vPortEnterCritical>
         canM_Stop();
 80100bc:	f7ff ffd2 	bl	8010064 <canM_Stop>
         pModule->config.phfdcan->Init.NominalPrescaler = pBusTiming[newBaudrateMbps].nominal.prescaler;
 80100c0:	0122      	lsls	r2, r4, #4
 80100c2:	4b13      	ldr	r3, [pc, #76]	; (8010110 <canM_SetNewBaudrate+0x7c>)
 80100c4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 80100c8:	4910      	ldr	r1, [pc, #64]	; (801010c <canM_SetNewBaudrate+0x78>)
 80100ca:	6808      	ldr	r0, [r1, #0]
 80100cc:	5a9b      	ldrh	r3, [r3, r2]
 80100ce:	6143      	str	r3, [r0, #20]
         pModule->config.phfdcan->Init.NominalSyncJumpWidth = pBusTiming[newBaudrateMbps].nominal.syncJumpWidth;
 80100d0:	8863      	ldrh	r3, [r4, #2]
 80100d2:	6183      	str	r3, [r0, #24]
         pModule->config.phfdcan->Init.NominalTimeSeg1 = pBusTiming[newBaudrateMbps].nominal.timeSeq1;
 80100d4:	88a3      	ldrh	r3, [r4, #4]
 80100d6:	61c3      	str	r3, [r0, #28]
         pModule->config.phfdcan->Init.NominalTimeSeg2 = pBusTiming[newBaudrateMbps].nominal.timeSeq2;
 80100d8:	88e3      	ldrh	r3, [r4, #6]
 80100da:	6203      	str	r3, [r0, #32]
         pModule->config.phfdcan->Init.DataPrescaler = pBusTiming[newBaudrateMbps].data.prescaler;
 80100dc:	8923      	ldrh	r3, [r4, #8]
 80100de:	6243      	str	r3, [r0, #36]	; 0x24
         pModule->config.phfdcan->Init.DataSyncJumpWidth = pBusTiming[newBaudrateMbps].data.syncJumpWidth;
 80100e0:	8963      	ldrh	r3, [r4, #10]
 80100e2:	6283      	str	r3, [r0, #40]	; 0x28
         pModule->config.phfdcan->Init.DataTimeSeg1 = pBusTiming[newBaudrateMbps].data.timeSeq1;
 80100e4:	89a3      	ldrh	r3, [r4, #12]
 80100e6:	62c3      	str	r3, [r0, #44]	; 0x2c
         pModule->config.phfdcan->Init.DataTimeSeg2 = pBusTiming[newBaudrateMbps].data.timeSeq2;
 80100e8:	89e3      	ldrh	r3, [r4, #14]
 80100ea:	6303      	str	r3, [r0, #48]	; 0x30
         if (HAL_OK != HAL_FDCAN_Init(pModule->config.phfdcan))
 80100ec:	f7f1 fc50 	bl	8001990 <HAL_FDCAN_Init>
 80100f0:	b900      	cbnz	r0, 80100f4 <canM_SetNewBaudrate+0x60>
 80100f2:	462e      	mov	r6, r5
         canM_Start();
 80100f4:	f7ff ff9a 	bl	801002c <canM_Start>
         taskEXIT_CRITICAL();
 80100f8:	f7f9 ffce 	bl	800a098 <vPortExitCritical>
 80100fc:	4635      	mov	r5, r6
 80100fe:	e000      	b.n	8010102 <canM_SetNewBaudrate+0x6e>
   bool ret = false;
 8010100:	2500      	movs	r5, #0
}
 8010102:	4628      	mov	r0, r5
 8010104:	bd70      	pop	{r4, r5, r6, pc}
      switch (newBaudrateMbps)
 8010106:	2500      	movs	r5, #0
 8010108:	e7fb      	b.n	8010102 <canM_SetNewBaudrate+0x6e>
 801010a:	bf00      	nop
 801010c:	2000142c 	.word	0x2000142c
 8010110:	080139ac 	.word	0x080139ac

08010114 <canM_SetAddrTxRxDev>:

void canM_SetAddrTxRxDev (tCanM_DeviceId id, uint16_t addrTx, uint16_t addrRx)
{
   uint8_t idx = id;

   if (CAN_DEV_ID_INVALID != idx)
 8010114:	280a      	cmp	r0, #10
 8010116:	d010      	beq.n	801013a <canM_SetAddrTxRxDev+0x26>
{
 8010118:	b410      	push	{r4}
   {
      canM_Devices[idx].local.init_info.tx_id.id = addrTx;
 801011a:	4b08      	ldr	r3, [pc, #32]	; (801013c <canM_SetAddrTxRxDev+0x28>)
 801011c:	f44f 7416 	mov.w	r4, #600	; 0x258
 8010120:	fb04 3300 	mla	r3, r4, r0, r3
 8010124:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8010126:	f361 041c 	bfi	r4, r1, #0, #29
 801012a:	641c      	str	r4, [r3, #64]	; 0x40
      canM_Devices[idx].local.init_info.rx_id.id = addrRx;
 801012c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801012e:	f362 011c 	bfi	r1, r2, #0, #29
 8010132:	6459      	str	r1, [r3, #68]	; 0x44
   }
}
 8010134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010138:	4770      	bx	lr
 801013a:	4770      	bx	lr
 801013c:	2000016c 	.word	0x2000016c

08010140 <canM_GetAddrTxRxDev>:

void canM_GetAddrTxRxDev(tCanM_DeviceId id, uint16_t * addrTx, uint16_t * addrRx)
{
	uint8_t idx = id;

	if (CAN_DEV_ID_INVALID != idx)
 8010140:	280a      	cmp	r0, #10
 8010142:	d00a      	beq.n	801015a <canM_GetAddrTxRxDev+0x1a>
	{
	  *addrTx = (uint16_t)canM_Devices[idx].local.init_info.tx_id.id;
 8010144:	4b05      	ldr	r3, [pc, #20]	; (801015c <canM_GetAddrTxRxDev+0x1c>)
 8010146:	f44f 7c16 	mov.w	ip, #600	; 0x258
 801014a:	fb0c 3300 	mla	r3, ip, r0, r3
 801014e:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
 8010152:	8008      	strh	r0, [r1, #0]
	  *addrRx = (uint16_t)canM_Devices[idx].local.init_info.rx_id.id;
 8010154:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010158:	8013      	strh	r3, [r2, #0]
	}
}
 801015a:	4770      	bx	lr
 801015c:	2000016c 	.word	0x2000016c

08010160 <canM_Send>:

bool canM_Send (tCanM_DeviceId id, const uint8_t *payload, uint8_t size)
{
 8010160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bool ret = false;

   if (CANM_IDLE == canM_Module.local.state)
 8010162:	4b0d      	ldr	r3, [pc, #52]	; (8010198 <canM_Send+0x38>)
 8010164:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010168:	b10b      	cbz	r3, 801016e <canM_Send+0xe>
   bool ret = false;
 801016a:	2000      	movs	r0, #0

      ret = true;
   }

   return (ret);
}
 801016c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801016e:	4606      	mov	r6, r0
 8010170:	460d      	mov	r5, r1
 8010172:	4614      	mov	r4, r2
      taskENTER_CRITICAL();
 8010174:	f7f9 ff6e 	bl	800a054 <vPortEnterCritical>
      canM_Module.input.id = id;
 8010178:	4f07      	ldr	r7, [pc, #28]	; (8010198 <canM_Send+0x38>)
 801017a:	f887 6045 	strb.w	r6, [r7, #69]	; 0x45
      canM_Module.input.size = size;
 801017e:	f887 4044 	strb.w	r4, [r7, #68]	; 0x44
      memcpy((void *)canM_Module.input.dataReq, (void *)payload, size);
 8010182:	4622      	mov	r2, r4
 8010184:	4629      	mov	r1, r5
 8010186:	1d38      	adds	r0, r7, #4
 8010188:	f001 fe6e 	bl	8011e68 <memcpy>
      taskEXIT_CRITICAL();
 801018c:	f7f9 ff84 	bl	800a098 <vPortExitCritical>
      canM_Module.local.isNewReq = true;
 8010190:	2001      	movs	r0, #1
 8010192:	f887 0049 	strb.w	r0, [r7, #73]	; 0x49
      ret = true;
 8010196:	e7e9      	b.n	801016c <canM_Send+0xc>
 8010198:	2000142c 	.word	0x2000142c

0801019c <canM_SendToAddr>:

bool canM_SendToAddr (uint32_t addrTx, const uint8_t * payload, uint8_t size)
{
 801019c:	b570      	push	{r4, r5, r6, lr}
 801019e:	b092      	sub	sp, #72	; 0x48
 80101a0:	4606      	mov	r6, r0
 80101a2:	460d      	mov	r5, r1
 80101a4:	4614      	mov	r4, r2
   bool ret = false;

   struct CAN_msg msg = {
 80101a6:	2248      	movs	r2, #72	; 0x48
 80101a8:	2100      	movs	r1, #0
 80101aa:	4668      	mov	r0, sp
 80101ac:	f001 fd9e 	bl	8011cec <memset>
 80101b0:	9b00      	ldr	r3, [sp, #0]
 80101b2:	f366 031c 	bfi	r3, r6, #0, #29
 80101b6:	9300      	str	r3, [sp, #0]
 80101b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80101bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101c0:	f88d 3003 	strb.w	r3, [sp, #3]
      .id.id = addrTx,
      .id.isCANFD = true,
      .id.isExt = false,
      .id.isRemote = false,
      .dlc = lenToMinDlc(size),
 80101c4:	4620      	mov	r0, r4
 80101c6:	f7fa fe4b 	bl	800ae60 <lenToMinDlc>
   struct CAN_msg msg = {
 80101ca:	f88d 0004 	strb.w	r0, [sp, #4]
   };

   memcpy((uint8_t *)msg.data, (uint8_t *)payload, size);
 80101ce:	4622      	mov	r2, r4
 80101d0:	4629      	mov	r1, r5
 80101d2:	f10d 0005 	add.w	r0, sp, #5
 80101d6:	f001 fe47 	bl	8011e68 <memcpy>

   if (OP_OK == canM_FDCanSend (NULL, (struct CAN_msg *)&msg))
 80101da:	4669      	mov	r1, sp
 80101dc:	2000      	movs	r0, #0
 80101de:	f7ff fe73 	bl	800fec8 <canM_FDCanSend>
 80101e2:	b110      	cbz	r0, 80101ea <canM_SendToAddr+0x4e>
   bool ret = false;
 80101e4:	2000      	movs	r0, #0
   {
      ret = true;
   }

   return (ret);
}
 80101e6:	b012      	add	sp, #72	; 0x48
 80101e8:	bd70      	pop	{r4, r5, r6, pc}
      ret = true;
 80101ea:	2001      	movs	r0, #1
 80101ec:	e7fb      	b.n	80101e6 <canM_SendToAddr+0x4a>
	...

080101f0 <canM_Read>:

bool canM_Read (tCanM_DeviceId * const id, const uint8_t *payload, uint8_t *size)
{
 80101f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bool ret = false;
   uint8_t lenDataRet = 0u;

   if (true == canM_Module.output.isNewResp)
 80101f4:	4b0d      	ldr	r3, [pc, #52]	; (801022c <canM_Read+0x3c>)
 80101f6:	f893 511a 	ldrb.w	r5, [r3, #282]	; 0x11a
 80101fa:	b915      	cbnz	r5, 8010202 <canM_Read+0x12>

      ret = true;
   }

   return ret;
}
 80101fc:	4628      	mov	r0, r5
 80101fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010202:	4606      	mov	r6, r0
 8010204:	4608      	mov	r0, r1
 8010206:	4614      	mov	r4, r2
      lenDataRet = canM_Module.output.size;
 8010208:	461f      	mov	r7, r3
 801020a:	f893 8118 	ldrb.w	r8, [r3, #280]	; 0x118
      memcpy((uint8_t *)payload, (uint8_t *)canM_Module.output.dataResp, lenDataRet);
 801020e:	4642      	mov	r2, r8
 8010210:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8010214:	f001 fe28 	bl	8011e68 <memcpy>
      *size = lenDataRet;
 8010218:	f884 8000 	strb.w	r8, [r4]
      canM_Module.output.isNewResp = false;
 801021c:	2300      	movs	r3, #0
 801021e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
      *id = canM_Module.output.id;
 8010222:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8010226:	7033      	strb	r3, [r6, #0]
      ret = true;
 8010228:	e7e8      	b.n	80101fc <canM_Read+0xc>
 801022a:	bf00      	nop
 801022c:	2000142c 	.word	0x2000142c

08010230 <canM_ReadAddr>:


bool canM_ReadAddr (uint32_t * const id, const uint8_t *payload, uint8_t *size)
{
 8010230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bool ret = false;
   uint8_t lenDataRet = 0u;

   if (true == canM_Module.local.isRecMsg)
 8010234:	4b10      	ldr	r3, [pc, #64]	; (8010278 <canM_ReadAddr+0x48>)
 8010236:	f893 604a 	ldrb.w	r6, [r3, #74]	; 0x4a
 801023a:	b916      	cbnz	r6, 8010242 <canM_ReadAddr+0x12>

      ret = true;
   }

   return ret;
}
 801023c:	4630      	mov	r0, r6
 801023e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010242:	4607      	mov	r7, r0
 8010244:	460d      	mov	r5, r1
 8010246:	4614      	mov	r4, r2
      lenDataRet = dlc2len(canM_Module.local.canResp.dlc);
 8010248:	4699      	mov	r9, r3
 801024a:	f893 0094 	ldrb.w	r0, [r3, #148]	; 0x94
 801024e:	f7fa fdff 	bl	800ae50 <dlc2len>
 8010252:	4680      	mov	r8, r0
      memcpy((uint8_t *)payload, (uint8_t *)canM_Module.local.canResp.data, lenDataRet);
 8010254:	4602      	mov	r2, r0
 8010256:	f109 0195 	add.w	r1, r9, #149	; 0x95
 801025a:	4628      	mov	r0, r5
 801025c:	f001 fe04 	bl	8011e68 <memcpy>
      canM_Module.local.isRecMsg = false;
 8010260:	2300      	movs	r3, #0
 8010262:	f889 304a 	strb.w	r3, [r9, #74]	; 0x4a
      *id = canM_Module.local.canResp.id.id;
 8010266:	f8d9 3090 	ldr.w	r3, [r9, #144]	; 0x90
 801026a:	f3c3 031c 	ubfx	r3, r3, #0, #29
 801026e:	603b      	str	r3, [r7, #0]
      *size = lenDataRet;
 8010270:	f884 8000 	strb.w	r8, [r4]
      ret = true;
 8010274:	e7e2      	b.n	801023c <canM_ReadAddr+0xc>
 8010276:	bf00      	nop
 8010278:	2000142c 	.word	0x2000142c

0801027c <canM_Init>:

   return (ret);
}

void canM_Init (tCanM_Module *const module)
{
 801027c:	b538      	push	{r3, r4, r5, lr}
 801027e:	4605      	mov	r5, r0
   uint8_t iter = 0u;

   /* Enable the CAN TP layer. */
   for (iter = 0u; iter < CAN_DEV_TOTAL; iter++)
 8010280:	2400      	movs	r4, #0
 8010282:	e009      	b.n	8010298 <canM_Init+0x1c>
         canM_Module.dev[iter].config.rx_buff = module->local.dataResp;
         canM_Module.dev[iter].config.rx_buff_len = CANM_RX_SIZE;
      }

      /* Link configuration of each device on bus can. */
      iso_can_tp_create(&canM_Module.dev[iter].local, &canM_Module.dev[iter].config);
 8010284:	4a19      	ldr	r2, [pc, #100]	; (80102ec <canM_Init+0x70>)
 8010286:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
 801028a:	4418      	add	r0, r3
 801028c:	1d01      	adds	r1, r0, #4
 801028e:	303c      	adds	r0, #60	; 0x3c
 8010290:	f7fa fdf4 	bl	800ae7c <iso_can_tp_create>
   for (iter = 0u; iter < CAN_DEV_TOTAL; iter++)
 8010294:	3401      	adds	r4, #1
 8010296:	b2e4      	uxtb	r4, r4
 8010298:	2c07      	cmp	r4, #7
 801029a:	d823      	bhi.n	80102e4 <canM_Init+0x68>
      if (false != canM_Module.dev[iter].isActive)
 801029c:	4b13      	ldr	r3, [pc, #76]	; (80102ec <canM_Init+0x70>)
 801029e:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80102a2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80102a6:	fb04 f303 	mul.w	r3, r4, r3
 80102aa:	441a      	add	r2, r3
 80102ac:	7851      	ldrb	r1, [r2, #1]
 80102ae:	2900      	cmp	r1, #0
 80102b0:	d0e8      	beq.n	8010284 <canM_Init+0x8>
         canM_Module.dev[iter].config.L_Data_request = canM_FDCanSend;
 80102b2:	490f      	ldr	r1, [pc, #60]	; (80102f0 <canM_Init+0x74>)
 80102b4:	6151      	str	r1, [r2, #20]
         canM_Module.dev[iter].config.N_USData_indication = (void *)canM_N_USData_indication;
 80102b6:	4a0d      	ldr	r2, [pc, #52]	; (80102ec <canM_Init+0x70>)
 80102b8:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
 80102bc:	4419      	add	r1, r3
 80102be:	480d      	ldr	r0, [pc, #52]	; (80102f4 <canM_Init+0x78>)
 80102c0:	6188      	str	r0, [r1, #24]
         canM_Module.dev[iter].config.N_USData_confirm = (void *)canM_N_USData_confirm;
 80102c2:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
 80102c6:	4419      	add	r1, r3
 80102c8:	480b      	ldr	r0, [pc, #44]	; (80102f8 <canM_Init+0x7c>)
 80102ca:	61c8      	str	r0, [r1, #28]
         canM_Module.dev[iter].config.rx_buff = module->local.dataResp;
 80102cc:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
 80102d0:	4419      	add	r1, r3
 80102d2:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 80102d6:	6208      	str	r0, [r1, #32]
         canM_Module.dev[iter].config.rx_buff_len = CANM_RX_SIZE;
 80102d8:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
 80102dc:	441a      	add	r2, r3
 80102de:	2140      	movs	r1, #64	; 0x40
 80102e0:	6251      	str	r1, [r2, #36]	; 0x24
 80102e2:	e7cf      	b.n	8010284 <canM_Init+0x8>
   }

   /* Start CanM. */
   canM_Start();
 80102e4:	f7ff fea2 	bl	801002c <canM_Start>
}
 80102e8:	bd38      	pop	{r3, r4, r5, pc}
 80102ea:	bf00      	nop
 80102ec:	2000142c 	.word	0x2000142c
 80102f0:	0800fec9 	.word	0x0800fec9
 80102f4:	0800fe41 	.word	0x0800fe41
 80102f8:	0800fe59 	.word	0x0800fe59

080102fc <canM_MainFunction>:
	return ret;
}


void canM_MainFunction(tCanM_Module *const module)
{
 80102fc:	b538      	push	{r3, r4, r5, lr}
 80102fe:	4604      	mov	r4, r0
   tCanM_State nextState = module->local.state;
 8010300:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48

   canM_pollEvent(module);
 8010304:	f7ff fe16 	bl	800ff34 <canM_pollEvent>

   //cdc_printf("@%d: canM stage: %d\r\n",HAL_GetTick(), module->local.state);
   //cdc_printf("@%d: canM stage: %d\r\n",osKernelSysTick(), module->local.state);
   //if (nextState!= CANM_IDLE) cdc_printf("[can2Master]@%u:\t %s\n",GetCycleCount(), tCanM_State_StatesName(nextState));
   switch (module->local.state)
 8010308:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801030c:	2b03      	cmp	r3, #3
 801030e:	d807      	bhi.n	8010320 <canM_MainFunction+0x24>
 8010310:	e8df f003 	tbb	[pc, r3]
 8010314:	130e0902 	.word	0x130e0902
   {
   case CANM_IDLE:
      nextState = canM_WaitingEvent(module);
 8010318:	4620      	mov	r0, r4
 801031a:	f7ff fda9 	bl	800fe70 <canM_WaitingEvent>
 801031e:	4605      	mov	r5, r0

   default:
      break;
   }

   module->local.state = nextState;
 8010320:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
 8010324:	bd38      	pop	{r3, r4, r5, pc}
      nextState = canM_ProcessEntry(module);
 8010326:	4620      	mov	r0, r4
 8010328:	f7ff fe18 	bl	800ff5c <canM_ProcessEntry>
 801032c:	4605      	mov	r5, r0
      break;
 801032e:	e7f7      	b.n	8010320 <canM_MainFunction+0x24>
      nextState = canM_Process(module);
 8010330:	4620      	mov	r0, r4
 8010332:	f7ff fdb9 	bl	800fea8 <canM_Process>
 8010336:	4605      	mov	r5, r0
      break;
 8010338:	e7f2      	b.n	8010320 <canM_MainFunction+0x24>
      nextState = canM_ProcessPost(module);
 801033a:	4620      	mov	r0, r4
 801033c:	f7ff fe2a 	bl	800ff94 <canM_ProcessPost>
 8010340:	4605      	mov	r5, r0
      break;
 8010342:	e7ed      	b.n	8010320 <canM_MainFunction+0x24>

08010344 <HAL_FDCAN_RxFifo0Callback>:
 * 
 * @param hfdcan The parameter `hfdcan` is a pointer to the FDCAN handle structure. It is used to identify the FDCAN peripheral and its associated configuration and status.
 * @param RxFifo0ITs RxFifo0ITs is a bitmask that indicates which interrupt flags are set for the Rx FIFO 0. The function checks if the FDCAN_IT_RX_FIFO0_NEW_MESSAGE flag is set in the bitmask to determine if a new message has been received in Rx FIFO 0.
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8010344:	b530      	push	{r4, r5, lr}
 8010346:	b08b      	sub	sp, #44	; 0x2c
 8010348:	4605      	mov	r5, r0
 801034a:	460c      	mov	r4, r1
   FDCAN_RxHeaderTypeDef rxHeader = {0u};
 801034c:	2228      	movs	r2, #40	; 0x28
 801034e:	2100      	movs	r1, #0
 8010350:	4668      	mov	r0, sp
 8010352:	f001 fccb 	bl	8011cec <memset>
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;

   if (FDCAN_IT_RX_FIFO0_NEW_MESSAGE == (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE))   {
 8010356:	f014 0f01 	tst.w	r4, #1
 801035a:	d101      	bne.n	8010360 <HAL_FDCAN_RxFifo0Callback+0x1c>
      /* Exit critical section. */
      taskEXIT_CRITICAL_FROM_ISR(xHigherPriorityTaskWoken);
      if(0) cdc_printf("HAL_FDCAN_RxFifo0Callback @%u\r\n", GetCycleCount());
   }
   return;
}
 801035c:	b00b      	add	sp, #44	; 0x2c
 801035e:	bd30      	pop	{r4, r5, pc}
	__asm volatile
 8010360:	f3ef 8311 	mrs	r3, BASEPRI
 8010364:	f04f 0250 	mov.w	r2, #80	; 0x50
 8010368:	f382 8811 	msr	BASEPRI, r2
 801036c:	f3bf 8f6f 	isb	sy
 8010370:	f3bf 8f4f 	dsb	sy
      if (HAL_OK == HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, (FDCAN_RxHeaderTypeDef *)&rxHeader, (uint8_t *)canM_Module.local.canResp.data))
 8010374:	4b1e      	ldr	r3, [pc, #120]	; (80103f0 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8010376:	466a      	mov	r2, sp
 8010378:	2140      	movs	r1, #64	; 0x40
 801037a:	4628      	mov	r0, r5
 801037c:	f7f1 fde2 	bl	8001f44 <HAL_FDCAN_GetRxMessage>
 8010380:	2800      	cmp	r0, #0
 8010382:	d130      	bne.n	80103e6 <HAL_FDCAN_RxFifo0Callback+0xa2>
         canM_Module.local.canResp.id.id = rxHeader.Identifier;
 8010384:	4b1b      	ldr	r3, [pc, #108]	; (80103f4 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8010386:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801038a:	9900      	ldr	r1, [sp, #0]
 801038c:	f361 021c 	bfi	r2, r1, #0, #29
 8010390:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         canM_Module.local.canResp.id.isCANFD = (FDCAN_FD_CAN == rxHeader.FDFormat) ? true : false;
 8010394:	9a06      	ldr	r2, [sp, #24]
 8010396:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 801039a:	bf14      	ite	ne
 801039c:	2200      	movne	r2, #0
 801039e:	2201      	moveq	r2, #1
 80103a0:	f893 1093 	ldrb.w	r1, [r3, #147]	; 0x93
 80103a4:	f362 1186 	bfi	r1, r2, #6, #1
 80103a8:	f883 1093 	strb.w	r1, [r3, #147]	; 0x93
         canM_Module.local.canResp.id.isExt = (FDCAN_EXTENDED_ID == rxHeader.IdType) ? true : false;
 80103ac:	9a01      	ldr	r2, [sp, #4]
 80103ae:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80103b2:	bf14      	ite	ne
 80103b4:	2200      	movne	r2, #0
 80103b6:	2201      	moveq	r2, #1
 80103b8:	b2c9      	uxtb	r1, r1
 80103ba:	f362 1145 	bfi	r1, r2, #5, #1
 80103be:	f883 1093 	strb.w	r1, [r3, #147]	; 0x93
         canM_Module.local.canResp.id.isRemote = (FDCAN_REMOTE_FRAME == rxHeader.RxFrameType) ? true : false;
 80103c2:	9a02      	ldr	r2, [sp, #8]
 80103c4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80103c8:	bf14      	ite	ne
 80103ca:	2200      	movne	r2, #0
 80103cc:	2201      	moveq	r2, #1
 80103ce:	b2c9      	uxtb	r1, r1
 80103d0:	f362 11c7 	bfi	r1, r2, #7, #1
 80103d4:	f883 1093 	strb.w	r1, [r3, #147]	; 0x93
         canM_Module.local.canResp.dlc = (uint8_t)(rxHeader.DataLength >> 16U);
 80103d8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80103dc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
         canM_Module.local.isRecMsg = true;
 80103e0:	2201      	movs	r2, #1
 80103e2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	__asm volatile
 80103e6:	2300      	movs	r3, #0
 80103e8:	f383 8811 	msr	BASEPRI, r3
   return;
 80103ec:	e7b6      	b.n	801035c <HAL_FDCAN_RxFifo0Callback+0x18>
 80103ee:	bf00      	nop
 80103f0:	200014c1 	.word	0x200014c1
 80103f4:	2000142c 	.word	0x2000142c

080103f8 <ethCat_check_dc_handler>:
uint16_t ethCat_check_dc_handler (void)
{
   uint16_t ret = 0u;

   return ret;
}
 80103f8:	2000      	movs	r0, #0
 80103fa:	4770      	bx	lr

080103fc <ethCat_hw_eep_handler>:

void ethCat_hw_eep_handler (void)
{

}
 80103fc:	4770      	bx	lr
	...

08010400 <ethCat_object_download_hook>:
{
 8010400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010402:	b087      	sub	sp, #28
   uint8_t md80id = Obj.md80_Command.md80_dev_no;
 8010404:	4b1f      	ldr	r3, [pc, #124]	; (8010484 <ethCat_object_download_hook+0x84>)
 8010406:	f893 5140 	ldrb.w	r5, [r3, #320]	; 0x140
   uint8_t cmd = Obj.md80_Command.command;
 801040a:	f893 4141 	ldrb.w	r4, [r3, #321]	; 0x141
   uint8_t length = Obj.md80_Command.size;
 801040e:	f893 6142 	ldrb.w	r6, [r3, #322]	; 0x142
   uint8_t dataCmd[ETHCAT_LENGTH_DATAMAX] = {0u};
 8010412:	2300      	movs	r3, #0
 8010414:	9300      	str	r3, [sp, #0]
 8010416:	9301      	str	r3, [sp, #4]
 8010418:	9302      	str	r3, [sp, #8]
 801041a:	9303      	str	r3, [sp, #12]
 801041c:	9304      	str	r3, [sp, #16]
 801041e:	9305      	str	r3, [sp, #20]
   switch (index)
 8010420:	f242 0301 	movw	r3, #8193	; 0x2001
 8010424:	4298      	cmp	r0, r3
 8010426:	d002      	beq.n	801042e <ethCat_object_download_hook+0x2e>
}
 8010428:	2000      	movs	r0, #0
 801042a:	b007      	add	sp, #28
 801042c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((cmd != BUS_FRAME_NONE) && (cmd < BUS_FRAME_INVALID) && (subindex == 9))
 801042e:	1e63      	subs	r3, r4, #1
 8010430:	b2db      	uxtb	r3, r3
 8010432:	2b08      	cmp	r3, #8
 8010434:	d8f8      	bhi.n	8010428 <ethCat_object_download_hook+0x28>
 8010436:	2909      	cmp	r1, #9
 8010438:	d1f6      	bne.n	8010428 <ethCat_object_download_hook+0x28>
         memcpy(&dataCmd[0],  (uint8_t *)&Obj.md80_Command.dataSet0, sizeof(Obj.md80_Command.dataSet0));
 801043a:	4f12      	ldr	r7, [pc, #72]	; (8010484 <ethCat_object_download_hook+0x84>)
 801043c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010440:	9300      	str	r3, [sp, #0]
         memcpy(&dataCmd[4],  (uint8_t *)&Obj.md80_Command.dataSet1, sizeof(Obj.md80_Command.dataSet1));
 8010442:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8010446:	9301      	str	r3, [sp, #4]
         memcpy(&dataCmd[8],  (uint8_t *)&Obj.md80_Command.dataSet2, sizeof(Obj.md80_Command.dataSet2));
 8010448:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801044c:	9302      	str	r3, [sp, #8]
         memcpy(&dataCmd[12], (uint8_t *)&Obj.md80_Command.dataSet3, sizeof(Obj.md80_Command.dataSet3));
 801044e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010452:	9303      	str	r3, [sp, #12]
         memcpy(&dataCmd[16], (uint8_t *)&Obj.md80_Command.dataSet4, sizeof(Obj.md80_Command.dataSet4));
 8010454:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8010458:	9304      	str	r3, [sp, #16]
         Obj.md80_Last_Command_Received.command = cmd;
 801045a:	f8c7 415c 	str.w	r4, [r7, #348]	; 0x15c
         Obj.md80_Last_Command_Received.counter = Obj.md80_Command.counter;
 801045e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8010462:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
         Obj.md80_Last_Command_Received.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 8010466:	f7f8 ff9b 	bl	80093a0 <xTaskGetTickCount>
 801046a:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
         Obj.md80_Command.command = BUS_FRAME_NONE;
 801046e:	2300      	movs	r3, #0
 8010470:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
         canIdle_UpdateCmd(md80id, cmd, length, dataCmd);
 8010474:	466b      	mov	r3, sp
 8010476:	4632      	mov	r2, r6
 8010478:	4621      	mov	r1, r4
 801047a:	4628      	mov	r0, r5
 801047c:	f7ff fc68 	bl	800fd50 <canIdle_UpdateCmd>
 8010480:	e7d2      	b.n	8010428 <ethCat_object_download_hook+0x28>
 8010482:	bf00      	nop
 8010484:	2000d350 	.word	0x2000d350

08010488 <cb_get_inputs>:
}
 8010488:	4770      	bx	lr

0801048a <cb_set_outputs>:
}
 801048a:	4770      	bx	lr

0801048c <ethCat_Init>:

void ethCat_Init (void)
{
 801048c:	b510      	push	{r4, lr}
      .esc_hw_eep_handler = ethCat_hw_eep_handler,
      .esc_check_dc_handler = ethCat_check_dc_handler,
   };

   /* Turn off etherCat. */
   HAL_GPIO_WritePin (LAN_Reset_CMD_GPIO_Port, LAN_Reset_CMD_Pin, GPIO_PIN_RESET);
 801048e:	4c0a      	ldr	r4, [pc, #40]	; (80104b8 <ethCat_Init+0x2c>)
 8010490:	2200      	movs	r2, #0
 8010492:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010496:	4620      	mov	r0, r4
 8010498:	f7f2 f8c4 	bl	8002624 <HAL_GPIO_WritePin>

   /* Delay */
   osDelay(ETHCAT_DELAY_MS);
 801049c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80104a0:	f7f8 f857 	bl	8008552 <osDelay>

   /* Turn on etherCat. */
   HAL_GPIO_WritePin (LAN_Reset_CMD_GPIO_Port, LAN_Reset_CMD_Pin, GPIO_PIN_SET);
 80104a4:	2201      	movs	r2, #1
 80104a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80104aa:	4620      	mov	r0, r4
 80104ac:	f7f2 f8ba 	bl	8002624 <HAL_GPIO_WritePin>

   /* Initialize the EtherCat module. */
   ecat_slv_init (&ethCat_cfg);
 80104b0:	4802      	ldr	r0, [pc, #8]	; (80104bc <ethCat_Init+0x30>)
 80104b2:	f7fb fcef 	bl	800be94 <ecat_slv_init>
}
 80104b6:	bd10      	pop	{r4, pc}
 80104b8:	48000400 	.word	0x48000400
 80104bc:	2000154c 	.word	0x2000154c

080104c0 <ethCat_MainFunction>:

void ethCat_MainFunction (void)
{
 80104c0:	b508      	push	{r3, lr}
	static uint32_t start=0;
	static uint32_t end =0;

	//start = DWT->CYCCNT;//GetCycleCount();
	//start = xTaskGetTickCount()/portTICK_PERIOD_MS;
	ecat_slv();
 80104c2:	f7fb fcdf 	bl	800be84 <ecat_slv>
	//end= DWT->CYCCNT;//GetCycleCount();
	//end= xTaskGetTickCount()/portTICK_PERIOD_MS;
	//sendMessage(ETHCat,2,666, (end-start));

}
 80104c6:	bd08      	pop	{r3, pc}

080104c8 <timerCounterCb>:

void timerCounterCb(void const * argument)
{
#if ETHCAT_DUMMYDATA_500US == 1
   /* Update the counter dummy for md80: 1ms */
   Obj.md80_0_DataReturn.counter++;
 80104c8:	4a05      	ldr	r2, [pc, #20]	; (80104e0 <timerCounterCb+0x18>)
 80104ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80104cc:	3301      	adds	r3, #1
 80104ce:	6313      	str	r3, [r2, #48]	; 0x30

   Obj.md80_0_DataReturn.timestamp = (uint32_t)(DWT->CYCCNT/160);
 80104d0:	4b04      	ldr	r3, [pc, #16]	; (80104e4 <timerCounterCb+0x1c>)
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	4904      	ldr	r1, [pc, #16]	; (80104e8 <timerCounterCb+0x20>)
 80104d6:	fba1 1303 	umull	r1, r3, r1, r3
 80104da:	09db      	lsrs	r3, r3, #7
 80104dc:	6353      	str	r3, [r2, #52]	; 0x34
   //Obj.md80_0_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount()/portTICK_PERIOD_MS);
#endif
}
 80104de:	4770      	bx	lr
 80104e0:	2000d350 	.word	0x2000d350
 80104e4:	e0001000 	.word	0xe0001000
 80104e8:	cccccccd 	.word	0xcccccccd

080104ec <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80104ec:	b508      	push	{r3, lr}
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80104ee:	4803      	ldr	r0, [pc, #12]	; (80104fc <_cbSendSystemDesc+0x10>)
 80104f0:	f000 fe5a 	bl	80111a8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80104f4:	4802      	ldr	r0, [pc, #8]	; (8010500 <_cbSendSystemDesc+0x14>)
 80104f6:	f000 fe57 	bl	80111a8 <SEGGER_SYSVIEW_SendSysDesc>
}
 80104fa:	bd08      	pop	{r3, pc}
 80104fc:	08016a38 	.word	0x08016a38
 8010500:	08016a5c 	.word	0x08016a5c

08010504 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8010504:	b508      	push	{r3, lr}
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8010506:	4b06      	ldr	r3, [pc, #24]	; (8010520 <SEGGER_SYSVIEW_Conf+0x1c>)
 8010508:	6818      	ldr	r0, [r3, #0]
 801050a:	4b06      	ldr	r3, [pc, #24]	; (8010524 <SEGGER_SYSVIEW_Conf+0x20>)
 801050c:	4a06      	ldr	r2, [pc, #24]	; (8010528 <SEGGER_SYSVIEW_Conf+0x24>)
 801050e:	4601      	mov	r1, r0
 8010510:	f000 faaa 	bl	8010a68 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8010514:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8010518:	f000 fadc 	bl	8010ad4 <SEGGER_SYSVIEW_SetRAMBase>
}
 801051c:	bd08      	pop	{r3, pc}
 801051e:	bf00      	nop
 8010520:	20000000 	.word	0x20000000
 8010524:	080104ed 	.word	0x080104ed
 8010528:	08016abc 	.word	0x08016abc

0801052c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 801052c:	b508      	push	{r3, lr}
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 801052e:	f7f8 ff3d 	bl	80093ac <xTaskGetTickCountFromISR>
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8010532:	0ec3      	lsrs	r3, r0, #27
 8010534:	0141      	lsls	r1, r0, #5
 8010536:	1a09      	subs	r1, r1, r0
 8010538:	f163 0300 	sbc.w	r3, r3, #0
 801053c:	009b      	lsls	r3, r3, #2
 801053e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010542:	0089      	lsls	r1, r1, #2
 8010544:	1809      	adds	r1, r1, r0
 8010546:	f143 0300 	adc.w	r3, r3, #0
 801054a:	00db      	lsls	r3, r3, #3
  return Time;
}
 801054c:	00c8      	lsls	r0, r1, #3
 801054e:	ea43 7151 	orr.w	r1, r3, r1, lsr #29
 8010552:	bd08      	pop	{r3, pc}

08010554 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8010554:	b510      	push	{r4, lr}
 8010556:	b086      	sub	sp, #24
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8010558:	2400      	movs	r4, #0
 801055a:	9401      	str	r4, [sp, #4]
 801055c:	9402      	str	r4, [sp, #8]
 801055e:	9403      	str	r4, [sp, #12]
 8010560:	9404      	str	r4, [sp, #16]
 8010562:	9405      	str	r4, [sp, #20]
  TaskInfo.TaskID     = TaskID;
 8010564:	9001      	str	r0, [sp, #4]
  TaskInfo.sName      = sName;
 8010566:	9102      	str	r1, [sp, #8]
  TaskInfo.Prio       = Prio;
 8010568:	9203      	str	r2, [sp, #12]
  TaskInfo.StackBase  = StackBase;
 801056a:	9304      	str	r3, [sp, #16]
  TaskInfo.StackSize  = StackSize;
 801056c:	9b08      	ldr	r3, [sp, #32]
 801056e:	9305      	str	r3, [sp, #20]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8010570:	a801      	add	r0, sp, #4
 8010572:	f000 fdb7 	bl	80110e4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8010576:	b006      	add	sp, #24
 8010578:	bd10      	pop	{r4, pc}
	...

0801057c <SYSVIEW_AddTask>:
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 801057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801057e:	b083      	sub	sp, #12
 8010580:	4605      	mov	r5, r0
 8010582:	460c      	mov	r4, r1
 8010584:	4616      	mov	r6, r2
 8010586:	461f      	mov	r7, r3
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8010588:	2205      	movs	r2, #5
 801058a:	4913      	ldr	r1, [pc, #76]	; (80105d8 <SYSVIEW_AddTask+0x5c>)
 801058c:	4620      	mov	r0, r4
 801058e:	f001 fb9d 	bl	8011ccc <memcmp>
 8010592:	b1d0      	cbz	r0, 80105ca <SYSVIEW_AddTask+0x4e>
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8010594:	4b11      	ldr	r3, [pc, #68]	; (80105dc <SYSVIEW_AddTask+0x60>)
 8010596:	681a      	ldr	r2, [r3, #0]
 8010598:	2a07      	cmp	r2, #7
 801059a:	d818      	bhi.n	80105ce <SYSVIEW_AddTask+0x52>
  _aTasks[_NumTasks].xHandle = xHandle;
 801059c:	4b10      	ldr	r3, [pc, #64]	; (80105e0 <SYSVIEW_AddTask+0x64>)
 801059e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80105a2:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 80105a6:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80105aa:	604c      	str	r4, [r1, #4]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80105ac:	608e      	str	r6, [r1, #8]
  _aTasks[_NumTasks].pxStack = pxStack;
 80105ae:	60cf      	str	r7, [r1, #12]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80105b0:	9b08      	ldr	r3, [sp, #32]
 80105b2:	610b      	str	r3, [r1, #16]
  _NumTasks++;
 80105b4:	3201      	adds	r2, #1
 80105b6:	4b09      	ldr	r3, [pc, #36]	; (80105dc <SYSVIEW_AddTask+0x60>)
 80105b8:	601a      	str	r2, [r3, #0]
  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80105ba:	9b08      	ldr	r3, [sp, #32]
 80105bc:	9300      	str	r3, [sp, #0]
 80105be:	463b      	mov	r3, r7
 80105c0:	4632      	mov	r2, r6
 80105c2:	4621      	mov	r1, r4
 80105c4:	4628      	mov	r0, r5
 80105c6:	f7ff ffc5 	bl	8010554 <SYSVIEW_SendTaskInfo>
}
 80105ca:	b003      	add	sp, #12
 80105cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80105ce:	4805      	ldr	r0, [pc, #20]	; (80105e4 <SYSVIEW_AddTask+0x68>)
 80105d0:	f000 fec0 	bl	8011354 <SEGGER_SYSVIEW_Warn>
    return;
 80105d4:	e7f9      	b.n	80105ca <SYSVIEW_AddTask+0x4e>
 80105d6:	bf00      	nop
 80105d8:	08013150 	.word	0x08013150
 80105dc:	200099a4 	.word	0x200099a4
 80105e0:	200099a8 	.word	0x200099a8
 80105e4:	08016a6c 	.word	0x08016a6c

080105e8 <_cbSendTaskList>:
static void _cbSendTaskList(void) {
 80105e8:	b530      	push	{r4, r5, lr}
 80105ea:	b083      	sub	sp, #12
  for (n = 0; n < _NumTasks; n++) {
 80105ec:	2400      	movs	r4, #0
 80105ee:	e00d      	b.n	801060c <_cbSendTaskList+0x24>
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80105f0:	4d09      	ldr	r5, [pc, #36]	; (8010618 <_cbSendTaskList+0x30>)
 80105f2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80105f6:	0098      	lsls	r0, r3, #2
 80105f8:	1829      	adds	r1, r5, r0
 80105fa:	690b      	ldr	r3, [r1, #16]
 80105fc:	9300      	str	r3, [sp, #0]
 80105fe:	68cb      	ldr	r3, [r1, #12]
 8010600:	688a      	ldr	r2, [r1, #8]
 8010602:	6849      	ldr	r1, [r1, #4]
 8010604:	5828      	ldr	r0, [r5, r0]
 8010606:	f7ff ffa5 	bl	8010554 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 801060a:	3401      	adds	r4, #1
 801060c:	4b03      	ldr	r3, [pc, #12]	; (801061c <_cbSendTaskList+0x34>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	42a3      	cmp	r3, r4
 8010612:	d8ed      	bhi.n	80105f0 <_cbSendTaskList+0x8>
}
 8010614:	b003      	add	sp, #12
 8010616:	bd30      	pop	{r4, r5, pc}
 8010618:	200099a8 	.word	0x200099a8
 801061c:	200099a4 	.word	0x200099a4

08010620 <_DoInit>:
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8010620:	4a12      	ldr	r2, [pc, #72]	; (801066c <_DoInit+0x4c>)
 8010622:	2303      	movs	r3, #3
 8010624:	6113      	str	r3, [r2, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8010626:	6153      	str	r3, [r2, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8010628:	4911      	ldr	r1, [pc, #68]	; (8010670 <_DoInit+0x50>)
 801062a:	6191      	str	r1, [r2, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 801062c:	4b11      	ldr	r3, [pc, #68]	; (8010674 <_DoInit+0x54>)
 801062e:	61d3      	str	r3, [r2, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8010630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010634:	6213      	str	r3, [r2, #32]
  p->aUp[0].RdOff         = 0u;
 8010636:	2300      	movs	r3, #0
 8010638:	6293      	str	r3, [r2, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 801063a:	6253      	str	r3, [r2, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 801063c:	62d3      	str	r3, [r2, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 801063e:	6611      	str	r1, [r2, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8010640:	490d      	ldr	r1, [pc, #52]	; (8010678 <_DoInit+0x58>)
 8010642:	6651      	str	r1, [r2, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8010644:	2110      	movs	r1, #16
 8010646:	6691      	str	r1, [r2, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8010648:	6713      	str	r3, [r2, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 801064a:	66d3      	str	r3, [r2, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 801064c:	6753      	str	r3, [r2, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 801064e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8010652:	e006      	b.n	8010662 <_DoInit+0x42>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8010654:	f1c3 020f 	rsb	r2, r3, #15
 8010658:	4908      	ldr	r1, [pc, #32]	; (801067c <_DoInit+0x5c>)
 801065a:	5c89      	ldrb	r1, [r1, r2]
 801065c:	4a03      	ldr	r2, [pc, #12]	; (801066c <_DoInit+0x4c>)
 801065e:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8010660:	3301      	adds	r3, #1
 8010662:	2b0f      	cmp	r3, #15
 8010664:	d9f6      	bls.n	8010654 <_DoInit+0x34>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8010666:	f3bf 8f5f 	dmb	sy
}
 801066a:	4770      	bx	lr
 801066c:	20009a48 	.word	0x20009a48
 8010670:	08016ac4 	.word	0x08016ac4
 8010674:	20009b00 	.word	0x20009b00
 8010678:	20009af0 	.word	0x20009af0
 801067c:	08016ad0 	.word	0x08016ad0

08010680 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8010680:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 8010682:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 8010684:	4293      	cmp	r3, r2
 8010686:	d804      	bhi.n	8010692 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8010688:	6881      	ldr	r1, [r0, #8]
 801068a:	1a8a      	subs	r2, r1, r2
 801068c:	4413      	add	r3, r2
 801068e:	1e58      	subs	r0, r3, #1
 8010690:	4770      	bx	lr
  } else {
    r = RdOff - WrOff - 1u;
 8010692:	1a98      	subs	r0, r3, r2
 8010694:	3801      	subs	r0, #1
  }
  return r;
}
 8010696:	4770      	bx	lr

08010698 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8010698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801069c:	4604      	mov	r4, r0
 801069e:	4688      	mov	r8, r1
 80106a0:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
 80106a2:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
 80106a4:	6887      	ldr	r7, [r0, #8]
 80106a6:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
 80106aa:	4591      	cmp	r9, r2
 80106ac:	d909      	bls.n	80106c2 <_WriteNoCheck+0x2a>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80106ae:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80106b0:	4428      	add	r0, r5
 80106b2:	f001 fbd9 	bl	8011e68 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80106b6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80106ba:	4435      	add	r5, r6
 80106bc:	60e5      	str	r5, [r4, #12]
}
 80106be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80106c2:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80106c4:	464a      	mov	r2, r9
 80106c6:	4428      	add	r0, r5
 80106c8:	f001 fbce 	bl	8011e68 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80106cc:	1bed      	subs	r5, r5, r7
 80106ce:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80106d0:	462a      	mov	r2, r5
 80106d2:	eb08 0109 	add.w	r1, r8, r9
 80106d6:	6860      	ldr	r0, [r4, #4]
 80106d8:	f001 fbc6 	bl	8011e68 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80106dc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80106e0:	60e5      	str	r5, [r4, #12]
}
 80106e2:	e7ec      	b.n	80106be <_WriteNoCheck+0x26>

080106e4 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80106e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106e8:	4606      	mov	r6, r0
 80106ea:	4688      	mov	r8, r1
 80106ec:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
 80106ee:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
 80106f0:	f04f 0900 	mov.w	r9, #0
 80106f4:	e01a      	b.n	801072c <_WriteBlocking+0x48>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80106f6:	1b5b      	subs	r3, r3, r5
 80106f8:	1e5a      	subs	r2, r3, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80106fa:	68b3      	ldr	r3, [r6, #8]
 80106fc:	1b5c      	subs	r4, r3, r5
 80106fe:	4294      	cmp	r4, r2
 8010700:	bf28      	it	cs
 8010702:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8010704:	42bc      	cmp	r4, r7
 8010706:	bf28      	it	cs
 8010708:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 801070a:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 801070c:	4622      	mov	r2, r4
 801070e:	4641      	mov	r1, r8
 8010710:	4428      	add	r0, r5
 8010712:	f001 fba9 	bl	8011e68 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8010716:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
 8010718:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
 801071a:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
 801071c:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
 801071e:	68b3      	ldr	r3, [r6, #8]
 8010720:	42ab      	cmp	r3, r5
 8010722:	d00b      	beq.n	801073c <_WriteBlocking+0x58>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8010724:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8010728:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 801072a:	b14f      	cbz	r7, 8010740 <_WriteBlocking+0x5c>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 801072c:	6933      	ldr	r3, [r6, #16]
    if (RdOff > WrOff) {
 801072e:	429d      	cmp	r5, r3
 8010730:	d3e1      	bcc.n	80106f6 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8010732:	68b2      	ldr	r2, [r6, #8]
 8010734:	1b5b      	subs	r3, r3, r5
 8010736:	441a      	add	r2, r3
 8010738:	3a01      	subs	r2, #1
 801073a:	e7de      	b.n	80106fa <_WriteBlocking+0x16>
      WrOff = 0u;
 801073c:	2500      	movs	r5, #0
 801073e:	e7f1      	b.n	8010724 <_WriteBlocking+0x40>
}
 8010740:	4648      	mov	r0, r9
 8010742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08010748 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8010748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801074c:	4604      	mov	r4, r0
 801074e:	4688      	mov	r8, r1
 8010750:	4691      	mov	r9, r2
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8010752:	4b24      	ldr	r3, [pc, #144]	; (80107e4 <SEGGER_RTT_ReadNoLock+0x9c>)
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	b1c3      	cbz	r3, 801078a <SEGGER_RTT_ReadNoLock+0x42>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  pBuffer = (unsigned char*)pData;
  RdOff = pRing->RdOff;
 8010758:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801075c:	4b21      	ldr	r3, [pc, #132]	; (80107e4 <SEGGER_RTT_ReadNoLock+0x9c>)
 801075e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010762:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  WrOff = pRing->WrOff;
 8010764:	6edd      	ldr	r5, [r3, #108]	; 0x6c
  NumBytesRead = 0u;
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8010766:	42af      	cmp	r7, r5
 8010768:	d812      	bhi.n	8010790 <SEGGER_RTT_ReadNoLock+0x48>
  NumBytesRead = 0u;
 801076a:	2600      	movs	r6, #0
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 801076c:	1bed      	subs	r5, r5, r7
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 801076e:	454d      	cmp	r5, r9
 8010770:	bf28      	it	cs
 8010772:	464d      	movcs	r5, r9
  if (NumBytesRem > 0u) {
 8010774:	bb3d      	cbnz	r5, 80107c6 <SEGGER_RTT_ReadNoLock+0x7e>
    pBuffer      += NumBytesRem;
    BufferSize   -= NumBytesRem;
    RdOff        += NumBytesRem;
#endif
  }
  if (NumBytesRead) {
 8010776:	b12e      	cbz	r6, 8010784 <SEGGER_RTT_ReadNoLock+0x3c>
    pRing->RdOff = RdOff;
 8010778:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801077c:	4b19      	ldr	r3, [pc, #100]	; (80107e4 <SEGGER_RTT_ReadNoLock+0x9c>)
 801077e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010782:	671f      	str	r7, [r3, #112]	; 0x70
  }
  //
  return NumBytesRead;
}
 8010784:	4630      	mov	r0, r6
 8010786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INIT();
 801078a:	f7ff ff49 	bl	8010620 <_DoInit>
 801078e:	e7e3      	b.n	8010758 <SEGGER_RTT_ReadNoLock+0x10>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8010790:	4613      	mov	r3, r2
 8010792:	4a14      	ldr	r2, [pc, #80]	; (80107e4 <SEGGER_RTT_ReadNoLock+0x9c>)
 8010794:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8010798:	f8da 6068 	ldr.w	r6, [sl, #104]	; 0x68
 801079c:	1bf6      	subs	r6, r6, r7
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 801079e:	454e      	cmp	r6, r9
 80107a0:	bf28      	it	cs
 80107a2:	464e      	movcs	r6, r9
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80107a4:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80107a8:	4632      	mov	r2, r6
 80107aa:	4439      	add	r1, r7
 80107ac:	4640      	mov	r0, r8
 80107ae:	f001 fb5b 	bl	8011e68 <memcpy>
    pBuffer      += NumBytesRem;
 80107b2:	44b0      	add	r8, r6
    BufferSize   -= NumBytesRem;
 80107b4:	eba9 0906 	sub.w	r9, r9, r6
    RdOff        += NumBytesRem;
 80107b8:	4437      	add	r7, r6
    if (RdOff == pRing->SizeOfBuffer) {
 80107ba:	f8da 3068 	ldr.w	r3, [sl, #104]	; 0x68
 80107be:	42bb      	cmp	r3, r7
 80107c0:	d1d4      	bne.n	801076c <SEGGER_RTT_ReadNoLock+0x24>
      RdOff = 0u;
 80107c2:	2700      	movs	r7, #0
 80107c4:	e7d2      	b.n	801076c <SEGGER_RTT_ReadNoLock+0x24>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80107c6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80107ca:	4b06      	ldr	r3, [pc, #24]	; (80107e4 <SEGGER_RTT_ReadNoLock+0x9c>)
 80107cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107d0:	6e59      	ldr	r1, [r3, #100]	; 0x64
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80107d2:	462a      	mov	r2, r5
 80107d4:	4439      	add	r1, r7
 80107d6:	4640      	mov	r0, r8
 80107d8:	f001 fb46 	bl	8011e68 <memcpy>
    NumBytesRead += NumBytesRem;
 80107dc:	442e      	add	r6, r5
    RdOff        += NumBytesRem;
 80107de:	442f      	add	r7, r5
 80107e0:	e7c9      	b.n	8010776 <SEGGER_RTT_ReadNoLock+0x2e>
 80107e2:	bf00      	nop
 80107e4:	20009a48 	.word	0x20009a48

080107e8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80107e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ea:	460f      	mov	r7, r1
 80107ec:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80107ee:	4b18      	ldr	r3, [pc, #96]	; (8010850 <SEGGER_RTT_WriteNoLock+0x68>)
 80107f0:	1c45      	adds	r5, r0, #1
 80107f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80107f6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80107fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80107fe:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8010802:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010804:	2c01      	cmp	r4, #1
 8010806:	d011      	beq.n	801082c <SEGGER_RTT_WriteNoLock+0x44>
 8010808:	2c02      	cmp	r4, #2
 801080a:	d01c      	beq.n	8010846 <SEGGER_RTT_WriteNoLock+0x5e>
 801080c:	b114      	cbz	r4, 8010814 <SEGGER_RTT_WriteNoLock+0x2c>
 801080e:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
 8010810:	4620      	mov	r0, r4
 8010812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
 8010814:	4628      	mov	r0, r5
 8010816:	f7ff ff33 	bl	8010680 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 801081a:	4286      	cmp	r6, r0
 801081c:	d8f8      	bhi.n	8010810 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
 801081e:	4632      	mov	r2, r6
 8010820:	4639      	mov	r1, r7
 8010822:	4628      	mov	r0, r5
 8010824:	f7ff ff38 	bl	8010698 <_WriteNoCheck>
      Status = NumBytes;
 8010828:	4634      	mov	r4, r6
 801082a:	e7f1      	b.n	8010810 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
 801082c:	4628      	mov	r0, r5
 801082e:	f7ff ff27 	bl	8010680 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 8010832:	4634      	mov	r4, r6
 8010834:	4286      	cmp	r6, r0
 8010836:	bf28      	it	cs
 8010838:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 801083a:	4622      	mov	r2, r4
 801083c:	4639      	mov	r1, r7
 801083e:	4628      	mov	r0, r5
 8010840:	f7ff ff2a 	bl	8010698 <_WriteNoCheck>
    break;
 8010844:	e7e4      	b.n	8010810 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8010846:	4628      	mov	r0, r5
 8010848:	f7ff ff4c 	bl	80106e4 <_WriteBlocking>
 801084c:	4604      	mov	r4, r0
    break;
 801084e:	e7df      	b.n	8010810 <SEGGER_RTT_WriteNoLock+0x28>
 8010850:	20009a48 	.word	0x20009a48

08010854 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8010854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010856:	4604      	mov	r4, r0
 8010858:	460d      	mov	r5, r1
 801085a:	4616      	mov	r6, r2
  unsigned Status;

  INIT();
 801085c:	4b09      	ldr	r3, [pc, #36]	; (8010884 <SEGGER_RTT_Write+0x30>)
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	b16b      	cbz	r3, 801087e <SEGGER_RTT_Write+0x2a>
  SEGGER_RTT_LOCK();
 8010862:	f3ef 8711 	mrs	r7, BASEPRI
 8010866:	f04f 0120 	mov.w	r1, #32
 801086a:	f381 8811 	msr	BASEPRI, r1
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 801086e:	4632      	mov	r2, r6
 8010870:	4629      	mov	r1, r5
 8010872:	4620      	mov	r0, r4
 8010874:	f7ff ffb8 	bl	80107e8 <SEGGER_RTT_WriteNoLock>
  SEGGER_RTT_UNLOCK();
 8010878:	f387 8811 	msr	BASEPRI, r7
  return Status;
}
 801087c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  INIT();
 801087e:	f7ff fecf 	bl	8010620 <_DoInit>
 8010882:	e7ee      	b.n	8010862 <SEGGER_RTT_Write+0xe>
 8010884:	20009a48 	.word	0x20009a48

08010888 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8010888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801088a:	4607      	mov	r7, r0
 801088c:	460e      	mov	r6, r1
 801088e:	4615      	mov	r5, r2
 8010890:	461c      	mov	r4, r3
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8010892:	4b1f      	ldr	r3, [pc, #124]	; (8010910 <SEGGER_RTT_AllocUpBuffer+0x88>)
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d034      	beq.n	8010904 <SEGGER_RTT_AllocUpBuffer+0x7c>
  SEGGER_RTT_LOCK();
 801089a:	f3ef 8211 	mrs	r2, BASEPRI
 801089e:	f04f 0120 	mov.w	r1, #32
 80108a2:	f381 8811 	msr	BASEPRI, r1
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  BufferIndex = 0;
 80108a6:	2000      	movs	r0, #0
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80108a8:	f100 0c01 	add.w	ip, r0, #1
 80108ac:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80108b0:	4b17      	ldr	r3, [pc, #92]	; (8010910 <SEGGER_RTT_AllocUpBuffer+0x88>)
 80108b2:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 80108b6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80108ba:	b123      	cbz	r3, 80108c6 <SEGGER_RTT_AllocUpBuffer+0x3e>
      break;
    }
    BufferIndex++;
 80108bc:	3001      	adds	r0, #1
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80108be:	4b14      	ldr	r3, [pc, #80]	; (8010910 <SEGGER_RTT_AllocUpBuffer+0x88>)
 80108c0:	691b      	ldr	r3, [r3, #16]
 80108c2:	4283      	cmp	r3, r0
 80108c4:	dcf0      	bgt.n	80108a8 <SEGGER_RTT_AllocUpBuffer+0x20>
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80108c6:	4b12      	ldr	r3, [pc, #72]	; (8010910 <SEGGER_RTT_AllocUpBuffer+0x88>)
 80108c8:	691b      	ldr	r3, [r3, #16]
 80108ca:	4283      	cmp	r3, r0
 80108cc:	dd1d      	ble.n	801090a <SEGGER_RTT_AllocUpBuffer+0x82>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80108ce:	4b10      	ldr	r3, [pc, #64]	; (8010910 <SEGGER_RTT_AllocUpBuffer+0x88>)
 80108d0:	1c41      	adds	r1, r0, #1
 80108d2:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 80108d6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80108da:	f843 700c 	str.w	r7, [r3, ip]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80108de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80108e2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80108e6:	604e      	str	r6, [r1, #4]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80108e8:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80108ec:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80108f0:	621d      	str	r5, [r3, #32]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80108f2:	2100      	movs	r1, #0
 80108f4:	6299      	str	r1, [r3, #40]	; 0x28
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80108f6:	6259      	str	r1, [r3, #36]	; 0x24
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80108f8:	62dc      	str	r4, [r3, #44]	; 0x2c
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80108fa:	f3bf 8f5f 	dmb	sy
  } else {
    BufferIndex = -1;
  }
  SEGGER_RTT_UNLOCK();
 80108fe:	f382 8811 	msr	BASEPRI, r2
  return BufferIndex;
}
 8010902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  INIT();
 8010904:	f7ff fe8c 	bl	8010620 <_DoInit>
 8010908:	e7c7      	b.n	801089a <SEGGER_RTT_AllocUpBuffer+0x12>
    BufferIndex = -1;
 801090a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801090e:	e7f6      	b.n	80108fe <SEGGER_RTT_AllocUpBuffer+0x76>
 8010910:	20009a48 	.word	0x20009a48

08010914 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8010914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010918:	4604      	mov	r4, r0
 801091a:	4688      	mov	r8, r1
 801091c:	4617      	mov	r7, r2
 801091e:	461e      	mov	r6, r3
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8010920:	4b17      	ldr	r3, [pc, #92]	; (8010980 <SEGGER_RTT_ConfigDownBuffer+0x6c>)
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	b333      	cbz	r3, 8010974 <SEGGER_RTT_ConfigDownBuffer+0x60>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8010926:	2c02      	cmp	r4, #2
 8010928:	d827      	bhi.n	801097a <SEGGER_RTT_ConfigDownBuffer+0x66>
    SEGGER_RTT_LOCK();
 801092a:	f3ef 8011 	mrs	r0, BASEPRI
 801092e:	f04f 0120 	mov.w	r1, #32
 8010932:	f381 8811 	msr	BASEPRI, r1
    pDown = &pRTTCB->aDown[BufferIndex];
    if (BufferIndex) {
 8010936:	b17c      	cbz	r4, 8010958 <SEGGER_RTT_ConfigDownBuffer+0x44>
      pDown->sName        = sName;
 8010938:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801093c:	4d10      	ldr	r5, [pc, #64]	; (8010980 <SEGGER_RTT_ConfigDownBuffer+0x6c>)
 801093e:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8010942:	f8cc 8060 	str.w	r8, [ip, #96]	; 0x60
      pDown->pBuffer      = (char*)pBuffer;
 8010946:	f8cc 7064 	str.w	r7, [ip, #100]	; 0x64
      pDown->SizeOfBuffer = BufferSize;
 801094a:	f8cc 6068 	str.w	r6, [ip, #104]	; 0x68
      pDown->RdOff        = 0u;
 801094e:	2300      	movs	r3, #0
 8010950:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
      pDown->WrOff        = 0u;
 8010954:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
    }
    pDown->Flags          = Flags;
 8010958:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801095c:	4b08      	ldr	r3, [pc, #32]	; (8010980 <SEGGER_RTT_ConfigDownBuffer+0x6c>)
 801095e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010962:	9a06      	ldr	r2, [sp, #24]
 8010964:	675a      	str	r2, [r3, #116]	; 0x74
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8010966:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 801096a:	f380 8811 	msr	BASEPRI, r0
    r =  0;
 801096e:	2000      	movs	r0, #0
  } else {
    r = -1;
  }
  return r;
}
 8010970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  INIT();
 8010974:	f7ff fe54 	bl	8010620 <_DoInit>
 8010978:	e7d5      	b.n	8010926 <SEGGER_RTT_ConfigDownBuffer+0x12>
    r = -1;
 801097a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return r;
 801097e:	e7f7      	b.n	8010970 <SEGGER_RTT_ConfigDownBuffer+0x5c>
 8010980:	20009a48 	.word	0x20009a48

08010984 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8010984:	4684      	mov	ip, r0
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
  if (pText != NULL) {
 8010986:	460b      	mov	r3, r1
 8010988:	b329      	cbz	r1, 80109d6 <_EncodeStr+0x52>
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 801098a:	b410      	push	{r4}
  Len = 0;
 801098c:	2100      	movs	r1, #0
 801098e:	e000      	b.n	8010992 <_EncodeStr+0xe>
    while(*(pText + Len) != 0) {
      Len++;
 8010990:	3101      	adds	r1, #1
    while(*(pText + Len) != 0) {
 8010992:	5c5c      	ldrb	r4, [r3, r1]
 8010994:	2c00      	cmp	r4, #0
 8010996:	d1fb      	bne.n	8010990 <_EncodeStr+0xc>
    }
    if (Len > Limit) {
 8010998:	4291      	cmp	r1, r2
 801099a:	d800      	bhi.n	801099e <_EncodeStr+0x1a>
 801099c:	460a      	mov	r2, r1
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 801099e:	2afe      	cmp	r2, #254	; 0xfe
 80109a0:	d804      	bhi.n	80109ac <_EncodeStr+0x28>
    *pPayload++ = (U8)Len;
 80109a2:	4660      	mov	r0, ip
 80109a4:	f800 2b01 	strb.w	r2, [r0], #1
    *pPayload++ = ((Len >> 8) & 255);
  }
  //
  // copy string
  //
  n = 0;
 80109a8:	2100      	movs	r1, #0
  while (n < Len) {
 80109aa:	e00f      	b.n	80109cc <_EncodeStr+0x48>
    *pPayload++ = 255;
 80109ac:	21ff      	movs	r1, #255	; 0xff
 80109ae:	f88c 1000 	strb.w	r1, [ip]
    *pPayload++ = (Len & 255);
 80109b2:	f88c 2001 	strb.w	r2, [ip, #1]
    *pPayload++ = ((Len >> 8) & 255);
 80109b6:	0a11      	lsrs	r1, r2, #8
 80109b8:	f10c 0003 	add.w	r0, ip, #3
 80109bc:	f88c 1002 	strb.w	r1, [ip, #2]
 80109c0:	e7f2      	b.n	80109a8 <_EncodeStr+0x24>
    *pPayload++ = *pText++;
 80109c2:	f813 cb01 	ldrb.w	ip, [r3], #1
 80109c6:	f800 cb01 	strb.w	ip, [r0], #1
    n++;
 80109ca:	3101      	adds	r1, #1
  while (n < Len) {
 80109cc:	4291      	cmp	r1, r2
 80109ce:	d3f8      	bcc.n	80109c2 <_EncodeStr+0x3e>
  }
  return pPayload;
}
 80109d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109d4:	4770      	bx	lr
  Len = 0;
 80109d6:	2200      	movs	r2, #0
    *pPayload++ = (U8)Len;
 80109d8:	f800 2b01 	strb.w	r2, [r0], #1
  n = 0;
 80109dc:	2100      	movs	r1, #0
 80109de:	e004      	b.n	80109ea <_EncodeStr+0x66>
    *pPayload++ = *pText++;
 80109e0:	f813 cb01 	ldrb.w	ip, [r3], #1
 80109e4:	f800 cb01 	strb.w	ip, [r0], #1
    n++;
 80109e8:	3101      	adds	r1, #1
  while (n < Len) {
 80109ea:	4291      	cmp	r1, r2
 80109ec:	d3f8      	bcc.n	80109e0 <_EncodeStr+0x5c>
 80109ee:	4770      	bx	lr

080109f0 <_PreparePacket>:
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
}
 80109f0:	3007      	adds	r0, #7
 80109f2:	4770      	bx	lr

080109f4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80109f4:	b510      	push	{r4, lr}
 80109f6:	b084      	sub	sp, #16
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80109f8:	2301      	movs	r3, #1
 80109fa:	f88d 3004 	strb.w	r3, [sp, #4]
  pPayload   = &aPacket[1];
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80109fe:	4b18      	ldr	r3, [pc, #96]	; (8010a60 <_TrySendOverflowPacket+0x6c>)
 8010a00:	695b      	ldr	r3, [r3, #20]
 8010a02:	f10d 0205 	add.w	r2, sp, #5
 8010a06:	e004      	b.n	8010a12 <_TrySendOverflowPacket+0x1e>
 8010a08:	f063 017f 	orn	r1, r3, #127	; 0x7f
 8010a0c:	f802 1b01 	strb.w	r1, [r2], #1
 8010a10:	09db      	lsrs	r3, r3, #7
 8010a12:	2b7f      	cmp	r3, #127	; 0x7f
 8010a14:	d8f8      	bhi.n	8010a08 <_TrySendOverflowPacket+0x14>
 8010a16:	f802 3b01 	strb.w	r3, [r2], #1
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8010a1a:	4b12      	ldr	r3, [pc, #72]	; (8010a64 <_TrySendOverflowPacket+0x70>)
 8010a1c:	685c      	ldr	r4, [r3, #4]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8010a1e:	4b10      	ldr	r3, [pc, #64]	; (8010a60 <_TrySendOverflowPacket+0x6c>)
 8010a20:	68db      	ldr	r3, [r3, #12]
 8010a22:	1ae3      	subs	r3, r4, r3
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8010a24:	e004      	b.n	8010a30 <_TrySendOverflowPacket+0x3c>
 8010a26:	f063 017f 	orn	r1, r3, #127	; 0x7f
 8010a2a:	f802 1b01 	strb.w	r1, [r2], #1
 8010a2e:	09db      	lsrs	r3, r3, #7
 8010a30:	2b7f      	cmp	r3, #127	; 0x7f
 8010a32:	d8f8      	bhi.n	8010a26 <_TrySendOverflowPacket+0x32>
 8010a34:	f802 3b01 	strb.w	r3, [r2], #1
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8010a38:	a901      	add	r1, sp, #4
 8010a3a:	1a52      	subs	r2, r2, r1
 8010a3c:	4b08      	ldr	r3, [pc, #32]	; (8010a60 <_TrySendOverflowPacket+0x6c>)
 8010a3e:	7858      	ldrb	r0, [r3, #1]
 8010a40:	f7ef fbee 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8010a44:	b130      	cbz	r0, 8010a54 <_TrySendOverflowPacket+0x60>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8010a46:	4b06      	ldr	r3, [pc, #24]	; (8010a60 <_TrySendOverflowPacket+0x6c>)
 8010a48:	60dc      	str	r4, [r3, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8010a4a:	781a      	ldrb	r2, [r3, #0]
 8010a4c:	3a01      	subs	r2, #1
 8010a4e:	701a      	strb	r2, [r3, #0]
  } else {
    _SYSVIEW_Globals.DropCount++;
  }
  //
  return Status;
}
 8010a50:	b004      	add	sp, #16
 8010a52:	bd10      	pop	{r4, pc}
    _SYSVIEW_Globals.DropCount++;
 8010a54:	4a02      	ldr	r2, [pc, #8]	; (8010a60 <_TrySendOverflowPacket+0x6c>)
 8010a56:	6953      	ldr	r3, [r2, #20]
 8010a58:	3301      	adds	r3, #1
 8010a5a:	6153      	str	r3, [r2, #20]
  return Status;
 8010a5c:	e7f8      	b.n	8010a50 <_TrySendOverflowPacket+0x5c>
 8010a5e:	bf00      	nop
 8010a60:	20009f0c 	.word	0x20009f0c
 8010a64:	e0001000 	.word	0xe0001000

08010a68 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8010a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a6c:	b082      	sub	sp, #8
 8010a6e:	4607      	mov	r7, r0
 8010a70:	460e      	mov	r6, r1
 8010a72:	4690      	mov	r8, r2
 8010a74:	461d      	mov	r5, r3
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8010a76:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8010ad0 <SEGGER_SYSVIEW_Init+0x68>
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010a80:	490f      	ldr	r1, [pc, #60]	; (8010ac0 <SEGGER_SYSVIEW_Init+0x58>)
 8010a82:	4648      	mov	r0, r9
 8010a84:	f7ff ff00 	bl	8010888 <SEGGER_RTT_AllocUpBuffer>
 8010a88:	b2c0      	uxtb	r0, r0
 8010a8a:	4c0e      	ldr	r4, [pc, #56]	; (8010ac4 <SEGGER_SYSVIEW_Init+0x5c>)
 8010a8c:	7060      	strb	r0, [r4, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8010a8e:	7620      	strb	r0, [r4, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8010a90:	f04f 0a00 	mov.w	sl, #0
 8010a94:	f8cd a000 	str.w	sl, [sp]
 8010a98:	2308      	movs	r3, #8
 8010a9a:	4a0b      	ldr	r2, [pc, #44]	; (8010ac8 <SEGGER_SYSVIEW_Init+0x60>)
 8010a9c:	4649      	mov	r1, r9
 8010a9e:	f7ff ff39 	bl	8010914 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8010aa2:	f8c4 a010 	str.w	sl, [r4, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8010aa6:	4b09      	ldr	r3, [pc, #36]	; (8010acc <SEGGER_SYSVIEW_Init+0x64>)
 8010aa8:	685b      	ldr	r3, [r3, #4]
 8010aaa:	60e3      	str	r3, [r4, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8010aac:	f8c4 8020 	str.w	r8, [r4, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8010ab0:	6067      	str	r7, [r4, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8010ab2:	60a6      	str	r6, [r4, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8010ab4:	6265      	str	r5, [r4, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8010ab6:	f884 a000 	strb.w	sl, [r4]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8010aba:	b002      	add	sp, #8
 8010abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ac0:	20009f34 	.word	0x20009f34
 8010ac4:	20009f0c 	.word	0x20009f0c
 8010ac8:	20009f00 	.word	0x20009f00
 8010acc:	e0001000 	.word	0xe0001000
 8010ad0:	08016ae4 	.word	0x08016ae4

08010ad4 <SEGGER_SYSVIEW_SetRAMBase>:
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8010ad4:	4b01      	ldr	r3, [pc, #4]	; (8010adc <SEGGER_SYSVIEW_SetRAMBase+0x8>)
 8010ad6:	6118      	str	r0, [r3, #16]
}
 8010ad8:	4770      	bx	lr
 8010ada:	bf00      	nop
 8010adc:	20009f0c 	.word	0x20009f0c

08010ae0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8010ae0:	b508      	push	{r3, lr}
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8010ae2:	4b03      	ldr	r3, [pc, #12]	; (8010af0 <SEGGER_SYSVIEW_SendTaskList+0x10>)
 8010ae4:	6a1b      	ldr	r3, [r3, #32]
 8010ae6:	b113      	cbz	r3, 8010aee <SEGGER_SYSVIEW_SendTaskList+0xe>
 8010ae8:	685b      	ldr	r3, [r3, #4]
 8010aea:	b103      	cbz	r3, 8010aee <SEGGER_SYSVIEW_SendTaskList+0xe>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8010aec:	4798      	blx	r3
  }
}
 8010aee:	bd08      	pop	{r3, pc}
 8010af0:	20009f0c 	.word	0x20009f0c

08010af4 <SEGGER_SYSVIEW_ShrinkId>:
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
  return SHRINK_ID(Id);
 8010af4:	4b01      	ldr	r3, [pc, #4]	; (8010afc <SEGGER_SYSVIEW_ShrinkId+0x8>)
 8010af6:	691b      	ldr	r3, [r3, #16]
}
 8010af8:	1ac0      	subs	r0, r0, r3
 8010afa:	4770      	bx	lr
 8010afc:	20009f0c 	.word	0x20009f0c

08010b00 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8010b00:	b510      	push	{r4, lr}
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8010b02:	4b06      	ldr	r3, [pc, #24]	; (8010b1c <SEGGER_SYSVIEW_SendModuleDescription+0x1c>)
 8010b04:	681c      	ldr	r4, [r3, #0]
 8010b06:	b924      	cbnz	r4, 8010b12 <SEGGER_SYSVIEW_SendModuleDescription+0x12>
        pModule->pfSendModuleDesc();
      }
      pModule = pModule->pNext;
    } while (pModule);
  }
}
 8010b08:	bd10      	pop	{r4, pc}
        pModule->pfSendModuleDesc();
 8010b0a:	4798      	blx	r3
      pModule = pModule->pNext;
 8010b0c:	6924      	ldr	r4, [r4, #16]
    } while (pModule);
 8010b0e:	2c00      	cmp	r4, #0
 8010b10:	d0fa      	beq.n	8010b08 <SEGGER_SYSVIEW_SendModuleDescription+0x8>
      if (pModule->pfSendModuleDesc) {
 8010b12:	68e3      	ldr	r3, [r4, #12]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d1f8      	bne.n	8010b0a <SEGGER_SYSVIEW_SendModuleDescription+0xa>
 8010b18:	e7f8      	b.n	8010b0c <SEGGER_SYSVIEW_SendModuleDescription+0xc>
 8010b1a:	bf00      	nop
 8010b1c:	2000b018 	.word	0x2000b018

08010b20 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8010b20:	b510      	push	{r4, lr}
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8010b22:	f3ef 8411 	mrs	r4, BASEPRI
 8010b26:	f04f 0120 	mov.w	r1, #32
 8010b2a:	f381 8811 	msr	BASEPRI, r1
 8010b2e:	480b      	ldr	r0, [pc, #44]	; (8010b5c <SEGGER_SYSVIEW_SendNumModules+0x3c>)
 8010b30:	f7ff ff5e 	bl	80109f0 <_PreparePacket>
  pPayload = pPayloadStart;
  ENCODE_U32(pPayload, _NumModules);
 8010b34:	4b0a      	ldr	r3, [pc, #40]	; (8010b60 <SEGGER_SYSVIEW_SendNumModules+0x40>)
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	4601      	mov	r1, r0
 8010b3a:	e004      	b.n	8010b46 <SEGGER_SYSVIEW_SendNumModules+0x26>
 8010b3c:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8010b40:	f801 2b01 	strb.w	r2, [r1], #1
 8010b44:	09db      	lsrs	r3, r3, #7
 8010b46:	2b7f      	cmp	r3, #127	; 0x7f
 8010b48:	d8f8      	bhi.n	8010b3c <SEGGER_SYSVIEW_SendNumModules+0x1c>
 8010b4a:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8010b4e:	221b      	movs	r2, #27
 8010b50:	f000 f8b0 	bl	8010cb4 <_SendPacket>
  RECORD_END();
 8010b54:	f384 8811 	msr	BASEPRI, r4
}
 8010b58:	bd10      	pop	{r4, pc}
 8010b5a:	bf00      	nop
 8010b5c:	2000af34 	.word	0x2000af34
 8010b60:	20009f08 	.word	0x20009f08

08010b64 <SEGGER_SYSVIEW_Start>:
void SEGGER_SYSVIEW_Start(void) {
 8010b64:	b538      	push	{r3, r4, r5, lr}
    _SYSVIEW_Globals.EnableState = 1;
 8010b66:	4d29      	ldr	r5, [pc, #164]	; (8010c0c <SEGGER_SYSVIEW_Start+0xa8>)
 8010b68:	2301      	movs	r3, #1
 8010b6a:	702b      	strb	r3, [r5, #0]
    SEGGER_SYSVIEW_LOCK();
 8010b6c:	f3ef 8411 	mrs	r4, BASEPRI
 8010b70:	f04f 0120 	mov.w	r1, #32
 8010b74:	f381 8811 	msr	BASEPRI, r1
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8010b78:	220a      	movs	r2, #10
 8010b7a:	4925      	ldr	r1, [pc, #148]	; (8010c10 <SEGGER_SYSVIEW_Start+0xac>)
 8010b7c:	7868      	ldrb	r0, [r5, #1]
 8010b7e:	f7ef fb4f 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8010b82:	f384 8811 	msr	BASEPRI, r4
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8010b86:	200a      	movs	r0, #10
 8010b88:	f000 f95a 	bl	8010e40 <SEGGER_SYSVIEW_RecordVoid>
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8010b8c:	f3ef 8411 	mrs	r4, BASEPRI
 8010b90:	f04f 0120 	mov.w	r1, #32
 8010b94:	f381 8811 	msr	BASEPRI, r1
 8010b98:	481e      	ldr	r0, [pc, #120]	; (8010c14 <SEGGER_SYSVIEW_Start+0xb0>)
 8010b9a:	f7ff ff29 	bl	80109f0 <_PreparePacket>
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8010b9e:	686a      	ldr	r2, [r5, #4]
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	e004      	b.n	8010bae <SEGGER_SYSVIEW_Start+0x4a>
 8010ba4:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8010ba8:	f803 1b01 	strb.w	r1, [r3], #1
 8010bac:	09d2      	lsrs	r2, r2, #7
 8010bae:	2a7f      	cmp	r2, #127	; 0x7f
 8010bb0:	d8f8      	bhi.n	8010ba4 <SEGGER_SYSVIEW_Start+0x40>
 8010bb2:	f803 2b01 	strb.w	r2, [r3], #1
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8010bb6:	4a15      	ldr	r2, [pc, #84]	; (8010c0c <SEGGER_SYSVIEW_Start+0xa8>)
 8010bb8:	6892      	ldr	r2, [r2, #8]
 8010bba:	e004      	b.n	8010bc6 <SEGGER_SYSVIEW_Start+0x62>
 8010bbc:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8010bc0:	f803 1b01 	strb.w	r1, [r3], #1
 8010bc4:	09d2      	lsrs	r2, r2, #7
 8010bc6:	2a7f      	cmp	r2, #127	; 0x7f
 8010bc8:	d8f8      	bhi.n	8010bbc <SEGGER_SYSVIEW_Start+0x58>
 8010bca:	f803 2b01 	strb.w	r2, [r3], #1
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8010bce:	4a0f      	ldr	r2, [pc, #60]	; (8010c0c <SEGGER_SYSVIEW_Start+0xa8>)
 8010bd0:	6912      	ldr	r2, [r2, #16]
 8010bd2:	e004      	b.n	8010bde <SEGGER_SYSVIEW_Start+0x7a>
 8010bd4:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8010bd8:	f803 1b01 	strb.w	r1, [r3], #1
 8010bdc:	09d2      	lsrs	r2, r2, #7
 8010bde:	2a7f      	cmp	r2, #127	; 0x7f
 8010be0:	d8f8      	bhi.n	8010bd4 <SEGGER_SYSVIEW_Start+0x70>
 8010be2:	4619      	mov	r1, r3
 8010be4:	f801 2b02 	strb.w	r2, [r1], #2
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8010be8:	2200      	movs	r2, #0
 8010bea:	705a      	strb	r2, [r3, #1]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8010bec:	2218      	movs	r2, #24
 8010bee:	f000 f861 	bl	8010cb4 <_SendPacket>
      RECORD_END();
 8010bf2:	f384 8811 	msr	BASEPRI, r4
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8010bf6:	4b05      	ldr	r3, [pc, #20]	; (8010c0c <SEGGER_SYSVIEW_Start+0xa8>)
 8010bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bfa:	b103      	cbz	r3, 8010bfe <SEGGER_SYSVIEW_Start+0x9a>
      _SYSVIEW_Globals.pfSendSysDesc();
 8010bfc:	4798      	blx	r3
    SEGGER_SYSVIEW_RecordSystime();
 8010bfe:	f000 f97d 	bl	8010efc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8010c02:	f7ff ff6d 	bl	8010ae0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8010c06:	f7ff ff8b 	bl	8010b20 <SEGGER_SYSVIEW_SendNumModules>
}
 8010c0a:	bd38      	pop	{r3, r4, r5, pc}
 8010c0c:	20009f0c 	.word	0x20009f0c
 8010c10:	08016aec 	.word	0x08016aec
 8010c14:	2000af34 	.word	0x2000af34

08010c18 <_HandleIncomingPacket>:
static void _HandleIncomingPacket(void) {
 8010c18:	b500      	push	{lr}
 8010c1a:	b083      	sub	sp, #12
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8010c1c:	2201      	movs	r2, #1
 8010c1e:	f10d 0107 	add.w	r1, sp, #7
 8010c22:	4b23      	ldr	r3, [pc, #140]	; (8010cb0 <_HandleIncomingPacket+0x98>)
 8010c24:	7e18      	ldrb	r0, [r3, #24]
 8010c26:	f7ff fd8f 	bl	8010748 <SEGGER_RTT_ReadNoLock>
  if (Status > 0) {
 8010c2a:	b308      	cbz	r0, 8010c70 <_HandleIncomingPacket+0x58>
    switch (Cmd) {
 8010c2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010c30:	2b07      	cmp	r3, #7
 8010c32:	d80a      	bhi.n	8010c4a <_HandleIncomingPacket+0x32>
 8010c34:	b25a      	sxtb	r2, r3
 8010c36:	b382      	cbz	r2, 8010c9a <_HandleIncomingPacket+0x82>
 8010c38:	1e5a      	subs	r2, r3, #1
 8010c3a:	2a06      	cmp	r2, #6
 8010c3c:	d82d      	bhi.n	8010c9a <_HandleIncomingPacket+0x82>
 8010c3e:	e8df f002 	tbb	[pc, r2]
 8010c42:	1a15      	.short	0x1a15
 8010c44:	2623201d 	.word	0x2623201d
 8010c48:	29          	.byte	0x29
 8010c49:	00          	.byte	0x00
 8010c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8010c4c:	d010      	beq.n	8010c70 <_HandleIncomingPacket+0x58>
 8010c4e:	2b80      	cmp	r3, #128	; 0x80
 8010c50:	d123      	bne.n	8010c9a <_HandleIncomingPacket+0x82>
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8010c52:	2201      	movs	r2, #1
 8010c54:	f10d 0107 	add.w	r1, sp, #7
 8010c58:	4b15      	ldr	r3, [pc, #84]	; (8010cb0 <_HandleIncomingPacket+0x98>)
 8010c5a:	7e18      	ldrb	r0, [r3, #24]
 8010c5c:	f7ff fd74 	bl	8010748 <SEGGER_RTT_ReadNoLock>
      if (Status > 0) {
 8010c60:	b130      	cbz	r0, 8010c70 <_HandleIncomingPacket+0x58>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8010c62:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010c66:	f000 fb39 	bl	80112dc <SEGGER_SYSVIEW_SendModule>
 8010c6a:	e001      	b.n	8010c70 <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_Start();
 8010c6c:	f7ff ff7a 	bl	8010b64 <SEGGER_SYSVIEW_Start>
}
 8010c70:	b003      	add	sp, #12
 8010c72:	f85d fb04 	ldr.w	pc, [sp], #4
      SEGGER_SYSVIEW_Stop();
 8010c76:	f000 f9d9 	bl	801102c <SEGGER_SYSVIEW_Stop>
      break;
 8010c7a:	e7f9      	b.n	8010c70 <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_RecordSystime();
 8010c7c:	f000 f93e 	bl	8010efc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8010c80:	e7f6      	b.n	8010c70 <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_SendTaskList();
 8010c82:	f7ff ff2d 	bl	8010ae0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8010c86:	e7f3      	b.n	8010c70 <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_GetSysDesc();
 8010c88:	f000 f9ec 	bl	8011064 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8010c8c:	e7f0      	b.n	8010c70 <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_SendNumModules();
 8010c8e:	f7ff ff47 	bl	8010b20 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8010c92:	e7ed      	b.n	8010c70 <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_SendModuleDescription();
 8010c94:	f7ff ff34 	bl	8010b00 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8010c98:	e7ea      	b.n	8010c70 <_HandleIncomingPacket+0x58>
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8010c9a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010c9e:	d0e7      	beq.n	8010c70 <_HandleIncomingPacket+0x58>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	f10d 0107 	add.w	r1, sp, #7
 8010ca6:	4b02      	ldr	r3, [pc, #8]	; (8010cb0 <_HandleIncomingPacket+0x98>)
 8010ca8:	7e18      	ldrb	r0, [r3, #24]
 8010caa:	f7ff fd4d 	bl	8010748 <SEGGER_RTT_ReadNoLock>
}
 8010cae:	e7df      	b.n	8010c70 <_HandleIncomingPacket+0x58>
 8010cb0:	20009f0c 	.word	0x20009f0c

08010cb4 <_SendPacket>:
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8010cb4:	b570      	push	{r4, r5, r6, lr}
 8010cb6:	4606      	mov	r6, r0
 8010cb8:	460c      	mov	r4, r1
 8010cba:	4615      	mov	r5, r2
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8010cbc:	4b5d      	ldr	r3, [pc, #372]	; (8010e34 <_SendPacket+0x180>)
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	2b01      	cmp	r3, #1
 8010cc2:	d004      	beq.n	8010cce <_SendPacket+0x1a>
  if (_SYSVIEW_Globals.EnableState == 0) {
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	f000 8094 	beq.w	8010df2 <_SendPacket+0x13e>
  if (_SYSVIEW_Globals.EnableState == 2) {
 8010cca:	2b02      	cmp	r3, #2
 8010ccc:	d013      	beq.n	8010cf6 <_SendPacket+0x42>
  if (EventId < 32) {
 8010cce:	2d1f      	cmp	r5, #31
 8010cd0:	d806      	bhi.n	8010ce0 <_SendPacket+0x2c>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8010cd2:	4b58      	ldr	r3, [pc, #352]	; (8010e34 <_SendPacket+0x180>)
 8010cd4:	69db      	ldr	r3, [r3, #28]
 8010cd6:	40eb      	lsrs	r3, r5
 8010cd8:	f013 0f01 	tst.w	r3, #1
 8010cdc:	f040 8089 	bne.w	8010df2 <_SendPacket+0x13e>
  if (EventId < 24) {
 8010ce0:	2d17      	cmp	r5, #23
 8010ce2:	d80f      	bhi.n	8010d04 <_SendPacket+0x50>
    *--pStartPacket = (U8)EventId;
 8010ce4:	1e71      	subs	r1, r6, #1
 8010ce6:	f806 5c01 	strb.w	r5, [r6, #-1]
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8010cea:	4b53      	ldr	r3, [pc, #332]	; (8010e38 <_SendPacket+0x184>)
 8010cec:	685d      	ldr	r5, [r3, #4]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8010cee:	4b51      	ldr	r3, [pc, #324]	; (8010e34 <_SendPacket+0x180>)
 8010cf0:	68db      	ldr	r3, [r3, #12]
 8010cf2:	1aeb      	subs	r3, r5, r3
  ENCODE_U32(pEndPacket, Delta);
 8010cf4:	e071      	b.n	8010dda <_SendPacket+0x126>
    _TrySendOverflowPacket();
 8010cf6:	f7ff fe7d 	bl	80109f4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8010cfa:	4b4e      	ldr	r3, [pc, #312]	; (8010e34 <_SendPacket+0x180>)
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d177      	bne.n	8010df2 <_SendPacket+0x13e>
Send:
 8010d02:	e7e4      	b.n	8010cce <_SendPacket+0x1a>
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8010d04:	1ba3      	subs	r3, r4, r6
    if (NumBytes > 127) {
 8010d06:	2b7f      	cmp	r3, #127	; 0x7f
 8010d08:	d90e      	bls.n	8010d28 <_SendPacket+0x74>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8010d0a:	f3c3 12c7 	ubfx	r2, r3, #7, #8
 8010d0e:	f806 2c01 	strb.w	r2, [r6, #-1]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8010d12:	1eb2      	subs	r2, r6, #2
 8010d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d18:	f806 3c02 	strb.w	r3, [r6, #-2]
    if (EventId < 127) {
 8010d1c:	2d7e      	cmp	r5, #126	; 0x7e
 8010d1e:	d807      	bhi.n	8010d30 <_SendPacket+0x7c>
      *--pStartPacket = (U8)EventId;
 8010d20:	1e51      	subs	r1, r2, #1
 8010d22:	f802 5c01 	strb.w	r5, [r2, #-1]
 8010d26:	e7e0      	b.n	8010cea <_SendPacket+0x36>
      *--pStartPacket = (U8)NumBytes;
 8010d28:	1e72      	subs	r2, r6, #1
 8010d2a:	f806 3c01 	strb.w	r3, [r6, #-1]
 8010d2e:	e7f5      	b.n	8010d1c <_SendPacket+0x68>
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8010d30:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 8010d34:	d209      	bcs.n	8010d4a <_SendPacket+0x96>
        *--pStartPacket = (U8)(EventId >>  7);
 8010d36:	f3c5 13c7 	ubfx	r3, r5, #7, #8
 8010d3a:	f802 3c01 	strb.w	r3, [r2, #-1]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010d3e:	1e91      	subs	r1, r2, #2
 8010d40:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8010d44:	f802 5c02 	strb.w	r5, [r2, #-2]
 8010d48:	e7cf      	b.n	8010cea <_SendPacket+0x36>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8010d4a:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8010d4e:	d20e      	bcs.n	8010d6e <_SendPacket+0xba>
        *--pStartPacket = (U8)(EventId >> 14);
 8010d50:	f3c5 3387 	ubfx	r3, r5, #14, #8
 8010d54:	f802 3c01 	strb.w	r3, [r2, #-1]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8010d58:	09eb      	lsrs	r3, r5, #7
 8010d5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d5e:	f802 3c02 	strb.w	r3, [r2, #-2]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010d62:	1ed1      	subs	r1, r2, #3
 8010d64:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8010d68:	f802 5c03 	strb.w	r5, [r2, #-3]
 8010d6c:	e7bd      	b.n	8010cea <_SendPacket+0x36>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8010d6e:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8010d72:	d213      	bcs.n	8010d9c <_SendPacket+0xe8>
        *--pStartPacket = (U8)(EventId >> 21);
 8010d74:	f3c5 5347 	ubfx	r3, r5, #21, #8
 8010d78:	f802 3c01 	strb.w	r3, [r2, #-1]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8010d7c:	0bab      	lsrs	r3, r5, #14
 8010d7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d82:	f802 3c02 	strb.w	r3, [r2, #-2]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8010d86:	09eb      	lsrs	r3, r5, #7
 8010d88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d8c:	f802 3c03 	strb.w	r3, [r2, #-3]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010d90:	1f11      	subs	r1, r2, #4
 8010d92:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8010d96:	f802 5c04 	strb.w	r5, [r2, #-4]
 8010d9a:	e7a6      	b.n	8010cea <_SendPacket+0x36>
        *--pStartPacket = (U8)(EventId >> 28);
 8010d9c:	0f2b      	lsrs	r3, r5, #28
 8010d9e:	f802 3c01 	strb.w	r3, [r2, #-1]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8010da2:	0d6b      	lsrs	r3, r5, #21
 8010da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010da8:	f802 3c02 	strb.w	r3, [r2, #-2]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8010dac:	0bab      	lsrs	r3, r5, #14
 8010dae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010db2:	f802 3c03 	strb.w	r3, [r2, #-3]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8010db6:	09eb      	lsrs	r3, r5, #7
 8010db8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010dbc:	f802 3c04 	strb.w	r3, [r2, #-4]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010dc0:	1f51      	subs	r1, r2, #5
 8010dc2:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8010dc6:	f802 5c05 	strb.w	r5, [r2, #-5]
 8010dca:	e78e      	b.n	8010cea <_SendPacket+0x36>
  ENCODE_U32(pEndPacket, Delta);
 8010dcc:	4622      	mov	r2, r4
 8010dce:	f063 007f 	orn	r0, r3, #127	; 0x7f
 8010dd2:	f802 0b01 	strb.w	r0, [r2], #1
 8010dd6:	09db      	lsrs	r3, r3, #7
 8010dd8:	4614      	mov	r4, r2
 8010dda:	2b7f      	cmp	r3, #127	; 0x7f
 8010ddc:	d8f6      	bhi.n	8010dcc <_SendPacket+0x118>
 8010dde:	f804 3b01 	strb.w	r3, [r4], #1
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8010de2:	1a62      	subs	r2, r4, r1
 8010de4:	4b13      	ldr	r3, [pc, #76]	; (8010e34 <_SendPacket+0x180>)
 8010de6:	7858      	ldrb	r0, [r3, #1]
 8010de8:	f7ef fa1a 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
  if (Status) {
 8010dec:	b1a0      	cbz	r0, 8010e18 <_SendPacket+0x164>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8010dee:	4b11      	ldr	r3, [pc, #68]	; (8010e34 <_SendPacket+0x180>)
 8010df0:	60dd      	str	r5, [r3, #12]
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8010df2:	4b10      	ldr	r3, [pc, #64]	; (8010e34 <_SendPacket+0x180>)
 8010df4:	7e1b      	ldrb	r3, [r3, #24]
 8010df6:	4a11      	ldr	r2, [pc, #68]	; (8010e3c <_SendPacket+0x188>)
 8010df8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010dfc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8010e00:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 8010e02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010e06:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010e0a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8010e0c:	4299      	cmp	r1, r3
 8010e0e:	d002      	beq.n	8010e16 <_SendPacket+0x162>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8010e10:	4b08      	ldr	r3, [pc, #32]	; (8010e34 <_SendPacket+0x180>)
 8010e12:	789b      	ldrb	r3, [r3, #2]
 8010e14:	b12b      	cbz	r3, 8010e22 <_SendPacket+0x16e>
}
 8010e16:	bd70      	pop	{r4, r5, r6, pc}
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8010e18:	4a06      	ldr	r2, [pc, #24]	; (8010e34 <_SendPacket+0x180>)
 8010e1a:	7813      	ldrb	r3, [r2, #0]
 8010e1c:	3301      	adds	r3, #1
 8010e1e:	7013      	strb	r3, [r2, #0]
 8010e20:	e7e7      	b.n	8010df2 <_SendPacket+0x13e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8010e22:	4c04      	ldr	r4, [pc, #16]	; (8010e34 <_SendPacket+0x180>)
 8010e24:	2301      	movs	r3, #1
 8010e26:	70a3      	strb	r3, [r4, #2]
      _HandleIncomingPacket();
 8010e28:	f7ff fef6 	bl	8010c18 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	70a3      	strb	r3, [r4, #2]
}
 8010e30:	e7f1      	b.n	8010e16 <_SendPacket+0x162>
 8010e32:	bf00      	nop
 8010e34:	20009f0c 	.word	0x20009f0c
 8010e38:	e0001000 	.word	0xe0001000
 8010e3c:	20009a48 	.word	0x20009a48

08010e40 <SEGGER_SYSVIEW_RecordVoid>:
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8010e40:	b538      	push	{r3, r4, r5, lr}
 8010e42:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8010e44:	f3ef 8511 	mrs	r5, BASEPRI
 8010e48:	f04f 0120 	mov.w	r1, #32
 8010e4c:	f381 8811 	msr	BASEPRI, r1
 8010e50:	4804      	ldr	r0, [pc, #16]	; (8010e64 <SEGGER_SYSVIEW_RecordVoid+0x24>)
 8010e52:	f7ff fdcd 	bl	80109f0 <_PreparePacket>
 8010e56:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8010e58:	4622      	mov	r2, r4
 8010e5a:	f7ff ff2b 	bl	8010cb4 <_SendPacket>
  RECORD_END();
 8010e5e:	f385 8811 	msr	BASEPRI, r5
}
 8010e62:	bd38      	pop	{r3, r4, r5, pc}
 8010e64:	2000af34 	.word	0x2000af34

08010e68 <SEGGER_SYSVIEW_RecordU32>:
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8010e68:	b570      	push	{r4, r5, r6, lr}
 8010e6a:	4606      	mov	r6, r0
 8010e6c:	460c      	mov	r4, r1
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8010e6e:	f3ef 8511 	mrs	r5, BASEPRI
 8010e72:	f04f 0120 	mov.w	r1, #32
 8010e76:	f381 8811 	msr	BASEPRI, r1
 8010e7a:	480a      	ldr	r0, [pc, #40]	; (8010ea4 <SEGGER_SYSVIEW_RecordU32+0x3c>)
 8010e7c:	f7ff fdb8 	bl	80109f0 <_PreparePacket>
  ENCODE_U32(pPayload, Value);
 8010e80:	4601      	mov	r1, r0
 8010e82:	e004      	b.n	8010e8e <SEGGER_SYSVIEW_RecordU32+0x26>
 8010e84:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8010e88:	f801 3b01 	strb.w	r3, [r1], #1
 8010e8c:	09e4      	lsrs	r4, r4, #7
 8010e8e:	2c7f      	cmp	r4, #127	; 0x7f
 8010e90:	d8f8      	bhi.n	8010e84 <SEGGER_SYSVIEW_RecordU32+0x1c>
 8010e92:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010e96:	4632      	mov	r2, r6
 8010e98:	f7ff ff0c 	bl	8010cb4 <_SendPacket>
  RECORD_END();
 8010e9c:	f385 8811 	msr	BASEPRI, r5
}
 8010ea0:	bd70      	pop	{r4, r5, r6, pc}
 8010ea2:	bf00      	nop
 8010ea4:	2000af34 	.word	0x2000af34

08010ea8 <SEGGER_SYSVIEW_RecordU32x2>:
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8010ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eaa:	4606      	mov	r6, r0
 8010eac:	460f      	mov	r7, r1
 8010eae:	4614      	mov	r4, r2
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8010eb0:	f3ef 8511 	mrs	r5, BASEPRI
 8010eb4:	f04f 0120 	mov.w	r1, #32
 8010eb8:	f381 8811 	msr	BASEPRI, r1
 8010ebc:	480e      	ldr	r0, [pc, #56]	; (8010ef8 <SEGGER_SYSVIEW_RecordU32x2+0x50>)
 8010ebe:	f7ff fd97 	bl	80109f0 <_PreparePacket>
  ENCODE_U32(pPayload, Para0);
 8010ec2:	4601      	mov	r1, r0
 8010ec4:	e004      	b.n	8010ed0 <SEGGER_SYSVIEW_RecordU32x2+0x28>
 8010ec6:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8010eca:	f801 3b01 	strb.w	r3, [r1], #1
 8010ece:	09ff      	lsrs	r7, r7, #7
 8010ed0:	2f7f      	cmp	r7, #127	; 0x7f
 8010ed2:	d8f8      	bhi.n	8010ec6 <SEGGER_SYSVIEW_RecordU32x2+0x1e>
 8010ed4:	f801 7b01 	strb.w	r7, [r1], #1
  ENCODE_U32(pPayload, Para1);
 8010ed8:	e004      	b.n	8010ee4 <SEGGER_SYSVIEW_RecordU32x2+0x3c>
 8010eda:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8010ede:	f801 3b01 	strb.w	r3, [r1], #1
 8010ee2:	09e4      	lsrs	r4, r4, #7
 8010ee4:	2c7f      	cmp	r4, #127	; 0x7f
 8010ee6:	d8f8      	bhi.n	8010eda <SEGGER_SYSVIEW_RecordU32x2+0x32>
 8010ee8:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010eec:	4632      	mov	r2, r6
 8010eee:	f7ff fee1 	bl	8010cb4 <_SendPacket>
  RECORD_END();
 8010ef2:	f385 8811 	msr	BASEPRI, r5
}
 8010ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ef8:	2000af34 	.word	0x2000af34

08010efc <SEGGER_SYSVIEW_RecordSystime>:
void SEGGER_SYSVIEW_RecordSystime(void) {
 8010efc:	b508      	push	{r3, lr}
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8010efe:	4b09      	ldr	r3, [pc, #36]	; (8010f24 <SEGGER_SYSVIEW_RecordSystime+0x28>)
 8010f00:	6a1b      	ldr	r3, [r3, #32]
 8010f02:	b143      	cbz	r3, 8010f16 <SEGGER_SYSVIEW_RecordSystime+0x1a>
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	b133      	cbz	r3, 8010f16 <SEGGER_SYSVIEW_RecordSystime+0x1a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8010f08:	4798      	blx	r3
 8010f0a:	460a      	mov	r2, r1
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8010f0c:	4601      	mov	r1, r0
 8010f0e:	200d      	movs	r0, #13
 8010f10:	f7ff ffca 	bl	8010ea8 <SEGGER_SYSVIEW_RecordU32x2>
}
 8010f14:	bd08      	pop	{r3, pc}
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8010f16:	4b04      	ldr	r3, [pc, #16]	; (8010f28 <SEGGER_SYSVIEW_RecordSystime+0x2c>)
 8010f18:	6859      	ldr	r1, [r3, #4]
 8010f1a:	200c      	movs	r0, #12
 8010f1c:	f7ff ffa4 	bl	8010e68 <SEGGER_SYSVIEW_RecordU32>
}
 8010f20:	e7f8      	b.n	8010f14 <SEGGER_SYSVIEW_RecordSystime+0x18>
 8010f22:	bf00      	nop
 8010f24:	20009f0c 	.word	0x20009f0c
 8010f28:	e0001000 	.word	0xe0001000

08010f2c <SEGGER_SYSVIEW_RecordU32x3>:
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8010f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f30:	4606      	mov	r6, r0
 8010f32:	4688      	mov	r8, r1
 8010f34:	4617      	mov	r7, r2
 8010f36:	461c      	mov	r4, r3
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8010f38:	f3ef 8511 	mrs	r5, BASEPRI
 8010f3c:	f04f 0120 	mov.w	r1, #32
 8010f40:	f381 8811 	msr	BASEPRI, r1
 8010f44:	4815      	ldr	r0, [pc, #84]	; (8010f9c <SEGGER_SYSVIEW_RecordU32x3+0x70>)
 8010f46:	f7ff fd53 	bl	80109f0 <_PreparePacket>
  ENCODE_U32(pPayload, Para0);
 8010f4a:	4601      	mov	r1, r0
 8010f4c:	e005      	b.n	8010f5a <SEGGER_SYSVIEW_RecordU32x3+0x2e>
 8010f4e:	f068 037f 	orn	r3, r8, #127	; 0x7f
 8010f52:	f801 3b01 	strb.w	r3, [r1], #1
 8010f56:	ea4f 18d8 	mov.w	r8, r8, lsr #7
 8010f5a:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8010f5e:	d8f6      	bhi.n	8010f4e <SEGGER_SYSVIEW_RecordU32x3+0x22>
 8010f60:	f801 8b01 	strb.w	r8, [r1], #1
  ENCODE_U32(pPayload, Para1);
 8010f64:	e004      	b.n	8010f70 <SEGGER_SYSVIEW_RecordU32x3+0x44>
 8010f66:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8010f6a:	f801 3b01 	strb.w	r3, [r1], #1
 8010f6e:	09ff      	lsrs	r7, r7, #7
 8010f70:	2f7f      	cmp	r7, #127	; 0x7f
 8010f72:	d8f8      	bhi.n	8010f66 <SEGGER_SYSVIEW_RecordU32x3+0x3a>
 8010f74:	f801 7b01 	strb.w	r7, [r1], #1
  ENCODE_U32(pPayload, Para2);
 8010f78:	e004      	b.n	8010f84 <SEGGER_SYSVIEW_RecordU32x3+0x58>
 8010f7a:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8010f7e:	f801 3b01 	strb.w	r3, [r1], #1
 8010f82:	09e4      	lsrs	r4, r4, #7
 8010f84:	2c7f      	cmp	r4, #127	; 0x7f
 8010f86:	d8f8      	bhi.n	8010f7a <SEGGER_SYSVIEW_RecordU32x3+0x4e>
 8010f88:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010f8c:	4632      	mov	r2, r6
 8010f8e:	f7ff fe91 	bl	8010cb4 <_SendPacket>
  RECORD_END();
 8010f92:	f385 8811 	msr	BASEPRI, r5
}
 8010f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f9a:	bf00      	nop
 8010f9c:	2000af34 	.word	0x2000af34

08010fa0 <SEGGER_SYSVIEW_RecordU32x4>:
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8010fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fa4:	4606      	mov	r6, r0
 8010fa6:	4689      	mov	r9, r1
 8010fa8:	4690      	mov	r8, r2
 8010faa:	461f      	mov	r7, r3
 8010fac:	9c08      	ldr	r4, [sp, #32]
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8010fae:	f3ef 8511 	mrs	r5, BASEPRI
 8010fb2:	f04f 0120 	mov.w	r1, #32
 8010fb6:	f381 8811 	msr	BASEPRI, r1
 8010fba:	481b      	ldr	r0, [pc, #108]	; (8011028 <SEGGER_SYSVIEW_RecordU32x4+0x88>)
 8010fbc:	f7ff fd18 	bl	80109f0 <_PreparePacket>
  ENCODE_U32(pPayload, Para0);
 8010fc0:	4601      	mov	r1, r0
 8010fc2:	e005      	b.n	8010fd0 <SEGGER_SYSVIEW_RecordU32x4+0x30>
 8010fc4:	f069 037f 	orn	r3, r9, #127	; 0x7f
 8010fc8:	f801 3b01 	strb.w	r3, [r1], #1
 8010fcc:	ea4f 19d9 	mov.w	r9, r9, lsr #7
 8010fd0:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
 8010fd4:	d8f6      	bhi.n	8010fc4 <SEGGER_SYSVIEW_RecordU32x4+0x24>
 8010fd6:	f801 9b01 	strb.w	r9, [r1], #1
  ENCODE_U32(pPayload, Para1);
 8010fda:	e005      	b.n	8010fe8 <SEGGER_SYSVIEW_RecordU32x4+0x48>
 8010fdc:	f068 037f 	orn	r3, r8, #127	; 0x7f
 8010fe0:	f801 3b01 	strb.w	r3, [r1], #1
 8010fe4:	ea4f 18d8 	mov.w	r8, r8, lsr #7
 8010fe8:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8010fec:	d8f6      	bhi.n	8010fdc <SEGGER_SYSVIEW_RecordU32x4+0x3c>
 8010fee:	f801 8b01 	strb.w	r8, [r1], #1
  ENCODE_U32(pPayload, Para2);
 8010ff2:	e004      	b.n	8010ffe <SEGGER_SYSVIEW_RecordU32x4+0x5e>
 8010ff4:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8010ff8:	f801 3b01 	strb.w	r3, [r1], #1
 8010ffc:	09ff      	lsrs	r7, r7, #7
 8010ffe:	2f7f      	cmp	r7, #127	; 0x7f
 8011000:	d8f8      	bhi.n	8010ff4 <SEGGER_SYSVIEW_RecordU32x4+0x54>
 8011002:	f801 7b01 	strb.w	r7, [r1], #1
  ENCODE_U32(pPayload, Para3);
 8011006:	e004      	b.n	8011012 <SEGGER_SYSVIEW_RecordU32x4+0x72>
 8011008:	f064 037f 	orn	r3, r4, #127	; 0x7f
 801100c:	f801 3b01 	strb.w	r3, [r1], #1
 8011010:	09e4      	lsrs	r4, r4, #7
 8011012:	2c7f      	cmp	r4, #127	; 0x7f
 8011014:	d8f8      	bhi.n	8011008 <SEGGER_SYSVIEW_RecordU32x4+0x68>
 8011016:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 801101a:	4632      	mov	r2, r6
 801101c:	f7ff fe4a 	bl	8010cb4 <_SendPacket>
  RECORD_END();
 8011020:	f385 8811 	msr	BASEPRI, r5
}
 8011024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011028:	2000af34 	.word	0x2000af34

0801102c <SEGGER_SYSVIEW_Stop>:
void SEGGER_SYSVIEW_Stop(void) {
 801102c:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801102e:	f3ef 8411 	mrs	r4, BASEPRI
 8011032:	f04f 0120 	mov.w	r1, #32
 8011036:	f381 8811 	msr	BASEPRI, r1
 801103a:	4808      	ldr	r0, [pc, #32]	; (801105c <SEGGER_SYSVIEW_Stop+0x30>)
 801103c:	f7ff fcd8 	bl	80109f0 <_PreparePacket>
  if (_SYSVIEW_Globals.EnableState) {
 8011040:	4b07      	ldr	r3, [pc, #28]	; (8011060 <SEGGER_SYSVIEW_Stop+0x34>)
 8011042:	781b      	ldrb	r3, [r3, #0]
 8011044:	b913      	cbnz	r3, 801104c <SEGGER_SYSVIEW_Stop+0x20>
  RECORD_END();
 8011046:	f384 8811 	msr	BASEPRI, r4
}
 801104a:	bd10      	pop	{r4, pc}
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 801104c:	220b      	movs	r2, #11
 801104e:	4601      	mov	r1, r0
 8011050:	f7ff fe30 	bl	8010cb4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8011054:	4b02      	ldr	r3, [pc, #8]	; (8011060 <SEGGER_SYSVIEW_Stop+0x34>)
 8011056:	2200      	movs	r2, #0
 8011058:	701a      	strb	r2, [r3, #0]
 801105a:	e7f4      	b.n	8011046 <SEGGER_SYSVIEW_Stop+0x1a>
 801105c:	2000af34 	.word	0x2000af34
 8011060:	20009f0c 	.word	0x20009f0c

08011064 <SEGGER_SYSVIEW_GetSysDesc>:
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8011064:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8011066:	f3ef 8411 	mrs	r4, BASEPRI
 801106a:	f04f 0120 	mov.w	r1, #32
 801106e:	f381 8811 	msr	BASEPRI, r1
 8011072:	481a      	ldr	r0, [pc, #104]	; (80110dc <SEGGER_SYSVIEW_GetSysDesc+0x78>)
 8011074:	f7ff fcbc 	bl	80109f0 <_PreparePacket>
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8011078:	4b19      	ldr	r3, [pc, #100]	; (80110e0 <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 801107a:	685a      	ldr	r2, [r3, #4]
 801107c:	4603      	mov	r3, r0
 801107e:	e004      	b.n	801108a <SEGGER_SYSVIEW_GetSysDesc+0x26>
 8011080:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8011084:	f803 1b01 	strb.w	r1, [r3], #1
 8011088:	09d2      	lsrs	r2, r2, #7
 801108a:	2a7f      	cmp	r2, #127	; 0x7f
 801108c:	d8f8      	bhi.n	8011080 <SEGGER_SYSVIEW_GetSysDesc+0x1c>
 801108e:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8011092:	4a13      	ldr	r2, [pc, #76]	; (80110e0 <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 8011094:	6892      	ldr	r2, [r2, #8]
 8011096:	e004      	b.n	80110a2 <SEGGER_SYSVIEW_GetSysDesc+0x3e>
 8011098:	f062 017f 	orn	r1, r2, #127	; 0x7f
 801109c:	f803 1b01 	strb.w	r1, [r3], #1
 80110a0:	09d2      	lsrs	r2, r2, #7
 80110a2:	2a7f      	cmp	r2, #127	; 0x7f
 80110a4:	d8f8      	bhi.n	8011098 <SEGGER_SYSVIEW_GetSysDesc+0x34>
 80110a6:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80110aa:	4a0d      	ldr	r2, [pc, #52]	; (80110e0 <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 80110ac:	6912      	ldr	r2, [r2, #16]
 80110ae:	e004      	b.n	80110ba <SEGGER_SYSVIEW_GetSysDesc+0x56>
 80110b0:	f062 017f 	orn	r1, r2, #127	; 0x7f
 80110b4:	f803 1b01 	strb.w	r1, [r3], #1
 80110b8:	09d2      	lsrs	r2, r2, #7
 80110ba:	2a7f      	cmp	r2, #127	; 0x7f
 80110bc:	d8f8      	bhi.n	80110b0 <SEGGER_SYSVIEW_GetSysDesc+0x4c>
 80110be:	4619      	mov	r1, r3
 80110c0:	f801 2b02 	strb.w	r2, [r1], #2
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80110c4:	2200      	movs	r2, #0
 80110c6:	705a      	strb	r2, [r3, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80110c8:	2218      	movs	r2, #24
 80110ca:	f7ff fdf3 	bl	8010cb4 <_SendPacket>
  RECORD_END();
 80110ce:	f384 8811 	msr	BASEPRI, r4
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80110d2:	4b03      	ldr	r3, [pc, #12]	; (80110e0 <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 80110d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d6:	b103      	cbz	r3, 80110da <SEGGER_SYSVIEW_GetSysDesc+0x76>
    _SYSVIEW_Globals.pfSendSysDesc();
 80110d8:	4798      	blx	r3
}
 80110da:	bd10      	pop	{r4, pc}
 80110dc:	2000af34 	.word	0x2000af34
 80110e0:	20009f0c 	.word	0x20009f0c

080110e4 <SEGGER_SYSVIEW_SendTaskInfo>:
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80110e4:	b570      	push	{r4, r5, r6, lr}
 80110e6:	4606      	mov	r6, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80110e8:	f3ef 8511 	mrs	r5, BASEPRI
 80110ec:	f04f 0120 	mov.w	r1, #32
 80110f0:	f381 8811 	msr	BASEPRI, r1
 80110f4:	482a      	ldr	r0, [pc, #168]	; (80111a0 <SEGGER_SYSVIEW_SendTaskInfo+0xbc>)
 80110f6:	f7ff fc7b 	bl	80109f0 <_PreparePacket>
 80110fa:	4604      	mov	r4, r0
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80110fc:	6833      	ldr	r3, [r6, #0]
 80110fe:	4a29      	ldr	r2, [pc, #164]	; (80111a4 <SEGGER_SYSVIEW_SendTaskInfo+0xc0>)
 8011100:	6912      	ldr	r2, [r2, #16]
 8011102:	1a9b      	subs	r3, r3, r2
 8011104:	e004      	b.n	8011110 <SEGGER_SYSVIEW_SendTaskInfo+0x2c>
 8011106:	f063 027f 	orn	r2, r3, #127	; 0x7f
 801110a:	f800 2b01 	strb.w	r2, [r0], #1
 801110e:	09db      	lsrs	r3, r3, #7
 8011110:	2b7f      	cmp	r3, #127	; 0x7f
 8011112:	d8f8      	bhi.n	8011106 <SEGGER_SYSVIEW_SendTaskInfo+0x22>
 8011114:	f800 3b01 	strb.w	r3, [r0], #1
  ENCODE_U32(pPayload, pInfo->Prio);
 8011118:	68b3      	ldr	r3, [r6, #8]
 801111a:	e004      	b.n	8011126 <SEGGER_SYSVIEW_SendTaskInfo+0x42>
 801111c:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8011120:	f800 2b01 	strb.w	r2, [r0], #1
 8011124:	09db      	lsrs	r3, r3, #7
 8011126:	2b7f      	cmp	r3, #127	; 0x7f
 8011128:	d8f8      	bhi.n	801111c <SEGGER_SYSVIEW_SendTaskInfo+0x38>
 801112a:	f800 3b01 	strb.w	r3, [r0], #1
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 801112e:	2220      	movs	r2, #32
 8011130:	6871      	ldr	r1, [r6, #4]
 8011132:	f7ff fc27 	bl	8010984 <_EncodeStr>
 8011136:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8011138:	2209      	movs	r2, #9
 801113a:	4620      	mov	r0, r4
 801113c:	f7ff fdba 	bl	8010cb4 <_SendPacket>
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8011140:	6832      	ldr	r2, [r6, #0]
 8011142:	4b18      	ldr	r3, [pc, #96]	; (80111a4 <SEGGER_SYSVIEW_SendTaskInfo+0xc0>)
 8011144:	691b      	ldr	r3, [r3, #16]
 8011146:	1ad2      	subs	r2, r2, r3
 8011148:	4623      	mov	r3, r4
 801114a:	e004      	b.n	8011156 <SEGGER_SYSVIEW_SendTaskInfo+0x72>
 801114c:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8011150:	f803 1b01 	strb.w	r1, [r3], #1
 8011154:	09d2      	lsrs	r2, r2, #7
 8011156:	2a7f      	cmp	r2, #127	; 0x7f
 8011158:	d8f8      	bhi.n	801114c <SEGGER_SYSVIEW_SendTaskInfo+0x68>
 801115a:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, pInfo->StackBase);
 801115e:	68f2      	ldr	r2, [r6, #12]
 8011160:	e004      	b.n	801116c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8011162:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8011166:	f803 1b01 	strb.w	r1, [r3], #1
 801116a:	09d2      	lsrs	r2, r2, #7
 801116c:	2a7f      	cmp	r2, #127	; 0x7f
 801116e:	d8f8      	bhi.n	8011162 <SEGGER_SYSVIEW_SendTaskInfo+0x7e>
 8011170:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, pInfo->StackSize);
 8011174:	6932      	ldr	r2, [r6, #16]
 8011176:	e004      	b.n	8011182 <SEGGER_SYSVIEW_SendTaskInfo+0x9e>
 8011178:	f062 017f 	orn	r1, r2, #127	; 0x7f
 801117c:	f803 1b01 	strb.w	r1, [r3], #1
 8011180:	09d2      	lsrs	r2, r2, #7
 8011182:	2a7f      	cmp	r2, #127	; 0x7f
 8011184:	d8f8      	bhi.n	8011178 <SEGGER_SYSVIEW_SendTaskInfo+0x94>
 8011186:	4619      	mov	r1, r3
 8011188:	f801 2b02 	strb.w	r2, [r1], #2
  ENCODE_U32(pPayload, 0); // Stack End, future use
 801118c:	2200      	movs	r2, #0
 801118e:	705a      	strb	r2, [r3, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8011190:	2215      	movs	r2, #21
 8011192:	4620      	mov	r0, r4
 8011194:	f7ff fd8e 	bl	8010cb4 <_SendPacket>
  RECORD_END();
 8011198:	f385 8811 	msr	BASEPRI, r5
}
 801119c:	bd70      	pop	{r4, r5, r6, pc}
 801119e:	bf00      	nop
 80111a0:	2000af34 	.word	0x2000af34
 80111a4:	20009f0c 	.word	0x20009f0c

080111a8 <SEGGER_SYSVIEW_SendSysDesc>:
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80111a8:	b570      	push	{r4, r5, r6, lr}
 80111aa:	4605      	mov	r5, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80111ac:	f3ef 8611 	mrs	r6, BASEPRI
 80111b0:	f04f 0120 	mov.w	r1, #32
 80111b4:	f381 8811 	msr	BASEPRI, r1
 80111b8:	4807      	ldr	r0, [pc, #28]	; (80111d8 <SEGGER_SYSVIEW_SendSysDesc+0x30>)
 80111ba:	f7ff fc19 	bl	80109f0 <_PreparePacket>
 80111be:	4604      	mov	r4, r0
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80111c0:	2280      	movs	r2, #128	; 0x80
 80111c2:	4629      	mov	r1, r5
 80111c4:	f7ff fbde 	bl	8010984 <_EncodeStr>
 80111c8:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80111ca:	220e      	movs	r2, #14
 80111cc:	4620      	mov	r0, r4
 80111ce:	f7ff fd71 	bl	8010cb4 <_SendPacket>
  RECORD_END();
 80111d2:	f386 8811 	msr	BASEPRI, r6
}
 80111d6:	bd70      	pop	{r4, r5, r6, pc}
 80111d8:	2000af34 	.word	0x2000af34

080111dc <SEGGER_SYSVIEW_OnIdle>:
void SEGGER_SYSVIEW_OnIdle(void) {
 80111dc:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80111de:	f3ef 8411 	mrs	r4, BASEPRI
 80111e2:	f04f 0120 	mov.w	r1, #32
 80111e6:	f381 8811 	msr	BASEPRI, r1
 80111ea:	4805      	ldr	r0, [pc, #20]	; (8011200 <SEGGER_SYSVIEW_OnIdle+0x24>)
 80111ec:	f7ff fc00 	bl	80109f0 <_PreparePacket>
 80111f0:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80111f2:	2211      	movs	r2, #17
 80111f4:	f7ff fd5e 	bl	8010cb4 <_SendPacket>
  RECORD_END();
 80111f8:	f384 8811 	msr	BASEPRI, r4
}
 80111fc:	bd10      	pop	{r4, pc}
 80111fe:	bf00      	nop
 8011200:	2000af34 	.word	0x2000af34

08011204 <SEGGER_SYSVIEW_OnTaskCreate>:
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8011204:	b538      	push	{r3, r4, r5, lr}
 8011206:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8011208:	f3ef 8511 	mrs	r5, BASEPRI
 801120c:	f04f 0120 	mov.w	r1, #32
 8011210:	f381 8811 	msr	BASEPRI, r1
 8011214:	480b      	ldr	r0, [pc, #44]	; (8011244 <SEGGER_SYSVIEW_OnTaskCreate+0x40>)
 8011216:	f7ff fbeb 	bl	80109f0 <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 801121a:	4b0b      	ldr	r3, [pc, #44]	; (8011248 <SEGGER_SYSVIEW_OnTaskCreate+0x44>)
 801121c:	691b      	ldr	r3, [r3, #16]
 801121e:	1ae3      	subs	r3, r4, r3
  ENCODE_U32(pPayload, TaskId);
 8011220:	4601      	mov	r1, r0
 8011222:	e004      	b.n	801122e <SEGGER_SYSVIEW_OnTaskCreate+0x2a>
 8011224:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8011228:	f801 2b01 	strb.w	r2, [r1], #1
 801122c:	09db      	lsrs	r3, r3, #7
 801122e:	2b7f      	cmp	r3, #127	; 0x7f
 8011230:	d8f8      	bhi.n	8011224 <SEGGER_SYSVIEW_OnTaskCreate+0x20>
 8011232:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8011236:	2208      	movs	r2, #8
 8011238:	f7ff fd3c 	bl	8010cb4 <_SendPacket>
  RECORD_END();
 801123c:	f385 8811 	msr	BASEPRI, r5
}
 8011240:	bd38      	pop	{r3, r4, r5, pc}
 8011242:	bf00      	nop
 8011244:	2000af34 	.word	0x2000af34
 8011248:	20009f0c 	.word	0x20009f0c

0801124c <SEGGER_SYSVIEW_OnTaskStartExec>:
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 801124c:	b538      	push	{r3, r4, r5, lr}
 801124e:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8011250:	f3ef 8511 	mrs	r5, BASEPRI
 8011254:	f04f 0120 	mov.w	r1, #32
 8011258:	f381 8811 	msr	BASEPRI, r1
 801125c:	480b      	ldr	r0, [pc, #44]	; (801128c <SEGGER_SYSVIEW_OnTaskStartExec+0x40>)
 801125e:	f7ff fbc7 	bl	80109f0 <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 8011262:	4b0b      	ldr	r3, [pc, #44]	; (8011290 <SEGGER_SYSVIEW_OnTaskStartExec+0x44>)
 8011264:	691b      	ldr	r3, [r3, #16]
 8011266:	1ae3      	subs	r3, r4, r3
  ENCODE_U32(pPayload, TaskId);
 8011268:	4601      	mov	r1, r0
 801126a:	e004      	b.n	8011276 <SEGGER_SYSVIEW_OnTaskStartExec+0x2a>
 801126c:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8011270:	f801 2b01 	strb.w	r2, [r1], #1
 8011274:	09db      	lsrs	r3, r3, #7
 8011276:	2b7f      	cmp	r3, #127	; 0x7f
 8011278:	d8f8      	bhi.n	801126c <SEGGER_SYSVIEW_OnTaskStartExec+0x20>
 801127a:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 801127e:	2204      	movs	r2, #4
 8011280:	f7ff fd18 	bl	8010cb4 <_SendPacket>
  RECORD_END();
 8011284:	f385 8811 	msr	BASEPRI, r5
}
 8011288:	bd38      	pop	{r3, r4, r5, pc}
 801128a:	bf00      	nop
 801128c:	2000af34 	.word	0x2000af34
 8011290:	20009f0c 	.word	0x20009f0c

08011294 <SEGGER_SYSVIEW_OnTaskStartReady>:
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8011294:	b538      	push	{r3, r4, r5, lr}
 8011296:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8011298:	f3ef 8511 	mrs	r5, BASEPRI
 801129c:	f04f 0120 	mov.w	r1, #32
 80112a0:	f381 8811 	msr	BASEPRI, r1
 80112a4:	480b      	ldr	r0, [pc, #44]	; (80112d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x40>)
 80112a6:	f7ff fba3 	bl	80109f0 <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 80112aa:	4b0b      	ldr	r3, [pc, #44]	; (80112d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x44>)
 80112ac:	691b      	ldr	r3, [r3, #16]
 80112ae:	1ae3      	subs	r3, r4, r3
  ENCODE_U32(pPayload, TaskId);
 80112b0:	4601      	mov	r1, r0
 80112b2:	e004      	b.n	80112be <SEGGER_SYSVIEW_OnTaskStartReady+0x2a>
 80112b4:	f063 027f 	orn	r2, r3, #127	; 0x7f
 80112b8:	f801 2b01 	strb.w	r2, [r1], #1
 80112bc:	09db      	lsrs	r3, r3, #7
 80112be:	2b7f      	cmp	r3, #127	; 0x7f
 80112c0:	d8f8      	bhi.n	80112b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x20>
 80112c2:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80112c6:	2206      	movs	r2, #6
 80112c8:	f7ff fcf4 	bl	8010cb4 <_SendPacket>
  RECORD_END();
 80112cc:	f385 8811 	msr	BASEPRI, r5
}
 80112d0:	bd38      	pop	{r3, r4, r5, pc}
 80112d2:	bf00      	nop
 80112d4:	2000af34 	.word	0x2000af34
 80112d8:	20009f0c 	.word	0x20009f0c

080112dc <SEGGER_SYSVIEW_SendModule>:
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80112dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_pFirstModule != 0) {
 80112de:	4b1b      	ldr	r3, [pc, #108]	; (801134c <SEGGER_SYSVIEW_SendModule+0x70>)
 80112e0:	681c      	ldr	r4, [r3, #0]
 80112e2:	b394      	cbz	r4, 801134a <SEGGER_SYSVIEW_SendModule+0x6e>
    for (n = 0; n < ModuleId; n++) {
 80112e4:	2300      	movs	r3, #0
 80112e6:	4607      	mov	r7, r0
 80112e8:	4298      	cmp	r0, r3
 80112ea:	d903      	bls.n	80112f4 <SEGGER_SYSVIEW_SendModule+0x18>
      pModule = pModule->pNext;
 80112ec:	6924      	ldr	r4, [r4, #16]
      if (pModule == 0) {
 80112ee:	b10c      	cbz	r4, 80112f4 <SEGGER_SYSVIEW_SendModule+0x18>
    for (n = 0; n < ModuleId; n++) {
 80112f0:	3301      	adds	r3, #1
 80112f2:	e7f8      	b.n	80112e6 <SEGGER_SYSVIEW_SendModule+0xa>
    if (pModule != 0) {
 80112f4:	b34c      	cbz	r4, 801134a <SEGGER_SYSVIEW_SendModule+0x6e>
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80112f6:	f3ef 8611 	mrs	r6, BASEPRI
 80112fa:	f04f 0120 	mov.w	r1, #32
 80112fe:	f381 8811 	msr	BASEPRI, r1
 8011302:	4813      	ldr	r0, [pc, #76]	; (8011350 <SEGGER_SYSVIEW_SendModule+0x74>)
 8011304:	f7ff fb74 	bl	80109f0 <_PreparePacket>
 8011308:	4605      	mov	r5, r0
      ENCODE_U32(pPayload, ModuleId);
 801130a:	e004      	b.n	8011316 <SEGGER_SYSVIEW_SendModule+0x3a>
 801130c:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8011310:	f800 3b01 	strb.w	r3, [r0], #1
 8011314:	09ff      	lsrs	r7, r7, #7
 8011316:	2f7f      	cmp	r7, #127	; 0x7f
 8011318:	d8f8      	bhi.n	801130c <SEGGER_SYSVIEW_SendModule+0x30>
 801131a:	f800 7b01 	strb.w	r7, [r0], #1
      ENCODE_U32(pPayload, (pModule->EventOffset));
 801131e:	68a3      	ldr	r3, [r4, #8]
 8011320:	e004      	b.n	801132c <SEGGER_SYSVIEW_SendModule+0x50>
 8011322:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8011326:	f800 2b01 	strb.w	r2, [r0], #1
 801132a:	09db      	lsrs	r3, r3, #7
 801132c:	2b7f      	cmp	r3, #127	; 0x7f
 801132e:	d8f8      	bhi.n	8011322 <SEGGER_SYSVIEW_SendModule+0x46>
 8011330:	f800 3b01 	strb.w	r3, [r0], #1
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8011334:	2280      	movs	r2, #128	; 0x80
 8011336:	6821      	ldr	r1, [r4, #0]
 8011338:	f7ff fb24 	bl	8010984 <_EncodeStr>
 801133c:	4601      	mov	r1, r0
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 801133e:	2216      	movs	r2, #22
 8011340:	4628      	mov	r0, r5
 8011342:	f7ff fcb7 	bl	8010cb4 <_SendPacket>
      RECORD_END();
 8011346:	f386 8811 	msr	BASEPRI, r6
}
 801134a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801134c:	2000b018 	.word	0x2000b018
 8011350:	2000af34 	.word	0x2000af34

08011354 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8011354:	b570      	push	{r4, r5, r6, lr}
 8011356:	4605      	mov	r5, r0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8011358:	f3ef 8611 	mrs	r6, BASEPRI
 801135c:	f04f 0120 	mov.w	r1, #32
 8011360:	f381 8811 	msr	BASEPRI, r1
 8011364:	480a      	ldr	r0, [pc, #40]	; (8011390 <SEGGER_SYSVIEW_Warn+0x3c>)
 8011366:	f7ff fb43 	bl	80109f0 <_PreparePacket>
 801136a:	4604      	mov	r4, r0
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801136c:	2280      	movs	r2, #128	; 0x80
 801136e:	4629      	mov	r1, r5
 8011370:	f7ff fb08 	bl	8010984 <_EncodeStr>
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8011374:	4601      	mov	r1, r0
 8011376:	2301      	movs	r3, #1
 8011378:	f801 3b02 	strb.w	r3, [r1], #2
  ENCODE_U32(pPayload, 0);
 801137c:	2300      	movs	r3, #0
 801137e:	7043      	strb	r3, [r0, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8011380:	221a      	movs	r2, #26
 8011382:	4620      	mov	r0, r4
 8011384:	f7ff fc96 	bl	8010cb4 <_SendPacket>
  RECORD_END();
 8011388:	f386 8811 	msr	BASEPRI, r6
}
 801138c:	bd70      	pop	{r4, r5, r6, pc}
 801138e:	bf00      	nop
 8011390:	2000af34 	.word	0x2000af34

08011394 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8011394:	b510      	push	{r4, lr}
 8011396:	4611      	mov	r1, r2
 8011398:	461c      	mov	r4, r3
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 801139a:	461a      	mov	r2, r3
 801139c:	2000      	movs	r0, #0
 801139e:	f7ff fa59 	bl	8010854 <SEGGER_RTT_Write>
  return len;
}
 80113a2:	4620      	mov	r0, r4
 80113a4:	bd10      	pop	{r4, pc}
	...

080113a8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80113a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80113aa:	2200      	movs	r2, #0
 80113ac:	490f      	ldr	r1, [pc, #60]	; (80113ec <MX_USB_Device_Init+0x44>)
 80113ae:	4810      	ldr	r0, [pc, #64]	; (80113f0 <MX_USB_Device_Init+0x48>)
 80113b0:	f7f6 fba1 	bl	8007af6 <USBD_Init>
 80113b4:	b970      	cbnz	r0, 80113d4 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80113b6:	490f      	ldr	r1, [pc, #60]	; (80113f4 <MX_USB_Device_Init+0x4c>)
 80113b8:	480d      	ldr	r0, [pc, #52]	; (80113f0 <MX_USB_Device_Init+0x48>)
 80113ba:	f7f6 fbb3 	bl	8007b24 <USBD_RegisterClass>
 80113be:	b960      	cbnz	r0, 80113da <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80113c0:	490d      	ldr	r1, [pc, #52]	; (80113f8 <MX_USB_Device_Init+0x50>)
 80113c2:	480b      	ldr	r0, [pc, #44]	; (80113f0 <MX_USB_Device_Init+0x48>)
 80113c4:	f7f6 fb49 	bl	8007a5a <USBD_CDC_RegisterInterface>
 80113c8:	b950      	cbnz	r0, 80113e0 <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80113ca:	4809      	ldr	r0, [pc, #36]	; (80113f0 <MX_USB_Device_Init+0x48>)
 80113cc:	f7f6 fbc1 	bl	8007b52 <USBD_Start>
 80113d0:	b948      	cbnz	r0, 80113e6 <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80113d2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80113d4:	f7ef fc14 	bl	8000c00 <Error_Handler>
 80113d8:	e7ed      	b.n	80113b6 <MX_USB_Device_Init+0xe>
    Error_Handler();
 80113da:	f7ef fc11 	bl	8000c00 <Error_Handler>
 80113de:	e7ef      	b.n	80113c0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80113e0:	f7ef fc0e 	bl	8000c00 <Error_Handler>
 80113e4:	e7f1      	b.n	80113ca <MX_USB_Device_Init+0x22>
    Error_Handler();
 80113e6:	f7ef fc0b 	bl	8000c00 <Error_Handler>
}
 80113ea:	e7f2      	b.n	80113d2 <MX_USB_Device_Init+0x2a>
 80113ec:	200015b0 	.word	0x200015b0
 80113f0:	2000b01c 	.word	0x2000b01c
 80113f4:	2000000c 	.word	0x2000000c
 80113f8:	2000159c 	.word	0x2000159c

080113fc <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80113fc:	2000      	movs	r0, #0
 80113fe:	4770      	bx	lr

08011400 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8011400:	2000      	movs	r0, #0
 8011402:	4770      	bx	lr

08011404 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8011404:	2000      	movs	r0, #0
 8011406:	4770      	bx	lr

08011408 <CDC_Receive_FS>:
{
 8011408:	b510      	push	{r4, lr}
 801140a:	4601      	mov	r1, r0
	dataReceivedFlag =1;
 801140c:	4b05      	ldr	r3, [pc, #20]	; (8011424 <CDC_Receive_FS+0x1c>)
 801140e:	2201      	movs	r2, #1
 8011410:	701a      	strb	r2, [r3, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011412:	4c05      	ldr	r4, [pc, #20]	; (8011428 <CDC_Receive_FS+0x20>)
 8011414:	4620      	mov	r0, r4
 8011416:	f7f6 fb32 	bl	8007a7e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801141a:	4620      	mov	r0, r4
 801141c:	f7f6 fb52 	bl	8007ac4 <USBD_CDC_ReceivePacket>
}
 8011420:	2000      	movs	r0, #0
 8011422:	bd10      	pop	{r4, pc}
 8011424:	2000c2ec 	.word	0x2000c2ec
 8011428:	2000b01c 	.word	0x2000b01c

0801142c <CDC_Init_FS>:
{
 801142c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801142e:	4c06      	ldr	r4, [pc, #24]	; (8011448 <CDC_Init_FS+0x1c>)
 8011430:	2200      	movs	r2, #0
 8011432:	4906      	ldr	r1, [pc, #24]	; (801144c <CDC_Init_FS+0x20>)
 8011434:	4620      	mov	r0, r4
 8011436:	f7f6 fb17 	bl	8007a68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801143a:	4905      	ldr	r1, [pc, #20]	; (8011450 <CDC_Init_FS+0x24>)
 801143c:	4620      	mov	r0, r4
 801143e:	f7f6 fb1e 	bl	8007a7e <USBD_CDC_SetRxBuffer>
}
 8011442:	2000      	movs	r0, #0
 8011444:	bd10      	pop	{r4, pc}
 8011446:	bf00      	nop
 8011448:	2000b01c 	.word	0x2000b01c
 801144c:	2000baec 	.word	0x2000baec
 8011450:	2000b2ec 	.word	0x2000b2ec

08011454 <CDC_Transmit_FS>:
{
 8011454:	b510      	push	{r4, lr}
 8011456:	460a      	mov	r2, r1
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011458:	4c04      	ldr	r4, [pc, #16]	; (801146c <CDC_Transmit_FS+0x18>)
 801145a:	4601      	mov	r1, r0
 801145c:	4620      	mov	r0, r4
 801145e:	f7f6 fb03 	bl	8007a68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011462:	4620      	mov	r0, r4
 8011464:	f7f6 fb14 	bl	8007a90 <USBD_CDC_TransmitPacket>
}
 8011468:	bd10      	pop	{r4, pc}
 801146a:	bf00      	nop
 801146c:	2000b01c 	.word	0x2000b01c

08011470 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011470:	2312      	movs	r3, #18
 8011472:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 8011474:	4800      	ldr	r0, [pc, #0]	; (8011478 <USBD_CDC_DeviceDescriptor+0x8>)
 8011476:	4770      	bx	lr
 8011478:	200015d0 	.word	0x200015d0

0801147c <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801147c:	2304      	movs	r3, #4
 801147e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8011480:	4800      	ldr	r0, [pc, #0]	; (8011484 <USBD_CDC_LangIDStrDescriptor+0x8>)
 8011482:	4770      	bx	lr
 8011484:	200015e4 	.word	0x200015e4

08011488 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8011488:	2300      	movs	r3, #0
 801148a:	4293      	cmp	r3, r2
 801148c:	d21e      	bcs.n	80114cc <IntToUnicode+0x44>
{
 801148e:	b500      	push	{lr}
 8011490:	e010      	b.n	80114b4 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011492:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 8011496:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 801149a:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 801149c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80114a0:	f10c 0c01 	add.w	ip, ip, #1
 80114a4:	f04f 0e00 	mov.w	lr, #0
 80114a8:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 80114ac:	3301      	adds	r3, #1
 80114ae:	b2db      	uxtb	r3, r3
 80114b0:	4293      	cmp	r3, r2
 80114b2:	d209      	bcs.n	80114c8 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 80114b4:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 80114b8:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 80114bc:	d2e9      	bcs.n	8011492 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 80114be:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80114c2:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 80114c6:	e7e8      	b.n	801149a <IntToUnicode+0x12>
  }
}
 80114c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80114cc:	4770      	bx	lr
	...

080114d0 <Get_SerialNum>:
{
 80114d0:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80114d2:	4b0b      	ldr	r3, [pc, #44]	; (8011500 <Get_SerialNum+0x30>)
 80114d4:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80114d8:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80114dc:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 80114e0:	18c0      	adds	r0, r0, r3
 80114e2:	d100      	bne.n	80114e6 <Get_SerialNum+0x16>
}
 80114e4:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80114e6:	4d07      	ldr	r5, [pc, #28]	; (8011504 <Get_SerialNum+0x34>)
 80114e8:	2208      	movs	r2, #8
 80114ea:	1ca9      	adds	r1, r5, #2
 80114ec:	f7ff ffcc 	bl	8011488 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80114f0:	2204      	movs	r2, #4
 80114f2:	f105 0112 	add.w	r1, r5, #18
 80114f6:	4620      	mov	r0, r4
 80114f8:	f7ff ffc6 	bl	8011488 <IntToUnicode>
}
 80114fc:	e7f2      	b.n	80114e4 <Get_SerialNum+0x14>
 80114fe:	bf00      	nop
 8011500:	1fff7000 	.word	0x1fff7000
 8011504:	200015e8 	.word	0x200015e8

08011508 <USBD_CDC_SerialStrDescriptor>:
{
 8011508:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 801150a:	231a      	movs	r3, #26
 801150c:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 801150e:	f7ff ffdf 	bl	80114d0 <Get_SerialNum>
}
 8011512:	4801      	ldr	r0, [pc, #4]	; (8011518 <USBD_CDC_SerialStrDescriptor+0x10>)
 8011514:	bd08      	pop	{r3, pc}
 8011516:	bf00      	nop
 8011518:	200015e8 	.word	0x200015e8

0801151c <USBD_CDC_ProductStrDescriptor>:
{
 801151c:	b508      	push	{r3, lr}
 801151e:	460a      	mov	r2, r1
  if(speed == 0)
 8011520:	b928      	cbnz	r0, 801152e <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011522:	4905      	ldr	r1, [pc, #20]	; (8011538 <USBD_CDC_ProductStrDescriptor+0x1c>)
 8011524:	4805      	ldr	r0, [pc, #20]	; (801153c <USBD_CDC_ProductStrDescriptor+0x20>)
 8011526:	f7f6 ff90 	bl	800844a <USBD_GetString>
}
 801152a:	4803      	ldr	r0, [pc, #12]	; (8011538 <USBD_CDC_ProductStrDescriptor+0x1c>)
 801152c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801152e:	4902      	ldr	r1, [pc, #8]	; (8011538 <USBD_CDC_ProductStrDescriptor+0x1c>)
 8011530:	4802      	ldr	r0, [pc, #8]	; (801153c <USBD_CDC_ProductStrDescriptor+0x20>)
 8011532:	f7f6 ff8a 	bl	800844a <USBD_GetString>
 8011536:	e7f8      	b.n	801152a <USBD_CDC_ProductStrDescriptor+0xe>
 8011538:	2000c2f0 	.word	0x2000c2f0
 801153c:	08016af8 	.word	0x08016af8

08011540 <USBD_CDC_ManufacturerStrDescriptor>:
{
 8011540:	b510      	push	{r4, lr}
 8011542:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011544:	4c03      	ldr	r4, [pc, #12]	; (8011554 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 8011546:	4621      	mov	r1, r4
 8011548:	4803      	ldr	r0, [pc, #12]	; (8011558 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 801154a:	f7f6 ff7e 	bl	800844a <USBD_GetString>
}
 801154e:	4620      	mov	r0, r4
 8011550:	bd10      	pop	{r4, pc}
 8011552:	bf00      	nop
 8011554:	2000c2f0 	.word	0x2000c2f0
 8011558:	08016b10 	.word	0x08016b10

0801155c <USBD_CDC_ConfigStrDescriptor>:
{
 801155c:	b508      	push	{r3, lr}
 801155e:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8011560:	b928      	cbnz	r0, 801156e <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011562:	4905      	ldr	r1, [pc, #20]	; (8011578 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8011564:	4805      	ldr	r0, [pc, #20]	; (801157c <USBD_CDC_ConfigStrDescriptor+0x20>)
 8011566:	f7f6 ff70 	bl	800844a <USBD_GetString>
}
 801156a:	4803      	ldr	r0, [pc, #12]	; (8011578 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 801156c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801156e:	4902      	ldr	r1, [pc, #8]	; (8011578 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8011570:	4802      	ldr	r0, [pc, #8]	; (801157c <USBD_CDC_ConfigStrDescriptor+0x20>)
 8011572:	f7f6 ff6a 	bl	800844a <USBD_GetString>
 8011576:	e7f8      	b.n	801156a <USBD_CDC_ConfigStrDescriptor+0xe>
 8011578:	2000c2f0 	.word	0x2000c2f0
 801157c:	08016b24 	.word	0x08016b24

08011580 <USBD_CDC_InterfaceStrDescriptor>:
{
 8011580:	b508      	push	{r3, lr}
 8011582:	460a      	mov	r2, r1
  if(speed == 0)
 8011584:	b928      	cbnz	r0, 8011592 <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011586:	4905      	ldr	r1, [pc, #20]	; (801159c <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 8011588:	4805      	ldr	r0, [pc, #20]	; (80115a0 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 801158a:	f7f6 ff5e 	bl	800844a <USBD_GetString>
}
 801158e:	4803      	ldr	r0, [pc, #12]	; (801159c <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 8011590:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011592:	4902      	ldr	r1, [pc, #8]	; (801159c <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 8011594:	4802      	ldr	r0, [pc, #8]	; (80115a0 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 8011596:	f7f6 ff58 	bl	800844a <USBD_GetString>
 801159a:	e7f8      	b.n	801158e <USBD_CDC_InterfaceStrDescriptor+0xe>
 801159c:	2000c2f0 	.word	0x2000c2f0
 80115a0:	08016b30 	.word	0x08016b30

080115a4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80115a4:	2803      	cmp	r0, #3
 80115a6:	d805      	bhi.n	80115b4 <USBD_Get_USB_Status+0x10>
 80115a8:	e8df f000 	tbb	[pc, r0]
 80115ac:	05020405 	.word	0x05020405
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80115b0:	2001      	movs	r0, #1
    break;
 80115b2:	4770      	bx	lr
      usb_status = USBD_FAIL;
 80115b4:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80115b6:	4770      	bx	lr

080115b8 <SystemClockConfig_Resume>:
{
 80115b8:	b508      	push	{r3, lr}
  SystemClock_Config();
 80115ba:	f7ef fb23 	bl	8000c04 <SystemClock_Config>
}
 80115be:	bd08      	pop	{r3, pc}

080115c0 <HAL_PCD_MspInit>:
{
 80115c0:	b510      	push	{r4, lr}
 80115c2:	b096      	sub	sp, #88	; 0x58
 80115c4:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80115c6:	2254      	movs	r2, #84	; 0x54
 80115c8:	2100      	movs	r1, #0
 80115ca:	a801      	add	r0, sp, #4
 80115cc:	f000 fb8e 	bl	8011cec <memset>
  if(pcdHandle->Instance==USB)
 80115d0:	6822      	ldr	r2, [r4, #0]
 80115d2:	4b11      	ldr	r3, [pc, #68]	; (8011618 <HAL_PCD_MspInit+0x58>)
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d001      	beq.n	80115dc <HAL_PCD_MspInit+0x1c>
}
 80115d8:	b016      	add	sp, #88	; 0x58
 80115da:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80115dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80115e0:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80115e2:	a801      	add	r0, sp, #4
 80115e4:	f7f2 fe1e 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 80115e8:	b990      	cbnz	r0, 8011610 <HAL_PCD_MspInit+0x50>
    __HAL_RCC_USB_CLK_ENABLE();
 80115ea:	4b0c      	ldr	r3, [pc, #48]	; (801161c <HAL_PCD_MspInit+0x5c>)
 80115ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80115ee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80115f2:	659a      	str	r2, [r3, #88]	; 0x58
 80115f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80115fa:	9300      	str	r3, [sp, #0]
 80115fc:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80115fe:	2200      	movs	r2, #0
 8011600:	2105      	movs	r1, #5
 8011602:	2014      	movs	r0, #20
 8011604:	f7ef fe4c 	bl	80012a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011608:	2014      	movs	r0, #20
 801160a:	f7ef fe8f 	bl	800132c <HAL_NVIC_EnableIRQ>
}
 801160e:	e7e3      	b.n	80115d8 <HAL_PCD_MspInit+0x18>
      Error_Handler();
 8011610:	f7ef faf6 	bl	8000c00 <Error_Handler>
 8011614:	e7e9      	b.n	80115ea <HAL_PCD_MspInit+0x2a>
 8011616:	bf00      	nop
 8011618:	40005c00 	.word	0x40005c00
 801161c:	40021000 	.word	0x40021000

08011620 <HAL_PCD_SetupStageCallback>:
{
 8011620:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011622:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8011626:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 801162a:	f7f6 faa7 	bl	8007b7c <USBD_LL_SetupStage>
}
 801162e:	bd08      	pop	{r3, pc}

08011630 <HAL_PCD_DataOutStageCallback>:
{
 8011630:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011632:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8011636:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801163a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 801163e:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8011642:	f7f6 fac7 	bl	8007bd4 <USBD_LL_DataOutStage>
}
 8011646:	bd08      	pop	{r3, pc}

08011648 <HAL_PCD_DataInStageCallback>:
{
 8011648:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801164a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 801164e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8011652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011654:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8011658:	f7f6 faf8 	bl	8007c4c <USBD_LL_DataInStage>
}
 801165c:	bd08      	pop	{r3, pc}

0801165e <HAL_PCD_SOFCallback>:
{
 801165e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011660:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8011664:	f7f6 fb98 	bl	8007d98 <USBD_LL_SOF>
}
 8011668:	bd08      	pop	{r3, pc}

0801166a <HAL_PCD_ResetCallback>:
{
 801166a:	b510      	push	{r4, lr}
 801166c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801166e:	6883      	ldr	r3, [r0, #8]
 8011670:	2b02      	cmp	r3, #2
 8011672:	d109      	bne.n	8011688 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011674:	2101      	movs	r1, #1
 8011676:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 801167a:	f7f6 fb73 	bl	8007d64 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801167e:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8011682:	f7f6 fb42 	bl	8007d0a <USBD_LL_Reset>
}
 8011686:	bd10      	pop	{r4, pc}
    Error_Handler();
 8011688:	f7ef faba 	bl	8000c00 <Error_Handler>
 801168c:	e7f2      	b.n	8011674 <HAL_PCD_ResetCallback+0xa>
	...

08011690 <HAL_PCD_SuspendCallback>:
{
 8011690:	b510      	push	{r4, lr}
 8011692:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011694:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8011698:	f7f6 fb67 	bl	8007d6a <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 801169c:	69a3      	ldr	r3, [r4, #24]
 801169e:	b123      	cbz	r3, 80116aa <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80116a0:	4a02      	ldr	r2, [pc, #8]	; (80116ac <HAL_PCD_SuspendCallback+0x1c>)
 80116a2:	6913      	ldr	r3, [r2, #16]
 80116a4:	f043 0306 	orr.w	r3, r3, #6
 80116a8:	6113      	str	r3, [r2, #16]
}
 80116aa:	bd10      	pop	{r4, pc}
 80116ac:	e000ed00 	.word	0xe000ed00

080116b0 <HAL_PCD_ResumeCallback>:
{
 80116b0:	b510      	push	{r4, lr}
 80116b2:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 80116b4:	6983      	ldr	r3, [r0, #24]
 80116b6:	b923      	cbnz	r3, 80116c2 <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80116b8:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 80116bc:	f7f6 fb5f 	bl	8007d7e <USBD_LL_Resume>
}
 80116c0:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80116c2:	4a04      	ldr	r2, [pc, #16]	; (80116d4 <HAL_PCD_ResumeCallback+0x24>)
 80116c4:	6913      	ldr	r3, [r2, #16]
 80116c6:	f023 0306 	bic.w	r3, r3, #6
 80116ca:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80116cc:	f7ff ff74 	bl	80115b8 <SystemClockConfig_Resume>
 80116d0:	e7f2      	b.n	80116b8 <HAL_PCD_ResumeCallback+0x8>
 80116d2:	bf00      	nop
 80116d4:	e000ed00 	.word	0xe000ed00

080116d8 <USBD_LL_Init>:
{
 80116d8:	b510      	push	{r4, lr}
 80116da:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80116dc:	481e      	ldr	r0, [pc, #120]	; (8011758 <USBD_LL_Init+0x80>)
 80116de:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 80116e2:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 80116e6:	4b1d      	ldr	r3, [pc, #116]	; (801175c <USBD_LL_Init+0x84>)
 80116e8:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80116ea:	2308      	movs	r3, #8
 80116ec:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80116ee:	2302      	movs	r3, #2
 80116f0:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80116f2:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80116f4:	2300      	movs	r3, #0
 80116f6:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80116f8:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80116fa:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80116fc:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80116fe:	f7f1 f837 	bl	8002770 <HAL_PCD_Init>
 8011702:	bb30      	cbnz	r0, 8011752 <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011704:	2318      	movs	r3, #24
 8011706:	2200      	movs	r2, #0
 8011708:	4611      	mov	r1, r2
 801170a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 801170e:	f7f1 ff77 	bl	8003600 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011712:	2358      	movs	r3, #88	; 0x58
 8011714:	2200      	movs	r2, #0
 8011716:	2180      	movs	r1, #128	; 0x80
 8011718:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 801171c:	f7f1 ff70 	bl	8003600 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011720:	23c0      	movs	r3, #192	; 0xc0
 8011722:	2200      	movs	r2, #0
 8011724:	2181      	movs	r1, #129	; 0x81
 8011726:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 801172a:	f7f1 ff69 	bl	8003600 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801172e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011732:	2200      	movs	r2, #0
 8011734:	2101      	movs	r1, #1
 8011736:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 801173a:	f7f1 ff61 	bl	8003600 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801173e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011742:	2200      	movs	r2, #0
 8011744:	2182      	movs	r1, #130	; 0x82
 8011746:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 801174a:	f7f1 ff59 	bl	8003600 <HAL_PCDEx_PMAConfig>
}
 801174e:	2000      	movs	r0, #0
 8011750:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8011752:	f7ef fa55 	bl	8000c00 <Error_Handler>
 8011756:	e7d5      	b.n	8011704 <USBD_LL_Init+0x2c>
 8011758:	2000c4f0 	.word	0x2000c4f0
 801175c:	40005c00 	.word	0x40005c00

08011760 <USBD_LL_Start>:
{
 8011760:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8011762:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8011766:	f7f1 f883 	bl	8002870 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 801176a:	f7ff ff1b 	bl	80115a4 <USBD_Get_USB_Status>
}
 801176e:	bd08      	pop	{r3, pc}

08011770 <USBD_LL_OpenEP>:
{
 8011770:	b508      	push	{r3, lr}
 8011772:	4694      	mov	ip, r2
 8011774:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011776:	4663      	mov	r3, ip
 8011778:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801177c:	f7f1 fe09 	bl	8003392 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8011780:	f7ff ff10 	bl	80115a4 <USBD_Get_USB_Status>
}
 8011784:	bd08      	pop	{r3, pc}

08011786 <USBD_LL_CloseEP>:
{
 8011786:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011788:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801178c:	f7f1 fe43 	bl	8003416 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8011790:	f7ff ff08 	bl	80115a4 <USBD_Get_USB_Status>
}
 8011794:	bd08      	pop	{r3, pc}

08011796 <USBD_LL_StallEP>:
{
 8011796:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011798:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801179c:	f7f1 fec0 	bl	8003520 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80117a0:	f7ff ff00 	bl	80115a4 <USBD_Get_USB_Status>
}
 80117a4:	bd08      	pop	{r3, pc}

080117a6 <USBD_LL_ClearStallEP>:
{
 80117a6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80117a8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80117ac:	f7f1 feed 	bl	800358a <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80117b0:	f7ff fef8 	bl	80115a4 <USBD_Get_USB_Status>
}
 80117b4:	bd08      	pop	{r3, pc}

080117b6 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80117b6:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80117ba:	f011 0f80 	tst.w	r1, #128	; 0x80
 80117be:	d108      	bne.n	80117d2 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80117c0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80117c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80117c8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80117cc:	f893 016a 	ldrb.w	r0, [r3, #362]	; 0x16a
}
 80117d0:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80117d2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80117d6:	3101      	adds	r1, #1
 80117d8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80117dc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80117e0:	7898      	ldrb	r0, [r3, #2]
 80117e2:	4770      	bx	lr

080117e4 <USBD_LL_SetUSBAddress>:
{
 80117e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80117e6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80117ea:	f7f1 fce5 	bl	80031b8 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80117ee:	f7ff fed9 	bl	80115a4 <USBD_Get_USB_Status>
}
 80117f2:	bd08      	pop	{r3, pc}

080117f4 <USBD_LL_Transmit>:
{
 80117f4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80117f6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80117fa:	f7f1 fe69 	bl	80034d0 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80117fe:	f7ff fed1 	bl	80115a4 <USBD_Get_USB_Status>
}
 8011802:	bd08      	pop	{r3, pc}

08011804 <USBD_LL_PrepareReceive>:
{
 8011804:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011806:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801180a:	f7f1 fe36 	bl	800347a <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 801180e:	f7ff fec9 	bl	80115a4 <USBD_Get_USB_Status>
}
 8011812:	bd08      	pop	{r3, pc}

08011814 <USBD_LL_GetRxDataSize>:
{
 8011814:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011816:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801181a:	f7f1 fe50 	bl	80034be <HAL_PCD_EP_GetRxCount>
}
 801181e:	bd08      	pop	{r3, pc}

08011820 <HAL_PCDEx_LPM_Callback>:
{
 8011820:	b510      	push	{r4, lr}
 8011822:	4604      	mov	r4, r0
  switch (msg)
 8011824:	b111      	cbz	r1, 801182c <HAL_PCDEx_LPM_Callback+0xc>
 8011826:	2901      	cmp	r1, #1
 8011828:	d00f      	beq.n	801184a <HAL_PCDEx_LPM_Callback+0x2a>
}
 801182a:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 801182c:	6983      	ldr	r3, [r0, #24]
 801182e:	b923      	cbnz	r3, 801183a <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 8011830:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8011834:	f7f6 faa3 	bl	8007d7e <USBD_LL_Resume>
    break;
 8011838:	e7f7      	b.n	801182a <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 801183a:	f7ff febd 	bl	80115b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801183e:	4a09      	ldr	r2, [pc, #36]	; (8011864 <HAL_PCDEx_LPM_Callback+0x44>)
 8011840:	6913      	ldr	r3, [r2, #16]
 8011842:	f023 0306 	bic.w	r3, r3, #6
 8011846:	6113      	str	r3, [r2, #16]
 8011848:	e7f2      	b.n	8011830 <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 801184a:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 801184e:	f7f6 fa8c 	bl	8007d6a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011852:	69a3      	ldr	r3, [r4, #24]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d0e8      	beq.n	801182a <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011858:	4a02      	ldr	r2, [pc, #8]	; (8011864 <HAL_PCDEx_LPM_Callback+0x44>)
 801185a:	6913      	ldr	r3, [r2, #16]
 801185c:	f043 0306 	orr.w	r3, r3, #6
 8011860:	6113      	str	r3, [r2, #16]
}
 8011862:	e7e2      	b.n	801182a <HAL_PCDEx_LPM_Callback+0xa>
 8011864:	e000ed00 	.word	0xe000ed00

08011868 <USBD_static_malloc>:
}
 8011868:	4800      	ldr	r0, [pc, #0]	; (801186c <USBD_static_malloc+0x4>)
 801186a:	4770      	bx	lr
 801186c:	2000c7e4 	.word	0x2000c7e4

08011870 <USBD_static_free>:
}
 8011870:	4770      	bx	lr
	...

08011874 <AppTest_CanIdle_MainFunction>:
{

}

void AppTest_CanIdle_MainFunction ()
{
 8011874:	b530      	push	{r4, r5, lr}
 8011876:	b087      	sub	sp, #28
   uint8_t cmd = 0;
   uint8_t length = 0;
   uint8_t dataCmd[ETHCAT_LENGTH_DATAMAX] = {0};
 8011878:	2300      	movs	r3, #0
 801187a:	9300      	str	r3, [sp, #0]
 801187c:	9301      	str	r3, [sp, #4]
 801187e:	9302      	str	r3, [sp, #8]
 8011880:	9303      	str	r3, [sp, #12]
 8011882:	9304      	str	r3, [sp, #16]
 8011884:	9305      	str	r3, [sp, #20]
   //cdc_printf("[appTest main]@%u:\t %d\n",GetCycleCount(), appTest.testCase);
   switch (appTest.testCase)
 8011886:	4b5e      	ldr	r3, [pc, #376]	; (8011a00 <AppTest_CanIdle_MainFunction+0x18c>)
 8011888:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 801188c:	3b01      	subs	r3, #1
 801188e:	2b0e      	cmp	r3, #14
 8011890:	d80c      	bhi.n	80118ac <AppTest_CanIdle_MainFunction+0x38>
 8011892:	e8df f003 	tbb	[pc, r3]
 8011896:	0b08      	.short	0x0b08
 8011898:	ad93a10b 	.word	0xad93a10b
 801189c:	0b0b0b0b 	.word	0x0b0b0b0b
 80118a0:	0b0b0b0b 	.word	0x0b0b0b0b
 80118a4:	0d          	.byte	0x0d
 80118a5:	00          	.byte	0x00
   case APPTEST_CANIDLE_NO:

      break;

   case APPTEST_CANIDLE_BLINK:
      md80_ConfigBlink (&appTest.dev);
 80118a6:	4857      	ldr	r0, [pc, #348]	; (8011a04 <AppTest_CanIdle_MainFunction+0x190>)
 80118a8:	f7fa f832 	bl	800b910 <md80_ConfigBlink>
      break;

   default:
      break;
   }
}
 80118ac:	b007      	add	sp, #28
 80118ae:	bd30      	pop	{r4, r5, pc}
      if (false == appTest.isCanIdleEnabled)
 80118b0:	4b53      	ldr	r3, [pc, #332]	; (8011a00 <AppTest_CanIdle_MainFunction+0x18c>)
 80118b2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80118b6:	b32b      	cbz	r3, 8011904 <AppTest_CanIdle_MainFunction+0x90>
      md80_SetTargetPosition (&appTest.dev , appTest.angleRad);
 80118b8:	4c51      	ldr	r4, [pc, #324]	; (8011a00 <AppTest_CanIdle_MainFunction+0x18c>)
 80118ba:	ed94 0a7e 	vldr	s0, [r4, #504]	; 0x1f8
 80118be:	1d20      	adds	r0, r4, #4
 80118c0:	f7fa f954 	bl	800bb6c <md80_SetTargetPosition>
      if (appTest.rotationCycle)
 80118c4:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d063      	beq.n	8011994 <AppTest_CanIdle_MainFunction+0x120>
         appTest.angleRad += appTest.dt;
 80118cc:	ed94 7a7f 	vldr	s14, [r4, #508]	; 0x1fc
 80118d0:	edd4 7a7e 	vldr	s15, [r4, #504]	; 0x1f8
 80118d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80118d8:	edc4 7a7e 	vstr	s15, [r4, #504]	; 0x1f8
      if (appTest.angleRad >= appTest.maxAngleRad)
 80118dc:	4b48      	ldr	r3, [pc, #288]	; (8011a00 <AppTest_CanIdle_MainFunction+0x18c>)
 80118de:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 80118e2:	ed93 7a80 	vldr	s14, [r3, #512]	; 0x200
 80118e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ee:	db5b      	blt.n	80119a8 <AppTest_CanIdle_MainFunction+0x134>
    	   appTest.rotationCycle = false;
 80118f0:	2200      	movs	r2, #0
 80118f2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
      md80_MainFunction (&appTest.dev);
 80118f6:	4843      	ldr	r0, [pc, #268]	; (8011a04 <AppTest_CanIdle_MainFunction+0x190>)
 80118f8:	f7fa f8f0 	bl	800badc <md80_MainFunction>
      osDelay(10);
 80118fc:	200a      	movs	r0, #10
 80118fe:	f7f6 fe28 	bl	8008552 <osDelay>
      break;
 8011902:	e7d3      	b.n	80118ac <AppTest_CanIdle_MainFunction+0x38>
    	   canM_SetAddrTxRxDev(DEV_CAN_0, appTest.md80id, appTest.md80id);
 8011904:	4d3e      	ldr	r5, [pc, #248]	; (8011a00 <AppTest_CanIdle_MainFunction+0x18c>)
 8011906:	462c      	mov	r4, r5
 8011908:	f834 1b04 	ldrh.w	r1, [r4], #4
 801190c:	460a      	mov	r2, r1
 801190e:	2000      	movs	r0, #0
 8011910:	f7fe fc00 	bl	8010114 <canM_SetAddrTxRxDev>
      	osDelay(1000);
 8011914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011918:	f7f6 fe1b 	bl	8008552 <osDelay>
         md80_ControlMd80Mode (&appTest.dev, MD80_IMPEDANCE);
 801191c:	2104      	movs	r1, #4
 801191e:	4620      	mov	r0, r4
 8011920:	f7fa f8b2 	bl	800ba88 <md80_ControlMd80Mode>
         osDelay(1000);
 8011924:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011928:	f7f6 fe13 	bl	8008552 <osDelay>
         md80_ControlMd80Enable (&appTest.dev, true);
 801192c:	2101      	movs	r1, #1
 801192e:	4620      	mov	r0, r4
 8011930:	f7fa f8bf 	bl	800bab2 <md80_ControlMd80Enable>
         osDelay(1000);
 8011934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011938:	f7f6 fe0b 	bl	8008552 <osDelay>
         md80_SetImpedanceControllerParams(&appTest.dev, 10.0f, 1.0f);
 801193c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8011940:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8011944:	4620      	mov	r0, r4
 8011946:	f7fa f8f9 	bl	800bb3c <md80_SetImpedanceControllerParams>
         osDelay(1000);
 801194a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801194e:	f7f6 fe00 	bl	8008552 <osDelay>
         md80_SetEncoderZero(&appTest.dev);
 8011952:	4620      	mov	r0, r4
 8011954:	f7fa f90e 	bl	800bb74 <md80_SetEncoderZero>
         osDelay(1000);
 8011958:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801195c:	f7f6 fdf9 	bl	8008552 <osDelay>
         md80_SetMaxTorque (&appTest.dev, 10.0);
 8011960:	210a      	movs	r1, #10
 8011962:	4620      	mov	r0, r4
 8011964:	f7fa f8f2 	bl	800bb4c <md80_SetMaxTorque>
         md80_SetMaxVelocity (&appTest.dev, 5.0);
 8011968:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 801196c:	4620      	mov	r0, r4
 801196e:	f7fa f8f7 	bl	800bb60 <md80_SetMaxVelocity>
         osDelay(1000);
 8011972:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011976:	f7f6 fdec 	bl	8008552 <osDelay>
         md80_SetCurrentLimit(&appTest.dev, 1.0f);
 801197a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801197e:	4620      	mov	r0, r4
 8011980:	f7fa f852 	bl	800ba28 <md80_SetCurrentLimit>
         osDelay(500);
 8011984:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011988:	f7f6 fde3 	bl	8008552 <osDelay>
         appTest.isCanIdleEnabled = true;
 801198c:	2301      	movs	r3, #1
 801198e:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8011992:	e791      	b.n	80118b8 <AppTest_CanIdle_MainFunction+0x44>
         appTest.angleRad -= appTest.dt;
 8011994:	4b1a      	ldr	r3, [pc, #104]	; (8011a00 <AppTest_CanIdle_MainFunction+0x18c>)
 8011996:	ed93 7a7f 	vldr	s14, [r3, #508]	; 0x1fc
 801199a:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 801199e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80119a2:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
 80119a6:	e799      	b.n	80118dc <AppTest_CanIdle_MainFunction+0x68>
      else if (appTest.angleRad <= 0)
 80119a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80119ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b0:	d8a1      	bhi.n	80118f6 <AppTest_CanIdle_MainFunction+0x82>
    	   appTest.rotationCycle = true;
 80119b2:	4b13      	ldr	r3, [pc, #76]	; (8011a00 <AppTest_CanIdle_MainFunction+0x18c>)
 80119b4:	2201      	movs	r2, #1
 80119b6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80119ba:	e79c      	b.n	80118f6 <AppTest_CanIdle_MainFunction+0x82>
                         appTest.newTimeoutMs, 
 80119bc:	4c10      	ldr	r4, [pc, #64]	; (8011a00 <AppTest_CanIdle_MainFunction+0x18c>)
      md80_ConfigMd80Can(&appTest.dev, 
 80119be:	f894 320a 	ldrb.w	r3, [r4, #522]	; 0x20a
 80119c2:	f8b4 2208 	ldrh.w	r2, [r4, #520]	; 0x208
 80119c6:	f894 1206 	ldrb.w	r1, [r4, #518]	; 0x206
 80119ca:	1d20      	adds	r0, r4, #4
 80119cc:	f7f9 ffd8 	bl	800b980 <md80_ConfigMd80Can>
      appTest.testCase = APPTEST_CANIDLE_NO;
 80119d0:	2300      	movs	r3, #0
 80119d2:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
      break;
 80119d6:	e769      	b.n	80118ac <AppTest_CanIdle_MainFunction+0x38>
      canIdle_UpdateCmd(appTest.md80id, BUS_FRAME_CANDLE_CONFIG_BAUDRATE, 1, (uint8_t *)&appTest.md80BaudrateSet);
 80119d8:	4c09      	ldr	r4, [pc, #36]	; (8011a00 <AppTest_CanIdle_MainFunction+0x18c>)
 80119da:	f204 2306 	addw	r3, r4, #518	; 0x206
 80119de:	2201      	movs	r2, #1
 80119e0:	2102      	movs	r1, #2
 80119e2:	7820      	ldrb	r0, [r4, #0]
 80119e4:	f7fe f9b4 	bl	800fd50 <canIdle_UpdateCmd>
      appTest.testCase = APPTEST_CANIDLE_NO;
 80119e8:	2300      	movs	r3, #0
 80119ea:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
      break;
 80119ee:	e75d      	b.n	80118ac <AppTest_CanIdle_MainFunction+0x38>
      md80_ConfigMd80Save(&appTest.dev);
 80119f0:	4c03      	ldr	r4, [pc, #12]	; (8011a00 <AppTest_CanIdle_MainFunction+0x18c>)
 80119f2:	1d20      	adds	r0, r4, #4
 80119f4:	f7f9 ffee 	bl	800b9d4 <md80_ConfigMd80Save>
      appTest.testCase = APPTEST_CANIDLE_NO;
 80119f8:	2300      	movs	r3, #0
 80119fa:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
}
 80119fe:	e755      	b.n	80118ac <AppTest_CanIdle_MainFunction+0x38>
 8011a00:	20001604 	.word	0x20001604
 8011a04:	20001608 	.word	0x20001608

08011a08 <AppTest_Init>:
#endif

#if APPTEST_LAN9252 == 1
   AppTest_Lan9252_Init();
#endif
}
 8011a08:	4770      	bx	lr

08011a0a <AppTest_MainFunction>:

void AppTest_MainFunction ()
{
 8011a0a:	b508      	push	{r3, lr}
#if APPTEST_TMC8462 == 1
   AppTest_TMC8462A_MainFunction();
#endif

#if APPTEST_CANIDLE == 1
   AppTest_CanIdle_MainFunction();
 8011a0c:	f7ff ff32 	bl	8011874 <AppTest_CanIdle_MainFunction>
#endif

#if APPTEST_LAN9252 == 1
   AppTest_Lan9252_MainFunction();
#endif
}
 8011a10:	bd08      	pop	{r3, pc}
	...

08011a14 <__assert_func>:
 8011a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a16:	4614      	mov	r4, r2
 8011a18:	461a      	mov	r2, r3
 8011a1a:	4b09      	ldr	r3, [pc, #36]	; (8011a40 <__assert_func+0x2c>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	4605      	mov	r5, r0
 8011a20:	68d8      	ldr	r0, [r3, #12]
 8011a22:	b14c      	cbz	r4, 8011a38 <__assert_func+0x24>
 8011a24:	4b07      	ldr	r3, [pc, #28]	; (8011a44 <__assert_func+0x30>)
 8011a26:	9100      	str	r1, [sp, #0]
 8011a28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a2c:	4906      	ldr	r1, [pc, #24]	; (8011a48 <__assert_func+0x34>)
 8011a2e:	462b      	mov	r3, r5
 8011a30:	f000 f8a0 	bl	8011b74 <fiprintf>
 8011a34:	f000 fa26 	bl	8011e84 <abort>
 8011a38:	4b04      	ldr	r3, [pc, #16]	; (8011a4c <__assert_func+0x38>)
 8011a3a:	461c      	mov	r4, r3
 8011a3c:	e7f3      	b.n	8011a26 <__assert_func+0x12>
 8011a3e:	bf00      	nop
 8011a40:	20001868 	.word	0x20001868
 8011a44:	08016b3e 	.word	0x08016b3e
 8011a48:	08016b4b 	.word	0x08016b4b
 8011a4c:	08016b79 	.word	0x08016b79

08011a50 <std>:
 8011a50:	2300      	movs	r3, #0
 8011a52:	b510      	push	{r4, lr}
 8011a54:	4604      	mov	r4, r0
 8011a56:	e9c0 3300 	strd	r3, r3, [r0]
 8011a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a5e:	6083      	str	r3, [r0, #8]
 8011a60:	8181      	strh	r1, [r0, #12]
 8011a62:	6643      	str	r3, [r0, #100]	; 0x64
 8011a64:	81c2      	strh	r2, [r0, #14]
 8011a66:	6183      	str	r3, [r0, #24]
 8011a68:	4619      	mov	r1, r3
 8011a6a:	2208      	movs	r2, #8
 8011a6c:	305c      	adds	r0, #92	; 0x5c
 8011a6e:	f000 f93d 	bl	8011cec <memset>
 8011a72:	4b05      	ldr	r3, [pc, #20]	; (8011a88 <std+0x38>)
 8011a74:	6263      	str	r3, [r4, #36]	; 0x24
 8011a76:	4b05      	ldr	r3, [pc, #20]	; (8011a8c <std+0x3c>)
 8011a78:	62a3      	str	r3, [r4, #40]	; 0x28
 8011a7a:	4b05      	ldr	r3, [pc, #20]	; (8011a90 <std+0x40>)
 8011a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a7e:	4b05      	ldr	r3, [pc, #20]	; (8011a94 <std+0x44>)
 8011a80:	6224      	str	r4, [r4, #32]
 8011a82:	6323      	str	r3, [r4, #48]	; 0x30
 8011a84:	bd10      	pop	{r4, pc}
 8011a86:	bf00      	nop
 8011a88:	08011bd5 	.word	0x08011bd5
 8011a8c:	08011bf7 	.word	0x08011bf7
 8011a90:	08011c2f 	.word	0x08011c2f
 8011a94:	08011c53 	.word	0x08011c53

08011a98 <stdio_exit_handler>:
 8011a98:	4a02      	ldr	r2, [pc, #8]	; (8011aa4 <stdio_exit_handler+0xc>)
 8011a9a:	4903      	ldr	r1, [pc, #12]	; (8011aa8 <stdio_exit_handler+0x10>)
 8011a9c:	4803      	ldr	r0, [pc, #12]	; (8011aac <stdio_exit_handler+0x14>)
 8011a9e:	f000 b87b 	b.w	8011b98 <_fwalk_sglue>
 8011aa2:	bf00      	nop
 8011aa4:	20001810 	.word	0x20001810
 8011aa8:	080129e9 	.word	0x080129e9
 8011aac:	2000181c 	.word	0x2000181c

08011ab0 <cleanup_stdio>:
 8011ab0:	6841      	ldr	r1, [r0, #4]
 8011ab2:	4b0c      	ldr	r3, [pc, #48]	; (8011ae4 <cleanup_stdio+0x34>)
 8011ab4:	4299      	cmp	r1, r3
 8011ab6:	b510      	push	{r4, lr}
 8011ab8:	4604      	mov	r4, r0
 8011aba:	d001      	beq.n	8011ac0 <cleanup_stdio+0x10>
 8011abc:	f000 ff94 	bl	80129e8 <_fflush_r>
 8011ac0:	68a1      	ldr	r1, [r4, #8]
 8011ac2:	4b09      	ldr	r3, [pc, #36]	; (8011ae8 <cleanup_stdio+0x38>)
 8011ac4:	4299      	cmp	r1, r3
 8011ac6:	d002      	beq.n	8011ace <cleanup_stdio+0x1e>
 8011ac8:	4620      	mov	r0, r4
 8011aca:	f000 ff8d 	bl	80129e8 <_fflush_r>
 8011ace:	68e1      	ldr	r1, [r4, #12]
 8011ad0:	4b06      	ldr	r3, [pc, #24]	; (8011aec <cleanup_stdio+0x3c>)
 8011ad2:	4299      	cmp	r1, r3
 8011ad4:	d004      	beq.n	8011ae0 <cleanup_stdio+0x30>
 8011ad6:	4620      	mov	r0, r4
 8011ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011adc:	f000 bf84 	b.w	80129e8 <_fflush_r>
 8011ae0:	bd10      	pop	{r4, pc}
 8011ae2:	bf00      	nop
 8011ae4:	2000ca04 	.word	0x2000ca04
 8011ae8:	2000ca6c 	.word	0x2000ca6c
 8011aec:	2000cad4 	.word	0x2000cad4

08011af0 <global_stdio_init.part.0>:
 8011af0:	b510      	push	{r4, lr}
 8011af2:	4b0b      	ldr	r3, [pc, #44]	; (8011b20 <global_stdio_init.part.0+0x30>)
 8011af4:	4c0b      	ldr	r4, [pc, #44]	; (8011b24 <global_stdio_init.part.0+0x34>)
 8011af6:	4a0c      	ldr	r2, [pc, #48]	; (8011b28 <global_stdio_init.part.0+0x38>)
 8011af8:	601a      	str	r2, [r3, #0]
 8011afa:	4620      	mov	r0, r4
 8011afc:	2200      	movs	r2, #0
 8011afe:	2104      	movs	r1, #4
 8011b00:	f7ff ffa6 	bl	8011a50 <std>
 8011b04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011b08:	2201      	movs	r2, #1
 8011b0a:	2109      	movs	r1, #9
 8011b0c:	f7ff ffa0 	bl	8011a50 <std>
 8011b10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011b14:	2202      	movs	r2, #2
 8011b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b1a:	2112      	movs	r1, #18
 8011b1c:	f7ff bf98 	b.w	8011a50 <std>
 8011b20:	2000cb3c 	.word	0x2000cb3c
 8011b24:	2000ca04 	.word	0x2000ca04
 8011b28:	08011a99 	.word	0x08011a99

08011b2c <__sfp_lock_acquire>:
 8011b2c:	4801      	ldr	r0, [pc, #4]	; (8011b34 <__sfp_lock_acquire+0x8>)
 8011b2e:	f000 b999 	b.w	8011e64 <__retarget_lock_acquire_recursive>
 8011b32:	bf00      	nop
 8011b34:	2000cb45 	.word	0x2000cb45

08011b38 <__sfp_lock_release>:
 8011b38:	4801      	ldr	r0, [pc, #4]	; (8011b40 <__sfp_lock_release+0x8>)
 8011b3a:	f000 b994 	b.w	8011e66 <__retarget_lock_release_recursive>
 8011b3e:	bf00      	nop
 8011b40:	2000cb45 	.word	0x2000cb45

08011b44 <__sinit>:
 8011b44:	b510      	push	{r4, lr}
 8011b46:	4604      	mov	r4, r0
 8011b48:	f7ff fff0 	bl	8011b2c <__sfp_lock_acquire>
 8011b4c:	6a23      	ldr	r3, [r4, #32]
 8011b4e:	b11b      	cbz	r3, 8011b58 <__sinit+0x14>
 8011b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b54:	f7ff bff0 	b.w	8011b38 <__sfp_lock_release>
 8011b58:	4b04      	ldr	r3, [pc, #16]	; (8011b6c <__sinit+0x28>)
 8011b5a:	6223      	str	r3, [r4, #32]
 8011b5c:	4b04      	ldr	r3, [pc, #16]	; (8011b70 <__sinit+0x2c>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d1f5      	bne.n	8011b50 <__sinit+0xc>
 8011b64:	f7ff ffc4 	bl	8011af0 <global_stdio_init.part.0>
 8011b68:	e7f2      	b.n	8011b50 <__sinit+0xc>
 8011b6a:	bf00      	nop
 8011b6c:	08011ab1 	.word	0x08011ab1
 8011b70:	2000cb3c 	.word	0x2000cb3c

08011b74 <fiprintf>:
 8011b74:	b40e      	push	{r1, r2, r3}
 8011b76:	b503      	push	{r0, r1, lr}
 8011b78:	4601      	mov	r1, r0
 8011b7a:	ab03      	add	r3, sp, #12
 8011b7c:	4805      	ldr	r0, [pc, #20]	; (8011b94 <fiprintf+0x20>)
 8011b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b82:	6800      	ldr	r0, [r0, #0]
 8011b84:	9301      	str	r3, [sp, #4]
 8011b86:	f000 fbff 	bl	8012388 <_vfiprintf_r>
 8011b8a:	b002      	add	sp, #8
 8011b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b90:	b003      	add	sp, #12
 8011b92:	4770      	bx	lr
 8011b94:	20001868 	.word	0x20001868

08011b98 <_fwalk_sglue>:
 8011b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b9c:	4607      	mov	r7, r0
 8011b9e:	4688      	mov	r8, r1
 8011ba0:	4614      	mov	r4, r2
 8011ba2:	2600      	movs	r6, #0
 8011ba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ba8:	f1b9 0901 	subs.w	r9, r9, #1
 8011bac:	d505      	bpl.n	8011bba <_fwalk_sglue+0x22>
 8011bae:	6824      	ldr	r4, [r4, #0]
 8011bb0:	2c00      	cmp	r4, #0
 8011bb2:	d1f7      	bne.n	8011ba4 <_fwalk_sglue+0xc>
 8011bb4:	4630      	mov	r0, r6
 8011bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bba:	89ab      	ldrh	r3, [r5, #12]
 8011bbc:	2b01      	cmp	r3, #1
 8011bbe:	d907      	bls.n	8011bd0 <_fwalk_sglue+0x38>
 8011bc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011bc4:	3301      	adds	r3, #1
 8011bc6:	d003      	beq.n	8011bd0 <_fwalk_sglue+0x38>
 8011bc8:	4629      	mov	r1, r5
 8011bca:	4638      	mov	r0, r7
 8011bcc:	47c0      	blx	r8
 8011bce:	4306      	orrs	r6, r0
 8011bd0:	3568      	adds	r5, #104	; 0x68
 8011bd2:	e7e9      	b.n	8011ba8 <_fwalk_sglue+0x10>

08011bd4 <__sread>:
 8011bd4:	b510      	push	{r4, lr}
 8011bd6:	460c      	mov	r4, r1
 8011bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bdc:	f000 f906 	bl	8011dec <_read_r>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	bfab      	itete	ge
 8011be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011be6:	89a3      	ldrhlt	r3, [r4, #12]
 8011be8:	181b      	addge	r3, r3, r0
 8011bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011bee:	bfac      	ite	ge
 8011bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8011bf2:	81a3      	strhlt	r3, [r4, #12]
 8011bf4:	bd10      	pop	{r4, pc}

08011bf6 <__swrite>:
 8011bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bfa:	461f      	mov	r7, r3
 8011bfc:	898b      	ldrh	r3, [r1, #12]
 8011bfe:	05db      	lsls	r3, r3, #23
 8011c00:	4605      	mov	r5, r0
 8011c02:	460c      	mov	r4, r1
 8011c04:	4616      	mov	r6, r2
 8011c06:	d505      	bpl.n	8011c14 <__swrite+0x1e>
 8011c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c0c:	2302      	movs	r3, #2
 8011c0e:	2200      	movs	r2, #0
 8011c10:	f000 f8da 	bl	8011dc8 <_lseek_r>
 8011c14:	89a3      	ldrh	r3, [r4, #12]
 8011c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c1e:	81a3      	strh	r3, [r4, #12]
 8011c20:	4632      	mov	r2, r6
 8011c22:	463b      	mov	r3, r7
 8011c24:	4628      	mov	r0, r5
 8011c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c2a:	f7ff bbb3 	b.w	8011394 <_write_r>

08011c2e <__sseek>:
 8011c2e:	b510      	push	{r4, lr}
 8011c30:	460c      	mov	r4, r1
 8011c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c36:	f000 f8c7 	bl	8011dc8 <_lseek_r>
 8011c3a:	1c43      	adds	r3, r0, #1
 8011c3c:	89a3      	ldrh	r3, [r4, #12]
 8011c3e:	bf15      	itete	ne
 8011c40:	6560      	strne	r0, [r4, #84]	; 0x54
 8011c42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011c46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011c4a:	81a3      	strheq	r3, [r4, #12]
 8011c4c:	bf18      	it	ne
 8011c4e:	81a3      	strhne	r3, [r4, #12]
 8011c50:	bd10      	pop	{r4, pc}

08011c52 <__sclose>:
 8011c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c56:	f000 b851 	b.w	8011cfc <_close_r>

08011c5a <_vsniprintf_r>:
 8011c5a:	b530      	push	{r4, r5, lr}
 8011c5c:	4614      	mov	r4, r2
 8011c5e:	2c00      	cmp	r4, #0
 8011c60:	b09b      	sub	sp, #108	; 0x6c
 8011c62:	4605      	mov	r5, r0
 8011c64:	461a      	mov	r2, r3
 8011c66:	da05      	bge.n	8011c74 <_vsniprintf_r+0x1a>
 8011c68:	238b      	movs	r3, #139	; 0x8b
 8011c6a:	6003      	str	r3, [r0, #0]
 8011c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c70:	b01b      	add	sp, #108	; 0x6c
 8011c72:	bd30      	pop	{r4, r5, pc}
 8011c74:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011c78:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011c7c:	bf14      	ite	ne
 8011c7e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011c82:	4623      	moveq	r3, r4
 8011c84:	9302      	str	r3, [sp, #8]
 8011c86:	9305      	str	r3, [sp, #20]
 8011c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c8c:	9100      	str	r1, [sp, #0]
 8011c8e:	9104      	str	r1, [sp, #16]
 8011c90:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011c94:	4669      	mov	r1, sp
 8011c96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011c98:	f000 fa4e 	bl	8012138 <_svfiprintf_r>
 8011c9c:	1c43      	adds	r3, r0, #1
 8011c9e:	bfbc      	itt	lt
 8011ca0:	238b      	movlt	r3, #139	; 0x8b
 8011ca2:	602b      	strlt	r3, [r5, #0]
 8011ca4:	2c00      	cmp	r4, #0
 8011ca6:	d0e3      	beq.n	8011c70 <_vsniprintf_r+0x16>
 8011ca8:	9b00      	ldr	r3, [sp, #0]
 8011caa:	2200      	movs	r2, #0
 8011cac:	701a      	strb	r2, [r3, #0]
 8011cae:	e7df      	b.n	8011c70 <_vsniprintf_r+0x16>

08011cb0 <vsniprintf>:
 8011cb0:	b507      	push	{r0, r1, r2, lr}
 8011cb2:	9300      	str	r3, [sp, #0]
 8011cb4:	4613      	mov	r3, r2
 8011cb6:	460a      	mov	r2, r1
 8011cb8:	4601      	mov	r1, r0
 8011cba:	4803      	ldr	r0, [pc, #12]	; (8011cc8 <vsniprintf+0x18>)
 8011cbc:	6800      	ldr	r0, [r0, #0]
 8011cbe:	f7ff ffcc 	bl	8011c5a <_vsniprintf_r>
 8011cc2:	b003      	add	sp, #12
 8011cc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8011cc8:	20001868 	.word	0x20001868

08011ccc <memcmp>:
 8011ccc:	b510      	push	{r4, lr}
 8011cce:	3901      	subs	r1, #1
 8011cd0:	4402      	add	r2, r0
 8011cd2:	4290      	cmp	r0, r2
 8011cd4:	d101      	bne.n	8011cda <memcmp+0xe>
 8011cd6:	2000      	movs	r0, #0
 8011cd8:	e005      	b.n	8011ce6 <memcmp+0x1a>
 8011cda:	7803      	ldrb	r3, [r0, #0]
 8011cdc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011ce0:	42a3      	cmp	r3, r4
 8011ce2:	d001      	beq.n	8011ce8 <memcmp+0x1c>
 8011ce4:	1b18      	subs	r0, r3, r4
 8011ce6:	bd10      	pop	{r4, pc}
 8011ce8:	3001      	adds	r0, #1
 8011cea:	e7f2      	b.n	8011cd2 <memcmp+0x6>

08011cec <memset>:
 8011cec:	4402      	add	r2, r0
 8011cee:	4603      	mov	r3, r0
 8011cf0:	4293      	cmp	r3, r2
 8011cf2:	d100      	bne.n	8011cf6 <memset+0xa>
 8011cf4:	4770      	bx	lr
 8011cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8011cfa:	e7f9      	b.n	8011cf0 <memset+0x4>

08011cfc <_close_r>:
 8011cfc:	b538      	push	{r3, r4, r5, lr}
 8011cfe:	4d06      	ldr	r5, [pc, #24]	; (8011d18 <_close_r+0x1c>)
 8011d00:	2300      	movs	r3, #0
 8011d02:	4604      	mov	r4, r0
 8011d04:	4608      	mov	r0, r1
 8011d06:	602b      	str	r3, [r5, #0]
 8011d08:	f7ef f972 	bl	8000ff0 <_close>
 8011d0c:	1c43      	adds	r3, r0, #1
 8011d0e:	d102      	bne.n	8011d16 <_close_r+0x1a>
 8011d10:	682b      	ldr	r3, [r5, #0]
 8011d12:	b103      	cbz	r3, 8011d16 <_close_r+0x1a>
 8011d14:	6023      	str	r3, [r4, #0]
 8011d16:	bd38      	pop	{r3, r4, r5, pc}
 8011d18:	2000cb40 	.word	0x2000cb40

08011d1c <_reclaim_reent>:
 8011d1c:	4b29      	ldr	r3, [pc, #164]	; (8011dc4 <_reclaim_reent+0xa8>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	4283      	cmp	r3, r0
 8011d22:	b570      	push	{r4, r5, r6, lr}
 8011d24:	4604      	mov	r4, r0
 8011d26:	d04b      	beq.n	8011dc0 <_reclaim_reent+0xa4>
 8011d28:	69c3      	ldr	r3, [r0, #28]
 8011d2a:	b143      	cbz	r3, 8011d3e <_reclaim_reent+0x22>
 8011d2c:	68db      	ldr	r3, [r3, #12]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d144      	bne.n	8011dbc <_reclaim_reent+0xa0>
 8011d32:	69e3      	ldr	r3, [r4, #28]
 8011d34:	6819      	ldr	r1, [r3, #0]
 8011d36:	b111      	cbz	r1, 8011d3e <_reclaim_reent+0x22>
 8011d38:	4620      	mov	r0, r4
 8011d3a:	f000 f8ab 	bl	8011e94 <_free_r>
 8011d3e:	6961      	ldr	r1, [r4, #20]
 8011d40:	b111      	cbz	r1, 8011d48 <_reclaim_reent+0x2c>
 8011d42:	4620      	mov	r0, r4
 8011d44:	f000 f8a6 	bl	8011e94 <_free_r>
 8011d48:	69e1      	ldr	r1, [r4, #28]
 8011d4a:	b111      	cbz	r1, 8011d52 <_reclaim_reent+0x36>
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f000 f8a1 	bl	8011e94 <_free_r>
 8011d52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011d54:	b111      	cbz	r1, 8011d5c <_reclaim_reent+0x40>
 8011d56:	4620      	mov	r0, r4
 8011d58:	f000 f89c 	bl	8011e94 <_free_r>
 8011d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d5e:	b111      	cbz	r1, 8011d66 <_reclaim_reent+0x4a>
 8011d60:	4620      	mov	r0, r4
 8011d62:	f000 f897 	bl	8011e94 <_free_r>
 8011d66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011d68:	b111      	cbz	r1, 8011d70 <_reclaim_reent+0x54>
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f000 f892 	bl	8011e94 <_free_r>
 8011d70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011d72:	b111      	cbz	r1, 8011d7a <_reclaim_reent+0x5e>
 8011d74:	4620      	mov	r0, r4
 8011d76:	f000 f88d 	bl	8011e94 <_free_r>
 8011d7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011d7c:	b111      	cbz	r1, 8011d84 <_reclaim_reent+0x68>
 8011d7e:	4620      	mov	r0, r4
 8011d80:	f000 f888 	bl	8011e94 <_free_r>
 8011d84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011d86:	b111      	cbz	r1, 8011d8e <_reclaim_reent+0x72>
 8011d88:	4620      	mov	r0, r4
 8011d8a:	f000 f883 	bl	8011e94 <_free_r>
 8011d8e:	6a23      	ldr	r3, [r4, #32]
 8011d90:	b1b3      	cbz	r3, 8011dc0 <_reclaim_reent+0xa4>
 8011d92:	4620      	mov	r0, r4
 8011d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d98:	4718      	bx	r3
 8011d9a:	5949      	ldr	r1, [r1, r5]
 8011d9c:	b941      	cbnz	r1, 8011db0 <_reclaim_reent+0x94>
 8011d9e:	3504      	adds	r5, #4
 8011da0:	69e3      	ldr	r3, [r4, #28]
 8011da2:	2d80      	cmp	r5, #128	; 0x80
 8011da4:	68d9      	ldr	r1, [r3, #12]
 8011da6:	d1f8      	bne.n	8011d9a <_reclaim_reent+0x7e>
 8011da8:	4620      	mov	r0, r4
 8011daa:	f000 f873 	bl	8011e94 <_free_r>
 8011dae:	e7c0      	b.n	8011d32 <_reclaim_reent+0x16>
 8011db0:	680e      	ldr	r6, [r1, #0]
 8011db2:	4620      	mov	r0, r4
 8011db4:	f000 f86e 	bl	8011e94 <_free_r>
 8011db8:	4631      	mov	r1, r6
 8011dba:	e7ef      	b.n	8011d9c <_reclaim_reent+0x80>
 8011dbc:	2500      	movs	r5, #0
 8011dbe:	e7ef      	b.n	8011da0 <_reclaim_reent+0x84>
 8011dc0:	bd70      	pop	{r4, r5, r6, pc}
 8011dc2:	bf00      	nop
 8011dc4:	20001868 	.word	0x20001868

08011dc8 <_lseek_r>:
 8011dc8:	b538      	push	{r3, r4, r5, lr}
 8011dca:	4d07      	ldr	r5, [pc, #28]	; (8011de8 <_lseek_r+0x20>)
 8011dcc:	4604      	mov	r4, r0
 8011dce:	4608      	mov	r0, r1
 8011dd0:	4611      	mov	r1, r2
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	602a      	str	r2, [r5, #0]
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	f7ef f914 	bl	8001004 <_lseek>
 8011ddc:	1c43      	adds	r3, r0, #1
 8011dde:	d102      	bne.n	8011de6 <_lseek_r+0x1e>
 8011de0:	682b      	ldr	r3, [r5, #0]
 8011de2:	b103      	cbz	r3, 8011de6 <_lseek_r+0x1e>
 8011de4:	6023      	str	r3, [r4, #0]
 8011de6:	bd38      	pop	{r3, r4, r5, pc}
 8011de8:	2000cb40 	.word	0x2000cb40

08011dec <_read_r>:
 8011dec:	b538      	push	{r3, r4, r5, lr}
 8011dee:	4d07      	ldr	r5, [pc, #28]	; (8011e0c <_read_r+0x20>)
 8011df0:	4604      	mov	r4, r0
 8011df2:	4608      	mov	r0, r1
 8011df4:	4611      	mov	r1, r2
 8011df6:	2200      	movs	r2, #0
 8011df8:	602a      	str	r2, [r5, #0]
 8011dfa:	461a      	mov	r2, r3
 8011dfc:	f7ef f8e8 	bl	8000fd0 <_read>
 8011e00:	1c43      	adds	r3, r0, #1
 8011e02:	d102      	bne.n	8011e0a <_read_r+0x1e>
 8011e04:	682b      	ldr	r3, [r5, #0]
 8011e06:	b103      	cbz	r3, 8011e0a <_read_r+0x1e>
 8011e08:	6023      	str	r3, [r4, #0]
 8011e0a:	bd38      	pop	{r3, r4, r5, pc}
 8011e0c:	2000cb40 	.word	0x2000cb40

08011e10 <__errno>:
 8011e10:	4b01      	ldr	r3, [pc, #4]	; (8011e18 <__errno+0x8>)
 8011e12:	6818      	ldr	r0, [r3, #0]
 8011e14:	4770      	bx	lr
 8011e16:	bf00      	nop
 8011e18:	20001868 	.word	0x20001868

08011e1c <__libc_init_array>:
 8011e1c:	b570      	push	{r4, r5, r6, lr}
 8011e1e:	4d0d      	ldr	r5, [pc, #52]	; (8011e54 <__libc_init_array+0x38>)
 8011e20:	4c0d      	ldr	r4, [pc, #52]	; (8011e58 <__libc_init_array+0x3c>)
 8011e22:	1b64      	subs	r4, r4, r5
 8011e24:	10a4      	asrs	r4, r4, #2
 8011e26:	2600      	movs	r6, #0
 8011e28:	42a6      	cmp	r6, r4
 8011e2a:	d109      	bne.n	8011e40 <__libc_init_array+0x24>
 8011e2c:	4d0b      	ldr	r5, [pc, #44]	; (8011e5c <__libc_init_array+0x40>)
 8011e2e:	4c0c      	ldr	r4, [pc, #48]	; (8011e60 <__libc_init_array+0x44>)
 8011e30:	f000 ffc2 	bl	8012db8 <_init>
 8011e34:	1b64      	subs	r4, r4, r5
 8011e36:	10a4      	asrs	r4, r4, #2
 8011e38:	2600      	movs	r6, #0
 8011e3a:	42a6      	cmp	r6, r4
 8011e3c:	d105      	bne.n	8011e4a <__libc_init_array+0x2e>
 8011e3e:	bd70      	pop	{r4, r5, r6, pc}
 8011e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e44:	4798      	blx	r3
 8011e46:	3601      	adds	r6, #1
 8011e48:	e7ee      	b.n	8011e28 <__libc_init_array+0xc>
 8011e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e4e:	4798      	blx	r3
 8011e50:	3601      	adds	r6, #1
 8011e52:	e7f2      	b.n	8011e3a <__libc_init_array+0x1e>
 8011e54:	08016bb8 	.word	0x08016bb8
 8011e58:	08016bb8 	.word	0x08016bb8
 8011e5c:	08016bb8 	.word	0x08016bb8
 8011e60:	08016bbc 	.word	0x08016bbc

08011e64 <__retarget_lock_acquire_recursive>:
 8011e64:	4770      	bx	lr

08011e66 <__retarget_lock_release_recursive>:
 8011e66:	4770      	bx	lr

08011e68 <memcpy>:
 8011e68:	440a      	add	r2, r1
 8011e6a:	4291      	cmp	r1, r2
 8011e6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011e70:	d100      	bne.n	8011e74 <memcpy+0xc>
 8011e72:	4770      	bx	lr
 8011e74:	b510      	push	{r4, lr}
 8011e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e7e:	4291      	cmp	r1, r2
 8011e80:	d1f9      	bne.n	8011e76 <memcpy+0xe>
 8011e82:	bd10      	pop	{r4, pc}

08011e84 <abort>:
 8011e84:	b508      	push	{r3, lr}
 8011e86:	2006      	movs	r0, #6
 8011e88:	f000 feae 	bl	8012be8 <raise>
 8011e8c:	2001      	movs	r0, #1
 8011e8e:	f7ef f899 	bl	8000fc4 <_exit>
	...

08011e94 <_free_r>:
 8011e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e96:	2900      	cmp	r1, #0
 8011e98:	d044      	beq.n	8011f24 <_free_r+0x90>
 8011e9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e9e:	9001      	str	r0, [sp, #4]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	f1a1 0404 	sub.w	r4, r1, #4
 8011ea6:	bfb8      	it	lt
 8011ea8:	18e4      	addlt	r4, r4, r3
 8011eaa:	f000 f8df 	bl	801206c <__malloc_lock>
 8011eae:	4a1e      	ldr	r2, [pc, #120]	; (8011f28 <_free_r+0x94>)
 8011eb0:	9801      	ldr	r0, [sp, #4]
 8011eb2:	6813      	ldr	r3, [r2, #0]
 8011eb4:	b933      	cbnz	r3, 8011ec4 <_free_r+0x30>
 8011eb6:	6063      	str	r3, [r4, #4]
 8011eb8:	6014      	str	r4, [r2, #0]
 8011eba:	b003      	add	sp, #12
 8011ebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ec0:	f000 b8da 	b.w	8012078 <__malloc_unlock>
 8011ec4:	42a3      	cmp	r3, r4
 8011ec6:	d908      	bls.n	8011eda <_free_r+0x46>
 8011ec8:	6825      	ldr	r5, [r4, #0]
 8011eca:	1961      	adds	r1, r4, r5
 8011ecc:	428b      	cmp	r3, r1
 8011ece:	bf01      	itttt	eq
 8011ed0:	6819      	ldreq	r1, [r3, #0]
 8011ed2:	685b      	ldreq	r3, [r3, #4]
 8011ed4:	1949      	addeq	r1, r1, r5
 8011ed6:	6021      	streq	r1, [r4, #0]
 8011ed8:	e7ed      	b.n	8011eb6 <_free_r+0x22>
 8011eda:	461a      	mov	r2, r3
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	b10b      	cbz	r3, 8011ee4 <_free_r+0x50>
 8011ee0:	42a3      	cmp	r3, r4
 8011ee2:	d9fa      	bls.n	8011eda <_free_r+0x46>
 8011ee4:	6811      	ldr	r1, [r2, #0]
 8011ee6:	1855      	adds	r5, r2, r1
 8011ee8:	42a5      	cmp	r5, r4
 8011eea:	d10b      	bne.n	8011f04 <_free_r+0x70>
 8011eec:	6824      	ldr	r4, [r4, #0]
 8011eee:	4421      	add	r1, r4
 8011ef0:	1854      	adds	r4, r2, r1
 8011ef2:	42a3      	cmp	r3, r4
 8011ef4:	6011      	str	r1, [r2, #0]
 8011ef6:	d1e0      	bne.n	8011eba <_free_r+0x26>
 8011ef8:	681c      	ldr	r4, [r3, #0]
 8011efa:	685b      	ldr	r3, [r3, #4]
 8011efc:	6053      	str	r3, [r2, #4]
 8011efe:	440c      	add	r4, r1
 8011f00:	6014      	str	r4, [r2, #0]
 8011f02:	e7da      	b.n	8011eba <_free_r+0x26>
 8011f04:	d902      	bls.n	8011f0c <_free_r+0x78>
 8011f06:	230c      	movs	r3, #12
 8011f08:	6003      	str	r3, [r0, #0]
 8011f0a:	e7d6      	b.n	8011eba <_free_r+0x26>
 8011f0c:	6825      	ldr	r5, [r4, #0]
 8011f0e:	1961      	adds	r1, r4, r5
 8011f10:	428b      	cmp	r3, r1
 8011f12:	bf04      	itt	eq
 8011f14:	6819      	ldreq	r1, [r3, #0]
 8011f16:	685b      	ldreq	r3, [r3, #4]
 8011f18:	6063      	str	r3, [r4, #4]
 8011f1a:	bf04      	itt	eq
 8011f1c:	1949      	addeq	r1, r1, r5
 8011f1e:	6021      	streq	r1, [r4, #0]
 8011f20:	6054      	str	r4, [r2, #4]
 8011f22:	e7ca      	b.n	8011eba <_free_r+0x26>
 8011f24:	b003      	add	sp, #12
 8011f26:	bd30      	pop	{r4, r5, pc}
 8011f28:	2000cb48 	.word	0x2000cb48

08011f2c <sbrk_aligned>:
 8011f2c:	b570      	push	{r4, r5, r6, lr}
 8011f2e:	4e0e      	ldr	r6, [pc, #56]	; (8011f68 <sbrk_aligned+0x3c>)
 8011f30:	460c      	mov	r4, r1
 8011f32:	6831      	ldr	r1, [r6, #0]
 8011f34:	4605      	mov	r5, r0
 8011f36:	b911      	cbnz	r1, 8011f3e <sbrk_aligned+0x12>
 8011f38:	f000 fe72 	bl	8012c20 <_sbrk_r>
 8011f3c:	6030      	str	r0, [r6, #0]
 8011f3e:	4621      	mov	r1, r4
 8011f40:	4628      	mov	r0, r5
 8011f42:	f000 fe6d 	bl	8012c20 <_sbrk_r>
 8011f46:	1c43      	adds	r3, r0, #1
 8011f48:	d00a      	beq.n	8011f60 <sbrk_aligned+0x34>
 8011f4a:	1cc4      	adds	r4, r0, #3
 8011f4c:	f024 0403 	bic.w	r4, r4, #3
 8011f50:	42a0      	cmp	r0, r4
 8011f52:	d007      	beq.n	8011f64 <sbrk_aligned+0x38>
 8011f54:	1a21      	subs	r1, r4, r0
 8011f56:	4628      	mov	r0, r5
 8011f58:	f000 fe62 	bl	8012c20 <_sbrk_r>
 8011f5c:	3001      	adds	r0, #1
 8011f5e:	d101      	bne.n	8011f64 <sbrk_aligned+0x38>
 8011f60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011f64:	4620      	mov	r0, r4
 8011f66:	bd70      	pop	{r4, r5, r6, pc}
 8011f68:	2000cb4c 	.word	0x2000cb4c

08011f6c <_malloc_r>:
 8011f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f70:	1ccd      	adds	r5, r1, #3
 8011f72:	f025 0503 	bic.w	r5, r5, #3
 8011f76:	3508      	adds	r5, #8
 8011f78:	2d0c      	cmp	r5, #12
 8011f7a:	bf38      	it	cc
 8011f7c:	250c      	movcc	r5, #12
 8011f7e:	2d00      	cmp	r5, #0
 8011f80:	4607      	mov	r7, r0
 8011f82:	db01      	blt.n	8011f88 <_malloc_r+0x1c>
 8011f84:	42a9      	cmp	r1, r5
 8011f86:	d905      	bls.n	8011f94 <_malloc_r+0x28>
 8011f88:	230c      	movs	r3, #12
 8011f8a:	603b      	str	r3, [r7, #0]
 8011f8c:	2600      	movs	r6, #0
 8011f8e:	4630      	mov	r0, r6
 8011f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012068 <_malloc_r+0xfc>
 8011f98:	f000 f868 	bl	801206c <__malloc_lock>
 8011f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8011fa0:	461c      	mov	r4, r3
 8011fa2:	bb5c      	cbnz	r4, 8011ffc <_malloc_r+0x90>
 8011fa4:	4629      	mov	r1, r5
 8011fa6:	4638      	mov	r0, r7
 8011fa8:	f7ff ffc0 	bl	8011f2c <sbrk_aligned>
 8011fac:	1c43      	adds	r3, r0, #1
 8011fae:	4604      	mov	r4, r0
 8011fb0:	d155      	bne.n	801205e <_malloc_r+0xf2>
 8011fb2:	f8d8 4000 	ldr.w	r4, [r8]
 8011fb6:	4626      	mov	r6, r4
 8011fb8:	2e00      	cmp	r6, #0
 8011fba:	d145      	bne.n	8012048 <_malloc_r+0xdc>
 8011fbc:	2c00      	cmp	r4, #0
 8011fbe:	d048      	beq.n	8012052 <_malloc_r+0xe6>
 8011fc0:	6823      	ldr	r3, [r4, #0]
 8011fc2:	4631      	mov	r1, r6
 8011fc4:	4638      	mov	r0, r7
 8011fc6:	eb04 0903 	add.w	r9, r4, r3
 8011fca:	f000 fe29 	bl	8012c20 <_sbrk_r>
 8011fce:	4581      	cmp	r9, r0
 8011fd0:	d13f      	bne.n	8012052 <_malloc_r+0xe6>
 8011fd2:	6821      	ldr	r1, [r4, #0]
 8011fd4:	1a6d      	subs	r5, r5, r1
 8011fd6:	4629      	mov	r1, r5
 8011fd8:	4638      	mov	r0, r7
 8011fda:	f7ff ffa7 	bl	8011f2c <sbrk_aligned>
 8011fde:	3001      	adds	r0, #1
 8011fe0:	d037      	beq.n	8012052 <_malloc_r+0xe6>
 8011fe2:	6823      	ldr	r3, [r4, #0]
 8011fe4:	442b      	add	r3, r5
 8011fe6:	6023      	str	r3, [r4, #0]
 8011fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d038      	beq.n	8012062 <_malloc_r+0xf6>
 8011ff0:	685a      	ldr	r2, [r3, #4]
 8011ff2:	42a2      	cmp	r2, r4
 8011ff4:	d12b      	bne.n	801204e <_malloc_r+0xe2>
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	605a      	str	r2, [r3, #4]
 8011ffa:	e00f      	b.n	801201c <_malloc_r+0xb0>
 8011ffc:	6822      	ldr	r2, [r4, #0]
 8011ffe:	1b52      	subs	r2, r2, r5
 8012000:	d41f      	bmi.n	8012042 <_malloc_r+0xd6>
 8012002:	2a0b      	cmp	r2, #11
 8012004:	d917      	bls.n	8012036 <_malloc_r+0xca>
 8012006:	1961      	adds	r1, r4, r5
 8012008:	42a3      	cmp	r3, r4
 801200a:	6025      	str	r5, [r4, #0]
 801200c:	bf18      	it	ne
 801200e:	6059      	strne	r1, [r3, #4]
 8012010:	6863      	ldr	r3, [r4, #4]
 8012012:	bf08      	it	eq
 8012014:	f8c8 1000 	streq.w	r1, [r8]
 8012018:	5162      	str	r2, [r4, r5]
 801201a:	604b      	str	r3, [r1, #4]
 801201c:	4638      	mov	r0, r7
 801201e:	f104 060b 	add.w	r6, r4, #11
 8012022:	f000 f829 	bl	8012078 <__malloc_unlock>
 8012026:	f026 0607 	bic.w	r6, r6, #7
 801202a:	1d23      	adds	r3, r4, #4
 801202c:	1af2      	subs	r2, r6, r3
 801202e:	d0ae      	beq.n	8011f8e <_malloc_r+0x22>
 8012030:	1b9b      	subs	r3, r3, r6
 8012032:	50a3      	str	r3, [r4, r2]
 8012034:	e7ab      	b.n	8011f8e <_malloc_r+0x22>
 8012036:	42a3      	cmp	r3, r4
 8012038:	6862      	ldr	r2, [r4, #4]
 801203a:	d1dd      	bne.n	8011ff8 <_malloc_r+0x8c>
 801203c:	f8c8 2000 	str.w	r2, [r8]
 8012040:	e7ec      	b.n	801201c <_malloc_r+0xb0>
 8012042:	4623      	mov	r3, r4
 8012044:	6864      	ldr	r4, [r4, #4]
 8012046:	e7ac      	b.n	8011fa2 <_malloc_r+0x36>
 8012048:	4634      	mov	r4, r6
 801204a:	6876      	ldr	r6, [r6, #4]
 801204c:	e7b4      	b.n	8011fb8 <_malloc_r+0x4c>
 801204e:	4613      	mov	r3, r2
 8012050:	e7cc      	b.n	8011fec <_malloc_r+0x80>
 8012052:	230c      	movs	r3, #12
 8012054:	603b      	str	r3, [r7, #0]
 8012056:	4638      	mov	r0, r7
 8012058:	f000 f80e 	bl	8012078 <__malloc_unlock>
 801205c:	e797      	b.n	8011f8e <_malloc_r+0x22>
 801205e:	6025      	str	r5, [r4, #0]
 8012060:	e7dc      	b.n	801201c <_malloc_r+0xb0>
 8012062:	605b      	str	r3, [r3, #4]
 8012064:	deff      	udf	#255	; 0xff
 8012066:	bf00      	nop
 8012068:	2000cb48 	.word	0x2000cb48

0801206c <__malloc_lock>:
 801206c:	4801      	ldr	r0, [pc, #4]	; (8012074 <__malloc_lock+0x8>)
 801206e:	f7ff bef9 	b.w	8011e64 <__retarget_lock_acquire_recursive>
 8012072:	bf00      	nop
 8012074:	2000cb44 	.word	0x2000cb44

08012078 <__malloc_unlock>:
 8012078:	4801      	ldr	r0, [pc, #4]	; (8012080 <__malloc_unlock+0x8>)
 801207a:	f7ff bef4 	b.w	8011e66 <__retarget_lock_release_recursive>
 801207e:	bf00      	nop
 8012080:	2000cb44 	.word	0x2000cb44

08012084 <__ssputs_r>:
 8012084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012088:	688e      	ldr	r6, [r1, #8]
 801208a:	461f      	mov	r7, r3
 801208c:	42be      	cmp	r6, r7
 801208e:	680b      	ldr	r3, [r1, #0]
 8012090:	4682      	mov	sl, r0
 8012092:	460c      	mov	r4, r1
 8012094:	4690      	mov	r8, r2
 8012096:	d82c      	bhi.n	80120f2 <__ssputs_r+0x6e>
 8012098:	898a      	ldrh	r2, [r1, #12]
 801209a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801209e:	d026      	beq.n	80120ee <__ssputs_r+0x6a>
 80120a0:	6965      	ldr	r5, [r4, #20]
 80120a2:	6909      	ldr	r1, [r1, #16]
 80120a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80120a8:	eba3 0901 	sub.w	r9, r3, r1
 80120ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80120b0:	1c7b      	adds	r3, r7, #1
 80120b2:	444b      	add	r3, r9
 80120b4:	106d      	asrs	r5, r5, #1
 80120b6:	429d      	cmp	r5, r3
 80120b8:	bf38      	it	cc
 80120ba:	461d      	movcc	r5, r3
 80120bc:	0553      	lsls	r3, r2, #21
 80120be:	d527      	bpl.n	8012110 <__ssputs_r+0x8c>
 80120c0:	4629      	mov	r1, r5
 80120c2:	f7ff ff53 	bl	8011f6c <_malloc_r>
 80120c6:	4606      	mov	r6, r0
 80120c8:	b360      	cbz	r0, 8012124 <__ssputs_r+0xa0>
 80120ca:	6921      	ldr	r1, [r4, #16]
 80120cc:	464a      	mov	r2, r9
 80120ce:	f7ff fecb 	bl	8011e68 <memcpy>
 80120d2:	89a3      	ldrh	r3, [r4, #12]
 80120d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80120d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120dc:	81a3      	strh	r3, [r4, #12]
 80120de:	6126      	str	r6, [r4, #16]
 80120e0:	6165      	str	r5, [r4, #20]
 80120e2:	444e      	add	r6, r9
 80120e4:	eba5 0509 	sub.w	r5, r5, r9
 80120e8:	6026      	str	r6, [r4, #0]
 80120ea:	60a5      	str	r5, [r4, #8]
 80120ec:	463e      	mov	r6, r7
 80120ee:	42be      	cmp	r6, r7
 80120f0:	d900      	bls.n	80120f4 <__ssputs_r+0x70>
 80120f2:	463e      	mov	r6, r7
 80120f4:	6820      	ldr	r0, [r4, #0]
 80120f6:	4632      	mov	r2, r6
 80120f8:	4641      	mov	r1, r8
 80120fa:	f000 fd33 	bl	8012b64 <memmove>
 80120fe:	68a3      	ldr	r3, [r4, #8]
 8012100:	1b9b      	subs	r3, r3, r6
 8012102:	60a3      	str	r3, [r4, #8]
 8012104:	6823      	ldr	r3, [r4, #0]
 8012106:	4433      	add	r3, r6
 8012108:	6023      	str	r3, [r4, #0]
 801210a:	2000      	movs	r0, #0
 801210c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012110:	462a      	mov	r2, r5
 8012112:	f000 fd95 	bl	8012c40 <_realloc_r>
 8012116:	4606      	mov	r6, r0
 8012118:	2800      	cmp	r0, #0
 801211a:	d1e0      	bne.n	80120de <__ssputs_r+0x5a>
 801211c:	6921      	ldr	r1, [r4, #16]
 801211e:	4650      	mov	r0, sl
 8012120:	f7ff feb8 	bl	8011e94 <_free_r>
 8012124:	230c      	movs	r3, #12
 8012126:	f8ca 3000 	str.w	r3, [sl]
 801212a:	89a3      	ldrh	r3, [r4, #12]
 801212c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012130:	81a3      	strh	r3, [r4, #12]
 8012132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012136:	e7e9      	b.n	801210c <__ssputs_r+0x88>

08012138 <_svfiprintf_r>:
 8012138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801213c:	4698      	mov	r8, r3
 801213e:	898b      	ldrh	r3, [r1, #12]
 8012140:	061b      	lsls	r3, r3, #24
 8012142:	b09d      	sub	sp, #116	; 0x74
 8012144:	4607      	mov	r7, r0
 8012146:	460d      	mov	r5, r1
 8012148:	4614      	mov	r4, r2
 801214a:	d50e      	bpl.n	801216a <_svfiprintf_r+0x32>
 801214c:	690b      	ldr	r3, [r1, #16]
 801214e:	b963      	cbnz	r3, 801216a <_svfiprintf_r+0x32>
 8012150:	2140      	movs	r1, #64	; 0x40
 8012152:	f7ff ff0b 	bl	8011f6c <_malloc_r>
 8012156:	6028      	str	r0, [r5, #0]
 8012158:	6128      	str	r0, [r5, #16]
 801215a:	b920      	cbnz	r0, 8012166 <_svfiprintf_r+0x2e>
 801215c:	230c      	movs	r3, #12
 801215e:	603b      	str	r3, [r7, #0]
 8012160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012164:	e0d0      	b.n	8012308 <_svfiprintf_r+0x1d0>
 8012166:	2340      	movs	r3, #64	; 0x40
 8012168:	616b      	str	r3, [r5, #20]
 801216a:	2300      	movs	r3, #0
 801216c:	9309      	str	r3, [sp, #36]	; 0x24
 801216e:	2320      	movs	r3, #32
 8012170:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012174:	f8cd 800c 	str.w	r8, [sp, #12]
 8012178:	2330      	movs	r3, #48	; 0x30
 801217a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012320 <_svfiprintf_r+0x1e8>
 801217e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012182:	f04f 0901 	mov.w	r9, #1
 8012186:	4623      	mov	r3, r4
 8012188:	469a      	mov	sl, r3
 801218a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801218e:	b10a      	cbz	r2, 8012194 <_svfiprintf_r+0x5c>
 8012190:	2a25      	cmp	r2, #37	; 0x25
 8012192:	d1f9      	bne.n	8012188 <_svfiprintf_r+0x50>
 8012194:	ebba 0b04 	subs.w	fp, sl, r4
 8012198:	d00b      	beq.n	80121b2 <_svfiprintf_r+0x7a>
 801219a:	465b      	mov	r3, fp
 801219c:	4622      	mov	r2, r4
 801219e:	4629      	mov	r1, r5
 80121a0:	4638      	mov	r0, r7
 80121a2:	f7ff ff6f 	bl	8012084 <__ssputs_r>
 80121a6:	3001      	adds	r0, #1
 80121a8:	f000 80a9 	beq.w	80122fe <_svfiprintf_r+0x1c6>
 80121ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121ae:	445a      	add	r2, fp
 80121b0:	9209      	str	r2, [sp, #36]	; 0x24
 80121b2:	f89a 3000 	ldrb.w	r3, [sl]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	f000 80a1 	beq.w	80122fe <_svfiprintf_r+0x1c6>
 80121bc:	2300      	movs	r3, #0
 80121be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121c6:	f10a 0a01 	add.w	sl, sl, #1
 80121ca:	9304      	str	r3, [sp, #16]
 80121cc:	9307      	str	r3, [sp, #28]
 80121ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121d2:	931a      	str	r3, [sp, #104]	; 0x68
 80121d4:	4654      	mov	r4, sl
 80121d6:	2205      	movs	r2, #5
 80121d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121dc:	4850      	ldr	r0, [pc, #320]	; (8012320 <_svfiprintf_r+0x1e8>)
 80121de:	f7ee f86f 	bl	80002c0 <memchr>
 80121e2:	9a04      	ldr	r2, [sp, #16]
 80121e4:	b9d8      	cbnz	r0, 801221e <_svfiprintf_r+0xe6>
 80121e6:	06d0      	lsls	r0, r2, #27
 80121e8:	bf44      	itt	mi
 80121ea:	2320      	movmi	r3, #32
 80121ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121f0:	0711      	lsls	r1, r2, #28
 80121f2:	bf44      	itt	mi
 80121f4:	232b      	movmi	r3, #43	; 0x2b
 80121f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121fa:	f89a 3000 	ldrb.w	r3, [sl]
 80121fe:	2b2a      	cmp	r3, #42	; 0x2a
 8012200:	d015      	beq.n	801222e <_svfiprintf_r+0xf6>
 8012202:	9a07      	ldr	r2, [sp, #28]
 8012204:	4654      	mov	r4, sl
 8012206:	2000      	movs	r0, #0
 8012208:	f04f 0c0a 	mov.w	ip, #10
 801220c:	4621      	mov	r1, r4
 801220e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012212:	3b30      	subs	r3, #48	; 0x30
 8012214:	2b09      	cmp	r3, #9
 8012216:	d94d      	bls.n	80122b4 <_svfiprintf_r+0x17c>
 8012218:	b1b0      	cbz	r0, 8012248 <_svfiprintf_r+0x110>
 801221a:	9207      	str	r2, [sp, #28]
 801221c:	e014      	b.n	8012248 <_svfiprintf_r+0x110>
 801221e:	eba0 0308 	sub.w	r3, r0, r8
 8012222:	fa09 f303 	lsl.w	r3, r9, r3
 8012226:	4313      	orrs	r3, r2
 8012228:	9304      	str	r3, [sp, #16]
 801222a:	46a2      	mov	sl, r4
 801222c:	e7d2      	b.n	80121d4 <_svfiprintf_r+0x9c>
 801222e:	9b03      	ldr	r3, [sp, #12]
 8012230:	1d19      	adds	r1, r3, #4
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	9103      	str	r1, [sp, #12]
 8012236:	2b00      	cmp	r3, #0
 8012238:	bfbb      	ittet	lt
 801223a:	425b      	neglt	r3, r3
 801223c:	f042 0202 	orrlt.w	r2, r2, #2
 8012240:	9307      	strge	r3, [sp, #28]
 8012242:	9307      	strlt	r3, [sp, #28]
 8012244:	bfb8      	it	lt
 8012246:	9204      	strlt	r2, [sp, #16]
 8012248:	7823      	ldrb	r3, [r4, #0]
 801224a:	2b2e      	cmp	r3, #46	; 0x2e
 801224c:	d10c      	bne.n	8012268 <_svfiprintf_r+0x130>
 801224e:	7863      	ldrb	r3, [r4, #1]
 8012250:	2b2a      	cmp	r3, #42	; 0x2a
 8012252:	d134      	bne.n	80122be <_svfiprintf_r+0x186>
 8012254:	9b03      	ldr	r3, [sp, #12]
 8012256:	1d1a      	adds	r2, r3, #4
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	9203      	str	r2, [sp, #12]
 801225c:	2b00      	cmp	r3, #0
 801225e:	bfb8      	it	lt
 8012260:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012264:	3402      	adds	r4, #2
 8012266:	9305      	str	r3, [sp, #20]
 8012268:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012330 <_svfiprintf_r+0x1f8>
 801226c:	7821      	ldrb	r1, [r4, #0]
 801226e:	2203      	movs	r2, #3
 8012270:	4650      	mov	r0, sl
 8012272:	f7ee f825 	bl	80002c0 <memchr>
 8012276:	b138      	cbz	r0, 8012288 <_svfiprintf_r+0x150>
 8012278:	9b04      	ldr	r3, [sp, #16]
 801227a:	eba0 000a 	sub.w	r0, r0, sl
 801227e:	2240      	movs	r2, #64	; 0x40
 8012280:	4082      	lsls	r2, r0
 8012282:	4313      	orrs	r3, r2
 8012284:	3401      	adds	r4, #1
 8012286:	9304      	str	r3, [sp, #16]
 8012288:	f814 1b01 	ldrb.w	r1, [r4], #1
 801228c:	4825      	ldr	r0, [pc, #148]	; (8012324 <_svfiprintf_r+0x1ec>)
 801228e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012292:	2206      	movs	r2, #6
 8012294:	f7ee f814 	bl	80002c0 <memchr>
 8012298:	2800      	cmp	r0, #0
 801229a:	d038      	beq.n	801230e <_svfiprintf_r+0x1d6>
 801229c:	4b22      	ldr	r3, [pc, #136]	; (8012328 <_svfiprintf_r+0x1f0>)
 801229e:	bb1b      	cbnz	r3, 80122e8 <_svfiprintf_r+0x1b0>
 80122a0:	9b03      	ldr	r3, [sp, #12]
 80122a2:	3307      	adds	r3, #7
 80122a4:	f023 0307 	bic.w	r3, r3, #7
 80122a8:	3308      	adds	r3, #8
 80122aa:	9303      	str	r3, [sp, #12]
 80122ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122ae:	4433      	add	r3, r6
 80122b0:	9309      	str	r3, [sp, #36]	; 0x24
 80122b2:	e768      	b.n	8012186 <_svfiprintf_r+0x4e>
 80122b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80122b8:	460c      	mov	r4, r1
 80122ba:	2001      	movs	r0, #1
 80122bc:	e7a6      	b.n	801220c <_svfiprintf_r+0xd4>
 80122be:	2300      	movs	r3, #0
 80122c0:	3401      	adds	r4, #1
 80122c2:	9305      	str	r3, [sp, #20]
 80122c4:	4619      	mov	r1, r3
 80122c6:	f04f 0c0a 	mov.w	ip, #10
 80122ca:	4620      	mov	r0, r4
 80122cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122d0:	3a30      	subs	r2, #48	; 0x30
 80122d2:	2a09      	cmp	r2, #9
 80122d4:	d903      	bls.n	80122de <_svfiprintf_r+0x1a6>
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d0c6      	beq.n	8012268 <_svfiprintf_r+0x130>
 80122da:	9105      	str	r1, [sp, #20]
 80122dc:	e7c4      	b.n	8012268 <_svfiprintf_r+0x130>
 80122de:	fb0c 2101 	mla	r1, ip, r1, r2
 80122e2:	4604      	mov	r4, r0
 80122e4:	2301      	movs	r3, #1
 80122e6:	e7f0      	b.n	80122ca <_svfiprintf_r+0x192>
 80122e8:	ab03      	add	r3, sp, #12
 80122ea:	9300      	str	r3, [sp, #0]
 80122ec:	462a      	mov	r2, r5
 80122ee:	4b0f      	ldr	r3, [pc, #60]	; (801232c <_svfiprintf_r+0x1f4>)
 80122f0:	a904      	add	r1, sp, #16
 80122f2:	4638      	mov	r0, r7
 80122f4:	f3af 8000 	nop.w
 80122f8:	1c42      	adds	r2, r0, #1
 80122fa:	4606      	mov	r6, r0
 80122fc:	d1d6      	bne.n	80122ac <_svfiprintf_r+0x174>
 80122fe:	89ab      	ldrh	r3, [r5, #12]
 8012300:	065b      	lsls	r3, r3, #25
 8012302:	f53f af2d 	bmi.w	8012160 <_svfiprintf_r+0x28>
 8012306:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012308:	b01d      	add	sp, #116	; 0x74
 801230a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801230e:	ab03      	add	r3, sp, #12
 8012310:	9300      	str	r3, [sp, #0]
 8012312:	462a      	mov	r2, r5
 8012314:	4b05      	ldr	r3, [pc, #20]	; (801232c <_svfiprintf_r+0x1f4>)
 8012316:	a904      	add	r1, sp, #16
 8012318:	4638      	mov	r0, r7
 801231a:	f000 f9bd 	bl	8012698 <_printf_i>
 801231e:	e7eb      	b.n	80122f8 <_svfiprintf_r+0x1c0>
 8012320:	08016b7a 	.word	0x08016b7a
 8012324:	08016b84 	.word	0x08016b84
 8012328:	00000000 	.word	0x00000000
 801232c:	08012085 	.word	0x08012085
 8012330:	08016b80 	.word	0x08016b80

08012334 <__sfputc_r>:
 8012334:	6893      	ldr	r3, [r2, #8]
 8012336:	3b01      	subs	r3, #1
 8012338:	2b00      	cmp	r3, #0
 801233a:	b410      	push	{r4}
 801233c:	6093      	str	r3, [r2, #8]
 801233e:	da08      	bge.n	8012352 <__sfputc_r+0x1e>
 8012340:	6994      	ldr	r4, [r2, #24]
 8012342:	42a3      	cmp	r3, r4
 8012344:	db01      	blt.n	801234a <__sfputc_r+0x16>
 8012346:	290a      	cmp	r1, #10
 8012348:	d103      	bne.n	8012352 <__sfputc_r+0x1e>
 801234a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801234e:	f000 bb73 	b.w	8012a38 <__swbuf_r>
 8012352:	6813      	ldr	r3, [r2, #0]
 8012354:	1c58      	adds	r0, r3, #1
 8012356:	6010      	str	r0, [r2, #0]
 8012358:	7019      	strb	r1, [r3, #0]
 801235a:	4608      	mov	r0, r1
 801235c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012360:	4770      	bx	lr

08012362 <__sfputs_r>:
 8012362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012364:	4606      	mov	r6, r0
 8012366:	460f      	mov	r7, r1
 8012368:	4614      	mov	r4, r2
 801236a:	18d5      	adds	r5, r2, r3
 801236c:	42ac      	cmp	r4, r5
 801236e:	d101      	bne.n	8012374 <__sfputs_r+0x12>
 8012370:	2000      	movs	r0, #0
 8012372:	e007      	b.n	8012384 <__sfputs_r+0x22>
 8012374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012378:	463a      	mov	r2, r7
 801237a:	4630      	mov	r0, r6
 801237c:	f7ff ffda 	bl	8012334 <__sfputc_r>
 8012380:	1c43      	adds	r3, r0, #1
 8012382:	d1f3      	bne.n	801236c <__sfputs_r+0xa>
 8012384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012388 <_vfiprintf_r>:
 8012388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801238c:	460d      	mov	r5, r1
 801238e:	b09d      	sub	sp, #116	; 0x74
 8012390:	4614      	mov	r4, r2
 8012392:	4698      	mov	r8, r3
 8012394:	4606      	mov	r6, r0
 8012396:	b118      	cbz	r0, 80123a0 <_vfiprintf_r+0x18>
 8012398:	6a03      	ldr	r3, [r0, #32]
 801239a:	b90b      	cbnz	r3, 80123a0 <_vfiprintf_r+0x18>
 801239c:	f7ff fbd2 	bl	8011b44 <__sinit>
 80123a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123a2:	07d9      	lsls	r1, r3, #31
 80123a4:	d405      	bmi.n	80123b2 <_vfiprintf_r+0x2a>
 80123a6:	89ab      	ldrh	r3, [r5, #12]
 80123a8:	059a      	lsls	r2, r3, #22
 80123aa:	d402      	bmi.n	80123b2 <_vfiprintf_r+0x2a>
 80123ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123ae:	f7ff fd59 	bl	8011e64 <__retarget_lock_acquire_recursive>
 80123b2:	89ab      	ldrh	r3, [r5, #12]
 80123b4:	071b      	lsls	r3, r3, #28
 80123b6:	d501      	bpl.n	80123bc <_vfiprintf_r+0x34>
 80123b8:	692b      	ldr	r3, [r5, #16]
 80123ba:	b99b      	cbnz	r3, 80123e4 <_vfiprintf_r+0x5c>
 80123bc:	4629      	mov	r1, r5
 80123be:	4630      	mov	r0, r6
 80123c0:	f000 fb78 	bl	8012ab4 <__swsetup_r>
 80123c4:	b170      	cbz	r0, 80123e4 <_vfiprintf_r+0x5c>
 80123c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123c8:	07dc      	lsls	r4, r3, #31
 80123ca:	d504      	bpl.n	80123d6 <_vfiprintf_r+0x4e>
 80123cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123d0:	b01d      	add	sp, #116	; 0x74
 80123d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123d6:	89ab      	ldrh	r3, [r5, #12]
 80123d8:	0598      	lsls	r0, r3, #22
 80123da:	d4f7      	bmi.n	80123cc <_vfiprintf_r+0x44>
 80123dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123de:	f7ff fd42 	bl	8011e66 <__retarget_lock_release_recursive>
 80123e2:	e7f3      	b.n	80123cc <_vfiprintf_r+0x44>
 80123e4:	2300      	movs	r3, #0
 80123e6:	9309      	str	r3, [sp, #36]	; 0x24
 80123e8:	2320      	movs	r3, #32
 80123ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80123ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80123f2:	2330      	movs	r3, #48	; 0x30
 80123f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80125a8 <_vfiprintf_r+0x220>
 80123f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80123fc:	f04f 0901 	mov.w	r9, #1
 8012400:	4623      	mov	r3, r4
 8012402:	469a      	mov	sl, r3
 8012404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012408:	b10a      	cbz	r2, 801240e <_vfiprintf_r+0x86>
 801240a:	2a25      	cmp	r2, #37	; 0x25
 801240c:	d1f9      	bne.n	8012402 <_vfiprintf_r+0x7a>
 801240e:	ebba 0b04 	subs.w	fp, sl, r4
 8012412:	d00b      	beq.n	801242c <_vfiprintf_r+0xa4>
 8012414:	465b      	mov	r3, fp
 8012416:	4622      	mov	r2, r4
 8012418:	4629      	mov	r1, r5
 801241a:	4630      	mov	r0, r6
 801241c:	f7ff ffa1 	bl	8012362 <__sfputs_r>
 8012420:	3001      	adds	r0, #1
 8012422:	f000 80a9 	beq.w	8012578 <_vfiprintf_r+0x1f0>
 8012426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012428:	445a      	add	r2, fp
 801242a:	9209      	str	r2, [sp, #36]	; 0x24
 801242c:	f89a 3000 	ldrb.w	r3, [sl]
 8012430:	2b00      	cmp	r3, #0
 8012432:	f000 80a1 	beq.w	8012578 <_vfiprintf_r+0x1f0>
 8012436:	2300      	movs	r3, #0
 8012438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801243c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012440:	f10a 0a01 	add.w	sl, sl, #1
 8012444:	9304      	str	r3, [sp, #16]
 8012446:	9307      	str	r3, [sp, #28]
 8012448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801244c:	931a      	str	r3, [sp, #104]	; 0x68
 801244e:	4654      	mov	r4, sl
 8012450:	2205      	movs	r2, #5
 8012452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012456:	4854      	ldr	r0, [pc, #336]	; (80125a8 <_vfiprintf_r+0x220>)
 8012458:	f7ed ff32 	bl	80002c0 <memchr>
 801245c:	9a04      	ldr	r2, [sp, #16]
 801245e:	b9d8      	cbnz	r0, 8012498 <_vfiprintf_r+0x110>
 8012460:	06d1      	lsls	r1, r2, #27
 8012462:	bf44      	itt	mi
 8012464:	2320      	movmi	r3, #32
 8012466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801246a:	0713      	lsls	r3, r2, #28
 801246c:	bf44      	itt	mi
 801246e:	232b      	movmi	r3, #43	; 0x2b
 8012470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012474:	f89a 3000 	ldrb.w	r3, [sl]
 8012478:	2b2a      	cmp	r3, #42	; 0x2a
 801247a:	d015      	beq.n	80124a8 <_vfiprintf_r+0x120>
 801247c:	9a07      	ldr	r2, [sp, #28]
 801247e:	4654      	mov	r4, sl
 8012480:	2000      	movs	r0, #0
 8012482:	f04f 0c0a 	mov.w	ip, #10
 8012486:	4621      	mov	r1, r4
 8012488:	f811 3b01 	ldrb.w	r3, [r1], #1
 801248c:	3b30      	subs	r3, #48	; 0x30
 801248e:	2b09      	cmp	r3, #9
 8012490:	d94d      	bls.n	801252e <_vfiprintf_r+0x1a6>
 8012492:	b1b0      	cbz	r0, 80124c2 <_vfiprintf_r+0x13a>
 8012494:	9207      	str	r2, [sp, #28]
 8012496:	e014      	b.n	80124c2 <_vfiprintf_r+0x13a>
 8012498:	eba0 0308 	sub.w	r3, r0, r8
 801249c:	fa09 f303 	lsl.w	r3, r9, r3
 80124a0:	4313      	orrs	r3, r2
 80124a2:	9304      	str	r3, [sp, #16]
 80124a4:	46a2      	mov	sl, r4
 80124a6:	e7d2      	b.n	801244e <_vfiprintf_r+0xc6>
 80124a8:	9b03      	ldr	r3, [sp, #12]
 80124aa:	1d19      	adds	r1, r3, #4
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	9103      	str	r1, [sp, #12]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	bfbb      	ittet	lt
 80124b4:	425b      	neglt	r3, r3
 80124b6:	f042 0202 	orrlt.w	r2, r2, #2
 80124ba:	9307      	strge	r3, [sp, #28]
 80124bc:	9307      	strlt	r3, [sp, #28]
 80124be:	bfb8      	it	lt
 80124c0:	9204      	strlt	r2, [sp, #16]
 80124c2:	7823      	ldrb	r3, [r4, #0]
 80124c4:	2b2e      	cmp	r3, #46	; 0x2e
 80124c6:	d10c      	bne.n	80124e2 <_vfiprintf_r+0x15a>
 80124c8:	7863      	ldrb	r3, [r4, #1]
 80124ca:	2b2a      	cmp	r3, #42	; 0x2a
 80124cc:	d134      	bne.n	8012538 <_vfiprintf_r+0x1b0>
 80124ce:	9b03      	ldr	r3, [sp, #12]
 80124d0:	1d1a      	adds	r2, r3, #4
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	9203      	str	r2, [sp, #12]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	bfb8      	it	lt
 80124da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80124de:	3402      	adds	r4, #2
 80124e0:	9305      	str	r3, [sp, #20]
 80124e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80125b8 <_vfiprintf_r+0x230>
 80124e6:	7821      	ldrb	r1, [r4, #0]
 80124e8:	2203      	movs	r2, #3
 80124ea:	4650      	mov	r0, sl
 80124ec:	f7ed fee8 	bl	80002c0 <memchr>
 80124f0:	b138      	cbz	r0, 8012502 <_vfiprintf_r+0x17a>
 80124f2:	9b04      	ldr	r3, [sp, #16]
 80124f4:	eba0 000a 	sub.w	r0, r0, sl
 80124f8:	2240      	movs	r2, #64	; 0x40
 80124fa:	4082      	lsls	r2, r0
 80124fc:	4313      	orrs	r3, r2
 80124fe:	3401      	adds	r4, #1
 8012500:	9304      	str	r3, [sp, #16]
 8012502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012506:	4829      	ldr	r0, [pc, #164]	; (80125ac <_vfiprintf_r+0x224>)
 8012508:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801250c:	2206      	movs	r2, #6
 801250e:	f7ed fed7 	bl	80002c0 <memchr>
 8012512:	2800      	cmp	r0, #0
 8012514:	d03f      	beq.n	8012596 <_vfiprintf_r+0x20e>
 8012516:	4b26      	ldr	r3, [pc, #152]	; (80125b0 <_vfiprintf_r+0x228>)
 8012518:	bb1b      	cbnz	r3, 8012562 <_vfiprintf_r+0x1da>
 801251a:	9b03      	ldr	r3, [sp, #12]
 801251c:	3307      	adds	r3, #7
 801251e:	f023 0307 	bic.w	r3, r3, #7
 8012522:	3308      	adds	r3, #8
 8012524:	9303      	str	r3, [sp, #12]
 8012526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012528:	443b      	add	r3, r7
 801252a:	9309      	str	r3, [sp, #36]	; 0x24
 801252c:	e768      	b.n	8012400 <_vfiprintf_r+0x78>
 801252e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012532:	460c      	mov	r4, r1
 8012534:	2001      	movs	r0, #1
 8012536:	e7a6      	b.n	8012486 <_vfiprintf_r+0xfe>
 8012538:	2300      	movs	r3, #0
 801253a:	3401      	adds	r4, #1
 801253c:	9305      	str	r3, [sp, #20]
 801253e:	4619      	mov	r1, r3
 8012540:	f04f 0c0a 	mov.w	ip, #10
 8012544:	4620      	mov	r0, r4
 8012546:	f810 2b01 	ldrb.w	r2, [r0], #1
 801254a:	3a30      	subs	r2, #48	; 0x30
 801254c:	2a09      	cmp	r2, #9
 801254e:	d903      	bls.n	8012558 <_vfiprintf_r+0x1d0>
 8012550:	2b00      	cmp	r3, #0
 8012552:	d0c6      	beq.n	80124e2 <_vfiprintf_r+0x15a>
 8012554:	9105      	str	r1, [sp, #20]
 8012556:	e7c4      	b.n	80124e2 <_vfiprintf_r+0x15a>
 8012558:	fb0c 2101 	mla	r1, ip, r1, r2
 801255c:	4604      	mov	r4, r0
 801255e:	2301      	movs	r3, #1
 8012560:	e7f0      	b.n	8012544 <_vfiprintf_r+0x1bc>
 8012562:	ab03      	add	r3, sp, #12
 8012564:	9300      	str	r3, [sp, #0]
 8012566:	462a      	mov	r2, r5
 8012568:	4b12      	ldr	r3, [pc, #72]	; (80125b4 <_vfiprintf_r+0x22c>)
 801256a:	a904      	add	r1, sp, #16
 801256c:	4630      	mov	r0, r6
 801256e:	f3af 8000 	nop.w
 8012572:	4607      	mov	r7, r0
 8012574:	1c78      	adds	r0, r7, #1
 8012576:	d1d6      	bne.n	8012526 <_vfiprintf_r+0x19e>
 8012578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801257a:	07d9      	lsls	r1, r3, #31
 801257c:	d405      	bmi.n	801258a <_vfiprintf_r+0x202>
 801257e:	89ab      	ldrh	r3, [r5, #12]
 8012580:	059a      	lsls	r2, r3, #22
 8012582:	d402      	bmi.n	801258a <_vfiprintf_r+0x202>
 8012584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012586:	f7ff fc6e 	bl	8011e66 <__retarget_lock_release_recursive>
 801258a:	89ab      	ldrh	r3, [r5, #12]
 801258c:	065b      	lsls	r3, r3, #25
 801258e:	f53f af1d 	bmi.w	80123cc <_vfiprintf_r+0x44>
 8012592:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012594:	e71c      	b.n	80123d0 <_vfiprintf_r+0x48>
 8012596:	ab03      	add	r3, sp, #12
 8012598:	9300      	str	r3, [sp, #0]
 801259a:	462a      	mov	r2, r5
 801259c:	4b05      	ldr	r3, [pc, #20]	; (80125b4 <_vfiprintf_r+0x22c>)
 801259e:	a904      	add	r1, sp, #16
 80125a0:	4630      	mov	r0, r6
 80125a2:	f000 f879 	bl	8012698 <_printf_i>
 80125a6:	e7e4      	b.n	8012572 <_vfiprintf_r+0x1ea>
 80125a8:	08016b7a 	.word	0x08016b7a
 80125ac:	08016b84 	.word	0x08016b84
 80125b0:	00000000 	.word	0x00000000
 80125b4:	08012363 	.word	0x08012363
 80125b8:	08016b80 	.word	0x08016b80

080125bc <_printf_common>:
 80125bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125c0:	4616      	mov	r6, r2
 80125c2:	4699      	mov	r9, r3
 80125c4:	688a      	ldr	r2, [r1, #8]
 80125c6:	690b      	ldr	r3, [r1, #16]
 80125c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80125cc:	4293      	cmp	r3, r2
 80125ce:	bfb8      	it	lt
 80125d0:	4613      	movlt	r3, r2
 80125d2:	6033      	str	r3, [r6, #0]
 80125d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80125d8:	4607      	mov	r7, r0
 80125da:	460c      	mov	r4, r1
 80125dc:	b10a      	cbz	r2, 80125e2 <_printf_common+0x26>
 80125de:	3301      	adds	r3, #1
 80125e0:	6033      	str	r3, [r6, #0]
 80125e2:	6823      	ldr	r3, [r4, #0]
 80125e4:	0699      	lsls	r1, r3, #26
 80125e6:	bf42      	ittt	mi
 80125e8:	6833      	ldrmi	r3, [r6, #0]
 80125ea:	3302      	addmi	r3, #2
 80125ec:	6033      	strmi	r3, [r6, #0]
 80125ee:	6825      	ldr	r5, [r4, #0]
 80125f0:	f015 0506 	ands.w	r5, r5, #6
 80125f4:	d106      	bne.n	8012604 <_printf_common+0x48>
 80125f6:	f104 0a19 	add.w	sl, r4, #25
 80125fa:	68e3      	ldr	r3, [r4, #12]
 80125fc:	6832      	ldr	r2, [r6, #0]
 80125fe:	1a9b      	subs	r3, r3, r2
 8012600:	42ab      	cmp	r3, r5
 8012602:	dc26      	bgt.n	8012652 <_printf_common+0x96>
 8012604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012608:	1e13      	subs	r3, r2, #0
 801260a:	6822      	ldr	r2, [r4, #0]
 801260c:	bf18      	it	ne
 801260e:	2301      	movne	r3, #1
 8012610:	0692      	lsls	r2, r2, #26
 8012612:	d42b      	bmi.n	801266c <_printf_common+0xb0>
 8012614:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012618:	4649      	mov	r1, r9
 801261a:	4638      	mov	r0, r7
 801261c:	47c0      	blx	r8
 801261e:	3001      	adds	r0, #1
 8012620:	d01e      	beq.n	8012660 <_printf_common+0xa4>
 8012622:	6823      	ldr	r3, [r4, #0]
 8012624:	6922      	ldr	r2, [r4, #16]
 8012626:	f003 0306 	and.w	r3, r3, #6
 801262a:	2b04      	cmp	r3, #4
 801262c:	bf02      	ittt	eq
 801262e:	68e5      	ldreq	r5, [r4, #12]
 8012630:	6833      	ldreq	r3, [r6, #0]
 8012632:	1aed      	subeq	r5, r5, r3
 8012634:	68a3      	ldr	r3, [r4, #8]
 8012636:	bf0c      	ite	eq
 8012638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801263c:	2500      	movne	r5, #0
 801263e:	4293      	cmp	r3, r2
 8012640:	bfc4      	itt	gt
 8012642:	1a9b      	subgt	r3, r3, r2
 8012644:	18ed      	addgt	r5, r5, r3
 8012646:	2600      	movs	r6, #0
 8012648:	341a      	adds	r4, #26
 801264a:	42b5      	cmp	r5, r6
 801264c:	d11a      	bne.n	8012684 <_printf_common+0xc8>
 801264e:	2000      	movs	r0, #0
 8012650:	e008      	b.n	8012664 <_printf_common+0xa8>
 8012652:	2301      	movs	r3, #1
 8012654:	4652      	mov	r2, sl
 8012656:	4649      	mov	r1, r9
 8012658:	4638      	mov	r0, r7
 801265a:	47c0      	blx	r8
 801265c:	3001      	adds	r0, #1
 801265e:	d103      	bne.n	8012668 <_printf_common+0xac>
 8012660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012668:	3501      	adds	r5, #1
 801266a:	e7c6      	b.n	80125fa <_printf_common+0x3e>
 801266c:	18e1      	adds	r1, r4, r3
 801266e:	1c5a      	adds	r2, r3, #1
 8012670:	2030      	movs	r0, #48	; 0x30
 8012672:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012676:	4422      	add	r2, r4
 8012678:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801267c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012680:	3302      	adds	r3, #2
 8012682:	e7c7      	b.n	8012614 <_printf_common+0x58>
 8012684:	2301      	movs	r3, #1
 8012686:	4622      	mov	r2, r4
 8012688:	4649      	mov	r1, r9
 801268a:	4638      	mov	r0, r7
 801268c:	47c0      	blx	r8
 801268e:	3001      	adds	r0, #1
 8012690:	d0e6      	beq.n	8012660 <_printf_common+0xa4>
 8012692:	3601      	adds	r6, #1
 8012694:	e7d9      	b.n	801264a <_printf_common+0x8e>
	...

08012698 <_printf_i>:
 8012698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801269c:	7e0f      	ldrb	r7, [r1, #24]
 801269e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80126a0:	2f78      	cmp	r7, #120	; 0x78
 80126a2:	4691      	mov	r9, r2
 80126a4:	4680      	mov	r8, r0
 80126a6:	460c      	mov	r4, r1
 80126a8:	469a      	mov	sl, r3
 80126aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80126ae:	d807      	bhi.n	80126c0 <_printf_i+0x28>
 80126b0:	2f62      	cmp	r7, #98	; 0x62
 80126b2:	d80a      	bhi.n	80126ca <_printf_i+0x32>
 80126b4:	2f00      	cmp	r7, #0
 80126b6:	f000 80d4 	beq.w	8012862 <_printf_i+0x1ca>
 80126ba:	2f58      	cmp	r7, #88	; 0x58
 80126bc:	f000 80c0 	beq.w	8012840 <_printf_i+0x1a8>
 80126c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80126c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80126c8:	e03a      	b.n	8012740 <_printf_i+0xa8>
 80126ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80126ce:	2b15      	cmp	r3, #21
 80126d0:	d8f6      	bhi.n	80126c0 <_printf_i+0x28>
 80126d2:	a101      	add	r1, pc, #4	; (adr r1, 80126d8 <_printf_i+0x40>)
 80126d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80126d8:	08012731 	.word	0x08012731
 80126dc:	08012745 	.word	0x08012745
 80126e0:	080126c1 	.word	0x080126c1
 80126e4:	080126c1 	.word	0x080126c1
 80126e8:	080126c1 	.word	0x080126c1
 80126ec:	080126c1 	.word	0x080126c1
 80126f0:	08012745 	.word	0x08012745
 80126f4:	080126c1 	.word	0x080126c1
 80126f8:	080126c1 	.word	0x080126c1
 80126fc:	080126c1 	.word	0x080126c1
 8012700:	080126c1 	.word	0x080126c1
 8012704:	08012849 	.word	0x08012849
 8012708:	08012771 	.word	0x08012771
 801270c:	08012803 	.word	0x08012803
 8012710:	080126c1 	.word	0x080126c1
 8012714:	080126c1 	.word	0x080126c1
 8012718:	0801286b 	.word	0x0801286b
 801271c:	080126c1 	.word	0x080126c1
 8012720:	08012771 	.word	0x08012771
 8012724:	080126c1 	.word	0x080126c1
 8012728:	080126c1 	.word	0x080126c1
 801272c:	0801280b 	.word	0x0801280b
 8012730:	682b      	ldr	r3, [r5, #0]
 8012732:	1d1a      	adds	r2, r3, #4
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	602a      	str	r2, [r5, #0]
 8012738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801273c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012740:	2301      	movs	r3, #1
 8012742:	e09f      	b.n	8012884 <_printf_i+0x1ec>
 8012744:	6820      	ldr	r0, [r4, #0]
 8012746:	682b      	ldr	r3, [r5, #0]
 8012748:	0607      	lsls	r7, r0, #24
 801274a:	f103 0104 	add.w	r1, r3, #4
 801274e:	6029      	str	r1, [r5, #0]
 8012750:	d501      	bpl.n	8012756 <_printf_i+0xbe>
 8012752:	681e      	ldr	r6, [r3, #0]
 8012754:	e003      	b.n	801275e <_printf_i+0xc6>
 8012756:	0646      	lsls	r6, r0, #25
 8012758:	d5fb      	bpl.n	8012752 <_printf_i+0xba>
 801275a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801275e:	2e00      	cmp	r6, #0
 8012760:	da03      	bge.n	801276a <_printf_i+0xd2>
 8012762:	232d      	movs	r3, #45	; 0x2d
 8012764:	4276      	negs	r6, r6
 8012766:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801276a:	485a      	ldr	r0, [pc, #360]	; (80128d4 <_printf_i+0x23c>)
 801276c:	230a      	movs	r3, #10
 801276e:	e012      	b.n	8012796 <_printf_i+0xfe>
 8012770:	682b      	ldr	r3, [r5, #0]
 8012772:	6820      	ldr	r0, [r4, #0]
 8012774:	1d19      	adds	r1, r3, #4
 8012776:	6029      	str	r1, [r5, #0]
 8012778:	0605      	lsls	r5, r0, #24
 801277a:	d501      	bpl.n	8012780 <_printf_i+0xe8>
 801277c:	681e      	ldr	r6, [r3, #0]
 801277e:	e002      	b.n	8012786 <_printf_i+0xee>
 8012780:	0641      	lsls	r1, r0, #25
 8012782:	d5fb      	bpl.n	801277c <_printf_i+0xe4>
 8012784:	881e      	ldrh	r6, [r3, #0]
 8012786:	4853      	ldr	r0, [pc, #332]	; (80128d4 <_printf_i+0x23c>)
 8012788:	2f6f      	cmp	r7, #111	; 0x6f
 801278a:	bf0c      	ite	eq
 801278c:	2308      	moveq	r3, #8
 801278e:	230a      	movne	r3, #10
 8012790:	2100      	movs	r1, #0
 8012792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012796:	6865      	ldr	r5, [r4, #4]
 8012798:	60a5      	str	r5, [r4, #8]
 801279a:	2d00      	cmp	r5, #0
 801279c:	bfa2      	ittt	ge
 801279e:	6821      	ldrge	r1, [r4, #0]
 80127a0:	f021 0104 	bicge.w	r1, r1, #4
 80127a4:	6021      	strge	r1, [r4, #0]
 80127a6:	b90e      	cbnz	r6, 80127ac <_printf_i+0x114>
 80127a8:	2d00      	cmp	r5, #0
 80127aa:	d04b      	beq.n	8012844 <_printf_i+0x1ac>
 80127ac:	4615      	mov	r5, r2
 80127ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80127b2:	fb03 6711 	mls	r7, r3, r1, r6
 80127b6:	5dc7      	ldrb	r7, [r0, r7]
 80127b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80127bc:	4637      	mov	r7, r6
 80127be:	42bb      	cmp	r3, r7
 80127c0:	460e      	mov	r6, r1
 80127c2:	d9f4      	bls.n	80127ae <_printf_i+0x116>
 80127c4:	2b08      	cmp	r3, #8
 80127c6:	d10b      	bne.n	80127e0 <_printf_i+0x148>
 80127c8:	6823      	ldr	r3, [r4, #0]
 80127ca:	07de      	lsls	r6, r3, #31
 80127cc:	d508      	bpl.n	80127e0 <_printf_i+0x148>
 80127ce:	6923      	ldr	r3, [r4, #16]
 80127d0:	6861      	ldr	r1, [r4, #4]
 80127d2:	4299      	cmp	r1, r3
 80127d4:	bfde      	ittt	le
 80127d6:	2330      	movle	r3, #48	; 0x30
 80127d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80127dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80127e0:	1b52      	subs	r2, r2, r5
 80127e2:	6122      	str	r2, [r4, #16]
 80127e4:	f8cd a000 	str.w	sl, [sp]
 80127e8:	464b      	mov	r3, r9
 80127ea:	aa03      	add	r2, sp, #12
 80127ec:	4621      	mov	r1, r4
 80127ee:	4640      	mov	r0, r8
 80127f0:	f7ff fee4 	bl	80125bc <_printf_common>
 80127f4:	3001      	adds	r0, #1
 80127f6:	d14a      	bne.n	801288e <_printf_i+0x1f6>
 80127f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127fc:	b004      	add	sp, #16
 80127fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012802:	6823      	ldr	r3, [r4, #0]
 8012804:	f043 0320 	orr.w	r3, r3, #32
 8012808:	6023      	str	r3, [r4, #0]
 801280a:	4833      	ldr	r0, [pc, #204]	; (80128d8 <_printf_i+0x240>)
 801280c:	2778      	movs	r7, #120	; 0x78
 801280e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012812:	6823      	ldr	r3, [r4, #0]
 8012814:	6829      	ldr	r1, [r5, #0]
 8012816:	061f      	lsls	r7, r3, #24
 8012818:	f851 6b04 	ldr.w	r6, [r1], #4
 801281c:	d402      	bmi.n	8012824 <_printf_i+0x18c>
 801281e:	065f      	lsls	r7, r3, #25
 8012820:	bf48      	it	mi
 8012822:	b2b6      	uxthmi	r6, r6
 8012824:	07df      	lsls	r7, r3, #31
 8012826:	bf48      	it	mi
 8012828:	f043 0320 	orrmi.w	r3, r3, #32
 801282c:	6029      	str	r1, [r5, #0]
 801282e:	bf48      	it	mi
 8012830:	6023      	strmi	r3, [r4, #0]
 8012832:	b91e      	cbnz	r6, 801283c <_printf_i+0x1a4>
 8012834:	6823      	ldr	r3, [r4, #0]
 8012836:	f023 0320 	bic.w	r3, r3, #32
 801283a:	6023      	str	r3, [r4, #0]
 801283c:	2310      	movs	r3, #16
 801283e:	e7a7      	b.n	8012790 <_printf_i+0xf8>
 8012840:	4824      	ldr	r0, [pc, #144]	; (80128d4 <_printf_i+0x23c>)
 8012842:	e7e4      	b.n	801280e <_printf_i+0x176>
 8012844:	4615      	mov	r5, r2
 8012846:	e7bd      	b.n	80127c4 <_printf_i+0x12c>
 8012848:	682b      	ldr	r3, [r5, #0]
 801284a:	6826      	ldr	r6, [r4, #0]
 801284c:	6961      	ldr	r1, [r4, #20]
 801284e:	1d18      	adds	r0, r3, #4
 8012850:	6028      	str	r0, [r5, #0]
 8012852:	0635      	lsls	r5, r6, #24
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	d501      	bpl.n	801285c <_printf_i+0x1c4>
 8012858:	6019      	str	r1, [r3, #0]
 801285a:	e002      	b.n	8012862 <_printf_i+0x1ca>
 801285c:	0670      	lsls	r0, r6, #25
 801285e:	d5fb      	bpl.n	8012858 <_printf_i+0x1c0>
 8012860:	8019      	strh	r1, [r3, #0]
 8012862:	2300      	movs	r3, #0
 8012864:	6123      	str	r3, [r4, #16]
 8012866:	4615      	mov	r5, r2
 8012868:	e7bc      	b.n	80127e4 <_printf_i+0x14c>
 801286a:	682b      	ldr	r3, [r5, #0]
 801286c:	1d1a      	adds	r2, r3, #4
 801286e:	602a      	str	r2, [r5, #0]
 8012870:	681d      	ldr	r5, [r3, #0]
 8012872:	6862      	ldr	r2, [r4, #4]
 8012874:	2100      	movs	r1, #0
 8012876:	4628      	mov	r0, r5
 8012878:	f7ed fd22 	bl	80002c0 <memchr>
 801287c:	b108      	cbz	r0, 8012882 <_printf_i+0x1ea>
 801287e:	1b40      	subs	r0, r0, r5
 8012880:	6060      	str	r0, [r4, #4]
 8012882:	6863      	ldr	r3, [r4, #4]
 8012884:	6123      	str	r3, [r4, #16]
 8012886:	2300      	movs	r3, #0
 8012888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801288c:	e7aa      	b.n	80127e4 <_printf_i+0x14c>
 801288e:	6923      	ldr	r3, [r4, #16]
 8012890:	462a      	mov	r2, r5
 8012892:	4649      	mov	r1, r9
 8012894:	4640      	mov	r0, r8
 8012896:	47d0      	blx	sl
 8012898:	3001      	adds	r0, #1
 801289a:	d0ad      	beq.n	80127f8 <_printf_i+0x160>
 801289c:	6823      	ldr	r3, [r4, #0]
 801289e:	079b      	lsls	r3, r3, #30
 80128a0:	d413      	bmi.n	80128ca <_printf_i+0x232>
 80128a2:	68e0      	ldr	r0, [r4, #12]
 80128a4:	9b03      	ldr	r3, [sp, #12]
 80128a6:	4298      	cmp	r0, r3
 80128a8:	bfb8      	it	lt
 80128aa:	4618      	movlt	r0, r3
 80128ac:	e7a6      	b.n	80127fc <_printf_i+0x164>
 80128ae:	2301      	movs	r3, #1
 80128b0:	4632      	mov	r2, r6
 80128b2:	4649      	mov	r1, r9
 80128b4:	4640      	mov	r0, r8
 80128b6:	47d0      	blx	sl
 80128b8:	3001      	adds	r0, #1
 80128ba:	d09d      	beq.n	80127f8 <_printf_i+0x160>
 80128bc:	3501      	adds	r5, #1
 80128be:	68e3      	ldr	r3, [r4, #12]
 80128c0:	9903      	ldr	r1, [sp, #12]
 80128c2:	1a5b      	subs	r3, r3, r1
 80128c4:	42ab      	cmp	r3, r5
 80128c6:	dcf2      	bgt.n	80128ae <_printf_i+0x216>
 80128c8:	e7eb      	b.n	80128a2 <_printf_i+0x20a>
 80128ca:	2500      	movs	r5, #0
 80128cc:	f104 0619 	add.w	r6, r4, #25
 80128d0:	e7f5      	b.n	80128be <_printf_i+0x226>
 80128d2:	bf00      	nop
 80128d4:	08016b8b 	.word	0x08016b8b
 80128d8:	08016b9c 	.word	0x08016b9c

080128dc <__sflush_r>:
 80128dc:	898a      	ldrh	r2, [r1, #12]
 80128de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e2:	4605      	mov	r5, r0
 80128e4:	0710      	lsls	r0, r2, #28
 80128e6:	460c      	mov	r4, r1
 80128e8:	d458      	bmi.n	801299c <__sflush_r+0xc0>
 80128ea:	684b      	ldr	r3, [r1, #4]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	dc05      	bgt.n	80128fc <__sflush_r+0x20>
 80128f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	dc02      	bgt.n	80128fc <__sflush_r+0x20>
 80128f6:	2000      	movs	r0, #0
 80128f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128fe:	2e00      	cmp	r6, #0
 8012900:	d0f9      	beq.n	80128f6 <__sflush_r+0x1a>
 8012902:	2300      	movs	r3, #0
 8012904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012908:	682f      	ldr	r7, [r5, #0]
 801290a:	6a21      	ldr	r1, [r4, #32]
 801290c:	602b      	str	r3, [r5, #0]
 801290e:	d032      	beq.n	8012976 <__sflush_r+0x9a>
 8012910:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012912:	89a3      	ldrh	r3, [r4, #12]
 8012914:	075a      	lsls	r2, r3, #29
 8012916:	d505      	bpl.n	8012924 <__sflush_r+0x48>
 8012918:	6863      	ldr	r3, [r4, #4]
 801291a:	1ac0      	subs	r0, r0, r3
 801291c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801291e:	b10b      	cbz	r3, 8012924 <__sflush_r+0x48>
 8012920:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012922:	1ac0      	subs	r0, r0, r3
 8012924:	2300      	movs	r3, #0
 8012926:	4602      	mov	r2, r0
 8012928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801292a:	6a21      	ldr	r1, [r4, #32]
 801292c:	4628      	mov	r0, r5
 801292e:	47b0      	blx	r6
 8012930:	1c43      	adds	r3, r0, #1
 8012932:	89a3      	ldrh	r3, [r4, #12]
 8012934:	d106      	bne.n	8012944 <__sflush_r+0x68>
 8012936:	6829      	ldr	r1, [r5, #0]
 8012938:	291d      	cmp	r1, #29
 801293a:	d82b      	bhi.n	8012994 <__sflush_r+0xb8>
 801293c:	4a29      	ldr	r2, [pc, #164]	; (80129e4 <__sflush_r+0x108>)
 801293e:	410a      	asrs	r2, r1
 8012940:	07d6      	lsls	r6, r2, #31
 8012942:	d427      	bmi.n	8012994 <__sflush_r+0xb8>
 8012944:	2200      	movs	r2, #0
 8012946:	6062      	str	r2, [r4, #4]
 8012948:	04d9      	lsls	r1, r3, #19
 801294a:	6922      	ldr	r2, [r4, #16]
 801294c:	6022      	str	r2, [r4, #0]
 801294e:	d504      	bpl.n	801295a <__sflush_r+0x7e>
 8012950:	1c42      	adds	r2, r0, #1
 8012952:	d101      	bne.n	8012958 <__sflush_r+0x7c>
 8012954:	682b      	ldr	r3, [r5, #0]
 8012956:	b903      	cbnz	r3, 801295a <__sflush_r+0x7e>
 8012958:	6560      	str	r0, [r4, #84]	; 0x54
 801295a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801295c:	602f      	str	r7, [r5, #0]
 801295e:	2900      	cmp	r1, #0
 8012960:	d0c9      	beq.n	80128f6 <__sflush_r+0x1a>
 8012962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012966:	4299      	cmp	r1, r3
 8012968:	d002      	beq.n	8012970 <__sflush_r+0x94>
 801296a:	4628      	mov	r0, r5
 801296c:	f7ff fa92 	bl	8011e94 <_free_r>
 8012970:	2000      	movs	r0, #0
 8012972:	6360      	str	r0, [r4, #52]	; 0x34
 8012974:	e7c0      	b.n	80128f8 <__sflush_r+0x1c>
 8012976:	2301      	movs	r3, #1
 8012978:	4628      	mov	r0, r5
 801297a:	47b0      	blx	r6
 801297c:	1c41      	adds	r1, r0, #1
 801297e:	d1c8      	bne.n	8012912 <__sflush_r+0x36>
 8012980:	682b      	ldr	r3, [r5, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d0c5      	beq.n	8012912 <__sflush_r+0x36>
 8012986:	2b1d      	cmp	r3, #29
 8012988:	d001      	beq.n	801298e <__sflush_r+0xb2>
 801298a:	2b16      	cmp	r3, #22
 801298c:	d101      	bne.n	8012992 <__sflush_r+0xb6>
 801298e:	602f      	str	r7, [r5, #0]
 8012990:	e7b1      	b.n	80128f6 <__sflush_r+0x1a>
 8012992:	89a3      	ldrh	r3, [r4, #12]
 8012994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012998:	81a3      	strh	r3, [r4, #12]
 801299a:	e7ad      	b.n	80128f8 <__sflush_r+0x1c>
 801299c:	690f      	ldr	r7, [r1, #16]
 801299e:	2f00      	cmp	r7, #0
 80129a0:	d0a9      	beq.n	80128f6 <__sflush_r+0x1a>
 80129a2:	0793      	lsls	r3, r2, #30
 80129a4:	680e      	ldr	r6, [r1, #0]
 80129a6:	bf08      	it	eq
 80129a8:	694b      	ldreq	r3, [r1, #20]
 80129aa:	600f      	str	r7, [r1, #0]
 80129ac:	bf18      	it	ne
 80129ae:	2300      	movne	r3, #0
 80129b0:	eba6 0807 	sub.w	r8, r6, r7
 80129b4:	608b      	str	r3, [r1, #8]
 80129b6:	f1b8 0f00 	cmp.w	r8, #0
 80129ba:	dd9c      	ble.n	80128f6 <__sflush_r+0x1a>
 80129bc:	6a21      	ldr	r1, [r4, #32]
 80129be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80129c0:	4643      	mov	r3, r8
 80129c2:	463a      	mov	r2, r7
 80129c4:	4628      	mov	r0, r5
 80129c6:	47b0      	blx	r6
 80129c8:	2800      	cmp	r0, #0
 80129ca:	dc06      	bgt.n	80129da <__sflush_r+0xfe>
 80129cc:	89a3      	ldrh	r3, [r4, #12]
 80129ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129d2:	81a3      	strh	r3, [r4, #12]
 80129d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129d8:	e78e      	b.n	80128f8 <__sflush_r+0x1c>
 80129da:	4407      	add	r7, r0
 80129dc:	eba8 0800 	sub.w	r8, r8, r0
 80129e0:	e7e9      	b.n	80129b6 <__sflush_r+0xda>
 80129e2:	bf00      	nop
 80129e4:	dfbffffe 	.word	0xdfbffffe

080129e8 <_fflush_r>:
 80129e8:	b538      	push	{r3, r4, r5, lr}
 80129ea:	690b      	ldr	r3, [r1, #16]
 80129ec:	4605      	mov	r5, r0
 80129ee:	460c      	mov	r4, r1
 80129f0:	b913      	cbnz	r3, 80129f8 <_fflush_r+0x10>
 80129f2:	2500      	movs	r5, #0
 80129f4:	4628      	mov	r0, r5
 80129f6:	bd38      	pop	{r3, r4, r5, pc}
 80129f8:	b118      	cbz	r0, 8012a02 <_fflush_r+0x1a>
 80129fa:	6a03      	ldr	r3, [r0, #32]
 80129fc:	b90b      	cbnz	r3, 8012a02 <_fflush_r+0x1a>
 80129fe:	f7ff f8a1 	bl	8011b44 <__sinit>
 8012a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d0f3      	beq.n	80129f2 <_fflush_r+0xa>
 8012a0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012a0c:	07d0      	lsls	r0, r2, #31
 8012a0e:	d404      	bmi.n	8012a1a <_fflush_r+0x32>
 8012a10:	0599      	lsls	r1, r3, #22
 8012a12:	d402      	bmi.n	8012a1a <_fflush_r+0x32>
 8012a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a16:	f7ff fa25 	bl	8011e64 <__retarget_lock_acquire_recursive>
 8012a1a:	4628      	mov	r0, r5
 8012a1c:	4621      	mov	r1, r4
 8012a1e:	f7ff ff5d 	bl	80128dc <__sflush_r>
 8012a22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a24:	07da      	lsls	r2, r3, #31
 8012a26:	4605      	mov	r5, r0
 8012a28:	d4e4      	bmi.n	80129f4 <_fflush_r+0xc>
 8012a2a:	89a3      	ldrh	r3, [r4, #12]
 8012a2c:	059b      	lsls	r3, r3, #22
 8012a2e:	d4e1      	bmi.n	80129f4 <_fflush_r+0xc>
 8012a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a32:	f7ff fa18 	bl	8011e66 <__retarget_lock_release_recursive>
 8012a36:	e7dd      	b.n	80129f4 <_fflush_r+0xc>

08012a38 <__swbuf_r>:
 8012a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a3a:	460e      	mov	r6, r1
 8012a3c:	4614      	mov	r4, r2
 8012a3e:	4605      	mov	r5, r0
 8012a40:	b118      	cbz	r0, 8012a4a <__swbuf_r+0x12>
 8012a42:	6a03      	ldr	r3, [r0, #32]
 8012a44:	b90b      	cbnz	r3, 8012a4a <__swbuf_r+0x12>
 8012a46:	f7ff f87d 	bl	8011b44 <__sinit>
 8012a4a:	69a3      	ldr	r3, [r4, #24]
 8012a4c:	60a3      	str	r3, [r4, #8]
 8012a4e:	89a3      	ldrh	r3, [r4, #12]
 8012a50:	071a      	lsls	r2, r3, #28
 8012a52:	d525      	bpl.n	8012aa0 <__swbuf_r+0x68>
 8012a54:	6923      	ldr	r3, [r4, #16]
 8012a56:	b31b      	cbz	r3, 8012aa0 <__swbuf_r+0x68>
 8012a58:	6823      	ldr	r3, [r4, #0]
 8012a5a:	6922      	ldr	r2, [r4, #16]
 8012a5c:	1a98      	subs	r0, r3, r2
 8012a5e:	6963      	ldr	r3, [r4, #20]
 8012a60:	b2f6      	uxtb	r6, r6
 8012a62:	4283      	cmp	r3, r0
 8012a64:	4637      	mov	r7, r6
 8012a66:	dc04      	bgt.n	8012a72 <__swbuf_r+0x3a>
 8012a68:	4621      	mov	r1, r4
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	f7ff ffbc 	bl	80129e8 <_fflush_r>
 8012a70:	b9e0      	cbnz	r0, 8012aac <__swbuf_r+0x74>
 8012a72:	68a3      	ldr	r3, [r4, #8]
 8012a74:	3b01      	subs	r3, #1
 8012a76:	60a3      	str	r3, [r4, #8]
 8012a78:	6823      	ldr	r3, [r4, #0]
 8012a7a:	1c5a      	adds	r2, r3, #1
 8012a7c:	6022      	str	r2, [r4, #0]
 8012a7e:	701e      	strb	r6, [r3, #0]
 8012a80:	6962      	ldr	r2, [r4, #20]
 8012a82:	1c43      	adds	r3, r0, #1
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d004      	beq.n	8012a92 <__swbuf_r+0x5a>
 8012a88:	89a3      	ldrh	r3, [r4, #12]
 8012a8a:	07db      	lsls	r3, r3, #31
 8012a8c:	d506      	bpl.n	8012a9c <__swbuf_r+0x64>
 8012a8e:	2e0a      	cmp	r6, #10
 8012a90:	d104      	bne.n	8012a9c <__swbuf_r+0x64>
 8012a92:	4621      	mov	r1, r4
 8012a94:	4628      	mov	r0, r5
 8012a96:	f7ff ffa7 	bl	80129e8 <_fflush_r>
 8012a9a:	b938      	cbnz	r0, 8012aac <__swbuf_r+0x74>
 8012a9c:	4638      	mov	r0, r7
 8012a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aa0:	4621      	mov	r1, r4
 8012aa2:	4628      	mov	r0, r5
 8012aa4:	f000 f806 	bl	8012ab4 <__swsetup_r>
 8012aa8:	2800      	cmp	r0, #0
 8012aaa:	d0d5      	beq.n	8012a58 <__swbuf_r+0x20>
 8012aac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012ab0:	e7f4      	b.n	8012a9c <__swbuf_r+0x64>
	...

08012ab4 <__swsetup_r>:
 8012ab4:	b538      	push	{r3, r4, r5, lr}
 8012ab6:	4b2a      	ldr	r3, [pc, #168]	; (8012b60 <__swsetup_r+0xac>)
 8012ab8:	4605      	mov	r5, r0
 8012aba:	6818      	ldr	r0, [r3, #0]
 8012abc:	460c      	mov	r4, r1
 8012abe:	b118      	cbz	r0, 8012ac8 <__swsetup_r+0x14>
 8012ac0:	6a03      	ldr	r3, [r0, #32]
 8012ac2:	b90b      	cbnz	r3, 8012ac8 <__swsetup_r+0x14>
 8012ac4:	f7ff f83e 	bl	8011b44 <__sinit>
 8012ac8:	89a3      	ldrh	r3, [r4, #12]
 8012aca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012ace:	0718      	lsls	r0, r3, #28
 8012ad0:	d422      	bmi.n	8012b18 <__swsetup_r+0x64>
 8012ad2:	06d9      	lsls	r1, r3, #27
 8012ad4:	d407      	bmi.n	8012ae6 <__swsetup_r+0x32>
 8012ad6:	2309      	movs	r3, #9
 8012ad8:	602b      	str	r3, [r5, #0]
 8012ada:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012ade:	81a3      	strh	r3, [r4, #12]
 8012ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ae4:	e034      	b.n	8012b50 <__swsetup_r+0x9c>
 8012ae6:	0758      	lsls	r0, r3, #29
 8012ae8:	d512      	bpl.n	8012b10 <__swsetup_r+0x5c>
 8012aea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012aec:	b141      	cbz	r1, 8012b00 <__swsetup_r+0x4c>
 8012aee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012af2:	4299      	cmp	r1, r3
 8012af4:	d002      	beq.n	8012afc <__swsetup_r+0x48>
 8012af6:	4628      	mov	r0, r5
 8012af8:	f7ff f9cc 	bl	8011e94 <_free_r>
 8012afc:	2300      	movs	r3, #0
 8012afe:	6363      	str	r3, [r4, #52]	; 0x34
 8012b00:	89a3      	ldrh	r3, [r4, #12]
 8012b02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b06:	81a3      	strh	r3, [r4, #12]
 8012b08:	2300      	movs	r3, #0
 8012b0a:	6063      	str	r3, [r4, #4]
 8012b0c:	6923      	ldr	r3, [r4, #16]
 8012b0e:	6023      	str	r3, [r4, #0]
 8012b10:	89a3      	ldrh	r3, [r4, #12]
 8012b12:	f043 0308 	orr.w	r3, r3, #8
 8012b16:	81a3      	strh	r3, [r4, #12]
 8012b18:	6923      	ldr	r3, [r4, #16]
 8012b1a:	b94b      	cbnz	r3, 8012b30 <__swsetup_r+0x7c>
 8012b1c:	89a3      	ldrh	r3, [r4, #12]
 8012b1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b26:	d003      	beq.n	8012b30 <__swsetup_r+0x7c>
 8012b28:	4621      	mov	r1, r4
 8012b2a:	4628      	mov	r0, r5
 8012b2c:	f000 f8dd 	bl	8012cea <__smakebuf_r>
 8012b30:	89a0      	ldrh	r0, [r4, #12]
 8012b32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b36:	f010 0301 	ands.w	r3, r0, #1
 8012b3a:	d00a      	beq.n	8012b52 <__swsetup_r+0x9e>
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	60a3      	str	r3, [r4, #8]
 8012b40:	6963      	ldr	r3, [r4, #20]
 8012b42:	425b      	negs	r3, r3
 8012b44:	61a3      	str	r3, [r4, #24]
 8012b46:	6923      	ldr	r3, [r4, #16]
 8012b48:	b943      	cbnz	r3, 8012b5c <__swsetup_r+0xa8>
 8012b4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012b4e:	d1c4      	bne.n	8012ada <__swsetup_r+0x26>
 8012b50:	bd38      	pop	{r3, r4, r5, pc}
 8012b52:	0781      	lsls	r1, r0, #30
 8012b54:	bf58      	it	pl
 8012b56:	6963      	ldrpl	r3, [r4, #20]
 8012b58:	60a3      	str	r3, [r4, #8]
 8012b5a:	e7f4      	b.n	8012b46 <__swsetup_r+0x92>
 8012b5c:	2000      	movs	r0, #0
 8012b5e:	e7f7      	b.n	8012b50 <__swsetup_r+0x9c>
 8012b60:	20001868 	.word	0x20001868

08012b64 <memmove>:
 8012b64:	4288      	cmp	r0, r1
 8012b66:	b510      	push	{r4, lr}
 8012b68:	eb01 0402 	add.w	r4, r1, r2
 8012b6c:	d902      	bls.n	8012b74 <memmove+0x10>
 8012b6e:	4284      	cmp	r4, r0
 8012b70:	4623      	mov	r3, r4
 8012b72:	d807      	bhi.n	8012b84 <memmove+0x20>
 8012b74:	1e43      	subs	r3, r0, #1
 8012b76:	42a1      	cmp	r1, r4
 8012b78:	d008      	beq.n	8012b8c <memmove+0x28>
 8012b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b82:	e7f8      	b.n	8012b76 <memmove+0x12>
 8012b84:	4402      	add	r2, r0
 8012b86:	4601      	mov	r1, r0
 8012b88:	428a      	cmp	r2, r1
 8012b8a:	d100      	bne.n	8012b8e <memmove+0x2a>
 8012b8c:	bd10      	pop	{r4, pc}
 8012b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b96:	e7f7      	b.n	8012b88 <memmove+0x24>

08012b98 <_raise_r>:
 8012b98:	291f      	cmp	r1, #31
 8012b9a:	b538      	push	{r3, r4, r5, lr}
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	460d      	mov	r5, r1
 8012ba0:	d904      	bls.n	8012bac <_raise_r+0x14>
 8012ba2:	2316      	movs	r3, #22
 8012ba4:	6003      	str	r3, [r0, #0]
 8012ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012baa:	bd38      	pop	{r3, r4, r5, pc}
 8012bac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012bae:	b112      	cbz	r2, 8012bb6 <_raise_r+0x1e>
 8012bb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012bb4:	b94b      	cbnz	r3, 8012bca <_raise_r+0x32>
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	f000 f830 	bl	8012c1c <_getpid_r>
 8012bbc:	462a      	mov	r2, r5
 8012bbe:	4601      	mov	r1, r0
 8012bc0:	4620      	mov	r0, r4
 8012bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bc6:	f000 b817 	b.w	8012bf8 <_kill_r>
 8012bca:	2b01      	cmp	r3, #1
 8012bcc:	d00a      	beq.n	8012be4 <_raise_r+0x4c>
 8012bce:	1c59      	adds	r1, r3, #1
 8012bd0:	d103      	bne.n	8012bda <_raise_r+0x42>
 8012bd2:	2316      	movs	r3, #22
 8012bd4:	6003      	str	r3, [r0, #0]
 8012bd6:	2001      	movs	r0, #1
 8012bd8:	e7e7      	b.n	8012baa <_raise_r+0x12>
 8012bda:	2400      	movs	r4, #0
 8012bdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012be0:	4628      	mov	r0, r5
 8012be2:	4798      	blx	r3
 8012be4:	2000      	movs	r0, #0
 8012be6:	e7e0      	b.n	8012baa <_raise_r+0x12>

08012be8 <raise>:
 8012be8:	4b02      	ldr	r3, [pc, #8]	; (8012bf4 <raise+0xc>)
 8012bea:	4601      	mov	r1, r0
 8012bec:	6818      	ldr	r0, [r3, #0]
 8012bee:	f7ff bfd3 	b.w	8012b98 <_raise_r>
 8012bf2:	bf00      	nop
 8012bf4:	20001868 	.word	0x20001868

08012bf8 <_kill_r>:
 8012bf8:	b538      	push	{r3, r4, r5, lr}
 8012bfa:	4d07      	ldr	r5, [pc, #28]	; (8012c18 <_kill_r+0x20>)
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	4604      	mov	r4, r0
 8012c00:	4608      	mov	r0, r1
 8012c02:	4611      	mov	r1, r2
 8012c04:	602b      	str	r3, [r5, #0]
 8012c06:	f7ee f9d5 	bl	8000fb4 <_kill>
 8012c0a:	1c43      	adds	r3, r0, #1
 8012c0c:	d102      	bne.n	8012c14 <_kill_r+0x1c>
 8012c0e:	682b      	ldr	r3, [r5, #0]
 8012c10:	b103      	cbz	r3, 8012c14 <_kill_r+0x1c>
 8012c12:	6023      	str	r3, [r4, #0]
 8012c14:	bd38      	pop	{r3, r4, r5, pc}
 8012c16:	bf00      	nop
 8012c18:	2000cb40 	.word	0x2000cb40

08012c1c <_getpid_r>:
 8012c1c:	f7ee b9c8 	b.w	8000fb0 <_getpid>

08012c20 <_sbrk_r>:
 8012c20:	b538      	push	{r3, r4, r5, lr}
 8012c22:	4d06      	ldr	r5, [pc, #24]	; (8012c3c <_sbrk_r+0x1c>)
 8012c24:	2300      	movs	r3, #0
 8012c26:	4604      	mov	r4, r0
 8012c28:	4608      	mov	r0, r1
 8012c2a:	602b      	str	r3, [r5, #0]
 8012c2c:	f7ee f9ec 	bl	8001008 <_sbrk>
 8012c30:	1c43      	adds	r3, r0, #1
 8012c32:	d102      	bne.n	8012c3a <_sbrk_r+0x1a>
 8012c34:	682b      	ldr	r3, [r5, #0]
 8012c36:	b103      	cbz	r3, 8012c3a <_sbrk_r+0x1a>
 8012c38:	6023      	str	r3, [r4, #0]
 8012c3a:	bd38      	pop	{r3, r4, r5, pc}
 8012c3c:	2000cb40 	.word	0x2000cb40

08012c40 <_realloc_r>:
 8012c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c44:	4680      	mov	r8, r0
 8012c46:	4614      	mov	r4, r2
 8012c48:	460e      	mov	r6, r1
 8012c4a:	b921      	cbnz	r1, 8012c56 <_realloc_r+0x16>
 8012c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c50:	4611      	mov	r1, r2
 8012c52:	f7ff b98b 	b.w	8011f6c <_malloc_r>
 8012c56:	b92a      	cbnz	r2, 8012c64 <_realloc_r+0x24>
 8012c58:	f7ff f91c 	bl	8011e94 <_free_r>
 8012c5c:	4625      	mov	r5, r4
 8012c5e:	4628      	mov	r0, r5
 8012c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c64:	f000 f8a0 	bl	8012da8 <_malloc_usable_size_r>
 8012c68:	4284      	cmp	r4, r0
 8012c6a:	4607      	mov	r7, r0
 8012c6c:	d802      	bhi.n	8012c74 <_realloc_r+0x34>
 8012c6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012c72:	d812      	bhi.n	8012c9a <_realloc_r+0x5a>
 8012c74:	4621      	mov	r1, r4
 8012c76:	4640      	mov	r0, r8
 8012c78:	f7ff f978 	bl	8011f6c <_malloc_r>
 8012c7c:	4605      	mov	r5, r0
 8012c7e:	2800      	cmp	r0, #0
 8012c80:	d0ed      	beq.n	8012c5e <_realloc_r+0x1e>
 8012c82:	42bc      	cmp	r4, r7
 8012c84:	4622      	mov	r2, r4
 8012c86:	4631      	mov	r1, r6
 8012c88:	bf28      	it	cs
 8012c8a:	463a      	movcs	r2, r7
 8012c8c:	f7ff f8ec 	bl	8011e68 <memcpy>
 8012c90:	4631      	mov	r1, r6
 8012c92:	4640      	mov	r0, r8
 8012c94:	f7ff f8fe 	bl	8011e94 <_free_r>
 8012c98:	e7e1      	b.n	8012c5e <_realloc_r+0x1e>
 8012c9a:	4635      	mov	r5, r6
 8012c9c:	e7df      	b.n	8012c5e <_realloc_r+0x1e>

08012c9e <__swhatbuf_r>:
 8012c9e:	b570      	push	{r4, r5, r6, lr}
 8012ca0:	460c      	mov	r4, r1
 8012ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ca6:	2900      	cmp	r1, #0
 8012ca8:	b096      	sub	sp, #88	; 0x58
 8012caa:	4615      	mov	r5, r2
 8012cac:	461e      	mov	r6, r3
 8012cae:	da0d      	bge.n	8012ccc <__swhatbuf_r+0x2e>
 8012cb0:	89a3      	ldrh	r3, [r4, #12]
 8012cb2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012cb6:	f04f 0100 	mov.w	r1, #0
 8012cba:	bf0c      	ite	eq
 8012cbc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012cc0:	2340      	movne	r3, #64	; 0x40
 8012cc2:	2000      	movs	r0, #0
 8012cc4:	6031      	str	r1, [r6, #0]
 8012cc6:	602b      	str	r3, [r5, #0]
 8012cc8:	b016      	add	sp, #88	; 0x58
 8012cca:	bd70      	pop	{r4, r5, r6, pc}
 8012ccc:	466a      	mov	r2, sp
 8012cce:	f000 f849 	bl	8012d64 <_fstat_r>
 8012cd2:	2800      	cmp	r0, #0
 8012cd4:	dbec      	blt.n	8012cb0 <__swhatbuf_r+0x12>
 8012cd6:	9901      	ldr	r1, [sp, #4]
 8012cd8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012cdc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012ce0:	4259      	negs	r1, r3
 8012ce2:	4159      	adcs	r1, r3
 8012ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ce8:	e7eb      	b.n	8012cc2 <__swhatbuf_r+0x24>

08012cea <__smakebuf_r>:
 8012cea:	898b      	ldrh	r3, [r1, #12]
 8012cec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012cee:	079d      	lsls	r5, r3, #30
 8012cf0:	4606      	mov	r6, r0
 8012cf2:	460c      	mov	r4, r1
 8012cf4:	d507      	bpl.n	8012d06 <__smakebuf_r+0x1c>
 8012cf6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012cfa:	6023      	str	r3, [r4, #0]
 8012cfc:	6123      	str	r3, [r4, #16]
 8012cfe:	2301      	movs	r3, #1
 8012d00:	6163      	str	r3, [r4, #20]
 8012d02:	b002      	add	sp, #8
 8012d04:	bd70      	pop	{r4, r5, r6, pc}
 8012d06:	ab01      	add	r3, sp, #4
 8012d08:	466a      	mov	r2, sp
 8012d0a:	f7ff ffc8 	bl	8012c9e <__swhatbuf_r>
 8012d0e:	9900      	ldr	r1, [sp, #0]
 8012d10:	4605      	mov	r5, r0
 8012d12:	4630      	mov	r0, r6
 8012d14:	f7ff f92a 	bl	8011f6c <_malloc_r>
 8012d18:	b948      	cbnz	r0, 8012d2e <__smakebuf_r+0x44>
 8012d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d1e:	059a      	lsls	r2, r3, #22
 8012d20:	d4ef      	bmi.n	8012d02 <__smakebuf_r+0x18>
 8012d22:	f023 0303 	bic.w	r3, r3, #3
 8012d26:	f043 0302 	orr.w	r3, r3, #2
 8012d2a:	81a3      	strh	r3, [r4, #12]
 8012d2c:	e7e3      	b.n	8012cf6 <__smakebuf_r+0xc>
 8012d2e:	89a3      	ldrh	r3, [r4, #12]
 8012d30:	6020      	str	r0, [r4, #0]
 8012d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d36:	81a3      	strh	r3, [r4, #12]
 8012d38:	9b00      	ldr	r3, [sp, #0]
 8012d3a:	6163      	str	r3, [r4, #20]
 8012d3c:	9b01      	ldr	r3, [sp, #4]
 8012d3e:	6120      	str	r0, [r4, #16]
 8012d40:	b15b      	cbz	r3, 8012d5a <__smakebuf_r+0x70>
 8012d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d46:	4630      	mov	r0, r6
 8012d48:	f000 f81e 	bl	8012d88 <_isatty_r>
 8012d4c:	b128      	cbz	r0, 8012d5a <__smakebuf_r+0x70>
 8012d4e:	89a3      	ldrh	r3, [r4, #12]
 8012d50:	f023 0303 	bic.w	r3, r3, #3
 8012d54:	f043 0301 	orr.w	r3, r3, #1
 8012d58:	81a3      	strh	r3, [r4, #12]
 8012d5a:	89a3      	ldrh	r3, [r4, #12]
 8012d5c:	431d      	orrs	r5, r3
 8012d5e:	81a5      	strh	r5, [r4, #12]
 8012d60:	e7cf      	b.n	8012d02 <__smakebuf_r+0x18>
	...

08012d64 <_fstat_r>:
 8012d64:	b538      	push	{r3, r4, r5, lr}
 8012d66:	4d07      	ldr	r5, [pc, #28]	; (8012d84 <_fstat_r+0x20>)
 8012d68:	2300      	movs	r3, #0
 8012d6a:	4604      	mov	r4, r0
 8012d6c:	4608      	mov	r0, r1
 8012d6e:	4611      	mov	r1, r2
 8012d70:	602b      	str	r3, [r5, #0]
 8012d72:	f7ee f940 	bl	8000ff6 <_fstat>
 8012d76:	1c43      	adds	r3, r0, #1
 8012d78:	d102      	bne.n	8012d80 <_fstat_r+0x1c>
 8012d7a:	682b      	ldr	r3, [r5, #0]
 8012d7c:	b103      	cbz	r3, 8012d80 <_fstat_r+0x1c>
 8012d7e:	6023      	str	r3, [r4, #0]
 8012d80:	bd38      	pop	{r3, r4, r5, pc}
 8012d82:	bf00      	nop
 8012d84:	2000cb40 	.word	0x2000cb40

08012d88 <_isatty_r>:
 8012d88:	b538      	push	{r3, r4, r5, lr}
 8012d8a:	4d06      	ldr	r5, [pc, #24]	; (8012da4 <_isatty_r+0x1c>)
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	4604      	mov	r4, r0
 8012d90:	4608      	mov	r0, r1
 8012d92:	602b      	str	r3, [r5, #0]
 8012d94:	f7ee f934 	bl	8001000 <_isatty>
 8012d98:	1c43      	adds	r3, r0, #1
 8012d9a:	d102      	bne.n	8012da2 <_isatty_r+0x1a>
 8012d9c:	682b      	ldr	r3, [r5, #0]
 8012d9e:	b103      	cbz	r3, 8012da2 <_isatty_r+0x1a>
 8012da0:	6023      	str	r3, [r4, #0]
 8012da2:	bd38      	pop	{r3, r4, r5, pc}
 8012da4:	2000cb40 	.word	0x2000cb40

08012da8 <_malloc_usable_size_r>:
 8012da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012dac:	1f18      	subs	r0, r3, #4
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	bfbc      	itt	lt
 8012db2:	580b      	ldrlt	r3, [r1, r0]
 8012db4:	18c0      	addlt	r0, r0, r3
 8012db6:	4770      	bx	lr

08012db8 <_init>:
 8012db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dba:	bf00      	nop
 8012dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dbe:	bc08      	pop	{r3}
 8012dc0:	469e      	mov	lr, r3
 8012dc2:	4770      	bx	lr

08012dc4 <_fini>:
 8012dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dc6:	bf00      	nop
 8012dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dca:	bc08      	pop	{r3}
 8012dcc:	469e      	mov	lr, r3
 8012dce:	4770      	bx	lr
