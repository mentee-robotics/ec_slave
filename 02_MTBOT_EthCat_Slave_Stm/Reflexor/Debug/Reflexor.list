
Reflexor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012bf4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003dec  08012dd4  08012dd4  00022dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016bc0  08016bc0  0003d628  2**0
                  CONTENTS
  4 .ARM          00000008  08016bc0  08016bc0  00026bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016bc8  08016bc8  0003d628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016bc8  08016bc8  00026bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016bcc  08016bcc  00026bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000186c  20000000  08016bd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .uartDma_module_space 00000400  2000186c  0801843c  0003186c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b050  20001c70  0801883c  00031c70  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000ccc0  0801883c  0003ccc0  2**0
                  ALLOC
 12 .spiDma_module_space 00000200  2000d2c0  0801883c  0003d2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .etherCat_module_space 00000168  2000d4c0  08018a3c  0003d4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .ARM.attributes 00000030  00000000  00000000  0003d628  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  0003d658  2**0
                  CONTENTS, READONLY
 16 .debug_info   0005a684  00000000  00000000  0003d69b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000b107  00000000  00000000  00097d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00020087  00000000  00000000  000a2e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003210  00000000  00000000  000c2eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002a9b  00000000  00000000  000c60c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  000366b2  00000000  00000000  000c8b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000569c0  00000000  00000000  000ff20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00124e4a  00000000  00000000  00155bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  0000978c  00000000  00000000  0027aa18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 000000a7  00000000  00000000  002841a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001c70 	.word	0x20001c70
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012dbc 	.word	0x08012dbc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001c74 	.word	0x20001c74
 800021c:	08012dbc 	.word	0x08012dbc

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	20009bb8 	.word	0x20009bb8
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000370:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000374:	f000 b970 	b.w	8000658 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9e08      	ldr	r6, [sp, #32]
 8000396:	460d      	mov	r5, r1
 8000398:	4604      	mov	r4, r0
 800039a:	460f      	mov	r7, r1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d14a      	bne.n	8000436 <__udivmoddi4+0xa6>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4694      	mov	ip, r2
 80003a4:	d965      	bls.n	8000472 <__udivmoddi4+0xe2>
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	b143      	cbz	r3, 80003be <__udivmoddi4+0x2e>
 80003ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80003b0:	f1c3 0220 	rsb	r2, r3, #32
 80003b4:	409f      	lsls	r7, r3
 80003b6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ba:	4317      	orrs	r7, r2
 80003bc:	409c      	lsls	r4, r3
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fa1f f58c 	uxth.w	r5, ip
 80003c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ca:	0c22      	lsrs	r2, r4, #16
 80003cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003d4:	fb01 f005 	mul.w	r0, r1, r5
 80003d8:	4290      	cmp	r0, r2
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x62>
 80003dc:	eb1c 0202 	adds.w	r2, ip, r2
 80003e0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003e4:	f080 811c 	bcs.w	8000620 <__udivmoddi4+0x290>
 80003e8:	4290      	cmp	r0, r2
 80003ea:	f240 8119 	bls.w	8000620 <__udivmoddi4+0x290>
 80003ee:	3902      	subs	r1, #2
 80003f0:	4462      	add	r2, ip
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	b2a4      	uxth	r4, r4
 80003f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000402:	fb00 f505 	mul.w	r5, r0, r5
 8000406:	42a5      	cmp	r5, r4
 8000408:	d90a      	bls.n	8000420 <__udivmoddi4+0x90>
 800040a:	eb1c 0404 	adds.w	r4, ip, r4
 800040e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000412:	f080 8107 	bcs.w	8000624 <__udivmoddi4+0x294>
 8000416:	42a5      	cmp	r5, r4
 8000418:	f240 8104 	bls.w	8000624 <__udivmoddi4+0x294>
 800041c:	4464      	add	r4, ip
 800041e:	3802      	subs	r0, #2
 8000420:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	2100      	movs	r1, #0
 8000428:	b11e      	cbz	r6, 8000432 <__udivmoddi4+0xa2>
 800042a:	40dc      	lsrs	r4, r3
 800042c:	2300      	movs	r3, #0
 800042e:	e9c6 4300 	strd	r4, r3, [r6]
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	428b      	cmp	r3, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0xbc>
 800043a:	2e00      	cmp	r6, #0
 800043c:	f000 80ed 	beq.w	800061a <__udivmoddi4+0x28a>
 8000440:	2100      	movs	r1, #0
 8000442:	e9c6 0500 	strd	r0, r5, [r6]
 8000446:	4608      	mov	r0, r1
 8000448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044c:	fab3 f183 	clz	r1, r3
 8000450:	2900      	cmp	r1, #0
 8000452:	d149      	bne.n	80004e8 <__udivmoddi4+0x158>
 8000454:	42ab      	cmp	r3, r5
 8000456:	d302      	bcc.n	800045e <__udivmoddi4+0xce>
 8000458:	4282      	cmp	r2, r0
 800045a:	f200 80f8 	bhi.w	800064e <__udivmoddi4+0x2be>
 800045e:	1a84      	subs	r4, r0, r2
 8000460:	eb65 0203 	sbc.w	r2, r5, r3
 8000464:	2001      	movs	r0, #1
 8000466:	4617      	mov	r7, r2
 8000468:	2e00      	cmp	r6, #0
 800046a:	d0e2      	beq.n	8000432 <__udivmoddi4+0xa2>
 800046c:	e9c6 4700 	strd	r4, r7, [r6]
 8000470:	e7df      	b.n	8000432 <__udivmoddi4+0xa2>
 8000472:	b902      	cbnz	r2, 8000476 <__udivmoddi4+0xe6>
 8000474:	deff      	udf	#255	; 0xff
 8000476:	fab2 f382 	clz	r3, r2
 800047a:	2b00      	cmp	r3, #0
 800047c:	f040 8090 	bne.w	80005a0 <__udivmoddi4+0x210>
 8000480:	1a8a      	subs	r2, r1, r2
 8000482:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000486:	fa1f fe8c 	uxth.w	lr, ip
 800048a:	2101      	movs	r1, #1
 800048c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000490:	fb07 2015 	mls	r0, r7, r5, r2
 8000494:	0c22      	lsrs	r2, r4, #16
 8000496:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800049a:	fb0e f005 	mul.w	r0, lr, r5
 800049e:	4290      	cmp	r0, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x124>
 80004a2:	eb1c 0202 	adds.w	r2, ip, r2
 80004a6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x122>
 80004ac:	4290      	cmp	r0, r2
 80004ae:	f200 80cb 	bhi.w	8000648 <__udivmoddi4+0x2b8>
 80004b2:	4645      	mov	r5, r8
 80004b4:	1a12      	subs	r2, r2, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004bc:	fb07 2210 	mls	r2, r7, r0, r2
 80004c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004c4:	fb0e fe00 	mul.w	lr, lr, r0
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x14e>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x14c>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f200 80bb 	bhi.w	8000652 <__udivmoddi4+0x2c2>
 80004dc:	4610      	mov	r0, r2
 80004de:	eba4 040e 	sub.w	r4, r4, lr
 80004e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004e6:	e79f      	b.n	8000428 <__udivmoddi4+0x98>
 80004e8:	f1c1 0720 	rsb	r7, r1, #32
 80004ec:	408b      	lsls	r3, r1
 80004ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80004f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004f6:	fa05 f401 	lsl.w	r4, r5, r1
 80004fa:	fa20 f307 	lsr.w	r3, r0, r7
 80004fe:	40fd      	lsrs	r5, r7
 8000500:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000504:	4323      	orrs	r3, r4
 8000506:	fbb5 f8f9 	udiv	r8, r5, r9
 800050a:	fa1f fe8c 	uxth.w	lr, ip
 800050e:	fb09 5518 	mls	r5, r9, r8, r5
 8000512:	0c1c      	lsrs	r4, r3, #16
 8000514:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000518:	fb08 f50e 	mul.w	r5, r8, lr
 800051c:	42a5      	cmp	r5, r4
 800051e:	fa02 f201 	lsl.w	r2, r2, r1
 8000522:	fa00 f001 	lsl.w	r0, r0, r1
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b0>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000530:	f080 8088 	bcs.w	8000644 <__udivmoddi4+0x2b4>
 8000534:	42a5      	cmp	r5, r4
 8000536:	f240 8085 	bls.w	8000644 <__udivmoddi4+0x2b4>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	4464      	add	r4, ip
 8000540:	1b64      	subs	r4, r4, r5
 8000542:	b29d      	uxth	r5, r3
 8000544:	fbb4 f3f9 	udiv	r3, r4, r9
 8000548:	fb09 4413 	mls	r4, r9, r3, r4
 800054c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000550:	fb03 fe0e 	mul.w	lr, r3, lr
 8000554:	45a6      	cmp	lr, r4
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1da>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000560:	d26c      	bcs.n	800063c <__udivmoddi4+0x2ac>
 8000562:	45a6      	cmp	lr, r4
 8000564:	d96a      	bls.n	800063c <__udivmoddi4+0x2ac>
 8000566:	3b02      	subs	r3, #2
 8000568:	4464      	add	r4, ip
 800056a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800056e:	fba3 9502 	umull	r9, r5, r3, r2
 8000572:	eba4 040e 	sub.w	r4, r4, lr
 8000576:	42ac      	cmp	r4, r5
 8000578:	46c8      	mov	r8, r9
 800057a:	46ae      	mov	lr, r5
 800057c:	d356      	bcc.n	800062c <__udivmoddi4+0x29c>
 800057e:	d053      	beq.n	8000628 <__udivmoddi4+0x298>
 8000580:	b156      	cbz	r6, 8000598 <__udivmoddi4+0x208>
 8000582:	ebb0 0208 	subs.w	r2, r0, r8
 8000586:	eb64 040e 	sbc.w	r4, r4, lr
 800058a:	fa04 f707 	lsl.w	r7, r4, r7
 800058e:	40ca      	lsrs	r2, r1
 8000590:	40cc      	lsrs	r4, r1
 8000592:	4317      	orrs	r7, r2
 8000594:	e9c6 7400 	strd	r7, r4, [r6]
 8000598:	4618      	mov	r0, r3
 800059a:	2100      	movs	r1, #0
 800059c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a0:	f1c3 0120 	rsb	r1, r3, #32
 80005a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005a8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ac:	fa25 f101 	lsr.w	r1, r5, r1
 80005b0:	409d      	lsls	r5, r3
 80005b2:	432a      	orrs	r2, r5
 80005b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b8:	fa1f fe8c 	uxth.w	lr, ip
 80005bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005c0:	fb07 1510 	mls	r5, r7, r0, r1
 80005c4:	0c11      	lsrs	r1, r2, #16
 80005c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ca:	fb00 f50e 	mul.w	r5, r0, lr
 80005ce:	428d      	cmp	r5, r1
 80005d0:	fa04 f403 	lsl.w	r4, r4, r3
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0x258>
 80005d6:	eb1c 0101 	adds.w	r1, ip, r1
 80005da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005de:	d22f      	bcs.n	8000640 <__udivmoddi4+0x2b0>
 80005e0:	428d      	cmp	r5, r1
 80005e2:	d92d      	bls.n	8000640 <__udivmoddi4+0x2b0>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4461      	add	r1, ip
 80005e8:	1b49      	subs	r1, r1, r5
 80005ea:	b292      	uxth	r2, r2
 80005ec:	fbb1 f5f7 	udiv	r5, r1, r7
 80005f0:	fb07 1115 	mls	r1, r7, r5, r1
 80005f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005f8:	fb05 f10e 	mul.w	r1, r5, lr
 80005fc:	4291      	cmp	r1, r2
 80005fe:	d908      	bls.n	8000612 <__udivmoddi4+0x282>
 8000600:	eb1c 0202 	adds.w	r2, ip, r2
 8000604:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000608:	d216      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 800060a:	4291      	cmp	r1, r2
 800060c:	d914      	bls.n	8000638 <__udivmoddi4+0x2a8>
 800060e:	3d02      	subs	r5, #2
 8000610:	4462      	add	r2, ip
 8000612:	1a52      	subs	r2, r2, r1
 8000614:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000618:	e738      	b.n	800048c <__udivmoddi4+0xfc>
 800061a:	4631      	mov	r1, r6
 800061c:	4630      	mov	r0, r6
 800061e:	e708      	b.n	8000432 <__udivmoddi4+0xa2>
 8000620:	4639      	mov	r1, r7
 8000622:	e6e6      	b.n	80003f2 <__udivmoddi4+0x62>
 8000624:	4610      	mov	r0, r2
 8000626:	e6fb      	b.n	8000420 <__udivmoddi4+0x90>
 8000628:	4548      	cmp	r0, r9
 800062a:	d2a9      	bcs.n	8000580 <__udivmoddi4+0x1f0>
 800062c:	ebb9 0802 	subs.w	r8, r9, r2
 8000630:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000634:	3b01      	subs	r3, #1
 8000636:	e7a3      	b.n	8000580 <__udivmoddi4+0x1f0>
 8000638:	4645      	mov	r5, r8
 800063a:	e7ea      	b.n	8000612 <__udivmoddi4+0x282>
 800063c:	462b      	mov	r3, r5
 800063e:	e794      	b.n	800056a <__udivmoddi4+0x1da>
 8000640:	4640      	mov	r0, r8
 8000642:	e7d1      	b.n	80005e8 <__udivmoddi4+0x258>
 8000644:	46d0      	mov	r8, sl
 8000646:	e77b      	b.n	8000540 <__udivmoddi4+0x1b0>
 8000648:	3d02      	subs	r5, #2
 800064a:	4462      	add	r2, ip
 800064c:	e732      	b.n	80004b4 <__udivmoddi4+0x124>
 800064e:	4608      	mov	r0, r1
 8000650:	e70a      	b.n	8000468 <__udivmoddi4+0xd8>
 8000652:	4464      	add	r4, ip
 8000654:	3802      	subs	r0, #2
 8000656:	e742      	b.n	80004de <__udivmoddi4+0x14e>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <appTestTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_appTestTask */
void appTestTask(void const * argument)
{
 800065c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN appTestTask */
  AppTest_Init();
 800065e:	f011 f987 	bl	8011970 <AppTest_Init>

  /* Infinite loop */
  for(;;)
  {
    AppTest_MainFunction();
 8000662:	f011 f986 	bl	8011972 <AppTest_MainFunction>

    osDelay(1);
 8000666:	2001      	movs	r0, #1
 8000668:	f007 ff15 	bl	8008496 <osDelay>
  for(;;)
 800066c:	e7f9      	b.n	8000662 <appTestTask+0x6>
	...

08000670 <ethCatTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ethCatTask */
void ethCatTask(void const * argument)
{
 8000670:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ethCatTask */
  /* Initialize the modules which used by this application. */
  ethCat_Init();
 8000672:	f00f fec1 	bl	80103f8 <ethCat_Init>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000676:	2201      	movs	r2, #1
 8000678:	4611      	mov	r1, r2
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <ethCatTask+0x1c>)
 800067c:	f001 ff74 	bl	8002568 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
    /* Run main function of ethCat. */
    ethCat_MainFunction();
 8000680:	f00f fed4 	bl	801042c <ethCat_MainFunction>

    osDelay(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f007 ff06 	bl	8008496 <osDelay>
  for(;;)
 800068a:	e7f9      	b.n	8000680 <ethCatTask+0x10>
 800068c:	48000400 	.word	0x48000400

08000690 <canMTask>:
  /* USER CODE END canMTask */
}

#else
void canMTask(void const * argument)
{
 8000690:	b508      	push	{r3, lr}
  /* USER CODE BEGIN canMTask */
  canM_Init (&canM_Module);
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <canMTask+0x18>)
 8000694:	f00f fd94 	bl	80101c0 <canM_Init>
  /* Infinite loop */
  for(;;)
  {

    /* Run main function of canM. */
    canM_MainFunction (&canM_Module);
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <canMTask+0x18>)
 800069a:	f00f fdd1 	bl	8010240 <canM_MainFunction>
    //vTaskDelay(160);
    osDelay(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f007 fef9 	bl	8008496 <osDelay>
  for(;;)
 80006a4:	e7f8      	b.n	8000698 <canMTask+0x8>
 80006a6:	bf00      	nop
 80006a8:	2000142c 	.word	0x2000142c

080006ac <canIdleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_canIdleTask */
void canIdleTask(void const * argument)
{
 80006ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN canIdleTask */
  canIdle_Init();
 80006ae:	f00f fb25 	bl	800fcfc <canIdle_Init>

  /* Infinite loop */
  for(;;)
  {
    /* Run the main function of CanIdle. */
    canIdle_MainFunction();
 80006b2:	f00f fb29 	bl	800fd08 <canIdle_MainFunction>

    osDelay(1);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f007 feed 	bl	8008496 <osDelay>
  for(;;)
 80006bc:	e7f9      	b.n	80006b2 <canIdleTask+0x6>

080006be <configureTimerForRunTimeStats>:
}
 80006be:	4770      	bx	lr

080006c0 <getRunTimeCounterValue>:
}
 80006c0:	2000      	movs	r0, #0
 80006c2:	4770      	bx	lr

080006c4 <vApplicationIdleHook>:
}
 80006c4:	4770      	bx	lr

080006c6 <vApplicationDaemonTaskStartupHook>:
{
 80006c6:	b508      	push	{r3, lr}
  uartDma_init();
 80006c8:	f00e fb36 	bl	800ed38 <uartDma_init>
  lan9252_Init();
 80006cc:	f00a fe60 	bl	800b390 <lan9252_Init>
}
 80006d0:	bd08      	pop	{r3, pc}
	...

080006d4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	b099      	sub	sp, #100	; 0x64
  osTimerDef(timerCounter500us, timerCounterCb);
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <MX_FREERTOS_Init+0xdc>)
 80006da:	9317      	str	r3, [sp, #92]	; 0x5c
  timerCounter500usHandle = osTimerCreate(osTimer(timerCounter500us), osTimerPeriodic, NULL);
 80006dc:	2200      	movs	r2, #0
 80006de:	2101      	movs	r1, #1
 80006e0:	a817      	add	r0, sp, #92	; 0x5c
 80006e2:	f007 fedf 	bl	80084a4 <osTimerCreate>
 80006e6:	4d33      	ldr	r5, [pc, #204]	; (80007b4 <MX_FREERTOS_Init+0xe0>)
 80006e8:	6028      	str	r0, [r5, #0]
  xTimerStop(timerCounter500usHandle, pdMS_TO_TICKS(1));
 80006ea:	2401      	movs	r4, #1
 80006ec:	9400      	str	r4, [sp, #0]
 80006ee:	2300      	movs	r3, #0
 80006f0:	461a      	mov	r2, r3
 80006f2:	2103      	movs	r1, #3
 80006f4:	f009 fa42 	bl	8009b7c <xTimerGenericCommand>
  xTimerChangePeriod(timerCounter500usHandle, 1, 100);
 80006f8:	2364      	movs	r3, #100	; 0x64
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2300      	movs	r3, #0
 80006fe:	4622      	mov	r2, r4
 8000700:	2104      	movs	r1, #4
 8000702:	6828      	ldr	r0, [r5, #0]
 8000704:	f009 fa3a 	bl	8009b7c <xTimerGenericCommand>
  xTimerStart(timerCounter500usHandle, pdMS_TO_TICKS(1));
 8000708:	682d      	ldr	r5, [r5, #0]
 800070a:	f008 fdeb 	bl	80092e4 <xTaskGetTickCount>
 800070e:	4602      	mov	r2, r0
 8000710:	9400      	str	r4, [sp, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	4621      	mov	r1, r4
 8000716:	4628      	mov	r0, r5
 8000718:	f009 fa30 	bl	8009b7c <xTimerGenericCommand>
  osThreadDef(appTest, appTestTask, osPriorityLow, 0, 128);
 800071c:	4c26      	ldr	r4, [pc, #152]	; (80007b8 <MX_FREERTOS_Init+0xe4>)
 800071e:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
 8000722:	46a6      	mov	lr, r4
 8000724:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000728:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800072c:	f8de 3000 	ldr.w	r3, [lr]
 8000730:	f8cc 3000 	str.w	r3, [ip]
  appTestHandle = osThreadCreate(osThread(appTest), NULL);
 8000734:	2100      	movs	r1, #0
 8000736:	a812      	add	r0, sp, #72	; 0x48
 8000738:	f007 fe93 	bl	8008462 <osThreadCreate>
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_FREERTOS_Init+0xe8>)
 800073e:	6018      	str	r0, [r3, #0]
  osThreadDef(ethCat, ethCatTask, osPriorityRealtime, 0, 1024);
 8000740:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 8000744:	f104 0e14 	add.w	lr, r4, #20
 8000748:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800074c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000750:	f8de 3000 	ldr.w	r3, [lr]
 8000754:	f8cc 3000 	str.w	r3, [ip]
  ethCatHandle = osThreadCreate(osThread(ethCat), NULL);
 8000758:	2100      	movs	r1, #0
 800075a:	a80d      	add	r0, sp, #52	; 0x34
 800075c:	f007 fe81 	bl	8008462 <osThreadCreate>
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_FREERTOS_Init+0xec>)
 8000762:	6018      	str	r0, [r3, #0]
  osThreadDef(canM, canMTask, osPriorityHigh, 0, 1024);
 8000764:	f10d 0c20 	add.w	ip, sp, #32
 8000768:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800076c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000770:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000774:	f8de 3000 	ldr.w	r3, [lr]
 8000778:	f8cc 3000 	str.w	r3, [ip]
  canMHandle = osThreadCreate(osThread(canM), NULL);
 800077c:	2100      	movs	r1, #0
 800077e:	a808      	add	r0, sp, #32
 8000780:	f007 fe6f 	bl	8008462 <osThreadCreate>
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_FREERTOS_Init+0xf0>)
 8000786:	6018      	str	r0, [r3, #0]
  osThreadDef(canIdle, canIdleTask, osPriorityAboveNormal, 0, 512);
 8000788:	f10d 0e0c 	add.w	lr, sp, #12
 800078c:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
 8000790:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000794:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000798:	f8dc 3000 	ldr.w	r3, [ip]
 800079c:	f8ce 3000 	str.w	r3, [lr]
  canIdleHandle = osThreadCreate(osThread(canIdle), NULL);
 80007a0:	2100      	movs	r1, #0
 80007a2:	a803      	add	r0, sp, #12
 80007a4:	f007 fe5d 	bl	8008462 <osThreadCreate>
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_FREERTOS_Init+0xf4>)
 80007aa:	6018      	str	r0, [r3, #0]
}
 80007ac:	b019      	add	sp, #100	; 0x64
 80007ae:	bd30      	pop	{r4, r5, pc}
 80007b0:	0801043d 	.word	0x0801043d
 80007b4:	20001c9c 	.word	0x20001c9c
 80007b8:	08012dd4 	.word	0x08012dd4
 80007bc:	20001c8c 	.word	0x20001c8c
 80007c0:	20001c98 	.word	0x20001c98
 80007c4:	20001c94 	.word	0x20001c94
 80007c8:	20001c90 	.word	0x20001c90

080007cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007cc:	b500      	push	{lr}
 80007ce:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_DMA_Init+0x70>)
 80007d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007d4:	f042 0204 	orr.w	r2, r2, #4
 80007d8:	649a      	str	r2, [r3, #72]	; 0x48
 80007da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007dc:	f002 0204 	and.w	r2, r2, #4
 80007e0:	9200      	str	r2, [sp, #0]
 80007e2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007e6:	f042 0201 	orr.w	r2, r2, #1
 80007ea:	649a      	str	r2, [r3, #72]	; 0x48
 80007ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2105      	movs	r1, #5
 80007fa:	200b      	movs	r0, #11
 80007fc:	f000 fcf2 	bl	80011e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000800:	200b      	movs	r0, #11
 8000802:	f000 fd35 	bl	8001270 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2105      	movs	r1, #5
 800080a:	200c      	movs	r0, #12
 800080c:	f000 fcea 	bl	80011e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000810:	200c      	movs	r0, #12
 8000812:	f000 fd2d 	bl	8001270 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2105      	movs	r1, #5
 800081a:	200d      	movs	r0, #13
 800081c:	f000 fce2 	bl	80011e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000820:	200d      	movs	r0, #13
 8000822:	f000 fd25 	bl	8001270 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2105      	movs	r1, #5
 800082a:	200e      	movs	r0, #14
 800082c:	f000 fcda 	bl	80011e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000830:	200e      	movs	r0, #14
 8000832:	f000 fd1d 	bl	8001270 <HAL_NVIC_EnableIRQ>

}
 8000836:	b003      	add	sp, #12
 8000838:	f85d fb04 	ldr.w	pc, [sp], #4
 800083c:	40021000 	.word	0x40021000

08000840 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000840:	b510      	push	{r4, lr}
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <MX_FDCAN1_Init+0x4c>)
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_FDCAN1_Init+0x50>)
 8000846:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	6043      	str	r3, [r0, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800084c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000850:	6082      	str	r2, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000852:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000854:	7403      	strb	r3, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000856:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000858:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 800085a:	2204      	movs	r2, #4
 800085c:	6142      	str	r2, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 800085e:	2208      	movs	r2, #8
 8000860:	6182      	str	r2, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000862:	211f      	movs	r1, #31
 8000864:	61c1      	str	r1, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000866:	6202      	str	r2, [r0, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000868:	2201      	movs	r2, #1
 800086a:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 6;
 800086c:	2106      	movs	r1, #6
 800086e:	6281      	str	r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000870:	240d      	movs	r4, #13
 8000872:	62c4      	str	r4, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 6;
 8000874:	6301      	str	r1, [r0, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000876:	6342      	str	r2, [r0, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000878:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800087a:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800087c:	f001 f82a 	bl	80018d4 <HAL_FDCAN_Init>
 8000880:	b900      	cbnz	r0, 8000884 <MX_FDCAN1_Init+0x44>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000882:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000884:	f000 f9a0 	bl	8000bc8 <Error_Handler>
}
 8000888:	e7fb      	b.n	8000882 <MX_FDCAN1_Init+0x42>
 800088a:	bf00      	nop
 800088c:	20001ca0 	.word	0x20001ca0
 8000890:	40006400 	.word	0x40006400

08000894 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000894:	b510      	push	{r4, lr}
 8000896:	b09c      	sub	sp, #112	; 0x70
 8000898:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	2100      	movs	r1, #0
 800089c:	9117      	str	r1, [sp, #92]	; 0x5c
 800089e:	9118      	str	r1, [sp, #96]	; 0x60
 80008a0:	9119      	str	r1, [sp, #100]	; 0x64
 80008a2:	911a      	str	r1, [sp, #104]	; 0x68
 80008a4:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a6:	2254      	movs	r2, #84	; 0x54
 80008a8:	a802      	add	r0, sp, #8
 80008aa:	f011 f9ed 	bl	8011c88 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80008ae:	6822      	ldr	r2, [r4, #0]
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <HAL_FDCAN_MspInit+0xa8>)
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d001      	beq.n	80008ba <HAL_FDCAN_MspInit+0x26>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80008b6:	b01c      	add	sp, #112	; 0x70
 80008b8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008be:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80008c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008c4:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c6:	a802      	add	r0, sp, #8
 80008c8:	f003 fc4e 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d132      	bne.n	8000936 <HAL_FDCAN_MspInit+0xa2>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <HAL_FDCAN_MspInit+0xac>)
 80008d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008d4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80008d8:	659a      	str	r2, [r3, #88]	; 0x58
 80008da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008dc:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80008e0:	9200      	str	r2, [sp, #0]
 80008e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008e6:	f042 0202 	orr.w	r2, r2, #2
 80008ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FDCAN_RX_Pin|FDCAN_TX_Pin;
 80008f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008fa:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2400      	movs	r4, #0
 8000902:	9419      	str	r4, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000904:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000906:	2309      	movs	r3, #9
 8000908:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	a917      	add	r1, sp, #92	; 0x5c
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <HAL_FDCAN_MspInit+0xb0>)
 800090e:	f001 fcc3 	bl	8002298 <HAL_GPIO_Init>
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_FDCAN_MspInit+0xb4>)
 8000914:	685a      	ldr	r2, [r3, #4]
 8000916:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800091a:	605a      	str	r2, [r3, #4]
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000922:	605a      	str	r2, [r3, #4]
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000924:	4622      	mov	r2, r4
 8000926:	2105      	movs	r1, #5
 8000928:	2015      	movs	r0, #21
 800092a:	f000 fc5b 	bl	80011e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800092e:	2015      	movs	r0, #21
 8000930:	f000 fc9e 	bl	8001270 <HAL_NVIC_EnableIRQ>
}
 8000934:	e7bf      	b.n	80008b6 <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 8000936:	f000 f947 	bl	8000bc8 <Error_Handler>
 800093a:	e7c9      	b.n	80008d0 <HAL_FDCAN_MspInit+0x3c>
 800093c:	40006400 	.word	0x40006400
 8000940:	40021000 	.word	0x40021000
 8000944:	48000400 	.word	0x48000400
 8000948:	40010000 	.word	0x40010000

0800094c <MX_GPIO_Init>:
        * the Code Generation settings)
     PC8   ------> I2C3_SCL
     PC9   ------> I2C3_SDA
*/
void MX_GPIO_Init(void)
{
 800094c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000950:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	2400      	movs	r4, #0
 8000954:	9407      	str	r4, [sp, #28]
 8000956:	9408      	str	r4, [sp, #32]
 8000958:	9409      	str	r4, [sp, #36]	; 0x24
 800095a:	940a      	str	r4, [sp, #40]	; 0x28
 800095c:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b64      	ldr	r3, [pc, #400]	; (8000af0 <MX_GPIO_Init+0x1a4>)
 8000960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000962:	f042 0204 	orr.w	r2, r2, #4
 8000966:	64da      	str	r2, [r3, #76]	; 0x4c
 8000968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800096a:	f002 0204 	and.w	r2, r2, #4
 800096e:	9201      	str	r2, [sp, #4]
 8000970:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000974:	f042 0220 	orr.w	r2, r2, #32
 8000978:	64da      	str	r2, [r3, #76]	; 0x4c
 800097a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800097c:	f002 0220 	and.w	r2, r2, #32
 8000980:	9202      	str	r2, [sp, #8]
 8000982:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000984:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800098a:	64da      	str	r2, [r3, #76]	; 0x4c
 800098c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800098e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000992:	9203      	str	r2, [sp, #12]
 8000994:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000998:	f042 0201 	orr.w	r2, r2, #1
 800099c:	64da      	str	r2, [r3, #76]	; 0x4c
 800099e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009a0:	f002 0201 	and.w	r2, r2, #1
 80009a4:	9204      	str	r2, [sp, #16]
 80009a6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009aa:	f042 0202 	orr.w	r2, r2, #2
 80009ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80009b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009b2:	f002 0202 	and.w	r2, r2, #2
 80009b6:	9205      	str	r2, [sp, #20]
 80009b8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009bc:	f042 0208 	orr.w	r2, r2, #8
 80009c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80009c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c4:	f003 0308 	and.w	r3, r3, #8
 80009c8:	9306      	str	r3, [sp, #24]
 80009ca:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2110      	movs	r1, #16
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f001 fdc8 	bl	8002568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80009d8:	4f46      	ldr	r7, [pc, #280]	; (8000af4 <MX_GPIO_Init+0x1a8>)
 80009da:	4622      	mov	r2, r4
 80009dc:	2110      	movs	r1, #16
 80009de:	4638      	mov	r0, r7
 80009e0:	f001 fdc2 	bl	8002568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80009e4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8000b00 <MX_GPIO_Init+0x1b4>
 80009e8:	2201      	movs	r2, #1
 80009ea:	4611      	mov	r1, r2
 80009ec:	4640      	mov	r0, r8
 80009ee:	f001 fdbb 	bl	8002568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LAN_Reset_CMD_Pin|EXT_LED_Pin, GPIO_PIN_RESET);
 80009f2:	4622      	mov	r2, r4
 80009f4:	f44f 6102 	mov.w	r1, #2080	; 0x820
 80009f8:	4640      	mov	r0, r8
 80009fa:	f001 fdb5 	bl	8002568 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Ver_D0_Pin|Ver_D1_Pin|Ver_A_Pin;
 80009fe:	f246 0301 	movw	r3, #24577	; 0x6001
 8000a02:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	a907      	add	r1, sp, #28
 8000a0a:	4638      	mov	r0, r7
 8000a0c:	f001 fc44 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC3
                           PC5 PC6 PC7 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a10:	f649 43ee 	movw	r3, #40174	; 0x9cee
 8000a14:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a16:	2603      	movs	r6, #3
 8000a18:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	a907      	add	r1, sp, #28
 8000a1e:	4638      	mov	r0, r7
 8000a20:	f001 fc3a 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a28:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a2e:	a907      	add	r1, sp, #28
 8000a30:	4831      	ldr	r0, [pc, #196]	; (8000af8 <MX_GPIO_Init+0x1ac>)
 8000a32:	f001 fc31 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ETC_SYNC1_Pin|ETC_SYNC0_Pin|ETC_IRQ_Pin;
 8000a36:	2307      	movs	r3, #7
 8000a38:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3c:	2501      	movs	r5, #1
 8000a3e:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	a907      	add	r1, sp, #28
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a46:	f001 fc27 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_15;
 8000a4a:	f248 1308 	movw	r3, #33032	; 0x8108
 8000a4e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a50:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	a907      	add	r1, sp, #28
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f001 fc1d 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000a5e:	f04f 0910 	mov.w	r9, #16
 8000a62:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a68:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	a907      	add	r1, sp, #28
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a74:	f001 fc10 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8000a78:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8000a82:	a907      	add	r1, sp, #28
 8000a84:	4638      	mov	r0, r7
 8000a86:	f001 fc07 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000a8a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8e:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000a92:	a907      	add	r1, sp, #28
 8000a94:	4640      	mov	r0, r8
 8000a96:	f001 fbff 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB12
                           PB13 PB14 PB15 PB4
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 8000a9a:	f24f 43d6 	movw	r3, #62678	; 0xf4d6
 8000a9e:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	a907      	add	r1, sp, #28
 8000aa6:	4640      	mov	r0, r8
 8000aa8:	f001 fbf6 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LAN_Reset_CMD_Pin|EXT_LED_Pin;
 8000aac:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000ab0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	a907      	add	r1, sp, #28
 8000aba:	4640      	mov	r0, r8
 8000abc:	f001 fbec 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ac0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ac4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac6:	2312      	movs	r3, #18
 8000ac8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000ace:	2308      	movs	r3, #8
 8000ad0:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad2:	a907      	add	r1, sp, #28
 8000ad4:	4638      	mov	r0, r7
 8000ad6:	f001 fbdf 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ada:	2304      	movs	r3, #4
 8000adc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ade:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae2:	a907      	add	r1, sp, #28
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_GPIO_Init+0x1b0>)
 8000ae6:	f001 fbd7 	bl	8002298 <HAL_GPIO_Init>

}
 8000aea:	b00d      	add	sp, #52	; 0x34
 8000aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000af0:	40021000 	.word	0x40021000
 8000af4:	48000800 	.word	0x48000800
 8000af8:	48001800 	.word	0x48001800
 8000afc:	48000c00 	.word	0x48000c00
 8000b00:	48000400 	.word	0x48000400

08000b04 <cdc_printf>:




void cdc_printf(const char *format, ...)
{
 8000b04:	b40f      	push	{r0, r1, r2, r3}
 8000b06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8000b14:	466e      	mov	r6, sp
    va_list args;
    va_start(args, format);
 8000b16:	607b      	str	r3, [r7, #4]

    // Calculate the size needed for the formatted string
    int len = vsnprintf(NULL, 0, format, args);
 8000b18:	462a      	mov	r2, r5
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4608      	mov	r0, r1
 8000b1e:	f011 f895 	bl	8011c4c <vsniprintf>
    va_end(args);

    if (len <= 0)
 8000b22:	1e04      	subs	r4, r0, #0
 8000b24:	dd18      	ble.n	8000b58 <cdc_printf+0x54>
        return;

    // Allocate a buffer for the formatted string
    char buffer[len + 1]; // +1 for null-terminator
 8000b26:	f104 0308 	add.w	r3, r4, #8
 8000b2a:	f023 0307 	bic.w	r3, r3, #7
 8000b2e:	ebad 0d03 	sub.w	sp, sp, r3

    // Format the string into the buffer
    va_start(args, format);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000b38:	462a      	mov	r2, r5
 8000b3a:	1c61      	adds	r1, r4, #1
 8000b3c:	4668      	mov	r0, sp
 8000b3e:	f011 f885 	bl	8011c4c <vsniprintf>
    va_end(args);

    // Transmit the formatted string over USB CDC
    CDC_Transmit_FS((uint8_t*)buffer, len);
 8000b42:	b2a1      	uxth	r1, r4
 8000b44:	4668      	mov	r0, sp
 8000b46:	f010 fc39 	bl	80113bc <CDC_Transmit_FS>
 8000b4a:	46b5      	mov	sp, r6
}
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000b54:	b004      	add	sp, #16
 8000b56:	4770      	bx	lr
        return;
 8000b58:	46b5      	mov	sp, r6
 8000b5a:	e7f7      	b.n	8000b4c <cdc_printf+0x48>

08000b5c <measure>:
void measure(uint32_t timestamp){

	static uint32_t holder[100];
	static uint8_t counter =0;

	holder[counter++] = timestamp;
 8000b5c:	490e      	ldr	r1, [pc, #56]	; (8000b98 <measure+0x3c>)
 8000b5e:	780a      	ldrb	r2, [r1, #0]
 8000b60:	1c53      	adds	r3, r2, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	700b      	strb	r3, [r1, #0]
 8000b66:	490d      	ldr	r1, [pc, #52]	; (8000b9c <measure+0x40>)
 8000b68:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	char pre = '@';
	char end = '\n';
	if (counter >= 100){
 8000b6c:	2b63      	cmp	r3, #99	; 0x63
 8000b6e:	d80f      	bhi.n	8000b90 <measure+0x34>
 8000b70:	4770      	bx	lr
		for (uint8_t i =0; i<100;++i)
			cdc_printf("%d\t%u\n",i, holder[i]);
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <measure+0x40>)
 8000b74:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8000b78:	4621      	mov	r1, r4
 8000b7a:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <measure+0x44>)
 8000b7c:	f7ff ffc2 	bl	8000b04 <cdc_printf>
		for (uint8_t i =0; i<100;++i)
 8000b80:	3401      	adds	r4, #1
 8000b82:	b2e4      	uxtb	r4, r4
 8000b84:	2c63      	cmp	r4, #99	; 0x63
 8000b86:	d9f4      	bls.n	8000b72 <measure+0x16>
		/*CDC_Transmit_FS(&pre,1);
		CDC_Transmit_FS(&holder, sizeof(holder));
		CDC_Transmit_FS(&end,1);*/
		counter = 0;
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <measure+0x3c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
	}


}
 8000b8e:	bd10      	pop	{r4, pc}
void measure(uint32_t timestamp){
 8000b90:	b510      	push	{r4, lr}
		for (uint8_t i =0; i<100;++i)
 8000b92:	2400      	movs	r4, #0
 8000b94:	e7f6      	b.n	8000b84 <measure+0x28>
 8000b96:	bf00      	nop
 8000b98:	20001d04 	.word	0x20001d04
 8000b9c:	20001d08 	.word	0x20001d08
 8000ba0:	08012e48 	.word	0x08012e48

08000ba4 <GetCycleCount>:
uint32_t GetCycleCount(void)
{
    return DWT->CYCCNT; // Read cycle counter value
 8000ba4:	4b01      	ldr	r3, [pc, #4]	; (8000bac <GetCycleCount+0x8>)
 8000ba6:	6858      	ldr	r0, [r3, #4]
}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e0001000 	.word	0xe0001000

08000bb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bb2:	6802      	ldr	r2, [r0, #0]
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d000      	beq.n	8000bbc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bba:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000bbc:	f000 fae2 	bl	8001184 <HAL_IncTick>
}
 8000bc0:	e7fb      	b.n	8000bba <HAL_TIM_PeriodElapsedCallback+0xa>
 8000bc2:	bf00      	nop
 8000bc4:	40012c00 	.word	0x40012c00

08000bc8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bca:	e7fe      	b.n	8000bca <Error_Handler+0x2>

08000bcc <SystemClock_Config>:
{
 8000bcc:	b500      	push	{lr}
 8000bce:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd0:	2238      	movs	r2, #56	; 0x38
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	a806      	add	r0, sp, #24
 8000bd6:	f011 f857 	bl	8011c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bda:	2000      	movs	r0, #0
 8000bdc:	9001      	str	r0, [sp, #4]
 8000bde:	9002      	str	r0, [sp, #8]
 8000be0:	9003      	str	r0, [sp, #12]
 8000be2:	9004      	str	r0, [sp, #16]
 8000be4:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000be6:	f002 fcdf 	bl	80035a8 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bea:	2321      	movs	r3, #33	; 0x21
 8000bec:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf2:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfc:	2103      	movs	r1, #3
 8000bfe:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c00:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000c02:	2214      	movs	r2, #20
 8000c04:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c06:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c08:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c0a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	a806      	add	r0, sp, #24
 8000c0e:	f002 fd8b 	bl	8003728 <HAL_RCC_OscConfig>
 8000c12:	b980      	cbnz	r0, 8000c36 <SystemClock_Config+0x6a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c14:	230f      	movs	r3, #15
 8000c16:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c20:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c22:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c24:	2104      	movs	r1, #4
 8000c26:	eb0d 0001 	add.w	r0, sp, r1
 8000c2a:	f003 f8e1 	bl	8003df0 <HAL_RCC_ClockConfig>
 8000c2e:	b920      	cbnz	r0, 8000c3a <SystemClock_Config+0x6e>
}
 8000c30:	b015      	add	sp, #84	; 0x54
 8000c32:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c36:	f7ff ffc7 	bl	8000bc8 <Error_Handler>
    Error_Handler();
 8000c3a:	f7ff ffc5 	bl	8000bc8 <Error_Handler>

08000c3e <main>:
{
 8000c3e:	b508      	push	{r3, lr}
  HAL_Init();
 8000c40:	f000 fa91 	bl	8001166 <HAL_Init>
  SystemClock_Config();
 8000c44:	f7ff ffc2 	bl	8000bcc <SystemClock_Config>
  MX_GPIO_Init();
 8000c48:	f7ff fe80 	bl	800094c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4c:	f7ff fdbe 	bl	80007cc <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000c50:	f7ff fdf6 	bl	8000840 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8000c54:	f000 f80c 	bl	8000c70 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c58:	f000 f9a6 	bl	8000fa8 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8000c5c:	f010 fb58 	bl	8011310 <MX_USB_Device_Init>
  SEGGER_SYSVIEW_Conf();
 8000c60:	f00f fc04 	bl	801046c <SEGGER_SYSVIEW_Conf>
  MX_FREERTOS_Init();
 8000c64:	f7ff fd36 	bl	80006d4 <MX_FREERTOS_Init>
  osKernelStart();
 8000c68:	f007 fbf6 	bl	8008458 <osKernelStart>
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <main+0x2e>

08000c6e <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000c6e:	4770      	bx	lr

08000c70 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c70:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c72:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <MX_SPI1_Init+0x44>)
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <MX_SPI1_Init+0x48>)
 8000c76:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c78:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000c7c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c82:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c86:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c88:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c90:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c92:	2208      	movs	r2, #8
 8000c94:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c96:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c98:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c9a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ca0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ca2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca4:	f003 feba 	bl	8004a1c <HAL_SPI_Init>
 8000ca8:	b900      	cbnz	r0, 8000cac <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000caa:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cac:	f7ff ff8c 	bl	8000bc8 <Error_Handler>
}
 8000cb0:	e7fb      	b.n	8000caa <MX_SPI1_Init+0x3a>
 8000cb2:	bf00      	nop
 8000cb4:	20001f58 	.word	0x20001f58
 8000cb8:	40013000 	.word	0x40013000

08000cbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cbc:	b510      	push	{r4, lr}
 8000cbe:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	9303      	str	r3, [sp, #12]
 8000cc4:	9304      	str	r3, [sp, #16]
 8000cc6:	9305      	str	r3, [sp, #20]
 8000cc8:	9306      	str	r3, [sp, #24]
 8000cca:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8000ccc:	6802      	ldr	r2, [r0, #0]
 8000cce:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <HAL_SPI_MspInit+0xc8>)
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d001      	beq.n	8000cd8 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cd4:	b008      	add	sp, #32
 8000cd6:	bd10      	pop	{r4, pc}
 8000cd8:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cda:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000cde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ce0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ce4:	661a      	str	r2, [r3, #96]	; 0x60
 8000ce6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ce8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000cec:	9201      	str	r2, [sp, #4]
 8000cee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cf2:	f042 0201 	orr.w	r2, r2, #1
 8000cf6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d02:	23e0      	movs	r3, #224	; 0xe0
 8000d04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d0e:	2305      	movs	r3, #5
 8000d10:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	a903      	add	r1, sp, #12
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f001 fabe 	bl	8002298 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8000d1c:	481a      	ldr	r0, [pc, #104]	; (8000d88 <HAL_SPI_MspInit+0xcc>)
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <HAL_SPI_MspInit+0xd0>)
 8000d20:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000d22:	230a      	movs	r3, #10
 8000d24:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d26:	2300      	movs	r3, #0
 8000d28:	6083      	str	r3, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2a:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d2c:	2280      	movs	r2, #128	; 0x80
 8000d2e:	6102      	str	r2, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d30:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d32:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000d34:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d3c:	f000 fb0a 	bl	8001354 <HAL_DMA_Init>
 8000d40:	b9d0      	cbnz	r0, 8000d78 <HAL_SPI_MspInit+0xbc>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_SPI_MspInit+0xcc>)
 8000d44:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d46:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000d48:	4811      	ldr	r0, [pc, #68]	; (8000d90 <HAL_SPI_MspInit+0xd4>)
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_SPI_MspInit+0xd8>)
 8000d4c:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000d4e:	230b      	movs	r3, #11
 8000d50:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d52:	2310      	movs	r3, #16
 8000d54:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d5a:	2280      	movs	r2, #128	; 0x80
 8000d5c:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d5e:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d60:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d62:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d68:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d6a:	f000 faf3 	bl	8001354 <HAL_DMA_Init>
 8000d6e:	b930      	cbnz	r0, 8000d7e <HAL_SPI_MspInit+0xc2>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <HAL_SPI_MspInit+0xd4>)
 8000d72:	6563      	str	r3, [r4, #84]	; 0x54
 8000d74:	629c      	str	r4, [r3, #40]	; 0x28
}
 8000d76:	e7ad      	b.n	8000cd4 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8000d78:	f7ff ff26 	bl	8000bc8 <Error_Handler>
 8000d7c:	e7e1      	b.n	8000d42 <HAL_SPI_MspInit+0x86>
      Error_Handler();
 8000d7e:	f7ff ff23 	bl	8000bc8 <Error_Handler>
 8000d82:	e7f5      	b.n	8000d70 <HAL_SPI_MspInit+0xb4>
 8000d84:	40013000 	.word	0x40013000
 8000d88:	20001e98 	.word	0x20001e98
 8000d8c:	40020030 	.word	0x40020030
 8000d90:	20001ef8 	.word	0x20001ef8
 8000d94:	40020008 	.word	0x40020008

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b500      	push	{lr}
 8000d9a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_MspInit+0x3c>)
 8000d9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000da0:	f042 0201 	orr.w	r2, r2, #1
 8000da4:	661a      	str	r2, [r3, #96]	; 0x60
 8000da6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000da8:	f002 0201 	and.w	r2, r2, #1
 8000dac:	9200      	str	r2, [sp, #0]
 8000dae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000db2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000db6:	659a      	str	r2, [r3, #88]	; 0x58
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	f06f 0001 	mvn.w	r0, #1
 8000dca:	f000 fa0b 	bl	80011e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	b003      	add	sp, #12
 8000dd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b530      	push	{r4, r5, lr}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000dde:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <HAL_InitTick+0x7c>)
 8000de0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000de6:	661a      	str	r2, [r3, #96]	; 0x60
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000df2:	a902      	add	r1, sp, #8
 8000df4:	a803      	add	r0, sp, #12
 8000df6:	f003 f985 	bl	8004104 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dfa:	f003 f971 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dfe:	4a16      	ldr	r2, [pc, #88]	; (8000e58 <HAL_InitTick+0x80>)
 8000e00:	fba2 2300 	umull	r2, r3, r2, r0
 8000e04:	0c9b      	lsrs	r3, r3, #18
 8000e06:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e08:	4814      	ldr	r0, [pc, #80]	; (8000e5c <HAL_InitTick+0x84>)
 8000e0a:	4a15      	ldr	r2, [pc, #84]	; (8000e60 <HAL_InitTick+0x88>)
 8000e0c:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e12:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e14:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	6083      	str	r3, [r0, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000e1c:	f004 fc24 	bl	8005668 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000e20:	4605      	mov	r5, r0
 8000e22:	b110      	cbz	r0, 8000e2a <HAL_InitTick+0x52>
    }
  }

 /* Return function status */
  return status;
}
 8000e24:	4628      	mov	r0, r5
 8000e26:	b009      	add	sp, #36	; 0x24
 8000e28:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <HAL_InitTick+0x84>)
 8000e2c:	f004 fa16 	bl	800525c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000e30:	4605      	mov	r5, r0
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d1f6      	bne.n	8000e24 <HAL_InitTick+0x4c>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e36:	2019      	movs	r0, #25
 8000e38:	f000 fa1a 	bl	8001270 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3c:	2c0f      	cmp	r4, #15
 8000e3e:	d901      	bls.n	8000e44 <HAL_InitTick+0x6c>
        status = HAL_ERROR;
 8000e40:	2501      	movs	r5, #1
 8000e42:	e7ef      	b.n	8000e24 <HAL_InitTick+0x4c>
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	4621      	mov	r1, r4
 8000e48:	2019      	movs	r0, #25
 8000e4a:	f000 f9cb 	bl	80011e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_InitTick+0x8c>)
 8000e50:	601c      	str	r4, [r3, #0]
 8000e52:	e7e7      	b.n	8000e24 <HAL_InitTick+0x4c>
 8000e54:	40021000 	.word	0x40021000
 8000e58:	431bde83 	.word	0x431bde83
 8000e5c:	20001fbc 	.word	0x20001fbc
 8000e60:	40012c00 	.word	0x40012c00
 8000e64:	20000008 	.word	0x20000008

08000e68 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <NMI_Handler>

08000e6a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler>

08000e6c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <MemManage_Handler>

08000e6e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler>

08000e70 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler>

08000e72 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e72:	4770      	bx	lr

08000e74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e76:	4802      	ldr	r0, [pc, #8]	; (8000e80 <DMA1_Channel1_IRQHandler+0xc>)
 8000e78:	f000 fc41 	bl	80016fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e7c:	bd08      	pop	{r3, pc}
 8000e7e:	bf00      	nop
 8000e80:	20001ef8 	.word	0x20001ef8

08000e84 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e86:	4802      	ldr	r0, [pc, #8]	; (8000e90 <DMA1_Channel2_IRQHandler+0xc>)
 8000e88:	f000 fc39 	bl	80016fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e8c:	bd08      	pop	{r3, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000200c 	.word	0x2000200c

08000e94 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000e94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e96:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <DMA1_Channel3_IRQHandler+0xc>)
 8000e98:	f000 fc31 	bl	80016fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000e9c:	bd08      	pop	{r3, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20001e98 	.word	0x20001e98

08000ea4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ea4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ea6:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <DMA1_Channel4_IRQHandler+0xc>)
 8000ea8:	f000 fc29 	bl	80016fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000eac:	bd08      	pop	{r3, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000206c 	.word	0x2000206c

08000eb4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000eb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000eb6:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <USB_LP_IRQHandler+0xc>)
 8000eb8:	f002 f934 	bl	8003124 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000ebc:	bd08      	pop	{r3, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000c660 	.word	0x2000c660

08000ec4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000ec4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ec6:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <FDCAN1_IT0_IRQHandler+0xc>)
 8000ec8:	f001 f91a 	bl	8002100 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000ecc:	bd08      	pop	{r3, pc}
 8000ece:	bf00      	nop
 8000ed0:	20001ca0 	.word	0x20001ca0

08000ed4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ed4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ed6:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <TIM1_UP_TIM16_IRQHandler+0xc>)
 8000ed8:	f004 fa46 	bl	8005368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000edc:	bd08      	pop	{r3, pc}
 8000ede:	bf00      	nop
 8000ee0:	20001fbc 	.word	0x20001fbc

08000ee4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ee4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <USART1_IRQHandler+0xc>)
 8000ee8:	f004 fd70 	bl	80059cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eec:	bd08      	pop	{r3, pc}
 8000eee:	bf00      	nop
 8000ef0:	200020cc 	.word	0x200020cc

08000ef4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	4770      	bx	lr

08000ef8 <_kill>:

int _kill(int pid, int sig)
{
 8000ef8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000efa:	f010 ff57 	bl	8011dac <__errno>
 8000efe:	2316      	movs	r3, #22
 8000f00:	6003      	str	r3, [r0, #0]
  return -1;
}
 8000f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f06:	bd08      	pop	{r3, pc}

08000f08 <_exit>:

void _exit (int status)
{
 8000f08:	b508      	push	{r3, lr}
  _kill(status, -1);
 8000f0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f0e:	f7ff fff3 	bl	8000ef8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f12:	e7fe      	b.n	8000f12 <_exit+0xa>

08000f14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f14:	b570      	push	{r4, r5, r6, lr}
 8000f16:	460c      	mov	r4, r1
 8000f18:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e006      	b.n	8000f2c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000f1e:	f3af 8000 	nop.w
 8000f22:	4621      	mov	r1, r4
 8000f24:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f28:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000f2a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2c:	42b5      	cmp	r5, r6
 8000f2e:	dbf6      	blt.n	8000f1e <_read+0xa>
  }

  return len;
}
 8000f30:	4630      	mov	r0, r6
 8000f32:	bd70      	pop	{r4, r5, r6, pc}

08000f34 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f38:	4770      	bx	lr

08000f3a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000f40:	2000      	movs	r0, #0
 8000f42:	4770      	bx	lr

08000f44 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000f44:	2001      	movs	r0, #1
 8000f46:	4770      	bx	lr

08000f48 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000f48:	2000      	movs	r0, #0
 8000f4a:	4770      	bx	lr

08000f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f4c:	b510      	push	{r4, lr}
 8000f4e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f50:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <_sbrk+0x38>)
 8000f52:	490d      	ldr	r1, [pc, #52]	; (8000f88 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <_sbrk+0x40>)
 8000f56:	6800      	ldr	r0, [r0, #0]
 8000f58:	b140      	cbz	r0, 8000f6c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	480c      	ldr	r0, [pc, #48]	; (8000f8c <_sbrk+0x40>)
 8000f5c:	6800      	ldr	r0, [r0, #0]
 8000f5e:	4403      	add	r3, r0
 8000f60:	1a52      	subs	r2, r2, r1
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d806      	bhi.n	8000f74 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000f66:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <_sbrk+0x40>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000f6a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <_sbrk+0x40>)
 8000f6e:	4c08      	ldr	r4, [pc, #32]	; (8000f90 <_sbrk+0x44>)
 8000f70:	6004      	str	r4, [r0, #0]
 8000f72:	e7f2      	b.n	8000f5a <_sbrk+0xe>
    errno = ENOMEM;
 8000f74:	f010 ff1a 	bl	8011dac <__errno>
 8000f78:	230c      	movs	r3, #12
 8000f7a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f80:	e7f3      	b.n	8000f6a <_sbrk+0x1e>
 8000f82:	bf00      	nop
 8000f84:	20020000 	.word	0x20020000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	20002008 	.word	0x20002008
 8000f90:	2000ccc0 	.word	0x2000ccc0

08000f94 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f94:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <SystemInit+0x10>)
 8000f96:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000f9a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fa8:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000faa:	4817      	ldr	r0, [pc, #92]	; (8001008 <MX_USART1_UART_Init+0x60>)
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_USART1_UART_Init+0x64>)
 8000fae:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000fb0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000fb4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fba:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fbc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc6:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc8:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fca:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fcc:	f005 fa88 	bl	80064e0 <HAL_UART_Init>
 8000fd0:	b970      	cbnz	r0, 8000ff0 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_USART1_UART_Init+0x60>)
 8000fd6:	f005 fb69 	bl	80066ac <HAL_UARTEx_SetTxFifoThreshold>
 8000fda:	b960      	cbnz	r0, 8000ff6 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	480a      	ldr	r0, [pc, #40]	; (8001008 <MX_USART1_UART_Init+0x60>)
 8000fe0:	f005 fbc2 	bl	8006768 <HAL_UARTEx_SetRxFifoThreshold>
 8000fe4:	b950      	cbnz	r0, 8000ffc <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fe6:	4808      	ldr	r0, [pc, #32]	; (8001008 <MX_USART1_UART_Init+0x60>)
 8000fe8:	f005 fb1e 	bl	8006628 <HAL_UARTEx_DisableFifoMode>
 8000fec:	b948      	cbnz	r0, 8001002 <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fee:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ff0:	f7ff fdea 	bl	8000bc8 <Error_Handler>
 8000ff4:	e7ed      	b.n	8000fd2 <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8000ff6:	f7ff fde7 	bl	8000bc8 <Error_Handler>
 8000ffa:	e7ef      	b.n	8000fdc <MX_USART1_UART_Init+0x34>
    Error_Handler();
 8000ffc:	f7ff fde4 	bl	8000bc8 <Error_Handler>
 8001000:	e7f1      	b.n	8000fe6 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8001002:	f7ff fde1 	bl	8000bc8 <Error_Handler>
}
 8001006:	e7f2      	b.n	8000fee <MX_USART1_UART_Init+0x46>
 8001008:	200020cc 	.word	0x200020cc
 800100c:	40013800 	.word	0x40013800

08001010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001010:	b530      	push	{r4, r5, lr}
 8001012:	b09d      	sub	sp, #116	; 0x74
 8001014:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	2100      	movs	r1, #0
 8001018:	9117      	str	r1, [sp, #92]	; 0x5c
 800101a:	9118      	str	r1, [sp, #96]	; 0x60
 800101c:	9119      	str	r1, [sp, #100]	; 0x64
 800101e:	911a      	str	r1, [sp, #104]	; 0x68
 8001020:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001022:	2254      	movs	r2, #84	; 0x54
 8001024:	a802      	add	r0, sp, #8
 8001026:	f010 fe2f 	bl	8011c88 <memset>
  if(uartHandle->Instance==USART1)
 800102a:	6822      	ldr	r2, [r4, #0]
 800102c:	4b33      	ldr	r3, [pc, #204]	; (80010fc <HAL_UART_MspInit+0xec>)
 800102e:	429a      	cmp	r2, r3
 8001030:	d001      	beq.n	8001036 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001032:	b01d      	add	sp, #116	; 0x74
 8001034:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001036:	2301      	movs	r3, #1
 8001038:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103a:	a802      	add	r0, sp, #8
 800103c:	f003 f894 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 8001040:	2800      	cmp	r0, #0
 8001042:	d152      	bne.n	80010ea <HAL_UART_MspInit+0xda>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001044:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <HAL_UART_MspInit+0xf0>)
 8001046:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800104c:	661a      	str	r2, [r3, #96]	; 0x60
 800104e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001050:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001054:	9200      	str	r2, [sp, #0]
 8001056:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800105a:	f042 0201 	orr.w	r2, r2, #1
 800105e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800106a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800106e:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2500      	movs	r5, #0
 8001076:	9519      	str	r5, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001078:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800107a:	2307      	movs	r3, #7
 800107c:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	a917      	add	r1, sp, #92	; 0x5c
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f001 f908 	bl	8002298 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8001088:	481e      	ldr	r0, [pc, #120]	; (8001104 <HAL_UART_MspInit+0xf4>)
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <HAL_UART_MspInit+0xf8>)
 800108c:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800108e:	2318      	movs	r3, #24
 8001090:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001092:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001094:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800109a:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800109c:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800109e:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010a0:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010a2:	f000 f957 	bl	8001354 <HAL_DMA_Init>
 80010a6:	bb18      	cbnz	r0, 80010f0 <HAL_UART_MspInit+0xe0>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_UART_MspInit+0xf4>)
 80010aa:	67e3      	str	r3, [r4, #124]	; 0x7c
 80010ac:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80010ae:	4817      	ldr	r0, [pc, #92]	; (800110c <HAL_UART_MspInit+0xfc>)
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <HAL_UART_MspInit+0x100>)
 80010b2:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80010b4:	2319      	movs	r3, #25
 80010b6:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b8:	2310      	movs	r3, #16
 80010ba:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c4:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c6:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80010c8:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ca:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80010cc:	f000 f942 	bl	8001354 <HAL_DMA_Init>
 80010d0:	b988      	cbnz	r0, 80010f6 <HAL_UART_MspInit+0xe6>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_UART_MspInit+0xfc>)
 80010d4:	67a3      	str	r3, [r4, #120]	; 0x78
 80010d6:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2105      	movs	r1, #5
 80010dc:	2025      	movs	r0, #37	; 0x25
 80010de:	f000 f881 	bl	80011e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010e2:	2025      	movs	r0, #37	; 0x25
 80010e4:	f000 f8c4 	bl	8001270 <HAL_NVIC_EnableIRQ>
}
 80010e8:	e7a3      	b.n	8001032 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80010ea:	f7ff fd6d 	bl	8000bc8 <Error_Handler>
 80010ee:	e7a9      	b.n	8001044 <HAL_UART_MspInit+0x34>
      Error_Handler();
 80010f0:	f7ff fd6a 	bl	8000bc8 <Error_Handler>
 80010f4:	e7d8      	b.n	80010a8 <HAL_UART_MspInit+0x98>
      Error_Handler();
 80010f6:	f7ff fd67 	bl	8000bc8 <Error_Handler>
 80010fa:	e7ea      	b.n	80010d2 <HAL_UART_MspInit+0xc2>
 80010fc:	40013800 	.word	0x40013800
 8001100:	40021000 	.word	0x40021000
 8001104:	2000200c 	.word	0x2000200c
 8001108:	4002001c 	.word	0x4002001c
 800110c:	2000206c 	.word	0x2000206c
 8001110:	40020044 	.word	0x40020044

08001114 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001116:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <LoopForever+0x6>)
  ldr r1, =_edata
 800111a:	490e      	ldr	r1, [pc, #56]	; (8001154 <LoopForever+0xa>)
  ldr r2, =_sidata
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <LoopForever+0xe>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001130:	4c0b      	ldr	r4, [pc, #44]	; (8001160 <LoopForever+0x16>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800113e:	f7ff ff29 	bl	8000f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001142:	f010 fe39 	bl	8011db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001146:	f7ff fd7a 	bl	8000c3e <main>

0800114a <LoopForever>:

LoopForever:
    b LoopForever
 800114a:	e7fe      	b.n	800114a <LoopForever>
  ldr   r0, =_estack
 800114c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	2000186c 	.word	0x2000186c
  ldr r2, =_sidata
 8001158:	08016bd0 	.word	0x08016bd0
  ldr r2, =_sbss
 800115c:	20001c70 	.word	0x20001c70
  ldr r4, =_ebss
 8001160:	2000ccc0 	.word	0x2000ccc0

08001164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC1_2_IRQHandler>

08001166 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001166:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001168:	2003      	movs	r0, #3
 800116a:	f000 f81d 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116e:	200f      	movs	r0, #15
 8001170:	f7ff fe32 	bl	8000dd8 <HAL_InitTick>
 8001174:	b110      	cbz	r0, 800117c <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 8001176:	2401      	movs	r4, #1
  }

  /* Return function status */
  return status;

}
 8001178:	4620      	mov	r0, r4
 800117a:	bd10      	pop	{r4, pc}
 800117c:	4604      	mov	r4, r0
    HAL_MspInit();
 800117e:	f7ff fe0b 	bl	8000d98 <HAL_MspInit>
 8001182:	e7f9      	b.n	8001178 <HAL_Init+0x12>

08001184 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001184:	4a03      	ldr	r2, [pc, #12]	; (8001194 <HAL_IncTick+0x10>)
 8001186:	6813      	ldr	r3, [r2, #0]
 8001188:	4903      	ldr	r1, [pc, #12]	; (8001198 <HAL_IncTick+0x14>)
 800118a:	6809      	ldr	r1, [r1, #0]
 800118c:	440b      	add	r3, r1
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000215c 	.word	0x2000215c
 8001198:	20000004 	.word	0x20000004

0800119c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800119c:	4b01      	ldr	r3, [pc, #4]	; (80011a4 <HAL_GetTick+0x8>)
 800119e:	6818      	ldr	r0, [r3, #0]
}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	2000215c 	.word	0x2000215c

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b510      	push	{r4, lr}
 80011aa:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80011ac:	1ec3      	subs	r3, r0, #3
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d80f      	bhi.n	80011d2 <HAL_NVIC_SetPriorityGrouping+0x2a>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <HAL_NVIC_SetPriorityGrouping+0x34>)
 80011b4:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011ba:	041b      	lsls	r3, r3, #16
 80011bc:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011be:	0224      	lsls	r4, r4, #8
 80011c0:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 80011c6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80011ce:	60d3      	str	r3, [r2, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80011d0:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80011d2:	21a6      	movs	r1, #166	; 0xa6
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80011d6:	f7ff fd4a 	bl	8000c6e <assert_failed>
 80011da:	e7ea      	b.n	80011b2 <HAL_NVIC_SetPriorityGrouping+0xa>
 80011dc:	e000ed00 	.word	0xe000ed00
 80011e0:	08012e68 	.word	0x08012e68

080011e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	4605      	mov	r5, r0
 80011e8:	460c      	mov	r4, r1
 80011ea:	4616      	mov	r6, r2
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80011ec:	2a0f      	cmp	r2, #15
 80011ee:	d825      	bhi.n	800123c <HAL_NVIC_SetPriority+0x58>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80011f0:	2c0f      	cmp	r4, #15
 80011f2:	d828      	bhi.n	8001246 <HAL_NVIC_SetPriority+0x62>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_NVIC_SetPriority+0x80>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	f1c3 0207 	rsb	r2, r3, #7
 8001200:	2a04      	cmp	r2, #4
 8001202:	bf28      	it	cs
 8001204:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	1d19      	adds	r1, r3, #4
 8001208:	2906      	cmp	r1, #6
 800120a:	d921      	bls.n	8001250 <HAL_NVIC_SetPriority+0x6c>
 800120c:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001212:	fa01 f202 	lsl.w	r2, r1, r2
 8001216:	ea24 0402 	bic.w	r4, r4, r2
 800121a:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	4099      	lsls	r1, r3
 800121e:	ea26 0601 	bic.w	r6, r6, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001222:	ea44 0206 	orr.w	r2, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8001226:	2d00      	cmp	r5, #0
 8001228:	db14      	blt.n	8001254 <HAL_NVIC_SetPriority+0x70>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8001232:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8001236:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800123a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800123c:	21be      	movs	r1, #190	; 0xbe
 800123e:	480a      	ldr	r0, [pc, #40]	; (8001268 <HAL_NVIC_SetPriority+0x84>)
 8001240:	f7ff fd15 	bl	8000c6e <assert_failed>
 8001244:	e7d4      	b.n	80011f0 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001246:	21bf      	movs	r1, #191	; 0xbf
 8001248:	4807      	ldr	r0, [pc, #28]	; (8001268 <HAL_NVIC_SetPriority+0x84>)
 800124a:	f7ff fd10 	bl	8000c6e <assert_failed>
 800124e:	e7d1      	b.n	80011f4 <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001250:	2300      	movs	r3, #0
 8001252:	e7dc      	b.n	800120e <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	f005 050f 	and.w	r5, r5, #15
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_NVIC_SetPriority+0x88>)
 800125e:	555a      	strb	r2, [r3, r5]
}
 8001260:	e7eb      	b.n	800123a <HAL_NVIC_SetPriority+0x56>
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	08012e68 	.word	0x08012e68
 800126c:	e000ed14 	.word	0xe000ed14

08001270 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001272:	1e04      	subs	r4, r0, #0
 8001274:	db0a      	blt.n	800128c <HAL_NVIC_EnableIRQ+0x1c>
  if ((int32_t)(IRQn) >= 0)
 8001276:	2c00      	cmp	r4, #0
 8001278:	db07      	blt.n	800128a <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	f004 021f 	and.w	r2, r4, #31
 800127e:	0964      	lsrs	r4, r4, #5
 8001280:	2301      	movs	r3, #1
 8001282:	4093      	lsls	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_NVIC_EnableIRQ+0x28>)
 8001286:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800128a:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800128c:	21d2      	movs	r1, #210	; 0xd2
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <HAL_NVIC_EnableIRQ+0x2c>)
 8001290:	f7ff fced 	bl	8000c6e <assert_failed>
 8001294:	e7ef      	b.n	8001276 <HAL_NVIC_EnableIRQ+0x6>
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100
 800129c:	08012e68 	.word	0x08012e68

080012a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012a0:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012a2:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80012a4:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80012a6:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80012a8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80012aa:	b114      	cbz	r4, 80012b2 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012ac:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80012ae:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80012b0:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012b2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80012b4:	f004 0c1f 	and.w	ip, r4, #31
 80012b8:	2401      	movs	r4, #1
 80012ba:	fa04 f40c 	lsl.w	r4, r4, ip
 80012be:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80012c0:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012c2:	6804      	ldr	r4, [r0, #0]
 80012c4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012c6:	6883      	ldr	r3, [r0, #8]
 80012c8:	2b10      	cmp	r3, #16
 80012ca:	d005      	beq.n	80012d8 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80012cc:	6803      	ldr	r3, [r0, #0]
 80012ce:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80012d0:	6803      	ldr	r3, [r0, #0]
 80012d2:	60da      	str	r2, [r3, #12]
  }
}
 80012d4:	bc30      	pop	{r4, r5}
 80012d6:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80012d8:	6803      	ldr	r3, [r0, #0]
 80012da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80012dc:	6803      	ldr	r3, [r0, #0]
 80012de:	60d9      	str	r1, [r3, #12]
 80012e0:	e7f8      	b.n	80012d4 <DMA_SetConfig+0x34>
	...

080012e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80012e4:	6803      	ldr	r3, [r0, #0]
 80012e6:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d813      	bhi.n	8001314 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80012ec:	490b      	ldr	r1, [pc, #44]	; (800131c <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	3b08      	subs	r3, #8
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80012f4:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80012f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80012fa:	f022 0203 	bic.w	r2, r2, #3
 80012fe:	440a      	add	r2, r1
 8001300:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001302:	4a08      	ldr	r2, [pc, #32]	; (8001324 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8001304:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001306:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800130a:	2201      	movs	r2, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001312:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001314:	4904      	ldr	r1, [pc, #16]	; (8001328 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001316:	e7ea      	b.n	80012ee <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8001318:	40020407 	.word	0x40020407
 800131c:	40020800 	.word	0x40020800
 8001320:	cccccccd 	.word	0xcccccccd
 8001324:	40020880 	.word	0x40020880
 8001328:	40020820 	.word	0x40020820

0800132c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800132c:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800132e:	4a07      	ldr	r2, [pc, #28]	; (800134c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8001330:	441a      	add	r2, r3
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001336:	4a06      	ldr	r2, [pc, #24]	; (8001350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001338:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800133a:	3b01      	subs	r3, #1
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	2201      	movs	r2, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	1000823f 	.word	0x1000823f
 8001350:	40020940 	.word	0x40020940

08001354 <HAL_DMA_Init>:
  if (hdma == NULL)
 8001354:	2800      	cmp	r0, #0
 8001356:	f000 80ed 	beq.w	8001534 <HAL_DMA_Init+0x1e0>
{
 800135a:	b510      	push	{r4, lr}
 800135c:	4604      	mov	r4, r0
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800135e:	6803      	ldr	r3, [r0, #0]
 8001360:	4a75      	ldr	r2, [pc, #468]	; (8001538 <HAL_DMA_Init+0x1e4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d031      	beq.n	80013ca <HAL_DMA_Init+0x76>
 8001366:	3214      	adds	r2, #20
 8001368:	4293      	cmp	r3, r2
 800136a:	d02e      	beq.n	80013ca <HAL_DMA_Init+0x76>
 800136c:	3214      	adds	r2, #20
 800136e:	4293      	cmp	r3, r2
 8001370:	d02b      	beq.n	80013ca <HAL_DMA_Init+0x76>
 8001372:	3214      	adds	r2, #20
 8001374:	4293      	cmp	r3, r2
 8001376:	d028      	beq.n	80013ca <HAL_DMA_Init+0x76>
 8001378:	3214      	adds	r2, #20
 800137a:	4293      	cmp	r3, r2
 800137c:	d025      	beq.n	80013ca <HAL_DMA_Init+0x76>
 800137e:	3214      	adds	r2, #20
 8001380:	4293      	cmp	r3, r2
 8001382:	d022      	beq.n	80013ca <HAL_DMA_Init+0x76>
 8001384:	3214      	adds	r2, #20
 8001386:	4293      	cmp	r3, r2
 8001388:	d01f      	beq.n	80013ca <HAL_DMA_Init+0x76>
 800138a:	3214      	adds	r2, #20
 800138c:	4293      	cmp	r3, r2
 800138e:	d01c      	beq.n	80013ca <HAL_DMA_Init+0x76>
 8001390:	f502 725d 	add.w	r2, r2, #884	; 0x374
 8001394:	4293      	cmp	r3, r2
 8001396:	d018      	beq.n	80013ca <HAL_DMA_Init+0x76>
 8001398:	3214      	adds	r2, #20
 800139a:	4293      	cmp	r3, r2
 800139c:	d015      	beq.n	80013ca <HAL_DMA_Init+0x76>
 800139e:	3214      	adds	r2, #20
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d012      	beq.n	80013ca <HAL_DMA_Init+0x76>
 80013a4:	3214      	adds	r2, #20
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00f      	beq.n	80013ca <HAL_DMA_Init+0x76>
 80013aa:	3214      	adds	r2, #20
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d00c      	beq.n	80013ca <HAL_DMA_Init+0x76>
 80013b0:	3214      	adds	r2, #20
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d009      	beq.n	80013ca <HAL_DMA_Init+0x76>
 80013b6:	3214      	adds	r2, #20
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d006      	beq.n	80013ca <HAL_DMA_Init+0x76>
 80013bc:	3214      	adds	r2, #20
 80013be:	4293      	cmp	r3, r2
 80013c0:	d003      	beq.n	80013ca <HAL_DMA_Init+0x76>
 80013c2:	21a3      	movs	r1, #163	; 0xa3
 80013c4:	485d      	ldr	r0, [pc, #372]	; (800153c <HAL_DMA_Init+0x1e8>)
 80013c6:	f7ff fc52 	bl	8000c6e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80013ca:	68a3      	ldr	r3, [r4, #8]
 80013cc:	b123      	cbz	r3, 80013d8 <HAL_DMA_Init+0x84>
 80013ce:	2b10      	cmp	r3, #16
 80013d0:	d002      	beq.n	80013d8 <HAL_DMA_Init+0x84>
 80013d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013d6:	d16d      	bne.n	80014b4 <HAL_DMA_Init+0x160>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80013d8:	68e3      	ldr	r3, [r4, #12]
 80013da:	2b40      	cmp	r3, #64	; 0x40
 80013dc:	d001      	beq.n	80013e2 <HAL_DMA_Init+0x8e>
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d16d      	bne.n	80014be <HAL_DMA_Init+0x16a>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80013e2:	6923      	ldr	r3, [r4, #16]
 80013e4:	2b80      	cmp	r3, #128	; 0x80
 80013e6:	d001      	beq.n	80013ec <HAL_DMA_Init+0x98>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d16d      	bne.n	80014c8 <HAL_DMA_Init+0x174>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80013ec:	6963      	ldr	r3, [r4, #20]
 80013ee:	b12b      	cbz	r3, 80013fc <HAL_DMA_Init+0xa8>
 80013f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013f4:	d002      	beq.n	80013fc <HAL_DMA_Init+0xa8>
 80013f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013fa:	d16a      	bne.n	80014d2 <HAL_DMA_Init+0x17e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80013fc:	69a3      	ldr	r3, [r4, #24]
 80013fe:	b12b      	cbz	r3, 800140c <HAL_DMA_Init+0xb8>
 8001400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001404:	d002      	beq.n	800140c <HAL_DMA_Init+0xb8>
 8001406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800140a:	d167      	bne.n	80014dc <HAL_DMA_Init+0x188>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800140c:	69e3      	ldr	r3, [r4, #28]
 800140e:	b10b      	cbz	r3, 8001414 <HAL_DMA_Init+0xc0>
 8001410:	2b20      	cmp	r3, #32
 8001412:	d168      	bne.n	80014e6 <HAL_DMA_Init+0x192>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001414:	6a23      	ldr	r3, [r4, #32]
 8001416:	b143      	cbz	r3, 800142a <HAL_DMA_Init+0xd6>
 8001418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800141c:	d005      	beq.n	800142a <HAL_DMA_Init+0xd6>
 800141e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001422:	d002      	beq.n	800142a <HAL_DMA_Init+0xd6>
 8001424:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001428:	d162      	bne.n	80014f0 <HAL_DMA_Init+0x19c>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800142a:	6863      	ldr	r3, [r4, #4]
 800142c:	2b73      	cmp	r3, #115	; 0x73
 800142e:	d864      	bhi.n	80014fa <HAL_DMA_Init+0x1a6>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001430:	6821      	ldr	r1, [r4, #0]
 8001432:	4b43      	ldr	r3, [pc, #268]	; (8001540 <HAL_DMA_Init+0x1ec>)
 8001434:	4299      	cmp	r1, r3
 8001436:	d865      	bhi.n	8001504 <HAL_DMA_Init+0x1b0>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001438:	4b42      	ldr	r3, [pc, #264]	; (8001544 <HAL_DMA_Init+0x1f0>)
 800143a:	440b      	add	r3, r1
 800143c:	4a42      	ldr	r2, [pc, #264]	; (8001548 <HAL_DMA_Init+0x1f4>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001448:	4b40      	ldr	r3, [pc, #256]	; (800154c <HAL_DMA_Init+0x1f8>)
 800144a:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800144c:	2302      	movs	r3, #2
 800144e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8001452:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001454:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001458:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 800145c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145e:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8001460:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001462:	6920      	ldr	r0, [r4, #16]
 8001464:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001466:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001468:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146a:	69a0      	ldr	r0, [r4, #24]
 800146c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800146e:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001470:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001472:	6a20      	ldr	r0, [r4, #32]
 8001474:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001476:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001478:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800147a:	4620      	mov	r0, r4
 800147c:	f7ff ff32 	bl	80012e4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001480:	68a3      	ldr	r3, [r4, #8]
 8001482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001486:	d048      	beq.n	800151a <HAL_DMA_Init+0x1c6>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001488:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800148a:	7922      	ldrb	r2, [r4, #4]
 800148c:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800148e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001490:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001492:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001494:	6863      	ldr	r3, [r4, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	2b03      	cmp	r3, #3
 800149a:	d941      	bls.n	8001520 <HAL_DMA_Init+0x1cc>
    hdma->DMAmuxRequestGen = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014a0:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014a2:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a4:	2000      	movs	r0, #0
 80014a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80014a8:	2301      	movs	r3, #1
 80014aa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80014ae:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80014b2:	bd10      	pop	{r4, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80014b4:	21a4      	movs	r1, #164	; 0xa4
 80014b6:	4821      	ldr	r0, [pc, #132]	; (800153c <HAL_DMA_Init+0x1e8>)
 80014b8:	f7ff fbd9 	bl	8000c6e <assert_failed>
 80014bc:	e78c      	b.n	80013d8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80014be:	21a5      	movs	r1, #165	; 0xa5
 80014c0:	481e      	ldr	r0, [pc, #120]	; (800153c <HAL_DMA_Init+0x1e8>)
 80014c2:	f7ff fbd4 	bl	8000c6e <assert_failed>
 80014c6:	e78c      	b.n	80013e2 <HAL_DMA_Init+0x8e>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80014c8:	21a6      	movs	r1, #166	; 0xa6
 80014ca:	481c      	ldr	r0, [pc, #112]	; (800153c <HAL_DMA_Init+0x1e8>)
 80014cc:	f7ff fbcf 	bl	8000c6e <assert_failed>
 80014d0:	e78c      	b.n	80013ec <HAL_DMA_Init+0x98>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80014d2:	21a7      	movs	r1, #167	; 0xa7
 80014d4:	4819      	ldr	r0, [pc, #100]	; (800153c <HAL_DMA_Init+0x1e8>)
 80014d6:	f7ff fbca 	bl	8000c6e <assert_failed>
 80014da:	e78f      	b.n	80013fc <HAL_DMA_Init+0xa8>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80014dc:	21a8      	movs	r1, #168	; 0xa8
 80014de:	4817      	ldr	r0, [pc, #92]	; (800153c <HAL_DMA_Init+0x1e8>)
 80014e0:	f7ff fbc5 	bl	8000c6e <assert_failed>
 80014e4:	e792      	b.n	800140c <HAL_DMA_Init+0xb8>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80014e6:	21a9      	movs	r1, #169	; 0xa9
 80014e8:	4814      	ldr	r0, [pc, #80]	; (800153c <HAL_DMA_Init+0x1e8>)
 80014ea:	f7ff fbc0 	bl	8000c6e <assert_failed>
 80014ee:	e791      	b.n	8001414 <HAL_DMA_Init+0xc0>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80014f0:	21aa      	movs	r1, #170	; 0xaa
 80014f2:	4812      	ldr	r0, [pc, #72]	; (800153c <HAL_DMA_Init+0x1e8>)
 80014f4:	f7ff fbbb 	bl	8000c6e <assert_failed>
 80014f8:	e797      	b.n	800142a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80014fa:	21ac      	movs	r1, #172	; 0xac
 80014fc:	480f      	ldr	r0, [pc, #60]	; (800153c <HAL_DMA_Init+0x1e8>)
 80014fe:	f7ff fbb6 	bl	8000c6e <assert_failed>
 8001502:	e795      	b.n	8001430 <HAL_DMA_Init+0xdc>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_DMA_Init+0x1fc>)
 8001506:	440b      	add	r3, r1
 8001508:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <HAL_DMA_Init+0x1f4>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	091b      	lsrs	r3, r3, #4
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_DMA_Init+0x200>)
 8001516:	6423      	str	r3, [r4, #64]	; 0x40
 8001518:	e798      	b.n	800144c <HAL_DMA_Init+0xf8>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800151a:	2300      	movs	r3, #0
 800151c:	6063      	str	r3, [r4, #4]
 800151e:	e7b3      	b.n	8001488 <HAL_DMA_Init+0x134>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff ff03 	bl	800132c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001526:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800152c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800152e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	e7b7      	b.n	80014a4 <HAL_DMA_Init+0x150>
    return HAL_ERROR;
 8001534:	2001      	movs	r0, #1
}
 8001536:	4770      	bx	lr
 8001538:	40020008 	.word	0x40020008
 800153c:	08012ea4 	.word	0x08012ea4
 8001540:	40020407 	.word	0x40020407
 8001544:	bffdfff8 	.word	0xbffdfff8
 8001548:	cccccccd 	.word	0xcccccccd
 800154c:	40020000 	.word	0x40020000
 8001550:	bffdfbf8 	.word	0xbffdfbf8
 8001554:	40020400 	.word	0x40020400

08001558 <HAL_DMA_Start_IT>:
{
 8001558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155a:	4604      	mov	r4, r0
 800155c:	460e      	mov	r6, r1
 800155e:	4617      	mov	r7, r2
 8001560:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001562:	1e5a      	subs	r2, r3, #1
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <HAL_DMA_Start_IT+0xb4>)
 8001566:	429a      	cmp	r2, r3
 8001568:	d810      	bhi.n	800158c <HAL_DMA_Start_IT+0x34>
  __HAL_LOCK(hdma);
 800156a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800156e:	2b01      	cmp	r3, #1
 8001570:	d04a      	beq.n	8001608 <HAL_DMA_Start_IT+0xb0>
 8001572:	2301      	movs	r3, #1
 8001574:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8001578:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d00a      	beq.n	8001598 <HAL_DMA_Start_IT+0x40>
    __HAL_UNLOCK(hdma);
 8001582:	2300      	movs	r3, #0
 8001584:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8001588:	2002      	movs	r0, #2
}
 800158a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800158c:	f240 11ab 	movw	r1, #427	; 0x1ab
 8001590:	481f      	ldr	r0, [pc, #124]	; (8001610 <HAL_DMA_Start_IT+0xb8>)
 8001592:	f7ff fb6c 	bl	8000c6e <assert_failed>
 8001596:	e7e8      	b.n	800156a <HAL_DMA_Start_IT+0x12>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001598:	2302      	movs	r3, #2
 800159a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800159e:	2300      	movs	r3, #0
 80015a0:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80015a2:	6822      	ldr	r2, [r4, #0]
 80015a4:	6813      	ldr	r3, [r2, #0]
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	6013      	str	r3, [r2, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015ac:	462b      	mov	r3, r5
 80015ae:	463a      	mov	r2, r7
 80015b0:	4631      	mov	r1, r6
 80015b2:	4620      	mov	r0, r4
 80015b4:	f7ff fe74 	bl	80012a0 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80015b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015ba:	b1d3      	cbz	r3, 80015f2 <HAL_DMA_Start_IT+0x9a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015bc:	6822      	ldr	r2, [r4, #0]
 80015be:	6813      	ldr	r3, [r2, #0]
 80015c0:	f043 030e 	orr.w	r3, r3, #14
 80015c4:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80015c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80015ce:	d003      	beq.n	80015d8 <HAL_DMA_Start_IT+0x80>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015d6:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80015d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015da:	b11b      	cbz	r3, 80015e4 <HAL_DMA_Start_IT+0x8c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015e2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80015e4:	6822      	ldr	r2, [r4, #0]
 80015e6:	6813      	ldr	r3, [r2, #0]
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ee:	2000      	movs	r0, #0
 80015f0:	e7cb      	b.n	800158a <HAL_DMA_Start_IT+0x32>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f2:	6822      	ldr	r2, [r4, #0]
 80015f4:	6813      	ldr	r3, [r2, #0]
 80015f6:	f023 0304 	bic.w	r3, r3, #4
 80015fa:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015fc:	6822      	ldr	r2, [r4, #0]
 80015fe:	6813      	ldr	r3, [r2, #0]
 8001600:	f043 030a 	orr.w	r3, r3, #10
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e7de      	b.n	80015c6 <HAL_DMA_Start_IT+0x6e>
  __HAL_LOCK(hdma);
 8001608:	2002      	movs	r0, #2
 800160a:	e7be      	b.n	800158a <HAL_DMA_Start_IT+0x32>
 800160c:	0003fffe 	.word	0x0003fffe
 8001610:	08012ea4 	.word	0x08012ea4

08001614 <HAL_DMA_Abort>:
{
 8001614:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001616:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	2a02      	cmp	r2, #2
 800161e:	d009      	beq.n	8001634 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001620:	2204      	movs	r2, #4
 8001622:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001624:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8001632:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001634:	6801      	ldr	r1, [r0, #0]
 8001636:	680a      	ldr	r2, [r1, #0]
 8001638:	f022 020e 	bic.w	r2, r2, #14
 800163c:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800163e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001640:	680a      	ldr	r2, [r1, #0]
 8001642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001646:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 8001648:	6801      	ldr	r1, [r0, #0]
 800164a:	680a      	ldr	r2, [r1, #0]
 800164c:	f022 0201 	bic.w	r2, r2, #1
 8001650:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001652:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001654:	f002 011f 	and.w	r1, r2, #31
 8001658:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800165a:	2201      	movs	r2, #1
 800165c:	408a      	lsls	r2, r1
 800165e:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001660:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001662:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001664:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8001666:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001668:	b142      	cbz	r2, 800167c <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800166a:	6811      	ldr	r1, [r2, #0]
 800166c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001670:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001672:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001674:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001676:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001678:	2000      	movs	r0, #0
 800167a:	e7d4      	b.n	8001626 <HAL_DMA_Abort+0x12>
 800167c:	2000      	movs	r0, #0
 800167e:	e7d2      	b.n	8001626 <HAL_DMA_Abort+0x12>

08001680 <HAL_DMA_Abort_IT>:
{
 8001680:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001682:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d009      	beq.n	80016a0 <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168c:	2304      	movs	r3, #4
 800168e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001690:	2301      	movs	r3, #1
 8001692:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001696:	2200      	movs	r2, #0
 8001698:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 800169c:	4618      	mov	r0, r3
}
 800169e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a0:	6802      	ldr	r2, [r0, #0]
 80016a2:	6813      	ldr	r3, [r2, #0]
 80016a4:	f023 030e 	bic.w	r3, r3, #14
 80016a8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80016aa:	6802      	ldr	r2, [r0, #0]
 80016ac:	6813      	ldr	r3, [r2, #0]
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016b4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80016b6:	6813      	ldr	r3, [r2, #0]
 80016b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016bc:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80016c0:	f003 021f 	and.w	r2, r3, #31
 80016c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80016c6:	2301      	movs	r3, #1
 80016c8:	4093      	lsls	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80016ce:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80016d0:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80016d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80016d4:	b133      	cbz	r3, 80016e4 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016dc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016de:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80016e0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80016e2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80016ea:	2300      	movs	r3, #0
 80016ec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80016f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80016f2:	b113      	cbz	r3, 80016fa <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 80016f4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80016f6:	2000      	movs	r0, #0
 80016f8:	e7d1      	b.n	800169e <HAL_DMA_Abort_IT+0x1e>
 80016fa:	2000      	movs	r0, #0
 80016fc:	e7cf      	b.n	800169e <HAL_DMA_Abort_IT+0x1e>

080016fe <HAL_DMA_IRQHandler>:
{
 80016fe:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001700:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001702:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001704:	6804      	ldr	r4, [r0, #0]
 8001706:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001708:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	2204      	movs	r2, #4
 8001710:	409a      	lsls	r2, r3
 8001712:	420a      	tst	r2, r1
 8001714:	d015      	beq.n	8001742 <HAL_DMA_IRQHandler+0x44>
 8001716:	f015 0f04 	tst.w	r5, #4
 800171a:	d012      	beq.n	8001742 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800171c:	6823      	ldr	r3, [r4, #0]
 800171e:	f013 0f20 	tst.w	r3, #32
 8001722:	d103      	bne.n	800172c <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	f023 0304 	bic.w	r3, r3, #4
 800172a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800172c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800172e:	f003 021f 	and.w	r2, r3, #31
 8001732:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001734:	2304      	movs	r3, #4
 8001736:	4093      	lsls	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800173a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800173c:	b103      	cbz	r3, 8001740 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 800173e:	4798      	blx	r3
}
 8001740:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001742:	2202      	movs	r2, #2
 8001744:	409a      	lsls	r2, r3
 8001746:	420a      	tst	r2, r1
 8001748:	d01c      	beq.n	8001784 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 800174a:	f015 0f02 	tst.w	r5, #2
 800174e:	d019      	beq.n	8001784 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	f013 0f20 	tst.w	r3, #32
 8001756:	d106      	bne.n	8001766 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	f023 030a 	bic.w	r3, r3, #10
 800175e:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001760:	2301      	movs	r3, #1
 8001762:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001766:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800176e:	2302      	movs	r3, #2
 8001770:	4093      	lsls	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001774:	2300      	movs	r3, #0
 8001776:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800177a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0df      	beq.n	8001740 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8001780:	4798      	blx	r3
 8001782:	e7dd      	b.n	8001740 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001784:	2208      	movs	r2, #8
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	420b      	tst	r3, r1
 800178c:	d0d8      	beq.n	8001740 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 800178e:	f015 0f08 	tst.w	r5, #8
 8001792:	d0d5      	beq.n	8001740 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	f023 030e 	bic.w	r3, r3, #14
 800179a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800179c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80017a4:	2201      	movs	r2, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017ac:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80017ae:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80017b2:	2300      	movs	r3, #0
 80017b4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80017b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0c0      	beq.n	8001740 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80017be:	4798      	blx	r3
  return;
 80017c0:	e7be      	b.n	8001740 <HAL_DMA_IRQHandler+0x42>
	...

080017c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80017c4:	b410      	push	{r4}
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80017c6:	6802      	ldr	r2, [r0, #0]
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <FDCAN_CalcultateRamBlockAddresses+0x7c>)
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d028      	beq.n	8001820 <FDCAN_CalcultateRamBlockAddresses+0x5c>
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80017ce:	491d      	ldr	r1, [pc, #116]	; (8001844 <FDCAN_CalcultateRamBlockAddresses+0x80>)
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <FDCAN_CalcultateRamBlockAddresses+0x84>)
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d026      	beq.n	8001824 <FDCAN_CalcultateRamBlockAddresses+0x60>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80017d6:	6401      	str	r1, [r0, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80017d8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80017dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80017e0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80017e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80017e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80017ea:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80017ee:	6443      	str	r3, [r0, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80017f0:	6802      	ldr	r2, [r0, #0]
 80017f2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80017f6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80017fa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80017fc:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8001800:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001804:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 8001808:	6483      	str	r3, [r0, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800180a:	f501 73c4 	add.w	r3, r1, #392	; 0x188
 800180e:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001810:	f501 7318 	add.w	r3, r1, #608	; 0x260
 8001814:	6503      	str	r3, [r0, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001816:	f501 731e 	add.w	r3, r1, #632	; 0x278
 800181a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800181c:	460b      	mov	r3, r1
 800181e:	e007      	b.n	8001830 <FDCAN_CalcultateRamBlockAddresses+0x6c>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001820:	490a      	ldr	r1, [pc, #40]	; (800184c <FDCAN_CalcultateRamBlockAddresses+0x88>)
 8001822:	e7d5      	b.n	80017d0 <FDCAN_CalcultateRamBlockAddresses+0xc>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001824:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 8001828:	e7d5      	b.n	80017d6 <FDCAN_CalcultateRamBlockAddresses+0x12>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800182a:	2200      	movs	r2, #0
 800182c:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001830:	f501 7254 	add.w	r2, r1, #848	; 0x350
 8001834:	429a      	cmp	r2, r3
 8001836:	d8f8      	bhi.n	800182a <FDCAN_CalcultateRamBlockAddresses+0x66>
  }
}
 8001838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40006800 	.word	0x40006800
 8001844:	4000a400 	.word	0x4000a400
 8001848:	40006c00 	.word	0x40006c00
 800184c:	4000a750 	.word	0x4000a750

08001850 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001850:	b570      	push	{r4, r5, r6, lr}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001852:	684c      	ldr	r4, [r1, #4]
 8001854:	b9e4      	cbnz	r4, 8001890 <FDCAN_CopyMessageToRAM+0x40>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001856:	690d      	ldr	r5, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001858:	688c      	ldr	r4, [r1, #8]
                   FDCAN_STANDARD_ID |
 800185a:	4325      	orrs	r5, r4
                   (pTxHeader->Identifier << 18U));
 800185c:	680c      	ldr	r4, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800185e:	ea45 4584 	orr.w	r5, r5, r4, lsl #18
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
                 pTxHeader->TxEventFifoControl |
 8001862:	69cc      	ldr	r4, [r1, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001864:	6a0e      	ldr	r6, [r1, #32]
 8001866:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
                 pTxHeader->TxEventFifoControl |
 800186a:	698e      	ldr	r6, [r1, #24]
 800186c:	4334      	orrs	r4, r6
                 pTxHeader->FDFormat |
 800186e:	694e      	ldr	r6, [r1, #20]
 8001870:	4334      	orrs	r4, r6
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001872:	68ce      	ldr	r6, [r1, #12]
 8001874:	4334      	orrs	r4, r6
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001876:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8001878:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800187c:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001880:	f840 5033 	str.w	r5, [r0, r3, lsl #3]
  TxAddress++;
  *TxAddress = TxElementW2;
 8001884:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;
 8001888:	f10e 0e08 	add.w	lr, lr, #8

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800188c:	2000      	movs	r0, #0
 800188e:	e019      	b.n	80018c4 <FDCAN_CopyMessageToRAM+0x74>
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001890:	690c      	ldr	r4, [r1, #16]
                   pTxHeader->TxFrameType |
 8001892:	688d      	ldr	r5, [r1, #8]
                   FDCAN_EXTENDED_ID |
 8001894:	4325      	orrs	r5, r4
                   pTxHeader->Identifier);
 8001896:	680c      	ldr	r4, [r1, #0]
                   pTxHeader->TxFrameType |
 8001898:	4325      	orrs	r5, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800189a:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 800189e:	e7e0      	b.n	8001862 <FDCAN_CopyMessageToRAM+0x12>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80018a0:	eb02 0c00 	add.w	ip, r2, r0
 80018a4:	f89c 4003 	ldrb.w	r4, [ip, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80018a8:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80018ac:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80018ae:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80018b2:	f89c 4001 	ldrb.w	r4, [ip, #1]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80018b6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                  (uint32_t)pTxData[ByteCounter]);
 80018ba:	5c14      	ldrb	r4, [r2, r0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80018bc:	4323      	orrs	r3, r4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80018be:	f84e 3b04 	str.w	r3, [lr], #4
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80018c2:	3004      	adds	r0, #4
 80018c4:	89cb      	ldrh	r3, [r1, #14]
 80018c6:	4c02      	ldr	r4, [pc, #8]	; (80018d0 <FDCAN_CopyMessageToRAM+0x80>)
 80018c8:	5ce3      	ldrb	r3, [r4, r3]
 80018ca:	4283      	cmp	r3, r0
 80018cc:	d8e8      	bhi.n	80018a0 <FDCAN_CopyMessageToRAM+0x50>
    TxAddress++;
  }
}
 80018ce:	bd70      	pop	{r4, r5, r6, pc}
 80018d0:	08012f18 	.word	0x08012f18

080018d4 <HAL_FDCAN_Init>:
  if (hfdcan == NULL)
 80018d4:	2800      	cmp	r0, #0
 80018d6:	f000 81b1 	beq.w	8001c3c <HAL_FDCAN_Init+0x368>
{
 80018da:	b538      	push	{r3, r4, r5, lr}
 80018dc:	4604      	mov	r4, r0
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));
 80018de:	6803      	ldr	r3, [r0, #0]
 80018e0:	4a82      	ldr	r2, [pc, #520]	; (8001aec <HAL_FDCAN_Init+0x218>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00c      	beq.n	8001900 <HAL_FDCAN_Init+0x2c>
 80018e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d008      	beq.n	8001900 <HAL_FDCAN_Init+0x2c>
 80018ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d004      	beq.n	8001900 <HAL_FDCAN_Init+0x2c>
 80018f6:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80018fa:	487d      	ldr	r0, [pc, #500]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 80018fc:	f7ff f9b7 	bl	8000c6e <assert_failed>
  if (hfdcan->Instance == FDCAN1)
 8001900:	6822      	ldr	r2, [r4, #0]
 8001902:	4b7a      	ldr	r3, [pc, #488]	; (8001aec <HAL_FDCAN_Init+0x218>)
 8001904:	429a      	cmp	r2, r3
 8001906:	d057      	beq.n	80019b8 <HAL_FDCAN_Init+0xe4>
  assert_param(IS_FDCAN_FRAME_FORMAT(hfdcan->Init.FrameFormat));
 8001908:	68a3      	ldr	r3, [r4, #8]
 800190a:	b12b      	cbz	r3, 8001918 <HAL_FDCAN_Init+0x44>
 800190c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001910:	d002      	beq.n	8001918 <HAL_FDCAN_Init+0x44>
 8001912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001916:	d158      	bne.n	80019ca <HAL_FDCAN_Init+0xf6>
  assert_param(IS_FDCAN_MODE(hfdcan->Init.Mode));
 8001918:	68e3      	ldr	r3, [r4, #12]
 800191a:	2b04      	cmp	r3, #4
 800191c:	d85b      	bhi.n	80019d6 <HAL_FDCAN_Init+0x102>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.AutoRetransmission));
 800191e:	7c23      	ldrb	r3, [r4, #16]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d85e      	bhi.n	80019e2 <HAL_FDCAN_Init+0x10e>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.TransmitPause));
 8001924:	7c63      	ldrb	r3, [r4, #17]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d861      	bhi.n	80019ee <HAL_FDCAN_Init+0x11a>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.ProtocolException));
 800192a:	7ca3      	ldrb	r3, [r4, #18]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d864      	bhi.n	80019fa <HAL_FDCAN_Init+0x126>
  assert_param(IS_FDCAN_NOMINAL_PRESCALER(hfdcan->Init.NominalPrescaler));
 8001930:	6963      	ldr	r3, [r4, #20]
 8001932:	3b01      	subs	r3, #1
 8001934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001938:	d265      	bcs.n	8001a06 <HAL_FDCAN_Init+0x132>
  assert_param(IS_FDCAN_NOMINAL_SJW(hfdcan->Init.NominalSyncJumpWidth));
 800193a:	69a3      	ldr	r3, [r4, #24]
 800193c:	3b01      	subs	r3, #1
 800193e:	2b7f      	cmp	r3, #127	; 0x7f
 8001940:	d867      	bhi.n	8001a12 <HAL_FDCAN_Init+0x13e>
  assert_param(IS_FDCAN_NOMINAL_TSEG1(hfdcan->Init.NominalTimeSeg1));
 8001942:	69e3      	ldr	r3, [r4, #28]
 8001944:	3b01      	subs	r3, #1
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d869      	bhi.n	8001a1e <HAL_FDCAN_Init+0x14a>
  assert_param(IS_FDCAN_NOMINAL_TSEG2(hfdcan->Init.NominalTimeSeg2));
 800194a:	6a23      	ldr	r3, [r4, #32]
 800194c:	3b01      	subs	r3, #1
 800194e:	2b7f      	cmp	r3, #127	; 0x7f
 8001950:	d86b      	bhi.n	8001a2a <HAL_FDCAN_Init+0x156>
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001952:	68a3      	ldr	r3, [r4, #8]
 8001954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001958:	d06d      	beq.n	8001a36 <HAL_FDCAN_Init+0x162>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.StdFiltersNbr, SRAMCAN_FLS_NBR));
 800195a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800195c:	2b1c      	cmp	r3, #28
 800195e:	f200 8092 	bhi.w	8001a86 <HAL_FDCAN_Init+0x1b2>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.ExtFiltersNbr, SRAMCAN_FLE_NBR));
 8001962:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001964:	2b08      	cmp	r3, #8
 8001966:	f200 8094 	bhi.w	8001a92 <HAL_FDCAN_Init+0x1be>
  assert_param(IS_FDCAN_TX_FIFO_QUEUE_MODE(hfdcan->Init.TxFifoQueueMode));
 800196a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800196c:	b11b      	cbz	r3, 8001976 <HAL_FDCAN_Init+0xa2>
 800196e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001972:	f040 8094 	bne.w	8001a9e <HAL_FDCAN_Init+0x1ca>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001976:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8095 	beq.w	8001aaa <HAL_FDCAN_Init+0x1d6>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001980:	6822      	ldr	r2, [r4, #0]
 8001982:	6993      	ldr	r3, [r2, #24]
 8001984:	f023 0310 	bic.w	r3, r3, #16
 8001988:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 800198a:	f7ff fc07 	bl	800119c <HAL_GetTick>
 800198e:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	699a      	ldr	r2, [r3, #24]
 8001994:	f012 0f08 	tst.w	r2, #8
 8001998:	f000 808d 	beq.w	8001ab6 <HAL_FDCAN_Init+0x1e2>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800199c:	f7ff fbfe 	bl	800119c <HAL_GetTick>
 80019a0:	1b40      	subs	r0, r0, r5
 80019a2:	280a      	cmp	r0, #10
 80019a4:	d9f4      	bls.n	8001990 <HAL_FDCAN_Init+0xbc>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80019a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80019ae:	2303      	movs	r3, #3
 80019b0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80019b4:	2001      	movs	r0, #1
}
 80019b6:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_FDCAN_CKDIV(hfdcan->Init.ClockDivider));
 80019b8:	6863      	ldr	r3, [r4, #4]
 80019ba:	2b0f      	cmp	r3, #15
 80019bc:	d9a4      	bls.n	8001908 <HAL_FDCAN_Init+0x34>
 80019be:	f240 112d 	movw	r1, #301	; 0x12d
 80019c2:	484b      	ldr	r0, [pc, #300]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 80019c4:	f7ff f953 	bl	8000c6e <assert_failed>
 80019c8:	e79e      	b.n	8001908 <HAL_FDCAN_Init+0x34>
  assert_param(IS_FDCAN_FRAME_FORMAT(hfdcan->Init.FrameFormat));
 80019ca:	f240 112f 	movw	r1, #303	; 0x12f
 80019ce:	4848      	ldr	r0, [pc, #288]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 80019d0:	f7ff f94d 	bl	8000c6e <assert_failed>
 80019d4:	e7a0      	b.n	8001918 <HAL_FDCAN_Init+0x44>
  assert_param(IS_FDCAN_MODE(hfdcan->Init.Mode));
 80019d6:	f44f 7198 	mov.w	r1, #304	; 0x130
 80019da:	4845      	ldr	r0, [pc, #276]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 80019dc:	f7ff f947 	bl	8000c6e <assert_failed>
 80019e0:	e79d      	b.n	800191e <HAL_FDCAN_Init+0x4a>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.AutoRetransmission));
 80019e2:	f240 1131 	movw	r1, #305	; 0x131
 80019e6:	4842      	ldr	r0, [pc, #264]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 80019e8:	f7ff f941 	bl	8000c6e <assert_failed>
 80019ec:	e79a      	b.n	8001924 <HAL_FDCAN_Init+0x50>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.TransmitPause));
 80019ee:	f44f 7199 	mov.w	r1, #306	; 0x132
 80019f2:	483f      	ldr	r0, [pc, #252]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 80019f4:	f7ff f93b 	bl	8000c6e <assert_failed>
 80019f8:	e797      	b.n	800192a <HAL_FDCAN_Init+0x56>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.ProtocolException));
 80019fa:	f240 1133 	movw	r1, #307	; 0x133
 80019fe:	483c      	ldr	r0, [pc, #240]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 8001a00:	f7ff f935 	bl	8000c6e <assert_failed>
 8001a04:	e794      	b.n	8001930 <HAL_FDCAN_Init+0x5c>
  assert_param(IS_FDCAN_NOMINAL_PRESCALER(hfdcan->Init.NominalPrescaler));
 8001a06:	f44f 719a 	mov.w	r1, #308	; 0x134
 8001a0a:	4839      	ldr	r0, [pc, #228]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 8001a0c:	f7ff f92f 	bl	8000c6e <assert_failed>
 8001a10:	e793      	b.n	800193a <HAL_FDCAN_Init+0x66>
  assert_param(IS_FDCAN_NOMINAL_SJW(hfdcan->Init.NominalSyncJumpWidth));
 8001a12:	f240 1135 	movw	r1, #309	; 0x135
 8001a16:	4836      	ldr	r0, [pc, #216]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 8001a18:	f7ff f929 	bl	8000c6e <assert_failed>
 8001a1c:	e791      	b.n	8001942 <HAL_FDCAN_Init+0x6e>
  assert_param(IS_FDCAN_NOMINAL_TSEG1(hfdcan->Init.NominalTimeSeg1));
 8001a1e:	f44f 719b 	mov.w	r1, #310	; 0x136
 8001a22:	4833      	ldr	r0, [pc, #204]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 8001a24:	f7ff f923 	bl	8000c6e <assert_failed>
 8001a28:	e78f      	b.n	800194a <HAL_FDCAN_Init+0x76>
  assert_param(IS_FDCAN_NOMINAL_TSEG2(hfdcan->Init.NominalTimeSeg2));
 8001a2a:	f240 1137 	movw	r1, #311	; 0x137
 8001a2e:	4830      	ldr	r0, [pc, #192]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 8001a30:	f7ff f91d 	bl	8000c6e <assert_failed>
 8001a34:	e78d      	b.n	8001952 <HAL_FDCAN_Init+0x7e>
    assert_param(IS_FDCAN_DATA_PRESCALER(hfdcan->Init.DataPrescaler));
 8001a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	2b1f      	cmp	r3, #31
 8001a3c:	d811      	bhi.n	8001a62 <HAL_FDCAN_Init+0x18e>
    assert_param(IS_FDCAN_DATA_SJW(hfdcan->Init.DataSyncJumpWidth));
 8001a3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a40:	3b01      	subs	r3, #1
 8001a42:	2b0f      	cmp	r3, #15
 8001a44:	d813      	bhi.n	8001a6e <HAL_FDCAN_Init+0x19a>
    assert_param(IS_FDCAN_DATA_TSEG1(hfdcan->Init.DataTimeSeg1));
 8001a46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	2b1f      	cmp	r3, #31
 8001a4c:	d815      	bhi.n	8001a7a <HAL_FDCAN_Init+0x1a6>
    assert_param(IS_FDCAN_DATA_TSEG2(hfdcan->Init.DataTimeSeg2));
 8001a4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a50:	3b01      	subs	r3, #1
 8001a52:	2b0f      	cmp	r3, #15
 8001a54:	d981      	bls.n	800195a <HAL_FDCAN_Init+0x86>
 8001a56:	f240 113d 	movw	r1, #317	; 0x13d
 8001a5a:	4825      	ldr	r0, [pc, #148]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 8001a5c:	f7ff f907 	bl	8000c6e <assert_failed>
 8001a60:	e77b      	b.n	800195a <HAL_FDCAN_Init+0x86>
    assert_param(IS_FDCAN_DATA_PRESCALER(hfdcan->Init.DataPrescaler));
 8001a62:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8001a66:	4822      	ldr	r0, [pc, #136]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 8001a68:	f7ff f901 	bl	8000c6e <assert_failed>
 8001a6c:	e7e7      	b.n	8001a3e <HAL_FDCAN_Init+0x16a>
    assert_param(IS_FDCAN_DATA_SJW(hfdcan->Init.DataSyncJumpWidth));
 8001a6e:	f240 113b 	movw	r1, #315	; 0x13b
 8001a72:	481f      	ldr	r0, [pc, #124]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 8001a74:	f7ff f8fb 	bl	8000c6e <assert_failed>
 8001a78:	e7e5      	b.n	8001a46 <HAL_FDCAN_Init+0x172>
    assert_param(IS_FDCAN_DATA_TSEG1(hfdcan->Init.DataTimeSeg1));
 8001a7a:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8001a7e:	481c      	ldr	r0, [pc, #112]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 8001a80:	f7ff f8f5 	bl	8000c6e <assert_failed>
 8001a84:	e7e3      	b.n	8001a4e <HAL_FDCAN_Init+0x17a>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.StdFiltersNbr, SRAMCAN_FLS_NBR));
 8001a86:	f240 113f 	movw	r1, #319	; 0x13f
 8001a8a:	4819      	ldr	r0, [pc, #100]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 8001a8c:	f7ff f8ef 	bl	8000c6e <assert_failed>
 8001a90:	e767      	b.n	8001962 <HAL_FDCAN_Init+0x8e>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.ExtFiltersNbr, SRAMCAN_FLE_NBR));
 8001a92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001a96:	4816      	ldr	r0, [pc, #88]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 8001a98:	f7ff f8e9 	bl	8000c6e <assert_failed>
 8001a9c:	e765      	b.n	800196a <HAL_FDCAN_Init+0x96>
  assert_param(IS_FDCAN_TX_FIFO_QUEUE_MODE(hfdcan->Init.TxFifoQueueMode));
 8001a9e:	f240 1141 	movw	r1, #321	; 0x141
 8001aa2:	4813      	ldr	r0, [pc, #76]	; (8001af0 <HAL_FDCAN_Init+0x21c>)
 8001aa4:	f7ff f8e3 	bl	8000c6e <assert_failed>
 8001aa8:	e765      	b.n	8001976 <HAL_FDCAN_Init+0xa2>
    hfdcan->Lock = HAL_UNLOCKED;
 8001aaa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f7fe fef0 	bl	8000894 <HAL_FDCAN_MspInit>
 8001ab4:	e764      	b.n	8001980 <HAL_FDCAN_Init+0xac>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001ab6:	699a      	ldr	r2, [r3, #24]
 8001ab8:	f042 0201 	orr.w	r2, r2, #1
 8001abc:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8001abe:	f7ff fb6d 	bl	800119c <HAL_GetTick>
 8001ac2:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	699a      	ldr	r2, [r3, #24]
 8001ac8:	f012 0f01 	tst.w	r2, #1
 8001acc:	d112      	bne.n	8001af4 <HAL_FDCAN_Init+0x220>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001ace:	f7ff fb65 	bl	800119c <HAL_GetTick>
 8001ad2:	1b40      	subs	r0, r0, r5
 8001ad4:	280a      	cmp	r0, #10
 8001ad6:	d9f5      	bls.n	8001ac4 <HAL_FDCAN_Init+0x1f0>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001ad8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	e765      	b.n	80019b6 <HAL_FDCAN_Init+0xe2>
 8001aea:	bf00      	nop
 8001aec:	40006400 	.word	0x40006400
 8001af0:	08012edc 	.word	0x08012edc
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	f042 0202 	orr.w	r2, r2, #2
 8001afa:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8001afc:	6822      	ldr	r2, [r4, #0]
 8001afe:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <HAL_FDCAN_Init+0x36c>)
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d042      	beq.n	8001b8a <HAL_FDCAN_Init+0x2b6>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001b04:	7c23      	ldrb	r3, [r4, #16]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d045      	beq.n	8001b96 <HAL_FDCAN_Init+0x2c2>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b0a:	6822      	ldr	r2, [r4, #0]
 8001b0c:	6993      	ldr	r3, [r2, #24]
 8001b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b12:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001b14:	7c63      	ldrb	r3, [r4, #17]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d043      	beq.n	8001ba2 <HAL_FDCAN_Init+0x2ce>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b1a:	6822      	ldr	r2, [r4, #0]
 8001b1c:	6993      	ldr	r3, [r2, #24]
 8001b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b22:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001b24:	7ca3      	ldrb	r3, [r4, #18]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d041      	beq.n	8001bae <HAL_FDCAN_Init+0x2da>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b2a:	6822      	ldr	r2, [r4, #0]
 8001b2c:	6993      	ldr	r3, [r2, #24]
 8001b2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b32:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001b34:	6822      	ldr	r2, [r4, #0]
 8001b36:	6993      	ldr	r3, [r2, #24]
 8001b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b3c:	68a1      	ldr	r1, [r4, #8]
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001b42:	6822      	ldr	r2, [r4, #0]
 8001b44:	6993      	ldr	r3, [r2, #24]
 8001b46:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8001b4a:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b4c:	6822      	ldr	r2, [r4, #0]
 8001b4e:	6913      	ldr	r3, [r2, #16]
 8001b50:	f023 0310 	bic.w	r3, r3, #16
 8001b54:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001b56:	68e3      	ldr	r3, [r4, #12]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d02e      	beq.n	8001bba <HAL_FDCAN_Init+0x2e6>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d031      	beq.n	8001bc4 <HAL_FDCAN_Init+0x2f0>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d054      	beq.n	8001c0e <HAL_FDCAN_Init+0x33a>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001b64:	6822      	ldr	r2, [r4, #0]
 8001b66:	6993      	ldr	r3, [r2, #24]
 8001b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6c:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b6e:	6822      	ldr	r2, [r4, #0]
 8001b70:	6913      	ldr	r3, [r2, #16]
 8001b72:	f043 0310 	orr.w	r3, r3, #16
 8001b76:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001b78:	68e3      	ldr	r3, [r4, #12]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d122      	bne.n	8001bc4 <HAL_FDCAN_Init+0x2f0>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b7e:	6822      	ldr	r2, [r4, #0]
 8001b80:	6993      	ldr	r3, [r2, #24]
 8001b82:	f043 0320 	orr.w	r3, r3, #32
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	e01c      	b.n	8001bc4 <HAL_FDCAN_Init+0x2f0>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001b8a:	6862      	ldr	r2, [r4, #4]
 8001b8c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001b90:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8001b94:	e7b6      	b.n	8001b04 <HAL_FDCAN_Init+0x230>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b96:	6822      	ldr	r2, [r4, #0]
 8001b98:	6993      	ldr	r3, [r2, #24]
 8001b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	e7b8      	b.n	8001b14 <HAL_FDCAN_Init+0x240>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001ba2:	6822      	ldr	r2, [r4, #0]
 8001ba4:	6993      	ldr	r3, [r2, #24]
 8001ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	e7ba      	b.n	8001b24 <HAL_FDCAN_Init+0x250>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001bae:	6822      	ldr	r2, [r4, #0]
 8001bb0:	6993      	ldr	r3, [r2, #24]
 8001bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	e7bc      	b.n	8001b34 <HAL_FDCAN_Init+0x260>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001bba:	6822      	ldr	r2, [r4, #0]
 8001bbc:	6993      	ldr	r3, [r2, #24]
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bc4:	69a3      	ldr	r3, [r4, #24]
 8001bc6:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001bc8:	69e3      	ldr	r3, [r4, #28]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bce:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001bd2:	6a22      	ldr	r2, [r4, #32]
 8001bd4:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001bd6:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001bd8:	6962      	ldr	r2, [r4, #20]
 8001bda:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bdc:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001be2:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001be4:	68a3      	ldr	r3, [r4, #8]
 8001be6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bea:	d016      	beq.n	8001c1a <HAL_FDCAN_Init+0x346>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001bec:	6822      	ldr	r2, [r4, #0]
 8001bee:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001bf2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f7ff fde2 	bl	80017c4 <FDCAN_CalcultateRamBlockAddresses>
  hfdcan->LatestTxFifoQRequest = 0U;
 8001c00:	2000      	movs	r0, #0
 8001c02:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c04:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 8001c0c:	e6d3      	b.n	80019b6 <HAL_FDCAN_Init+0xe2>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c0e:	6822      	ldr	r2, [r4, #0]
 8001c10:	6993      	ldr	r3, [r2, #24]
 8001c12:	f043 0320 	orr.w	r3, r3, #32
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	e7d4      	b.n	8001bc4 <HAL_FDCAN_Init+0x2f0>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c1c:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c20:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c26:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c28:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c2a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001c2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c30:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c32:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c38:	60cb      	str	r3, [r1, #12]
 8001c3a:	e7d7      	b.n	8001bec <HAL_FDCAN_Init+0x318>
    return HAL_ERROR;
 8001c3c:	2001      	movs	r0, #1
}
 8001c3e:	4770      	bx	lr
 8001c40:	40006400 	.word	0x40006400

08001c44 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c44:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d005      	beq.n	8001c5a <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c4e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8001c56:	2001      	movs	r0, #1
}
 8001c58:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c60:	6802      	ldr	r2, [r0, #0]
 8001c62:	6993      	ldr	r3, [r2, #24]
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_OK;
 8001c6e:	4618      	mov	r0, r3
 8001c70:	4770      	bx	lr

08001c72 <HAL_FDCAN_Stop>:
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001c72:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d139      	bne.n	8001cf0 <HAL_FDCAN_Stop+0x7e>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c7c:	6802      	ldr	r2, [r0, #0]
 8001c7e:	6993      	ldr	r3, [r2, #24]
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6193      	str	r3, [r2, #24]
  uint32_t Counter = 0U;
 8001c86:	2300      	movs	r3, #0
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001c88:	6802      	ldr	r2, [r0, #0]
 8001c8a:	6991      	ldr	r1, [r2, #24]
 8001c8c:	f011 0f01 	tst.w	r1, #1
 8001c90:	d10c      	bne.n	8001cac <HAL_FDCAN_Stop+0x3a>
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001c92:	2b0a      	cmp	r3, #10
 8001c94:	d801      	bhi.n	8001c9a <HAL_FDCAN_Stop+0x28>
      Counter++;
 8001c96:	3301      	adds	r3, #1
 8001c98:	e7f6      	b.n	8001c88 <HAL_FDCAN_Stop+0x16>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001c9a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6603      	str	r3, [r0, #96]	; 0x60
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001ca8:	2001      	movs	r0, #1
 8001caa:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001cac:	6993      	ldr	r3, [r2, #24]
 8001cae:	f023 0310 	bic.w	r3, r3, #16
 8001cb2:	6193      	str	r3, [r2, #24]
    Counter = 0U;
 8001cb4:	2300      	movs	r3, #0
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001cb6:	6802      	ldr	r2, [r0, #0]
 8001cb8:	6991      	ldr	r1, [r2, #24]
 8001cba:	f011 0f08 	tst.w	r1, #8
 8001cbe:	d00c      	beq.n	8001cda <HAL_FDCAN_Stop+0x68>
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001cc0:	2b0a      	cmp	r3, #10
 8001cc2:	d801      	bhi.n	8001cc8 <HAL_FDCAN_Stop+0x56>
      Counter++;
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	e7f6      	b.n	8001cb6 <HAL_FDCAN_Stop+0x44>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001cc8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6603      	str	r3, [r0, #96]	; 0x60
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	4770      	bx	lr
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001cda:	6993      	ldr	r3, [r2, #24]
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	6193      	str	r3, [r2, #24]
    hfdcan->LatestTxFifoQRequest = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	6583      	str	r3, [r0, #88]	; 0x58
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    return HAL_OK;
 8001cec:	4618      	mov	r0, r3
 8001cee:	4770      	bx	lr
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cf0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001cf2:	f043 0308 	orr.w	r3, r3, #8
 8001cf6:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8001cf8:	2001      	movs	r0, #1
}
 8001cfa:	4770      	bx	lr

08001cfc <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8001cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfe:	4605      	mov	r5, r0
 8001d00:	460c      	mov	r4, r1
 8001d02:	4616      	mov	r6, r2
  assert_param(IS_FDCAN_ID_TYPE(pTxHeader->IdType));
 8001d04:	684b      	ldr	r3, [r1, #4]
 8001d06:	b113      	cbz	r3, 8001d0e <HAL_FDCAN_AddMessageToTxFifoQ+0x12>
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0c:	d162      	bne.n	8001dd4 <HAL_FDCAN_AddMessageToTxFifoQ+0xd8>
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001d0e:	6863      	ldr	r3, [r4, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d16b      	bne.n	8001dec <HAL_FDCAN_AddMessageToTxFifoQ+0xf0>
    assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->Identifier, 0x7FFU));
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d1a:	d261      	bcs.n	8001de0 <HAL_FDCAN_AddMessageToTxFifoQ+0xe4>
  assert_param(IS_FDCAN_FRAME_TYPE(pTxHeader->TxFrameType));
 8001d1c:	68a3      	ldr	r3, [r4, #8]
 8001d1e:	b113      	cbz	r3, 8001d26 <HAL_FDCAN_AddMessageToTxFifoQ+0x2a>
 8001d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d24:	d16c      	bne.n	8001e00 <HAL_FDCAN_AddMessageToTxFifoQ+0x104>
  assert_param(IS_FDCAN_DLC(pTxHeader->DataLength));
 8001d26:	68e3      	ldr	r3, [r4, #12]
 8001d28:	b363      	cbz	r3, 8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2e:	d029      	beq.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d34:	d026      	beq.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001d3a:	d023      	beq.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d40:	d020      	beq.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d46:	d01d      	beq.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d48:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001d4c:	d01a      	beq.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d4e:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8001d52:	d017      	beq.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d58:	d014      	beq.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d5a:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8001d5e:	d011      	beq.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d60:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8001d64:	d00e      	beq.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d66:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8001d6a:	d00b      	beq.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001d70:	d008      	beq.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d72:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8001d76:	d005      	beq.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d78:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d7c:	d002      	beq.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
 8001d7e:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8001d82:	d143      	bne.n	8001e0c <HAL_FDCAN_AddMessageToTxFifoQ+0x110>
  assert_param(IS_FDCAN_ESI(pTxHeader->ErrorStateIndicator));
 8001d84:	6923      	ldr	r3, [r4, #16]
 8001d86:	b113      	cbz	r3, 8001d8e <HAL_FDCAN_AddMessageToTxFifoQ+0x92>
 8001d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d8c:	d144      	bne.n	8001e18 <HAL_FDCAN_AddMessageToTxFifoQ+0x11c>
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
 8001d8e:	6963      	ldr	r3, [r4, #20]
 8001d90:	b113      	cbz	r3, 8001d98 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
 8001d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d96:	d145      	bne.n	8001e24 <HAL_FDCAN_AddMessageToTxFifoQ+0x128>
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
 8001d98:	69a3      	ldr	r3, [r4, #24]
 8001d9a:	b113      	cbz	r3, 8001da2 <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
 8001d9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001da0:	d146      	bne.n	8001e30 <HAL_FDCAN_AddMessageToTxFifoQ+0x134>
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
 8001da2:	69e3      	ldr	r3, [r4, #28]
 8001da4:	b113      	cbz	r3, 8001dac <HAL_FDCAN_AddMessageToTxFifoQ+0xb0>
 8001da6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001daa:	d147      	bne.n	8001e3c <HAL_FDCAN_AddMessageToTxFifoQ+0x140>
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));
 8001dac:	6a23      	ldr	r3, [r4, #32]
 8001dae:	2bff      	cmp	r3, #255	; 0xff
 8001db0:	d84a      	bhi.n	8001e48 <HAL_FDCAN_AddMessageToTxFifoQ+0x14c>
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001db2:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d15d      	bne.n	8001e78 <HAL_FDCAN_AddMessageToTxFifoQ+0x17c>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001dbc:	682b      	ldr	r3, [r5, #0]
 8001dbe:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001dc2:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8001dc6:	d045      	beq.n	8001e54 <HAL_FDCAN_AddMessageToTxFifoQ+0x158>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001dc8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dce:	662b      	str	r3, [r5, #96]	; 0x60
      return HAL_ERROR;
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	e056      	b.n	8001e82 <HAL_FDCAN_AddMessageToTxFifoQ+0x186>
  assert_param(IS_FDCAN_ID_TYPE(pTxHeader->IdType));
 8001dd4:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001dd8:	482a      	ldr	r0, [pc, #168]	; (8001e84 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001dda:	f7fe ff48 	bl	8000c6e <assert_failed>
 8001dde:	e796      	b.n	8001d0e <HAL_FDCAN_AddMessageToTxFifoQ+0x12>
    assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->Identifier, 0x7FFU));
 8001de0:	f640 0143 	movw	r1, #2115	; 0x843
 8001de4:	4827      	ldr	r0, [pc, #156]	; (8001e84 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001de6:	f7fe ff42 	bl	8000c6e <assert_failed>
 8001dea:	e797      	b.n	8001d1c <HAL_FDCAN_AddMessageToTxFifoQ+0x20>
    assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->Identifier, 0x1FFFFFFFU));
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001df2:	d393      	bcc.n	8001d1c <HAL_FDCAN_AddMessageToTxFifoQ+0x20>
 8001df4:	f640 0147 	movw	r1, #2119	; 0x847
 8001df8:	4822      	ldr	r0, [pc, #136]	; (8001e84 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001dfa:	f7fe ff38 	bl	8000c6e <assert_failed>
 8001dfe:	e78d      	b.n	8001d1c <HAL_FDCAN_AddMessageToTxFifoQ+0x20>
  assert_param(IS_FDCAN_FRAME_TYPE(pTxHeader->TxFrameType));
 8001e00:	f640 0149 	movw	r1, #2121	; 0x849
 8001e04:	481f      	ldr	r0, [pc, #124]	; (8001e84 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e06:	f7fe ff32 	bl	8000c6e <assert_failed>
 8001e0a:	e78c      	b.n	8001d26 <HAL_FDCAN_AddMessageToTxFifoQ+0x2a>
  assert_param(IS_FDCAN_DLC(pTxHeader->DataLength));
 8001e0c:	f640 014a 	movw	r1, #2122	; 0x84a
 8001e10:	481c      	ldr	r0, [pc, #112]	; (8001e84 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e12:	f7fe ff2c 	bl	8000c6e <assert_failed>
 8001e16:	e7b5      	b.n	8001d84 <HAL_FDCAN_AddMessageToTxFifoQ+0x88>
  assert_param(IS_FDCAN_ESI(pTxHeader->ErrorStateIndicator));
 8001e18:	f640 014b 	movw	r1, #2123	; 0x84b
 8001e1c:	4819      	ldr	r0, [pc, #100]	; (8001e84 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e1e:	f7fe ff26 	bl	8000c6e <assert_failed>
 8001e22:	e7b4      	b.n	8001d8e <HAL_FDCAN_AddMessageToTxFifoQ+0x92>
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
 8001e24:	f640 014c 	movw	r1, #2124	; 0x84c
 8001e28:	4816      	ldr	r0, [pc, #88]	; (8001e84 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e2a:	f7fe ff20 	bl	8000c6e <assert_failed>
 8001e2e:	e7b3      	b.n	8001d98 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
 8001e30:	f640 014d 	movw	r1, #2125	; 0x84d
 8001e34:	4813      	ldr	r0, [pc, #76]	; (8001e84 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e36:	f7fe ff1a 	bl	8000c6e <assert_failed>
 8001e3a:	e7b2      	b.n	8001da2 <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
 8001e3c:	f640 014e 	movw	r1, #2126	; 0x84e
 8001e40:	4810      	ldr	r0, [pc, #64]	; (8001e84 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e42:	f7fe ff14 	bl	8000c6e <assert_failed>
 8001e46:	e7b1      	b.n	8001dac <HAL_FDCAN_AddMessageToTxFifoQ+0xb0>
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));
 8001e48:	f640 014f 	movw	r1, #2127	; 0x84f
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <HAL_FDCAN_AddMessageToTxFifoQ+0x188>)
 8001e4e:	f7fe ff0e 	bl	8000c6e <assert_failed>
 8001e52:	e7ae      	b.n	8001db2 <HAL_FDCAN_AddMessageToTxFifoQ+0xb6>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001e54:	f8d3 70c4 	ldr.w	r7, [r3, #196]	; 0xc4
 8001e58:	f3c7 4701 	ubfx	r7, r7, #16, #2
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4632      	mov	r2, r6
 8001e60:	4621      	mov	r1, r4
 8001e62:	4628      	mov	r0, r5
 8001e64:	f7ff fcf4 	bl	8001850 <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001e68:	682a      	ldr	r2, [r5, #0]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	40bb      	lsls	r3, r7
 8001e6e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001e72:	65ab      	str	r3, [r5, #88]	; 0x58
    return HAL_OK;
 8001e74:	2000      	movs	r0, #0
 8001e76:	e004      	b.n	8001e82 <HAL_FDCAN_AddMessageToTxFifoQ+0x186>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001e78:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001e7a:	f043 0308 	orr.w	r3, r3, #8
 8001e7e:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_ERROR;
 8001e80:	2001      	movs	r0, #1
}
 8001e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e84:	08012edc 	.word	0x08012edc

08001e88 <HAL_FDCAN_GetRxMessage>:
{
 8001e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e8c:	4605      	mov	r5, r0
 8001e8e:	460f      	mov	r7, r1
 8001e90:	4614      	mov	r4, r2
 8001e92:	461e      	mov	r6, r3
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001e94:	f890 805c 	ldrb.w	r8, [r0, #92]	; 0x5c
 8001e98:	fa5f f888 	uxtb.w	r8, r8
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));
 8001e9c:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d810      	bhi.n	8001ec6 <HAL_FDCAN_GetRxMessage+0x3e>
  if (state == HAL_FDCAN_STATE_BUSY)
 8001ea4:	f1b8 0f02 	cmp.w	r8, #2
 8001ea8:	d177      	bne.n	8001f9a <HAL_FDCAN_GetRxMessage+0x112>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001eaa:	2f40      	cmp	r7, #64	; 0x40
 8001eac:	d011      	beq.n	8001ed2 <HAL_FDCAN_GetRxMessage+0x4a>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001eae:	682b      	ldr	r3, [r5, #0]
 8001eb0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001eb4:	f012 0f0f 	tst.w	r2, #15
 8001eb8:	d121      	bne.n	8001efe <HAL_FDCAN_GetRxMessage+0x76>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001eba:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec0:	662b      	str	r3, [r5, #96]	; 0x60
        return HAL_ERROR;
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	e06e      	b.n	8001fa4 <HAL_FDCAN_GetRxMessage+0x11c>
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));
 8001ec6:	f640 01b6 	movw	r1, #2230	; 0x8b6
 8001eca:	4837      	ldr	r0, [pc, #220]	; (8001fa8 <HAL_FDCAN_GetRxMessage+0x120>)
 8001ecc:	f7fe fecf 	bl	8000c6e <assert_failed>
 8001ed0:	e7e8      	b.n	8001ea4 <HAL_FDCAN_GetRxMessage+0x1c>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001ed2:	682b      	ldr	r3, [r5, #0]
 8001ed4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001ed8:	f012 0f0f 	tst.w	r2, #15
 8001edc:	d105      	bne.n	8001eea <HAL_FDCAN_GetRxMessage+0x62>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001ede:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee4:	662b      	str	r3, [r5, #96]	; 0x60
        return HAL_ERROR;
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	e05c      	b.n	8001fa4 <HAL_FDCAN_GetRxMessage+0x11c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001eea:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001eee:	f3c0 2001 	ubfx	r0, r0, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001ef2:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8001ef4:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8001ef8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001efc:	e008      	b.n	8001f10 <HAL_FDCAN_GetRxMessage+0x88>
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001efe:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001f02:	f3c0 2001 	ubfx	r0, r0, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001f06:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8001f08:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8001f0c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001f10:	6813      	ldr	r3, [r2, #0]
 8001f12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f16:	6063      	str	r3, [r4, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001f18:	bb23      	cbnz	r3, 8001f64 <HAL_FDCAN_GetRxMessage+0xdc>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001f1a:	6813      	ldr	r3, [r2, #0]
 8001f1c:	f3c3 438a 	ubfx	r3, r3, #18, #11
 8001f20:	6023      	str	r3, [r4, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001f22:	6813      	ldr	r3, [r2, #0]
 8001f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f28:	60a3      	str	r3, [r4, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001f2a:	6813      	ldr	r3, [r2, #0]
 8001f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f30:	6123      	str	r3, [r4, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001f32:	8893      	ldrh	r3, [r2, #4]
 8001f34:	61e3      	str	r3, [r4, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001f36:	6853      	ldr	r3, [r2, #4]
 8001f38:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f3c:	60e3      	str	r3, [r4, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001f3e:	6853      	ldr	r3, [r2, #4]
 8001f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f44:	6163      	str	r3, [r4, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001f46:	6853      	ldr	r3, [r2, #4]
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4c:	61a3      	str	r3, [r4, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001f4e:	79d3      	ldrb	r3, [r2, #7]
 8001f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f54:	6223      	str	r3, [r4, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001f56:	6853      	ldr	r3, [r2, #4]
 8001f58:	0fdb      	lsrs	r3, r3, #31
 8001f5a:	6263      	str	r3, [r4, #36]	; 0x24
    RxAddress++;
 8001f5c:	3208      	adds	r2, #8
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001f5e:	f04f 0c00 	mov.w	ip, #0
 8001f62:	e00a      	b.n	8001f7a <HAL_FDCAN_GetRxMessage+0xf2>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001f64:	6813      	ldr	r3, [r2, #0]
 8001f66:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8001f6a:	6023      	str	r3, [r4, #0]
 8001f6c:	e7d9      	b.n	8001f22 <HAL_FDCAN_GetRxMessage+0x9a>
      pRxData[ByteCounter] = pData[ByteCounter];
 8001f6e:	f812 300c 	ldrb.w	r3, [r2, ip]
 8001f72:	f806 300c 	strb.w	r3, [r6, ip]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001f76:	f10c 0c01 	add.w	ip, ip, #1
 8001f7a:	89e3      	ldrh	r3, [r4, #14]
 8001f7c:	490b      	ldr	r1, [pc, #44]	; (8001fac <HAL_FDCAN_GetRxMessage+0x124>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	4563      	cmp	r3, ip
 8001f82:	d8f4      	bhi.n	8001f6e <HAL_FDCAN_GetRxMessage+0xe6>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001f84:	2f40      	cmp	r7, #64	; 0x40
 8001f86:	d004      	beq.n	8001f92 <HAL_FDCAN_GetRxMessage+0x10a>
      hfdcan->Instance->RXF1A = GetIndex;
 8001f88:	682b      	ldr	r3, [r5, #0]
 8001f8a:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    return HAL_OK;
 8001f8e:	2000      	movs	r0, #0
 8001f90:	e008      	b.n	8001fa4 <HAL_FDCAN_GetRxMessage+0x11c>
      hfdcan->Instance->RXF0A = GetIndex;
 8001f92:	682b      	ldr	r3, [r5, #0]
 8001f94:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 8001f98:	e7f9      	b.n	8001f8e <HAL_FDCAN_GetRxMessage+0x106>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001f9a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_ERROR;
 8001fa2:	2001      	movs	r0, #1
}
 8001fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fa8:	08012edc 	.word	0x08012edc
 8001fac:	08012f18 	.word	0x08012f18

08001fb0 <HAL_FDCAN_ActivateNotification>:
{
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	4606      	mov	r6, r0
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	4617      	mov	r7, r2
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001fb8:	f890 505c 	ldrb.w	r5, [r0, #92]	; 0x5c
 8001fbc:	b2ed      	uxtb	r5, r5
  assert_param(IS_FDCAN_IT(ActiveITs));
 8001fbe:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8001fc2:	d10f      	bne.n	8001fe4 <HAL_FDCAN_ActivateNotification+0x34>
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
 8001fc4:	f414 7fc0 	tst.w	r4, #384	; 0x180
 8001fc8:	d002      	beq.n	8001fd0 <HAL_FDCAN_ActivateNotification+0x20>
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
 8001fca:	1e7b      	subs	r3, r7, #1
 8001fcc:	2b06      	cmp	r3, #6
 8001fce:	d80f      	bhi.n	8001ff0 <HAL_FDCAN_ActivateNotification+0x40>
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001fd0:	3d01      	subs	r5, #1
 8001fd2:	b2ed      	uxtb	r5, r5
 8001fd4:	2d01      	cmp	r5, #1
 8001fd6:	d911      	bls.n	8001ffc <HAL_FDCAN_ActivateNotification+0x4c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001fd8:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8001fda:	f043 0302 	orr.w	r3, r3, #2
 8001fde:	6633      	str	r3, [r6, #96]	; 0x60
    return HAL_ERROR;
 8001fe0:	2001      	movs	r0, #1
}
 8001fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FDCAN_IT(ActiveITs));
 8001fe4:	f640 2189 	movw	r1, #2697	; 0xa89
 8001fe8:	483f      	ldr	r0, [pc, #252]	; (80020e8 <HAL_FDCAN_ActivateNotification+0x138>)
 8001fea:	f7fe fe40 	bl	8000c6e <assert_failed>
 8001fee:	e7e9      	b.n	8001fc4 <HAL_FDCAN_ActivateNotification+0x14>
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
 8001ff0:	f640 218c 	movw	r1, #2700	; 0xa8c
 8001ff4:	483c      	ldr	r0, [pc, #240]	; (80020e8 <HAL_FDCAN_ActivateNotification+0x138>)
 8001ff6:	f7fe fe3a 	bl	8000c6e <assert_failed>
 8001ffa:	e7e9      	b.n	8001fd0 <HAL_FDCAN_ActivateNotification+0x20>
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001ffc:	6832      	ldr	r2, [r6, #0]
 8001ffe:	6d93      	ldr	r3, [r2, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002000:	f014 0007 	ands.w	r0, r4, #7
 8002004:	d002      	beq.n	800200c <HAL_FDCAN_ActivateNotification+0x5c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002006:	f013 0f01 	tst.w	r3, #1
 800200a:	d023      	beq.n	8002054 <HAL_FDCAN_ActivateNotification+0xa4>
 800200c:	f014 0f38 	tst.w	r4, #56	; 0x38
 8002010:	d002      	beq.n	8002018 <HAL_FDCAN_ActivateNotification+0x68>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002012:	f013 0f02 	tst.w	r3, #2
 8002016:	d01d      	beq.n	8002054 <HAL_FDCAN_ActivateNotification+0xa4>
 8002018:	f414 7fe0 	tst.w	r4, #448	; 0x1c0
 800201c:	d002      	beq.n	8002024 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800201e:	f013 0f04 	tst.w	r3, #4
 8002022:	d017      	beq.n	8002054 <HAL_FDCAN_ActivateNotification+0xa4>
 8002024:	f414 5ff0 	tst.w	r4, #7680	; 0x1e00
 8002028:	d002      	beq.n	8002030 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800202a:	f013 0f08 	tst.w	r3, #8
 800202e:	d011      	beq.n	8002054 <HAL_FDCAN_ActivateNotification+0xa4>
 8002030:	f414 4f60 	tst.w	r4, #57344	; 0xe000
 8002034:	d002      	beq.n	800203c <HAL_FDCAN_ActivateNotification+0x8c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002036:	f013 0f10 	tst.w	r3, #16
 800203a:	d00b      	beq.n	8002054 <HAL_FDCAN_ActivateNotification+0xa4>
 800203c:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002040:	d002      	beq.n	8002048 <HAL_FDCAN_ActivateNotification+0x98>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002042:	f013 0f20 	tst.w	r3, #32
 8002046:	d005      	beq.n	8002054 <HAL_FDCAN_ActivateNotification+0xa4>
 8002048:	f414 0f7c 	tst.w	r4, #16515072	; 0xfc0000
 800204c:	d006      	beq.n	800205c <HAL_FDCAN_ActivateNotification+0xac>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800204e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002052:	d103      	bne.n	800205c <HAL_FDCAN_ActivateNotification+0xac>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002054:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8002056:	f041 0101 	orr.w	r1, r1, #1
 800205a:	65d1      	str	r1, [r2, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800205c:	b110      	cbz	r0, 8002064 <HAL_FDCAN_ActivateNotification+0xb4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800205e:	f013 0f01 	tst.w	r3, #1
 8002062:	d123      	bne.n	80020ac <HAL_FDCAN_ActivateNotification+0xfc>
 8002064:	f014 0f38 	tst.w	r4, #56	; 0x38
 8002068:	d002      	beq.n	8002070 <HAL_FDCAN_ActivateNotification+0xc0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800206a:	f013 0f02 	tst.w	r3, #2
 800206e:	d11d      	bne.n	80020ac <HAL_FDCAN_ActivateNotification+0xfc>
 8002070:	f414 7fe0 	tst.w	r4, #448	; 0x1c0
 8002074:	d002      	beq.n	800207c <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002076:	f013 0f04 	tst.w	r3, #4
 800207a:	d117      	bne.n	80020ac <HAL_FDCAN_ActivateNotification+0xfc>
 800207c:	f414 5ff0 	tst.w	r4, #7680	; 0x1e00
 8002080:	d002      	beq.n	8002088 <HAL_FDCAN_ActivateNotification+0xd8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002082:	f013 0f08 	tst.w	r3, #8
 8002086:	d111      	bne.n	80020ac <HAL_FDCAN_ActivateNotification+0xfc>
 8002088:	f414 4f60 	tst.w	r4, #57344	; 0xe000
 800208c:	d002      	beq.n	8002094 <HAL_FDCAN_ActivateNotification+0xe4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800208e:	f013 0f10 	tst.w	r3, #16
 8002092:	d10b      	bne.n	80020ac <HAL_FDCAN_ActivateNotification+0xfc>
 8002094:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002098:	d002      	beq.n	80020a0 <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800209a:	f013 0f20 	tst.w	r3, #32
 800209e:	d105      	bne.n	80020ac <HAL_FDCAN_ActivateNotification+0xfc>
 80020a0:	f414 0f7c 	tst.w	r4, #16515072	; 0xfc0000
 80020a4:	d007      	beq.n	80020b6 <HAL_FDCAN_ActivateNotification+0x106>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80020a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80020aa:	d004      	beq.n	80020b6 <HAL_FDCAN_ActivateNotification+0x106>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80020ac:	6832      	ldr	r2, [r6, #0]
 80020ae:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	65d3      	str	r3, [r2, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80020b6:	f014 0f80 	tst.w	r4, #128	; 0x80
 80020ba:	d005      	beq.n	80020c8 <HAL_FDCAN_ActivateNotification+0x118>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80020bc:	6832      	ldr	r2, [r6, #0]
 80020be:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 80020c2:	433b      	orrs	r3, r7
 80020c4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80020c8:	f414 7f80 	tst.w	r4, #256	; 0x100
 80020cc:	d005      	beq.n	80020da <HAL_FDCAN_ActivateNotification+0x12a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80020ce:	6832      	ldr	r2, [r6, #0]
 80020d0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 80020d4:	433b      	orrs	r3, r7
 80020d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80020da:	6832      	ldr	r2, [r6, #0]
 80020dc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80020de:	4323      	orrs	r3, r4
 80020e0:	6553      	str	r3, [r2, #84]	; 0x54
    return HAL_OK;
 80020e2:	2000      	movs	r0, #0
 80020e4:	e77d      	b.n	8001fe2 <HAL_FDCAN_ActivateNotification+0x32>
 80020e6:	bf00      	nop
 80020e8:	08012edc 	.word	0x08012edc

080020ec <HAL_FDCAN_TxEventFifoCallback>:
}
 80020ec:	4770      	bx	lr

080020ee <HAL_FDCAN_RxFifo1Callback>:
}
 80020ee:	4770      	bx	lr

080020f0 <HAL_FDCAN_TxFifoEmptyCallback>:
}
 80020f0:	4770      	bx	lr

080020f2 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 80020f2:	4770      	bx	lr

080020f4 <HAL_FDCAN_TxBufferAbortCallback>:
}
 80020f4:	4770      	bx	lr

080020f6 <HAL_FDCAN_TimestampWraparoundCallback>:
}
 80020f6:	4770      	bx	lr

080020f8 <HAL_FDCAN_TimeoutOccurredCallback>:
}
 80020f8:	4770      	bx	lr

080020fa <HAL_FDCAN_HighPriorityMessageCallback>:
}
 80020fa:	4770      	bx	lr

080020fc <HAL_FDCAN_ErrorCallback>:
}
 80020fc:	4770      	bx	lr

080020fe <HAL_FDCAN_ErrorStatusCallback>:
}
 80020fe:	4770      	bx	lr

08002100 <HAL_FDCAN_IRQHandler>:
{
 8002100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002104:	4604      	mov	r4, r0
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002106:	6803      	ldr	r3, [r0, #0]
 8002108:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800210a:	f402 59e0 	and.w	r9, r2, #7168	; 0x1c00
  TxEventFifoITs &= hfdcan->Instance->IE;
 800210e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002110:	ea09 0902 	and.w	r9, r9, r2
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002116:	f002 0807 	and.w	r8, r2, #7
  RxFifo0ITs &= hfdcan->Instance->IE;
 800211a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800211c:	ea08 0802 	and.w	r8, r8, r2
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002120:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8002122:	f007 0738 	and.w	r7, r7, #56	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002126:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002128:	4017      	ands	r7, r2
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800212a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800212c:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  Errors &= hfdcan->Instance->IE;
 8002130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002132:	4015      	ands	r5, r2
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002134:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8002136:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  ErrorStatusITs &= hfdcan->Instance->IE;
 800213a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800213c:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800213e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002140:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002144:	d003      	beq.n	800214e <HAL_FDCAN_IRQHandler+0x4e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002146:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002148:	f012 0f40 	tst.w	r2, #64	; 0x40
 800214c:	d151      	bne.n	80021f2 <HAL_FDCAN_IRQHandler+0xf2>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002152:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002156:	d003      	beq.n	8002160 <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800215a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800215e:	d14d      	bne.n	80021fc <HAL_FDCAN_IRQHandler+0xfc>
  if (TxEventFifoITs != 0U)
 8002160:	f1b9 0f00 	cmp.w	r9, #0
 8002164:	d156      	bne.n	8002214 <HAL_FDCAN_IRQHandler+0x114>
  if (RxFifo0ITs != 0U)
 8002166:	f1b8 0f00 	cmp.w	r8, #0
 800216a:	d15b      	bne.n	8002224 <HAL_FDCAN_IRQHandler+0x124>
  if (RxFifo1ITs != 0U)
 800216c:	2f00      	cmp	r7, #0
 800216e:	d161      	bne.n	8002234 <HAL_FDCAN_IRQHandler+0x134>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002174:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002178:	d003      	beq.n	8002182 <HAL_FDCAN_IRQHandler+0x82>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800217a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800217c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002180:	d15f      	bne.n	8002242 <HAL_FDCAN_IRQHandler+0x142>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002186:	f012 0f80 	tst.w	r2, #128	; 0x80
 800218a:	d003      	beq.n	8002194 <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800218c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800218e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002192:	d15d      	bne.n	8002250 <HAL_FDCAN_IRQHandler+0x150>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002198:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800219c:	d003      	beq.n	80021a6 <HAL_FDCAN_IRQHandler+0xa6>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800219e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021a0:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80021a4:	d15f      	bne.n	8002266 <HAL_FDCAN_IRQHandler+0x166>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021aa:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80021ae:	d003      	beq.n	80021b8 <HAL_FDCAN_IRQHandler+0xb8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80021b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021b2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80021b6:	d15d      	bne.n	8002274 <HAL_FDCAN_IRQHandler+0x174>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021bc:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80021c0:	d00a      	beq.n	80021d8 <HAL_FDCAN_IRQHandler+0xd8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80021c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021c4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80021c8:	d006      	beq.n	80021d8 <HAL_FDCAN_IRQHandler+0xd8>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80021ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ce:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80021d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80021d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d6:	6623      	str	r3, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 80021d8:	2e00      	cmp	r6, #0
 80021da:	d152      	bne.n	8002282 <HAL_FDCAN_IRQHandler+0x182>
  if (Errors != 0U)
 80021dc:	b125      	cbz	r5, 80021e8 <HAL_FDCAN_IRQHandler+0xe8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 80021e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80021e4:	432b      	orrs	r3, r5
 80021e6:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80021e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d150      	bne.n	8002290 <HAL_FDCAN_IRQHandler+0x190>
}
 80021ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80021f2:	2240      	movs	r2, #64	; 0x40
 80021f4:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80021f6:	f7ff ff80 	bl	80020fa <HAL_FDCAN_HighPriorityMessageCallback>
 80021fa:	e7a8      	b.n	800214e <HAL_FDCAN_IRQHandler+0x4e>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80021fc:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002200:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002204:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002208:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800220a:	4011      	ands	r1, r2
 800220c:	4620      	mov	r0, r4
 800220e:	f7ff ff71 	bl	80020f4 <HAL_FDCAN_TxBufferAbortCallback>
 8002212:	e7a5      	b.n	8002160 <HAL_FDCAN_IRQHandler+0x60>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800221a:	4649      	mov	r1, r9
 800221c:	4620      	mov	r0, r4
 800221e:	f7ff ff65 	bl	80020ec <HAL_FDCAN_TxEventFifoCallback>
 8002222:	e7a0      	b.n	8002166 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800222a:	4641      	mov	r1, r8
 800222c:	4620      	mov	r0, r4
 800222e:	f00e f82b 	bl	8010288 <HAL_FDCAN_RxFifo0Callback>
 8002232:	e79b      	b.n	800216c <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002238:	4639      	mov	r1, r7
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff57 	bl	80020ee <HAL_FDCAN_RxFifo1Callback>
 8002240:	e796      	b.n	8002170 <HAL_FDCAN_IRQHandler+0x70>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002246:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002248:	4620      	mov	r0, r4
 800224a:	f7ff ff51 	bl	80020f0 <HAL_FDCAN_TxFifoEmptyCallback>
 800224e:	e798      	b.n	8002182 <HAL_FDCAN_IRQHandler+0x82>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002250:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002254:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002258:	2080      	movs	r0, #128	; 0x80
 800225a:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800225c:	4011      	ands	r1, r2
 800225e:	4620      	mov	r0, r4
 8002260:	f7ff ff47 	bl	80020f2 <HAL_FDCAN_TxBufferCompleteCallback>
 8002264:	e796      	b.n	8002194 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002266:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800226a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800226c:	4620      	mov	r0, r4
 800226e:	f7ff ff42 	bl	80020f6 <HAL_FDCAN_TimestampWraparoundCallback>
 8002272:	e798      	b.n	80021a6 <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002274:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002278:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800227a:	4620      	mov	r0, r4
 800227c:	f7ff ff3c 	bl	80020f8 <HAL_FDCAN_TimeoutOccurredCallback>
 8002280:	e79a      	b.n	80021b8 <HAL_FDCAN_IRQHandler+0xb8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002286:	4631      	mov	r1, r6
 8002288:	4620      	mov	r0, r4
 800228a:	f7ff ff38 	bl	80020fe <HAL_FDCAN_ErrorStatusCallback>
 800228e:	e7a5      	b.n	80021dc <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ff33 	bl	80020fc <HAL_FDCAN_ErrorCallback>
}
 8002296:	e7aa      	b.n	80021ee <HAL_FDCAN_IRQHandler+0xee>

08002298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	4680      	mov	r8, r0
 80022a0:	460c      	mov	r4, r1
  uint32_t position = 0x00U;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80022a2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80022a6:	d01a      	beq.n	80022de <HAL_GPIO_Init+0x46>
 80022a8:	4baa      	ldr	r3, [pc, #680]	; (8002554 <HAL_GPIO_Init+0x2bc>)
 80022aa:	4298      	cmp	r0, r3
 80022ac:	d017      	beq.n	80022de <HAL_GPIO_Init+0x46>
 80022ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022b2:	4298      	cmp	r0, r3
 80022b4:	d013      	beq.n	80022de <HAL_GPIO_Init+0x46>
 80022b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ba:	4298      	cmp	r0, r3
 80022bc:	d00f      	beq.n	80022de <HAL_GPIO_Init+0x46>
 80022be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c2:	4298      	cmp	r0, r3
 80022c4:	d00b      	beq.n	80022de <HAL_GPIO_Init+0x46>
 80022c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ca:	4298      	cmp	r0, r3
 80022cc:	d007      	beq.n	80022de <HAL_GPIO_Init+0x46>
 80022ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022d2:	4298      	cmp	r0, r3
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x46>
 80022d6:	21a9      	movs	r1, #169	; 0xa9
 80022d8:	489f      	ldr	r0, [pc, #636]	; (8002558 <HAL_GPIO_Init+0x2c0>)
 80022da:	f7fe fcc8 	bl	8000c6e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	b112      	cbz	r2, 80022ea <HAL_GPIO_Init+0x52>
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	041b      	lsls	r3, r3, #16
 80022e8:	b11b      	cbz	r3, 80022f2 <HAL_GPIO_Init+0x5a>
 80022ea:	21aa      	movs	r1, #170	; 0xaa
 80022ec:	489a      	ldr	r0, [pc, #616]	; (8002558 <HAL_GPIO_Init+0x2c0>)
 80022ee:	f7fe fcbe 	bl	8000c6e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80022f2:	6863      	ldr	r3, [r4, #4]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d910      	bls.n	800231a <HAL_GPIO_Init+0x82>
 80022f8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80022fc:	d00d      	beq.n	800231a <HAL_GPIO_Init+0x82>
 80022fe:	d811      	bhi.n	8002324 <HAL_GPIO_Init+0x8c>
 8002300:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002304:	d009      	beq.n	800231a <HAL_GPIO_Init+0x82>
 8002306:	d903      	bls.n	8002310 <HAL_GPIO_Init+0x78>
 8002308:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800230c:	d005      	beq.n	800231a <HAL_GPIO_Init+0x82>
 800230e:	e012      	b.n	8002336 <HAL_GPIO_Init+0x9e>
 8002310:	2b03      	cmp	r3, #3
 8002312:	d904      	bls.n	800231e <HAL_GPIO_Init+0x86>
 8002314:	3b11      	subs	r3, #17
 8002316:	2b01      	cmp	r3, #1
 8002318:	d80d      	bhi.n	8002336 <HAL_GPIO_Init+0x9e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800231a:	2500      	movs	r5, #0
 800231c:	e0a3      	b.n	8002466 <HAL_GPIO_Init+0x1ce>
 800231e:	2b02      	cmp	r3, #2
 8002320:	d309      	bcc.n	8002336 <HAL_GPIO_Init+0x9e>
 8002322:	e7fa      	b.n	800231a <HAL_GPIO_Init+0x82>
 8002324:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002328:	d0f7      	beq.n	800231a <HAL_GPIO_Init+0x82>
 800232a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800232e:	d0f4      	beq.n	800231a <HAL_GPIO_Init+0x82>
 8002330:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002334:	d0f1      	beq.n	800231a <HAL_GPIO_Init+0x82>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002336:	21ab      	movs	r1, #171	; 0xab
 8002338:	4887      	ldr	r0, [pc, #540]	; (8002558 <HAL_GPIO_Init+0x2c0>)
 800233a:	f7fe fc98 	bl	8000c6e <assert_failed>
 800233e:	e7ec      	b.n	800231a <HAL_GPIO_Init+0x82>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002340:	68e3      	ldr	r3, [r4, #12]
 8002342:	2b03      	cmp	r3, #3
 8002344:	d817      	bhi.n	8002376 <HAL_GPIO_Init+0xde>
        temp = GPIOx->OSPEEDR;
 8002346:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800234a:	0069      	lsls	r1, r5, #1
 800234c:	2303      	movs	r3, #3
 800234e:	408b      	lsls	r3, r1
 8002350:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002354:	68e3      	ldr	r3, [r4, #12]
 8002356:	408b      	lsls	r3, r1
 8002358:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 800235a:	f8c8 3008 	str.w	r3, [r8, #8]
        temp = GPIOx->OTYPER;
 800235e:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002362:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002366:	6863      	ldr	r3, [r4, #4]
 8002368:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800236c:	40ab      	lsls	r3, r5
 800236e:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8002370:	f8c8 3004 	str.w	r3, [r8, #4]
 8002374:	e086      	b.n	8002484 <HAL_GPIO_Init+0x1ec>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002376:	21bb      	movs	r1, #187	; 0xbb
 8002378:	4877      	ldr	r0, [pc, #476]	; (8002558 <HAL_GPIO_Init+0x2c0>)
 800237a:	f7fe fc78 	bl	8000c6e <assert_failed>
 800237e:	e7e2      	b.n	8002346 <HAL_GPIO_Init+0xae>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002380:	21cc      	movs	r1, #204	; 0xcc
 8002382:	4875      	ldr	r0, [pc, #468]	; (8002558 <HAL_GPIO_Init+0x2c0>)
 8002384:	f7fe fc73 	bl	8000c6e <assert_failed>
 8002388:	e085      	b.n	8002496 <HAL_GPIO_Init+0x1fe>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800238a:	f1b8 4f90 	cmp.w	r8, #1207959552	; 0x48000000
 800238e:	d01a      	beq.n	80023c6 <HAL_GPIO_Init+0x12e>
 8002390:	4b70      	ldr	r3, [pc, #448]	; (8002554 <HAL_GPIO_Init+0x2bc>)
 8002392:	4598      	cmp	r8, r3
 8002394:	d017      	beq.n	80023c6 <HAL_GPIO_Init+0x12e>
 8002396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800239a:	4598      	cmp	r8, r3
 800239c:	d013      	beq.n	80023c6 <HAL_GPIO_Init+0x12e>
 800239e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023a2:	4598      	cmp	r8, r3
 80023a4:	d00f      	beq.n	80023c6 <HAL_GPIO_Init+0x12e>
 80023a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023aa:	4598      	cmp	r8, r3
 80023ac:	d00b      	beq.n	80023c6 <HAL_GPIO_Init+0x12e>
 80023ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b2:	4598      	cmp	r8, r3
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x12e>
 80023b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ba:	4598      	cmp	r8, r3
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x12e>
 80023be:	21d9      	movs	r1, #217	; 0xd9
 80023c0:	4865      	ldr	r0, [pc, #404]	; (8002558 <HAL_GPIO_Init+0x2c0>)
 80023c2:	f7fe fc54 	bl	8000c6e <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80023c6:	6923      	ldr	r3, [r4, #16]
 80023c8:	2b0f      	cmp	r3, #15
 80023ca:	d810      	bhi.n	80023ee <HAL_GPIO_Init+0x156>
        temp = GPIOx->AFR[position >> 3U];
 80023cc:	08ea      	lsrs	r2, r5, #3
 80023ce:	3208      	adds	r2, #8
 80023d0:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023d4:	f005 0107 	and.w	r1, r5, #7
 80023d8:	0089      	lsls	r1, r1, #2
 80023da:	230f      	movs	r3, #15
 80023dc:	408b      	lsls	r3, r1
 80023de:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023e2:	6923      	ldr	r3, [r4, #16]
 80023e4:	408b      	lsls	r3, r1
 80023e6:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3U] = temp;
 80023e8:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 80023ec:	e065      	b.n	80024ba <HAL_GPIO_Init+0x222>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80023ee:	21da      	movs	r1, #218	; 0xda
 80023f0:	4859      	ldr	r0, [pc, #356]	; (8002558 <HAL_GPIO_Init+0x2c0>)
 80023f2:	f7fe fc3c 	bl	8000c6e <assert_failed>
 80023f6:	e7e9      	b.n	80023cc <HAL_GPIO_Init+0x134>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023f8:	2305      	movs	r3, #5
 80023fa:	e000      	b.n	80023fe <HAL_GPIO_Init+0x166>
 80023fc:	2300      	movs	r3, #0
 80023fe:	408b      	lsls	r3, r1
 8002400:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002402:	3202      	adds	r2, #2
 8002404:	4955      	ldr	r1, [pc, #340]	; (800255c <HAL_GPIO_Init+0x2c4>)
 8002406:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800240a:	4b55      	ldr	r3, [pc, #340]	; (8002560 <HAL_GPIO_Init+0x2c8>)
 800240c:	689a      	ldr	r2, [r3, #8]
        temp &= ~(iocurrent);
 800240e:	43f3      	mvns	r3, r6
 8002410:	ea22 0106 	bic.w	r1, r2, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002414:	6860      	ldr	r0, [r4, #4]
 8002416:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800241a:	d001      	beq.n	8002420 <HAL_GPIO_Init+0x188>
        {
          temp |= iocurrent;
 800241c:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->RTSR1 = temp;
 8002420:	4a4f      	ldr	r2, [pc, #316]	; (8002560 <HAL_GPIO_Init+0x2c8>)
 8002422:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR1;
 8002424:	68d2      	ldr	r2, [r2, #12]
        temp &= ~(iocurrent);
 8002426:	ea03 0102 	and.w	r1, r3, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800242a:	6860      	ldr	r0, [r4, #4]
 800242c:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002430:	d001      	beq.n	8002436 <HAL_GPIO_Init+0x19e>
        {
          temp |= iocurrent;
 8002432:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->FTSR1 = temp;
 8002436:	4a4a      	ldr	r2, [pc, #296]	; (8002560 <HAL_GPIO_Init+0x2c8>)
 8002438:	60d1      	str	r1, [r2, #12]

        temp = EXTI->EMR1;
 800243a:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 800243c:	ea03 0102 	and.w	r1, r3, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002440:	6860      	ldr	r0, [r4, #4]
 8002442:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8002446:	d001      	beq.n	800244c <HAL_GPIO_Init+0x1b4>
        {
          temp |= iocurrent;
 8002448:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->EMR1 = temp;
 800244c:	4a44      	ldr	r2, [pc, #272]	; (8002560 <HAL_GPIO_Init+0x2c8>)
 800244e:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002450:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 8002452:	4013      	ands	r3, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002454:	6861      	ldr	r1, [r4, #4]
 8002456:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800245a:	d001      	beq.n	8002460 <HAL_GPIO_Init+0x1c8>
        {
          temp |= iocurrent;
 800245c:	ea46 0302 	orr.w	r3, r6, r2
        }
        EXTI->IMR1 = temp;
 8002460:	4a3f      	ldr	r2, [pc, #252]	; (8002560 <HAL_GPIO_Init+0x2c8>)
 8002462:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002464:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002466:	6826      	ldr	r6, [r4, #0]
 8002468:	fa36 f205 	lsrs.w	r2, r6, r5
 800246c:	d06f      	beq.n	800254e <HAL_GPIO_Init+0x2b6>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800246e:	2701      	movs	r7, #1
 8002470:	40af      	lsls	r7, r5
    if (iocurrent != 0x00u)
 8002472:	403e      	ands	r6, r7
 8002474:	d0f6      	beq.n	8002464 <HAL_GPIO_Init+0x1cc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002476:	6863      	ldr	r3, [r4, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	3b01      	subs	r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	f67f af5e 	bls.w	8002340 <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002484:	6863      	ldr	r3, [r4, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b03      	cmp	r3, #3
 800248c:	d00f      	beq.n	80024ae <HAL_GPIO_Init+0x216>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800248e:	68a3      	ldr	r3, [r4, #8]
 8002490:	2b02      	cmp	r3, #2
 8002492:	f63f af75 	bhi.w	8002380 <HAL_GPIO_Init+0xe8>
        temp = GPIOx->PUPDR;
 8002496:	f8d8 200c 	ldr.w	r2, [r8, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800249a:	0069      	lsls	r1, r5, #1
 800249c:	2303      	movs	r3, #3
 800249e:	408b      	lsls	r3, r1
 80024a0:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a4:	68a3      	ldr	r3, [r4, #8]
 80024a6:	408b      	lsls	r3, r1
 80024a8:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
 80024aa:	f8c8 300c 	str.w	r3, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ae:	6863      	ldr	r3, [r4, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	f43f af68 	beq.w	800238a <HAL_GPIO_Init+0xf2>
      temp = GPIOx->MODER;
 80024ba:	f8d8 2000 	ldr.w	r2, [r8]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024be:	0069      	lsls	r1, r5, #1
 80024c0:	2303      	movs	r3, #3
 80024c2:	408b      	lsls	r3, r1
 80024c4:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c8:	6863      	ldr	r3, [r4, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	408b      	lsls	r3, r1
 80024d0:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 80024d2:	f8c8 3000 	str.w	r3, [r8]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024d6:	6863      	ldr	r3, [r4, #4]
 80024d8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80024dc:	d0c2      	beq.n	8002464 <HAL_GPIO_Init+0x1cc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024de:	4b21      	ldr	r3, [pc, #132]	; (8002564 <HAL_GPIO_Init+0x2cc>)
 80024e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	661a      	str	r2, [r3, #96]	; 0x60
 80024e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80024f2:	08aa      	lsrs	r2, r5, #2
 80024f4:	1c91      	adds	r1, r2, #2
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_GPIO_Init+0x2c4>)
 80024f8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024fc:	f005 0103 	and.w	r1, r5, #3
 8002500:	0089      	lsls	r1, r1, #2
 8002502:	230f      	movs	r3, #15
 8002504:	408b      	lsls	r3, r1
 8002506:	ea20 0003 	bic.w	r0, r0, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800250a:	f1b8 4f90 	cmp.w	r8, #1207959552	; 0x48000000
 800250e:	f43f af75 	beq.w	80023fc <HAL_GPIO_Init+0x164>
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_GPIO_Init+0x2bc>)
 8002514:	4598      	cmp	r8, r3
 8002516:	d012      	beq.n	800253e <HAL_GPIO_Init+0x2a6>
 8002518:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800251c:	4598      	cmp	r8, r3
 800251e:	d010      	beq.n	8002542 <HAL_GPIO_Init+0x2aa>
 8002520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002524:	4598      	cmp	r8, r3
 8002526:	d00e      	beq.n	8002546 <HAL_GPIO_Init+0x2ae>
 8002528:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800252c:	4598      	cmp	r8, r3
 800252e:	d00c      	beq.n	800254a <HAL_GPIO_Init+0x2b2>
 8002530:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002534:	4598      	cmp	r8, r3
 8002536:	f43f af5f 	beq.w	80023f8 <HAL_GPIO_Init+0x160>
 800253a:	2306      	movs	r3, #6
 800253c:	e75f      	b.n	80023fe <HAL_GPIO_Init+0x166>
 800253e:	2301      	movs	r3, #1
 8002540:	e75d      	b.n	80023fe <HAL_GPIO_Init+0x166>
 8002542:	2302      	movs	r3, #2
 8002544:	e75b      	b.n	80023fe <HAL_GPIO_Init+0x166>
 8002546:	2303      	movs	r3, #3
 8002548:	e759      	b.n	80023fe <HAL_GPIO_Init+0x166>
 800254a:	2304      	movs	r3, #4
 800254c:	e757      	b.n	80023fe <HAL_GPIO_Init+0x166>
  }
}
 800254e:	b002      	add	sp, #8
 8002550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002554:	48000400 	.word	0x48000400
 8002558:	08012f28 	.word	0x08012f28
 800255c:	40010000 	.word	0x40010000
 8002560:	40010400 	.word	0x40010400
 8002564:	40021000 	.word	0x40021000

08002568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	4605      	mov	r5, r0
 800256c:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800256e:	460e      	mov	r6, r1
 8002570:	b121      	cbz	r1, 800257c <HAL_GPIO_WritePin+0x14>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002572:	2c01      	cmp	r4, #1
 8002574:	d808      	bhi.n	8002588 <HAL_GPIO_WritePin+0x20>

  if (PinState != GPIO_PIN_RESET)
 8002576:	b16c      	cbz	r4, 8002594 <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002578:	61ae      	str	r6, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800257a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800257c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002580:	4805      	ldr	r0, [pc, #20]	; (8002598 <HAL_GPIO_WritePin+0x30>)
 8002582:	f7fe fb74 	bl	8000c6e <assert_failed>
 8002586:	e7f4      	b.n	8002572 <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002588:	f240 119b 	movw	r1, #411	; 0x19b
 800258c:	4802      	ldr	r0, [pc, #8]	; (8002598 <HAL_GPIO_WritePin+0x30>)
 800258e:	f7fe fb6e 	bl	8000c6e <assert_failed>
 8002592:	e7f0      	b.n	8002576 <HAL_GPIO_WritePin+0xe>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002594:	62ae      	str	r6, [r5, #40]	; 0x28
}
 8002596:	e7f0      	b.n	800257a <HAL_GPIO_WritePin+0x12>
 8002598:	08012f28 	.word	0x08012f28

0800259c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800259c:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800259e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80025a2:	d043      	beq.n	800262c <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025a4:	6804      	ldr	r4, [r0, #0]
 80025a6:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80025aa:	f891 c000 	ldrb.w	ip, [r1]
 80025ae:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 80025b2:	fa1e f383 	uxtah	r3, lr, r3
 80025b6:	4423      	add	r3, r4
 80025b8:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 80025bc:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 80025c0:	698b      	ldr	r3, [r1, #24]
 80025c2:	42a3      	cmp	r3, r4
 80025c4:	d328      	bcc.n	8002618 <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 80025c6:	1b1b      	subs	r3, r3, r4
 80025c8:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 80025ca:	698b      	ldr	r3, [r1, #24]
 80025cc:	b97b      	cbnz	r3, 80025ee <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025ce:	6805      	ldr	r5, [r0, #0]
 80025d0:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ea:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025ee:	f012 0f40 	tst.w	r2, #64	; 0x40
 80025f2:	d00e      	beq.n	8002612 <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025f4:	6802      	ldr	r2, [r0, #0]
 80025f6:	780d      	ldrb	r5, [r1, #0]
 80025f8:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800260e:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8002612:	b924      	cbnz	r4, 800261e <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8002614:	4620      	mov	r0, r4
 8002616:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	618b      	str	r3, [r1, #24]
 800261c:	e7d5      	b.n	80025ca <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800261e:	4623      	mov	r3, r4
 8002620:	890a      	ldrh	r2, [r1, #8]
 8002622:	6949      	ldr	r1, [r1, #20]
 8002624:	6800      	ldr	r0, [r0, #0]
 8002626:	f005 f825 	bl	8007674 <USB_ReadPMA>
 800262a:	e7f3      	b.n	8002614 <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800262c:	6804      	ldr	r4, [r0, #0]
 800262e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002632:	f891 c000 	ldrb.w	ip, [r1]
 8002636:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 800263a:	fa1e f383 	uxtah	r3, lr, r3
 800263e:	4423      	add	r3, r4
 8002640:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 8002644:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8002648:	698b      	ldr	r3, [r1, #24]
 800264a:	42a3      	cmp	r3, r4
 800264c:	d32f      	bcc.n	80026ae <HAL_PCD_EP_DB_Receive+0x112>
      ep->xfer_len -= count;
 800264e:	1b1b      	subs	r3, r3, r4
 8002650:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8002652:	698b      	ldr	r3, [r1, #24]
 8002654:	b97b      	cbnz	r3, 8002676 <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002656:	6805      	ldr	r5, [r0, #0]
 8002658:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 800265c:	b29b      	uxth	r3, r3
 800265e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002666:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800266a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002672:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002676:	f012 0f40 	tst.w	r2, #64	; 0x40
 800267a:	d10f      	bne.n	800269c <HAL_PCD_EP_DB_Receive+0x100>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800267c:	6802      	ldr	r2, [r0, #0]
 800267e:	f891 c000 	ldrb.w	ip, [r1]
 8002682:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8002686:	b29b      	uxth	r3, r3
 8002688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800268c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002694:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002698:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 800269c:	2c00      	cmp	r4, #0
 800269e:	d0b9      	beq.n	8002614 <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026a0:	4623      	mov	r3, r4
 80026a2:	894a      	ldrh	r2, [r1, #10]
 80026a4:	6949      	ldr	r1, [r1, #20]
 80026a6:	6800      	ldr	r0, [r0, #0]
 80026a8:	f004 ffe4 	bl	8007674 <USB_ReadPMA>
 80026ac:	e7b2      	b.n	8002614 <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	618b      	str	r3, [r1, #24]
 80026b2:	e7ce      	b.n	8002652 <HAL_PCD_EP_DB_Receive+0xb6>

080026b4 <HAL_PCD_Init>:
  if (hpcd == NULL)
 80026b4:	2800      	cmp	r0, #0
 80026b6:	d076      	beq.n	80027a6 <HAL_PCD_Init+0xf2>
{
 80026b8:	b530      	push	{r4, r5, lr}
 80026ba:	b087      	sub	sp, #28
 80026bc:	4604      	mov	r4, r0
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80026be:	6802      	ldr	r2, [r0, #0]
 80026c0:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <HAL_PCD_Init+0xf8>)
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d003      	beq.n	80026ce <HAL_PCD_Init+0x1a>
 80026c6:	2187      	movs	r1, #135	; 0x87
 80026c8:	4839      	ldr	r0, [pc, #228]	; (80027b0 <HAL_PCD_Init+0xfc>)
 80026ca:	f7fe fad0 	bl	8000c6e <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026ce:	f894 32a9 	ldrb.w	r3, [r4, #681]	; 0x2a9
 80026d2:	b13b      	cbz	r3, 80026e4 <HAL_PCD_Init+0x30>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80026d4:	2303      	movs	r3, #3
 80026d6:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80026da:	6820      	ldr	r0, [r4, #0]
 80026dc:	f004 f8ab 	bl	8006836 <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	e020      	b.n	8002726 <HAL_PCD_Init+0x72>
    hpcd->Lock = HAL_UNLOCKED;
 80026e4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80026e8:	4620      	mov	r0, r4
 80026ea:	f00e ff1d 	bl	8011528 <HAL_PCD_MspInit>
 80026ee:	e7f1      	b.n	80026d4 <HAL_PCD_Init+0x20>
    hpcd->IN_ep[i].is_in = 1U;
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80026f6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80026fa:	2001      	movs	r0, #1
 80026fc:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 80026fe:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002702:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002706:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800270a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800270e:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002710:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8002714:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8002718:	2000      	movs	r0, #0
 800271a:	f88c 0003 	strb.w	r0, [ip, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 800271e:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002720:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8002722:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002724:	b2d3      	uxtb	r3, r2
 8002726:	6860      	ldr	r0, [r4, #4]
 8002728:	4283      	cmp	r3, r0
 800272a:	d3e1      	bcc.n	80026f0 <HAL_PCD_Init+0x3c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272c:	2300      	movs	r3, #0
 800272e:	e016      	b.n	800275e <HAL_PCD_Init+0xaa>
    hpcd->OUT_ep[i].is_in = 0U;
 8002730:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002734:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002738:	2100      	movs	r1, #0
 800273a:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 800273e:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002742:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002746:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800274a:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800274e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002752:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002756:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275a:	3301      	adds	r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4298      	cmp	r0, r3
 8002760:	d8e6      	bhi.n	8002730 <HAL_PCD_Init+0x7c>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002762:	46a4      	mov	ip, r4
 8002764:	f85c 5b10 	ldr.w	r5, [ip], #16
 8002768:	46ee      	mov	lr, sp
 800276a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800276e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002772:	f8dc 3000 	ldr.w	r3, [ip]
 8002776:	f8ce 3000 	str.w	r3, [lr]
 800277a:	1d23      	adds	r3, r4, #4
 800277c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800277e:	4628      	mov	r0, r5
 8002780:	f004 f863 	bl	800684a <USB_DevInit>
  hpcd->USB_Address = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800278a:	2301      	movs	r3, #1
 800278c:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 8002790:	69e3      	ldr	r3, [r4, #28]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d002      	beq.n	800279c <HAL_PCD_Init+0xe8>
  return HAL_OK;
 8002796:	2000      	movs	r0, #0
}
 8002798:	b007      	add	sp, #28
 800279a:	bd30      	pop	{r4, r5, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800279c:	4620      	mov	r0, r4
 800279e:	f000 feed 	bl	800357c <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 80027a2:	2000      	movs	r0, #0
 80027a4:	e7f8      	b.n	8002798 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
 80027a6:	2001      	movs	r0, #1
}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40005c00 	.word	0x40005c00
 80027b0:	08012f64 	.word	0x08012f64

080027b4 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 80027b4:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d00e      	beq.n	80027da <HAL_PCD_Start+0x26>
{
 80027bc:	b510      	push	{r4, lr}
 80027be:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80027c0:	2301      	movs	r3, #1
 80027c2:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80027c6:	6800      	ldr	r0, [r0, #0]
 80027c8:	f004 f82c 	bl	8006824 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027cc:	6820      	ldr	r0, [r4, #0]
 80027ce:	f004 fb80 	bl	8006ed2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80027d8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80027da:	2002      	movs	r0, #2
}
 80027dc:	4770      	bx	lr

080027de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027de:	b570      	push	{r4, r5, r6, lr}
 80027e0:	4605      	mov	r5, r0
 80027e2:	460c      	mov	r4, r1
 80027e4:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027e6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80027ea:	f000 8109 	beq.w	8002a00 <HAL_PCD_EP_DB_Transmit+0x222>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027ee:	6802      	ldr	r2, [r0, #0]
 80027f0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80027f4:	7809      	ldrb	r1, [r1, #0]
 80027f6:	00c8      	lsls	r0, r1, #3
 80027f8:	fa10 f383 	uxtah	r3, r0, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002802:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 8002806:	69a3      	ldr	r3, [r4, #24]
 8002808:	4293      	cmp	r3, r2
 800280a:	d951      	bls.n	80028b0 <HAL_PCD_EP_DB_Transmit+0xd2>
    {
      ep->xfer_len -= TxPctSize;
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002810:	69a3      	ldr	r3, [r4, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d168      	bne.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002816:	7863      	ldrb	r3, [r4, #1]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d14c      	bne.n	80028b6 <HAL_PCD_EP_DB_Transmit+0xd8>
 800281c:	682a      	ldr	r2, [r5, #0]
 800281e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002822:	fa12 f383 	uxtah	r3, r2, r3
 8002826:	4403      	add	r3, r0
 8002828:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800282c:	b292      	uxth	r2, r2
 800282e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002832:	b292      	uxth	r2, r2
 8002834:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002838:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800283c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002840:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002844:	b292      	uxth	r2, r2
 8002846:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800284a:	682a      	ldr	r2, [r5, #0]
 800284c:	7863      	ldrb	r3, [r4, #1]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d13d      	bne.n	80028ce <HAL_PCD_EP_DB_Transmit+0xf0>
 8002852:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002856:	fa12 f383 	uxtah	r3, r2, r3
 800285a:	7822      	ldrb	r2, [r4, #0]
 800285c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002860:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002864:	b292      	uxth	r2, r2
 8002866:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800286a:	b292      	uxth	r2, r2
 800286c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002870:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002874:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002878:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800287c:	b292      	uxth	r2, r2
 800287e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002882:	7821      	ldrb	r1, [r4, #0]
 8002884:	4628      	mov	r0, r5
 8002886:	f00e fe93 	bl	80115b0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800288a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800288e:	d040      	beq.n	8002912 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002890:	682a      	ldr	r2, [r5, #0]
 8002892:	7821      	ldrb	r1, [r4, #0]
 8002894:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002898:	b29b      	uxth	r3, r3
 800289a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028aa:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80028ae:	e030      	b.n	8002912 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61a3      	str	r3, [r4, #24]
 80028b4:	e7ac      	b.n	8002810 <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d1c7      	bne.n	800284a <HAL_PCD_EP_DB_Transmit+0x6c>
 80028ba:	682a      	ldr	r2, [r5, #0]
 80028bc:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80028c0:	fa12 f383 	uxtah	r3, r2, r3
 80028c4:	4403      	add	r3, r0
 80028c6:	2200      	movs	r2, #0
 80028c8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80028cc:	e7bd      	b.n	800284a <HAL_PCD_EP_DB_Transmit+0x6c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d1d7      	bne.n	8002882 <HAL_PCD_EP_DB_Transmit+0xa4>
 80028d2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80028d6:	fa12 f383 	uxtah	r3, r2, r3
 80028da:	7822      	ldrb	r2, [r4, #0]
 80028dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80028e0:	2200      	movs	r2, #0
 80028e2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80028e6:	e7cc      	b.n	8002882 <HAL_PCD_EP_DB_Transmit+0xa4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028e8:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80028ec:	d00d      	beq.n	800290a <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028ee:	6828      	ldr	r0, [r5, #0]
 80028f0:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002906:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800290a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800290e:	2b01      	cmp	r3, #1
 8002910:	d012      	beq.n	8002938 <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002912:	682a      	ldr	r2, [r5, #0]
 8002914:	7821      	ldrb	r1, [r4, #0]
 8002916:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002924:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002930:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8002934:	2000      	movs	r0, #0
 8002936:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 8002938:	6963      	ldr	r3, [r4, #20]
 800293a:	4413      	add	r3, r2
 800293c:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 800293e:	69e3      	ldr	r3, [r4, #28]
 8002940:	4413      	add	r3, r2
 8002942:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002944:	6a21      	ldr	r1, [r4, #32]
 8002946:	6923      	ldr	r3, [r4, #16]
 8002948:	4299      	cmp	r1, r3
 800294a:	d31b      	bcc.n	8002984 <HAL_PCD_EP_DB_Transmit+0x1a6>
          ep->xfer_len_db -= len;
 800294c:	1ac9      	subs	r1, r1, r3
 800294e:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002950:	7862      	ldrb	r2, [r4, #1]
 8002952:	2a00      	cmp	r2, #0
 8002954:	d13f      	bne.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x1f8>
 8002956:	6829      	ldr	r1, [r5, #0]
 8002958:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800295c:	fa11 f282 	uxtah	r2, r1, r2
 8002960:	7821      	ldrb	r1, [r4, #0]
 8002962:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002966:	2b3e      	cmp	r3, #62	; 0x3e
 8002968:	d918      	bls.n	800299c <HAL_PCD_EP_DB_Transmit+0x1be>
 800296a:	0959      	lsrs	r1, r3, #5
 800296c:	f013 0f1f 	tst.w	r3, #31
 8002970:	d100      	bne.n	8002974 <HAL_PCD_EP_DB_Transmit+0x196>
 8002972:	3901      	subs	r1, #1
 8002974:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002978:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800297c:	b289      	uxth	r1, r1
 800297e:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8002982:	e02a      	b.n	80029da <HAL_PCD_EP_DB_Transmit+0x1fc>
        else if (ep->xfer_len_db == 0U)
 8002984:	b921      	cbnz	r1, 8002990 <HAL_PCD_EP_DB_Transmit+0x1b2>
          ep->xfer_fill_db = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 800298c:	4613      	mov	r3, r2
 800298e:	e7df      	b.n	8002950 <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8002996:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8002998:	460b      	mov	r3, r1
 800299a:	e7d9      	b.n	8002950 <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800299c:	b98b      	cbnz	r3, 80029c2 <HAL_PCD_EP_DB_Transmit+0x1e4>
 800299e:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80029a2:	b289      	uxth	r1, r1
 80029a4:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80029a8:	b289      	uxth	r1, r1
 80029aa:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80029ae:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80029b2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80029b6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80029ba:	b289      	uxth	r1, r1
 80029bc:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80029c0:	e00b      	b.n	80029da <HAL_PCD_EP_DB_Transmit+0x1fc>
 80029c2:	0859      	lsrs	r1, r3, #1
 80029c4:	f013 0f01 	tst.w	r3, #1
 80029c8:	d000      	beq.n	80029cc <HAL_PCD_EP_DB_Transmit+0x1ee>
 80029ca:	3101      	adds	r1, #1
 80029cc:	0289      	lsls	r1, r1, #10
 80029ce:	b289      	uxth	r1, r1
 80029d0:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80029d4:	e001      	b.n	80029da <HAL_PCD_EP_DB_Transmit+0x1fc>
 80029d6:	2a01      	cmp	r2, #1
 80029d8:	d006      	beq.n	80029e8 <HAL_PCD_EP_DB_Transmit+0x20a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029da:	b29b      	uxth	r3, r3
 80029dc:	8922      	ldrh	r2, [r4, #8]
 80029de:	6961      	ldr	r1, [r4, #20]
 80029e0:	6828      	ldr	r0, [r5, #0]
 80029e2:	f004 fa85 	bl	8006ef0 <USB_WritePMA>
 80029e6:	e794      	b.n	8002912 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029e8:	6829      	ldr	r1, [r5, #0]
 80029ea:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80029ee:	fa11 f282 	uxtah	r2, r1, r2
 80029f2:	7821      	ldrb	r1, [r4, #0]
 80029f4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80029f8:	b299      	uxth	r1, r3
 80029fa:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80029fe:	e7ec      	b.n	80029da <HAL_PCD_EP_DB_Transmit+0x1fc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a00:	6802      	ldr	r2, [r0, #0]
 8002a02:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002a06:	7809      	ldrb	r1, [r1, #0]
 8002a08:	00c8      	lsls	r0, r1, #3
 8002a0a:	fa10 f383 	uxtah	r3, r0, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002a14:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8002a18:	69a3      	ldr	r3, [r4, #24]
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d352      	bcc.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x2e6>
      ep->xfer_len -= TxPctSize;
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8002a22:	69a3      	ldr	r3, [r4, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d169      	bne.n	8002afc <HAL_PCD_EP_DB_Transmit+0x31e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a28:	7863      	ldrb	r3, [r4, #1]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d14d      	bne.n	8002aca <HAL_PCD_EP_DB_Transmit+0x2ec>
 8002a2e:	682a      	ldr	r2, [r5, #0]
 8002a30:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002a34:	fa12 f383 	uxtah	r3, r2, r3
 8002a38:	4403      	add	r3, r0
 8002a3a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002a3e:	b292      	uxth	r2, r2
 8002a40:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002a44:	b292      	uxth	r2, r2
 8002a46:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002a4a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002a4e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002a52:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a56:	b292      	uxth	r2, r2
 8002a58:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a5c:	682a      	ldr	r2, [r5, #0]
 8002a5e:	7863      	ldrb	r3, [r4, #1]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d13e      	bne.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x304>
 8002a64:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002a68:	fa12 f383 	uxtah	r3, r2, r3
 8002a6c:	7822      	ldrb	r2, [r4, #0]
 8002a6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a72:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002a76:	b292      	uxth	r2, r2
 8002a78:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002a7c:	b292      	uxth	r2, r2
 8002a7e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002a82:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002a86:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002a8a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a8e:	b292      	uxth	r2, r2
 8002a90:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a94:	7821      	ldrb	r1, [r4, #0]
 8002a96:	4628      	mov	r0, r5
 8002a98:	f00e fd8a 	bl	80115b0 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a9c:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002aa0:	f47f af37 	bne.w	8002912 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002aa4:	682a      	ldr	r2, [r5, #0]
 8002aa6:	7821      	ldrb	r1, [r4, #0]
 8002aa8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002abe:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002ac2:	e726      	b.n	8002912 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61a3      	str	r3, [r4, #24]
 8002ac8:	e7ab      	b.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x244>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d1c6      	bne.n	8002a5c <HAL_PCD_EP_DB_Transmit+0x27e>
 8002ace:	682a      	ldr	r2, [r5, #0]
 8002ad0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002ad4:	fa12 f383 	uxtah	r3, r2, r3
 8002ad8:	4403      	add	r3, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002ae0:	e7bc      	b.n	8002a5c <HAL_PCD_EP_DB_Transmit+0x27e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d1d6      	bne.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x2b6>
 8002ae6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002aea:	fa12 f383 	uxtah	r3, r2, r3
 8002aee:	7822      	ldrb	r2, [r4, #0]
 8002af0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002af4:	2200      	movs	r2, #0
 8002af6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002afa:	e7cb      	b.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x2b6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002afc:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002b00:	d10d      	bne.n	8002b1e <HAL_PCD_EP_DB_Transmit+0x340>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b02:	6828      	ldr	r0, [r5, #0]
 8002b04:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002b1e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	f47f aef5 	bne.w	8002912 <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 8002b28:	6963      	ldr	r3, [r4, #20]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8002b2e:	69e3      	ldr	r3, [r4, #28]
 8002b30:	4413      	add	r3, r2
 8002b32:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b34:	6a21      	ldr	r1, [r4, #32]
 8002b36:	6923      	ldr	r3, [r4, #16]
 8002b38:	4299      	cmp	r1, r3
 8002b3a:	d31b      	bcc.n	8002b74 <HAL_PCD_EP_DB_Transmit+0x396>
          ep->xfer_len_db -= len;
 8002b3c:	1ac9      	subs	r1, r1, r3
 8002b3e:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b40:	6829      	ldr	r1, [r5, #0]
 8002b42:	7862      	ldrb	r2, [r4, #1]
 8002b44:	2a00      	cmp	r2, #0
 8002b46:	d13e      	bne.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x3e8>
 8002b48:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8002b4c:	fa11 f282 	uxtah	r2, r1, r2
 8002b50:	7821      	ldrb	r1, [r4, #0]
 8002b52:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002b56:	2b3e      	cmp	r3, #62	; 0x3e
 8002b58:	d918      	bls.n	8002b8c <HAL_PCD_EP_DB_Transmit+0x3ae>
 8002b5a:	0959      	lsrs	r1, r3, #5
 8002b5c:	f013 0f1f 	tst.w	r3, #31
 8002b60:	d100      	bne.n	8002b64 <HAL_PCD_EP_DB_Transmit+0x386>
 8002b62:	3901      	subs	r1, #1
 8002b64:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002b68:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002b6c:	b289      	uxth	r1, r1
 8002b6e:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002b72:	e02a      	b.n	8002bca <HAL_PCD_EP_DB_Transmit+0x3ec>
        else if (ep->xfer_len_db == 0U)
 8002b74:	b921      	cbnz	r1, 8002b80 <HAL_PCD_EP_DB_Transmit+0x3a2>
          ep->xfer_fill_db = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	e7df      	b.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8002b84:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b88:	460b      	mov	r3, r1
 8002b8a:	e7d9      	b.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x362>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b8c:	b98b      	cbnz	r3, 8002bb2 <HAL_PCD_EP_DB_Transmit+0x3d4>
 8002b8e:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8002b92:	b289      	uxth	r1, r1
 8002b94:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002b98:	b289      	uxth	r1, r1
 8002b9a:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002b9e:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8002ba2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002ba6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002baa:	b289      	uxth	r1, r1
 8002bac:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002bb0:	e00b      	b.n	8002bca <HAL_PCD_EP_DB_Transmit+0x3ec>
 8002bb2:	0859      	lsrs	r1, r3, #1
 8002bb4:	f013 0f01 	tst.w	r3, #1
 8002bb8:	d000      	beq.n	8002bbc <HAL_PCD_EP_DB_Transmit+0x3de>
 8002bba:	3101      	adds	r1, #1
 8002bbc:	0289      	lsls	r1, r1, #10
 8002bbe:	b289      	uxth	r1, r1
 8002bc0:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002bc4:	e001      	b.n	8002bca <HAL_PCD_EP_DB_Transmit+0x3ec>
 8002bc6:	2a01      	cmp	r2, #1
 8002bc8:	d006      	beq.n	8002bd8 <HAL_PCD_EP_DB_Transmit+0x3fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	8962      	ldrh	r2, [r4, #10]
 8002bce:	6961      	ldr	r1, [r4, #20]
 8002bd0:	6828      	ldr	r0, [r5, #0]
 8002bd2:	f004 f98d 	bl	8006ef0 <USB_WritePMA>
 8002bd6:	e69c      	b.n	8002912 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bd8:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8002bdc:	fa11 f282 	uxtah	r2, r1, r2
 8002be0:	7821      	ldrb	r1, [r4, #0]
 8002be2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002be6:	b299      	uxth	r1, r3
 8002be8:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002bec:	e7ed      	b.n	8002bca <HAL_PCD_EP_DB_Transmit+0x3ec>

08002bee <PCD_EP_ISR_Handler>:
{
 8002bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bf2:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bf4:	e0ca      	b.n	8002d8c <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bf6:	8803      	ldrh	r3, [r0, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c0e:	6829      	ldr	r1, [r5, #0]
 8002c10:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002c14:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8002c18:	00d2      	lsls	r2, r2, #3
 8002c1a:	fa12 f383 	uxtah	r3, r2, r3
 8002c1e:	440b      	add	r3, r1
 8002c20:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8002c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c28:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002c2a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002c2c:	441a      	add	r2, r3
 8002c2e:	63ea      	str	r2, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c30:	2100      	movs	r1, #0
 8002c32:	4628      	mov	r0, r5
 8002c34:	f00e fcbc 	bl	80115b0 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c38:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80a5 	beq.w	8002d8c <PCD_EP_ISR_Handler+0x19e>
 8002c42:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f040 80a1 	bne.w	8002d8c <PCD_EP_ISR_Handler+0x19e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c4a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002c4e:	682a      	ldr	r2, [r5, #0]
 8002c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c54:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8002c5e:	e095      	b.n	8002d8c <PCD_EP_ISR_Handler+0x19e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c60:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002c64:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8002c68:	00d2      	lsls	r2, r2, #3
 8002c6a:	fa12 f383 	uxtah	r3, r2, r3
 8002c6e:	4403      	add	r3, r0
 8002c70:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8002c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c78:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c7c:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8002c80:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8002c84:	f004 fcf6 	bl	8007674 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c88:	682a      	ldr	r2, [r5, #0]
 8002c8a:	8813      	ldrh	r3, [r2, #0]
 8002c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c90:	051b      	lsls	r3, r3, #20
 8002c92:	0d1b      	lsrs	r3, r3, #20
 8002c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c98:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002c9a:	4628      	mov	r0, r5
 8002c9c:	f00e fc74 	bl	8011588 <HAL_PCD_SetupStageCallback>
 8002ca0:	e074      	b.n	8002d8c <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ca2:	b989      	cbnz	r1, 8002cc8 <PCD_EP_ISR_Handler+0xda>
 8002ca4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002ca8:	b292      	uxth	r2, r2
 8002caa:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002cae:	b292      	uxth	r2, r2
 8002cb0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002cb4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002cb8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002cbc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002cc0:	b292      	uxth	r2, r2
 8002cc2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002cc6:	e0bf      	b.n	8002e48 <PCD_EP_ISR_Handler+0x25a>
 8002cc8:	084a      	lsrs	r2, r1, #1
 8002cca:	f011 0f01 	tst.w	r1, #1
 8002cce:	d000      	beq.n	8002cd2 <PCD_EP_ISR_Handler+0xe4>
 8002cd0:	3201      	adds	r2, #1
 8002cd2:	0292      	lsls	r2, r2, #10
 8002cd4:	b292      	uxth	r2, r2
 8002cd6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002cda:	e0b5      	b.n	8002e48 <PCD_EP_ISR_Handler+0x25a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002cdc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002ce0:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ce2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002ce6:	f040 80be 	bne.w	8002e66 <PCD_EP_ISR_Handler+0x278>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002cea:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002cee:	d04d      	beq.n	8002d8c <PCD_EP_ISR_Handler+0x19e>
        ep = &hpcd->IN_ep[epindex];
 8002cf0:	1c62      	adds	r2, r4, #1
 8002cf2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002cf6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002cfa:	6828      	ldr	r0, [r5, #0]
 8002cfc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 8002d18:	78cb      	ldrb	r3, [r1, #3]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	f000 81a7 	beq.w	800306e <PCD_EP_ISR_Handler+0x480>
          ep->xfer_len = 0U;
 8002d20:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002d24:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002d28:	2200      	movs	r2, #0
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8002d2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d30:	b323      	cbz	r3, 8002d7c <PCD_EP_ISR_Handler+0x18e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d32:	f016 0f40 	tst.w	r6, #64	; 0x40
 8002d36:	f000 8163 	beq.w	8003000 <PCD_EP_ISR_Handler+0x412>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d3a:	784b      	ldrb	r3, [r1, #1]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f040 814c 	bne.w	8002fda <PCD_EP_ISR_Handler+0x3ec>
 8002d42:	682a      	ldr	r2, [r5, #0]
 8002d44:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002d48:	fa12 f383 	uxtah	r3, r2, r3
 8002d4c:	1c62      	adds	r2, r4, #1
 8002d4e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d52:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8002d56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d5a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002d64:	b292      	uxth	r2, r2
 8002d66:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002d6a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002d6e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002d72:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d76:	b292      	uxth	r2, r2
 8002d78:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d7c:	3401      	adds	r4, #1
 8002d7e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002d82:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8002d86:	4628      	mov	r0, r5
 8002d88:	f00e fc12 	bl	80115b0 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d8c:	6828      	ldr	r0, [r5, #0]
 8002d8e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002d92:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002d96:	f000 81ae 	beq.w	80030f6 <PCD_EP_ISR_Handler+0x508>
    wIstr = hpcd->Instance->ISTR;
 8002d9a:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8002d9e:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8002da0:	f014 040f 	ands.w	r4, r4, #15
 8002da4:	d19a      	bne.n	8002cdc <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002da6:	f013 0f10 	tst.w	r3, #16
 8002daa:	f43f af24 	beq.w	8002bf6 <PCD_EP_ISR_Handler+0x8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002dae:	8803      	ldrh	r3, [r0, #0]
 8002db0:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002db2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002db6:	f47f af53 	bne.w	8002c60 <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dba:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002dbe:	d0e5      	beq.n	8002d8c <PCD_EP_ISR_Handler+0x19e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002dc0:	8803      	ldrh	r3, [r0, #0]
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc6:	051b      	lsls	r3, r3, #20
 8002dc8:	0d1b      	lsrs	r3, r3, #20
 8002dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dce:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dd0:	6828      	ldr	r0, [r5, #0]
 8002dd2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002dd6:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8002dda:	00d2      	lsls	r2, r2, #3
 8002ddc:	fa12 f383 	uxtah	r3, r2, r3
 8002de0:	4403      	add	r3, r0
 8002de2:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8002de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dea:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002dee:	b18b      	cbz	r3, 8002e14 <PCD_EP_ISR_Handler+0x226>
 8002df0:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8002df4:	b171      	cbz	r1, 8002e14 <PCD_EP_ISR_Handler+0x226>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002df6:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8002dfa:	f004 fc3b 	bl	8007674 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002dfe:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8002e02:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8002e06:	4413      	add	r3, r2
 8002e08:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4628      	mov	r0, r5
 8002e10:	f00e fbc2 	bl	8011598 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002e14:	682b      	ldr	r3, [r5, #0]
 8002e16:	881a      	ldrh	r2, [r3, #0]
 8002e18:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002e1c:	d1b6      	bne.n	8002d8c <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e1e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002e22:	fa13 f382 	uxtah	r3, r3, r2
 8002e26:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 8002e2a:	293e      	cmp	r1, #62	; 0x3e
 8002e2c:	f67f af39 	bls.w	8002ca2 <PCD_EP_ISR_Handler+0xb4>
 8002e30:	094a      	lsrs	r2, r1, #5
 8002e32:	f011 0f1f 	tst.w	r1, #31
 8002e36:	d100      	bne.n	8002e3a <PCD_EP_ISR_Handler+0x24c>
 8002e38:	3a01      	subs	r2, #1
 8002e3a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002e3e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002e42:	b292      	uxth	r2, r2
 8002e44:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e48:	682a      	ldr	r2, [r5, #0]
 8002e4a:	8813      	ldrh	r3, [r2, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e56:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e62:	8013      	strh	r3, [r2, #0]
 8002e64:	e792      	b.n	8002d8c <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e66:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6e:	051b      	lsls	r3, r3, #20
 8002e70:	0d1b      	lsrs	r3, r3, #20
 8002e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e76:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8002e7a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002e7e:	00c9      	lsls	r1, r1, #3
 8002e80:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002e84:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8002e88:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002e8c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002e90:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d140      	bne.n	8002f1a <PCD_EP_ISR_Handler+0x32c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e98:	6828      	ldr	r0, [r5, #0]
 8002e9a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e9e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002ea2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002ea6:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8002eaa:	00d2      	lsls	r2, r2, #3
 8002eac:	fa12 f383 	uxtah	r3, r2, r3
 8002eb0:	4403      	add	r3, r0
 8002eb2:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8002eb6:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8002eba:	bb17      	cbnz	r7, 8002f02 <PCD_EP_ISR_Handler+0x314>
        ep->xfer_count += count;
 8002ebc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002ec0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002ec4:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002ec8:	443a      	add	r2, r7
 8002eca:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002ece:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002ed2:	443a      	add	r2, r7
 8002ed4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ed8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002edc:	b13b      	cbz	r3, 8002eee <PCD_EP_ISR_Handler+0x300>
 8002ede:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002ee2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002ee6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002eea:	429f      	cmp	r7, r3
 8002eec:	d270      	bcs.n	8002fd0 <PCD_EP_ISR_Handler+0x3e2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002eee:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002ef2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002ef6:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002efa:	4628      	mov	r0, r5
 8002efc:	f00e fb4c 	bl	8011598 <HAL_PCD_DataOutStageCallback>
 8002f00:	e6f3      	b.n	8002cea <PCD_EP_ISR_Handler+0xfc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f02:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002f06:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002f0a:	463b      	mov	r3, r7
 8002f0c:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8002f10:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002f14:	f004 fbae 	bl	8007674 <USB_ReadPMA>
 8002f18:	e7d0      	b.n	8002ebc <PCD_EP_ISR_Handler+0x2ce>
          if (ep->type == EP_TYPE_BULK)
 8002f1a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002f1e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002f22:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d033      	beq.n	8002f92 <PCD_EP_ISR_Handler+0x3a4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f2a:	6829      	ldr	r1, [r5, #0]
 8002f2c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002f30:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002f34:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8002f38:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f4e:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f52:	6828      	ldr	r0, [r5, #0]
 8002f54:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 8002f58:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002f5c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002f60:	d01e      	beq.n	8002fa0 <PCD_EP_ISR_Handler+0x3b2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f62:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	fa13 f382 	uxtah	r3, r3, r2
 8002f6c:	4403      	add	r3, r0
 8002f6e:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 8002f72:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8002f76:	2f00      	cmp	r7, #0
 8002f78:	d0a0      	beq.n	8002ebc <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f7a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002f7e:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002f82:	463b      	mov	r3, r7
 8002f84:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002f88:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002f8c:	f004 fb72 	bl	8007674 <USB_ReadPMA>
 8002f90:	e794      	b.n	8002ebc <PCD_EP_ISR_Handler+0x2ce>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f92:	4632      	mov	r2, r6
 8002f94:	4641      	mov	r1, r8
 8002f96:	4628      	mov	r0, r5
 8002f98:	f7ff fb00 	bl	800259c <HAL_PCD_EP_DB_Receive>
 8002f9c:	4607      	mov	r7, r0
 8002f9e:	e78d      	b.n	8002ebc <PCD_EP_ISR_Handler+0x2ce>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fa0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	fa13 f382 	uxtah	r3, r3, r2
 8002faa:	4403      	add	r3, r0
 8002fac:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8002fb0:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8002fb4:	2f00      	cmp	r7, #0
 8002fb6:	d081      	beq.n	8002ebc <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fb8:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002fbc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002fc0:	463b      	mov	r3, r7
 8002fc2:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002fc6:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002fca:	f004 fb53 	bl	8007674 <USB_ReadPMA>
 8002fce:	e775      	b.n	8002ebc <PCD_EP_ISR_Handler+0x2ce>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002fd0:	4641      	mov	r1, r8
 8002fd2:	6828      	ldr	r0, [r5, #0]
 8002fd4:	f003 ff9e 	bl	8006f14 <USB_EPStartXfer>
 8002fd8:	e687      	b.n	8002cea <PCD_EP_ISR_Handler+0xfc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	f47f aece 	bne.w	8002d7c <PCD_EP_ISR_Handler+0x18e>
 8002fe0:	682a      	ldr	r2, [r5, #0]
 8002fe2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002fe6:	fa12 f383 	uxtah	r3, r2, r3
 8002fea:	1c62      	adds	r2, r4, #1
 8002fec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ff0:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8002ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002ffe:	e6bd      	b.n	8002d7c <PCD_EP_ISR_Handler+0x18e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003000:	682a      	ldr	r2, [r5, #0]
 8003002:	1c63      	adds	r3, r4, #1
 8003004:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003008:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800300c:	785b      	ldrb	r3, [r3, #1]
 800300e:	b9e3      	cbnz	r3, 800304a <PCD_EP_ISR_Handler+0x45c>
 8003010:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003014:	fa12 f383 	uxtah	r3, r2, r3
 8003018:	1c62      	adds	r2, r4, #1
 800301a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800301e:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8003022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003026:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800302a:	b292      	uxth	r2, r2
 800302c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003030:	b292      	uxth	r2, r2
 8003032:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003036:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800303a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800303e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003042:	b292      	uxth	r2, r2
 8003044:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003048:	e698      	b.n	8002d7c <PCD_EP_ISR_Handler+0x18e>
 800304a:	2b01      	cmp	r3, #1
 800304c:	f47f ae96 	bne.w	8002d7c <PCD_EP_ISR_Handler+0x18e>
 8003050:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003054:	fa12 f383 	uxtah	r3, r2, r3
 8003058:	1c62      	adds	r2, r4, #1
 800305a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800305e:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8003062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003066:	2200      	movs	r2, #0
 8003068:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800306c:	e686      	b.n	8002d7c <PCD_EP_ISR_Handler+0x18e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 800306e:	f416 7f80 	tst.w	r6, #256	; 0x100
 8003072:	d13b      	bne.n	80030ec <PCD_EP_ISR_Handler+0x4fe>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003074:	6828      	ldr	r0, [r5, #0]
 8003076:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800307a:	1c62      	adds	r2, r4, #1
 800307c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003080:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 8003084:	00f2      	lsls	r2, r6, #3
 8003086:	fa12 f383 	uxtah	r3, r2, r3
 800308a:	4403      	add	r3, r0
 800308c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003090:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8003094:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003098:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800309c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800309e:	429a      	cmp	r2, r3
 80030a0:	d910      	bls.n	80030c4 <PCD_EP_ISR_Handler+0x4d6>
              ep->xfer_len -= TxPctSize;
 80030a2:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 80030a6:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 80030aa:	1ad2      	subs	r2, r2, r3
 80030ac:	643a      	str	r2, [r7, #64]	; 0x40
            if (ep->xfer_len == 0U)
 80030ae:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80030b2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80030b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030b8:	b95a      	cbnz	r2, 80030d2 <PCD_EP_ISR_Handler+0x4e4>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030ba:	4631      	mov	r1, r6
 80030bc:	4628      	mov	r0, r5
 80030be:	f00e fa77 	bl	80115b0 <HAL_PCD_DataInStageCallback>
 80030c2:	e663      	b.n	8002d8c <PCD_EP_ISR_Handler+0x19e>
              ep->xfer_len = 0U;
 80030c4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80030c8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80030cc:	2700      	movs	r7, #0
 80030ce:	6417      	str	r7, [r2, #64]	; 0x40
 80030d0:	e7ed      	b.n	80030ae <PCD_EP_ISR_Handler+0x4c0>
              ep->xfer_buff += TxPctSize;
 80030d2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80030d6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80030da:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 80030dc:	441e      	add	r6, r3
 80030de:	63d6      	str	r6, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 80030e0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80030e2:	4423      	add	r3, r4
 80030e4:	6453      	str	r3, [r2, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030e6:	f003 ff15 	bl	8006f14 <USB_EPStartXfer>
 80030ea:	e64f      	b.n	8002d8c <PCD_EP_ISR_Handler+0x19e>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80030ec:	4632      	mov	r2, r6
 80030ee:	4628      	mov	r0, r5
 80030f0:	f7ff fb75 	bl	80027de <HAL_PCD_EP_DB_Transmit>
 80030f4:	e64a      	b.n	8002d8c <PCD_EP_ISR_Handler+0x19e>
}
 80030f6:	2000      	movs	r0, #0
 80030f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080030fc <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80030fc:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8003100:	2b01      	cmp	r3, #1
 8003102:	d00d      	beq.n	8003120 <HAL_PCD_SetAddress+0x24>
{
 8003104:	b510      	push	{r4, lr}
 8003106:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003108:	2301      	movs	r3, #1
 800310a:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800310e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003112:	6800      	ldr	r0, [r0, #0]
 8003114:	f003 fed7 	bl	8006ec6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003118:	2000      	movs	r0, #0
 800311a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800311e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003120:	2002      	movs	r0, #2
}
 8003122:	4770      	bx	lr

08003124 <HAL_PCD_IRQHandler>:
{
 8003124:	b510      	push	{r4, lr}
 8003126:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003128:	6800      	ldr	r0, [r0, #0]
 800312a:	f003 fedd 	bl	8006ee8 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800312e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003132:	d123      	bne.n	800317c <HAL_PCD_IRQHandler+0x58>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003134:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8003138:	d124      	bne.n	8003184 <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800313a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800313e:	d132      	bne.n	80031a6 <HAL_PCD_IRQHandler+0x82>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003140:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8003144:	d139      	bne.n	80031ba <HAL_PCD_IRQHandler+0x96>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003146:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800314a:	d140      	bne.n	80031ce <HAL_PCD_IRQHandler+0xaa>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800314c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8003150:	d167      	bne.n	8003222 <HAL_PCD_IRQHandler+0xfe>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003152:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003156:	f040 8081 	bne.w	800325c <HAL_PCD_IRQHandler+0x138>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800315a:	f410 7f00 	tst.w	r0, #512	; 0x200
 800315e:	f040 80ad 	bne.w	80032bc <HAL_PCD_IRQHandler+0x198>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003162:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003166:	d027      	beq.n	80031b8 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003168:	6822      	ldr	r2, [r4, #0]
 800316a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800316e:	b29b      	uxth	r3, r3
 8003170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003174:	b29b      	uxth	r3, r3
 8003176:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 800317a:	e01d      	b.n	80031b8 <HAL_PCD_IRQHandler+0x94>
    (void)PCD_EP_ISR_Handler(hpcd);
 800317c:	4620      	mov	r0, r4
 800317e:	f7ff fd36 	bl	8002bee <PCD_EP_ISR_Handler>
    return;
 8003182:	e019      	b.n	80031b8 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003184:	6822      	ldr	r2, [r4, #0]
 8003186:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800318a:	b29b      	uxth	r3, r3
 800318c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003190:	b29b      	uxth	r3, r3
 8003192:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003196:	4620      	mov	r0, r4
 8003198:	f00e fa1b 	bl	80115d2 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800319c:	2100      	movs	r1, #0
 800319e:	4620      	mov	r0, r4
 80031a0:	f7ff ffac 	bl	80030fc <HAL_PCD_SetAddress>
    return;
 80031a4:	e008      	b.n	80031b8 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80031a6:	6822      	ldr	r2, [r4, #0]
 80031a8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80031b8:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80031ba:	6822      	ldr	r2, [r4, #0]
 80031bc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80031cc:	e7f4      	b.n	80031b8 <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80031ce:	6822      	ldr	r2, [r4, #0]
 80031d0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	f023 0304 	bic.w	r3, r3, #4
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80031e0:	6822      	ldr	r2, [r4, #0]
 80031e2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f023 0308 	bic.w	r3, r3, #8
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 80031f2:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d00c      	beq.n	8003214 <HAL_PCD_IRQHandler+0xf0>
    HAL_PCD_ResumeCallback(hpcd);
 80031fa:	4620      	mov	r0, r4
 80031fc:	f00e fa0c 	bl	8011618 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003200:	6822      	ldr	r2, [r4, #0]
 8003202:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003206:	b29b      	uxth	r3, r3
 8003208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800320c:	b29b      	uxth	r3, r3
 800320e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8003212:	e7d1      	b.n	80031b8 <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 8003214:	2100      	movs	r1, #0
 8003216:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800321a:	4620      	mov	r0, r4
 800321c:	f00e fab4 	bl	8011788 <HAL_PCDEx_LPM_Callback>
 8003220:	e7eb      	b.n	80031fa <HAL_PCD_IRQHandler+0xd6>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003222:	6822      	ldr	r2, [r4, #0]
 8003224:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003228:	b29b      	uxth	r3, r3
 800322a:	f043 0308 	orr.w	r3, r3, #8
 800322e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003232:	6822      	ldr	r2, [r4, #0]
 8003234:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003238:	b29b      	uxth	r3, r3
 800323a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800323e:	b29b      	uxth	r3, r3
 8003240:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003244:	6822      	ldr	r2, [r4, #0]
 8003246:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800324a:	b29b      	uxth	r3, r3
 800324c:	f043 0304 	orr.w	r3, r3, #4
 8003250:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8003254:	4620      	mov	r0, r4
 8003256:	f00e f9cf 	bl	80115f8 <HAL_PCD_SuspendCallback>
    return;
 800325a:	e7ad      	b.n	80031b8 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800325c:	6822      	ldr	r2, [r4, #0]
 800325e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003262:	b29b      	uxth	r3, r3
 8003264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003268:	b29b      	uxth	r3, r3
 800326a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800326e:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8003272:	b9fb      	cbnz	r3, 80032b4 <HAL_PCD_IRQHandler+0x190>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003274:	6822      	ldr	r2, [r4, #0]
 8003276:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800327a:	b29b      	uxth	r3, r3
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003284:	6822      	ldr	r2, [r4, #0]
 8003286:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800328a:	b29b      	uxth	r3, r3
 800328c:	f043 0308 	orr.w	r3, r3, #8
 8003290:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8003294:	2101      	movs	r1, #1
 8003296:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80032a0:	f3c3 038d 	ubfx	r3, r3, #2, #14
 80032a4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80032a8:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80032ac:	4620      	mov	r0, r4
 80032ae:	f00e fa6b 	bl	8011788 <HAL_PCDEx_LPM_Callback>
 80032b2:	e781      	b.n	80031b8 <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_SuspendCallback(hpcd);
 80032b4:	4620      	mov	r0, r4
 80032b6:	f00e f99f 	bl	80115f8 <HAL_PCD_SuspendCallback>
    return;
 80032ba:	e77d      	b.n	80031b8 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80032bc:	6822      	ldr	r2, [r4, #0]
 80032be:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80032ce:	4620      	mov	r0, r4
 80032d0:	f00e f979 	bl	80115c6 <HAL_PCD_SOFCallback>
    return;
 80032d4:	e770      	b.n	80031b8 <HAL_PCD_IRQHandler+0x94>

080032d6 <HAL_PCD_EP_Open>:
{
 80032d6:	b510      	push	{r4, lr}
 80032d8:	4604      	mov	r4, r0
 80032da:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80032dc:	f011 0f80 	tst.w	r1, #128	; 0x80
 80032e0:	d12a      	bne.n	8003338 <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e2:	f001 0007 	and.w	r0, r1, #7
 80032e6:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80032ea:	00c9      	lsls	r1, r1, #3
 80032ec:	f501 7eb4 	add.w	lr, r1, #360	; 0x168
 80032f0:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 80032f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032f8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80032fc:	f04f 0e00 	mov.w	lr, #0
 8003300:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003304:	f00c 0c07 	and.w	ip, ip, #7
 8003308:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 800330c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800330e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8003310:	784a      	ldrb	r2, [r1, #1]
 8003312:	b10a      	cbz	r2, 8003318 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8003314:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8003318:	2b02      	cmp	r3, #2
 800331a:	d019      	beq.n	8003350 <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 800331c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003320:	2b01      	cmp	r3, #1
 8003322:	d018      	beq.n	8003356 <HAL_PCD_EP_Open+0x80>
 8003324:	2301      	movs	r3, #1
 8003326:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800332a:	6820      	ldr	r0, [r4, #0]
 800332c:	f003 fa9e 	bl	800686c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003330:	2000      	movs	r0, #0
 8003332:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003336:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003338:	f001 0007 	and.w	r0, r1, #7
 800333c:	3001      	adds	r0, #1
 800333e:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8003342:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8003346:	f04f 0e01 	mov.w	lr, #1
 800334a:	f881 e001 	strb.w	lr, [r1, #1]
 800334e:	e7d9      	b.n	8003304 <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	710b      	strb	r3, [r1, #4]
 8003354:	e7e2      	b.n	800331c <HAL_PCD_EP_Open+0x46>
  __HAL_LOCK(hpcd);
 8003356:	2002      	movs	r0, #2
 8003358:	e7ed      	b.n	8003336 <HAL_PCD_EP_Open+0x60>

0800335a <HAL_PCD_EP_Close>:
{
 800335a:	b510      	push	{r4, lr}
 800335c:	4604      	mov	r4, r0
 800335e:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003360:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003364:	d11f      	bne.n	80033a6 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003366:	f001 0207 	and.w	r2, r1, #7
 800336a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800336e:	00c9      	lsls	r1, r1, #3
 8003370:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003374:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003376:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800337a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800337e:	2000      	movs	r0, #0
 8003380:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800338a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800338e:	2b01      	cmp	r3, #1
 8003390:	d013      	beq.n	80033ba <HAL_PCD_EP_Close+0x60>
 8003392:	2301      	movs	r3, #1
 8003394:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003398:	6820      	ldr	r0, [r4, #0]
 800339a:	f003 fc33 	bl	8006c04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800339e:	2000      	movs	r0, #0
 80033a0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80033a4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a6:	f001 0207 	and.w	r2, r1, #7
 80033aa:	3201      	adds	r2, #1
 80033ac:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80033b0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80033b4:	2001      	movs	r0, #1
 80033b6:	7048      	strb	r0, [r1, #1]
 80033b8:	e7e4      	b.n	8003384 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 80033ba:	2002      	movs	r0, #2
 80033bc:	e7f2      	b.n	80033a4 <HAL_PCD_EP_Close+0x4a>

080033be <HAL_PCD_EP_Receive>:
{
 80033be:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	f001 0407 	and.w	r4, r1, #7
 80033c4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80033c8:	00c9      	lsls	r1, r1, #3
 80033ca:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80033ce:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80033d0:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 80033d4:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80033d8:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 80033dc:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 80033e6:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ea:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033ee:	b924      	cbnz	r4, 80033fa <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80033f0:	6800      	ldr	r0, [r0, #0]
 80033f2:	f003 fd8f 	bl	8006f14 <USB_EPStartXfer>
}
 80033f6:	2000      	movs	r0, #0
 80033f8:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033fa:	6800      	ldr	r0, [r0, #0]
 80033fc:	f003 fd8a 	bl	8006f14 <USB_EPStartXfer>
 8003400:	e7f9      	b.n	80033f6 <HAL_PCD_EP_Receive+0x38>

08003402 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003402:	f001 0107 	and.w	r1, r1, #7
 8003406:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800340a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 800340e:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 8003412:	4770      	bx	lr

08003414 <HAL_PCD_EP_Transmit>:
{
 8003414:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003416:	f001 0407 	and.w	r4, r1, #7
 800341a:	f104 0c01 	add.w	ip, r4, #1
 800341e:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8003422:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8003426:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 800342a:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 800342e:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
  ep->xfer_len = len;
 8003432:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8003436:	2201      	movs	r2, #1
 8003438:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
  ep->xfer_len_db = len;
 800343c:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  ep->xfer_count = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
  ep->is_in = 1U;
 8003446:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003448:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800344c:	f800 403c 	strb.w	r4, [r0, ip, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003450:	b924      	cbnz	r4, 800345c <HAL_PCD_EP_Transmit+0x48>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003452:	6800      	ldr	r0, [r0, #0]
 8003454:	f003 fd5e 	bl	8006f14 <USB_EPStartXfer>
}
 8003458:	2000      	movs	r0, #0
 800345a:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800345c:	6800      	ldr	r0, [r0, #0]
 800345e:	f003 fd59 	bl	8006f14 <USB_EPStartXfer>
 8003462:	e7f9      	b.n	8003458 <HAL_PCD_EP_Transmit+0x44>

08003464 <HAL_PCD_EP_SetStall>:
{
 8003464:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003466:	f001 0207 	and.w	r2, r1, #7
 800346a:	6841      	ldr	r1, [r0, #4]
 800346c:	428a      	cmp	r2, r1
 800346e:	d82a      	bhi.n	80034c6 <HAL_PCD_EP_SetStall+0x62>
{
 8003470:	b510      	push	{r4, lr}
 8003472:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8003474:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003478:	d11d      	bne.n	80034b6 <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 800347a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800347e:	00c9      	lsls	r1, r1, #3
 8003480:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003484:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003486:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800348a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800348e:	2000      	movs	r0, #0
 8003490:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8003494:	2301      	movs	r3, #1
 8003496:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003498:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800349a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d013      	beq.n	80034ca <HAL_PCD_EP_SetStall+0x66>
 80034a2:	2301      	movs	r3, #1
 80034a4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034a8:	6820      	ldr	r0, [r4, #0]
 80034aa:	f003 fc96 	bl	8006dda <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80034ae:	2000      	movs	r0, #0
 80034b0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80034b4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b6:	1c53      	adds	r3, r2, #1
 80034b8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80034bc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80034c0:	2001      	movs	r0, #1
 80034c2:	7048      	strb	r0, [r1, #1]
 80034c4:	e7e6      	b.n	8003494 <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 80034c6:	2001      	movs	r0, #1
}
 80034c8:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80034ca:	2002      	movs	r0, #2
 80034cc:	e7f2      	b.n	80034b4 <HAL_PCD_EP_SetStall+0x50>

080034ce <HAL_PCD_EP_ClrStall>:
{
 80034ce:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034d0:	f001 010f 	and.w	r1, r1, #15
 80034d4:	6842      	ldr	r2, [r0, #4]
 80034d6:	4291      	cmp	r1, r2
 80034d8:	d830      	bhi.n	800353c <HAL_PCD_EP_ClrStall+0x6e>
{
 80034da:	b510      	push	{r4, lr}
 80034dc:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80034de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80034e2:	d121      	bne.n	8003528 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e4:	f003 0207 	and.w	r2, r3, #7
 80034e8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80034ec:	00c9      	lsls	r1, r1, #3
 80034ee:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80034f2:	4401      	add	r1, r0
    ep->is_in = 0U;
 80034f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80034f8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80034fc:	2000      	movs	r0, #0
 80034fe:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8003502:	2200      	movs	r2, #0
 8003504:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800350c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003510:	2b01      	cmp	r3, #1
 8003512:	d015      	beq.n	8003540 <HAL_PCD_EP_ClrStall+0x72>
 8003514:	2301      	movs	r3, #1
 8003516:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800351a:	6820      	ldr	r0, [r4, #0]
 800351c:	f003 fc82 	bl	8006e24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003520:	2000      	movs	r0, #0
 8003522:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003526:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003528:	f003 0207 	and.w	r2, r3, #7
 800352c:	3201      	adds	r2, #1
 800352e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003532:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003536:	2001      	movs	r0, #1
 8003538:	7048      	strb	r0, [r1, #1]
 800353a:	e7e2      	b.n	8003502 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 800353c:	2001      	movs	r0, #1
}
 800353e:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003540:	2002      	movs	r0, #2
 8003542:	e7f0      	b.n	8003526 <HAL_PCD_EP_ClrStall+0x58>

08003544 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003544:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003548:	d00b      	beq.n	8003562 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354a:	f001 0107 	and.w	r1, r1, #7
 800354e:	3101      	adds	r1, #1
 8003550:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003554:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003558:	b952      	cbnz	r2, 8003570 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800355a:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800355c:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800355e:	2000      	movs	r0, #0
 8003560:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8003562:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003566:	00c9      	lsls	r1, r1, #3
 8003568:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800356c:	4408      	add	r0, r1
 800356e:	e7f3      	b.n	8003558 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8003570:	2201      	movs	r2, #1
 8003572:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003574:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003576:	0c1b      	lsrs	r3, r3, #16
 8003578:	8143      	strh	r3, [r0, #10]
 800357a:	e7f0      	b.n	800355e <HAL_PCDEx_PMAConfig+0x1a>

0800357c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800357c:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 800357e:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 8003580:	2101      	movs	r1, #1
 8003582:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003586:	2000      	movs	r0, #0
 8003588:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800358c:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8003590:	b29b      	uxth	r3, r3
 8003592:	430b      	orrs	r3, r1
 8003594:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003598:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800359c:	b29b      	uxth	r3, r3
 800359e:	f043 0302 	orr.w	r3, r3, #2
 80035a2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80035a6:	4770      	bx	lr

080035a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035a8:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80035aa:	4604      	mov	r4, r0
 80035ac:	b128      	cbz	r0, 80035ba <HAL_PWREx_ControlVoltageScaling+0x12>
 80035ae:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80035b2:	d002      	beq.n	80035ba <HAL_PWREx_ControlVoltageScaling+0x12>
 80035b4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80035b8:	d111      	bne.n	80035de <HAL_PWREx_ControlVoltageScaling+0x36>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035ba:	2c00      	cmp	r4, #0
 80035bc:	d13b      	bne.n	8003636 <HAL_PWREx_ControlVoltageScaling+0x8e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ca:	d00d      	beq.n	80035e8 <HAL_PWREx_ControlVoltageScaling+0x40>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035cc:	4a3d      	ldr	r2, [pc, #244]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 80035ce:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80035d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80035da:	2000      	movs	r0, #0
}
 80035dc:	bd10      	pop	{r4, pc}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80035de:	219d      	movs	r1, #157	; 0x9d
 80035e0:	4839      	ldr	r0, [pc, #228]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0x120>)
 80035e2:	f7fd fb44 	bl	8000c6e <assert_failed>
 80035e6:	e7e8      	b.n	80035ba <HAL_PWREx_ControlVoltageScaling+0x12>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035e8:	4a36      	ldr	r2, [pc, #216]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 80035ea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80035ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035f6:	6813      	ldr	r3, [r2, #0]
 80035f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003600:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003602:	4b32      	ldr	r3, [pc, #200]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0x124>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2232      	movs	r2, #50	; 0x32
 8003608:	fb02 f303 	mul.w	r3, r2, r3
 800360c:	4a30      	ldr	r2, [pc, #192]	; (80036d0 <HAL_PWREx_ControlVoltageScaling+0x128>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	0c9b      	lsrs	r3, r3, #18
 8003614:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003616:	e000      	b.n	800361a <HAL_PWREx_ControlVoltageScaling+0x72>
        wait_loop_index--;
 8003618:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800361a:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800361c:	6952      	ldr	r2, [r2, #20]
 800361e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003622:	d001      	beq.n	8003628 <HAL_PWREx_ControlVoltageScaling+0x80>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f7      	bne.n	8003618 <HAL_PWREx_ControlVoltageScaling+0x70>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003628:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003630:	d144      	bne.n	80036bc <HAL_PWREx_ControlVoltageScaling+0x114>
  return HAL_OK;
 8003632:	2000      	movs	r0, #0
 8003634:	e7d2      	b.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x34>
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003636:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800363a:	d008      	beq.n	800364e <HAL_PWREx_ControlVoltageScaling+0xa6>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800363c:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800363e:	6813      	ldr	r3, [r2, #0]
 8003640:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003644:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003648:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800364a:	2000      	movs	r0, #0
 800364c:	e7c6      	b.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365a:	d008      	beq.n	800366e <HAL_PWREx_ControlVoltageScaling+0xc6>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800365c:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 800365e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003666:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 800366a:	2000      	movs	r0, #0
 800366c:	e7b6      	b.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x34>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800366e:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 8003670:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003678:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003686:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003688:	4b10      	ldr	r3, [pc, #64]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0x124>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2232      	movs	r2, #50	; 0x32
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	4a0f      	ldr	r2, [pc, #60]	; (80036d0 <HAL_PWREx_ControlVoltageScaling+0x128>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	0c9b      	lsrs	r3, r3, #18
 800369a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369c:	e000      	b.n	80036a0 <HAL_PWREx_ControlVoltageScaling+0xf8>
        wait_loop_index--;
 800369e:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036a0:	4a08      	ldr	r2, [pc, #32]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 80036a2:	6952      	ldr	r2, [r2, #20]
 80036a4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80036a8:	d001      	beq.n	80036ae <HAL_PWREx_ControlVoltageScaling+0x106>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f7      	bne.n	800369e <HAL_PWREx_ControlVoltageScaling+0xf6>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0x11c>)
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80036b6:	d103      	bne.n	80036c0 <HAL_PWREx_ControlVoltageScaling+0x118>
  return HAL_OK;
 80036b8:	2000      	movs	r0, #0
 80036ba:	e78f      	b.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 80036bc:	2003      	movs	r0, #3
 80036be:	e78d      	b.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 80036c0:	2003      	movs	r0, #3
 80036c2:	e78b      	b.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x34>
 80036c4:	40007000 	.word	0x40007000
 80036c8:	08012f9c 	.word	0x08012f9c
 80036cc:	20000000 	.word	0x20000000
 80036d0:	431bde83 	.word	0x431bde83

080036d4 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036e2:	3301      	adds	r3, #1

  switch (pllsource)
 80036e4:	2a03      	cmp	r2, #3
 80036e6:	d011      	beq.n	800370c <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e8:	480e      	ldr	r0, [pc, #56]	; (8003724 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 80036ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80036ee:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80036f6:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003702:	3301      	adds	r3, #1
 8003704:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8003706:	fbb0 f0f3 	udiv	r0, r0, r3
 800370a:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800370c:	4805      	ldr	r0, [pc, #20]	; (8003724 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 800370e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003712:	4b03      	ldr	r3, [pc, #12]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800371a:	fb03 f000 	mul.w	r0, r3, r0
    break;
 800371e:	e7ec      	b.n	80036fa <RCC_GetSysClockFreqFromPLLSource+0x26>
 8003720:	40021000 	.word	0x40021000
 8003724:	00f42400 	.word	0x00f42400

08003728 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003728:	2800      	cmp	r0, #0
 800372a:	f000 8301 	beq.w	8003d30 <HAL_RCC_OscConfig+0x608>
{
 800372e:	b570      	push	{r4, r5, r6, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003734:	6803      	ldr	r3, [r0, #0]
 8003736:	b113      	cbz	r3, 800373e <HAL_RCC_OscConfig+0x16>
 8003738:	f013 0f2f 	tst.w	r3, #47	; 0x2f
 800373c:	d038      	beq.n	80037b0 <HAL_RCC_OscConfig+0x88>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	f013 0f01 	tst.w	r3, #1
 8003744:	d04b      	beq.n	80037de <HAL_RCC_OscConfig+0xb6>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003746:	6863      	ldr	r3, [r4, #4]
 8003748:	b12b      	cbz	r3, 8003756 <HAL_RCC_OscConfig+0x2e>
 800374a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374e:	d002      	beq.n	8003756 <HAL_RCC_OscConfig+0x2e>
 8003750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003754:	d132      	bne.n	80037bc <HAL_RCC_OscConfig+0x94>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003756:	4a8b      	ldr	r2, [pc, #556]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 8003758:	6893      	ldr	r3, [r2, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800375e:	68d2      	ldr	r2, [r2, #12]
 8003760:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003764:	2b0c      	cmp	r3, #12
 8003766:	d02f      	beq.n	80037c8 <HAL_RCC_OscConfig+0xa0>
 8003768:	2b08      	cmp	r3, #8
 800376a:	d02f      	beq.n	80037cc <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376c:	6863      	ldr	r3, [r4, #4]
 800376e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003772:	d063      	beq.n	800383c <HAL_RCC_OscConfig+0x114>
 8003774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003778:	d066      	beq.n	8003848 <HAL_RCC_OscConfig+0x120>
 800377a:	4b82      	ldr	r3, [pc, #520]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800378a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800378c:	6863      	ldr	r3, [r4, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d067      	beq.n	8003862 <HAL_RCC_OscConfig+0x13a>
        tickstart = HAL_GetTick();
 8003792:	f7fd fd03 	bl	800119c <HAL_GetTick>
 8003796:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003798:	4b7a      	ldr	r3, [pc, #488]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037a0:	d11d      	bne.n	80037de <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a2:	f7fd fcfb 	bl	800119c <HAL_GetTick>
 80037a6:	1b40      	subs	r0, r0, r5
 80037a8:	2864      	cmp	r0, #100	; 0x64
 80037aa:	d9f5      	bls.n	8003798 <HAL_RCC_OscConfig+0x70>
            return HAL_TIMEOUT;
 80037ac:	2003      	movs	r0, #3
 80037ae:	e2c8      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80037b0:	f240 1145 	movw	r1, #325	; 0x145
 80037b4:	4874      	ldr	r0, [pc, #464]	; (8003988 <HAL_RCC_OscConfig+0x260>)
 80037b6:	f7fd fa5a 	bl	8000c6e <assert_failed>
 80037ba:	e7c0      	b.n	800373e <HAL_RCC_OscConfig+0x16>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80037bc:	f240 114b 	movw	r1, #331	; 0x14b
 80037c0:	4871      	ldr	r0, [pc, #452]	; (8003988 <HAL_RCC_OscConfig+0x260>)
 80037c2:	f7fd fa54 	bl	8000c6e <assert_failed>
 80037c6:	e7c6      	b.n	8003756 <HAL_RCC_OscConfig+0x2e>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037c8:	2a03      	cmp	r2, #3
 80037ca:	d1cd      	bne.n	8003768 <HAL_RCC_OscConfig+0x40>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	4b6d      	ldr	r3, [pc, #436]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037d4:	d003      	beq.n	80037de <HAL_RCC_OscConfig+0xb6>
 80037d6:	6863      	ldr	r3, [r4, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 82ab 	beq.w	8003d34 <HAL_RCC_OscConfig+0x60c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	f013 0f02 	tst.w	r3, #2
 80037e4:	d072      	beq.n	80038cc <HAL_RCC_OscConfig+0x1a4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80037e6:	68e3      	ldr	r3, [r4, #12]
 80037e8:	b113      	cbz	r3, 80037f0 <HAL_RCC_OscConfig+0xc8>
 80037ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ee:	d147      	bne.n	8003880 <HAL_RCC_OscConfig+0x158>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80037f0:	6923      	ldr	r3, [r4, #16]
 80037f2:	2b7f      	cmp	r3, #127	; 0x7f
 80037f4:	d84a      	bhi.n	800388c <HAL_RCC_OscConfig+0x164>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f6:	4a63      	ldr	r2, [pc, #396]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 80037f8:	6893      	ldr	r3, [r2, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037fe:	68d2      	ldr	r2, [r2, #12]
 8003800:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003804:	2b0c      	cmp	r3, #12
 8003806:	d047      	beq.n	8003898 <HAL_RCC_OscConfig+0x170>
 8003808:	2b04      	cmp	r3, #4
 800380a:	d047      	beq.n	800389c <HAL_RCC_OscConfig+0x174>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800380c:	68e3      	ldr	r3, [r4, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 8086 	beq.w	8003920 <HAL_RCC_OscConfig+0x1f8>
        __HAL_RCC_HSI_ENABLE();
 8003814:	4a5b      	ldr	r2, [pc, #364]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800381e:	f7fd fcbd 	bl	800119c <HAL_GetTick>
 8003822:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003824:	4b57      	ldr	r3, [pc, #348]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800382c:	d16f      	bne.n	800390e <HAL_RCC_OscConfig+0x1e6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382e:	f7fd fcb5 	bl	800119c <HAL_GetTick>
 8003832:	1b40      	subs	r0, r0, r5
 8003834:	2802      	cmp	r0, #2
 8003836:	d9f5      	bls.n	8003824 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8003838:	2003      	movs	r0, #3
 800383a:	e282      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800383c:	4a51      	ldr	r2, [pc, #324]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 800383e:	6813      	ldr	r3, [r2, #0]
 8003840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	e7a1      	b.n	800378c <HAL_RCC_OscConfig+0x64>
 8003848:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800384c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e794      	b.n	800378c <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
 8003862:	f7fd fc9b 	bl	800119c <HAL_GetTick>
 8003866:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003868:	4b46      	ldr	r3, [pc, #280]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003870:	d0b5      	beq.n	80037de <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003872:	f7fd fc93 	bl	800119c <HAL_GetTick>
 8003876:	1b40      	subs	r0, r0, r5
 8003878:	2864      	cmp	r0, #100	; 0x64
 800387a:	d9f5      	bls.n	8003868 <HAL_RCC_OscConfig+0x140>
            return HAL_TIMEOUT;
 800387c:	2003      	movs	r0, #3
 800387e:	e260      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003880:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8003884:	4840      	ldr	r0, [pc, #256]	; (8003988 <HAL_RCC_OscConfig+0x260>)
 8003886:	f7fd f9f2 	bl	8000c6e <assert_failed>
 800388a:	e7b1      	b.n	80037f0 <HAL_RCC_OscConfig+0xc8>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800388c:	f240 1181 	movw	r1, #385	; 0x181
 8003890:	483d      	ldr	r0, [pc, #244]	; (8003988 <HAL_RCC_OscConfig+0x260>)
 8003892:	f7fd f9ec 	bl	8000c6e <assert_failed>
 8003896:	e7ae      	b.n	80037f6 <HAL_RCC_OscConfig+0xce>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003898:	2a02      	cmp	r2, #2
 800389a:	d1b5      	bne.n	8003808 <HAL_RCC_OscConfig+0xe0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800389c:	4b39      	ldr	r3, [pc, #228]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_OscConfig+0x186>
 80038a6:	68e3      	ldr	r3, [r4, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8245 	beq.w	8003d38 <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ae:	4a35      	ldr	r2, [pc, #212]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 80038b0:	6853      	ldr	r3, [r2, #4]
 80038b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80038b6:	6921      	ldr	r1, [r4, #16]
 80038b8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80038bc:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038be:	4b33      	ldr	r3, [pc, #204]	; (800398c <HAL_RCC_OscConfig+0x264>)
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	f7fd fa89 	bl	8000dd8 <HAL_InitTick>
 80038c6:	2800      	cmp	r0, #0
 80038c8:	f040 8238 	bne.w	8003d3c <HAL_RCC_OscConfig+0x614>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	f013 0f08 	tst.w	r3, #8
 80038d2:	d05d      	beq.n	8003990 <HAL_RCC_OscConfig+0x268>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80038d4:	6963      	ldr	r3, [r4, #20]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d836      	bhi.n	8003948 <HAL_RCC_OscConfig+0x220>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038da:	6963      	ldr	r3, [r4, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d039      	beq.n	8003954 <HAL_RCC_OscConfig+0x22c>
      __HAL_RCC_LSI_ENABLE();
 80038e0:	4a28      	ldr	r2, [pc, #160]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 80038e2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80038ee:	f7fd fc55 	bl	800119c <HAL_GetTick>
 80038f2:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038f4:	4b23      	ldr	r3, [pc, #140]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 80038f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fa:	f013 0f02 	tst.w	r3, #2
 80038fe:	d147      	bne.n	8003990 <HAL_RCC_OscConfig+0x268>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003900:	f7fd fc4c 	bl	800119c <HAL_GetTick>
 8003904:	1b40      	subs	r0, r0, r5
 8003906:	2802      	cmp	r0, #2
 8003908:	d9f4      	bls.n	80038f4 <HAL_RCC_OscConfig+0x1cc>
          return HAL_TIMEOUT;
 800390a:	2003      	movs	r0, #3
 800390c:	e219      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390e:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 8003910:	6853      	ldr	r3, [r2, #4]
 8003912:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003916:	6921      	ldr	r1, [r4, #16]
 8003918:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800391c:	6053      	str	r3, [r2, #4]
 800391e:	e7d5      	b.n	80038cc <HAL_RCC_OscConfig+0x1a4>
        __HAL_RCC_HSI_DISABLE();
 8003920:	4a18      	ldr	r2, [pc, #96]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 8003922:	6813      	ldr	r3, [r2, #0]
 8003924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003928:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800392a:	f7fd fc37 	bl	800119c <HAL_GetTick>
 800392e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003930:	4b14      	ldr	r3, [pc, #80]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003938:	d0c8      	beq.n	80038cc <HAL_RCC_OscConfig+0x1a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393a:	f7fd fc2f 	bl	800119c <HAL_GetTick>
 800393e:	1b40      	subs	r0, r0, r5
 8003940:	2802      	cmp	r0, #2
 8003942:	d9f5      	bls.n	8003930 <HAL_RCC_OscConfig+0x208>
            return HAL_TIMEOUT;
 8003944:	2003      	movs	r0, #3
 8003946:	e1fc      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003948:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800394c:	480e      	ldr	r0, [pc, #56]	; (8003988 <HAL_RCC_OscConfig+0x260>)
 800394e:	f7fd f98e 	bl	8000c6e <assert_failed>
 8003952:	e7c2      	b.n	80038da <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_LSI_DISABLE();
 8003954:	4a0b      	ldr	r2, [pc, #44]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 8003956:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003962:	f7fd fc1b 	bl	800119c <HAL_GetTick>
 8003966:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003968:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_RCC_OscConfig+0x25c>)
 800396a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396e:	f013 0f02 	tst.w	r3, #2
 8003972:	d00d      	beq.n	8003990 <HAL_RCC_OscConfig+0x268>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003974:	f7fd fc12 	bl	800119c <HAL_GetTick>
 8003978:	1b40      	subs	r0, r0, r5
 800397a:	2802      	cmp	r0, #2
 800397c:	d9f4      	bls.n	8003968 <HAL_RCC_OscConfig+0x240>
          return HAL_TIMEOUT;
 800397e:	2003      	movs	r0, #3
 8003980:	e1df      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	08012fd8 	.word	0x08012fd8
 800398c:	20000008 	.word	0x20000008
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	f013 0f04 	tst.w	r3, #4
 8003996:	f000 8086 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x37e>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800399a:	68a3      	ldr	r3, [r4, #8]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x27c>
 80039a0:	2b05      	cmp	r3, #5
 80039a2:	d13b      	bne.n	8003a1c <HAL_RCC_OscConfig+0x2f4>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039a4:	4b9e      	ldr	r3, [pc, #632]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80039ac:	d13c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x300>
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	4b9c      	ldr	r3, [pc, #624]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 80039b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039b6:	659a      	str	r2, [r3, #88]	; 0x58
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80039c2:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c4:	4b97      	ldr	r3, [pc, #604]	; (8003c24 <HAL_RCC_OscConfig+0x4fc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039cc:	d02e      	beq.n	8003a2c <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ce:	68a3      	ldr	r3, [r4, #8]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d03f      	beq.n	8003a54 <HAL_RCC_OscConfig+0x32c>
 80039d4:	2b05      	cmp	r3, #5
 80039d6:	d045      	beq.n	8003a64 <HAL_RCC_OscConfig+0x33c>
 80039d8:	4b91      	ldr	r3, [pc, #580]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 80039da:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80039e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80039ea:	f022 0204 	bic.w	r2, r2, #4
 80039ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039f2:	68a3      	ldr	r3, [r4, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d043      	beq.n	8003a80 <HAL_RCC_OscConfig+0x358>
      tickstart = HAL_GetTick();
 80039f8:	f7fd fbd0 	bl	800119c <HAL_GetTick>
 80039fc:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039fe:	4b88      	ldr	r3, [pc, #544]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a04:	f013 0f02 	tst.w	r3, #2
 8003a08:	d14c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0a:	f7fd fbc7 	bl	800119c <HAL_GetTick>
 8003a0e:	1b80      	subs	r0, r0, r6
 8003a10:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a14:	4298      	cmp	r0, r3
 8003a16:	d9f2      	bls.n	80039fe <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 8003a18:	2003      	movs	r0, #3
 8003a1a:	e192      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003a1c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003a20:	4881      	ldr	r0, [pc, #516]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003a22:	f7fd f924 	bl	8000c6e <assert_failed>
 8003a26:	e7bd      	b.n	80039a4 <HAL_RCC_OscConfig+0x27c>
    FlagStatus       pwrclkchanged = RESET;
 8003a28:	2500      	movs	r5, #0
 8003a2a:	e7cb      	b.n	80039c4 <HAL_RCC_OscConfig+0x29c>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a2c:	4a7d      	ldr	r2, [pc, #500]	; (8003c24 <HAL_RCC_OscConfig+0x4fc>)
 8003a2e:	6813      	ldr	r3, [r2, #0]
 8003a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a34:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003a36:	f7fd fbb1 	bl	800119c <HAL_GetTick>
 8003a3a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a3c:	4b79      	ldr	r3, [pc, #484]	; (8003c24 <HAL_RCC_OscConfig+0x4fc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a44:	d1c3      	bne.n	80039ce <HAL_RCC_OscConfig+0x2a6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fd fba9 	bl	800119c <HAL_GetTick>
 8003a4a:	1b80      	subs	r0, r0, r6
 8003a4c:	2802      	cmp	r0, #2
 8003a4e:	d9f5      	bls.n	8003a3c <HAL_RCC_OscConfig+0x314>
          return HAL_TIMEOUT;
 8003a50:	2003      	movs	r0, #3
 8003a52:	e176      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a54:	4a72      	ldr	r2, [pc, #456]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 8003a56:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a62:	e7c6      	b.n	80039f2 <HAL_RCC_OscConfig+0x2ca>
 8003a64:	4b6e      	ldr	r3, [pc, #440]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 8003a66:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a6a:	f042 0204 	orr.w	r2, r2, #4
 8003a6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003a72:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003a7e:	e7b8      	b.n	80039f2 <HAL_RCC_OscConfig+0x2ca>
      tickstart = HAL_GetTick();
 8003a80:	f7fd fb8c 	bl	800119c <HAL_GetTick>
 8003a84:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a86:	4b66      	ldr	r3, [pc, #408]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	f013 0f02 	tst.w	r3, #2
 8003a90:	d008      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7fd fb83 	bl	800119c <HAL_GetTick>
 8003a96:	1b80      	subs	r0, r0, r6
 8003a98:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a9c:	4298      	cmp	r0, r3
 8003a9e:	d9f2      	bls.n	8003a86 <HAL_RCC_OscConfig+0x35e>
          return HAL_TIMEOUT;
 8003aa0:	2003      	movs	r0, #3
 8003aa2:	e14e      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
    if (pwrclkchanged == SET)
 8003aa4:	b9fd      	cbnz	r5, 8003ae6 <HAL_RCC_OscConfig+0x3be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	f013 0f20 	tst.w	r3, #32
 8003aac:	d03e      	beq.n	8003b2c <HAL_RCC_OscConfig+0x404>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003aae:	69a3      	ldr	r3, [r4, #24]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d81e      	bhi.n	8003af2 <HAL_RCC_OscConfig+0x3ca>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ab4:	69a3      	ldr	r3, [r4, #24]
 8003ab6:	b313      	cbz	r3, 8003afe <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSI48_ENABLE();
 8003ab8:	4a59      	ldr	r2, [pc, #356]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 8003aba:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003ac6:	f7fd fb69 	bl	800119c <HAL_GetTick>
 8003aca:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003acc:	4b54      	ldr	r3, [pc, #336]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 8003ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ad2:	f013 0f02 	tst.w	r3, #2
 8003ad6:	d129      	bne.n	8003b2c <HAL_RCC_OscConfig+0x404>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ad8:	f7fd fb60 	bl	800119c <HAL_GetTick>
 8003adc:	1b40      	subs	r0, r0, r5
 8003ade:	2802      	cmp	r0, #2
 8003ae0:	d9f4      	bls.n	8003acc <HAL_RCC_OscConfig+0x3a4>
          return HAL_TIMEOUT;
 8003ae2:	2003      	movs	r0, #3
 8003ae4:	e12d      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae6:	4a4e      	ldr	r2, [pc, #312]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 8003ae8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aee:	6593      	str	r3, [r2, #88]	; 0x58
 8003af0:	e7d9      	b.n	8003aa6 <HAL_RCC_OscConfig+0x37e>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003af2:	f240 213b 	movw	r1, #571	; 0x23b
 8003af6:	484c      	ldr	r0, [pc, #304]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003af8:	f7fd f8b9 	bl	8000c6e <assert_failed>
 8003afc:	e7da      	b.n	8003ab4 <HAL_RCC_OscConfig+0x38c>
      __HAL_RCC_HSI48_DISABLE();
 8003afe:	4a48      	ldr	r2, [pc, #288]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 8003b00:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003b0c:	f7fd fb46 	bl	800119c <HAL_GetTick>
 8003b10:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b12:	4b43      	ldr	r3, [pc, #268]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 8003b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b18:	f013 0f02 	tst.w	r3, #2
 8003b1c:	d006      	beq.n	8003b2c <HAL_RCC_OscConfig+0x404>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b1e:	f7fd fb3d 	bl	800119c <HAL_GetTick>
 8003b22:	1b40      	subs	r0, r0, r5
 8003b24:	2802      	cmp	r0, #2
 8003b26:	d9f4      	bls.n	8003b12 <HAL_RCC_OscConfig+0x3ea>
          return HAL_TIMEOUT;
 8003b28:	2003      	movs	r0, #3
 8003b2a:	e10a      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003b2c:	69e3      	ldr	r3, [r4, #28]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d84b      	bhi.n	8003bca <HAL_RCC_OscConfig+0x4a2>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b32:	69e3      	ldr	r3, [r4, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8103 	beq.w	8003d40 <HAL_RCC_OscConfig+0x618>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b3a:	4a39      	ldr	r2, [pc, #228]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 8003b3c:	6892      	ldr	r2, [r2, #8]
 8003b3e:	f002 020c 	and.w	r2, r2, #12
 8003b42:	2a0c      	cmp	r2, #12
 8003b44:	f000 80c6 	beq.w	8003cd4 <HAL_RCC_OscConfig+0x5ac>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	f040 80a3 	bne.w	8003c94 <HAL_RCC_OscConfig+0x56c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003b4e:	6a23      	ldr	r3, [r4, #32]
 8003b50:	b11b      	cbz	r3, 8003b5a <HAL_RCC_OscConfig+0x432>
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d001      	beq.n	8003b5a <HAL_RCC_OscConfig+0x432>
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d13d      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x4ae>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	2b0f      	cmp	r3, #15
 8003b60:	d83f      	bhi.n	8003be2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003b62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b64:	3b08      	subs	r3, #8
 8003b66:	2b77      	cmp	r3, #119	; 0x77
 8003b68:	d841      	bhi.n	8003bee <HAL_RCC_OscConfig+0x4c6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003b6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b6c:	3b02      	subs	r3, #2
 8003b6e:	2b1d      	cmp	r3, #29
 8003b70:	d843      	bhi.n	8003bfa <HAL_RCC_OscConfig+0x4d2>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003b72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d008      	beq.n	8003b8a <HAL_RCC_OscConfig+0x462>
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d844      	bhi.n	8003c06 <HAL_RCC_OscConfig+0x4de>
 8003b7c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
 8003b84:	f013 0f01 	tst.w	r3, #1
 8003b88:	d03d      	beq.n	8003c06 <HAL_RCC_OscConfig+0x4de>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x47a>
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d83e      	bhi.n	8003c12 <HAL_RCC_OscConfig+0x4ea>
 8003b94:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9c:	f013 0f01 	tst.w	r3, #1
 8003ba0:	d037      	beq.n	8003c12 <HAL_RCC_OscConfig+0x4ea>
        __HAL_RCC_PLL_DISABLE();
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 8003ba4:	6813      	ldr	r3, [r2, #0]
 8003ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003baa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003bac:	f7fd faf6 	bl	800119c <HAL_GetTick>
 8003bb0:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb2:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <HAL_RCC_OscConfig+0x4f8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003bba:	d037      	beq.n	8003c2c <HAL_RCC_OscConfig+0x504>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fd faee 	bl	800119c <HAL_GetTick>
 8003bc0:	1b40      	subs	r0, r0, r5
 8003bc2:	2802      	cmp	r0, #2
 8003bc4:	d9f5      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x48a>
            return HAL_TIMEOUT;
 8003bc6:	2003      	movs	r0, #3
 8003bc8:	e0bb      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003bca:	f44f 7119 	mov.w	r1, #612	; 0x264
 8003bce:	4816      	ldr	r0, [pc, #88]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003bd0:	f7fd f84d 	bl	8000c6e <assert_failed>
 8003bd4:	e7ad      	b.n	8003b32 <HAL_RCC_OscConfig+0x40a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003bd6:	f240 216e 	movw	r1, #622	; 0x26e
 8003bda:	4813      	ldr	r0, [pc, #76]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003bdc:	f7fd f847 	bl	8000c6e <assert_failed>
 8003be0:	e7bb      	b.n	8003b5a <HAL_RCC_OscConfig+0x432>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003be2:	f240 216f 	movw	r1, #623	; 0x26f
 8003be6:	4810      	ldr	r0, [pc, #64]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003be8:	f7fd f841 	bl	8000c6e <assert_failed>
 8003bec:	e7b9      	b.n	8003b62 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003bee:	f44f 711c 	mov.w	r1, #624	; 0x270
 8003bf2:	480d      	ldr	r0, [pc, #52]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003bf4:	f7fd f83b 	bl	8000c6e <assert_failed>
 8003bf8:	e7b7      	b.n	8003b6a <HAL_RCC_OscConfig+0x442>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003bfa:	f240 2171 	movw	r1, #625	; 0x271
 8003bfe:	480a      	ldr	r0, [pc, #40]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003c00:	f7fd f835 	bl	8000c6e <assert_failed>
 8003c04:	e7b5      	b.n	8003b72 <HAL_RCC_OscConfig+0x44a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003c06:	f240 2172 	movw	r1, #626	; 0x272
 8003c0a:	4807      	ldr	r0, [pc, #28]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003c0c:	f7fd f82f 	bl	8000c6e <assert_failed>
 8003c10:	e7bb      	b.n	8003b8a <HAL_RCC_OscConfig+0x462>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003c12:	f240 2173 	movw	r1, #627	; 0x273
 8003c16:	4804      	ldr	r0, [pc, #16]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003c18:	f7fd f829 	bl	8000c6e <assert_failed>
 8003c1c:	e7c1      	b.n	8003ba2 <HAL_RCC_OscConfig+0x47a>
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40007000 	.word	0x40007000
 8003c28:	08012fd8 	.word	0x08012fd8
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c2c:	4a4d      	ldr	r2, [pc, #308]	; (8003d64 <HAL_RCC_OscConfig+0x63c>)
 8003c2e:	68d3      	ldr	r3, [r2, #12]
 8003c30:	494d      	ldr	r1, [pc, #308]	; (8003d68 <HAL_RCC_OscConfig+0x640>)
 8003c32:	4019      	ands	r1, r3
 8003c34:	6a23      	ldr	r3, [r4, #32]
 8003c36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c38:	3801      	subs	r0, #1
 8003c3a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003c3e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003c40:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003c44:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003c46:	0840      	lsrs	r0, r0, #1
 8003c48:	3801      	subs	r0, #1
 8003c4a:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8003c4e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003c50:	0840      	lsrs	r0, r0, #1
 8003c52:	3801      	subs	r0, #1
 8003c54:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8003c58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003c5a:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8003c5e:	4319      	orrs	r1, r3
 8003c60:	60d1      	str	r1, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8003c62:	6813      	ldr	r3, [r2, #0]
 8003c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c68:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c6a:	68d3      	ldr	r3, [r2, #12]
 8003c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c70:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003c72:	f7fd fa93 	bl	800119c <HAL_GetTick>
 8003c76:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c78:	4b3a      	ldr	r3, [pc, #232]	; (8003d64 <HAL_RCC_OscConfig+0x63c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c80:	d106      	bne.n	8003c90 <HAL_RCC_OscConfig+0x568>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c82:	f7fd fa8b 	bl	800119c <HAL_GetTick>
 8003c86:	1b00      	subs	r0, r0, r4
 8003c88:	2802      	cmp	r0, #2
 8003c8a:	d9f5      	bls.n	8003c78 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8003c8c:	2003      	movs	r0, #3
 8003c8e:	e058      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 8003c90:	2000      	movs	r0, #0
 8003c92:	e056      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_PLL_DISABLE();
 8003c94:	4b33      	ldr	r3, [pc, #204]	; (8003d64 <HAL_RCC_OscConfig+0x63c>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003c9c:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	f022 0203 	bic.w	r2, r2, #3
 8003ca4:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8003cac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003cb0:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8003cb2:	f7fd fa73 	bl	800119c <HAL_GetTick>
 8003cb6:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb8:	4b2a      	ldr	r3, [pc, #168]	; (8003d64 <HAL_RCC_OscConfig+0x63c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003cc0:	d006      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x5a8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc2:	f7fd fa6b 	bl	800119c <HAL_GetTick>
 8003cc6:	1b00      	subs	r0, r0, r4
 8003cc8:	2802      	cmp	r0, #2
 8003cca:	d9f5      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 8003ccc:	2003      	movs	r0, #3
 8003cce:	e038      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	e036      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d036      	beq.n	8003d46 <HAL_RCC_OscConfig+0x61e>
      temp_pllckcfg = RCC->PLLCFGR;
 8003cd8:	4b22      	ldr	r3, [pc, #136]	; (8003d64 <HAL_RCC_OscConfig+0x63c>)
 8003cda:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cdc:	f003 0103 	and.w	r1, r3, #3
 8003ce0:	6a22      	ldr	r2, [r4, #32]
 8003ce2:	4291      	cmp	r1, r2
 8003ce4:	d131      	bne.n	8003d4a <HAL_RCC_OscConfig+0x622>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ce6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003cec:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cee:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003cf2:	d12c      	bne.n	8003d4e <HAL_RCC_OscConfig+0x626>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cf4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cf8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cfa:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003cfe:	d128      	bne.n	8003d52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d00:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d06:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8003d0a:	d124      	bne.n	8003d56 <HAL_RCC_OscConfig+0x62e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d0c:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003d10:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d12:	0852      	lsrs	r2, r2, #1
 8003d14:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d16:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003d1a:	d11e      	bne.n	8003d5a <HAL_RCC_OscConfig+0x632>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d1c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003d20:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003d22:	0852      	lsrs	r2, r2, #1
 8003d24:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d26:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003d2a:	d118      	bne.n	8003d5e <HAL_RCC_OscConfig+0x636>
  return HAL_OK;
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
    return HAL_ERROR;
 8003d30:	2001      	movs	r0, #1
}
 8003d32:	4770      	bx	lr
        return HAL_ERROR;
 8003d34:	2001      	movs	r0, #1
 8003d36:	e004      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 8003d38:	2001      	movs	r0, #1
 8003d3a:	e002      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
          return HAL_ERROR;
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 8003d40:	2000      	movs	r0, #0
}
 8003d42:	b002      	add	sp, #8
 8003d44:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003d46:	2001      	movs	r0, #1
 8003d48:	e7fb      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	e7f9      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
 8003d4e:	2001      	movs	r0, #1
 8003d50:	e7f7      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
 8003d52:	2001      	movs	r0, #1
 8003d54:	e7f5      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
 8003d56:	2001      	movs	r0, #1
 8003d58:	e7f3      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	e7f1      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
 8003d5e:	2001      	movs	r0, #1
 8003d60:	e7ef      	b.n	8003d42 <HAL_RCC_OscConfig+0x61a>
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	019f800c 	.word	0x019f800c

08003d6c <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d6c:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 030c 	and.w	r3, r3, #12
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d033      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d78:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d02f      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d84:	4b18      	ldr	r3, [pc, #96]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b0c      	cmp	r3, #12
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8003d90:	2000      	movs	r0, #0
}
 8003d92:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003da2:	3301      	adds	r3, #1
    switch (pllsource)
 8003da4:	2a03      	cmp	r2, #3
 8003da6:	d011      	beq.n	8003dcc <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003da8:	4810      	ldr	r0, [pc, #64]	; (8003dec <HAL_RCC_GetSysClockFreq+0x80>)
 8003daa:	fbb0 f0f3 	udiv	r0, r0, r3
 8003dae:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8003db6:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dba:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003dc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8003dca:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dcc:	4807      	ldr	r0, [pc, #28]	; (8003dec <HAL_RCC_GetSysClockFreq+0x80>)
 8003dce:	fbb0 f0f3 	udiv	r0, r0, r3
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8003dda:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8003dde:	e7ec      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8003de0:	4802      	ldr	r0, [pc, #8]	; (8003dec <HAL_RCC_GetSysClockFreq+0x80>)
 8003de2:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8003de4:	4801      	ldr	r0, [pc, #4]	; (8003dec <HAL_RCC_GetSysClockFreq+0x80>)
 8003de6:	4770      	bx	lr
 8003de8:	40021000 	.word	0x40021000
 8003dec:	00f42400 	.word	0x00f42400

08003df0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003df0:	2800      	cmp	r0, #0
 8003df2:	f000 8155 	beq.w	80040a0 <HAL_RCC_ClockConfig+0x2b0>
{
 8003df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df8:	460d      	mov	r5, r1
 8003dfa:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003dfc:	6803      	ldr	r3, [r0, #0]
 8003dfe:	f013 0f0f 	tst.w	r3, #15
 8003e02:	d002      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x1a>
 8003e04:	f033 030f 	bics.w	r3, r3, #15
 8003e08:	d004      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x24>
 8003e0a:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8003e0e:	489a      	ldr	r0, [pc, #616]	; (8004078 <HAL_RCC_ClockConfig+0x288>)
 8003e10:	f7fc ff2d 	bl	8000c6e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003e14:	2d0f      	cmp	r5, #15
 8003e16:	d84c      	bhi.n	8003eb2 <HAL_RCC_ClockConfig+0xc2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e18:	4b98      	ldr	r3, [pc, #608]	; (800407c <HAL_RCC_ClockConfig+0x28c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	42ab      	cmp	r3, r5
 8003e22:	d20b      	bcs.n	8003e3c <HAL_RCC_ClockConfig+0x4c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e24:	4a95      	ldr	r2, [pc, #596]	; (800407c <HAL_RCC_ClockConfig+0x28c>)
 8003e26:	6813      	ldr	r3, [r2, #0]
 8003e28:	f023 030f 	bic.w	r3, r3, #15
 8003e2c:	432b      	orrs	r3, r5
 8003e2e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e30:	6813      	ldr	r3, [r2, #0]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	42ab      	cmp	r3, r5
 8003e38:	f040 8134 	bne.w	80040a4 <HAL_RCC_ClockConfig+0x2b4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3c:	6826      	ldr	r6, [r4, #0]
 8003e3e:	f016 0601 	ands.w	r6, r6, #1
 8003e42:	d06f      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x134>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003e44:	6863      	ldr	r3, [r4, #4]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d838      	bhi.n	8003ebe <HAL_RCC_ClockConfig+0xce>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e4c:	6863      	ldr	r3, [r4, #4]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d03b      	beq.n	8003eca <HAL_RCC_ClockConfig+0xda>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d059      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x11a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e56:	4b8a      	ldr	r3, [pc, #552]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003e5e:	f000 8123 	beq.w	80040a8 <HAL_RCC_ClockConfig+0x2b8>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e62:	f7ff ff83 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8003e66:	4b87      	ldr	r3, [pc, #540]	; (8004084 <HAL_RCC_ClockConfig+0x294>)
 8003e68:	4298      	cmp	r0, r3
 8003e6a:	d959      	bls.n	8003f20 <HAL_RCC_ClockConfig+0x130>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e6c:	4a84      	ldr	r2, [pc, #528]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8003e6e:	6893      	ldr	r3, [r2, #8]
 8003e70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e7a:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e7c:	4a80      	ldr	r2, [pc, #512]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8003e7e:	6893      	ldr	r3, [r2, #8]
 8003e80:	f023 0303 	bic.w	r3, r3, #3
 8003e84:	6861      	ldr	r1, [r4, #4]
 8003e86:	430b      	orrs	r3, r1
 8003e88:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003e8a:	f7fd f987 	bl	800119c <HAL_GetTick>
 8003e8e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e90:	4b7b      	ldr	r3, [pc, #492]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	6862      	ldr	r2, [r4, #4]
 8003e9a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003e9e:	d041      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x134>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea0:	f7fd f97c 	bl	800119c <HAL_GetTick>
 8003ea4:	1bc0      	subs	r0, r0, r7
 8003ea6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003eaa:	4298      	cmp	r0, r3
 8003eac:	d9f0      	bls.n	8003e90 <HAL_RCC_ClockConfig+0xa0>
        return HAL_TIMEOUT;
 8003eae:	2003      	movs	r0, #3
 8003eb0:	e0af      	b.n	8004012 <HAL_RCC_ClockConfig+0x222>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003eb2:	f240 310d 	movw	r1, #781	; 0x30d
 8003eb6:	4870      	ldr	r0, [pc, #448]	; (8004078 <HAL_RCC_ClockConfig+0x288>)
 8003eb8:	f7fc fed9 	bl	8000c6e <assert_failed>
 8003ebc:	e7ac      	b.n	8003e18 <HAL_RCC_ClockConfig+0x28>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003ebe:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003ec2:	486d      	ldr	r0, [pc, #436]	; (8004078 <HAL_RCC_ClockConfig+0x288>)
 8003ec4:	f7fc fed3 	bl	8000c6e <assert_failed>
 8003ec8:	e7c0      	b.n	8003e4c <HAL_RCC_ClockConfig+0x5c>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eca:	4b6d      	ldr	r3, [pc, #436]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xe8>
        return HAL_ERROR;
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	e09c      	b.n	8004012 <HAL_RCC_ClockConfig+0x222>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ed8:	f7ff fbfc 	bl	80036d4 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8003edc:	4b69      	ldr	r3, [pc, #420]	; (8004084 <HAL_RCC_ClockConfig+0x294>)
 8003ede:	4298      	cmp	r0, r3
 8003ee0:	d91a      	bls.n	8003f18 <HAL_RCC_ClockConfig+0x128>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ee2:	4b67      	ldr	r3, [pc, #412]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x108>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003eec:	6826      	ldr	r6, [r4, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003eee:	f016 0602 	ands.w	r6, r6, #2
 8003ef2:	d0c3      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x8c>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ef4:	68a3      	ldr	r3, [r4, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ef6:	b98b      	cbnz	r3, 8003f1c <HAL_RCC_ClockConfig+0x12c>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ef8:	4a61      	ldr	r2, [pc, #388]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8003efa:	6893      	ldr	r3, [r2, #8]
 8003efc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f06:	2680      	movs	r6, #128	; 0x80
 8003f08:	e7b8      	b.n	8003e7c <HAL_RCC_ClockConfig+0x8c>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f0a:	4b5d      	ldr	r3, [pc, #372]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f12:	d1a6      	bne.n	8003e62 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8003f14:	2001      	movs	r0, #1
 8003f16:	e07c      	b.n	8004012 <HAL_RCC_ClockConfig+0x222>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f18:	2600      	movs	r6, #0
 8003f1a:	e7af      	b.n	8003e7c <HAL_RCC_ClockConfig+0x8c>
 8003f1c:	2600      	movs	r6, #0
 8003f1e:	e7ad      	b.n	8003e7c <HAL_RCC_ClockConfig+0x8c>
 8003f20:	2600      	movs	r6, #0
 8003f22:	e7ab      	b.n	8003e7c <HAL_RCC_ClockConfig+0x8c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	f013 0f02 	tst.w	r3, #2
 8003f2a:	d07f      	beq.n	800402c <HAL_RCC_ClockConfig+0x23c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2c:	f013 0f04 	tst.w	r3, #4
 8003f30:	d004      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x14c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f32:	4a53      	ldr	r2, [pc, #332]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8003f34:	6893      	ldr	r3, [r2, #8]
 8003f36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f3a:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	f013 0f08 	tst.w	r3, #8
 8003f42:	d006      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x162>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f44:	4a4e      	ldr	r2, [pc, #312]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8003f46:	6893      	ldr	r3, [r2, #8]
 8003f48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f4c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f50:	6093      	str	r3, [r2, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003f52:	68a3      	ldr	r3, [r4, #8]
 8003f54:	b163      	cbz	r3, 8003f70 <HAL_RCC_ClockConfig+0x180>
 8003f56:	2bc0      	cmp	r3, #192	; 0xc0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x180>
 8003f5a:	d85b      	bhi.n	8004014 <HAL_RCC_ClockConfig+0x224>
 8003f5c:	2ba0      	cmp	r3, #160	; 0xa0
 8003f5e:	d007      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x180>
 8003f60:	d902      	bls.n	8003f68 <HAL_RCC_ClockConfig+0x178>
 8003f62:	2bb0      	cmp	r3, #176	; 0xb0
 8003f64:	d004      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x180>
 8003f66:	e05b      	b.n	8004020 <HAL_RCC_ClockConfig+0x230>
 8003f68:	2b80      	cmp	r3, #128	; 0x80
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x180>
 8003f6c:	2b90      	cmp	r3, #144	; 0x90
 8003f6e:	d157      	bne.n	8004020 <HAL_RCC_ClockConfig+0x230>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f70:	4a43      	ldr	r2, [pc, #268]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8003f72:	6893      	ldr	r3, [r2, #8]
 8003f74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f78:	68a1      	ldr	r1, [r4, #8]
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f7e:	4b3f      	ldr	r3, [pc, #252]	; (800407c <HAL_RCC_ClockConfig+0x28c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	42ab      	cmp	r3, r5
 8003f88:	d858      	bhi.n	800403c <HAL_RCC_ClockConfig+0x24c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	f013 0f04 	tst.w	r3, #4
 8003f90:	d014      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x1cc>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003f92:	68e3      	ldr	r3, [r4, #12]
 8003f94:	b15b      	cbz	r3, 8003fae <HAL_RCC_ClockConfig+0x1be>
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9a:	d008      	beq.n	8003fae <HAL_RCC_ClockConfig+0x1be>
 8003f9c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003fa0:	d005      	beq.n	8003fae <HAL_RCC_ClockConfig+0x1be>
 8003fa2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fa6:	d002      	beq.n	8003fae <HAL_RCC_ClockConfig+0x1be>
 8003fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fac:	d15e      	bne.n	800406c <HAL_RCC_ClockConfig+0x27c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fae:	4a34      	ldr	r2, [pc, #208]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8003fb0:	6893      	ldr	r3, [r2, #8]
 8003fb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003fb6:	68e1      	ldr	r1, [r4, #12]
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	f013 0f08 	tst.w	r3, #8
 8003fc2:	d015      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x200>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003fc4:	6923      	ldr	r3, [r4, #16]
 8003fc6:	b15b      	cbz	r3, 8003fe0 <HAL_RCC_ClockConfig+0x1f0>
 8003fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fcc:	d008      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x1f0>
 8003fce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x1f0>
 8003fd4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fd8:	d002      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x1f0>
 8003fda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fde:	d159      	bne.n	8004094 <HAL_RCC_ClockConfig+0x2a4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fe0:	4a27      	ldr	r2, [pc, #156]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8003fe2:	6893      	ldr	r3, [r2, #8]
 8003fe4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003fe8:	6921      	ldr	r1, [r4, #16]
 8003fea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003fee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ff0:	f7ff febc 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8003ff4:	4b22      	ldr	r3, [pc, #136]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ffc:	4a22      	ldr	r2, [pc, #136]	; (8004088 <HAL_RCC_ClockConfig+0x298>)
 8003ffe:	5cd3      	ldrb	r3, [r2, r3]
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	40d8      	lsrs	r0, r3
 8004006:	4b21      	ldr	r3, [pc, #132]	; (800408c <HAL_RCC_ClockConfig+0x29c>)
 8004008:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800400a:	4b21      	ldr	r3, [pc, #132]	; (8004090 <HAL_RCC_ClockConfig+0x2a0>)
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	f7fc fee3 	bl	8000dd8 <HAL_InitTick>
}
 8004012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004014:	2be0      	cmp	r3, #224	; 0xe0
 8004016:	d0ab      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x180>
 8004018:	2bf0      	cmp	r3, #240	; 0xf0
 800401a:	d0a9      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x180>
 800401c:	2bd0      	cmp	r3, #208	; 0xd0
 800401e:	d0a7      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x180>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004020:	f240 317b 	movw	r1, #891	; 0x37b
 8004024:	4814      	ldr	r0, [pc, #80]	; (8004078 <HAL_RCC_ClockConfig+0x288>)
 8004026:	f7fc fe22 	bl	8000c6e <assert_failed>
 800402a:	e7a1      	b.n	8003f70 <HAL_RCC_ClockConfig+0x180>
    if(hpre == RCC_SYSCLK_DIV2)
 800402c:	2e80      	cmp	r6, #128	; 0x80
 800402e:	d1a6      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x18e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004030:	4a13      	ldr	r2, [pc, #76]	; (8004080 <HAL_RCC_ClockConfig+0x290>)
 8004032:	6893      	ldr	r3, [r2, #8]
 8004034:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004038:	6093      	str	r3, [r2, #8]
 800403a:	e7a0      	b.n	8003f7e <HAL_RCC_ClockConfig+0x18e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403c:	4a0f      	ldr	r2, [pc, #60]	; (800407c <HAL_RCC_ClockConfig+0x28c>)
 800403e:	6813      	ldr	r3, [r2, #0]
 8004040:	f023 030f 	bic.w	r3, r3, #15
 8004044:	432b      	orrs	r3, r5
 8004046:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004048:	f7fd f8a8 	bl	800119c <HAL_GetTick>
 800404c:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_RCC_ClockConfig+0x28c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	42ab      	cmp	r3, r5
 8004058:	d097      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x19a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800405a:	f7fd f89f 	bl	800119c <HAL_GetTick>
 800405e:	1b80      	subs	r0, r0, r6
 8004060:	f241 3388 	movw	r3, #5000	; 0x1388
 8004064:	4298      	cmp	r0, r3
 8004066:	d9f2      	bls.n	800404e <HAL_RCC_ClockConfig+0x25e>
        return HAL_TIMEOUT;
 8004068:	2003      	movs	r0, #3
 800406a:	e7d2      	b.n	8004012 <HAL_RCC_ClockConfig+0x222>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800406c:	f240 319d 	movw	r1, #925	; 0x39d
 8004070:	4801      	ldr	r0, [pc, #4]	; (8004078 <HAL_RCC_ClockConfig+0x288>)
 8004072:	f7fc fdfc 	bl	8000c6e <assert_failed>
 8004076:	e79a      	b.n	8003fae <HAL_RCC_ClockConfig+0x1be>
 8004078:	08012fd8 	.word	0x08012fd8
 800407c:	40022000 	.word	0x40022000
 8004080:	40021000 	.word	0x40021000
 8004084:	04c4b400 	.word	0x04c4b400
 8004088:	08012e50 	.word	0x08012e50
 800408c:	20000000 	.word	0x20000000
 8004090:	20000008 	.word	0x20000008
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004094:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8004098:	4804      	ldr	r0, [pc, #16]	; (80040ac <HAL_RCC_ClockConfig+0x2bc>)
 800409a:	f7fc fde8 	bl	8000c6e <assert_failed>
 800409e:	e79f      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1f0>
    return HAL_ERROR;
 80040a0:	2001      	movs	r0, #1
}
 80040a2:	4770      	bx	lr
      return HAL_ERROR;
 80040a4:	2001      	movs	r0, #1
 80040a6:	e7b4      	b.n	8004012 <HAL_RCC_ClockConfig+0x222>
          return HAL_ERROR;
 80040a8:	2001      	movs	r0, #1
 80040aa:	e7b2      	b.n	8004012 <HAL_RCC_ClockConfig+0x222>
 80040ac:	08012fd8 	.word	0x08012fd8

080040b0 <HAL_RCC_GetHCLKFreq>:
}
 80040b0:	4b01      	ldr	r3, [pc, #4]	; (80040b8 <HAL_RCC_GetHCLKFreq+0x8>)
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20000000 	.word	0x20000000

080040bc <HAL_RCC_GetPCLK1Freq>:
{
 80040bc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040be:	f7ff fff7 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80040ca:	4a04      	ldr	r2, [pc, #16]	; (80040dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040cc:	5cd3      	ldrb	r3, [r2, r3]
 80040ce:	f003 031f 	and.w	r3, r3, #31
}
 80040d2:	40d8      	lsrs	r0, r3
 80040d4:	bd08      	pop	{r3, pc}
 80040d6:	bf00      	nop
 80040d8:	40021000 	.word	0x40021000
 80040dc:	08012e60 	.word	0x08012e60

080040e0 <HAL_RCC_GetPCLK2Freq>:
{
 80040e0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040e2:	f7ff ffe5 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80040ee:	4a04      	ldr	r2, [pc, #16]	; (8004100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040f0:	5cd3      	ldrb	r3, [r2, r3]
 80040f2:	f003 031f 	and.w	r3, r3, #31
}
 80040f6:	40d8      	lsrs	r0, r3
 80040f8:	bd08      	pop	{r3, pc}
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000
 8004100:	08012e60 	.word	0x08012e60

08004104 <HAL_RCC_GetClockConfig>:
{
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	460d      	mov	r5, r1
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8004108:	4604      	mov	r4, r0
 800410a:	b1d0      	cbz	r0, 8004142 <HAL_RCC_GetClockConfig+0x3e>
  assert_param(pFLatency != (void *)NULL);
 800410c:	b1fd      	cbz	r5, 800414e <HAL_RCC_GetClockConfig+0x4a>
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800410e:	230f      	movs	r3, #15
 8004110:	6023      	str	r3, [r4, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <HAL_RCC_GetClockConfig+0x58>)
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	f002 0203 	and.w	r2, r2, #3
 800411a:	6062      	str	r2, [r4, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004122:	60a2      	str	r2, [r4, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800412a:	60e2      	str	r2, [r4, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	08db      	lsrs	r3, r3, #3
 8004130:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004134:	6123      	str	r3, [r4, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <HAL_RCC_GetClockConfig+0x5c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	602b      	str	r3, [r5, #0]
}
 8004140:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8004142:	f240 41e4 	movw	r1, #1252	; 0x4e4
 8004146:	4807      	ldr	r0, [pc, #28]	; (8004164 <HAL_RCC_GetClockConfig+0x60>)
 8004148:	f7fc fd91 	bl	8000c6e <assert_failed>
 800414c:	e7de      	b.n	800410c <HAL_RCC_GetClockConfig+0x8>
  assert_param(pFLatency != (void *)NULL);
 800414e:	f240 41e5 	movw	r1, #1253	; 0x4e5
 8004152:	4804      	ldr	r0, [pc, #16]	; (8004164 <HAL_RCC_GetClockConfig+0x60>)
 8004154:	f7fc fd8b 	bl	8000c6e <assert_failed>
 8004158:	e7d9      	b.n	800410e <HAL_RCC_GetClockConfig+0xa>
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000
 8004160:	40022000 	.word	0x40022000
 8004164:	08012fd8 	.word	0x08012fd8

08004168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800416a:	b083      	sub	sp, #12
 800416c:	4604      	mov	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800416e:	6803      	ldr	r3, [r0, #0]
 8004170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004174:	2b00      	cmp	r3, #0
 8004176:	d033      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x78>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800417e:	f000 8085 	beq.w	800428c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    FlagStatus       pwrclkchanged = RESET;
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004182:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004184:	b143      	cbz	r3, 8004198 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8004186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800418a:	d005      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x30>
 800418c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004190:	d002      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8004192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004196:	d128      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x82>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004198:	4b39      	ldr	r3, [pc, #228]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80041a0:	d128      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a2:	4b37      	ldr	r3, [pc, #220]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80041a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041aa:	659a      	str	r2, [r3, #88]	; 0x58
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	9301      	str	r3, [sp, #4]
 80041b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80041b6:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b8:	4a32      	ldr	r2, [pc, #200]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80041ba:	6813      	ldr	r3, [r2, #0]
 80041bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041c2:	f7fc ffeb 	bl	800119c <HAL_GetTick>
 80041c6:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041c8:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80041d0:	d112      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d2:	f7fc ffe3 	bl	800119c <HAL_GetTick>
 80041d6:	1b40      	subs	r0, r0, r5
 80041d8:	2802      	cmp	r0, #2
 80041da:	d9f5      	bls.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x60>
      {
        ret = HAL_TIMEOUT;
 80041dc:	2503      	movs	r5, #3
 80041de:	e00c      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x92>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80041e0:	2183      	movs	r1, #131	; 0x83
 80041e2:	4829      	ldr	r0, [pc, #164]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80041e4:	f7fc fd43 	bl	8000c6e <assert_failed>
 80041e8:	e7c6      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x10>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80041ea:	218b      	movs	r1, #139	; 0x8b
 80041ec:	4826      	ldr	r0, [pc, #152]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80041ee:	f7fc fd3e 	bl	8000c6e <assert_failed>
 80041f2:	e7d1      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x30>
    FlagStatus       pwrclkchanged = RESET;
 80041f4:	2600      	movs	r6, #0
 80041f6:	e7df      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041f8:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 80041fa:	bb45      	cbnz	r5, 800424e <HAL_RCCEx_PeriphCLKConfig+0xe6>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041fc:	4b20      	ldr	r3, [pc, #128]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004202:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004206:	d015      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004208:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800420a:	429a      	cmp	r2, r3
 800420c:	d012      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800420e:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004210:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004218:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800421c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004220:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004224:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004228:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800422c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004234:	f013 0f01 	tst.w	r3, #1
 8004238:	d110      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xf4>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 800423a:	b945      	cbnz	r5, 800424e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800423c:	4a10      	ldr	r2, [pc, #64]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800423e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004246:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004248:	430b      	orrs	r3, r1
 800424a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800424e:	b1f6      	cbz	r6, 800428e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004250:	4a0b      	ldr	r2, [pc, #44]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004252:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004258:	6593      	str	r3, [r2, #88]	; 0x58
 800425a:	e018      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x126>
        tickstart = HAL_GetTick();
 800425c:	f7fc ff9e 	bl	800119c <HAL_GetTick>
 8004260:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004262:	4b07      	ldr	r3, [pc, #28]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	f013 0f02 	tst.w	r3, #2
 800426c:	d1e5      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800426e:	f7fc ff95 	bl	800119c <HAL_GetTick>
 8004272:	1bc0      	subs	r0, r0, r7
 8004274:	f241 3388 	movw	r3, #5000	; 0x1388
 8004278:	4298      	cmp	r0, r3
 800427a:	d9f2      	bls.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xfa>
            ret = HAL_TIMEOUT;
 800427c:	2503      	movs	r5, #3
 800427e:	e7dc      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8004280:	40021000 	.word	0x40021000
 8004284:	40007000 	.word	0x40007000
 8004288:	08013010 	.word	0x08013010
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800428c:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	f013 0f01 	tst.w	r3, #1
 8004294:	d010      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004296:	6863      	ldr	r3, [r4, #4]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d904      	bls.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800429c:	2b03      	cmp	r3, #3
 800429e:	d002      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	f040 81d1 	bne.w	8004648 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042a6:	4aa4      	ldr	r2, [pc, #656]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80042a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80042ac:	f023 0303 	bic.w	r3, r3, #3
 80042b0:	6861      	ldr	r1, [r4, #4]
 80042b2:	430b      	orrs	r3, r1
 80042b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	f013 0f02 	tst.w	r3, #2
 80042be:	d018      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80042c0:	68a3      	ldr	r3, [r4, #8]
 80042c2:	b16b      	cbz	r3, 80042e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80042c4:	3b04      	subs	r3, #4
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d806      	bhi.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80042ca:	f240 1211 	movw	r2, #273	; 0x111
 80042ce:	fa22 f303 	lsr.w	r3, r2, r3
 80042d2:	f013 0f01 	tst.w	r3, #1
 80042d6:	d103      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80042d8:	21ea      	movs	r1, #234	; 0xea
 80042da:	4898      	ldr	r0, [pc, #608]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80042dc:	f7fc fcc7 	bl	8000c6e <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042e0:	4a95      	ldr	r2, [pc, #596]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80042e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80042e6:	f023 030c 	bic.w	r3, r3, #12
 80042ea:	68a1      	ldr	r1, [r4, #8]
 80042ec:	430b      	orrs	r3, r1
 80042ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	f013 0f04 	tst.w	r3, #4
 80042f8:	d011      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80042fa:	68e3      	ldr	r3, [r4, #12]
 80042fc:	b133      	cbz	r3, 800430c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80042fe:	2b10      	cmp	r3, #16
 8004300:	d004      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004302:	2b30      	cmp	r3, #48	; 0x30
 8004304:	d002      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004306:	2b20      	cmp	r3, #32
 8004308:	f040 81a3 	bne.w	8004652 <HAL_RCCEx_PeriphCLKConfig+0x4ea>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800430c:	4a8a      	ldr	r2, [pc, #552]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800430e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004312:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004316:	68e1      	ldr	r1, [r4, #12]
 8004318:	430b      	orrs	r3, r1
 800431a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	f013 0f08 	tst.w	r3, #8
 8004324:	d011      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004326:	6923      	ldr	r3, [r4, #16]
 8004328:	b133      	cbz	r3, 8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	d004      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800432e:	2bc0      	cmp	r3, #192	; 0xc0
 8004330:	d002      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8004332:	2b80      	cmp	r3, #128	; 0x80
 8004334:	f040 8192 	bne.w	800465c <HAL_RCCEx_PeriphCLKConfig+0x4f4>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004338:	4a7f      	ldr	r2, [pc, #508]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800433a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800433e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004342:	6921      	ldr	r1, [r4, #16]
 8004344:	430b      	orrs	r3, r1
 8004346:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	f013 0f10 	tst.w	r3, #16
 8004350:	d014      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004352:	6963      	ldr	r3, [r4, #20]
 8004354:	b14b      	cbz	r3, 800436a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800435a:	d006      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800435c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004360:	d003      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004366:	f040 817e 	bne.w	8004666 <HAL_RCCEx_PeriphCLKConfig+0x4fe>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800436a:	4a73      	ldr	r2, [pc, #460]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800436c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004374:	6961      	ldr	r1, [r4, #20]
 8004376:	430b      	orrs	r3, r1
 8004378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	f013 0f20 	tst.w	r3, #32
 8004382:	d014      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004384:	69a3      	ldr	r3, [r4, #24]
 8004386:	b14b      	cbz	r3, 800439c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438c:	d006      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800438e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004392:	d003      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004398:	f040 816b 	bne.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x50a>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800439c:	4a66      	ldr	r2, [pc, #408]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800439e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043a2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80043a6:	69a1      	ldr	r1, [r4, #24]
 80043a8:	430b      	orrs	r3, r1
 80043aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043b4:	d011      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80043b6:	69e3      	ldr	r3, [r4, #28]
 80043b8:	b133      	cbz	r3, 80043c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043be:	d003      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
 80043c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c4:	f040 815b 	bne.w	800467e <HAL_RCCEx_PeriphCLKConfig+0x516>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043c8:	4a5b      	ldr	r2, [pc, #364]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80043ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043d2:	69e1      	ldr	r1, [r4, #28]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043e0:	d011      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80043e2:	6a23      	ldr	r3, [r4, #32]
 80043e4:	b133      	cbz	r3, 80043f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80043e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ea:	d003      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80043ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f0:	f040 814b 	bne.w	800468a <HAL_RCCEx_PeriphCLKConfig+0x522>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043f4:	4a50      	ldr	r2, [pc, #320]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80043f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80043fe:	6a21      	ldr	r1, [r4, #32]
 8004400:	430b      	orrs	r3, r1
 8004402:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	f413 7f80 	tst.w	r3, #256	; 0x100
 800440c:	d011      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800440e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004410:	b133      	cbz	r3, 8004420 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800441c:	f040 813b 	bne.w	8004696 <HAL_RCCEx_PeriphCLKConfig+0x52e>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004420:	4a45      	ldr	r2, [pc, #276]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004422:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004426:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800442a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800442c:	430b      	orrs	r3, r1
 800442e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004438:	d00c      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800443a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800443c:	2b02      	cmp	r3, #2
 800443e:	f200 8130 	bhi.w	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004442:	4a3d      	ldr	r2, [pc, #244]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004444:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004448:	f023 0303 	bic.w	r3, r3, #3
 800444c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800444e:	430b      	orrs	r3, r1
 8004450:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	f413 7f00 	tst.w	r3, #512	; 0x200
 800445a:	d014      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 800445c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800445e:	b14b      	cbz	r3, 8004474 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004460:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004464:	d006      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004466:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800446a:	d003      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800446c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004470:	f040 811d 	bne.w	80046ae <HAL_RCCEx_PeriphCLKConfig+0x546>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004474:	4a30      	ldr	r2, [pc, #192]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004476:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800447a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800447e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004480:	430b      	orrs	r3, r1
 8004482:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800448c:	d019      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800448e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004490:	b14b      	cbz	r3, 80044a6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004496:	d006      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800449c:	d003      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800449e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044a2:	f040 810a 	bne.w	80046ba <HAL_RCCEx_PeriphCLKConfig+0x552>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044a6:	4a24      	ldr	r2, [pc, #144]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80044a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80044b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80044b2:	430b      	orrs	r3, r1
 80044b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044be:	f000 8102 	beq.w	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80044c8:	d019      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80044ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044cc:	b14b      	cbz	r3, 80044e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80044ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d2:	d006      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80044d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044d8:	d003      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80044da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044de:	f040 80f7 	bne.w	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x568>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044e2:	4a15      	ldr	r2, [pc, #84]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80044e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044e8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80044ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044ee:	430b      	orrs	r3, r1
 80044f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044fa:	f000 80ef 	beq.w	80046dc <HAL_RCCEx_PeriphCLKConfig+0x574>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004504:	d01c      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 8004506:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004508:	b133      	cbz	r3, 8004518 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800450a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800450e:	d003      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004510:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004514:	f040 80e7 	bne.w	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x57e>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004518:	4a07      	ldr	r2, [pc, #28]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800451a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800451e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004522:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004524:	430b      	orrs	r3, r1
 8004526:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800452a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800452c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004530:	f000 80df 	beq.w	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004534:	e004      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000
 800453c:	08013010 	.word	0x08013010
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004546:	d013      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004548:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800454a:	b11b      	cbz	r3, 8004554 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800454c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004550:	f040 80d4 	bne.w	80046fc <HAL_RCCEx_PeriphCLKConfig+0x594>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004554:	4a85      	ldr	r2, [pc, #532]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8004556:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800455a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800455e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004560:	430b      	orrs	r3, r1
 8004562:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004566:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800456c:	f000 80cc 	beq.w	8004708 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004576:	d013      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004578:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800457a:	b11b      	cbz	r3, 8004584 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800457c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004580:	f040 80c7 	bne.w	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004584:	4a79      	ldr	r2, [pc, #484]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8004586:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800458a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800458e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004590:	430b      	orrs	r3, r1
 8004592:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800459c:	f000 80bf 	beq.w	800471e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80045a6:	d016      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 80045a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80045aa:	b133      	cbz	r3, 80045ba <HAL_RCCEx_PeriphCLKConfig+0x452>
 80045ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045b0:	d003      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x452>
 80045b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b6:	f040 80b7 	bne.w	8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c0>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045ba:	4a6c      	ldr	r2, [pc, #432]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80045bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045c0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80045c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80045c6:	430b      	orrs	r3, r1
 80045c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80045ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045d2:	f000 80af 	beq.w	8004734 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80045dc:	d016      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 80045de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80045e0:	b133      	cbz	r3, 80045f0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80045e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e6:	d003      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80045e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045ec:	f040 80a7 	bne.w	800473e <HAL_RCCEx_PeriphCLKConfig+0x5d6>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80045f0:	4a5e      	ldr	r2, [pc, #376]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80045f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045f6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80045fa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80045fc:	430b      	orrs	r3, r1
 80045fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004602:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004608:	f000 809f 	beq.w	800474a <HAL_RCCEx_PeriphCLKConfig+0x5e2>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004612:	d016      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x4da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 8004614:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800461a:	d004      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800461c:	b11b      	cbz	r3, 8004626 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800461e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004622:	f040 8097 	bne.w	8004754 <HAL_RCCEx_PeriphCLKConfig+0x5ec>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004626:	4a51      	ldr	r2, [pc, #324]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8004628:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800462c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004630:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004632:	430b      	orrs	r3, r1
 8004634:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004638:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800463a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800463e:	f000 808f 	beq.w	8004760 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  }

#endif /* QUADSPI */

  return status;
}
 8004642:	4628      	mov	r0, r5
 8004644:	b003      	add	sp, #12
 8004646:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004648:	21e0      	movs	r1, #224	; 0xe0
 800464a:	4849      	ldr	r0, [pc, #292]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800464c:	f7fc fb0f 	bl	8000c6e <assert_failed>
 8004650:	e629      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004652:	21f4      	movs	r1, #244	; 0xf4
 8004654:	4846      	ldr	r0, [pc, #280]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004656:	f7fc fb0a 	bl	8000c6e <assert_failed>
 800465a:	e657      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800465c:	21ff      	movs	r1, #255	; 0xff
 800465e:	4844      	ldr	r0, [pc, #272]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004660:	f7fc fb05 	bl	8000c6e <assert_failed>
 8004664:	e668      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004666:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800466a:	4841      	ldr	r0, [pc, #260]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800466c:	f7fc faff 	bl	8000c6e <assert_failed>
 8004670:	e67b      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x202>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004672:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004676:	483e      	ldr	r0, [pc, #248]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004678:	f7fc faf9 	bl	8000c6e <assert_failed>
 800467c:	e68e      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x234>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800467e:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004682:	483b      	ldr	r0, [pc, #236]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004684:	f7fc faf3 	bl	8000c6e <assert_failed>
 8004688:	e69e      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800468a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800468e:	4838      	ldr	r0, [pc, #224]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004690:	f7fc faed 	bl	8000c6e <assert_failed>
 8004694:	e6ae      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004696:	f44f 719b 	mov.w	r1, #310	; 0x136
 800469a:	4835      	ldr	r0, [pc, #212]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800469c:	f7fc fae7 	bl	8000c6e <assert_failed>
 80046a0:	e6be      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80046a2:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80046a6:	4832      	ldr	r0, [pc, #200]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80046a8:	f7fc fae1 	bl	8000c6e <assert_failed>
 80046ac:	e6c9      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 80046ae:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80046b2:	482f      	ldr	r0, [pc, #188]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80046b4:	f7fc fadb 	bl	8000c6e <assert_failed>
 80046b8:	e6dc      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80046ba:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80046be:	482c      	ldr	r0, [pc, #176]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80046c0:	f7fc fad5 	bl	8000c6e <assert_failed>
 80046c4:	e6ef      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c6:	68d3      	ldr	r3, [r2, #12]
 80046c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046cc:	60d3      	str	r3, [r2, #12]
 80046ce:	e6f8      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80046d0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80046d4:	4826      	ldr	r0, [pc, #152]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80046d6:	f7fc faca 	bl	8000c6e <assert_failed>
 80046da:	e702      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046dc:	68d3      	ldr	r3, [r2, #12]
 80046de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046e2:	60d3      	str	r3, [r2, #12]
 80046e4:	e70b      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x396>
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 80046e6:	f240 1179 	movw	r1, #377	; 0x179
 80046ea:	4821      	ldr	r0, [pc, #132]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80046ec:	f7fc fabf 	bl	8000c6e <assert_failed>
 80046f0:	e712      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046f2:	68d3      	ldr	r3, [r2, #12]
 80046f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046f8:	60d3      	str	r3, [r2, #12]
 80046fa:	e721      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 80046fc:	f240 118b 	movw	r1, #395	; 0x18b
 8004700:	481b      	ldr	r0, [pc, #108]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004702:	f7fc fab4 	bl	8000c6e <assert_failed>
 8004706:	e725      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004708:	68d3      	ldr	r3, [r2, #12]
 800470a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800470e:	60d3      	str	r3, [r2, #12]
 8004710:	e72e      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x408>
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004712:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8004716:	4816      	ldr	r0, [pc, #88]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004718:	f7fc faa9 	bl	8000c6e <assert_failed>
 800471c:	e732      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800471e:	68d3      	ldr	r3, [r2, #12]
 8004720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004724:	60d3      	str	r3, [r2, #12]
 8004726:	e73b      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 8004728:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800472c:	4810      	ldr	r0, [pc, #64]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800472e:	f7fc fa9e 	bl	8000c6e <assert_failed>
 8004732:	e742      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004734:	68d3      	ldr	r3, [r2, #12]
 8004736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473a:	60d3      	str	r3, [r2, #12]
 800473c:	e74b      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 800473e:	f240 11b9 	movw	r1, #441	; 0x1b9
 8004742:	480b      	ldr	r0, [pc, #44]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004744:	f7fc fa93 	bl	8000c6e <assert_failed>
 8004748:	e752      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x488>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800474a:	68d3      	ldr	r3, [r2, #12]
 800474c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004750:	60d3      	str	r3, [r2, #12]
 8004752:	e75b      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 8004754:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8004758:	4805      	ldr	r0, [pc, #20]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800475a:	f7fc fa88 	bl	8000c6e <assert_failed>
 800475e:	e762      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004760:	68d3      	ldr	r3, [r2, #12]
 8004762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004766:	60d3      	str	r3, [r2, #12]
 8004768:	e76b      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800476a:	bf00      	nop
 800476c:	40021000 	.word	0x40021000
 8004770:	08013010 	.word	0x08013010

08004774 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	4605      	mov	r5, r0
 800477c:	4688      	mov	r8, r1
 800477e:	4617      	mov	r7, r2
 8004780:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004782:	f7fc fd0b 	bl	800119c <HAL_GetTick>
 8004786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004788:	1a1b      	subs	r3, r3, r0
 800478a:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800478e:	f7fc fd05 	bl	800119c <HAL_GetTick>
 8004792:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004794:	4b2a      	ldr	r3, [pc, #168]	; (8004840 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800479c:	fb09 f303 	mul.w	r3, r9, r3
 80047a0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a2:	682b      	ldr	r3, [r5, #0]
 80047a4:	689c      	ldr	r4, [r3, #8]
 80047a6:	ea38 0404 	bics.w	r4, r8, r4
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	42bb      	cmp	r3, r7
 80047b2:	d040      	beq.n	8004836 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047b4:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80047b8:	d0f3      	beq.n	80047a2 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047ba:	f7fc fcef 	bl	800119c <HAL_GetTick>
 80047be:	eba0 000a 	sub.w	r0, r0, sl
 80047c2:	4548      	cmp	r0, r9
 80047c4:	d20a      	bcs.n	80047dc <SPI_WaitFlagStateUntilTimeout+0x68>
 80047c6:	f1b9 0f00 	cmp.w	r9, #0
 80047ca:	d007      	beq.n	80047dc <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047cc:	9a01      	ldr	r2, [sp, #4]
 80047ce:	b102      	cbz	r2, 80047d2 <SPI_WaitFlagStateUntilTimeout+0x5e>
 80047d0:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80047d2:	9b01      	ldr	r3, [sp, #4]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	4691      	mov	r9, r2
 80047da:	e7e2      	b.n	80047a2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047dc:	682a      	ldr	r2, [r5, #0]
 80047de:	6853      	ldr	r3, [r2, #4]
 80047e0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80047e4:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e6:	686b      	ldr	r3, [r5, #4]
 80047e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ec:	d00b      	beq.n	8004806 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80047f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f4:	d014      	beq.n	8004820 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80047fc:	2300      	movs	r3, #0
 80047fe:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8004802:	2003      	movs	r0, #3
 8004804:	e018      	b.n	8004838 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004806:	68ab      	ldr	r3, [r5, #8]
 8004808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480c:	d002      	beq.n	8004814 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800480e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004812:	d1ec      	bne.n	80047ee <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004814:	682a      	ldr	r2, [r5, #0]
 8004816:	6813      	ldr	r3, [r2, #0]
 8004818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e7e6      	b.n	80047ee <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8004820:	682a      	ldr	r2, [r5, #0]
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	682a      	ldr	r2, [r5, #0]
 800482c:	6813      	ldr	r3, [r2, #0]
 800482e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	e7df      	b.n	80047f6 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8004836:	2000      	movs	r0, #0
}
 8004838:	b002      	add	sp, #8
 800483a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483e:	bf00      	nop
 8004840:	20000000 	.word	0x20000000

08004844 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	4606      	mov	r6, r0
 800484c:	460c      	mov	r4, r1
 800484e:	4615      	mov	r5, r2
 8004850:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004858:	f7fc fca0 	bl	800119c <HAL_GetTick>
 800485c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800485e:	1a1b      	subs	r3, r3, r0
 8004860:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8004864:	f7fc fc9a 	bl	800119c <HAL_GetTick>
 8004868:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800486a:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800486e:	4b31      	ldr	r3, [pc, #196]	; (8004934 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004876:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800487a:	0d1b      	lsrs	r3, r3, #20
 800487c:	fb08 f303 	mul.w	r3, r8, r3
 8004880:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004882:	e002      	b.n	800488a <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8004884:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8004888:	d112      	bne.n	80048b0 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 800488a:	6833      	ldr	r3, [r6, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	ea03 0c04 	and.w	ip, r3, r4
 8004892:	45ac      	cmp	ip, r5
 8004894:	d04a      	beq.n	800492c <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004896:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800489a:	d1f3      	bne.n	8004884 <SPI_WaitFifoStateUntilTimeout+0x40>
 800489c:	2d00      	cmp	r5, #0
 800489e:	d1f1      	bne.n	8004884 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 80048a0:	f89a 300c 	ldrb.w	r3, [sl, #12]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80048aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80048ae:	e7e9      	b.n	8004884 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048b0:	f7fc fc74 	bl	800119c <HAL_GetTick>
 80048b4:	eba0 0009 	sub.w	r0, r0, r9
 80048b8:	4540      	cmp	r0, r8
 80048ba:	d20a      	bcs.n	80048d2 <SPI_WaitFifoStateUntilTimeout+0x8e>
 80048bc:	f1b8 0f00 	cmp.w	r8, #0
 80048c0:	d007      	beq.n	80048d2 <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048c2:	9a01      	ldr	r2, [sp, #4]
 80048c4:	b102      	cbz	r2, 80048c8 <SPI_WaitFifoStateUntilTimeout+0x84>
 80048c6:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 80048c8:	9b01      	ldr	r3, [sp, #4]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	4690      	mov	r8, r2
 80048d0:	e7db      	b.n	800488a <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048d2:	6832      	ldr	r2, [r6, #0]
 80048d4:	6853      	ldr	r3, [r2, #4]
 80048d6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80048da:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048dc:	6873      	ldr	r3, [r6, #4]
 80048de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e2:	d00b      	beq.n	80048fc <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048e4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80048e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ea:	d014      	beq.n	8004916 <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80048f2:	2300      	movs	r3, #0
 80048f4:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 80048f8:	2003      	movs	r0, #3
 80048fa:	e018      	b.n	800492e <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048fc:	68b3      	ldr	r3, [r6, #8]
 80048fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004902:	d002      	beq.n	800490a <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004908:	d1ec      	bne.n	80048e4 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 800490a:	6832      	ldr	r2, [r6, #0]
 800490c:	6813      	ldr	r3, [r2, #0]
 800490e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	e7e6      	b.n	80048e4 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8004916:	6832      	ldr	r2, [r6, #0]
 8004918:	6813      	ldr	r3, [r2, #0]
 800491a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	6832      	ldr	r2, [r6, #0]
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	e7df      	b.n	80048ec <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 800492c:	2000      	movs	r0, #0
}
 800492e:	b002      	add	sp, #8
 8004930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004934:	20000000 	.word	0x20000000

08004938 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	4604      	mov	r4, r0
 800493e:	460d      	mov	r5, r1
 8004940:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004942:	9200      	str	r2, [sp, #0]
 8004944:	460b      	mov	r3, r1
 8004946:	2200      	movs	r2, #0
 8004948:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800494c:	f7ff ff7a 	bl	8004844 <SPI_WaitFifoStateUntilTimeout>
 8004950:	b9b0      	cbnz	r0, 8004980 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004952:	9600      	str	r6, [sp, #0]
 8004954:	462b      	mov	r3, r5
 8004956:	2200      	movs	r2, #0
 8004958:	2180      	movs	r1, #128	; 0x80
 800495a:	4620      	mov	r0, r4
 800495c:	f7ff ff0a 	bl	8004774 <SPI_WaitFlagStateUntilTimeout>
 8004960:	b9a8      	cbnz	r0, 800498e <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004962:	9600      	str	r6, [sp, #0]
 8004964:	462b      	mov	r3, r5
 8004966:	2200      	movs	r2, #0
 8004968:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800496c:	4620      	mov	r0, r4
 800496e:	f7ff ff69 	bl	8004844 <SPI_WaitFifoStateUntilTimeout>
 8004972:	b150      	cbz	r0, 800498a <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004974:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004976:	f043 0320 	orr.w	r3, r3, #32
 800497a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800497c:	2003      	movs	r0, #3
 800497e:	e004      	b.n	800498a <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004980:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004982:	f043 0320 	orr.w	r3, r3, #32
 8004986:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004988:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800498a:	b002      	add	sp, #8
 800498c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004990:	f043 0320 	orr.w	r3, r3, #32
 8004994:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004996:	2003      	movs	r0, #3
 8004998:	e7f7      	b.n	800498a <SPI_EndRxTxTransaction+0x52>

0800499a <SPI_EndRxTransaction>:
{
 800499a:	b570      	push	{r4, r5, r6, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	4604      	mov	r4, r0
 80049a0:	460d      	mov	r5, r1
 80049a2:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a4:	6843      	ldr	r3, [r0, #4]
 80049a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049aa:	d00d      	beq.n	80049c8 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049ac:	9600      	str	r6, [sp, #0]
 80049ae:	462b      	mov	r3, r5
 80049b0:	2200      	movs	r2, #0
 80049b2:	2180      	movs	r1, #128	; 0x80
 80049b4:	4620      	mov	r0, r4
 80049b6:	f7ff fedd 	bl	8004774 <SPI_WaitFlagStateUntilTimeout>
 80049ba:	b990      	cbnz	r0, 80049e2 <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049bc:	6863      	ldr	r3, [r4, #4]
 80049be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049c2:	d014      	beq.n	80049ee <SPI_EndRxTransaction+0x54>
}
 80049c4:	b002      	add	sp, #8
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c8:	6883      	ldr	r3, [r0, #8]
 80049ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ce:	d002      	beq.n	80049d6 <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d4:	d1ea      	bne.n	80049ac <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 80049d6:	6822      	ldr	r2, [r4, #0]
 80049d8:	6813      	ldr	r3, [r2, #0]
 80049da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	e7e4      	b.n	80049ac <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80049e4:	f043 0320 	orr.w	r3, r3, #32
 80049e8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80049ea:	2003      	movs	r0, #3
 80049ec:	e7ea      	b.n	80049c4 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ee:	68a3      	ldr	r3, [r4, #8]
 80049f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f4:	d002      	beq.n	80049fc <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fa:	d1e3      	bne.n	80049c4 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049fc:	9600      	str	r6, [sp, #0]
 80049fe:	462b      	mov	r3, r5
 8004a00:	2200      	movs	r2, #0
 8004a02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a06:	4620      	mov	r0, r4
 8004a08:	f7ff ff1c 	bl	8004844 <SPI_WaitFifoStateUntilTimeout>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d0d9      	beq.n	80049c4 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a10:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a12:	f043 0320 	orr.w	r3, r3, #32
 8004a16:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004a18:	2003      	movs	r0, #3
 8004a1a:	e7d3      	b.n	80049c4 <SPI_EndRxTransaction+0x2a>

08004a1c <HAL_SPI_Init>:
  if (hspi == NULL)
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	f000 8170 	beq.w	8004d02 <HAL_SPI_Init+0x2e6>
{
 8004a22:	b510      	push	{r4, lr}
 8004a24:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004a26:	6803      	ldr	r3, [r0, #0]
 8004a28:	4a71      	ldr	r2, [pc, #452]	; (8004bf0 <HAL_SPI_Init+0x1d4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d010      	beq.n	8004a50 <HAL_SPI_Init+0x34>
 8004a2e:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00c      	beq.n	8004a50 <HAL_SPI_Init+0x34>
 8004a36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d008      	beq.n	8004a50 <HAL_SPI_Init+0x34>
 8004a3e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_SPI_Init+0x34>
 8004a46:	f240 1145 	movw	r1, #325	; 0x145
 8004a4a:	486a      	ldr	r0, [pc, #424]	; (8004bf4 <HAL_SPI_Init+0x1d8>)
 8004a4c:	f7fc f90f 	bl	8000c6e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004a50:	6863      	ldr	r3, [r4, #4]
 8004a52:	b113      	cbz	r3, 8004a5a <HAL_SPI_Init+0x3e>
 8004a54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a58:	d16a      	bne.n	8004b30 <HAL_SPI_Init+0x114>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004a5a:	68a3      	ldr	r3, [r4, #8]
 8004a5c:	b12b      	cbz	r3, 8004a6a <HAL_SPI_Init+0x4e>
 8004a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a62:	d002      	beq.n	8004a6a <HAL_SPI_Init+0x4e>
 8004a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a68:	d168      	bne.n	8004b3c <HAL_SPI_Init+0x120>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004a6a:	68e3      	ldr	r3, [r4, #12]
 8004a6c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a70:	d023      	beq.n	8004aba <HAL_SPI_Init+0x9e>
 8004a72:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004a76:	d020      	beq.n	8004aba <HAL_SPI_Init+0x9e>
 8004a78:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004a7c:	d01d      	beq.n	8004aba <HAL_SPI_Init+0x9e>
 8004a7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a82:	d01a      	beq.n	8004aba <HAL_SPI_Init+0x9e>
 8004a84:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004a88:	d017      	beq.n	8004aba <HAL_SPI_Init+0x9e>
 8004a8a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004a8e:	d014      	beq.n	8004aba <HAL_SPI_Init+0x9e>
 8004a90:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004a94:	d011      	beq.n	8004aba <HAL_SPI_Init+0x9e>
 8004a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a9a:	d00e      	beq.n	8004aba <HAL_SPI_Init+0x9e>
 8004a9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aa0:	d00b      	beq.n	8004aba <HAL_SPI_Init+0x9e>
 8004aa2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004aa6:	d008      	beq.n	8004aba <HAL_SPI_Init+0x9e>
 8004aa8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004aac:	d005      	beq.n	8004aba <HAL_SPI_Init+0x9e>
 8004aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab2:	d002      	beq.n	8004aba <HAL_SPI_Init+0x9e>
 8004ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ab8:	d146      	bne.n	8004b48 <HAL_SPI_Init+0x12c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004aba:	69a3      	ldr	r3, [r4, #24]
 8004abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac0:	d003      	beq.n	8004aca <HAL_SPI_Init+0xae>
 8004ac2:	b113      	cbz	r3, 8004aca <HAL_SPI_Init+0xae>
 8004ac4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ac8:	d144      	bne.n	8004b54 <HAL_SPI_Init+0x138>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004aca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d001      	beq.n	8004ad4 <HAL_SPI_Init+0xb8>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d145      	bne.n	8004b60 <HAL_SPI_Init+0x144>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004ad4:	69e3      	ldr	r3, [r4, #28]
 8004ad6:	b193      	cbz	r3, 8004afe <HAL_SPI_Init+0xe2>
 8004ad8:	2b18      	cmp	r3, #24
 8004ada:	d947      	bls.n	8004b6c <HAL_SPI_Init+0x150>
 8004adc:	2b38      	cmp	r3, #56	; 0x38
 8004ade:	d809      	bhi.n	8004af4 <HAL_SPI_Init+0xd8>
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d307      	bcc.n	8004af4 <HAL_SPI_Init+0xd8>
 8004ae4:	3b20      	subs	r3, #32
 8004ae6:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8004aea:	fa22 f303 	lsr.w	r3, r2, r3
 8004aee:	f013 0f01 	tst.w	r3, #1
 8004af2:	d104      	bne.n	8004afe <HAL_SPI_Init+0xe2>
 8004af4:	f240 114b 	movw	r1, #331	; 0x14b
 8004af8:	483e      	ldr	r0, [pc, #248]	; (8004bf4 <HAL_SPI_Init+0x1d8>)
 8004afa:	f7fc f8b8 	bl	8000c6e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004afe:	6a23      	ldr	r3, [r4, #32]
 8004b00:	b10b      	cbz	r3, 8004b06 <HAL_SPI_Init+0xea>
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d13b      	bne.n	8004b7e <HAL_SPI_Init+0x162>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b08:	b10b      	cbz	r3, 8004b0e <HAL_SPI_Init+0xf2>
 8004b0a:	2b10      	cmp	r3, #16
 8004b0c:	d13d      	bne.n	8004b8a <HAL_SPI_Init+0x16e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d173      	bne.n	8004bfc <HAL_SPI_Init+0x1e0>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004b14:	6923      	ldr	r3, [r4, #16]
 8004b16:	b10b      	cbz	r3, 8004b1c <HAL_SPI_Init+0x100>
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d13c      	bne.n	8004b96 <HAL_SPI_Init+0x17a>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004b1c:	6963      	ldr	r3, [r4, #20]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d83f      	bhi.n	8004ba2 <HAL_SPI_Init+0x186>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b22:	6863      	ldr	r3, [r4, #4]
 8004b24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b28:	d041      	beq.n	8004bae <HAL_SPI_Init+0x192>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61e3      	str	r3, [r4, #28]
 8004b2e:	e07d      	b.n	8004c2c <HAL_SPI_Init+0x210>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004b30:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004b34:	482f      	ldr	r0, [pc, #188]	; (8004bf4 <HAL_SPI_Init+0x1d8>)
 8004b36:	f7fc f89a 	bl	8000c6e <assert_failed>
 8004b3a:	e78e      	b.n	8004a5a <HAL_SPI_Init+0x3e>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004b3c:	f240 1147 	movw	r1, #327	; 0x147
 8004b40:	482c      	ldr	r0, [pc, #176]	; (8004bf4 <HAL_SPI_Init+0x1d8>)
 8004b42:	f7fc f894 	bl	8000c6e <assert_failed>
 8004b46:	e790      	b.n	8004a6a <HAL_SPI_Init+0x4e>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004b48:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004b4c:	4829      	ldr	r0, [pc, #164]	; (8004bf4 <HAL_SPI_Init+0x1d8>)
 8004b4e:	f7fc f88e 	bl	8000c6e <assert_failed>
 8004b52:	e7b2      	b.n	8004aba <HAL_SPI_Init+0x9e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004b54:	f240 1149 	movw	r1, #329	; 0x149
 8004b58:	4826      	ldr	r0, [pc, #152]	; (8004bf4 <HAL_SPI_Init+0x1d8>)
 8004b5a:	f7fc f888 	bl	8000c6e <assert_failed>
 8004b5e:	e7b4      	b.n	8004aca <HAL_SPI_Init+0xae>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004b60:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004b64:	4823      	ldr	r0, [pc, #140]	; (8004bf4 <HAL_SPI_Init+0x1d8>)
 8004b66:	f7fc f882 	bl	8000c6e <assert_failed>
 8004b6a:	e7b3      	b.n	8004ad4 <HAL_SPI_Init+0xb8>
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d3c1      	bcc.n	8004af4 <HAL_SPI_Init+0xd8>
 8004b70:	4a21      	ldr	r2, [pc, #132]	; (8004bf8 <HAL_SPI_Init+0x1dc>)
 8004b72:	fa22 f303 	lsr.w	r3, r2, r3
 8004b76:	f013 0f01 	tst.w	r3, #1
 8004b7a:	d0bb      	beq.n	8004af4 <HAL_SPI_Init+0xd8>
 8004b7c:	e7bf      	b.n	8004afe <HAL_SPI_Init+0xe2>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004b7e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004b82:	481c      	ldr	r0, [pc, #112]	; (8004bf4 <HAL_SPI_Init+0x1d8>)
 8004b84:	f7fc f873 	bl	8000c6e <assert_failed>
 8004b88:	e7bd      	b.n	8004b06 <HAL_SPI_Init+0xea>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004b8a:	f240 114d 	movw	r1, #333	; 0x14d
 8004b8e:	4819      	ldr	r0, [pc, #100]	; (8004bf4 <HAL_SPI_Init+0x1d8>)
 8004b90:	f7fc f86d 	bl	8000c6e <assert_failed>
 8004b94:	e7bb      	b.n	8004b0e <HAL_SPI_Init+0xf2>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004b96:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004b9a:	4816      	ldr	r0, [pc, #88]	; (8004bf4 <HAL_SPI_Init+0x1d8>)
 8004b9c:	f7fc f867 	bl	8000c6e <assert_failed>
 8004ba0:	e7bc      	b.n	8004b1c <HAL_SPI_Init+0x100>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004ba2:	f240 1151 	movw	r1, #337	; 0x151
 8004ba6:	4813      	ldr	r0, [pc, #76]	; (8004bf4 <HAL_SPI_Init+0x1d8>)
 8004ba8:	f7fc f861 	bl	8000c6e <assert_failed>
 8004bac:	e7b9      	b.n	8004b22 <HAL_SPI_Init+0x106>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004bae:	69e3      	ldr	r3, [r4, #28]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d03b      	beq.n	8004c2c <HAL_SPI_Init+0x210>
 8004bb4:	2b18      	cmp	r3, #24
 8004bb6:	d911      	bls.n	8004bdc <HAL_SPI_Init+0x1c0>
 8004bb8:	2b38      	cmp	r3, #56	; 0x38
 8004bba:	d809      	bhi.n	8004bd0 <HAL_SPI_Init+0x1b4>
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d307      	bcc.n	8004bd0 <HAL_SPI_Init+0x1b4>
 8004bc0:	3b20      	subs	r3, #32
 8004bc2:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8004bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bca:	f013 0f01 	tst.w	r3, #1
 8004bce:	d12d      	bne.n	8004c2c <HAL_SPI_Init+0x210>
 8004bd0:	f240 1155 	movw	r1, #341	; 0x155
 8004bd4:	4807      	ldr	r0, [pc, #28]	; (8004bf4 <HAL_SPI_Init+0x1d8>)
 8004bd6:	f7fc f84a 	bl	8000c6e <assert_failed>
 8004bda:	e027      	b.n	8004c2c <HAL_SPI_Init+0x210>
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d3f7      	bcc.n	8004bd0 <HAL_SPI_Init+0x1b4>
 8004be0:	4a05      	ldr	r2, [pc, #20]	; (8004bf8 <HAL_SPI_Init+0x1dc>)
 8004be2:	fa22 f303 	lsr.w	r3, r2, r3
 8004be6:	f013 0f01 	tst.w	r3, #1
 8004bea:	d0f1      	beq.n	8004bd0 <HAL_SPI_Init+0x1b4>
 8004bec:	e01e      	b.n	8004c2c <HAL_SPI_Init+0x210>
 8004bee:	bf00      	nop
 8004bf0:	40013000 	.word	0x40013000
 8004bf4:	0801304c 	.word	0x0801304c
 8004bf8:	01010100 	.word	0x01010100
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004bfc:	69e3      	ldr	r3, [r4, #28]
 8004bfe:	b193      	cbz	r3, 8004c26 <HAL_SPI_Init+0x20a>
 8004c00:	2b18      	cmp	r3, #24
 8004c02:	d96c      	bls.n	8004cde <HAL_SPI_Init+0x2c2>
 8004c04:	2b38      	cmp	r3, #56	; 0x38
 8004c06:	d809      	bhi.n	8004c1c <HAL_SPI_Init+0x200>
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d307      	bcc.n	8004c1c <HAL_SPI_Init+0x200>
 8004c0c:	3b20      	subs	r3, #32
 8004c0e:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8004c12:	fa22 f303 	lsr.w	r3, r2, r3
 8004c16:	f013 0f01 	tst.w	r3, #1
 8004c1a:	d104      	bne.n	8004c26 <HAL_SPI_Init+0x20a>
 8004c1c:	f240 115f 	movw	r1, #351	; 0x15f
 8004c20:	4839      	ldr	r0, [pc, #228]	; (8004d08 <HAL_SPI_Init+0x2ec>)
 8004c22:	f7fc f824 	bl	8000c6e <assert_failed>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c26:	2300      	movs	r3, #0
 8004c28:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c2a:	6163      	str	r3, [r4, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c30:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d05b      	beq.n	8004cf0 <HAL_SPI_Init+0x2d4>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004c3e:	6822      	ldr	r2, [r4, #0]
 8004c40:	6813      	ldr	r3, [r2, #0]
 8004c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c46:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c48:	68e3      	ldr	r3, [r4, #12]
 8004c4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c4e:	d955      	bls.n	8004cfc <HAL_SPI_Init+0x2e0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c50:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c56:	d004      	beq.n	8004c62 <HAL_SPI_Init+0x246>
 8004c58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c5c:	d001      	beq.n	8004c62 <HAL_SPI_Init+0x246>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c62:	6863      	ldr	r3, [r4, #4]
 8004c64:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004c68:	68a1      	ldr	r1, [r4, #8]
 8004c6a:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	6921      	ldr	r1, [r4, #16]
 8004c72:	f001 0102 	and.w	r1, r1, #2
 8004c76:	430b      	orrs	r3, r1
 8004c78:	6961      	ldr	r1, [r4, #20]
 8004c7a:	f001 0101 	and.w	r1, r1, #1
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	69a1      	ldr	r1, [r4, #24]
 8004c82:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004c86:	430b      	orrs	r3, r1
 8004c88:	69e1      	ldr	r1, [r4, #28]
 8004c8a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004c8e:	430b      	orrs	r3, r1
 8004c90:	6a21      	ldr	r1, [r4, #32]
 8004c92:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004c96:	430b      	orrs	r3, r1
 8004c98:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004c9a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004c9e:	6820      	ldr	r0, [r4, #0]
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ca4:	8b63      	ldrh	r3, [r4, #26]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004cac:	f001 0110 	and.w	r1, r1, #16
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cb4:	f001 0108 	and.w	r1, r1, #8
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	68e1      	ldr	r1, [r4, #12]
 8004cbc:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6821      	ldr	r1, [r4, #0]
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cc8:	6822      	ldr	r2, [r4, #0]
 8004cca:	69d3      	ldr	r3, [r2, #28]
 8004ccc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cd0:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004cdc:	bd10      	pop	{r4, pc}
 8004cde:	2b08      	cmp	r3, #8
 8004ce0:	d39c      	bcc.n	8004c1c <HAL_SPI_Init+0x200>
 8004ce2:	4a0a      	ldr	r2, [pc, #40]	; (8004d0c <HAL_SPI_Init+0x2f0>)
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce8:	f013 0f01 	tst.w	r3, #1
 8004cec:	d096      	beq.n	8004c1c <HAL_SPI_Init+0x200>
 8004cee:	e79a      	b.n	8004c26 <HAL_SPI_Init+0x20a>
    hspi->Lock = HAL_UNLOCKED;
 8004cf0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f7fb ffe1 	bl	8000cbc <HAL_SPI_MspInit>
 8004cfa:	e79d      	b.n	8004c38 <HAL_SPI_Init+0x21c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d00:	e7a7      	b.n	8004c52 <HAL_SPI_Init+0x236>
    return HAL_ERROR;
 8004d02:	2001      	movs	r0, #1
}
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	0801304c 	.word	0x0801304c
 8004d0c:	01010100 	.word	0x01010100

08004d10 <HAL_SPI_Transmit_DMA>:
{
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	4604      	mov	r4, r0
 8004d14:	460e      	mov	r6, r1
 8004d16:	4617      	mov	r7, r2
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004d18:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d065      	beq.n	8004dea <HAL_SPI_Transmit_DMA+0xda>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004d1e:	68a3      	ldr	r3, [r4, #8]
 8004d20:	b113      	cbz	r3, 8004d28 <HAL_SPI_Transmit_DMA+0x18>
 8004d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d26:	d166      	bne.n	8004df6 <HAL_SPI_Transmit_DMA+0xe6>
  __HAL_LOCK(hspi);
 8004d28:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	f000 809a 	beq.w	8004e66 <HAL_SPI_Transmit_DMA+0x156>
 8004d32:	2301      	movs	r3, #1
 8004d34:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8004d38:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
 8004d3c:	b2ed      	uxtb	r5, r5
 8004d3e:	429d      	cmp	r5, r3
 8004d40:	f040 808b 	bne.w	8004e5a <HAL_SPI_Transmit_DMA+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8004d44:	2e00      	cmp	r6, #0
 8004d46:	f000 8089 	beq.w	8004e5c <HAL_SPI_Transmit_DMA+0x14c>
 8004d4a:	2f00      	cmp	r7, #0
 8004d4c:	f000 8086 	beq.w	8004e5c <HAL_SPI_Transmit_DMA+0x14c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d50:	2303      	movs	r3, #3
 8004d52:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d5a:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d5c:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d5e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d60:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d62:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d64:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8004d66:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d6a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d6e:	68a3      	ldr	r3, [r4, #8]
 8004d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d74:	d045      	beq.n	8004e02 <HAL_SPI_Transmit_DMA+0xf2>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004d76:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d78:	4a3c      	ldr	r2, [pc, #240]	; (8004e6c <HAL_SPI_Transmit_DMA+0x15c>)
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004d7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d7e:	4a3c      	ldr	r2, [pc, #240]	; (8004e70 <HAL_SPI_Transmit_DMA+0x160>)
 8004d80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004d82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d84:	4a3b      	ldr	r2, [pc, #236]	; (8004e74 <HAL_SPI_Transmit_DMA+0x164>)
 8004d86:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 8004d88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004d8e:	6822      	ldr	r2, [r4, #0]
 8004d90:	6853      	ldr	r3, [r2, #4]
 8004d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d96:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004d98:	68e3      	ldr	r3, [r4, #12]
 8004d9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d9e:	d804      	bhi.n	8004daa <HAL_SPI_Transmit_DMA+0x9a>
 8004da0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da8:	d036      	beq.n	8004e18 <HAL_SPI_Transmit_DMA+0x108>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004daa:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 8004dac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	320c      	adds	r2, #12
 8004db2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004db4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004db6:	f7fc fbcf 	bl	8001558 <HAL_DMA_Start_IT>
 8004dba:	4601      	mov	r1, r0
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d144      	bne.n	8004e4a <HAL_SPI_Transmit_DMA+0x13a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004dc8:	d103      	bne.n	8004dd2 <HAL_SPI_Transmit_DMA+0xc2>
    __HAL_SPI_ENABLE(hspi);
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dd0:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004dd2:	6822      	ldr	r2, [r4, #0]
 8004dd4:	6853      	ldr	r3, [r2, #4]
 8004dd6:	f043 0320 	orr.w	r3, r3, #32
 8004dda:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004ddc:	6822      	ldr	r2, [r4, #0]
 8004dde:	6853      	ldr	r3, [r2, #4]
 8004de0:	f043 0302 	orr.w	r3, r3, #2
 8004de4:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004de6:	460d      	mov	r5, r1
 8004de8:	e038      	b.n	8004e5c <HAL_SPI_Transmit_DMA+0x14c>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004dea:	f240 7145 	movw	r1, #1861	; 0x745
 8004dee:	4822      	ldr	r0, [pc, #136]	; (8004e78 <HAL_SPI_Transmit_DMA+0x168>)
 8004df0:	f7fb ff3d 	bl	8000c6e <assert_failed>
 8004df4:	e793      	b.n	8004d1e <HAL_SPI_Transmit_DMA+0xe>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004df6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 8004dfa:	481f      	ldr	r0, [pc, #124]	; (8004e78 <HAL_SPI_Transmit_DMA+0x168>)
 8004dfc:	f7fb ff37 	bl	8000c6e <assert_failed>
 8004e00:	e792      	b.n	8004d28 <HAL_SPI_Transmit_DMA+0x18>
    __HAL_SPI_DISABLE(hspi);
 8004e02:	6822      	ldr	r2, [r4, #0]
 8004e04:	6813      	ldr	r3, [r2, #0]
 8004e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e0a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004e0c:	6822      	ldr	r2, [r4, #0]
 8004e0e:	6813      	ldr	r3, [r2, #0]
 8004e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	e7ae      	b.n	8004d76 <HAL_SPI_Transmit_DMA+0x66>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004e18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e1a:	f013 0f01 	tst.w	r3, #1
 8004e1e:	d109      	bne.n	8004e34 <HAL_SPI_Transmit_DMA+0x124>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004e20:	6822      	ldr	r2, [r4, #0]
 8004e22:	6853      	ldr	r3, [r2, #4]
 8004e24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e28:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004e2a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e2c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004e30:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004e32:	e7ba      	b.n	8004daa <HAL_SPI_Transmit_DMA+0x9a>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004e34:	6822      	ldr	r2, [r4, #0]
 8004e36:	6853      	ldr	r3, [r2, #4]
 8004e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e3c:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004e3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e40:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004e44:	3301      	adds	r3, #1
 8004e46:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004e48:	e7af      	b.n	8004daa <HAL_SPI_Transmit_DMA+0x9a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e4a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e4c:	f043 0310 	orr.w	r3, r3, #16
 8004e50:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 8004e58:	e000      	b.n	8004e5c <HAL_SPI_Transmit_DMA+0x14c>
    errorcode = HAL_BUSY;
 8004e5a:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004e62:	4628      	mov	r0, r5
 8004e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8004e66:	2502      	movs	r5, #2
 8004e68:	e7fb      	b.n	8004e62 <HAL_SPI_Transmit_DMA+0x152>
 8004e6a:	bf00      	nop
 8004e6c:	080050d5 	.word	0x080050d5
 8004e70:	0800511b 	.word	0x0800511b
 8004e74:	080050f9 	.word	0x080050f9
 8004e78:	0801304c 	.word	0x0801304c

08004e7c <HAL_SPI_TransmitReceive_DMA>:
{
 8004e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7e:	4604      	mov	r4, r0
 8004e80:	460e      	mov	r6, r1
 8004e82:	4617      	mov	r7, r2
 8004e84:	461d      	mov	r5, r3
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8004e86:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d06d      	beq.n	8004f68 <HAL_SPI_TransmitReceive_DMA+0xec>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004e8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d070      	beq.n	8004f74 <HAL_SPI_TransmitReceive_DMA+0xf8>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004e92:	68a3      	ldr	r3, [r4, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d173      	bne.n	8004f80 <HAL_SPI_TransmitReceive_DMA+0x104>
  __HAL_LOCK(hspi);
 8004e98:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	f000 8109 	beq.w	80050b4 <HAL_SPI_TransmitReceive_DMA+0x238>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 8004ea8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004eac:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8004eae:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d00a      	beq.n	8004eca <HAL_SPI_TransmitReceive_DMA+0x4e>
 8004eb4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004eb8:	f040 80ed 	bne.w	8005096 <HAL_SPI_TransmitReceive_DMA+0x21a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ebc:	68a2      	ldr	r2, [r4, #8]
 8004ebe:	2a00      	cmp	r2, #0
 8004ec0:	f040 80ee 	bne.w	80050a0 <HAL_SPI_TransmitReceive_DMA+0x224>
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	f040 80ed 	bne.w	80050a4 <HAL_SPI_TransmitReceive_DMA+0x228>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004eca:	2e00      	cmp	r6, #0
 8004ecc:	f000 80ec 	beq.w	80050a8 <HAL_SPI_TransmitReceive_DMA+0x22c>
 8004ed0:	2f00      	cmp	r7, #0
 8004ed2:	f000 80eb 	beq.w	80050ac <HAL_SPI_TransmitReceive_DMA+0x230>
 8004ed6:	2d00      	cmp	r5, #0
 8004ed8:	f000 80ea 	beq.w	80050b0 <HAL_SPI_TransmitReceive_DMA+0x234>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004edc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d002      	beq.n	8004eec <HAL_SPI_TransmitReceive_DMA+0x70>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ee6:	2305      	movs	r3, #5
 8004ee8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eec:	2300      	movs	r3, #0
 8004eee:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ef0:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ef2:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ef4:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ef6:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ef8:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004efc:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004f00:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f02:	6523      	str	r3, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004f04:	6822      	ldr	r2, [r4, #0]
 8004f06:	6853      	ldr	r3, [r2, #4]
 8004f08:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8004f0c:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f0e:	68e3      	ldr	r3, [r4, #12]
 8004f10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f14:	d93a      	bls.n	8004f8c <HAL_SPI_TransmitReceive_DMA+0x110>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	6853      	ldr	r3, [r2, #4]
 8004f1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f1e:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004f20:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d07b      	beq.n	8005022 <HAL_SPI_TransmitReceive_DMA+0x1a6>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004f2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f2c:	4a62      	ldr	r2, [pc, #392]	; (80050b8 <HAL_SPI_TransmitReceive_DMA+0x23c>)
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004f30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f32:	4a62      	ldr	r2, [pc, #392]	; (80050bc <HAL_SPI_TransmitReceive_DMA+0x240>)
 8004f34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004f36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f38:	4a61      	ldr	r2, [pc, #388]	; (80050c0 <HAL_SPI_TransmitReceive_DMA+0x244>)
 8004f3a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8004f3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f3e:	2200      	movs	r2, #0
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004f42:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 8004f44:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004f4c:	310c      	adds	r1, #12
 8004f4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f50:	f7fc fb02 	bl	8001558 <HAL_DMA_Start_IT>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	d06b      	beq.n	8005030 <HAL_SPI_TransmitReceive_DMA+0x1b4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f58:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004f5a:	f043 0310 	orr.w	r3, r3, #16
 8004f5e:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8004f60:	2001      	movs	r0, #1
 8004f62:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 8004f66:	e097      	b.n	8005098 <HAL_SPI_TransmitReceive_DMA+0x21c>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8004f68:	f640 0156 	movw	r1, #2134	; 0x856
 8004f6c:	4855      	ldr	r0, [pc, #340]	; (80050c4 <HAL_SPI_TransmitReceive_DMA+0x248>)
 8004f6e:	f7fb fe7e 	bl	8000c6e <assert_failed>
 8004f72:	e78b      	b.n	8004e8c <HAL_SPI_TransmitReceive_DMA+0x10>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004f74:	f640 0157 	movw	r1, #2135	; 0x857
 8004f78:	4852      	ldr	r0, [pc, #328]	; (80050c4 <HAL_SPI_TransmitReceive_DMA+0x248>)
 8004f7a:	f7fb fe78 	bl	8000c6e <assert_failed>
 8004f7e:	e788      	b.n	8004e92 <HAL_SPI_TransmitReceive_DMA+0x16>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004f80:	f640 015a 	movw	r1, #2138	; 0x85a
 8004f84:	484f      	ldr	r0, [pc, #316]	; (80050c4 <HAL_SPI_TransmitReceive_DMA+0x248>)
 8004f86:	f7fb fe72 	bl	8000c6e <assert_failed>
 8004f8a:	e785      	b.n	8004e98 <HAL_SPI_TransmitReceive_DMA+0x1c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f8c:	6822      	ldr	r2, [r4, #0]
 8004f8e:	6853      	ldr	r3, [r2, #4]
 8004f90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f94:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9e:	d01a      	beq.n	8004fd6 <HAL_SPI_TransmitReceive_DMA+0x15a>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa8:	d1ba      	bne.n	8004f20 <HAL_SPI_TransmitReceive_DMA+0xa4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004faa:	6822      	ldr	r2, [r4, #0]
 8004fac:	6853      	ldr	r3, [r2, #4]
 8004fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fb2:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004fb4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004fb8:	f013 0f01 	tst.w	r3, #1
 8004fbc:	d124      	bne.n	8005008 <HAL_SPI_TransmitReceive_DMA+0x18c>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004fbe:	6822      	ldr	r2, [r4, #0]
 8004fc0:	6853      	ldr	r3, [r2, #4]
 8004fc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fc6:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004fc8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004fcc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004fd0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8004fd4:	e7a4      	b.n	8004f20 <HAL_SPI_TransmitReceive_DMA+0xa4>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004fd6:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8004fd8:	f013 0f01 	tst.w	r3, #1
 8004fdc:	d109      	bne.n	8004ff2 <HAL_SPI_TransmitReceive_DMA+0x176>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004fde:	6822      	ldr	r2, [r4, #0]
 8004fe0:	6853      	ldr	r3, [r2, #4]
 8004fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fe6:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004fe8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fea:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004fee:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004ff0:	e7d6      	b.n	8004fa0 <HAL_SPI_TransmitReceive_DMA+0x124>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	6853      	ldr	r3, [r2, #4]
 8004ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ffa:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004ffc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ffe:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8005002:	3301      	adds	r3, #1
 8005004:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005006:	e7cb      	b.n	8004fa0 <HAL_SPI_TransmitReceive_DMA+0x124>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005008:	6822      	ldr	r2, [r4, #0]
 800500a:	6853      	ldr	r3, [r2, #4]
 800500c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005010:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005012:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005016:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800501a:	3301      	adds	r3, #1
 800501c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8005020:	e77e      	b.n	8004f20 <HAL_SPI_TransmitReceive_DMA+0xa4>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005022:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005024:	4a28      	ldr	r2, [pc, #160]	; (80050c8 <HAL_SPI_TransmitReceive_DMA+0x24c>)
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005028:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800502a:	4a28      	ldr	r2, [pc, #160]	; (80050cc <HAL_SPI_TransmitReceive_DMA+0x250>)
 800502c:	62da      	str	r2, [r3, #44]	; 0x2c
 800502e:	e782      	b.n	8004f36 <HAL_SPI_TransmitReceive_DMA+0xba>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005030:	6822      	ldr	r2, [r4, #0]
 8005032:	6853      	ldr	r3, [r2, #4]
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800503a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800503c:	2300      	movs	r3, #0
 800503e:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005040:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005042:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005044:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005046:	6353      	str	r3, [r2, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005048:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800504a:	6393      	str	r3, [r2, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800504c:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 800504e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005050:	b29b      	uxth	r3, r3
 8005052:	320c      	adds	r2, #12
 8005054:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005056:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005058:	f7fc fa7e 	bl	8001558 <HAL_DMA_Start_IT>
 800505c:	b998      	cbnz	r0, 8005086 <HAL_SPI_TransmitReceive_DMA+0x20a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005066:	d103      	bne.n	8005070 <HAL_SPI_TransmitReceive_DMA+0x1f4>
    __HAL_SPI_ENABLE(hspi);
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800506e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005070:	6822      	ldr	r2, [r4, #0]
 8005072:	6853      	ldr	r3, [r2, #4]
 8005074:	f043 0320 	orr.w	r3, r3, #32
 8005078:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800507a:	6822      	ldr	r2, [r4, #0]
 800507c:	6853      	ldr	r3, [r2, #4]
 800507e:	f043 0302 	orr.w	r3, r3, #2
 8005082:	6053      	str	r3, [r2, #4]
 8005084:	e008      	b.n	8005098 <HAL_SPI_TransmitReceive_DMA+0x21c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005086:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005088:	f043 0310 	orr.w	r3, r3, #16
 800508c:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800508e:	2001      	movs	r0, #1
 8005090:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 8005094:	e000      	b.n	8005098 <HAL_SPI_TransmitReceive_DMA+0x21c>
    errorcode = HAL_BUSY;
 8005096:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005098:	2300      	movs	r3, #0
 800509a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800509e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    errorcode = HAL_BUSY;
 80050a0:	2002      	movs	r0, #2
 80050a2:	e7f9      	b.n	8005098 <HAL_SPI_TransmitReceive_DMA+0x21c>
 80050a4:	2002      	movs	r0, #2
 80050a6:	e7f7      	b.n	8005098 <HAL_SPI_TransmitReceive_DMA+0x21c>
    errorcode = HAL_ERROR;
 80050a8:	2001      	movs	r0, #1
 80050aa:	e7f5      	b.n	8005098 <HAL_SPI_TransmitReceive_DMA+0x21c>
 80050ac:	2001      	movs	r0, #1
 80050ae:	e7f3      	b.n	8005098 <HAL_SPI_TransmitReceive_DMA+0x21c>
 80050b0:	2001      	movs	r0, #1
 80050b2:	e7f1      	b.n	8005098 <HAL_SPI_TransmitReceive_DMA+0x21c>
  __HAL_LOCK(hspi);
 80050b4:	2002      	movs	r0, #2
 80050b6:	e7f2      	b.n	800509e <HAL_SPI_TransmitReceive_DMA+0x222>
 80050b8:	080050ed 	.word	0x080050ed
 80050bc:	080051fb 	.word	0x080051fb
 80050c0:	080050f9 	.word	0x080050f9
 80050c4:	0801304c 	.word	0x0801304c
 80050c8:	080050e1 	.word	0x080050e1
 80050cc:	0800518b 	.word	0x0800518b

080050d0 <HAL_SPI_RxCpltCallback>:
}
 80050d0:	4770      	bx	lr

080050d2 <HAL_SPI_TxHalfCpltCallback>:
}
 80050d2:	4770      	bx	lr

080050d4 <SPI_DMAHalfTransmitCplt>:
{
 80050d4:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80050d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80050d8:	f7ff fffb 	bl	80050d2 <HAL_SPI_TxHalfCpltCallback>
}
 80050dc:	bd08      	pop	{r3, pc}

080050de <HAL_SPI_RxHalfCpltCallback>:
}
 80050de:	4770      	bx	lr

080050e0 <SPI_DMAHalfReceiveCplt>:
{
 80050e0:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80050e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80050e4:	f7ff fffb 	bl	80050de <HAL_SPI_RxHalfCpltCallback>
}
 80050e8:	bd08      	pop	{r3, pc}

080050ea <HAL_SPI_TxRxHalfCpltCallback>:
}
 80050ea:	4770      	bx	lr

080050ec <SPI_DMAHalfTransmitReceiveCplt>:
{
 80050ec:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80050ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80050f0:	f7ff fffb 	bl	80050ea <HAL_SPI_TxRxHalfCpltCallback>
}
 80050f4:	bd08      	pop	{r3, pc}

080050f6 <HAL_SPI_ErrorCallback>:
}
 80050f6:	4770      	bx	lr

080050f8 <SPI_DMAError>:
{
 80050f8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80050fc:	6802      	ldr	r2, [r0, #0]
 80050fe:	6853      	ldr	r3, [r2, #4]
 8005100:	f023 0303 	bic.w	r3, r3, #3
 8005104:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005106:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005108:	f043 0310 	orr.w	r3, r3, #16
 800510c:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800510e:	2301      	movs	r3, #1
 8005110:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8005114:	f7ff ffef 	bl	80050f6 <HAL_SPI_ErrorCallback>
}
 8005118:	bd08      	pop	{r3, pc}

0800511a <SPI_DMATransmitCplt>:
{
 800511a:	b530      	push	{r4, r5, lr}
 800511c:	b083      	sub	sp, #12
 800511e:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005120:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8005122:	f7fc f83b 	bl	800119c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005126:	682b      	ldr	r3, [r5, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f013 0f20 	tst.w	r3, #32
 800512e:	d123      	bne.n	8005178 <SPI_DMATransmitCplt+0x5e>
 8005130:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005132:	6821      	ldr	r1, [r4, #0]
 8005134:	684b      	ldr	r3, [r1, #4]
 8005136:	f023 0320 	bic.w	r3, r3, #32
 800513a:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800513c:	6821      	ldr	r1, [r4, #0]
 800513e:	684b      	ldr	r3, [r1, #4]
 8005140:	f023 0302 	bic.w	r3, r3, #2
 8005144:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005146:	2164      	movs	r1, #100	; 0x64
 8005148:	4620      	mov	r0, r4
 800514a:	f7ff fbf5 	bl	8004938 <SPI_EndRxTxTransaction>
 800514e:	b118      	cbz	r0, 8005158 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005150:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005152:	f043 0320 	orr.w	r3, r3, #32
 8005156:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005158:	68a3      	ldr	r3, [r4, #8]
 800515a:	b933      	cbnz	r3, 800516a <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	9201      	str	r2, [sp, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800516e:	2301      	movs	r3, #1
 8005170:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005174:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005176:	b923      	cbnz	r3, 8005182 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 8005178:	4620      	mov	r0, r4
 800517a:	f009 fdcd 	bl	800ed18 <HAL_SPI_TxCpltCallback>
}
 800517e:	b003      	add	sp, #12
 8005180:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8005182:	4620      	mov	r0, r4
 8005184:	f7ff ffb7 	bl	80050f6 <HAL_SPI_ErrorCallback>
      return;
 8005188:	e7f9      	b.n	800517e <SPI_DMATransmitCplt+0x64>

0800518a <SPI_DMAReceiveCplt>:
{
 800518a:	b538      	push	{r3, r4, r5, lr}
 800518c:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800518e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8005190:	f7fc f804 	bl	800119c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f013 0f20 	tst.w	r3, #32
 800519c:	d11f      	bne.n	80051de <SPI_DMAReceiveCplt+0x54>
 800519e:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80051a0:	6821      	ldr	r1, [r4, #0]
 80051a2:	684b      	ldr	r3, [r1, #4]
 80051a4:	f023 0320 	bic.w	r3, r3, #32
 80051a8:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80051aa:	68a3      	ldr	r3, [r4, #8]
 80051ac:	b91b      	cbnz	r3, 80051b6 <SPI_DMAReceiveCplt+0x2c>
 80051ae:	6863      	ldr	r3, [r4, #4]
 80051b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b4:	d017      	beq.n	80051e6 <SPI_DMAReceiveCplt+0x5c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80051b6:	6821      	ldr	r1, [r4, #0]
 80051b8:	684b      	ldr	r3, [r1, #4]
 80051ba:	f023 0301 	bic.w	r3, r3, #1
 80051be:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80051c0:	2164      	movs	r1, #100	; 0x64
 80051c2:	4620      	mov	r0, r4
 80051c4:	f7ff fbe9 	bl	800499a <SPI_EndRxTransaction>
 80051c8:	b108      	cbz	r0, 80051ce <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ca:	2320      	movs	r3, #32
 80051cc:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80051dc:	b94b      	cbnz	r3, 80051f2 <SPI_DMAReceiveCplt+0x68>
  HAL_SPI_RxCpltCallback(hspi);
 80051de:	4620      	mov	r0, r4
 80051e0:	f7ff ff76 	bl	80050d0 <HAL_SPI_RxCpltCallback>
}
 80051e4:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80051e6:	6821      	ldr	r1, [r4, #0]
 80051e8:	684b      	ldr	r3, [r1, #4]
 80051ea:	f023 0303 	bic.w	r3, r3, #3
 80051ee:	604b      	str	r3, [r1, #4]
 80051f0:	e7e6      	b.n	80051c0 <SPI_DMAReceiveCplt+0x36>
      HAL_SPI_ErrorCallback(hspi);
 80051f2:	4620      	mov	r0, r4
 80051f4:	f7ff ff7f 	bl	80050f6 <HAL_SPI_ErrorCallback>
      return;
 80051f8:	e7f4      	b.n	80051e4 <SPI_DMAReceiveCplt+0x5a>

080051fa <SPI_DMATransmitReceiveCplt>:
{
 80051fa:	b538      	push	{r3, r4, r5, lr}
 80051fc:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051fe:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8005200:	f7fb ffcc 	bl	800119c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f013 0f20 	tst.w	r3, #32
 800520c:	d11c      	bne.n	8005248 <SPI_DMATransmitReceiveCplt+0x4e>
 800520e:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005210:	6821      	ldr	r1, [r4, #0]
 8005212:	684b      	ldr	r3, [r1, #4]
 8005214:	f023 0320 	bic.w	r3, r3, #32
 8005218:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800521a:	2164      	movs	r1, #100	; 0x64
 800521c:	4620      	mov	r0, r4
 800521e:	f7ff fb8b 	bl	8004938 <SPI_EndRxTxTransaction>
 8005222:	b118      	cbz	r0, 800522c <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005224:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005226:	f043 0320 	orr.w	r3, r3, #32
 800522a:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800522c:	6822      	ldr	r2, [r4, #0]
 800522e:	6853      	ldr	r3, [r2, #4]
 8005230:	f023 0303 	bic.w	r3, r3, #3
 8005234:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800523a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800523e:	2301      	movs	r3, #1
 8005240:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005244:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005246:	b91b      	cbnz	r3, 8005250 <SPI_DMATransmitReceiveCplt+0x56>
  HAL_SPI_TxRxCpltCallback(hspi);
 8005248:	4620      	mov	r0, r4
 800524a:	f009 fd6d 	bl	800ed28 <HAL_SPI_TxRxCpltCallback>
}
 800524e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8005250:	4620      	mov	r0, r4
 8005252:	f7ff ff50 	bl	80050f6 <HAL_SPI_ErrorCallback>
      return;
 8005256:	e7fa      	b.n	800524e <SPI_DMATransmitReceiveCplt+0x54>

08005258 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005258:	4770      	bx	lr
	...

0800525c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800525c:	b510      	push	{r4, lr}
 800525e:	4604      	mov	r4, r0
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005260:	6803      	ldr	r3, [r0, #0]
 8005262:	4a3c      	ldr	r2, [pc, #240]	; (8005354 <HAL_TIM_Base_Start_IT+0xf8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d02f      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x6c>
 8005268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526c:	d02c      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x6c>
 800526e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005272:	4293      	cmp	r3, r2
 8005274:	d028      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x6c>
 8005276:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800527a:	4293      	cmp	r3, r2
 800527c:	d024      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x6c>
 800527e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005282:	4293      	cmp	r3, r2
 8005284:	d020      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x6c>
 8005286:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800528a:	4293      	cmp	r3, r2
 800528c:	d01c      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x6c>
 800528e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005292:	4293      	cmp	r3, r2
 8005294:	d018      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x6c>
 8005296:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800529a:	4293      	cmp	r3, r2
 800529c:	d014      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x6c>
 800529e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d010      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x6c>
 80052a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00c      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x6c>
 80052ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d008      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x6c>
 80052b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d004      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x6c>
 80052be:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80052c2:	4825      	ldr	r0, [pc, #148]	; (8005358 <HAL_TIM_Base_Start_IT+0xfc>)
 80052c4:	f7fb fcd3 	bl	8000c6e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d13a      	bne.n	8005348 <HAL_TIM_Base_Start_IT+0xec>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d2:	2302      	movs	r3, #2
 80052d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052d8:	6822      	ldr	r2, [r4, #0]
 80052da:	68d3      	ldr	r3, [r2, #12]
 80052dc:	f043 0301 	orr.w	r3, r3, #1
 80052e0:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	4a1b      	ldr	r2, [pc, #108]	; (8005354 <HAL_TIM_Base_Start_IT+0xf8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d020      	beq.n	800532c <HAL_TIM_Base_Start_IT+0xd0>
 80052ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ee:	d01d      	beq.n	800532c <HAL_TIM_Base_Start_IT+0xd0>
 80052f0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d019      	beq.n	800532c <HAL_TIM_Base_Start_IT+0xd0>
 80052f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d015      	beq.n	800532c <HAL_TIM_Base_Start_IT+0xd0>
 8005300:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005304:	4293      	cmp	r3, r2
 8005306:	d011      	beq.n	800532c <HAL_TIM_Base_Start_IT+0xd0>
 8005308:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800530c:	4293      	cmp	r3, r2
 800530e:	d00d      	beq.n	800532c <HAL_TIM_Base_Start_IT+0xd0>
 8005310:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005314:	4293      	cmp	r3, r2
 8005316:	d009      	beq.n	800532c <HAL_TIM_Base_Start_IT+0xd0>
 8005318:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800531c:	4293      	cmp	r3, r2
 800531e:	d005      	beq.n	800532c <HAL_TIM_Base_Start_IT+0xd0>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005328:	2000      	movs	r0, #0
 800532a:	e00e      	b.n	800534a <HAL_TIM_Base_Start_IT+0xee>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800532c:	6899      	ldr	r1, [r3, #8]
 800532e:	4a0b      	ldr	r2, [pc, #44]	; (800535c <HAL_TIM_Base_Start_IT+0x100>)
 8005330:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005332:	2a06      	cmp	r2, #6
 8005334:	d00a      	beq.n	800534c <HAL_TIM_Base_Start_IT+0xf0>
 8005336:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800533a:	d009      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0xf4>
      __HAL_TIM_ENABLE(htim);
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005344:	2000      	movs	r0, #0
 8005346:	e000      	b.n	800534a <HAL_TIM_Base_Start_IT+0xee>
    return HAL_ERROR;
 8005348:	2001      	movs	r0, #1
}
 800534a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800534c:	2000      	movs	r0, #0
 800534e:	e7fc      	b.n	800534a <HAL_TIM_Base_Start_IT+0xee>
 8005350:	2000      	movs	r0, #0
 8005352:	e7fa      	b.n	800534a <HAL_TIM_Base_Start_IT+0xee>
 8005354:	40012c00 	.word	0x40012c00
 8005358:	08013084 	.word	0x08013084
 800535c:	00010007 	.word	0x00010007

08005360 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005360:	4770      	bx	lr

08005362 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005362:	4770      	bx	lr

08005364 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005364:	4770      	bx	lr

08005366 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005366:	4770      	bx	lr

08005368 <HAL_TIM_IRQHandler>:
{
 8005368:	b510      	push	{r4, lr}
 800536a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800536c:	6803      	ldr	r3, [r0, #0]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	f012 0f02 	tst.w	r2, #2
 8005374:	d012      	beq.n	800539c <HAL_TIM_IRQHandler+0x34>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	f012 0f02 	tst.w	r2, #2
 800537c:	d00e      	beq.n	800539c <HAL_TIM_IRQHandler+0x34>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800537e:	f06f 0202 	mvn.w	r2, #2
 8005382:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005384:	2301      	movs	r3, #1
 8005386:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005388:	6803      	ldr	r3, [r0, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f013 0f03 	tst.w	r3, #3
 8005390:	f000 809f 	beq.w	80054d2 <HAL_TIM_IRQHandler+0x16a>
          HAL_TIM_IC_CaptureCallback(htim);
 8005394:	f7ff ffe5 	bl	8005362 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005398:	2300      	movs	r3, #0
 800539a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	f012 0f04 	tst.w	r2, #4
 80053a4:	d013      	beq.n	80053ce <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	f012 0f04 	tst.w	r2, #4
 80053ac:	d00f      	beq.n	80053ce <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053ae:	f06f 0204 	mvn.w	r2, #4
 80053b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053b4:	2302      	movs	r3, #2
 80053b6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80053c0:	f000 808d 	beq.w	80054de <HAL_TIM_IRQHandler+0x176>
        HAL_TIM_IC_CaptureCallback(htim);
 80053c4:	4620      	mov	r0, r4
 80053c6:	f7ff ffcc 	bl	8005362 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ca:	2300      	movs	r3, #0
 80053cc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	f012 0f08 	tst.w	r2, #8
 80053d6:	d012      	beq.n	80053fe <HAL_TIM_IRQHandler+0x96>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	f012 0f08 	tst.w	r2, #8
 80053de:	d00e      	beq.n	80053fe <HAL_TIM_IRQHandler+0x96>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053e0:	f06f 0208 	mvn.w	r2, #8
 80053e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e6:	2304      	movs	r3, #4
 80053e8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f013 0f03 	tst.w	r3, #3
 80053f2:	d07b      	beq.n	80054ec <HAL_TIM_IRQHandler+0x184>
        HAL_TIM_IC_CaptureCallback(htim);
 80053f4:	4620      	mov	r0, r4
 80053f6:	f7ff ffb4 	bl	8005362 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	2300      	movs	r3, #0
 80053fc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	691a      	ldr	r2, [r3, #16]
 8005402:	f012 0f10 	tst.w	r2, #16
 8005406:	d012      	beq.n	800542e <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	f012 0f10 	tst.w	r2, #16
 800540e:	d00e      	beq.n	800542e <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005410:	f06f 0210 	mvn.w	r2, #16
 8005414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005416:	2308      	movs	r3, #8
 8005418:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005422:	d06a      	beq.n	80054fa <HAL_TIM_IRQHandler+0x192>
        HAL_TIM_IC_CaptureCallback(htim);
 8005424:	4620      	mov	r0, r4
 8005426:	f7ff ff9c 	bl	8005362 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	2300      	movs	r3, #0
 800542c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	f012 0f01 	tst.w	r2, #1
 8005436:	d003      	beq.n	8005440 <HAL_TIM_IRQHandler+0xd8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	f012 0f01 	tst.w	r2, #1
 800543e:	d163      	bne.n	8005508 <HAL_TIM_IRQHandler+0x1a0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005450:	d161      	bne.n	8005516 <HAL_TIM_IRQHandler+0x1ae>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	f412 7f80 	tst.w	r2, #256	; 0x100
 800545a:	d003      	beq.n	8005464 <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005462:	d15f      	bne.n	8005524 <HAL_TIM_IRQHandler+0x1bc>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	f012 0f40 	tst.w	r2, #64	; 0x40
 800546c:	d003      	beq.n	8005476 <HAL_TIM_IRQHandler+0x10e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005474:	d15d      	bne.n	8005532 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	f012 0f20 	tst.w	r2, #32
 800547e:	d003      	beq.n	8005488 <HAL_TIM_IRQHandler+0x120>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	f012 0f20 	tst.w	r2, #32
 8005486:	d15b      	bne.n	8005540 <HAL_TIM_IRQHandler+0x1d8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8005490:	d003      	beq.n	800549a <HAL_TIM_IRQHandler+0x132>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8005498:	d159      	bne.n	800554e <HAL_TIM_IRQHandler+0x1e6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80054a2:	d003      	beq.n	80054ac <HAL_TIM_IRQHandler+0x144>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80054aa:	d157      	bne.n	800555c <HAL_TIM_IRQHandler+0x1f4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80054b4:	d003      	beq.n	80054be <HAL_TIM_IRQHandler+0x156>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80054bc:	d155      	bne.n	800556a <HAL_TIM_IRQHandler+0x202>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 80054c6:	d003      	beq.n	80054d0 <HAL_TIM_IRQHandler+0x168>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 80054ce:	d153      	bne.n	8005578 <HAL_TIM_IRQHandler+0x210>
}
 80054d0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	f7ff ff45 	bl	8005360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d6:	4620      	mov	r0, r4
 80054d8:	f7ff ff44 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
 80054dc:	e75c      	b.n	8005398 <HAL_TIM_IRQHandler+0x30>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	4620      	mov	r0, r4
 80054e0:	f7ff ff3e 	bl	8005360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	4620      	mov	r0, r4
 80054e6:	f7ff ff3d 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
 80054ea:	e76e      	b.n	80053ca <HAL_TIM_IRQHandler+0x62>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ec:	4620      	mov	r0, r4
 80054ee:	f7ff ff37 	bl	8005360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f2:	4620      	mov	r0, r4
 80054f4:	f7ff ff36 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
 80054f8:	e77f      	b.n	80053fa <HAL_TIM_IRQHandler+0x92>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fa:	4620      	mov	r0, r4
 80054fc:	f7ff ff30 	bl	8005360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005500:	4620      	mov	r0, r4
 8005502:	f7ff ff2f 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
 8005506:	e790      	b.n	800542a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005508:	f06f 0201 	mvn.w	r2, #1
 800550c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800550e:	4620      	mov	r0, r4
 8005510:	f7fb fb4e 	bl	8000bb0 <HAL_TIM_PeriodElapsedCallback>
 8005514:	e794      	b.n	8005440 <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005516:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800551a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800551c:	4620      	mov	r0, r4
 800551e:	f000 f938 	bl	8005792 <HAL_TIMEx_BreakCallback>
 8005522:	e796      	b.n	8005452 <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005524:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005528:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800552a:	4620      	mov	r0, r4
 800552c:	f000 f932 	bl	8005794 <HAL_TIMEx_Break2Callback>
 8005530:	e798      	b.n	8005464 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005536:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005538:	4620      	mov	r0, r4
 800553a:	f7ff ff14 	bl	8005366 <HAL_TIM_TriggerCallback>
 800553e:	e79a      	b.n	8005476 <HAL_TIM_IRQHandler+0x10e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005540:	f06f 0220 	mvn.w	r2, #32
 8005544:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005546:	4620      	mov	r0, r4
 8005548:	f000 f922 	bl	8005790 <HAL_TIMEx_CommutCallback>
 800554c:	e79c      	b.n	8005488 <HAL_TIM_IRQHandler+0x120>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800554e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005552:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005554:	4620      	mov	r0, r4
 8005556:	f000 f91e 	bl	8005796 <HAL_TIMEx_EncoderIndexCallback>
 800555a:	e79e      	b.n	800549a <HAL_TIM_IRQHandler+0x132>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800555c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005560:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005562:	4620      	mov	r0, r4
 8005564:	f000 f918 	bl	8005798 <HAL_TIMEx_DirectionChangeCallback>
 8005568:	e7a0      	b.n	80054ac <HAL_TIM_IRQHandler+0x144>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800556a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800556e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8005570:	4620      	mov	r0, r4
 8005572:	f000 f912 	bl	800579a <HAL_TIMEx_IndexErrorCallback>
 8005576:	e7a2      	b.n	80054be <HAL_TIM_IRQHandler+0x156>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005578:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800557c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 800557e:	4620      	mov	r0, r4
 8005580:	f000 f90c 	bl	800579c <HAL_TIMEx_TransitionErrorCallback>
}
 8005584:	e7a4      	b.n	80054d0 <HAL_TIM_IRQHandler+0x168>
	...

08005588 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005588:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800558a:	4a36      	ldr	r2, [pc, #216]	; (8005664 <TIM_Base_SetConfig+0xdc>)
 800558c:	4290      	cmp	r0, r2
 800558e:	d016      	beq.n	80055be <TIM_Base_SetConfig+0x36>
 8005590:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005594:	d013      	beq.n	80055be <TIM_Base_SetConfig+0x36>
 8005596:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800559a:	4290      	cmp	r0, r2
 800559c:	d00f      	beq.n	80055be <TIM_Base_SetConfig+0x36>
 800559e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055a2:	4290      	cmp	r0, r2
 80055a4:	d00b      	beq.n	80055be <TIM_Base_SetConfig+0x36>
 80055a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055aa:	4290      	cmp	r0, r2
 80055ac:	d007      	beq.n	80055be <TIM_Base_SetConfig+0x36>
 80055ae:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80055b2:	4290      	cmp	r0, r2
 80055b4:	d003      	beq.n	80055be <TIM_Base_SetConfig+0x36>
 80055b6:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80055ba:	4290      	cmp	r0, r2
 80055bc:	d103      	bne.n	80055c6 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80055c2:	684a      	ldr	r2, [r1, #4]
 80055c4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055c6:	4a27      	ldr	r2, [pc, #156]	; (8005664 <TIM_Base_SetConfig+0xdc>)
 80055c8:	4290      	cmp	r0, r2
 80055ca:	d022      	beq.n	8005612 <TIM_Base_SetConfig+0x8a>
 80055cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80055d0:	d01f      	beq.n	8005612 <TIM_Base_SetConfig+0x8a>
 80055d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80055d6:	4290      	cmp	r0, r2
 80055d8:	d01b      	beq.n	8005612 <TIM_Base_SetConfig+0x8a>
 80055da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055de:	4290      	cmp	r0, r2
 80055e0:	d017      	beq.n	8005612 <TIM_Base_SetConfig+0x8a>
 80055e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055e6:	4290      	cmp	r0, r2
 80055e8:	d013      	beq.n	8005612 <TIM_Base_SetConfig+0x8a>
 80055ea:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80055ee:	4290      	cmp	r0, r2
 80055f0:	d00f      	beq.n	8005612 <TIM_Base_SetConfig+0x8a>
 80055f2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80055f6:	4290      	cmp	r0, r2
 80055f8:	d00b      	beq.n	8005612 <TIM_Base_SetConfig+0x8a>
 80055fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055fe:	4290      	cmp	r0, r2
 8005600:	d007      	beq.n	8005612 <TIM_Base_SetConfig+0x8a>
 8005602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005606:	4290      	cmp	r0, r2
 8005608:	d003      	beq.n	8005612 <TIM_Base_SetConfig+0x8a>
 800560a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800560e:	4290      	cmp	r0, r2
 8005610:	d103      	bne.n	800561a <TIM_Base_SetConfig+0x92>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005616:	68ca      	ldr	r2, [r1, #12]
 8005618:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800561a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800561e:	694a      	ldr	r2, [r1, #20]
 8005620:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005622:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005624:	688b      	ldr	r3, [r1, #8]
 8005626:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005628:	680b      	ldr	r3, [r1, #0]
 800562a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800562c:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <TIM_Base_SetConfig+0xdc>)
 800562e:	4298      	cmp	r0, r3
 8005630:	d013      	beq.n	800565a <TIM_Base_SetConfig+0xd2>
 8005632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005636:	4298      	cmp	r0, r3
 8005638:	d00f      	beq.n	800565a <TIM_Base_SetConfig+0xd2>
 800563a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800563e:	4298      	cmp	r0, r3
 8005640:	d00b      	beq.n	800565a <TIM_Base_SetConfig+0xd2>
 8005642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005646:	4298      	cmp	r0, r3
 8005648:	d007      	beq.n	800565a <TIM_Base_SetConfig+0xd2>
 800564a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800564e:	4298      	cmp	r0, r3
 8005650:	d003      	beq.n	800565a <TIM_Base_SetConfig+0xd2>
 8005652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005656:	4298      	cmp	r0, r3
 8005658:	d101      	bne.n	800565e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800565a:	690b      	ldr	r3, [r1, #16]
 800565c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800565e:	2301      	movs	r3, #1
 8005660:	6143      	str	r3, [r0, #20]
}
 8005662:	4770      	bx	lr
 8005664:	40012c00 	.word	0x40012c00

08005668 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005668:	2800      	cmp	r0, #0
 800566a:	f000 808a 	beq.w	8005782 <HAL_TIM_Base_Init+0x11a>
{
 800566e:	b510      	push	{r4, lr}
 8005670:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005672:	6803      	ldr	r3, [r0, #0]
 8005674:	4a44      	ldr	r2, [pc, #272]	; (8005788 <HAL_TIM_Base_Init+0x120>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d02f      	beq.n	80056da <HAL_TIM_Base_Init+0x72>
 800567a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567e:	d02c      	beq.n	80056da <HAL_TIM_Base_Init+0x72>
 8005680:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005684:	4293      	cmp	r3, r2
 8005686:	d028      	beq.n	80056da <HAL_TIM_Base_Init+0x72>
 8005688:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800568c:	4293      	cmp	r3, r2
 800568e:	d024      	beq.n	80056da <HAL_TIM_Base_Init+0x72>
 8005690:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005694:	4293      	cmp	r3, r2
 8005696:	d020      	beq.n	80056da <HAL_TIM_Base_Init+0x72>
 8005698:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800569c:	4293      	cmp	r3, r2
 800569e:	d01c      	beq.n	80056da <HAL_TIM_Base_Init+0x72>
 80056a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <HAL_TIM_Base_Init+0x72>
 80056a8:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d014      	beq.n	80056da <HAL_TIM_Base_Init+0x72>
 80056b0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d010      	beq.n	80056da <HAL_TIM_Base_Init+0x72>
 80056b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00c      	beq.n	80056da <HAL_TIM_Base_Init+0x72>
 80056c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d008      	beq.n	80056da <HAL_TIM_Base_Init+0x72>
 80056c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_TIM_Base_Init+0x72>
 80056d0:	f44f 7191 	mov.w	r1, #290	; 0x122
 80056d4:	482d      	ldr	r0, [pc, #180]	; (800578c <HAL_TIM_Base_Init+0x124>)
 80056d6:	f7fb faca 	bl	8000c6e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80056da:	68a3      	ldr	r3, [r4, #8]
 80056dc:	b13b      	cbz	r3, 80056ee <HAL_TIM_Base_Init+0x86>
 80056de:	2b10      	cmp	r3, #16
 80056e0:	d005      	beq.n	80056ee <HAL_TIM_Base_Init+0x86>
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	d003      	beq.n	80056ee <HAL_TIM_Base_Init+0x86>
 80056e6:	2b40      	cmp	r3, #64	; 0x40
 80056e8:	d001      	beq.n	80056ee <HAL_TIM_Base_Init+0x86>
 80056ea:	2b60      	cmp	r3, #96	; 0x60
 80056ec:	d131      	bne.n	8005752 <HAL_TIM_Base_Init+0xea>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	b12b      	cbz	r3, 80056fe <HAL_TIM_Base_Init+0x96>
 80056f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f6:	d002      	beq.n	80056fe <HAL_TIM_Base_Init+0x96>
 80056f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056fc:	d12f      	bne.n	800575e <HAL_TIM_Base_Init+0xf6>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80056fe:	69a3      	ldr	r3, [r4, #24]
 8005700:	b10b      	cbz	r3, 8005706 <HAL_TIM_Base_Init+0x9e>
 8005702:	2b80      	cmp	r3, #128	; 0x80
 8005704:	d131      	bne.n	800576a <HAL_TIM_Base_Init+0x102>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005706:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800570a:	b3a3      	cbz	r3, 8005776 <HAL_TIM_Base_Init+0x10e>
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	2302      	movs	r3, #2
 800570e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005712:	4621      	mov	r1, r4
 8005714:	f851 0b04 	ldr.w	r0, [r1], #4
 8005718:	f7ff ff36 	bl	8005588 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800571c:	2301      	movs	r3, #1
 800571e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005722:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005726:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800572a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800572e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005732:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800573e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005742:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005746:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800574a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800574e:	2000      	movs	r0, #0
}
 8005750:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005752:	f240 1123 	movw	r1, #291	; 0x123
 8005756:	480d      	ldr	r0, [pc, #52]	; (800578c <HAL_TIM_Base_Init+0x124>)
 8005758:	f7fb fa89 	bl	8000c6e <assert_failed>
 800575c:	e7c7      	b.n	80056ee <HAL_TIM_Base_Init+0x86>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800575e:	f44f 7192 	mov.w	r1, #292	; 0x124
 8005762:	480a      	ldr	r0, [pc, #40]	; (800578c <HAL_TIM_Base_Init+0x124>)
 8005764:	f7fb fa83 	bl	8000c6e <assert_failed>
 8005768:	e7c9      	b.n	80056fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800576a:	f240 1125 	movw	r1, #293	; 0x125
 800576e:	4807      	ldr	r0, [pc, #28]	; (800578c <HAL_TIM_Base_Init+0x124>)
 8005770:	f7fb fa7d 	bl	8000c6e <assert_failed>
 8005774:	e7c7      	b.n	8005706 <HAL_TIM_Base_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 8005776:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800577a:	4620      	mov	r0, r4
 800577c:	f7ff fd6c 	bl	8005258 <HAL_TIM_Base_MspInit>
 8005780:	e7c4      	b.n	800570c <HAL_TIM_Base_Init+0xa4>
    return HAL_ERROR;
 8005782:	2001      	movs	r0, #1
}
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40012c00 	.word	0x40012c00
 800578c:	08013084 	.word	0x08013084

08005790 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005790:	4770      	bx	lr

08005792 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005792:	4770      	bx	lr

08005794 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005794:	4770      	bx	lr

08005796 <HAL_TIMEx_EncoderIndexCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005796:	4770      	bx	lr

08005798 <HAL_TIMEx_DirectionChangeCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005798:	4770      	bx	lr

0800579a <HAL_TIMEx_IndexErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800579a:	4770      	bx	lr

0800579c <HAL_TIMEx_TransitionErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800579c:	4770      	bx	lr

0800579e <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800579e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	e852 3f00 	ldrex	r3, [r2]
 80057a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	e842 3100 	strex	r1, r3, [r2]
 80057ac:	2900      	cmp	r1, #0
 80057ae:	d1f6      	bne.n	800579e <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80057b0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	f102 0308 	add.w	r3, r2, #8
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	3208      	adds	r2, #8
 80057c0:	e842 3100 	strex	r1, r3, [r2]
 80057c4:	2900      	cmp	r1, #0
 80057c6:	d1f3      	bne.n	80057b0 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057c8:	2320      	movs	r3, #32
 80057ca:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 80057ce:	4770      	bx	lr

080057d0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	e852 3f00 	ldrex	r3, [r2]
 80057d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	e842 3100 	strex	r1, r3, [r2]
 80057de:	2900      	cmp	r1, #0
 80057e0:	d1f6      	bne.n	80057d0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057e2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	f102 0308 	add.w	r3, r2, #8
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057f0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	3208      	adds	r2, #8
 80057f6:	e842 3100 	strex	r1, r3, [r2]
 80057fa:	2900      	cmp	r1, #0
 80057fc:	d1f1      	bne.n	80057e2 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fe:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d006      	beq.n	8005812 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005804:	2320      	movs	r3, #32
 8005806:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580a:	2300      	movs	r3, #0
 800580c:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800580e:	6703      	str	r3, [r0, #112]	; 0x70
}
 8005810:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005812:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	e852 3f00 	ldrex	r3, [r2]
 8005818:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	e842 3100 	strex	r1, r3, [r2]
 8005820:	2900      	cmp	r1, #0
 8005822:	d1f6      	bne.n	8005812 <UART_EndRxTransfer+0x42>
 8005824:	e7ee      	b.n	8005804 <UART_EndRxTransfer+0x34>
	...

08005828 <HAL_UART_Transmit_DMA>:
{
 8005828:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800582a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800582e:	2a20      	cmp	r2, #32
 8005830:	d14a      	bne.n	80058c8 <HAL_UART_Transmit_DMA+0xa0>
{
 8005832:	b510      	push	{r4, lr}
 8005834:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005836:	2900      	cmp	r1, #0
 8005838:	d048      	beq.n	80058cc <HAL_UART_Transmit_DMA+0xa4>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d048      	beq.n	80058d0 <HAL_UART_Transmit_DMA+0xa8>
    __HAL_LOCK(huart);
 800583e:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8005842:	2a01      	cmp	r2, #1
 8005844:	d046      	beq.n	80058d4 <HAL_UART_Transmit_DMA+0xac>
 8005846:	2201      	movs	r2, #1
 8005848:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 800584c:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800584e:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8005852:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005856:	2200      	movs	r2, #0
 8005858:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800585c:	2221      	movs	r2, #33	; 0x21
 800585e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8005862:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005864:	b1e2      	cbz	r2, 80058a0 <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005866:	491c      	ldr	r1, [pc, #112]	; (80058d8 <HAL_UART_Transmit_DMA+0xb0>)
 8005868:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800586a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800586c:	491b      	ldr	r1, [pc, #108]	; (80058dc <HAL_UART_Transmit_DMA+0xb4>)
 800586e:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005870:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005872:	491b      	ldr	r1, [pc, #108]	; (80058e0 <HAL_UART_Transmit_DMA+0xb8>)
 8005874:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005876:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005878:	2100      	movs	r1, #0
 800587a:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800587c:	6802      	ldr	r2, [r0, #0]
 800587e:	3228      	adds	r2, #40	; 0x28
 8005880:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005882:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005884:	f7fb fe68 	bl	8001558 <HAL_DMA_Start_IT>
 8005888:	b150      	cbz	r0, 80058a0 <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800588a:	2310      	movs	r3, #16
 800588c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8005890:	2300      	movs	r3, #0
 8005892:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8005896:	2320      	movs	r3, #32
 8005898:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 800589c:	2001      	movs	r0, #1
 800589e:	e012      	b.n	80058c6 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	2240      	movs	r2, #64	; 0x40
 80058a4:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80058a6:	2300      	movs	r3, #0
 80058a8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	f102 0308 	add.w	r3, r2, #8
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	3208      	adds	r2, #8
 80058bc:	e842 3100 	strex	r1, r3, [r2]
 80058c0:	2900      	cmp	r1, #0
 80058c2:	d1f3      	bne.n	80058ac <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 80058c4:	2000      	movs	r0, #0
}
 80058c6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80058c8:	2002      	movs	r0, #2
}
 80058ca:	4770      	bx	lr
      return HAL_ERROR;
 80058cc:	2001      	movs	r0, #1
 80058ce:	e7fa      	b.n	80058c6 <HAL_UART_Transmit_DMA+0x9e>
 80058d0:	2001      	movs	r0, #1
 80058d2:	e7f8      	b.n	80058c6 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 80058d4:	2002      	movs	r0, #2
 80058d6:	e7f6      	b.n	80058c6 <HAL_UART_Transmit_DMA+0x9e>
 80058d8:	080058e5 	.word	0x080058e5
 80058dc:	08005953 	.word	0x08005953
 80058e0:	0800595f 	.word	0x0800595f

080058e4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80058e4:	b508      	push	{r3, lr}
 80058e6:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058e8:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f013 0f20 	tst.w	r3, #32
 80058f2:	d118      	bne.n	8005926 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	f102 0308 	add.w	r3, r2, #8
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005908:	3208      	adds	r2, #8
 800590a:	e842 3100 	strex	r1, r3, [r2]
 800590e:	2900      	cmp	r1, #0
 8005910:	d1f3      	bne.n	80058fa <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005912:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	e852 3f00 	ldrex	r3, [r2]
 8005918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	e842 3100 	strex	r1, r3, [r2]
 8005920:	2900      	cmp	r1, #0
 8005922:	d1f6      	bne.n	8005912 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005924:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005926:	f009 fa39 	bl	800ed9c <HAL_UART_TxCpltCallback>
}
 800592a:	e7fb      	b.n	8005924 <UART_DMATransmitCplt+0x40>

0800592c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800592c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800592e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	e852 3f00 	ldrex	r3, [r2]
 8005934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	e842 3100 	strex	r1, r3, [r2]
 800593c:	2900      	cmp	r1, #0
 800593e:	d1f6      	bne.n	800592e <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005940:	2320      	movs	r3, #32
 8005942:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800594a:	f009 fa27 	bl	800ed9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800594e:	bd08      	pop	{r3, pc}

08005950 <HAL_UART_TxHalfCpltCallback>:
}
 8005950:	4770      	bx	lr

08005952 <UART_DMATxHalfCplt>:
{
 8005952:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005954:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005956:	f7ff fffb 	bl	8005950 <HAL_UART_TxHalfCpltCallback>
}
 800595a:	bd08      	pop	{r3, pc}

0800595c <HAL_UART_ErrorCallback>:
}
 800595c:	4770      	bx	lr

0800595e <UART_DMAError>:
{
 800595e:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005960:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005962:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005966:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005972:	d001      	beq.n	8005978 <UART_DMAError+0x1a>
 8005974:	2a21      	cmp	r2, #33	; 0x21
 8005976:	d010      	beq.n	800599a <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005980:	d001      	beq.n	8005986 <UART_DMAError+0x28>
 8005982:	2d22      	cmp	r5, #34	; 0x22
 8005984:	d010      	beq.n	80059a8 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005986:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800598a:	f043 0310 	orr.w	r3, r3, #16
 800598e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8005992:	4620      	mov	r0, r4
 8005994:	f7ff ffe2 	bl	800595c <HAL_UART_ErrorCallback>
}
 8005998:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80059a0:	4620      	mov	r0, r4
 80059a2:	f7ff fefc 	bl	800579e <UART_EndTxTransfer>
 80059a6:	e7e7      	b.n	8005978 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80059ae:	4620      	mov	r0, r4
 80059b0:	f7ff ff0e 	bl	80057d0 <UART_EndRxTransfer>
 80059b4:	e7e7      	b.n	8005986 <UART_DMAError+0x28>

080059b6 <UART_DMAAbortOnError>:
{
 80059b6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80059c0:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80059c4:	f7ff ffca 	bl	800595c <HAL_UART_ErrorCallback>
}
 80059c8:	bd08      	pop	{r3, pc}

080059ca <HAL_UARTEx_RxEventCallback>:
}
 80059ca:	4770      	bx	lr

080059cc <HAL_UART_IRQHandler>:
{
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059d0:	6801      	ldr	r1, [r0, #0]
 80059d2:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059d4:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059d6:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059d8:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80059dc:	401a      	ands	r2, r3
 80059de:	d108      	bne.n	80059f2 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059e0:	f013 0f20 	tst.w	r3, #32
 80059e4:	d005      	beq.n	80059f2 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80059e6:	f010 0f20 	tst.w	r0, #32
 80059ea:	d134      	bne.n	8005a56 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80059ec:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80059f0:	d131      	bne.n	8005a56 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 80059f2:	b12a      	cbz	r2, 8005a00 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80059f4:	4a95      	ldr	r2, [pc, #596]	; (8005c4c <HAL_UART_IRQHandler+0x280>)
 80059f6:	402a      	ands	r2, r5
 80059f8:	d133      	bne.n	8005a62 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80059fa:	4e95      	ldr	r6, [pc, #596]	; (8005c50 <HAL_UART_IRQHandler+0x284>)
 80059fc:	4230      	tst	r0, r6
 80059fe:	d130      	bne.n	8005a62 <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a00:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005a02:	2a01      	cmp	r2, #1
 8005a04:	f000 80c3 	beq.w	8005b8e <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a08:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005a0c:	d003      	beq.n	8005a16 <HAL_UART_IRQHandler+0x4a>
 8005a0e:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8005a12:	f040 815b 	bne.w	8005ccc <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a1a:	d007      	beq.n	8005a2c <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a1c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005a20:	f040 815b 	bne.w	8005cda <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a24:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8005a28:	f040 8157 	bne.w	8005cda <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a30:	d003      	beq.n	8005a3a <HAL_UART_IRQHandler+0x6e>
 8005a32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a36:	f040 8157 	bne.w	8005ce8 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a3a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005a3e:	d003      	beq.n	8005a48 <HAL_UART_IRQHandler+0x7c>
 8005a40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005a44:	f040 8154 	bne.w	8005cf0 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a48:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005a4c:	d002      	beq.n	8005a54 <HAL_UART_IRQHandler+0x88>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	f2c0 8152 	blt.w	8005cf8 <HAL_UART_IRQHandler+0x32c>
}
 8005a54:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005a56:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0fb      	beq.n	8005a54 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	4798      	blx	r3
      return;
 8005a60:	e7f8      	b.n	8005a54 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a62:	f013 0f01 	tst.w	r3, #1
 8005a66:	d009      	beq.n	8005a7c <HAL_UART_IRQHandler+0xb0>
 8005a68:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005a6c:	d006      	beq.n	8005a7c <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a6e:	2601      	movs	r6, #1
 8005a70:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a72:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005a76:	4331      	orrs	r1, r6
 8005a78:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a7c:	f013 0f02 	tst.w	r3, #2
 8005a80:	d00b      	beq.n	8005a9a <HAL_UART_IRQHandler+0xce>
 8005a82:	f015 0f01 	tst.w	r5, #1
 8005a86:	d008      	beq.n	8005a9a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a88:	6821      	ldr	r1, [r4, #0]
 8005a8a:	2602      	movs	r6, #2
 8005a8c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a8e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005a92:	f041 0104 	orr.w	r1, r1, #4
 8005a96:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a9a:	f013 0f04 	tst.w	r3, #4
 8005a9e:	d00b      	beq.n	8005ab8 <HAL_UART_IRQHandler+0xec>
 8005aa0:	f015 0f01 	tst.w	r5, #1
 8005aa4:	d008      	beq.n	8005ab8 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005aa6:	6821      	ldr	r1, [r4, #0]
 8005aa8:	2604      	movs	r6, #4
 8005aaa:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aac:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005ab0:	f041 0102 	orr.w	r1, r1, #2
 8005ab4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ab8:	f013 0f08 	tst.w	r3, #8
 8005abc:	d00b      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005abe:	f010 0f20 	tst.w	r0, #32
 8005ac2:	d100      	bne.n	8005ac6 <HAL_UART_IRQHandler+0xfa>
 8005ac4:	b13a      	cbz	r2, 8005ad6 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ac6:	6822      	ldr	r2, [r4, #0]
 8005ac8:	2108      	movs	r1, #8
 8005aca:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005acc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ad6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005ada:	d00c      	beq.n	8005af6 <HAL_UART_IRQHandler+0x12a>
 8005adc:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005ae0:	d009      	beq.n	8005af6 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ae8:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005aea:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005aee:	f042 0220 	orr.w	r2, r2, #32
 8005af2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005af6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005afa:	2a00      	cmp	r2, #0
 8005afc:	d0aa      	beq.n	8005a54 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005afe:	f013 0f20 	tst.w	r3, #32
 8005b02:	d009      	beq.n	8005b18 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b04:	f010 0f20 	tst.w	r0, #32
 8005b08:	d102      	bne.n	8005b10 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b0a:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005b0e:	d003      	beq.n	8005b18 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8005b10:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005b12:	b10b      	cbz	r3, 8005b18 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8005b14:	4620      	mov	r0, r4
 8005b16:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005b18:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b24:	d102      	bne.n	8005b2c <HAL_UART_IRQHandler+0x160>
 8005b26:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005b2a:	d029      	beq.n	8005b80 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f7ff fe4f 	bl	80057d0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b3a:	d01d      	beq.n	8005b78 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3e:	f102 0308 	add.w	r3, r2, #8
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	3208      	adds	r2, #8
 8005b4c:	e842 3100 	strex	r1, r3, [r2]
 8005b50:	2900      	cmp	r1, #0
 8005b52:	d1f3      	bne.n	8005b3c <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005b54:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005b56:	b15b      	cbz	r3, 8005b70 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b58:	4a3e      	ldr	r2, [pc, #248]	; (8005c54 <HAL_UART_IRQHandler+0x288>)
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b5c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005b5e:	f7fb fd8f 	bl	8001680 <HAL_DMA_Abort_IT>
 8005b62:	2800      	cmp	r0, #0
 8005b64:	f43f af76 	beq.w	8005a54 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b68:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005b6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005b6c:	4798      	blx	r3
 8005b6e:	e771      	b.n	8005a54 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8005b70:	4620      	mov	r0, r4
 8005b72:	f7ff fef3 	bl	800595c <HAL_UART_ErrorCallback>
 8005b76:	e76d      	b.n	8005a54 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f7ff feef 	bl	800595c <HAL_UART_ErrorCallback>
 8005b7e:	e769      	b.n	8005a54 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8005b80:	4620      	mov	r0, r4
 8005b82:	f7ff feeb 	bl	800595c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b86:	2300      	movs	r3, #0
 8005b88:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8005b8c:	e762      	b.n	8005a54 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b8e:	f013 0f10 	tst.w	r3, #16
 8005b92:	f43f af39 	beq.w	8005a08 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b96:	f010 0f10 	tst.w	r0, #16
 8005b9a:	f43f af35 	beq.w	8005a08 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b9e:	2310      	movs	r3, #16
 8005ba0:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005baa:	d055      	beq.n	8005c58 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bac:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005bae:	6813      	ldr	r3, [r2, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f43f af4d 	beq.w	8005a54 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bba:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005bbe:	4299      	cmp	r1, r3
 8005bc0:	f67f af48 	bls.w	8005a54 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005bc4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bc8:	6813      	ldr	r3, [r2, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f013 0f20 	tst.w	r3, #32
 8005bd0:	d131      	bne.n	8005c36 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bd2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	e852 3f00 	ldrex	r3, [r2]
 8005bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	e842 3100 	strex	r1, r3, [r2]
 8005be0:	2900      	cmp	r1, #0
 8005be2:	d1f6      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	f102 0308 	add.w	r3, r2, #8
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	3208      	adds	r2, #8
 8005bf4:	e842 3100 	strex	r1, r3, [r2]
 8005bf8:	2900      	cmp	r1, #0
 8005bfa:	d1f3      	bne.n	8005be4 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bfc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	f102 0308 	add.w	r3, r2, #8
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	3208      	adds	r2, #8
 8005c0c:	e842 3100 	strex	r1, r3, [r2]
 8005c10:	2900      	cmp	r1, #0
 8005c12:	d1f3      	bne.n	8005bfc <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8005c14:	2320      	movs	r3, #32
 8005c16:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	e852 3f00 	ldrex	r3, [r2]
 8005c24:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	e842 3100 	strex	r1, r3, [r2]
 8005c2c:	2900      	cmp	r1, #0
 8005c2e:	d1f6      	bne.n	8005c1e <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c30:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005c32:	f7fb fcef 	bl	8001614 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c36:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005c3a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	1ac9      	subs	r1, r1, r3
 8005c42:	b289      	uxth	r1, r1
 8005c44:	4620      	mov	r0, r4
 8005c46:	f7ff fec0 	bl	80059ca <HAL_UARTEx_RxEventCallback>
      return;
 8005c4a:	e703      	b.n	8005a54 <HAL_UART_IRQHandler+0x88>
 8005c4c:	10000001 	.word	0x10000001
 8005c50:	04000120 	.word	0x04000120
 8005c54:	080059b7 	.word	0x080059b7
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c58:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005c5c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	1ac9      	subs	r1, r1, r3
 8005c64:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005c66:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f43f aef1 	beq.w	8005a54 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 8005c72:	2900      	cmp	r1, #0
 8005c74:	f43f aeee 	beq.w	8005a54 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c78:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	e852 3f00 	ldrex	r3, [r2]
 8005c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	e842 3000 	strex	r0, r3, [r2]
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d1f6      	bne.n	8005c78 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c8a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	f102 0308 	add.w	r3, r2, #8
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c98:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	3208      	adds	r2, #8
 8005c9e:	e842 3000 	strex	r0, r3, [r2]
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	d1f1      	bne.n	8005c8a <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8005ca6:	2320      	movs	r3, #32
 8005ca8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cac:	2300      	movs	r3, #0
 8005cae:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005cb0:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	e852 3f00 	ldrex	r3, [r2]
 8005cb8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	e842 3000 	strex	r0, r3, [r2]
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d1f6      	bne.n	8005cb2 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f7ff fe80 	bl	80059ca <HAL_UARTEx_RxEventCallback>
      return;
 8005cca:	e6c3      	b.n	8005a54 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ccc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005cd0:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f000 fca4 	bl	8006620 <HAL_UARTEx_WakeupCallback>
    return;
 8005cd8:	e6bc      	b.n	8005a54 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8005cda:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f43f aeb9 	beq.w	8005a54 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	4798      	blx	r3
    return;
 8005ce6:	e6b5      	b.n	8005a54 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f7ff fe1f 	bl	800592c <UART_EndTransmit_IT>
    return;
 8005cee:	e6b1      	b.n	8005a54 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f000 fc97 	bl	8006624 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005cf6:	e6ad      	b.n	8005a54 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f000 fc92 	bl	8006622 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005cfe:	e6a9      	b.n	8005a54 <HAL_UART_IRQHandler+0x88>

08005d00 <UART_SetConfig>:
{
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005d04:	6842      	ldr	r2, [r0, #4]
 8005d06:	4b96      	ldr	r3, [pc, #600]	; (8005f60 <UART_SetConfig+0x260>)
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	f200 8087 	bhi.w	8005e1c <UART_SetConfig+0x11c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005d0e:	68a3      	ldr	r3, [r4, #8]
 8005d10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d14:	d004      	beq.n	8005d20 <UART_SetConfig+0x20>
 8005d16:	b11b      	cbz	r3, 8005d20 <UART_SetConfig+0x20>
 8005d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1c:	f040 8084 	bne.w	8005e28 <UART_SetConfig+0x128>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d20:	6822      	ldr	r2, [r4, #0]
 8005d22:	4b90      	ldr	r3, [pc, #576]	; (8005f64 <UART_SetConfig+0x264>)
 8005d24:	429a      	cmp	r2, r3
 8005d26:	f000 8085 	beq.w	8005e34 <UART_SetConfig+0x134>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005d2a:	68e3      	ldr	r3, [r4, #12]
 8005d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d30:	d007      	beq.n	8005d42 <UART_SetConfig+0x42>
 8005d32:	b133      	cbz	r3, 8005d42 <UART_SetConfig+0x42>
 8005d34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d38:	d003      	beq.n	8005d42 <UART_SetConfig+0x42>
 8005d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d3e:	f040 8085 	bne.w	8005e4c <UART_SetConfig+0x14c>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005d42:	6a23      	ldr	r3, [r4, #32]
 8005d44:	b11b      	cbz	r3, 8005d4e <UART_SetConfig+0x4e>
 8005d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4a:	f040 8085 	bne.w	8005e58 <UART_SetConfig+0x158>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005d4e:	6923      	ldr	r3, [r4, #16]
 8005d50:	b133      	cbz	r3, 8005d60 <UART_SetConfig+0x60>
 8005d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d56:	d003      	beq.n	8005d60 <UART_SetConfig+0x60>
 8005d58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d5c:	f040 8082 	bne.w	8005e64 <UART_SetConfig+0x164>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005d60:	6963      	ldr	r3, [r4, #20]
 8005d62:	f033 020c 	bics.w	r2, r3, #12
 8005d66:	d100      	bne.n	8005d6a <UART_SetConfig+0x6a>
 8005d68:	b923      	cbnz	r3, 8005d74 <UART_SetConfig+0x74>
 8005d6a:	f640 31e7 	movw	r1, #3047	; 0xbe7
 8005d6e:	487e      	ldr	r0, [pc, #504]	; (8005f68 <UART_SetConfig+0x268>)
 8005d70:	f7fa ff7d 	bl	8000c6e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005d74:	69a3      	ldr	r3, [r4, #24]
 8005d76:	b143      	cbz	r3, 8005d8a <UART_SetConfig+0x8a>
 8005d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7c:	d005      	beq.n	8005d8a <UART_SetConfig+0x8a>
 8005d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d82:	d002      	beq.n	8005d8a <UART_SetConfig+0x8a>
 8005d84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d88:	d172      	bne.n	8005e70 <UART_SetConfig+0x170>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005d8a:	69e3      	ldr	r3, [r4, #28]
 8005d8c:	b113      	cbz	r3, 8005d94 <UART_SetConfig+0x94>
 8005d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d92:	d173      	bne.n	8005e7c <UART_SetConfig+0x17c>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8005d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d96:	2b0b      	cmp	r3, #11
 8005d98:	d876      	bhi.n	8005e88 <UART_SetConfig+0x188>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d9a:	68a3      	ldr	r3, [r4, #8]
 8005d9c:	6922      	ldr	r2, [r4, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	6962      	ldr	r2, [r4, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	69e2      	ldr	r2, [r4, #28]
 8005da6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005da8:	6821      	ldr	r1, [r4, #0]
 8005daa:	6808      	ldr	r0, [r1, #0]
 8005dac:	4a6f      	ldr	r2, [pc, #444]	; (8005f6c <UART_SetConfig+0x26c>)
 8005dae:	4002      	ands	r2, r0
 8005db0:	431a      	orrs	r2, r3
 8005db2:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db4:	6822      	ldr	r2, [r4, #0]
 8005db6:	6853      	ldr	r3, [r2, #4]
 8005db8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005dbc:	68e1      	ldr	r1, [r4, #12]
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dc2:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	4b67      	ldr	r3, [pc, #412]	; (8005f64 <UART_SetConfig+0x264>)
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d001      	beq.n	8005dd0 <UART_SetConfig+0xd0>
    tmpreg |= huart->Init.OneBitSampling;
 8005dcc:	6a23      	ldr	r3, [r4, #32]
 8005dce:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dd0:	6893      	ldr	r3, [r2, #8]
 8005dd2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005dd6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005dda:	430b      	orrs	r3, r1
 8005ddc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005dde:	6822      	ldr	r2, [r4, #0]
 8005de0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005de2:	f023 030f 	bic.w	r3, r3, #15
 8005de6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005de8:	430b      	orrs	r3, r1
 8005dea:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	4a60      	ldr	r2, [pc, #384]	; (8005f70 <UART_SetConfig+0x270>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d04f      	beq.n	8005e94 <UART_SetConfig+0x194>
 8005df4:	4a5f      	ldr	r2, [pc, #380]	; (8005f74 <UART_SetConfig+0x274>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d060      	beq.n	8005ebc <UART_SetConfig+0x1bc>
 8005dfa:	4a5f      	ldr	r2, [pc, #380]	; (8005f78 <UART_SetConfig+0x278>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d076      	beq.n	8005eee <UART_SetConfig+0x1ee>
 8005e00:	4a5e      	ldr	r2, [pc, #376]	; (8005f7c <UART_SetConfig+0x27c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	f000 809c 	beq.w	8005f40 <UART_SetConfig+0x240>
 8005e08:	4a5d      	ldr	r2, [pc, #372]	; (8005f80 <UART_SetConfig+0x280>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	f000 80be 	beq.w	8005f8c <UART_SetConfig+0x28c>
 8005e10:	4a54      	ldr	r2, [pc, #336]	; (8005f64 <UART_SetConfig+0x264>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	f000 80cf 	beq.w	8005fb6 <UART_SetConfig+0x2b6>
 8005e18:	2210      	movs	r2, #16
 8005e1a:	e076      	b.n	8005f0a <UART_SetConfig+0x20a>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005e1c:	f640 31da 	movw	r1, #3034	; 0xbda
 8005e20:	4851      	ldr	r0, [pc, #324]	; (8005f68 <UART_SetConfig+0x268>)
 8005e22:	f7fa ff24 	bl	8000c6e <assert_failed>
 8005e26:	e772      	b.n	8005d0e <UART_SetConfig+0xe>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005e28:	f640 31db 	movw	r1, #3035	; 0xbdb
 8005e2c:	484e      	ldr	r0, [pc, #312]	; (8005f68 <UART_SetConfig+0x268>)
 8005e2e:	f7fa ff1e 	bl	8000c6e <assert_failed>
 8005e32:	e775      	b.n	8005d20 <UART_SetConfig+0x20>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8005e34:	68e3      	ldr	r3, [r4, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d089      	beq.n	8005d4e <UART_SetConfig+0x4e>
 8005e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e3e:	d086      	beq.n	8005d4e <UART_SetConfig+0x4e>
 8005e40:	f640 31de 	movw	r1, #3038	; 0xbde
 8005e44:	4848      	ldr	r0, [pc, #288]	; (8005f68 <UART_SetConfig+0x268>)
 8005e46:	f7fa ff12 	bl	8000c6e <assert_failed>
 8005e4a:	e780      	b.n	8005d4e <UART_SetConfig+0x4e>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005e4c:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8005e50:	4845      	ldr	r0, [pc, #276]	; (8005f68 <UART_SetConfig+0x268>)
 8005e52:	f7fa ff0c 	bl	8000c6e <assert_failed>
 8005e56:	e774      	b.n	8005d42 <UART_SetConfig+0x42>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005e58:	f640 31e3 	movw	r1, #3043	; 0xbe3
 8005e5c:	4842      	ldr	r0, [pc, #264]	; (8005f68 <UART_SetConfig+0x268>)
 8005e5e:	f7fa ff06 	bl	8000c6e <assert_failed>
 8005e62:	e774      	b.n	8005d4e <UART_SetConfig+0x4e>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005e64:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8005e68:	483f      	ldr	r0, [pc, #252]	; (8005f68 <UART_SetConfig+0x268>)
 8005e6a:	f7fa ff00 	bl	8000c6e <assert_failed>
 8005e6e:	e777      	b.n	8005d60 <UART_SetConfig+0x60>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005e70:	f640 31e8 	movw	r1, #3048	; 0xbe8
 8005e74:	483c      	ldr	r0, [pc, #240]	; (8005f68 <UART_SetConfig+0x268>)
 8005e76:	f7fa fefa 	bl	8000c6e <assert_failed>
 8005e7a:	e786      	b.n	8005d8a <UART_SetConfig+0x8a>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005e7c:	f640 31e9 	movw	r1, #3049	; 0xbe9
 8005e80:	4839      	ldr	r0, [pc, #228]	; (8005f68 <UART_SetConfig+0x268>)
 8005e82:	f7fa fef4 	bl	8000c6e <assert_failed>
 8005e86:	e785      	b.n	8005d94 <UART_SetConfig+0x94>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8005e88:	f640 31ea 	movw	r1, #3050	; 0xbea
 8005e8c:	4836      	ldr	r0, [pc, #216]	; (8005f68 <UART_SetConfig+0x268>)
 8005e8e:	f7fa feee 	bl	8000c6e <assert_failed>
 8005e92:	e782      	b.n	8005d9a <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e94:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8005e98:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005e9c:	f002 0203 	and.w	r2, r2, #3
 8005ea0:	2a03      	cmp	r2, #3
 8005ea2:	d809      	bhi.n	8005eb8 <UART_SetConfig+0x1b8>
 8005ea4:	e8df f002 	tbb	[pc, r2]
 8005ea8:	069c0402 	.word	0x069c0402
 8005eac:	2201      	movs	r2, #1
 8005eae:	e02c      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005eb0:	2204      	movs	r2, #4
 8005eb2:	e02a      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	e028      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005eb8:	2210      	movs	r2, #16
 8005eba:	e026      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005ebc:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8005ec0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005ec4:	f002 020c 	and.w	r2, r2, #12
 8005ec8:	2a0c      	cmp	r2, #12
 8005eca:	d80e      	bhi.n	8005eea <UART_SetConfig+0x1ea>
 8005ecc:	e8df f002 	tbb	[pc, r2]
 8005ed0:	0d0d0d07 	.word	0x0d0d0d07
 8005ed4:	0d0d0d09 	.word	0x0d0d0d09
 8005ed8:	0d0d0d8a 	.word	0x0d0d0d8a
 8005edc:	0b          	.byte	0x0b
 8005edd:	00          	.byte	0x00
 8005ede:	2200      	movs	r2, #0
 8005ee0:	e013      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	e011      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005ee6:	2208      	movs	r2, #8
 8005ee8:	e00f      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005eea:	2210      	movs	r2, #16
 8005eec:	e00d      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005eee:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8005ef2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005ef6:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005efa:	2a20      	cmp	r2, #32
 8005efc:	d074      	beq.n	8005fe8 <UART_SetConfig+0x2e8>
 8005efe:	d81b      	bhi.n	8005f38 <UART_SetConfig+0x238>
 8005f00:	2a00      	cmp	r2, #0
 8005f02:	d073      	beq.n	8005fec <UART_SetConfig+0x2ec>
 8005f04:	2a10      	cmp	r2, #16
 8005f06:	d173      	bne.n	8005ff0 <UART_SetConfig+0x2f0>
 8005f08:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f0a:	4916      	ldr	r1, [pc, #88]	; (8005f64 <UART_SetConfig+0x264>)
 8005f0c:	428b      	cmp	r3, r1
 8005f0e:	f000 808b 	beq.w	8006028 <UART_SetConfig+0x328>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f12:	69e0      	ldr	r0, [r4, #28]
 8005f14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005f18:	f000 80c7 	beq.w	80060aa <UART_SetConfig+0x3aa>
    switch (clocksource)
 8005f1c:	2a08      	cmp	r2, #8
 8005f1e:	f200 8132 	bhi.w	8006186 <UART_SetConfig+0x486>
 8005f22:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005f26:	00f5      	.short	0x00f5
 8005f28:	00f30117 	.word	0x00f30117
 8005f2c:	011a0130 	.word	0x011a0130
 8005f30:	01300130 	.word	0x01300130
 8005f34:	011d0130 	.word	0x011d0130
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f38:	2a30      	cmp	r2, #48	; 0x30
 8005f3a:	d15b      	bne.n	8005ff4 <UART_SetConfig+0x2f4>
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	e7e4      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005f40:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8005f44:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005f48:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005f4c:	2a80      	cmp	r2, #128	; 0x80
 8005f4e:	d053      	beq.n	8005ff8 <UART_SetConfig+0x2f8>
 8005f50:	d818      	bhi.n	8005f84 <UART_SetConfig+0x284>
 8005f52:	2a00      	cmp	r2, #0
 8005f54:	d052      	beq.n	8005ffc <UART_SetConfig+0x2fc>
 8005f56:	2a40      	cmp	r2, #64	; 0x40
 8005f58:	d152      	bne.n	8006000 <UART_SetConfig+0x300>
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	e7d5      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005f5e:	bf00      	nop
 8005f60:	011e1a30 	.word	0x011e1a30
 8005f64:	40008000 	.word	0x40008000
 8005f68:	080130bc 	.word	0x080130bc
 8005f6c:	cfff69f3 	.word	0xcfff69f3
 8005f70:	40013800 	.word	0x40013800
 8005f74:	40004400 	.word	0x40004400
 8005f78:	40004800 	.word	0x40004800
 8005f7c:	40004c00 	.word	0x40004c00
 8005f80:	40005000 	.word	0x40005000
 8005f84:	2ac0      	cmp	r2, #192	; 0xc0
 8005f86:	d13d      	bne.n	8006004 <UART_SetConfig+0x304>
 8005f88:	2208      	movs	r2, #8
 8005f8a:	e7be      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005f8c:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8005f90:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005f94:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005f98:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005f9c:	d034      	beq.n	8006008 <UART_SetConfig+0x308>
 8005f9e:	d805      	bhi.n	8005fac <UART_SetConfig+0x2ac>
 8005fa0:	b3a2      	cbz	r2, 800600c <UART_SetConfig+0x30c>
 8005fa2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005fa6:	d133      	bne.n	8006010 <UART_SetConfig+0x310>
 8005fa8:	2204      	movs	r2, #4
 8005faa:	e7ae      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005fac:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005fb0:	d130      	bne.n	8006014 <UART_SetConfig+0x314>
 8005fb2:	2208      	movs	r2, #8
 8005fb4:	e7a9      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005fb6:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8005fba:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005fbe:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005fc2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005fc6:	d027      	beq.n	8006018 <UART_SetConfig+0x318>
 8005fc8:	d805      	bhi.n	8005fd6 <UART_SetConfig+0x2d6>
 8005fca:	b33a      	cbz	r2, 800601c <UART_SetConfig+0x31c>
 8005fcc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005fd0:	d126      	bne.n	8006020 <UART_SetConfig+0x320>
 8005fd2:	2204      	movs	r2, #4
 8005fd4:	e799      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005fd6:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005fda:	d123      	bne.n	8006024 <UART_SetConfig+0x324>
 8005fdc:	2208      	movs	r2, #8
 8005fde:	e794      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	e792      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	e790      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005fe8:	2202      	movs	r2, #2
 8005fea:	e78e      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005fec:	2200      	movs	r2, #0
 8005fee:	e78c      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	e78a      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	e788      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	e786      	b.n	8005f0a <UART_SetConfig+0x20a>
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	e784      	b.n	8005f0a <UART_SetConfig+0x20a>
 8006000:	2210      	movs	r2, #16
 8006002:	e782      	b.n	8005f0a <UART_SetConfig+0x20a>
 8006004:	2210      	movs	r2, #16
 8006006:	e780      	b.n	8005f0a <UART_SetConfig+0x20a>
 8006008:	2202      	movs	r2, #2
 800600a:	e77e      	b.n	8005f0a <UART_SetConfig+0x20a>
 800600c:	2200      	movs	r2, #0
 800600e:	e77c      	b.n	8005f0a <UART_SetConfig+0x20a>
 8006010:	2210      	movs	r2, #16
 8006012:	e77a      	b.n	8005f0a <UART_SetConfig+0x20a>
 8006014:	2210      	movs	r2, #16
 8006016:	e778      	b.n	8005f0a <UART_SetConfig+0x20a>
 8006018:	2202      	movs	r2, #2
 800601a:	e776      	b.n	8005f0a <UART_SetConfig+0x20a>
 800601c:	2200      	movs	r2, #0
 800601e:	e774      	b.n	8005f0a <UART_SetConfig+0x20a>
 8006020:	2210      	movs	r2, #16
 8006022:	e772      	b.n	8005f0a <UART_SetConfig+0x20a>
 8006024:	2210      	movs	r2, #16
 8006026:	e770      	b.n	8005f0a <UART_SetConfig+0x20a>
    switch (clocksource)
 8006028:	2a08      	cmp	r2, #8
 800602a:	f200 809c 	bhi.w	8006166 <UART_SetConfig+0x466>
 800602e:	e8df f002 	tbb	[pc, r2]
 8006032:	9a08      	.short	0x9a08
 8006034:	9a379a3a 	.word	0x9a379a3a
 8006038:	9a9a      	.short	0x9a9a
 800603a:	05          	.byte	0x05
 800603b:	00          	.byte	0x00
 800603c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006040:	e004      	b.n	800604c <UART_SetConfig+0x34c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006042:	f7fe f83b 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006046:	2800      	cmp	r0, #0
 8006048:	f000 808f 	beq.w	800616a <UART_SetConfig+0x46a>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800604c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800604e:	4b51      	ldr	r3, [pc, #324]	; (8006194 <UART_SetConfig+0x494>)
 8006050:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006054:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006058:	6865      	ldr	r5, [r4, #4]
 800605a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800605e:	4299      	cmp	r1, r3
 8006060:	f200 8085 	bhi.w	800616e <UART_SetConfig+0x46e>
 8006064:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006068:	f200 8083 	bhi.w	8006172 <UART_SetConfig+0x472>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800606c:	2600      	movs	r6, #0
 800606e:	4633      	mov	r3, r6
 8006070:	4631      	mov	r1, r6
 8006072:	f7fa f975 	bl	8000360 <__aeabi_uldivmod>
 8006076:	0209      	lsls	r1, r1, #8
 8006078:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800607c:	0200      	lsls	r0, r0, #8
 800607e:	086b      	lsrs	r3, r5, #1
 8006080:	18c0      	adds	r0, r0, r3
 8006082:	462a      	mov	r2, r5
 8006084:	4633      	mov	r3, r6
 8006086:	f141 0100 	adc.w	r1, r1, #0
 800608a:	f7fa f969 	bl	8000360 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800608e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006092:	4b41      	ldr	r3, [pc, #260]	; (8006198 <UART_SetConfig+0x498>)
 8006094:	429a      	cmp	r2, r3
 8006096:	d86e      	bhi.n	8006176 <UART_SetConfig+0x476>
          huart->Instance->BRR = usartdiv;
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	60d8      	str	r0, [r3, #12]
 800609c:	4630      	mov	r0, r6
 800609e:	e050      	b.n	8006142 <UART_SetConfig+0x442>
        pclk = HAL_RCC_GetSysClockFreq();
 80060a0:	f7fd fe64 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
        break;
 80060a4:	e7cf      	b.n	8006046 <UART_SetConfig+0x346>
        pclk = (uint32_t) HSI_VALUE;
 80060a6:	483d      	ldr	r0, [pc, #244]	; (800619c <UART_SetConfig+0x49c>)
 80060a8:	e7d0      	b.n	800604c <UART_SetConfig+0x34c>
    switch (clocksource)
 80060aa:	2a08      	cmp	r2, #8
 80060ac:	d865      	bhi.n	800617a <UART_SetConfig+0x47a>
 80060ae:	e8df f002 	tbb	[pc, r2]
 80060b2:	2707      	.short	0x2707
 80060b4:	642a6405 	.word	0x642a6405
 80060b8:	6464      	.short	0x6464
 80060ba:	0b          	.byte	0x0b
 80060bb:	00          	.byte	0x00
 80060bc:	4837      	ldr	r0, [pc, #220]	; (800619c <UART_SetConfig+0x49c>)
 80060be:	e003      	b.n	80060c8 <UART_SetConfig+0x3c8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c0:	f7fd fffc 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80060c4:	2800      	cmp	r0, #0
 80060c6:	d05a      	beq.n	800617e <UART_SetConfig+0x47e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80060ca:	4b32      	ldr	r3, [pc, #200]	; (8006194 <UART_SetConfig+0x494>)
 80060cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80060d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80060d4:	6862      	ldr	r2, [r4, #4]
 80060d6:	0853      	lsrs	r3, r2, #1
 80060d8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80060dc:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e0:	f1a3 0110 	sub.w	r1, r3, #16
 80060e4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80060e8:	4291      	cmp	r1, r2
 80060ea:	d84a      	bhi.n	8006182 <UART_SetConfig+0x482>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060f2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80060f6:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80060f8:	6822      	ldr	r2, [r4, #0]
 80060fa:	60d3      	str	r3, [r2, #12]
 80060fc:	2000      	movs	r0, #0
 80060fe:	e020      	b.n	8006142 <UART_SetConfig+0x442>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006100:	f7fd ffee 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
        break;
 8006104:	e7de      	b.n	80060c4 <UART_SetConfig+0x3c4>
        pclk = HAL_RCC_GetSysClockFreq();
 8006106:	f7fd fe31 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
        break;
 800610a:	e7db      	b.n	80060c4 <UART_SetConfig+0x3c4>
    switch (clocksource)
 800610c:	4823      	ldr	r0, [pc, #140]	; (800619c <UART_SetConfig+0x49c>)
 800610e:	e003      	b.n	8006118 <UART_SetConfig+0x418>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006110:	f7fd ffd4 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006114:	2800      	cmp	r0, #0
 8006116:	d038      	beq.n	800618a <UART_SetConfig+0x48a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006118:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800611a:	4b1e      	ldr	r3, [pc, #120]	; (8006194 <UART_SetConfig+0x494>)
 800611c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006120:	fbb0 f0f3 	udiv	r0, r0, r3
 8006124:	6863      	ldr	r3, [r4, #4]
 8006126:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800612a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800612e:	f1a0 0210 	sub.w	r2, r0, #16
 8006132:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006136:	429a      	cmp	r2, r3
 8006138:	d829      	bhi.n	800618e <UART_SetConfig+0x48e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	b280      	uxth	r0, r0
 800613e:	60d8      	str	r0, [r3, #12]
 8006140:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8006142:	2301      	movs	r3, #1
 8006144:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006148:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800614c:	2300      	movs	r3, #0
 800614e:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8006150:	6763      	str	r3, [r4, #116]	; 0x74
}
 8006152:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006154:	f7fd ffc4 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
        break;
 8006158:	e7dc      	b.n	8006114 <UART_SetConfig+0x414>
        pclk = HAL_RCC_GetSysClockFreq();
 800615a:	f7fd fe07 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
        break;
 800615e:	e7d9      	b.n	8006114 <UART_SetConfig+0x414>
        pclk = (uint32_t) LSE_VALUE;
 8006160:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006164:	e7d8      	b.n	8006118 <UART_SetConfig+0x418>
    switch (clocksource)
 8006166:	2001      	movs	r0, #1
 8006168:	e7eb      	b.n	8006142 <UART_SetConfig+0x442>
 800616a:	2000      	movs	r0, #0
 800616c:	e7e9      	b.n	8006142 <UART_SetConfig+0x442>
        ret = HAL_ERROR;
 800616e:	2001      	movs	r0, #1
 8006170:	e7e7      	b.n	8006142 <UART_SetConfig+0x442>
 8006172:	2001      	movs	r0, #1
 8006174:	e7e5      	b.n	8006142 <UART_SetConfig+0x442>
          ret = HAL_ERROR;
 8006176:	2001      	movs	r0, #1
 8006178:	e7e3      	b.n	8006142 <UART_SetConfig+0x442>
    switch (clocksource)
 800617a:	2001      	movs	r0, #1
 800617c:	e7e1      	b.n	8006142 <UART_SetConfig+0x442>
 800617e:	2000      	movs	r0, #0
 8006180:	e7df      	b.n	8006142 <UART_SetConfig+0x442>
        ret = HAL_ERROR;
 8006182:	2001      	movs	r0, #1
 8006184:	e7dd      	b.n	8006142 <UART_SetConfig+0x442>
    switch (clocksource)
 8006186:	2001      	movs	r0, #1
 8006188:	e7db      	b.n	8006142 <UART_SetConfig+0x442>
 800618a:	2000      	movs	r0, #0
 800618c:	e7d9      	b.n	8006142 <UART_SetConfig+0x442>
        ret = HAL_ERROR;
 800618e:	2001      	movs	r0, #1
 8006190:	e7d7      	b.n	8006142 <UART_SetConfig+0x442>
 8006192:	bf00      	nop
 8006194:	080130f8 	.word	0x080130f8
 8006198:	000ffcff 	.word	0x000ffcff
 800619c:	00f42400 	.word	0x00f42400

080061a0 <UART_AdvFeatureConfig>:
{
 80061a0:	b510      	push	{r4, lr}
 80061a2:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80061a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80061a6:	2bff      	cmp	r3, #255	; 0xff
 80061a8:	f200 80a1 	bhi.w	80062ee <UART_AdvFeatureConfig+0x14e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80061ae:	f013 0f01 	tst.w	r3, #1
 80061b2:	d00c      	beq.n	80061ce <UART_AdvFeatureConfig+0x2e>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80061b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80061b6:	b11b      	cbz	r3, 80061c0 <UART_AdvFeatureConfig+0x20>
 80061b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061bc:	f040 809d 	bne.w	80062fa <UART_AdvFeatureConfig+0x15a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061c0:	6822      	ldr	r2, [r4, #0]
 80061c2:	6853      	ldr	r3, [r2, #4]
 80061c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80061ca:	430b      	orrs	r3, r1
 80061cc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80061d0:	f013 0f02 	tst.w	r3, #2
 80061d4:	d00c      	beq.n	80061f0 <UART_AdvFeatureConfig+0x50>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80061d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80061d8:	b11b      	cbz	r3, 80061e2 <UART_AdvFeatureConfig+0x42>
 80061da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061de:	f040 8092 	bne.w	8006306 <UART_AdvFeatureConfig+0x166>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	6853      	ldr	r3, [r2, #4]
 80061e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80061ec:	430b      	orrs	r3, r1
 80061ee:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80061f2:	f013 0f04 	tst.w	r3, #4
 80061f6:	d00c      	beq.n	8006212 <UART_AdvFeatureConfig+0x72>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80061f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061fa:	b11b      	cbz	r3, 8006204 <UART_AdvFeatureConfig+0x64>
 80061fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006200:	f040 8087 	bne.w	8006312 <UART_AdvFeatureConfig+0x172>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006204:	6822      	ldr	r2, [r4, #0]
 8006206:	6853      	ldr	r3, [r2, #4]
 8006208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800620c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800620e:	430b      	orrs	r3, r1
 8006210:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006212:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006214:	f013 0f08 	tst.w	r3, #8
 8006218:	d00b      	beq.n	8006232 <UART_AdvFeatureConfig+0x92>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800621a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800621c:	b113      	cbz	r3, 8006224 <UART_AdvFeatureConfig+0x84>
 800621e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006222:	d17c      	bne.n	800631e <UART_AdvFeatureConfig+0x17e>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006224:	6822      	ldr	r2, [r4, #0]
 8006226:	6853      	ldr	r3, [r2, #4]
 8006228:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800622c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800622e:	430b      	orrs	r3, r1
 8006230:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006232:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006234:	f013 0f10 	tst.w	r3, #16
 8006238:	d00b      	beq.n	8006252 <UART_AdvFeatureConfig+0xb2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800623a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800623c:	b113      	cbz	r3, 8006244 <UART_AdvFeatureConfig+0xa4>
 800623e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006242:	d172      	bne.n	800632a <UART_AdvFeatureConfig+0x18a>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006244:	6822      	ldr	r2, [r4, #0]
 8006246:	6893      	ldr	r3, [r2, #8]
 8006248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800624c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800624e:	430b      	orrs	r3, r1
 8006250:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006252:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006254:	f013 0f20 	tst.w	r3, #32
 8006258:	d00b      	beq.n	8006272 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800625a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800625c:	b113      	cbz	r3, 8006264 <UART_AdvFeatureConfig+0xc4>
 800625e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006262:	d168      	bne.n	8006336 <UART_AdvFeatureConfig+0x196>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	6893      	ldr	r3, [r2, #8]
 8006268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800626c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800626e:	430b      	orrs	r3, r1
 8006270:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006272:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006274:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006278:	d028      	beq.n	80062cc <UART_AdvFeatureConfig+0x12c>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	4a43      	ldr	r2, [pc, #268]	; (800638c <UART_AdvFeatureConfig+0x1ec>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d014      	beq.n	80062ac <UART_AdvFeatureConfig+0x10c>
 8006282:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8006286:	4293      	cmp	r3, r2
 8006288:	d010      	beq.n	80062ac <UART_AdvFeatureConfig+0x10c>
 800628a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800628e:	4293      	cmp	r3, r2
 8006290:	d00c      	beq.n	80062ac <UART_AdvFeatureConfig+0x10c>
 8006292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006296:	4293      	cmp	r3, r2
 8006298:	d008      	beq.n	80062ac <UART_AdvFeatureConfig+0x10c>
 800629a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800629e:	4293      	cmp	r3, r2
 80062a0:	d004      	beq.n	80062ac <UART_AdvFeatureConfig+0x10c>
 80062a2:	f640 41da 	movw	r1, #3290	; 0xcda
 80062a6:	483a      	ldr	r0, [pc, #232]	; (8006390 <UART_AdvFeatureConfig+0x1f0>)
 80062a8:	f7fa fce1 	bl	8000c6e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80062ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80062ae:	b113      	cbz	r3, 80062b6 <UART_AdvFeatureConfig+0x116>
 80062b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062b4:	d145      	bne.n	8006342 <UART_AdvFeatureConfig+0x1a2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062b6:	6822      	ldr	r2, [r4, #0]
 80062b8:	6853      	ldr	r3, [r2, #4]
 80062ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80062be:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80062c0:	430b      	orrs	r3, r1
 80062c2:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80062c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ca:	d040      	beq.n	800634e <UART_AdvFeatureConfig+0x1ae>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062ce:	f013 0f80 	tst.w	r3, #128	; 0x80
 80062d2:	d00b      	beq.n	80062ec <UART_AdvFeatureConfig+0x14c>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80062d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80062d6:	b113      	cbz	r3, 80062de <UART_AdvFeatureConfig+0x13e>
 80062d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062dc:	d150      	bne.n	8006380 <UART_AdvFeatureConfig+0x1e0>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062de:	6822      	ldr	r2, [r4, #0]
 80062e0:	6853      	ldr	r3, [r2, #4]
 80062e2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80062e6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80062e8:	430b      	orrs	r3, r1
 80062ea:	6053      	str	r3, [r2, #4]
}
 80062ec:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80062ee:	f640 41ab 	movw	r1, #3243	; 0xcab
 80062f2:	4827      	ldr	r0, [pc, #156]	; (8006390 <UART_AdvFeatureConfig+0x1f0>)
 80062f4:	f7fa fcbb 	bl	8000c6e <assert_failed>
 80062f8:	e758      	b.n	80061ac <UART_AdvFeatureConfig+0xc>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80062fa:	f44f 614b 	mov.w	r1, #3248	; 0xcb0
 80062fe:	4824      	ldr	r0, [pc, #144]	; (8006390 <UART_AdvFeatureConfig+0x1f0>)
 8006300:	f7fa fcb5 	bl	8000c6e <assert_failed>
 8006304:	e75c      	b.n	80061c0 <UART_AdvFeatureConfig+0x20>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006306:	f640 41b7 	movw	r1, #3255	; 0xcb7
 800630a:	4821      	ldr	r0, [pc, #132]	; (8006390 <UART_AdvFeatureConfig+0x1f0>)
 800630c:	f7fa fcaf 	bl	8000c6e <assert_failed>
 8006310:	e767      	b.n	80061e2 <UART_AdvFeatureConfig+0x42>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006312:	f640 41be 	movw	r1, #3262	; 0xcbe
 8006316:	481e      	ldr	r0, [pc, #120]	; (8006390 <UART_AdvFeatureConfig+0x1f0>)
 8006318:	f7fa fca9 	bl	8000c6e <assert_failed>
 800631c:	e772      	b.n	8006204 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800631e:	f640 41c5 	movw	r1, #3269	; 0xcc5
 8006322:	481b      	ldr	r0, [pc, #108]	; (8006390 <UART_AdvFeatureConfig+0x1f0>)
 8006324:	f7fa fca3 	bl	8000c6e <assert_failed>
 8006328:	e77c      	b.n	8006224 <UART_AdvFeatureConfig+0x84>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800632a:	f640 41cc 	movw	r1, #3276	; 0xccc
 800632e:	4818      	ldr	r0, [pc, #96]	; (8006390 <UART_AdvFeatureConfig+0x1f0>)
 8006330:	f7fa fc9d 	bl	8000c6e <assert_failed>
 8006334:	e786      	b.n	8006244 <UART_AdvFeatureConfig+0xa4>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8006336:	f640 41d3 	movw	r1, #3283	; 0xcd3
 800633a:	4815      	ldr	r0, [pc, #84]	; (8006390 <UART_AdvFeatureConfig+0x1f0>)
 800633c:	f7fa fc97 	bl	8000c6e <assert_failed>
 8006340:	e790      	b.n	8006264 <UART_AdvFeatureConfig+0xc4>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006342:	f640 41db 	movw	r1, #3291	; 0xcdb
 8006346:	4812      	ldr	r0, [pc, #72]	; (8006390 <UART_AdvFeatureConfig+0x1f0>)
 8006348:	f7fa fc91 	bl	8000c6e <assert_failed>
 800634c:	e7b3      	b.n	80062b6 <UART_AdvFeatureConfig+0x116>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800634e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006350:	b143      	cbz	r3, 8006364 <UART_AdvFeatureConfig+0x1c4>
 8006352:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006356:	d005      	beq.n	8006364 <UART_AdvFeatureConfig+0x1c4>
 8006358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800635c:	d002      	beq.n	8006364 <UART_AdvFeatureConfig+0x1c4>
 800635e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006362:	d107      	bne.n	8006374 <UART_AdvFeatureConfig+0x1d4>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006364:	6822      	ldr	r2, [r4, #0]
 8006366:	6853      	ldr	r3, [r2, #4]
 8006368:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800636c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800636e:	430b      	orrs	r3, r1
 8006370:	6053      	str	r3, [r2, #4]
 8006372:	e7ab      	b.n	80062cc <UART_AdvFeatureConfig+0x12c>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006374:	f44f 614e 	mov.w	r1, #3296	; 0xce0
 8006378:	4805      	ldr	r0, [pc, #20]	; (8006390 <UART_AdvFeatureConfig+0x1f0>)
 800637a:	f7fa fc78 	bl	8000c6e <assert_failed>
 800637e:	e7f1      	b.n	8006364 <UART_AdvFeatureConfig+0x1c4>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006380:	f640 41e8 	movw	r1, #3304	; 0xce8
 8006384:	4802      	ldr	r0, [pc, #8]	; (8006390 <UART_AdvFeatureConfig+0x1f0>)
 8006386:	f7fa fc72 	bl	8000c6e <assert_failed>
 800638a:	e7a8      	b.n	80062de <UART_AdvFeatureConfig+0x13e>
 800638c:	40013800 	.word	0x40013800
 8006390:	080130bc 	.word	0x080130bc

08006394 <UART_WaitOnFlagUntilTimeout>:
{
 8006394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006398:	4605      	mov	r5, r0
 800639a:	460f      	mov	r7, r1
 800639c:	4616      	mov	r6, r2
 800639e:	4699      	mov	r9, r3
 80063a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	69dc      	ldr	r4, [r3, #28]
 80063a8:	ea37 0404 	bics.w	r4, r7, r4
 80063ac:	bf0c      	ite	eq
 80063ae:	2401      	moveq	r4, #1
 80063b0:	2400      	movne	r4, #0
 80063b2:	42b4      	cmp	r4, r6
 80063b4:	d157      	bne.n	8006466 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 80063b6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80063ba:	d0f3      	beq.n	80063a4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063bc:	f7fa feee 	bl	800119c <HAL_GetTick>
 80063c0:	eba0 0009 	sub.w	r0, r0, r9
 80063c4:	4540      	cmp	r0, r8
 80063c6:	d82f      	bhi.n	8006428 <UART_WaitOnFlagUntilTimeout+0x94>
 80063c8:	f1b8 0f00 	cmp.w	r8, #0
 80063cc:	d02c      	beq.n	8006428 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ce:	682b      	ldr	r3, [r5, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	f012 0f04 	tst.w	r2, #4
 80063d6:	d0e5      	beq.n	80063a4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063d8:	69da      	ldr	r2, [r3, #28]
 80063da:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80063de:	d0e1      	beq.n	80063a4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063e4:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80063e6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	e852 3f00 	ldrex	r3, [r2]
 80063ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	e842 3100 	strex	r1, r3, [r2]
 80063f4:	2900      	cmp	r1, #0
 80063f6:	d1f6      	bne.n	80063e6 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	f102 0308 	add.w	r3, r2, #8
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006406:	3208      	adds	r2, #8
 8006408:	e842 3100 	strex	r1, r3, [r2]
 800640c:	2900      	cmp	r1, #0
 800640e:	d1f3      	bne.n	80063f8 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8006410:	2320      	movs	r3, #32
 8006412:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006416:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800641a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800641e:	2300      	movs	r3, #0
 8006420:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8006424:	2003      	movs	r0, #3
 8006426:	e01f      	b.n	8006468 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006428:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	e852 3f00 	ldrex	r3, [r2]
 800642e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	e842 3100 	strex	r1, r3, [r2]
 8006436:	2900      	cmp	r1, #0
 8006438:	d1f6      	bne.n	8006428 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800643a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	f102 0308 	add.w	r3, r2, #8
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	3208      	adds	r2, #8
 800644a:	e842 3100 	strex	r1, r3, [r2]
 800644e:	2900      	cmp	r1, #0
 8006450:	d1f3      	bne.n	800643a <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8006452:	2320      	movs	r3, #32
 8006454:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006458:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800645c:	2300      	movs	r3, #0
 800645e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8006462:	2003      	movs	r0, #3
 8006464:	e000      	b.n	8006468 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8006466:	2000      	movs	r0, #0
}
 8006468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800646c <UART_CheckIdleState>:
{
 800646c:	b530      	push	{r4, r5, lr}
 800646e:	b083      	sub	sp, #12
 8006470:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006472:	2300      	movs	r3, #0
 8006474:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006478:	f7fa fe90 	bl	800119c <HAL_GetTick>
 800647c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800647e:	6822      	ldr	r2, [r4, #0]
 8006480:	6812      	ldr	r2, [r2, #0]
 8006482:	f012 0f08 	tst.w	r2, #8
 8006486:	d10f      	bne.n	80064a8 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f013 0f04 	tst.w	r3, #4
 8006490:	d118      	bne.n	80064c4 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8006492:	2320      	movs	r3, #32
 8006494:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006498:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649c:	2000      	movs	r0, #0
 800649e:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80064a0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80064a4:	b003      	add	sp, #12
 80064a6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	4603      	mov	r3, r0
 80064b0:	2200      	movs	r2, #0
 80064b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064b6:	4620      	mov	r0, r4
 80064b8:	f7ff ff6c 	bl	8006394 <UART_WaitOnFlagUntilTimeout>
 80064bc:	2800      	cmp	r0, #0
 80064be:	d0e3      	beq.n	8006488 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80064c0:	2003      	movs	r0, #3
 80064c2:	e7ef      	b.n	80064a4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	462b      	mov	r3, r5
 80064cc:	2200      	movs	r2, #0
 80064ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064d2:	4620      	mov	r0, r4
 80064d4:	f7ff ff5e 	bl	8006394 <UART_WaitOnFlagUntilTimeout>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d0da      	beq.n	8006492 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80064dc:	2003      	movs	r0, #3
 80064de:	e7e1      	b.n	80064a4 <UART_CheckIdleState+0x38>

080064e0 <HAL_UART_Init>:
  if (huart == NULL)
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d070      	beq.n	80065c6 <HAL_UART_Init+0xe6>
{
 80064e4:	b510      	push	{r4, lr}
 80064e6:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80064e8:	6983      	ldr	r3, [r0, #24]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d043      	beq.n	8006576 <HAL_UART_Init+0x96>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80064ee:	6803      	ldr	r3, [r0, #0]
 80064f0:	4a36      	ldr	r2, [pc, #216]	; (80065cc <HAL_UART_Init+0xec>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d018      	beq.n	8006528 <HAL_UART_Init+0x48>
 80064f6:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d014      	beq.n	8006528 <HAL_UART_Init+0x48>
 80064fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006502:	4293      	cmp	r3, r2
 8006504:	d010      	beq.n	8006528 <HAL_UART_Init+0x48>
 8006506:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800650a:	4293      	cmp	r3, r2
 800650c:	d00c      	beq.n	8006528 <HAL_UART_Init+0x48>
 800650e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006512:	4293      	cmp	r3, r2
 8006514:	d008      	beq.n	8006528 <HAL_UART_Init+0x48>
 8006516:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800651a:	4293      	cmp	r3, r2
 800651c:	d004      	beq.n	8006528 <HAL_UART_Init+0x48>
 800651e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8006522:	482b      	ldr	r0, [pc, #172]	; (80065d0 <HAL_UART_Init+0xf0>)
 8006524:	f7fa fba3 	bl	8000c6e <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006528:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800652c:	2b00      	cmp	r3, #0
 800652e:	d040      	beq.n	80065b2 <HAL_UART_Init+0xd2>
  huart->gState = HAL_UART_STATE_BUSY;
 8006530:	2324      	movs	r3, #36	; 0x24
 8006532:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006536:	6822      	ldr	r2, [r4, #0]
 8006538:	6813      	ldr	r3, [r2, #0]
 800653a:	f023 0301 	bic.w	r3, r3, #1
 800653e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006540:	4620      	mov	r0, r4
 8006542:	f7ff fbdd 	bl	8005d00 <UART_SetConfig>
 8006546:	2801      	cmp	r0, #1
 8006548:	d014      	beq.n	8006574 <HAL_UART_Init+0x94>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800654a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800654c:	2b00      	cmp	r3, #0
 800654e:	d136      	bne.n	80065be <HAL_UART_Init+0xde>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006550:	6822      	ldr	r2, [r4, #0]
 8006552:	6853      	ldr	r3, [r2, #4]
 8006554:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006558:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800655a:	6822      	ldr	r2, [r4, #0]
 800655c:	6893      	ldr	r3, [r2, #8]
 800655e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006562:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006564:	6822      	ldr	r2, [r4, #0]
 8006566:	6813      	ldr	r3, [r2, #0]
 8006568:	f043 0301 	orr.w	r3, r3, #1
 800656c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800656e:	4620      	mov	r0, r4
 8006570:	f7ff ff7c 	bl	800646c <UART_CheckIdleState>
}
 8006574:	bd10      	pop	{r4, pc}
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006576:	6803      	ldr	r3, [r0, #0]
 8006578:	4a14      	ldr	r2, [pc, #80]	; (80065cc <HAL_UART_Init+0xec>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d0d4      	beq.n	8006528 <HAL_UART_Init+0x48>
 800657e:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8006582:	4293      	cmp	r3, r2
 8006584:	d0d0      	beq.n	8006528 <HAL_UART_Init+0x48>
 8006586:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800658a:	4293      	cmp	r3, r2
 800658c:	d0cc      	beq.n	8006528 <HAL_UART_Init+0x48>
 800658e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006592:	4293      	cmp	r3, r2
 8006594:	d0c8      	beq.n	8006528 <HAL_UART_Init+0x48>
 8006596:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800659a:	4293      	cmp	r3, r2
 800659c:	d0c4      	beq.n	8006528 <HAL_UART_Init+0x48>
 800659e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d0c0      	beq.n	8006528 <HAL_UART_Init+0x48>
 80065a6:	f240 1143 	movw	r1, #323	; 0x143
 80065aa:	4809      	ldr	r0, [pc, #36]	; (80065d0 <HAL_UART_Init+0xf0>)
 80065ac:	f7fa fb5f 	bl	8000c6e <assert_failed>
 80065b0:	e7ba      	b.n	8006528 <HAL_UART_Init+0x48>
    huart->Lock = HAL_UNLOCKED;
 80065b2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80065b6:	4620      	mov	r0, r4
 80065b8:	f7fa fd2a 	bl	8001010 <HAL_UART_MspInit>
 80065bc:	e7b8      	b.n	8006530 <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 80065be:	4620      	mov	r0, r4
 80065c0:	f7ff fdee 	bl	80061a0 <UART_AdvFeatureConfig>
 80065c4:	e7c4      	b.n	8006550 <HAL_UART_Init+0x70>
    return HAL_ERROR;
 80065c6:	2001      	movs	r0, #1
}
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40013800 	.word	0x40013800
 80065d0:	080130bc 	.word	0x080130bc

080065d4 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065d4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80065d6:	b92b      	cbnz	r3, 80065e4 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80065d8:	2301      	movs	r3, #1
 80065da:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065de:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 80065e2:	4770      	bx	lr
{
 80065e4:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065e6:	6803      	ldr	r3, [r0, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065ee:	6899      	ldr	r1, [r3, #8]
 80065f0:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065f2:	4d09      	ldr	r5, [pc, #36]	; (8006618 <UARTEx_SetNbDataToProcess+0x44>)
 80065f4:	5c6b      	ldrb	r3, [r5, r1]
 80065f6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065f8:	4c08      	ldr	r4, [pc, #32]	; (800661c <UARTEx_SetNbDataToProcess+0x48>)
 80065fa:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065fc:	fb93 f3f1 	sdiv	r3, r3, r1
 8006600:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006604:	5cab      	ldrb	r3, [r5, r2]
 8006606:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006608:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800660a:	fb93 f3f2 	sdiv	r3, r3, r2
 800660e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006612:	bc30      	pop	{r4, r5}
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	08013154 	.word	0x08013154
 800661c:	0801314c 	.word	0x0801314c

08006620 <HAL_UARTEx_WakeupCallback>:
}
 8006620:	4770      	bx	lr

08006622 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006622:	4770      	bx	lr

08006624 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006624:	4770      	bx	lr
	...

08006628 <HAL_UARTEx_DisableFifoMode>:
{
 8006628:	b510      	push	{r4, lr}
 800662a:	4604      	mov	r4, r0
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800662c:	6803      	ldr	r3, [r0, #0]
 800662e:	4a1d      	ldr	r2, [pc, #116]	; (80066a4 <HAL_UARTEx_DisableFifoMode+0x7c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d018      	beq.n	8006666 <HAL_UARTEx_DisableFifoMode+0x3e>
 8006634:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8006638:	4293      	cmp	r3, r2
 800663a:	d014      	beq.n	8006666 <HAL_UARTEx_DisableFifoMode+0x3e>
 800663c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006640:	4293      	cmp	r3, r2
 8006642:	d010      	beq.n	8006666 <HAL_UARTEx_DisableFifoMode+0x3e>
 8006644:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006648:	4293      	cmp	r3, r2
 800664a:	d00c      	beq.n	8006666 <HAL_UARTEx_DisableFifoMode+0x3e>
 800664c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006650:	4293      	cmp	r3, r2
 8006652:	d008      	beq.n	8006666 <HAL_UARTEx_DisableFifoMode+0x3e>
 8006654:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8006658:	4293      	cmp	r3, r2
 800665a:	d004      	beq.n	8006666 <HAL_UARTEx_DisableFifoMode+0x3e>
 800665c:	f44f 710d 	mov.w	r1, #564	; 0x234
 8006660:	4811      	ldr	r0, [pc, #68]	; (80066a8 <HAL_UARTEx_DisableFifoMode+0x80>)
 8006662:	f7fa fb04 	bl	8000c6e <assert_failed>
  __HAL_LOCK(huart);
 8006666:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800666a:	2b01      	cmp	r3, #1
 800666c:	d017      	beq.n	800669e <HAL_UARTEx_DisableFifoMode+0x76>
 800666e:	2301      	movs	r3, #1
 8006670:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006674:	2324      	movs	r3, #36	; 0x24
 8006676:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800667a:	6822      	ldr	r2, [r4, #0]
 800667c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800667e:	6811      	ldr	r1, [r2, #0]
 8006680:	f021 0101 	bic.w	r1, r1, #1
 8006684:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006686:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800668a:	2000      	movs	r0, #0
 800668c:	6660      	str	r0, [r4, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800668e:	6822      	ldr	r2, [r4, #0]
 8006690:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006692:	2320      	movs	r3, #32
 8006694:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006698:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800669c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800669e:	2002      	movs	r0, #2
 80066a0:	e7fc      	b.n	800669c <HAL_UARTEx_DisableFifoMode+0x74>
 80066a2:	bf00      	nop
 80066a4:	40013800 	.word	0x40013800
 80066a8:	08013110 	.word	0x08013110

080066ac <HAL_UARTEx_SetTxFifoThreshold>:
{
 80066ac:	b570      	push	{r4, r5, r6, lr}
 80066ae:	4604      	mov	r4, r0
 80066b0:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80066b2:	6803      	ldr	r3, [r0, #0]
 80066b4:	4a2a      	ldr	r2, [pc, #168]	; (8006760 <HAL_UARTEx_SetTxFifoThreshold+0xb4>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d018      	beq.n	80066ec <HAL_UARTEx_SetTxFifoThreshold+0x40>
 80066ba:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 80066be:	4293      	cmp	r3, r2
 80066c0:	d014      	beq.n	80066ec <HAL_UARTEx_SetTxFifoThreshold+0x40>
 80066c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d010      	beq.n	80066ec <HAL_UARTEx_SetTxFifoThreshold+0x40>
 80066ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00c      	beq.n	80066ec <HAL_UARTEx_SetTxFifoThreshold+0x40>
 80066d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d008      	beq.n	80066ec <HAL_UARTEx_SetTxFifoThreshold+0x40>
 80066da:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80066de:	4293      	cmp	r3, r2
 80066e0:	d004      	beq.n	80066ec <HAL_UARTEx_SetTxFifoThreshold+0x40>
 80066e2:	f240 2162 	movw	r1, #610	; 0x262
 80066e6:	481f      	ldr	r0, [pc, #124]	; (8006764 <HAL_UARTEx_SetTxFifoThreshold+0xb8>)
 80066e8:	f7fa fac1 	bl	8000c6e <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 80066ec:	b175      	cbz	r5, 800670c <HAL_UARTEx_SetTxFifoThreshold+0x60>
 80066ee:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 80066f2:	d00b      	beq.n	800670c <HAL_UARTEx_SetTxFifoThreshold+0x60>
 80066f4:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80066f8:	d008      	beq.n	800670c <HAL_UARTEx_SetTxFifoThreshold+0x60>
 80066fa:	f1b5 4fc0 	cmp.w	r5, #1610612736	; 0x60000000
 80066fe:	d005      	beq.n	800670c <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8006700:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8006704:	d002      	beq.n	800670c <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8006706:	f1b5 4f20 	cmp.w	r5, #2684354560	; 0xa0000000
 800670a:	d121      	bne.n	8006750 <HAL_UARTEx_SetTxFifoThreshold+0xa4>
  __HAL_LOCK(huart);
 800670c:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8006710:	2b01      	cmp	r3, #1
 8006712:	d023      	beq.n	800675c <HAL_UARTEx_SetTxFifoThreshold+0xb0>
 8006714:	2301      	movs	r3, #1
 8006716:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800671a:	2324      	movs	r3, #36	; 0x24
 800671c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800672c:	6822      	ldr	r2, [r4, #0]
 800672e:	6893      	ldr	r3, [r2, #8]
 8006730:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006734:	432b      	orrs	r3, r5
 8006736:	6093      	str	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006738:	4620      	mov	r0, r4
 800673a:	f7ff ff4b 	bl	80065d4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	601e      	str	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006742:	2320      	movs	r3, #32
 8006744:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006748:	2000      	movs	r0, #0
 800674a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800674e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8006750:	f240 2163 	movw	r1, #611	; 0x263
 8006754:	4803      	ldr	r0, [pc, #12]	; (8006764 <HAL_UARTEx_SetTxFifoThreshold+0xb8>)
 8006756:	f7fa fa8a 	bl	8000c6e <assert_failed>
 800675a:	e7d7      	b.n	800670c <HAL_UARTEx_SetTxFifoThreshold+0x60>
  __HAL_LOCK(huart);
 800675c:	2002      	movs	r0, #2
 800675e:	e7f6      	b.n	800674e <HAL_UARTEx_SetTxFifoThreshold+0xa2>
 8006760:	40013800 	.word	0x40013800
 8006764:	08013110 	.word	0x08013110

08006768 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	4604      	mov	r4, r0
 800676c:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800676e:	6803      	ldr	r3, [r0, #0]
 8006770:	4a2a      	ldr	r2, [pc, #168]	; (800681c <HAL_UARTEx_SetRxFifoThreshold+0xb4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d018      	beq.n	80067a8 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 8006776:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800677a:	4293      	cmp	r3, r2
 800677c:	d014      	beq.n	80067a8 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 800677e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006782:	4293      	cmp	r3, r2
 8006784:	d010      	beq.n	80067a8 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 8006786:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800678a:	4293      	cmp	r3, r2
 800678c:	d00c      	beq.n	80067a8 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 800678e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006792:	4293      	cmp	r3, r2
 8006794:	d008      	beq.n	80067a8 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 8006796:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800679a:	4293      	cmp	r3, r2
 800679c:	d004      	beq.n	80067a8 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 800679e:	f240 2193 	movw	r1, #659	; 0x293
 80067a2:	481f      	ldr	r0, [pc, #124]	; (8006820 <HAL_UARTEx_SetRxFifoThreshold+0xb8>)
 80067a4:	f7fa fa63 	bl	8000c6e <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 80067a8:	b175      	cbz	r5, 80067c8 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 80067aa:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
 80067ae:	d00b      	beq.n	80067c8 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 80067b0:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 80067b4:	d008      	beq.n	80067c8 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 80067b6:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 80067ba:	d005      	beq.n	80067c8 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 80067bc:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 80067c0:	d002      	beq.n	80067c8 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 80067c2:	f1b5 6f20 	cmp.w	r5, #167772160	; 0xa000000
 80067c6:	d121      	bne.n	800680c <HAL_UARTEx_SetRxFifoThreshold+0xa4>
  __HAL_LOCK(huart);
 80067c8:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d023      	beq.n	8006818 <HAL_UARTEx_SetRxFifoThreshold+0xb0>
 80067d0:	2301      	movs	r3, #1
 80067d2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80067d6:	2324      	movs	r3, #36	; 0x24
 80067d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	f022 0201 	bic.w	r2, r2, #1
 80067e6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067e8:	6822      	ldr	r2, [r4, #0]
 80067ea:	6893      	ldr	r3, [r2, #8]
 80067ec:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80067f0:	432b      	orrs	r3, r5
 80067f2:	6093      	str	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80067f4:	4620      	mov	r0, r4
 80067f6:	f7ff feed 	bl	80065d4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	601e      	str	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80067fe:	2320      	movs	r3, #32
 8006800:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006804:	2000      	movs	r0, #0
 8006806:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800680a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800680c:	f44f 7125 	mov.w	r1, #660	; 0x294
 8006810:	4803      	ldr	r0, [pc, #12]	; (8006820 <HAL_UARTEx_SetRxFifoThreshold+0xb8>)
 8006812:	f7fa fa2c 	bl	8000c6e <assert_failed>
 8006816:	e7d7      	b.n	80067c8 <HAL_UARTEx_SetRxFifoThreshold+0x60>
  __HAL_LOCK(huart);
 8006818:	2002      	movs	r0, #2
 800681a:	e7f6      	b.n	800680a <HAL_UARTEx_SetRxFifoThreshold+0xa2>
 800681c:	40013800 	.word	0x40013800
 8006820:	08013110 	.word	0x08013110

08006824 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006824:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006826:	2000      	movs	r0, #0
 8006828:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800682c:	f64b 7280 	movw	r2, #49024	; 0xbf80
 8006830:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8006834:	4770      	bx	lr

08006836 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006836:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800683a:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 800683e:	045b      	lsls	r3, r3, #17
 8006840:	0c5b      	lsrs	r3, r3, #17
 8006842:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8006846:	2000      	movs	r0, #0
 8006848:	4770      	bx	lr

0800684a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800684a:	b084      	sub	sp, #16
 800684c:	4684      	mov	ip, r0
 800684e:	a801      	add	r0, sp, #4
 8006850:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006854:	2301      	movs	r3, #1
 8006856:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800685a:	2000      	movs	r0, #0
 800685c:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006860:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006864:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 8006868:	b004      	add	sp, #16
 800686a:	4770      	bx	lr

0800686c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800686c:	b510      	push	{r4, lr}
 800686e:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006870:	f891 c000 	ldrb.w	ip, [r1]
 8006874:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8006878:	b292      	uxth	r2, r2
 800687a:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800687e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006882:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8006884:	78c8      	ldrb	r0, [r1, #3]
 8006886:	2803      	cmp	r0, #3
 8006888:	d862      	bhi.n	8006950 <USB_ActivateEndpoint+0xe4>
 800688a:	e8df f000 	tbb	[pc, r0]
 800688e:	5d56      	.short	0x5d56
 8006890:	5902      	.short	0x5902
 8006892:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006894:	f248 0e80 	movw	lr, #32896	; 0x8080
 8006898:	ea42 020e 	orr.w	r2, r2, lr
 800689c:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80068a0:	f891 c000 	ldrb.w	ip, [r1]
 80068a4:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80068a8:	b212      	sxth	r2, r2
 80068aa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80068ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80068b2:	ea4c 0202 	orr.w	r2, ip, r2
 80068b6:	b292      	uxth	r2, r2
 80068b8:	ea42 020e 	orr.w	r2, r2, lr
 80068bc:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 80068c0:	7b0a      	ldrb	r2, [r1, #12]
 80068c2:	2a00      	cmp	r2, #0
 80068c4:	f040 80c2 	bne.w	8006a4c <USB_ActivateEndpoint+0x1e0>
  {
    if (ep->is_in != 0U)
 80068c8:	784a      	ldrb	r2, [r1, #1]
 80068ca:	2a00      	cmp	r2, #0
 80068cc:	d051      	beq.n	8006972 <USB_ActivateEndpoint+0x106>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80068ce:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80068d2:	fa13 f282 	uxtah	r2, r3, r2
 80068d6:	780c      	ldrb	r4, [r1, #0]
 80068d8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80068dc:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 80068e0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80068e4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80068e8:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068ec:	780c      	ldrb	r4, [r1, #0]
 80068ee:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80068f2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80068f6:	d00c      	beq.n	8006912 <USB_ActivateEndpoint+0xa6>
 80068f8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80068fc:	b292      	uxth	r2, r2
 80068fe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006902:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800690a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800690e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006912:	78ca      	ldrb	r2, [r1, #3]
 8006914:	2a01      	cmp	r2, #1
 8006916:	d01d      	beq.n	8006954 <USB_ActivateEndpoint+0xe8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006918:	7809      	ldrb	r1, [r1, #0]
 800691a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800691e:	b292      	uxth	r2, r2
 8006920:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006928:	f082 0220 	eor.w	r2, r2, #32
 800692c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006934:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8006938:	e066      	b.n	8006a08 <USB_ActivateEndpoint+0x19c>
      wEpRegVal |= USB_EP_CONTROL;
 800693a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 800693e:	e7a9      	b.n	8006894 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 8006940:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8006944:	2000      	movs	r0, #0
      break;
 8006946:	e7a5      	b.n	8006894 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006948:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 800694c:	2000      	movs	r0, #0
      break;
 800694e:	e7a1      	b.n	8006894 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8006950:	2001      	movs	r0, #1
 8006952:	e79f      	b.n	8006894 <USB_ActivateEndpoint+0x28>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006954:	7809      	ldrb	r1, [r1, #0]
 8006956:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800695a:	b292      	uxth	r2, r2
 800695c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006968:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800696c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8006970:	e04a      	b.n	8006a08 <USB_ActivateEndpoint+0x19c>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006972:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006976:	fa13 f282 	uxtah	r2, r3, r2
 800697a:	780c      	ldrb	r4, [r1, #0]
 800697c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006980:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8006984:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006988:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800698c:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006990:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006994:	fa13 f282 	uxtah	r2, r3, r2
 8006998:	780c      	ldrb	r4, [r1, #0]
 800699a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800699e:	690c      	ldr	r4, [r1, #16]
 80069a0:	2c3e      	cmp	r4, #62	; 0x3e
 80069a2:	d932      	bls.n	8006a0a <USB_ActivateEndpoint+0x19e>
 80069a4:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 80069a8:	f014 0f1f 	tst.w	r4, #31
 80069ac:	d101      	bne.n	80069b2 <USB_ActivateEndpoint+0x146>
 80069ae:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80069b2:	ea6f 6ccc 	mvn.w	ip, ip, lsl #27
 80069b6:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 80069ba:	fa1f fc8c 	uxth.w	ip, ip
 80069be:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069c2:	780c      	ldrb	r4, [r1, #0]
 80069c4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80069c8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80069cc:	d00c      	beq.n	80069e8 <USB_ActivateEndpoint+0x17c>
 80069ce:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80069d2:	b292      	uxth	r2, r2
 80069d4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80069d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80069dc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80069e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069e4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069e8:	7809      	ldrb	r1, [r1, #0]
 80069ea:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80069ee:	b292      	uxth	r2, r2
 80069f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80069f8:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80069fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a04:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8006a08:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006a0a:	b98c      	cbnz	r4, 8006a30 <USB_ActivateEndpoint+0x1c4>
 8006a0c:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8006a10:	b2a4      	uxth	r4, r4
 8006a12:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8006a16:	b2a4      	uxth	r4, r4
 8006a18:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8006a1c:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8006a20:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8006a24:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8006a28:	b2a4      	uxth	r4, r4
 8006a2a:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8006a2e:	e7c8      	b.n	80069c2 <USB_ActivateEndpoint+0x156>
 8006a30:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8006a34:	f014 0f01 	tst.w	r4, #1
 8006a38:	d001      	beq.n	8006a3e <USB_ActivateEndpoint+0x1d2>
 8006a3a:	f10c 0c01 	add.w	ip, ip, #1
 8006a3e:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8006a42:	fa1f fc8c 	uxth.w	ip, ip
 8006a46:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
 8006a4a:	e7ba      	b.n	80069c2 <USB_ActivateEndpoint+0x156>
    if (ep->type == EP_TYPE_BULK)
 8006a4c:	78ca      	ldrb	r2, [r1, #3]
 8006a4e:	2a02      	cmp	r2, #2
 8006a50:	d072      	beq.n	8006b38 <USB_ActivateEndpoint+0x2cc>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006a52:	780c      	ldrb	r4, [r1, #0]
 8006a54:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006a58:	b292      	uxth	r2, r2
 8006a5a:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8006a5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006a62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a6a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006a6e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006a72:	fa13 f282 	uxtah	r2, r3, r2
 8006a76:	f891 c000 	ldrb.w	ip, [r1]
 8006a7a:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8006a7e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8006a82:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006a86:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006a8a:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 8006a8e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006a92:	fa13 f282 	uxtah	r2, r3, r2
 8006a96:	f891 c000 	ldrb.w	ip, [r1]
 8006a9a:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8006a9e:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8006aa2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006aa6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006aaa:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 8006aae:	784a      	ldrb	r2, [r1, #1]
 8006ab0:	2a00      	cmp	r2, #0
 8006ab2:	d150      	bne.n	8006b56 <USB_ActivateEndpoint+0x2ea>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ab4:	780c      	ldrb	r4, [r1, #0]
 8006ab6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006aba:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006abe:	d00c      	beq.n	8006ada <USB_ActivateEndpoint+0x26e>
 8006ac0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006ac4:	b292      	uxth	r2, r2
 8006ac6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006aca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006ace:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006ad2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ad6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ada:	780c      	ldrb	r4, [r1, #0]
 8006adc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006ae0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006ae4:	d00c      	beq.n	8006b00 <USB_ActivateEndpoint+0x294>
 8006ae6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006aea:	b292      	uxth	r2, r2
 8006aec:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006af0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006af4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006af8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006afc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b00:	f891 c000 	ldrb.w	ip, [r1]
 8006b04:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8006b08:	b292      	uxth	r2, r2
 8006b0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b12:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8006b16:	f248 0480 	movw	r4, #32896	; 0x8080
 8006b1a:	4322      	orrs	r2, r4
 8006b1c:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b20:	7809      	ldrb	r1, [r1, #0]
 8006b22:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006b26:	b292      	uxth	r2, r2
 8006b28:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b30:	4322      	orrs	r2, r4
 8006b32:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8006b36:	e767      	b.n	8006a08 <USB_ActivateEndpoint+0x19c>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b38:	780c      	ldrb	r4, [r1, #0]
 8006b3a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b3e:	b292      	uxth	r2, r2
 8006b40:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006b44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b48:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8006b4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b50:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8006b54:	e78b      	b.n	8006a6e <USB_ActivateEndpoint+0x202>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b56:	780c      	ldrb	r4, [r1, #0]
 8006b58:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b5c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006b60:	d00c      	beq.n	8006b7c <USB_ActivateEndpoint+0x310>
 8006b62:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b66:	b292      	uxth	r2, r2
 8006b68:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006b6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b70:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006b74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b78:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b7c:	780c      	ldrb	r4, [r1, #0]
 8006b7e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b82:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006b86:	d00c      	beq.n	8006ba2 <USB_ActivateEndpoint+0x336>
 8006b88:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b8c:	b292      	uxth	r2, r2
 8006b8e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006b92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b9a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006b9e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8006ba2:	78ca      	ldrb	r2, [r1, #3]
 8006ba4:	2a01      	cmp	r2, #1
 8006ba6:	d01e      	beq.n	8006be6 <USB_ActivateEndpoint+0x37a>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ba8:	780c      	ldrb	r4, [r1, #0]
 8006baa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006bae:	b292      	uxth	r2, r2
 8006bb0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb8:	f082 0220 	eor.w	r2, r2, #32
 8006bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bc4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bc8:	7809      	ldrb	r1, [r1, #0]
 8006bca:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006bce:	b292      	uxth	r2, r2
 8006bd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bd4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006bd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006be0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8006be4:	e710      	b.n	8006a08 <USB_ActivateEndpoint+0x19c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006be6:	780c      	ldrb	r4, [r1, #0]
 8006be8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006bec:	b292      	uxth	r2, r2
 8006bee:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bfe:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8006c02:	e7e1      	b.n	8006bc8 <USB_ActivateEndpoint+0x35c>

08006c04 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006c04:	7b0b      	ldrb	r3, [r1, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d146      	bne.n	8006c98 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8006c0a:	784b      	ldrb	r3, [r1, #1]
 8006c0c:	b313      	cbz	r3, 8006c54 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c0e:	780a      	ldrb	r2, [r1, #0]
 8006c10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c14:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c18:	d00c      	beq.n	8006c34 <USB_DeactivateEndpoint+0x30>
 8006c1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c30:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c34:	780a      	ldrb	r2, [r1, #0]
 8006c36:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8006c50:	2000      	movs	r0, #0
 8006c52:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c54:	780a      	ldrb	r2, [r1, #0]
 8006c56:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c5a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006c5e:	d00c      	beq.n	8006c7a <USB_DeactivateEndpoint+0x76>
 8006c60:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c76:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c7a:	780a      	ldrb	r2, [r1, #0]
 8006c7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c92:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006c96:	e7db      	b.n	8006c50 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8006c98:	784b      	ldrb	r3, [r1, #1]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d14e      	bne.n	8006d3c <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c9e:	780a      	ldrb	r2, [r1, #0]
 8006ca0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ca4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006ca8:	d00c      	beq.n	8006cc4 <USB_DeactivateEndpoint+0xc0>
 8006caa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cc4:	780a      	ldrb	r2, [r1, #0]
 8006cc6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cca:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006cce:	d00c      	beq.n	8006cea <USB_DeactivateEndpoint+0xe6>
 8006cd0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ce6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8006cea:	780a      	ldrb	r2, [r1, #0]
 8006cec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d02:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d06:	780a      	ldrb	r2, [r1, #0]
 8006d08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d16:	f248 0c80 	movw	ip, #32896	; 0x8080
 8006d1a:	ea43 030c 	orr.w	r3, r3, ip
 8006d1e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d22:	780a      	ldrb	r2, [r1, #0]
 8006d24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d32:	ea43 030c 	orr.w	r3, r3, ip
 8006d36:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006d3a:	e789      	b.n	8006c50 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d3c:	780a      	ldrb	r2, [r1, #0]
 8006d3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d42:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006d46:	d00c      	beq.n	8006d62 <USB_DeactivateEndpoint+0x15e>
 8006d48:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d62:	780a      	ldrb	r2, [r1, #0]
 8006d64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d68:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d6c:	d00c      	beq.n	8006d88 <USB_DeactivateEndpoint+0x184>
 8006d6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d84:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8006d88:	780a      	ldrb	r2, [r1, #0]
 8006d8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006da4:	780a      	ldrb	r2, [r1, #0]
 8006da6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db4:	f248 0c80 	movw	ip, #32896	; 0x8080
 8006db8:	ea43 030c 	orr.w	r3, r3, ip
 8006dbc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dc0:	780a      	ldrb	r2, [r1, #0]
 8006dc2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd0:	ea43 030c 	orr.w	r3, r3, ip
 8006dd4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006dd8:	e73a      	b.n	8006c50 <USB_DeactivateEndpoint+0x4c>

08006dda <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8006dda:	784b      	ldrb	r3, [r1, #1]
 8006ddc:	b18b      	cbz	r3, 8006e02 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006dde:	780a      	ldrb	r2, [r1, #0]
 8006de0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dee:	f083 0310 	eor.w	r3, r3, #16
 8006df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8006dfe:	2000      	movs	r0, #0
 8006e00:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e02:	780a      	ldrb	r2, [r1, #0]
 8006e04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006e22:	e7ec      	b.n	8006dfe <USB_EPSetStall+0x24>

08006e24 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006e24:	7b0b      	ldrb	r3, [r1, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d14b      	bne.n	8006ec2 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8006e2a:	784b      	ldrb	r3, [r1, #1]
 8006e2c:	b333      	cbz	r3, 8006e7c <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e2e:	780a      	ldrb	r2, [r1, #0]
 8006e30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e38:	d00c      	beq.n	8006e54 <USB_EPClearStall+0x30>
 8006e3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006e54:	78cb      	ldrb	r3, [r1, #3]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d033      	beq.n	8006ec2 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e5a:	780a      	ldrb	r2, [r1, #0]
 8006e5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6a:	f083 0320 	eor.w	r3, r3, #32
 8006e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e76:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006e7a:	e022      	b.n	8006ec2 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e7c:	780a      	ldrb	r2, [r1, #0]
 8006e7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e82:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006e86:	d00c      	beq.n	8006ea2 <USB_EPClearStall+0x7e>
 8006e88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ea2:	780a      	ldrb	r2, [r1, #0]
 8006ea4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ebe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	4770      	bx	lr

08006ec6 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8006ec6:	b911      	cbnz	r1, 8006ece <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006ec8:	2380      	movs	r3, #128	; 0x80
 8006eca:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8006ece:	2000      	movs	r0, #0
 8006ed0:	4770      	bx	lr

08006ed2 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006ed2:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8006ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	4770      	bx	lr

08006ee8 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ee8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8006eec:	b280      	uxth	r0, r0
 8006eee:	4770      	bx	lr

08006ef0 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	085b      	lsrs	r3, r3, #1
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ef4:	4402      	add	r2, r0
 8006ef6:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8006efa:	e008      	b.n	8006f0e <USB_WritePMA+0x1e>
  {
    temp1 = *pBuf;
 8006efc:	7808      	ldrb	r0, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006efe:	f891 c001 	ldrb.w	ip, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8006f02:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8006f06:	f822 0b02 	strh.w	r0, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006f0a:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f4      	bne.n	8006efc <USB_WritePMA+0xc>
  }
}
 8006f12:	4770      	bx	lr

08006f14 <USB_EPStartXfer>:
{
 8006f14:	b570      	push	{r4, r5, r6, lr}
 8006f16:	4605      	mov	r5, r0
 8006f18:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8006f1a:	784a      	ldrb	r2, [r1, #1]
 8006f1c:	2a01      	cmp	r2, #1
 8006f1e:	d032      	beq.n	8006f86 <USB_EPStartXfer+0x72>
    if (ep->doublebuffer == 0U)
 8006f20:	7b0b      	ldrb	r3, [r1, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f040 8283 	bne.w	800742e <USB_EPStartXfer+0x51a>
      if (ep->xfer_len > ep->maxpacket)
 8006f28:	698b      	ldr	r3, [r1, #24]
 8006f2a:	690a      	ldr	r2, [r1, #16]
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	f240 825d 	bls.w	80073ec <USB_EPStartXfer+0x4d8>
        ep->xfer_len -= len;
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f36:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006f3a:	fa15 f383 	uxtah	r3, r5, r3
 8006f3e:	7821      	ldrb	r1, [r4, #0]
 8006f40:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006f44:	2a3e      	cmp	r2, #62	; 0x3e
 8006f46:	f240 8255 	bls.w	80073f4 <USB_EPStartXfer+0x4e0>
 8006f4a:	0951      	lsrs	r1, r2, #5
 8006f4c:	f012 0f1f 	tst.w	r2, #31
 8006f50:	d100      	bne.n	8006f54 <USB_EPStartXfer+0x40>
 8006f52:	3901      	subs	r1, #1
 8006f54:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8006f58:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8006f5c:	b289      	uxth	r1, r1
 8006f5e:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f62:	7822      	ldrb	r2, [r4, #0]
 8006f64:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f72:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8006f82:	2000      	movs	r0, #0
}
 8006f84:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8006f86:	698e      	ldr	r6, [r1, #24]
 8006f88:	6909      	ldr	r1, [r1, #16]
 8006f8a:	428e      	cmp	r6, r1
 8006f8c:	d900      	bls.n	8006f90 <USB_EPStartXfer+0x7c>
      len = ep->maxpacket;
 8006f8e:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 8006f90:	7b23      	ldrb	r3, [r4, #12]
 8006f92:	b32b      	cbz	r3, 8006fe0 <USB_EPStartXfer+0xcc>
      if (ep->type == EP_TYPE_BULK)
 8006f94:	78e3      	ldrb	r3, [r4, #3]
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d044      	beq.n	8007024 <USB_EPStartXfer+0x110>
        ep->xfer_len_db -= len;
 8006f9a:	6a23      	ldr	r3, [r4, #32]
 8006f9c:	1b9b      	subs	r3, r3, r6
 8006f9e:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006fa0:	7823      	ldrb	r3, [r4, #0]
 8006fa2:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
 8006fa6:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006faa:	f000 81dc 	beq.w	8007366 <USB_EPStartXfer+0x452>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fae:	2a00      	cmp	r2, #0
 8006fb0:	f040 81c9 	bne.w	8007346 <USB_EPStartXfer+0x432>
 8006fb4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006fb8:	fa15 f282 	uxtah	r2, r5, r2
 8006fbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006fc0:	2e3e      	cmp	r6, #62	; 0x3e
 8006fc2:	f240 81a3 	bls.w	800730c <USB_EPStartXfer+0x3f8>
 8006fc6:	0972      	lsrs	r2, r6, #5
 8006fc8:	f016 0f1f 	tst.w	r6, #31
 8006fcc:	d100      	bne.n	8006fd0 <USB_EPStartXfer+0xbc>
 8006fce:	3a01      	subs	r2, #1
 8006fd0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006fd4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006fd8:	b292      	uxth	r2, r2
 8006fda:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006fde:	e1bb      	b.n	8007358 <USB_EPStartXfer+0x444>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006fe0:	b2b6      	uxth	r6, r6
 8006fe2:	4633      	mov	r3, r6
 8006fe4:	88e2      	ldrh	r2, [r4, #6]
 8006fe6:	6961      	ldr	r1, [r4, #20]
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f7ff ff81 	bl	8006ef0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fee:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006ff2:	fa15 f383 	uxtah	r3, r5, r3
 8006ff6:	7822      	ldrb	r2, [r4, #0]
 8006ff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ffc:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007000:	7822      	ldrb	r2, [r4, #0]
 8007002:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007006:	b29b      	uxth	r3, r3
 8007008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800700c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007010:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8007014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8007020:	2000      	movs	r0, #0
 8007022:	e7af      	b.n	8006f84 <USB_EPStartXfer+0x70>
        if (ep->xfer_len_db > ep->maxpacket)
 8007024:	6a23      	ldr	r3, [r4, #32]
 8007026:	4299      	cmp	r1, r3
 8007028:	f080 8152 	bcs.w	80072d0 <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800702c:	7822      	ldrb	r2, [r4, #0]
 800702e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007032:	b29b      	uxth	r3, r3
 8007034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007044:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8007048:	6a23      	ldr	r3, [r4, #32]
 800704a:	1b9b      	subs	r3, r3, r6
 800704c:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800704e:	7823      	ldrb	r3, [r4, #0]
 8007050:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8007054:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007058:	f000 809d 	beq.w	8007196 <USB_EPStartXfer+0x282>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800705c:	7862      	ldrb	r2, [r4, #1]
 800705e:	bb8a      	cbnz	r2, 80070c4 <USB_EPStartXfer+0x1b0>
 8007060:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007064:	fa15 f282 	uxtah	r2, r5, r2
 8007068:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800706c:	2e3e      	cmp	r6, #62	; 0x3e
 800706e:	d90c      	bls.n	800708a <USB_EPStartXfer+0x176>
 8007070:	0972      	lsrs	r2, r6, #5
 8007072:	f016 0f1f 	tst.w	r6, #31
 8007076:	d100      	bne.n	800707a <USB_EPStartXfer+0x166>
 8007078:	3a01      	subs	r2, #1
 800707a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800707e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007082:	b292      	uxth	r2, r2
 8007084:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007088:	e01e      	b.n	80070c8 <USB_EPStartXfer+0x1b4>
 800708a:	b98e      	cbnz	r6, 80070b0 <USB_EPStartXfer+0x19c>
 800708c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007090:	b292      	uxth	r2, r2
 8007092:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007096:	b292      	uxth	r2, r2
 8007098:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800709c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80070a0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80070a4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80070a8:	b292      	uxth	r2, r2
 80070aa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80070ae:	e00b      	b.n	80070c8 <USB_EPStartXfer+0x1b4>
 80070b0:	0872      	lsrs	r2, r6, #1
 80070b2:	f016 0f01 	tst.w	r6, #1
 80070b6:	d000      	beq.n	80070ba <USB_EPStartXfer+0x1a6>
 80070b8:	3201      	adds	r2, #1
 80070ba:	0292      	lsls	r2, r2, #10
 80070bc:	b292      	uxth	r2, r2
 80070be:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80070c2:	e001      	b.n	80070c8 <USB_EPStartXfer+0x1b4>
 80070c4:	2a01      	cmp	r2, #1
 80070c6:	d027      	beq.n	8007118 <USB_EPStartXfer+0x204>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070c8:	b2b3      	uxth	r3, r6
 80070ca:	8962      	ldrh	r2, [r4, #10]
 80070cc:	6961      	ldr	r1, [r4, #20]
 80070ce:	4628      	mov	r0, r5
 80070d0:	f7ff ff0e 	bl	8006ef0 <USB_WritePMA>
            ep->xfer_buff += len;
 80070d4:	6963      	ldr	r3, [r4, #20]
 80070d6:	4433      	add	r3, r6
 80070d8:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80070da:	6a23      	ldr	r3, [r4, #32]
 80070dc:	6922      	ldr	r2, [r4, #16]
 80070de:	4293      	cmp	r3, r2
 80070e0:	d924      	bls.n	800712c <USB_EPStartXfer+0x218>
              ep->xfer_len_db -= len;
 80070e2:	1b9b      	subs	r3, r3, r6
 80070e4:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070e6:	7863      	ldrb	r3, [r4, #1]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d140      	bne.n	800716e <USB_EPStartXfer+0x25a>
 80070ec:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80070f0:	fa15 f383 	uxtah	r3, r5, r3
 80070f4:	7822      	ldrb	r2, [r4, #0]
 80070f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070fa:	2e3e      	cmp	r6, #62	; 0x3e
 80070fc:	d91a      	bls.n	8007134 <USB_EPStartXfer+0x220>
 80070fe:	0972      	lsrs	r2, r6, #5
 8007100:	f016 0f1f 	tst.w	r6, #31
 8007104:	d100      	bne.n	8007108 <USB_EPStartXfer+0x1f4>
 8007106:	3a01      	subs	r2, #1
 8007108:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800710c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007110:	b292      	uxth	r2, r2
 8007112:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007116:	e02c      	b.n	8007172 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007118:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800711c:	fa15 f282 	uxtah	r2, r5, r2
 8007120:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007124:	b2b2      	uxth	r2, r6
 8007126:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800712a:	e7cd      	b.n	80070c8 <USB_EPStartXfer+0x1b4>
              ep->xfer_len_db = 0U;
 800712c:	2200      	movs	r2, #0
 800712e:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8007130:	461e      	mov	r6, r3
 8007132:	e7d8      	b.n	80070e6 <USB_EPStartXfer+0x1d2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007134:	b98e      	cbnz	r6, 800715a <USB_EPStartXfer+0x246>
 8007136:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800713a:	b292      	uxth	r2, r2
 800713c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007140:	b292      	uxth	r2, r2
 8007142:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007146:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800714a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800714e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007152:	b292      	uxth	r2, r2
 8007154:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007158:	e00b      	b.n	8007172 <USB_EPStartXfer+0x25e>
 800715a:	0872      	lsrs	r2, r6, #1
 800715c:	f016 0f01 	tst.w	r6, #1
 8007160:	d000      	beq.n	8007164 <USB_EPStartXfer+0x250>
 8007162:	3201      	adds	r2, #1
 8007164:	0292      	lsls	r2, r2, #10
 8007166:	b292      	uxth	r2, r2
 8007168:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800716c:	e001      	b.n	8007172 <USB_EPStartXfer+0x25e>
 800716e:	2b01      	cmp	r3, #1
 8007170:	d006      	beq.n	8007180 <USB_EPStartXfer+0x26c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007172:	b2b3      	uxth	r3, r6
 8007174:	8922      	ldrh	r2, [r4, #8]
 8007176:	6961      	ldr	r1, [r4, #20]
 8007178:	4628      	mov	r0, r5
 800717a:	f7ff feb9 	bl	8006ef0 <USB_WritePMA>
 800717e:	e73f      	b.n	8007000 <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007180:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007184:	fa15 f383 	uxtah	r3, r5, r3
 8007188:	7822      	ldrb	r2, [r4, #0]
 800718a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800718e:	b2b2      	uxth	r2, r6
 8007190:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007194:	e7ed      	b.n	8007172 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007196:	7862      	ldrb	r2, [r4, #1]
 8007198:	bb8a      	cbnz	r2, 80071fe <USB_EPStartXfer+0x2ea>
 800719a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800719e:	fa15 f282 	uxtah	r2, r5, r2
 80071a2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071a6:	2e3e      	cmp	r6, #62	; 0x3e
 80071a8:	d90c      	bls.n	80071c4 <USB_EPStartXfer+0x2b0>
 80071aa:	0972      	lsrs	r2, r6, #5
 80071ac:	f016 0f1f 	tst.w	r6, #31
 80071b0:	d100      	bne.n	80071b4 <USB_EPStartXfer+0x2a0>
 80071b2:	3a01      	subs	r2, #1
 80071b4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80071b8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80071bc:	b292      	uxth	r2, r2
 80071be:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80071c2:	e01e      	b.n	8007202 <USB_EPStartXfer+0x2ee>
 80071c4:	b98e      	cbnz	r6, 80071ea <USB_EPStartXfer+0x2d6>
 80071c6:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80071ca:	b292      	uxth	r2, r2
 80071cc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80071d0:	b292      	uxth	r2, r2
 80071d2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80071d6:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80071da:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80071de:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80071e2:	b292      	uxth	r2, r2
 80071e4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80071e8:	e00b      	b.n	8007202 <USB_EPStartXfer+0x2ee>
 80071ea:	0872      	lsrs	r2, r6, #1
 80071ec:	f016 0f01 	tst.w	r6, #1
 80071f0:	d000      	beq.n	80071f4 <USB_EPStartXfer+0x2e0>
 80071f2:	3201      	adds	r2, #1
 80071f4:	0292      	lsls	r2, r2, #10
 80071f6:	b292      	uxth	r2, r2
 80071f8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80071fc:	e001      	b.n	8007202 <USB_EPStartXfer+0x2ee>
 80071fe:	2a01      	cmp	r2, #1
 8007200:	d027      	beq.n	8007252 <USB_EPStartXfer+0x33e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007202:	b2b3      	uxth	r3, r6
 8007204:	8922      	ldrh	r2, [r4, #8]
 8007206:	6961      	ldr	r1, [r4, #20]
 8007208:	4628      	mov	r0, r5
 800720a:	f7ff fe71 	bl	8006ef0 <USB_WritePMA>
            ep->xfer_buff += len;
 800720e:	6963      	ldr	r3, [r4, #20]
 8007210:	4433      	add	r3, r6
 8007212:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007214:	6a23      	ldr	r3, [r4, #32]
 8007216:	6922      	ldr	r2, [r4, #16]
 8007218:	4293      	cmp	r3, r2
 800721a:	d924      	bls.n	8007266 <USB_EPStartXfer+0x352>
              ep->xfer_len_db -= len;
 800721c:	1b9b      	subs	r3, r3, r6
 800721e:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007220:	7863      	ldrb	r3, [r4, #1]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d140      	bne.n	80072a8 <USB_EPStartXfer+0x394>
 8007226:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800722a:	fa15 f383 	uxtah	r3, r5, r3
 800722e:	7822      	ldrb	r2, [r4, #0]
 8007230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007234:	2e3e      	cmp	r6, #62	; 0x3e
 8007236:	d91a      	bls.n	800726e <USB_EPStartXfer+0x35a>
 8007238:	0972      	lsrs	r2, r6, #5
 800723a:	f016 0f1f 	tst.w	r6, #31
 800723e:	d100      	bne.n	8007242 <USB_EPStartXfer+0x32e>
 8007240:	3a01      	subs	r2, #1
 8007242:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007246:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800724a:	b292      	uxth	r2, r2
 800724c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007250:	e02c      	b.n	80072ac <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007252:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007256:	fa15 f282 	uxtah	r2, r5, r2
 800725a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800725e:	b2b2      	uxth	r2, r6
 8007260:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007264:	e7cd      	b.n	8007202 <USB_EPStartXfer+0x2ee>
              ep->xfer_len_db = 0U;
 8007266:	2200      	movs	r2, #0
 8007268:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800726a:	461e      	mov	r6, r3
 800726c:	e7d8      	b.n	8007220 <USB_EPStartXfer+0x30c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800726e:	b98e      	cbnz	r6, 8007294 <USB_EPStartXfer+0x380>
 8007270:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007274:	b292      	uxth	r2, r2
 8007276:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800727a:	b292      	uxth	r2, r2
 800727c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007280:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007284:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007288:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800728c:	b292      	uxth	r2, r2
 800728e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007292:	e00b      	b.n	80072ac <USB_EPStartXfer+0x398>
 8007294:	0872      	lsrs	r2, r6, #1
 8007296:	f016 0f01 	tst.w	r6, #1
 800729a:	d000      	beq.n	800729e <USB_EPStartXfer+0x38a>
 800729c:	3201      	adds	r2, #1
 800729e:	0292      	lsls	r2, r2, #10
 80072a0:	b292      	uxth	r2, r2
 80072a2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80072a6:	e001      	b.n	80072ac <USB_EPStartXfer+0x398>
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d006      	beq.n	80072ba <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072ac:	b2b3      	uxth	r3, r6
 80072ae:	8962      	ldrh	r2, [r4, #10]
 80072b0:	6961      	ldr	r1, [r4, #20]
 80072b2:	4628      	mov	r0, r5
 80072b4:	f7ff fe1c 	bl	8006ef0 <USB_WritePMA>
 80072b8:	e6a2      	b.n	8007000 <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072ba:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80072be:	fa15 f383 	uxtah	r3, r5, r3
 80072c2:	7822      	ldrb	r2, [r4, #0]
 80072c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072c8:	b2b2      	uxth	r2, r6
 80072ca:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80072ce:	e7ed      	b.n	80072ac <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80072d0:	7821      	ldrb	r1, [r4, #0]
 80072d2:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 80072d6:	b292      	uxth	r2, r2
 80072d8:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80072dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80072e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072e8:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80072ec:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80072f0:	fa15 f282 	uxtah	r2, r5, r2
 80072f4:	7821      	ldrb	r1, [r4, #0]
 80072f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007300:	8922      	ldrh	r2, [r4, #8]
 8007302:	6961      	ldr	r1, [r4, #20]
 8007304:	4628      	mov	r0, r5
 8007306:	f7ff fdf3 	bl	8006ef0 <USB_WritePMA>
 800730a:	e679      	b.n	8007000 <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800730c:	b98e      	cbnz	r6, 8007332 <USB_EPStartXfer+0x41e>
 800730e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007312:	b292      	uxth	r2, r2
 8007314:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007318:	b292      	uxth	r2, r2
 800731a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800731e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007322:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007326:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800732a:	b292      	uxth	r2, r2
 800732c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007330:	e012      	b.n	8007358 <USB_EPStartXfer+0x444>
 8007332:	0872      	lsrs	r2, r6, #1
 8007334:	f016 0f01 	tst.w	r6, #1
 8007338:	d000      	beq.n	800733c <USB_EPStartXfer+0x428>
 800733a:	3201      	adds	r2, #1
 800733c:	0292      	lsls	r2, r2, #10
 800733e:	b292      	uxth	r2, r2
 8007340:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007344:	e008      	b.n	8007358 <USB_EPStartXfer+0x444>
 8007346:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800734a:	fa15 f282 	uxtah	r2, r5, r2
 800734e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007352:	b2b2      	uxth	r2, r6
 8007354:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007358:	b2b3      	uxth	r3, r6
 800735a:	8962      	ldrh	r2, [r4, #10]
 800735c:	6961      	ldr	r1, [r4, #20]
 800735e:	4628      	mov	r0, r5
 8007360:	f7ff fdc6 	bl	8006ef0 <USB_WritePMA>
 8007364:	e64c      	b.n	8007000 <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007366:	bb8a      	cbnz	r2, 80073cc <USB_EPStartXfer+0x4b8>
 8007368:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800736c:	fa15 f282 	uxtah	r2, r5, r2
 8007370:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007374:	2e3e      	cmp	r6, #62	; 0x3e
 8007376:	d90c      	bls.n	8007392 <USB_EPStartXfer+0x47e>
 8007378:	0972      	lsrs	r2, r6, #5
 800737a:	f016 0f1f 	tst.w	r6, #31
 800737e:	d100      	bne.n	8007382 <USB_EPStartXfer+0x46e>
 8007380:	3a01      	subs	r2, #1
 8007382:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007386:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800738a:	b292      	uxth	r2, r2
 800738c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007390:	e025      	b.n	80073de <USB_EPStartXfer+0x4ca>
 8007392:	b98e      	cbnz	r6, 80073b8 <USB_EPStartXfer+0x4a4>
 8007394:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007398:	b292      	uxth	r2, r2
 800739a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800739e:	b292      	uxth	r2, r2
 80073a0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80073a4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80073a8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80073ac:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80073b0:	b292      	uxth	r2, r2
 80073b2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80073b6:	e012      	b.n	80073de <USB_EPStartXfer+0x4ca>
 80073b8:	0872      	lsrs	r2, r6, #1
 80073ba:	f016 0f01 	tst.w	r6, #1
 80073be:	d000      	beq.n	80073c2 <USB_EPStartXfer+0x4ae>
 80073c0:	3201      	adds	r2, #1
 80073c2:	0292      	lsls	r2, r2, #10
 80073c4:	b292      	uxth	r2, r2
 80073c6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80073ca:	e008      	b.n	80073de <USB_EPStartXfer+0x4ca>
 80073cc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80073d0:	fa15 f282 	uxtah	r2, r5, r2
 80073d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80073d8:	b2b2      	uxth	r2, r6
 80073da:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073de:	b2b3      	uxth	r3, r6
 80073e0:	8922      	ldrh	r2, [r4, #8]
 80073e2:	6961      	ldr	r1, [r4, #20]
 80073e4:	4628      	mov	r0, r5
 80073e6:	f7ff fd83 	bl	8006ef0 <USB_WritePMA>
 80073ea:	e609      	b.n	8007000 <USB_EPStartXfer+0xec>
        ep->xfer_len = 0U;
 80073ec:	2200      	movs	r2, #0
 80073ee:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 80073f0:	461a      	mov	r2, r3
 80073f2:	e5a0      	b.n	8006f36 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80073f4:	b98a      	cbnz	r2, 800741a <USB_EPStartXfer+0x506>
 80073f6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80073fa:	b292      	uxth	r2, r2
 80073fc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007400:	b292      	uxth	r2, r2
 8007402:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007406:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800740a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800740e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007412:	b292      	uxth	r2, r2
 8007414:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007418:	e5a3      	b.n	8006f62 <USB_EPStartXfer+0x4e>
 800741a:	0851      	lsrs	r1, r2, #1
 800741c:	f012 0f01 	tst.w	r2, #1
 8007420:	d000      	beq.n	8007424 <USB_EPStartXfer+0x510>
 8007422:	3101      	adds	r1, #1
 8007424:	0289      	lsls	r1, r1, #10
 8007426:	b289      	uxth	r1, r1
 8007428:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 800742c:	e599      	b.n	8006f62 <USB_EPStartXfer+0x4e>
      if (ep->type == EP_TYPE_BULK)
 800742e:	78cb      	ldrb	r3, [r1, #3]
 8007430:	2b02      	cmp	r3, #2
 8007432:	d03b      	beq.n	80074ac <USB_EPStartXfer+0x598>
      else if (ep->type == EP_TYPE_ISOC)
 8007434:	2b01      	cmp	r3, #1
 8007436:	f040 811b 	bne.w	8007670 <USB_EPStartXfer+0x75c>
        if (ep->xfer_len > ep->maxpacket)
 800743a:	6989      	ldr	r1, [r1, #24]
 800743c:	6923      	ldr	r3, [r4, #16]
 800743e:	4299      	cmp	r1, r3
 8007440:	f240 80ca 	bls.w	80075d8 <USB_EPStartXfer+0x6c4>
          ep->xfer_len -= len;
 8007444:	1ac9      	subs	r1, r1, r3
 8007446:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007448:	b9aa      	cbnz	r2, 8007476 <USB_EPStartXfer+0x562>
 800744a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800744e:	fa15 f282 	uxtah	r2, r5, r2
 8007452:	7821      	ldrb	r1, [r4, #0]
 8007454:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007458:	2b3e      	cmp	r3, #62	; 0x3e
 800745a:	f240 80c1 	bls.w	80075e0 <USB_EPStartXfer+0x6cc>
 800745e:	0959      	lsrs	r1, r3, #5
 8007460:	f013 0f1f 	tst.w	r3, #31
 8007464:	d100      	bne.n	8007468 <USB_EPStartXfer+0x554>
 8007466:	3901      	subs	r1, #1
 8007468:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800746c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007470:	b289      	uxth	r1, r1
 8007472:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007476:	7862      	ldrb	r2, [r4, #1]
 8007478:	2a00      	cmp	r2, #0
 800747a:	f040 80eb 	bne.w	8007654 <USB_EPStartXfer+0x740>
 800747e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007482:	fa15 f282 	uxtah	r2, r5, r2
 8007486:	7821      	ldrb	r1, [r4, #0]
 8007488:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800748c:	2b3e      	cmp	r3, #62	; 0x3e
 800748e:	f240 80c4 	bls.w	800761a <USB_EPStartXfer+0x706>
 8007492:	0959      	lsrs	r1, r3, #5
 8007494:	f013 0f1f 	tst.w	r3, #31
 8007498:	d100      	bne.n	800749c <USB_EPStartXfer+0x588>
 800749a:	3901      	subs	r1, #1
 800749c:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 80074a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80074aa:	e55a      	b.n	8006f62 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80074ac:	b9aa      	cbnz	r2, 80074da <USB_EPStartXfer+0x5c6>
 80074ae:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80074b2:	fa10 f383 	uxtah	r3, r0, r3
 80074b6:	780a      	ldrb	r2, [r1, #0]
 80074b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074bc:	6909      	ldr	r1, [r1, #16]
 80074be:	293e      	cmp	r1, #62	; 0x3e
 80074c0:	d925      	bls.n	800750e <USB_EPStartXfer+0x5fa>
 80074c2:	094a      	lsrs	r2, r1, #5
 80074c4:	f011 0f1f 	tst.w	r1, #31
 80074c8:	d100      	bne.n	80074cc <USB_EPStartXfer+0x5b8>
 80074ca:	3a01      	subs	r2, #1
 80074cc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80074d0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80074d4:	b292      	uxth	r2, r2
 80074d6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80074da:	7863      	ldrb	r3, [r4, #1]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d150      	bne.n	8007582 <USB_EPStartXfer+0x66e>
 80074e0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80074e4:	fa15 f383 	uxtah	r3, r5, r3
 80074e8:	7822      	ldrb	r2, [r4, #0]
 80074ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074ee:	6921      	ldr	r1, [r4, #16]
 80074f0:	293e      	cmp	r1, #62	; 0x3e
 80074f2:	d929      	bls.n	8007548 <USB_EPStartXfer+0x634>
 80074f4:	094a      	lsrs	r2, r1, #5
 80074f6:	f011 0f1f 	tst.w	r1, #31
 80074fa:	d100      	bne.n	80074fe <USB_EPStartXfer+0x5ea>
 80074fc:	3a01      	subs	r2, #1
 80074fe:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007502:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007506:	b292      	uxth	r2, r2
 8007508:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800750c:	e03b      	b.n	8007586 <USB_EPStartXfer+0x672>
 800750e:	b989      	cbnz	r1, 8007534 <USB_EPStartXfer+0x620>
 8007510:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007514:	b292      	uxth	r2, r2
 8007516:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800751a:	b292      	uxth	r2, r2
 800751c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007520:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007524:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007528:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800752c:	b292      	uxth	r2, r2
 800752e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007532:	e7d2      	b.n	80074da <USB_EPStartXfer+0x5c6>
 8007534:	084a      	lsrs	r2, r1, #1
 8007536:	f011 0f01 	tst.w	r1, #1
 800753a:	d000      	beq.n	800753e <USB_EPStartXfer+0x62a>
 800753c:	3201      	adds	r2, #1
 800753e:	0292      	lsls	r2, r2, #10
 8007540:	b292      	uxth	r2, r2
 8007542:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007546:	e7c8      	b.n	80074da <USB_EPStartXfer+0x5c6>
 8007548:	b989      	cbnz	r1, 800756e <USB_EPStartXfer+0x65a>
 800754a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800754e:	b292      	uxth	r2, r2
 8007550:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007554:	b292      	uxth	r2, r2
 8007556:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800755a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800755e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007562:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007566:	b292      	uxth	r2, r2
 8007568:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800756c:	e00b      	b.n	8007586 <USB_EPStartXfer+0x672>
 800756e:	084a      	lsrs	r2, r1, #1
 8007570:	f011 0f01 	tst.w	r1, #1
 8007574:	d000      	beq.n	8007578 <USB_EPStartXfer+0x664>
 8007576:	3201      	adds	r2, #1
 8007578:	0292      	lsls	r2, r2, #10
 800757a:	b292      	uxth	r2, r2
 800757c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007580:	e001      	b.n	8007586 <USB_EPStartXfer+0x672>
 8007582:	2b01      	cmp	r3, #1
 8007584:	d01d      	beq.n	80075c2 <USB_EPStartXfer+0x6ae>
        if (ep->xfer_count != 0U)
 8007586:	69e3      	ldr	r3, [r4, #28]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f43f acea 	beq.w	8006f62 <USB_EPStartXfer+0x4e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800758e:	7822      	ldrb	r2, [r4, #0]
 8007590:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007594:	f244 0340 	movw	r3, #16448	; 0x4040
 8007598:	ea03 0001 	and.w	r0, r3, r1
 800759c:	438b      	bics	r3, r1
 800759e:	d002      	beq.n	80075a6 <USB_EPStartXfer+0x692>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	f47f acde 	bne.w	8006f62 <USB_EPStartXfer+0x4e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80075a6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075bc:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80075c0:	e4cf      	b.n	8006f62 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80075c2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80075c6:	fa15 f383 	uxtah	r3, r5, r3
 80075ca:	7822      	ldrb	r2, [r4, #0]
 80075cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075d0:	8a22      	ldrh	r2, [r4, #16]
 80075d2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80075d6:	e7d6      	b.n	8007586 <USB_EPStartXfer+0x672>
          ep->xfer_len = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 80075dc:	460b      	mov	r3, r1
 80075de:	e733      	b.n	8007448 <USB_EPStartXfer+0x534>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80075e0:	b98b      	cbnz	r3, 8007606 <USB_EPStartXfer+0x6f2>
 80075e2:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80075e6:	b289      	uxth	r1, r1
 80075e8:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80075ec:	b289      	uxth	r1, r1
 80075ee:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80075f2:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80075f6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80075fa:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80075fe:	b289      	uxth	r1, r1
 8007600:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007604:	e737      	b.n	8007476 <USB_EPStartXfer+0x562>
 8007606:	0859      	lsrs	r1, r3, #1
 8007608:	f013 0f01 	tst.w	r3, #1
 800760c:	d000      	beq.n	8007610 <USB_EPStartXfer+0x6fc>
 800760e:	3101      	adds	r1, #1
 8007610:	0289      	lsls	r1, r1, #10
 8007612:	b289      	uxth	r1, r1
 8007614:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007618:	e72d      	b.n	8007476 <USB_EPStartXfer+0x562>
 800761a:	b98b      	cbnz	r3, 8007640 <USB_EPStartXfer+0x72c>
 800761c:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 8007620:	b29b      	uxth	r3, r3
 8007622:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007626:	b29b      	uxth	r3, r3
 8007628:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800762c:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 8007630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007638:	b29b      	uxth	r3, r3
 800763a:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800763e:	e490      	b.n	8006f62 <USB_EPStartXfer+0x4e>
 8007640:	0859      	lsrs	r1, r3, #1
 8007642:	f013 0f01 	tst.w	r3, #1
 8007646:	d000      	beq.n	800764a <USB_EPStartXfer+0x736>
 8007648:	3101      	adds	r1, #1
 800764a:	028b      	lsls	r3, r1, #10
 800764c:	b29b      	uxth	r3, r3
 800764e:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8007652:	e486      	b.n	8006f62 <USB_EPStartXfer+0x4e>
 8007654:	2a01      	cmp	r2, #1
 8007656:	f47f ac84 	bne.w	8006f62 <USB_EPStartXfer+0x4e>
 800765a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800765e:	fa15 f282 	uxtah	r2, r5, r2
 8007662:	7821      	ldrb	r1, [r4, #0]
 8007664:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007668:	b29b      	uxth	r3, r3
 800766a:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800766e:	e478      	b.n	8006f62 <USB_EPStartXfer+0x4e>
        return HAL_ERROR;
 8007670:	2001      	movs	r0, #1
 8007672:	e487      	b.n	8006f84 <USB_EPStartXfer+0x70>

08007674 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007674:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007676:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007678:	4402      	add	r2, r0
 800767a:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800767e:	e007      	b.n	8007690 <USB_ReadPMA+0x1c>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007680:	f832 0b02 	ldrh.w	r0, [r2], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007684:	7008      	strb	r0, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007686:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800768a:	7048      	strb	r0, [r1, #1]
    pBuf++;
 800768c:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800768e:	3c01      	subs	r4, #1
 8007690:	2c00      	cmp	r4, #0
 8007692:	d1f5      	bne.n	8007680 <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007694:	f013 0f01 	tst.w	r3, #1
 8007698:	d001      	beq.n	800769e <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 800769a:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800769c:	700b      	strb	r3, [r1, #0]
  }
}
 800769e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076a4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076a6:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80076aa:	b184      	cbz	r4, 80076ce <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076ac:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80076b0:	b17b      	cbz	r3, 80076d2 <USBD_CDC_EP0_RxReady+0x2e>
 80076b2:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80076b6:	28ff      	cmp	r0, #255	; 0xff
 80076b8:	d00d      	beq.n	80076d6 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80076c0:	4621      	mov	r1, r4
 80076c2:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80076c4:	23ff      	movs	r3, #255	; 0xff
 80076c6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80076ca:	2000      	movs	r0, #0
}
 80076cc:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80076ce:	2003      	movs	r0, #3
 80076d0:	e7fc      	b.n	80076cc <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 80076d2:	2000      	movs	r0, #0
 80076d4:	e7fa      	b.n	80076cc <USBD_CDC_EP0_RxReady+0x28>
 80076d6:	2000      	movs	r0, #0
 80076d8:	e7f8      	b.n	80076cc <USBD_CDC_EP0_RxReady+0x28>
	...

080076dc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80076dc:	2343      	movs	r3, #67	; 0x43
 80076de:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 80076e0:	4800      	ldr	r0, [pc, #0]	; (80076e4 <USBD_CDC_GetFSCfgDesc+0x8>)
 80076e2:	4770      	bx	lr
 80076e4:	20000044 	.word	0x20000044

080076e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80076e8:	2343      	movs	r3, #67	; 0x43
 80076ea:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 80076ec:	4800      	ldr	r0, [pc, #0]	; (80076f0 <USBD_CDC_GetHSCfgDesc+0x8>)
 80076ee:	4770      	bx	lr
 80076f0:	20000088 	.word	0x20000088

080076f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80076f4:	2343      	movs	r3, #67	; 0x43
 80076f6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80076f8:	4800      	ldr	r0, [pc, #0]	; (80076fc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80076fa:	4770      	bx	lr
 80076fc:	200000d8 	.word	0x200000d8

08007700 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007700:	230a      	movs	r3, #10
 8007702:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8007704:	4800      	ldr	r0, [pc, #0]	; (8007708 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8007706:	4770      	bx	lr
 8007708:	200000cc 	.word	0x200000cc

0800770c <USBD_CDC_DataOut>:
{
 800770c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800770e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8007712:	b175      	cbz	r5, 8007732 <USBD_CDC_DataOut+0x26>
 8007714:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007716:	f00a f831 	bl	801177c <USBD_LL_GetRxDataSize>
 800771a:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800771e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8007728:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800772c:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800772e:	2000      	movs	r0, #0
}
 8007730:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8007732:	2003      	movs	r0, #3
 8007734:	e7fc      	b.n	8007730 <USBD_CDC_DataOut+0x24>

08007736 <USBD_CDC_DataIn>:
{
 8007736:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007738:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 800773c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8007740:	b353      	cbz	r3, 8007798 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007742:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8007746:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800774a:	6992      	ldr	r2, [r2, #24]
 800774c:	b14a      	cbz	r2, 8007762 <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800774e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8007752:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8007756:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007758:	fbb2 fcf4 	udiv	ip, r2, r4
 800775c:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007760:	b172      	cbz	r2, 8007780 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 8007762:	2200      	movs	r2, #0
 8007764:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007768:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800776c:	6914      	ldr	r4, [r2, #16]
 800776e:	b1ac      	cbz	r4, 800779c <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007770:	460a      	mov	r2, r1
 8007772:	f503 7104 	add.w	r1, r3, #528	; 0x210
 8007776:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800777a:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 800777c:	2000      	movs	r0, #0
}
 800777e:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 8007780:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8007784:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007788:	2400      	movs	r4, #0
 800778a:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800778c:	4623      	mov	r3, r4
 800778e:	4622      	mov	r2, r4
 8007790:	f009 ffe4 	bl	801175c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8007794:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007796:	e7f2      	b.n	800777e <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 8007798:	2003      	movs	r0, #3
 800779a:	e7f0      	b.n	800777e <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 800779c:	2000      	movs	r0, #0
 800779e:	e7ee      	b.n	800777e <USBD_CDC_DataIn+0x48>

080077a0 <USBD_CDC_Setup>:
{
 80077a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077a2:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077a4:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80077ae:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 80077b2:	2e00      	cmp	r6, #0
 80077b4:	d06c      	beq.n	8007890 <USBD_CDC_Setup+0xf0>
 80077b6:	4607      	mov	r7, r0
 80077b8:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ba:	780b      	ldrb	r3, [r1, #0]
 80077bc:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 80077c0:	d02a      	beq.n	8007818 <USBD_CDC_Setup+0x78>
 80077c2:	2d20      	cmp	r5, #32
 80077c4:	d15e      	bne.n	8007884 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 80077c6:	88ca      	ldrh	r2, [r1, #6]
 80077c8:	b1f2      	cbz	r2, 8007808 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 80077ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80077ce:	d00f      	beq.n	80077f0 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077d0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	4631      	mov	r1, r6
 80077d8:	7860      	ldrb	r0, [r4, #1]
 80077da:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80077dc:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80077de:	2a07      	cmp	r2, #7
 80077e0:	bf28      	it	cs
 80077e2:	2207      	movcs	r2, #7
 80077e4:	4631      	mov	r1, r6
 80077e6:	4638      	mov	r0, r7
 80077e8:	f000 fdee 	bl	80083c8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80077ec:	2500      	movs	r5, #0
 80077ee:	e04c      	b.n	800788a <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 80077f0:	784b      	ldrb	r3, [r1, #1]
 80077f2:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80077f6:	798b      	ldrb	r3, [r1, #6]
 80077f8:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80077fc:	88ca      	ldrh	r2, [r1, #6]
 80077fe:	4631      	mov	r1, r6
 8007800:	f000 fdf7 	bl	80083f2 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8007804:	2500      	movs	r5, #0
 8007806:	e040      	b.n	800788a <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007808:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	2200      	movs	r2, #0
 8007810:	7848      	ldrb	r0, [r1, #1]
 8007812:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8007814:	2500      	movs	r5, #0
 8007816:	e038      	b.n	800788a <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 8007818:	784e      	ldrb	r6, [r1, #1]
 800781a:	2e0b      	cmp	r6, #11
 800781c:	d82e      	bhi.n	800787c <USBD_CDC_Setup+0xdc>
 800781e:	e8df f006 	tbb	[pc, r6]
 8007822:	3406      	.short	0x3406
 8007824:	2d2d2d2d 	.word	0x2d2d2d2d
 8007828:	2d2d2d2d 	.word	0x2d2d2d2d
 800782c:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b03      	cmp	r3, #3
 8007836:	d003      	beq.n	8007840 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 8007838:	f000 fa8c 	bl	8007d54 <USBD_CtlError>
            ret = USBD_FAIL;
 800783c:	2503      	movs	r5, #3
 800783e:	e024      	b.n	800788a <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007840:	2202      	movs	r2, #2
 8007842:	a901      	add	r1, sp, #4
 8007844:	f000 fdc0 	bl	80083c8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8007848:	4635      	mov	r5, r6
 800784a:	e01e      	b.n	800788a <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800784c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b03      	cmp	r3, #3
 8007854:	d003      	beq.n	800785e <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 8007856:	f000 fa7d 	bl	8007d54 <USBD_CtlError>
            ret = USBD_FAIL;
 800785a:	2503      	movs	r5, #3
 800785c:	e015      	b.n	800788a <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800785e:	2201      	movs	r2, #1
 8007860:	f10d 0107 	add.w	r1, sp, #7
 8007864:	f000 fdb0 	bl	80083c8 <USBD_CtlSendData>
 8007868:	e00f      	b.n	800788a <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800786a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b03      	cmp	r3, #3
 8007872:	d00a      	beq.n	800788a <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 8007874:	f000 fa6e 	bl	8007d54 <USBD_CtlError>
            ret = USBD_FAIL;
 8007878:	2503      	movs	r5, #3
 800787a:	e006      	b.n	800788a <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 800787c:	f000 fa6a 	bl	8007d54 <USBD_CtlError>
          ret = USBD_FAIL;
 8007880:	2503      	movs	r5, #3
          break;
 8007882:	e002      	b.n	800788a <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 8007884:	f000 fa66 	bl	8007d54 <USBD_CtlError>
      ret = USBD_FAIL;
 8007888:	2503      	movs	r5, #3
}
 800788a:	4628      	mov	r0, r5
 800788c:	b003      	add	sp, #12
 800788e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8007890:	2503      	movs	r5, #3
 8007892:	e7fa      	b.n	800788a <USBD_CDC_Setup+0xea>

08007894 <USBD_CDC_DeInit>:
{
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007898:	2181      	movs	r1, #129	; 0x81
 800789a:	f009 ff28 	bl	80116ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800789e:	2500      	movs	r5, #0
 80078a0:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80078a2:	2101      	movs	r1, #1
 80078a4:	4620      	mov	r0, r4
 80078a6:	f009 ff22 	bl	80116ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80078aa:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80078ae:	2182      	movs	r1, #130	; 0x82
 80078b0:	4620      	mov	r0, r4
 80078b2:	f009 ff1c 	bl	80116ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80078b6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80078ba:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 80078be:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80078c2:	b14b      	cbz	r3, 80078d8 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80078c4:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80078cc:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 80078d0:	f009 ff82 	bl	80117d8 <USBD_static_free>
    pdev->pClassData = NULL;
 80078d4:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 80078d8:	2000      	movs	r0, #0
 80078da:	bd38      	pop	{r3, r4, r5, pc}

080078dc <USBD_CDC_Init>:
{
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078e4:	f009 ff74 	bl	80117d0 <USBD_static_malloc>
  if (hcdc == NULL)
 80078e8:	b3b8      	cbz	r0, 800795a <USBD_CDC_Init+0x7e>
 80078ea:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 80078ec:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078f0:	7c23      	ldrb	r3, [r4, #16]
 80078f2:	bbbb      	cbnz	r3, 8007964 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078f8:	2202      	movs	r2, #2
 80078fa:	2181      	movs	r1, #129	; 0x81
 80078fc:	4620      	mov	r0, r4
 80078fe:	f009 feeb 	bl	80116d8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007902:	2501      	movs	r5, #1
 8007904:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800790a:	2202      	movs	r2, #2
 800790c:	4629      	mov	r1, r5
 800790e:	4620      	mov	r0, r4
 8007910:	f009 fee2 	bl	80116d8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007914:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007918:	2310      	movs	r3, #16
 800791a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800791e:	2308      	movs	r3, #8
 8007920:	2203      	movs	r2, #3
 8007922:	2182      	movs	r1, #130	; 0x82
 8007924:	4620      	mov	r0, r4
 8007926:	f009 fed7 	bl	80116d8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800792a:	2301      	movs	r3, #1
 800792c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007930:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4798      	blx	r3
  hcdc->TxState = 0U;
 8007938:	2300      	movs	r3, #0
 800793a:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800793e:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007942:	7c25      	ldrb	r5, [r4, #16]
 8007944:	bb15      	cbnz	r5, 800798c <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800794a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800794e:	2101      	movs	r1, #1
 8007950:	4620      	mov	r0, r4
 8007952:	f009 ff0b 	bl	801176c <USBD_LL_PrepareReceive>
}
 8007956:	4628      	mov	r0, r5
 8007958:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800795a:	2300      	movs	r3, #0
 800795c:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007960:	2502      	movs	r5, #2
 8007962:	e7f8      	b.n	8007956 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007964:	2340      	movs	r3, #64	; 0x40
 8007966:	2202      	movs	r2, #2
 8007968:	2181      	movs	r1, #129	; 0x81
 800796a:	4620      	mov	r0, r4
 800796c:	f009 feb4 	bl	80116d8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007970:	2501      	movs	r5, #1
 8007972:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007974:	2340      	movs	r3, #64	; 0x40
 8007976:	2202      	movs	r2, #2
 8007978:	4629      	mov	r1, r5
 800797a:	4620      	mov	r0, r4
 800797c:	f009 feac 	bl	80116d8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007980:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007984:	2310      	movs	r3, #16
 8007986:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800798a:	e7c8      	b.n	800791e <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800798c:	2340      	movs	r3, #64	; 0x40
 800798e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8007992:	2101      	movs	r1, #1
 8007994:	4620      	mov	r0, r4
 8007996:	f009 fee9 	bl	801176c <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800799a:	2500      	movs	r5, #0
 800799c:	e7db      	b.n	8007956 <USBD_CDC_Init+0x7a>

0800799e <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800799e:	b119      	cbz	r1, 80079a8 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 80079a0:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80079a4:	2000      	movs	r0, #0
 80079a6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80079a8:	2003      	movs	r0, #3
}
 80079aa:	4770      	bx	lr

080079ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079ac:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80079b0:	b12b      	cbz	r3, 80079be <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 80079b2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80079b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80079ba:	2000      	movs	r0, #0
 80079bc:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80079be:	2003      	movs	r0, #3
}
 80079c0:	4770      	bx	lr

080079c2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079c2:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80079c6:	b11b      	cbz	r3, 80079d0 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 80079c8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80079cc:	2000      	movs	r0, #0
 80079ce:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80079d0:	2003      	movs	r0, #3
}
 80079d2:	4770      	bx	lr

080079d4 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079d4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 80079d8:	b1a2      	cbz	r2, 8007a04 <USBD_CDC_TransmitPacket+0x30>
{
 80079da:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 80079dc:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80079e0:	b10b      	cbz	r3, 80079e6 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 80079e2:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 80079e4:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80079ec:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80079f0:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80079f2:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80079f6:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80079fa:	2181      	movs	r1, #129	; 0x81
 80079fc:	f009 feae 	bl	801175c <USBD_LL_Transmit>
    ret = USBD_OK;
 8007a00:	2000      	movs	r0, #0
 8007a02:	e7ef      	b.n	80079e4 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 8007a04:	2003      	movs	r0, #3
}
 8007a06:	4770      	bx	lr

08007a08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a08:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a0a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8007a0e:	b192      	cbz	r2, 8007a36 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a10:	7c04      	ldrb	r4, [r0, #16]
 8007a12:	b944      	cbnz	r4, 8007a26 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a18:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	f009 fea5 	bl	801176c <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8007a22:	4620      	mov	r0, r4
 8007a24:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a26:	2340      	movs	r3, #64	; 0x40
 8007a28:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	f009 fe9d 	bl	801176c <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8007a32:	2400      	movs	r4, #0
 8007a34:	e7f5      	b.n	8007a22 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8007a36:	2403      	movs	r4, #3
 8007a38:	e7f3      	b.n	8007a22 <USBD_CDC_ReceivePacket+0x1a>

08007a3a <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a3a:	b198      	cbz	r0, 8007a64 <USBD_Init+0x2a>
{
 8007a3c:	b508      	push	{r3, lr}
 8007a3e:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007a40:	2000      	movs	r0, #0
 8007a42:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007a46:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007a4a:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a4e:	b109      	cbz	r1, 8007a54 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8007a50:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a54:	2101      	movs	r1, #1
 8007a56:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f009 fdef 	bl	8011640 <USBD_LL_Init>

  return ret;
}
 8007a62:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007a64:	2003      	movs	r0, #3
}
 8007a66:	4770      	bx	lr

08007a68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8007a72:	b161      	cbz	r1, 8007a8e <USBD_RegisterClass+0x26>
 8007a74:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007a76:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007a7a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007a7c:	b14b      	cbz	r3, 8007a92 <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007a7e:	f10d 0006 	add.w	r0, sp, #6
 8007a82:	4798      	blx	r3
 8007a84:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007a88:	2000      	movs	r0, #0
}
 8007a8a:	b002      	add	sp, #8
 8007a8c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8007a8e:	2003      	movs	r0, #3
 8007a90:	e7fb      	b.n	8007a8a <USBD_RegisterClass+0x22>
  return USBD_OK;
 8007a92:	2000      	movs	r0, #0
 8007a94:	e7f9      	b.n	8007a8a <USBD_RegisterClass+0x22>

08007a96 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a96:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a98:	f009 fe16 	bl	80116c8 <USBD_LL_Start>
}
 8007a9c:	bd08      	pop	{r3, pc}

08007a9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a9e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8007aa0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007aa4:	b113      	cbz	r3, 8007aac <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4798      	blx	r3
  }

  return ret;
}
 8007aaa:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007aac:	2003      	movs	r0, #3
 8007aae:	e7fc      	b.n	8007aaa <USBD_SetClassConfig+0xc>

08007ab0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ab0:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007ab2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007ab6:	b10b      	cbz	r3, 8007abc <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007abc:	2000      	movs	r0, #0
 8007abe:	bd08      	pop	{r3, pc}

08007ac0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ac4:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f000 f92f 	bl	8007d2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ad4:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8007ad8:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007adc:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8007ae0:	f001 031f 	and.w	r3, r1, #31
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d00d      	beq.n	8007b04 <USBD_LL_SetupStage+0x44>
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d010      	beq.n	8007b0e <USBD_LL_SetupStage+0x4e>
 8007aec:	b12b      	cbz	r3, 8007afa <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007aee:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007af2:	4620      	mov	r0, r4
 8007af4:	f009 fe03 	bl	80116fe <USBD_LL_StallEP>
      break;
 8007af8:	e003      	b.n	8007b02 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007afa:	4629      	mov	r1, r5
 8007afc:	4620      	mov	r0, r4
 8007afe:	f000 fae4 	bl	80080ca <USBD_StdDevReq>
  }

  return ret;
}
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b04:	4629      	mov	r1, r5
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 fb17 	bl	800813a <USBD_StdItfReq>
      break;
 8007b0c:	e7f9      	b.n	8007b02 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b0e:	4629      	mov	r1, r5
 8007b10:	4620      	mov	r0, r4
 8007b12:	f000 fb46 	bl	80081a2 <USBD_StdEPReq>
      break;
 8007b16:	e7f4      	b.n	8007b02 <USBD_LL_SetupStage+0x42>

08007b18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b1c:	460d      	mov	r5, r1
 8007b1e:	bb41      	cbnz	r1, 8007b72 <USBD_LL_DataOutStage+0x5a>
 8007b20:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b22:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8007b26:	2a03      	cmp	r2, #3
 8007b28:	d001      	beq.n	8007b2e <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 8007b2a:	4608      	mov	r0, r1
}
 8007b2c:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8007b2e:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8007b32:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8007b36:	4291      	cmp	r1, r2
 8007b38:	d809      	bhi.n	8007b4e <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b3a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d00f      	beq.n	8007b64 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 8007b44:	4620      	mov	r0, r4
 8007b46:	f000 fc6b 	bl	8008420 <USBD_CtlSendStatus>
  return USBD_OK;
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	e7ee      	b.n	8007b2c <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8007b4e:	1a89      	subs	r1, r1, r2
 8007b50:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b54:	428a      	cmp	r2, r1
 8007b56:	bf28      	it	cs
 8007b58:	460a      	movcs	r2, r1
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	f000 fc58 	bl	8008410 <USBD_CtlContinueRx>
  return USBD_OK;
 8007b60:	4628      	mov	r0, r5
 8007b62:	e7e3      	b.n	8007b2c <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 8007b64:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d0ea      	beq.n	8007b44 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 8007b6e:	4798      	blx	r3
 8007b70:	e7e8      	b.n	8007b44 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b72:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d001      	beq.n	8007b80 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	e7d5      	b.n	8007b2c <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 8007b80:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	b10b      	cbz	r3, 8007b8c <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b88:	4798      	blx	r3
        if (ret != USBD_OK)
 8007b8a:	e7cf      	b.n	8007b2c <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	e7cd      	b.n	8007b2c <USBD_LL_DataOutStage+0x14>

08007b90 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b94:	460d      	mov	r5, r1
 8007b96:	2900      	cmp	r1, #0
 8007b98:	d14a      	bne.n	8007c30 <USBD_LL_DataInStage+0xa0>
 8007b9a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b9c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8007ba0:	2a02      	cmp	r2, #2
 8007ba2:	d005      	beq.n	8007bb0 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007ba4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d03c      	beq.n	8007c26 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 8007bac:	4628      	mov	r0, r5
}
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8007bb0:	69c2      	ldr	r2, [r0, #28]
 8007bb2:	6a01      	ldr	r1, [r0, #32]
 8007bb4:	428a      	cmp	r2, r1
 8007bb6:	d80e      	bhi.n	8007bd6 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 8007bb8:	428a      	cmp	r2, r1
 8007bba:	d018      	beq.n	8007bee <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bbc:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b03      	cmp	r3, #3
 8007bc4:	d027      	beq.n	8007c16 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bc6:	2180      	movs	r1, #128	; 0x80
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f009 fd98 	bl	80116fe <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f000 fc31 	bl	8008436 <USBD_CtlReceiveStatus>
 8007bd4:	e7e6      	b.n	8007ba4 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8007bd6:	1a52      	subs	r2, r2, r1
 8007bd8:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bda:	4619      	mov	r1, r3
 8007bdc:	f000 fc01 	bl	80083e2 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007be0:	2300      	movs	r3, #0
 8007be2:	461a      	mov	r2, r3
 8007be4:	4619      	mov	r1, r3
 8007be6:	4620      	mov	r0, r4
 8007be8:	f009 fdc0 	bl	801176c <USBD_LL_PrepareReceive>
 8007bec:	e7da      	b.n	8007ba4 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8007bee:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	d8e3      	bhi.n	8007bbc <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8007bf4:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d2df      	bcs.n	8007bbc <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	4611      	mov	r1, r2
 8007c00:	f000 fbef 	bl	80083e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c04:	2100      	movs	r1, #0
 8007c06:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	460a      	mov	r2, r1
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f009 fdac 	bl	801176c <USBD_LL_PrepareReceive>
 8007c14:	e7c6      	b.n	8007ba4 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 8007c16:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d0d2      	beq.n	8007bc6 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 8007c20:	4620      	mov	r0, r4
 8007c22:	4798      	blx	r3
 8007c24:	e7cf      	b.n	8007bc6 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	e7be      	b.n	8007bae <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c30:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d001      	beq.n	8007c3e <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	e7b7      	b.n	8007bae <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 8007c3e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	b10b      	cbz	r3, 8007c4a <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007c46:	4798      	blx	r3
        if (ret != USBD_OK)
 8007c48:	e7b1      	b.n	8007bae <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	e7af      	b.n	8007bae <USBD_LL_DataInStage+0x1e>

08007c4e <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c54:	2300      	movs	r3, #0
 8007c56:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c5a:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c5c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007c60:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007c64:	b1f3      	cbz	r3, 8007ca4 <USBD_LL_Reset+0x56>
{
 8007c66:	b570      	push	{r4, r5, r6, lr}
 8007c68:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8007c6a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8007c6e:	b11a      	cbz	r2, 8007c78 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	b10b      	cbz	r3, 8007c78 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c74:	2100      	movs	r1, #0
 8007c76:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c78:	2340      	movs	r3, #64	; 0x40
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f009 fd2a 	bl	80116d8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c84:	2601      	movs	r6, #1
 8007c86:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c8a:	2540      	movs	r5, #64	; 0x40
 8007c8c:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c90:	462b      	mov	r3, r5
 8007c92:	2200      	movs	r2, #0
 8007c94:	2180      	movs	r1, #128	; 0x80
 8007c96:	4620      	mov	r0, r4
 8007c98:	f009 fd1e 	bl	80116d8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c9c:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c9e:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8007ca0:	2000      	movs	r0, #0
}
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8007ca4:	2003      	movs	r0, #3
}
 8007ca6:	4770      	bx	lr

08007ca8 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007ca8:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8007caa:	2000      	movs	r0, #0
 8007cac:	4770      	bx	lr

08007cae <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8007cae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007cb8:	2304      	movs	r3, #4
 8007cba:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	4770      	bx	lr

08007cc2 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007cc2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d001      	beq.n	8007cd0 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8007ccc:	2000      	movs	r0, #0
 8007cce:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8007cd0:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8007cda:	e7f7      	b.n	8007ccc <USBD_LL_Resume+0xa>

08007cdc <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8007cdc:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8007ce0:	b162      	cbz	r2, 8007cfc <USBD_LL_SOF+0x20>
{
 8007ce2:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d001      	beq.n	8007cf2 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8007cee:	2000      	movs	r0, #0
}
 8007cf0:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8007cf2:	69d3      	ldr	r3, [r2, #28]
 8007cf4:	b123      	cbz	r3, 8007d00 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 8007cf6:	4798      	blx	r3
  return USBD_OK;
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	e7f9      	b.n	8007cf0 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 8007cfc:	2003      	movs	r0, #3
}
 8007cfe:	4770      	bx	lr
  return USBD_OK;
 8007d00:	2000      	movs	r0, #0
 8007d02:	e7f5      	b.n	8007cf0 <USBD_LL_SOF+0x14>

08007d04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d04:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8007d06:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8007d08:	e002      	b.n	8007d10 <USBD_GetLen+0xc>
  {
    len++;
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	b2c0      	uxtb	r0, r0
    pbuff++;
 8007d0e:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8007d10:	781a      	ldrb	r2, [r3, #0]
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	d1f9      	bne.n	8007d0a <USBD_GetLen+0x6>
  }

  return len;
}
 8007d16:	4770      	bx	lr

08007d18 <USBD_SetFeature>:
{
 8007d18:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d1a:	884b      	ldrh	r3, [r1, #2]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d000      	beq.n	8007d22 <USBD_SetFeature+0xa>
}
 8007d20:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8007d22:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d26:	f000 fb7b 	bl	8008420 <USBD_CtlSendStatus>
}
 8007d2a:	e7f9      	b.n	8007d20 <USBD_SetFeature+0x8>

08007d2c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8007d2c:	780b      	ldrb	r3, [r1, #0]
 8007d2e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d30:	784b      	ldrb	r3, [r1, #1]
 8007d32:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8007d34:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8007d36:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8007d3c:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8007d3e:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d40:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8007d46:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8007d48:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d4a:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8007d50:	80c3      	strh	r3, [r0, #6]
}
 8007d52:	4770      	bx	lr

08007d54 <USBD_CtlError>:
{
 8007d54:	b510      	push	{r4, lr}
 8007d56:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d58:	2180      	movs	r1, #128	; 0x80
 8007d5a:	f009 fcd0 	bl	80116fe <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d5e:	2100      	movs	r1, #0
 8007d60:	4620      	mov	r0, r4
 8007d62:	f009 fccc 	bl	80116fe <USBD_LL_StallEP>
}
 8007d66:	bd10      	pop	{r4, pc}

08007d68 <USBD_GetDescriptor>:
{
 8007d68:	b530      	push	{r4, r5, lr}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8007d76:	884a      	ldrh	r2, [r1, #2]
 8007d78:	0a13      	lsrs	r3, r2, #8
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	2b0e      	cmp	r3, #14
 8007d7e:	f200 80bc 	bhi.w	8007efa <USBD_GetDescriptor+0x192>
 8007d82:	e8df f003 	tbb	[pc, r3]
 8007d86:	3015      	.short	0x3015
 8007d88:	9ebaba44 	.word	0x9ebaba44
 8007d8c:	bababaab 	.word	0xbababaab
 8007d90:	babababa 	.word	0xbabababa
 8007d94:	08          	.byte	0x08
 8007d95:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007d96:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	b123      	cbz	r3, 8007da8 <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007d9e:	f10d 0106 	add.w	r1, sp, #6
 8007da2:	7c00      	ldrb	r0, [r0, #16]
 8007da4:	4798      	blx	r3
  if (err != 0U)
 8007da6:	e00a      	b.n	8007dbe <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8007da8:	4629      	mov	r1, r5
 8007daa:	f7ff ffd3 	bl	8007d54 <USBD_CtlError>
  if (err != 0U)
 8007dae:	e018      	b.n	8007de2 <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007db0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f10d 0106 	add.w	r1, sp, #6
 8007dba:	7c00      	ldrb	r0, [r0, #16]
 8007dbc:	4798      	blx	r3
  if (req->wLength != 0U)
 8007dbe:	88ea      	ldrh	r2, [r5, #6]
 8007dc0:	2a00      	cmp	r2, #0
 8007dc2:	f000 80a3 	beq.w	8007f0c <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 8007dc6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 8099 	beq.w	8007f02 <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	bf28      	it	cs
 8007dd4:	461a      	movcs	r2, r3
 8007dd6:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dda:	4601      	mov	r1, r0
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f000 faf3 	bl	80083c8 <USBD_CtlSendData>
}
 8007de2:	b003      	add	sp, #12
 8007de4:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007de6:	7c03      	ldrb	r3, [r0, #16]
 8007de8:	b943      	cbnz	r3, 8007dfc <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007dea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df0:	f10d 0006 	add.w	r0, sp, #6
 8007df4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007df6:	2302      	movs	r3, #2
 8007df8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007dfa:	e7e0      	b.n	8007dbe <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007dfc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e02:	f10d 0006 	add.w	r0, sp, #6
 8007e06:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e08:	2302      	movs	r3, #2
 8007e0a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007e0c:	e7d7      	b.n	8007dbe <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	2a05      	cmp	r2, #5
 8007e12:	d852      	bhi.n	8007eba <USBD_GetDescriptor+0x152>
 8007e14:	e8df f002 	tbb	[pc, r2]
 8007e18:	2a1d1003 	.word	0x2a1d1003
 8007e1c:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e1e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	b123      	cbz	r3, 8007e30 <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e26:	f10d 0106 	add.w	r1, sp, #6
 8007e2a:	7c00      	ldrb	r0, [r0, #16]
 8007e2c:	4798      	blx	r3
  if (err != 0U)
 8007e2e:	e7c6      	b.n	8007dbe <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007e30:	4629      	mov	r1, r5
 8007e32:	f7ff ff8f 	bl	8007d54 <USBD_CtlError>
  if (err != 0U)
 8007e36:	e7d4      	b.n	8007de2 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e38:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	b123      	cbz	r3, 8007e4a <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e40:	f10d 0106 	add.w	r1, sp, #6
 8007e44:	7c00      	ldrb	r0, [r0, #16]
 8007e46:	4798      	blx	r3
  if (err != 0U)
 8007e48:	e7b9      	b.n	8007dbe <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	f7ff ff82 	bl	8007d54 <USBD_CtlError>
  if (err != 0U)
 8007e50:	e7c7      	b.n	8007de2 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	b123      	cbz	r3, 8007e64 <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e5a:	f10d 0106 	add.w	r1, sp, #6
 8007e5e:	7c00      	ldrb	r0, [r0, #16]
 8007e60:	4798      	blx	r3
  if (err != 0U)
 8007e62:	e7ac      	b.n	8007dbe <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007e64:	4629      	mov	r1, r5
 8007e66:	f7ff ff75 	bl	8007d54 <USBD_CtlError>
  if (err != 0U)
 8007e6a:	e7ba      	b.n	8007de2 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e6c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	b123      	cbz	r3, 8007e7e <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e74:	f10d 0106 	add.w	r1, sp, #6
 8007e78:	7c00      	ldrb	r0, [r0, #16]
 8007e7a:	4798      	blx	r3
  if (err != 0U)
 8007e7c:	e79f      	b.n	8007dbe <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007e7e:	4629      	mov	r1, r5
 8007e80:	f7ff ff68 	bl	8007d54 <USBD_CtlError>
  if (err != 0U)
 8007e84:	e7ad      	b.n	8007de2 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e86:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	b123      	cbz	r3, 8007e98 <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e8e:	f10d 0106 	add.w	r1, sp, #6
 8007e92:	7c00      	ldrb	r0, [r0, #16]
 8007e94:	4798      	blx	r3
  if (err != 0U)
 8007e96:	e792      	b.n	8007dbe <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007e98:	4629      	mov	r1, r5
 8007e9a:	f7ff ff5b 	bl	8007d54 <USBD_CtlError>
  if (err != 0U)
 8007e9e:	e7a0      	b.n	8007de2 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ea0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	b123      	cbz	r3, 8007eb2 <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ea8:	f10d 0106 	add.w	r1, sp, #6
 8007eac:	7c00      	ldrb	r0, [r0, #16]
 8007eae:	4798      	blx	r3
  if (err != 0U)
 8007eb0:	e785      	b.n	8007dbe <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	f7ff ff4e 	bl	8007d54 <USBD_CtlError>
  if (err != 0U)
 8007eb8:	e793      	b.n	8007de2 <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 8007eba:	4629      	mov	r1, r5
 8007ebc:	f7ff ff4a 	bl	8007d54 <USBD_CtlError>
  if (err != 0U)
 8007ec0:	e78f      	b.n	8007de2 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ec2:	7c03      	ldrb	r3, [r0, #16]
 8007ec4:	b933      	cbnz	r3, 8007ed4 <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ec6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ecc:	f10d 0006 	add.w	r0, sp, #6
 8007ed0:	4798      	blx	r3
  if (err != 0U)
 8007ed2:	e774      	b.n	8007dbe <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	f7ff ff3d 	bl	8007d54 <USBD_CtlError>
  if (err != 0U)
 8007eda:	e782      	b.n	8007de2 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007edc:	7c03      	ldrb	r3, [r0, #16]
 8007ede:	b943      	cbnz	r3, 8007ef2 <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007ee0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee6:	f10d 0006 	add.w	r0, sp, #6
 8007eea:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007eec:	2307      	movs	r3, #7
 8007eee:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007ef0:	e765      	b.n	8007dbe <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	f7ff ff2e 	bl	8007d54 <USBD_CtlError>
  if (err != 0U)
 8007ef8:	e773      	b.n	8007de2 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 8007efa:	4629      	mov	r1, r5
 8007efc:	f7ff ff2a 	bl	8007d54 <USBD_CtlError>
    return;
 8007f00:	e76f      	b.n	8007de2 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 8007f02:	4629      	mov	r1, r5
 8007f04:	4620      	mov	r0, r4
 8007f06:	f7ff ff25 	bl	8007d54 <USBD_CtlError>
 8007f0a:	e76a      	b.n	8007de2 <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f000 fa87 	bl	8008420 <USBD_CtlSendStatus>
 8007f12:	e766      	b.n	8007de2 <USBD_GetDescriptor+0x7a>

08007f14 <USBD_SetAddress>:
{
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f18:	888b      	ldrh	r3, [r1, #4]
 8007f1a:	b9fb      	cbnz	r3, 8007f5c <USBD_SetAddress+0x48>
 8007f1c:	88cb      	ldrh	r3, [r1, #6]
 8007f1e:	b9eb      	cbnz	r3, 8007f5c <USBD_SetAddress+0x48>
 8007f20:	884b      	ldrh	r3, [r1, #2]
 8007f22:	2b7f      	cmp	r3, #127	; 0x7f
 8007f24:	d81a      	bhi.n	8007f5c <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f26:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	d00c      	beq.n	8007f4e <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8007f34:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f38:	4629      	mov	r1, r5
 8007f3a:	f009 fc07 	bl	801174c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f000 fa6e 	bl	8008420 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8007f44:	b135      	cbz	r5, 8007f54 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f46:	2302      	movs	r3, #2
 8007f48:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007f4c:	e009      	b.n	8007f62 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8007f4e:	f7ff ff01 	bl	8007d54 <USBD_CtlError>
 8007f52:	e006      	b.n	8007f62 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f54:	2301      	movs	r3, #1
 8007f56:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007f5a:	e002      	b.n	8007f62 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f7ff fef9 	bl	8007d54 <USBD_CtlError>
}
 8007f62:	bd38      	pop	{r3, r4, r5, pc}

08007f64 <USBD_SetConfig>:
{
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	4604      	mov	r4, r0
 8007f68:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8007f6a:	788d      	ldrb	r5, [r1, #2]
 8007f6c:	4b2e      	ldr	r3, [pc, #184]	; (8008028 <USBD_SetConfig+0xc4>)
 8007f6e:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f70:	2d01      	cmp	r5, #1
 8007f72:	d810      	bhi.n	8007f96 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8007f74:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d00f      	beq.n	8007f9e <USBD_SetConfig+0x3a>
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d023      	beq.n	8007fca <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 8007f82:	f7ff fee7 	bl	8007d54 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f86:	4b28      	ldr	r3, [pc, #160]	; (8008028 <USBD_SetConfig+0xc4>)
 8007f88:	7819      	ldrb	r1, [r3, #0]
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f7ff fd90 	bl	8007ab0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f90:	2503      	movs	r5, #3
}
 8007f92:	4628      	mov	r0, r5
 8007f94:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8007f96:	f7ff fedd 	bl	8007d54 <USBD_CtlError>
    return USBD_FAIL;
 8007f9a:	2503      	movs	r5, #3
 8007f9c:	e7f9      	b.n	8007f92 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8007f9e:	b18d      	cbz	r5, 8007fc4 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 8007fa0:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	f7ff fd7b 	bl	8007a9e <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8007fa8:	4605      	mov	r5, r0
 8007faa:	b120      	cbz	r0, 8007fb6 <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 8007fac:	4631      	mov	r1, r6
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f7ff fed0 	bl	8007d54 <USBD_CtlError>
 8007fb4:	e7ed      	b.n	8007f92 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f000 fa32 	bl	8008420 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007fc2:	e7e6      	b.n	8007f92 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8007fc4:	f000 fa2c 	bl	8008420 <USBD_CtlSendStatus>
 8007fc8:	e7e3      	b.n	8007f92 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8007fca:	b1cd      	cbz	r5, 8008000 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 8007fcc:	6841      	ldr	r1, [r0, #4]
 8007fce:	428d      	cmp	r5, r1
 8007fd0:	d025      	beq.n	800801e <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fd2:	b2c9      	uxtb	r1, r1
 8007fd4:	f7ff fd6c 	bl	8007ab0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007fd8:	4b13      	ldr	r3, [pc, #76]	; (8008028 <USBD_SetConfig+0xc4>)
 8007fda:	7819      	ldrb	r1, [r3, #0]
 8007fdc:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f7ff fd5d 	bl	8007a9e <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	b1b0      	cbz	r0, 8008016 <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4620      	mov	r0, r4
 8007fec:	f7ff feb2 	bl	8007d54 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ff0:	7921      	ldrb	r1, [r4, #4]
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f7ff fd5c 	bl	8007ab0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007ffe:	e7c8      	b.n	8007f92 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008000:	2302      	movs	r3, #2
 8008002:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008006:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008008:	4629      	mov	r1, r5
 800800a:	f7ff fd51 	bl	8007ab0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800800e:	4620      	mov	r0, r4
 8008010:	f000 fa06 	bl	8008420 <USBD_CtlSendStatus>
 8008014:	e7bd      	b.n	8007f92 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8008016:	4620      	mov	r0, r4
 8008018:	f000 fa02 	bl	8008420 <USBD_CtlSendStatus>
 800801c:	e7b9      	b.n	8007f92 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800801e:	f000 f9ff 	bl	8008420 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8008022:	2500      	movs	r5, #0
 8008024:	e7b5      	b.n	8007f92 <USBD_SetConfig+0x2e>
 8008026:	bf00      	nop
 8008028:	20002160 	.word	0x20002160

0800802c <USBD_GetConfig>:
{
 800802c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800802e:	88cb      	ldrh	r3, [r1, #6]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d10b      	bne.n	800804c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8008034:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d909      	bls.n	8008052 <USBD_GetConfig+0x26>
 800803e:	2b03      	cmp	r3, #3
 8008040:	d109      	bne.n	8008056 <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008042:	2201      	movs	r2, #1
 8008044:	1d01      	adds	r1, r0, #4
 8008046:	f000 f9bf 	bl	80083c8 <USBD_CtlSendData>
        break;
 800804a:	e001      	b.n	8008050 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800804c:	f7ff fe82 	bl	8007d54 <USBD_CtlError>
}
 8008050:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8008052:	b25b      	sxtb	r3, r3
 8008054:	b913      	cbnz	r3, 800805c <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 8008056:	f7ff fe7d 	bl	8007d54 <USBD_CtlError>
}
 800805a:	e7f9      	b.n	8008050 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800805c:	4601      	mov	r1, r0
 800805e:	2300      	movs	r3, #0
 8008060:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008064:	2201      	movs	r2, #1
 8008066:	f000 f9af 	bl	80083c8 <USBD_CtlSendData>
        break;
 800806a:	e7f1      	b.n	8008050 <USBD_GetConfig+0x24>

0800806c <USBD_GetStatus>:
{
 800806c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800806e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008072:	3b01      	subs	r3, #1
 8008074:	2b02      	cmp	r3, #2
 8008076:	d812      	bhi.n	800809e <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8008078:	88cb      	ldrh	r3, [r1, #6]
 800807a:	2b02      	cmp	r3, #2
 800807c:	d10c      	bne.n	8008098 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800807e:	2301      	movs	r3, #1
 8008080:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8008082:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8008086:	b10b      	cbz	r3, 800808c <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008088:	2303      	movs	r3, #3
 800808a:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800808c:	2202      	movs	r2, #2
 800808e:	f100 010c 	add.w	r1, r0, #12
 8008092:	f000 f999 	bl	80083c8 <USBD_CtlSendData>
}
 8008096:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8008098:	f7ff fe5c 	bl	8007d54 <USBD_CtlError>
        break;
 800809c:	e7fb      	b.n	8008096 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800809e:	f7ff fe59 	bl	8007d54 <USBD_CtlError>
}
 80080a2:	e7f8      	b.n	8008096 <USBD_GetStatus+0x2a>

080080a4 <USBD_ClrFeature>:
{
 80080a4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80080a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80080aa:	3b01      	subs	r3, #1
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d809      	bhi.n	80080c4 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080b0:	884b      	ldrh	r3, [r1, #2]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d000      	beq.n	80080b8 <USBD_ClrFeature+0x14>
}
 80080b6:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080be:	f000 f9af 	bl	8008420 <USBD_CtlSendStatus>
 80080c2:	e7f8      	b.n	80080b6 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80080c4:	f7ff fe46 	bl	8007d54 <USBD_CtlError>
}
 80080c8:	e7f5      	b.n	80080b6 <USBD_ClrFeature+0x12>

080080ca <USBD_StdDevReq>:
{
 80080ca:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080cc:	780c      	ldrb	r4, [r1, #0]
 80080ce:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80080d2:	2c20      	cmp	r4, #32
 80080d4:	d006      	beq.n	80080e4 <USBD_StdDevReq+0x1a>
 80080d6:	2c40      	cmp	r4, #64	; 0x40
 80080d8:	d004      	beq.n	80080e4 <USBD_StdDevReq+0x1a>
 80080da:	b154      	cbz	r4, 80080f2 <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 80080dc:	f7ff fe3a 	bl	8007d54 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80080e0:	2400      	movs	r4, #0
      break;
 80080e2:	e004      	b.n	80080ee <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080e4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	4798      	blx	r3
 80080ec:	4604      	mov	r4, r0
}
 80080ee:	4620      	mov	r0, r4
 80080f0:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 80080f2:	784d      	ldrb	r5, [r1, #1]
 80080f4:	2d09      	cmp	r5, #9
 80080f6:	d81d      	bhi.n	8008134 <USBD_StdDevReq+0x6a>
 80080f8:	e8df f005 	tbb	[pc, r5]
 80080fc:	161c1912 	.word	0x161c1912
 8008100:	1c05081c 	.word	0x1c05081c
 8008104:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8008106:	f7ff fe2f 	bl	8007d68 <USBD_GetDescriptor>
          break;
 800810a:	e7f0      	b.n	80080ee <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800810c:	f7ff ff02 	bl	8007f14 <USBD_SetAddress>
          break;
 8008110:	e7ed      	b.n	80080ee <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 8008112:	f7ff ff27 	bl	8007f64 <USBD_SetConfig>
 8008116:	4604      	mov	r4, r0
          break;
 8008118:	e7e9      	b.n	80080ee <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 800811a:	f7ff ff87 	bl	800802c <USBD_GetConfig>
          break;
 800811e:	e7e6      	b.n	80080ee <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 8008120:	f7ff ffa4 	bl	800806c <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8008124:	462c      	mov	r4, r5
          break;
 8008126:	e7e2      	b.n	80080ee <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 8008128:	f7ff fdf6 	bl	8007d18 <USBD_SetFeature>
          break;
 800812c:	e7df      	b.n	80080ee <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800812e:	f7ff ffb9 	bl	80080a4 <USBD_ClrFeature>
          break;
 8008132:	e7dc      	b.n	80080ee <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 8008134:	f7ff fe0e 	bl	8007d54 <USBD_CtlError>
          break;
 8008138:	e7d9      	b.n	80080ee <USBD_StdDevReq+0x24>

0800813a <USBD_StdItfReq>:
{
 800813a:	b570      	push	{r4, r5, r6, lr}
 800813c:	4605      	mov	r5, r0
 800813e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008140:	780b      	ldrb	r3, [r1, #0]
 8008142:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008146:	2b20      	cmp	r3, #32
 8008148:	d007      	beq.n	800815a <USBD_StdItfReq+0x20>
 800814a:	2b40      	cmp	r3, #64	; 0x40
 800814c:	d005      	beq.n	800815a <USBD_StdItfReq+0x20>
 800814e:	b123      	cbz	r3, 800815a <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8008150:	f7ff fe00 	bl	8007d54 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008154:	2600      	movs	r6, #0
}
 8008156:	4630      	mov	r0, r6
 8008158:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800815a:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800815e:	3b01      	subs	r3, #1
 8008160:	2b02      	cmp	r3, #2
 8008162:	d818      	bhi.n	8008196 <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008164:	7923      	ldrb	r3, [r4, #4]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d80f      	bhi.n	800818a <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800816a:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	4621      	mov	r1, r4
 8008172:	4628      	mov	r0, r5
 8008174:	4798      	blx	r3
 8008176:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008178:	88e3      	ldrh	r3, [r4, #6]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1eb      	bne.n	8008156 <USBD_StdItfReq+0x1c>
 800817e:	2800      	cmp	r0, #0
 8008180:	d1e9      	bne.n	8008156 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8008182:	4628      	mov	r0, r5
 8008184:	f000 f94c 	bl	8008420 <USBD_CtlSendStatus>
 8008188:	e7e5      	b.n	8008156 <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800818a:	4621      	mov	r1, r4
 800818c:	4628      	mov	r0, r5
 800818e:	f7ff fde1 	bl	8007d54 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008192:	2600      	movs	r6, #0
 8008194:	e7df      	b.n	8008156 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 8008196:	4621      	mov	r1, r4
 8008198:	4628      	mov	r0, r5
 800819a:	f7ff fddb 	bl	8007d54 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800819e:	2600      	movs	r6, #0
          break;
 80081a0:	e7d9      	b.n	8008156 <USBD_StdItfReq+0x1c>

080081a2 <USBD_StdEPReq>:
{
 80081a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a4:	4606      	mov	r6, r0
 80081a6:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 80081a8:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081aa:	780c      	ldrb	r4, [r1, #0]
 80081ac:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80081b0:	2c20      	cmp	r4, #32
 80081b2:	d008      	beq.n	80081c6 <USBD_StdEPReq+0x24>
 80081b4:	b2d9      	uxtb	r1, r3
 80081b6:	2c40      	cmp	r4, #64	; 0x40
 80081b8:	d005      	beq.n	80081c6 <USBD_StdEPReq+0x24>
 80081ba:	b16c      	cbz	r4, 80081d8 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 80081bc:	4629      	mov	r1, r5
 80081be:	f7ff fdc9 	bl	8007d54 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80081c2:	2400      	movs	r4, #0
      break;
 80081c4:	e006      	b.n	80081d4 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081c6:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	4629      	mov	r1, r5
 80081ce:	4630      	mov	r0, r6
 80081d0:	4798      	blx	r3
 80081d2:	4604      	mov	r4, r0
}
 80081d4:	4620      	mov	r0, r4
 80081d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 80081d8:	786f      	ldrb	r7, [r5, #1]
 80081da:	2f01      	cmp	r7, #1
 80081dc:	d02f      	beq.n	800823e <USBD_StdEPReq+0x9c>
 80081de:	2f03      	cmp	r7, #3
 80081e0:	d005      	beq.n	80081ee <USBD_StdEPReq+0x4c>
 80081e2:	2f00      	cmp	r7, #0
 80081e4:	d059      	beq.n	800829a <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 80081e6:	4629      	mov	r1, r5
 80081e8:	f7ff fdb4 	bl	8007d54 <USBD_CtlError>
          break;
 80081ec:	e7f2      	b.n	80081d4 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80081ee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d005      	beq.n	8008204 <USBD_StdEPReq+0x62>
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	d012      	beq.n	8008222 <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 80081fc:	4629      	mov	r1, r5
 80081fe:	f7ff fda9 	bl	8007d54 <USBD_CtlError>
              break;
 8008202:	e7e7      	b.n	80081d4 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008204:	b109      	cbz	r1, 800820a <USBD_StdEPReq+0x68>
 8008206:	2980      	cmp	r1, #128	; 0x80
 8008208:	d104      	bne.n	8008214 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 800820a:	4629      	mov	r1, r5
 800820c:	4630      	mov	r0, r6
 800820e:	f7ff fda1 	bl	8007d54 <USBD_CtlError>
 8008212:	e7df      	b.n	80081d4 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008214:	f009 fa73 	bl	80116fe <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008218:	2180      	movs	r1, #128	; 0x80
 800821a:	4630      	mov	r0, r6
 800821c:	f009 fa6f 	bl	80116fe <USBD_LL_StallEP>
 8008220:	e7d8      	b.n	80081d4 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008222:	886b      	ldrh	r3, [r5, #2]
 8008224:	b923      	cbnz	r3, 8008230 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008226:	b119      	cbz	r1, 8008230 <USBD_StdEPReq+0x8e>
 8008228:	2980      	cmp	r1, #128	; 0x80
 800822a:	d001      	beq.n	8008230 <USBD_StdEPReq+0x8e>
 800822c:	88eb      	ldrh	r3, [r5, #6]
 800822e:	b11b      	cbz	r3, 8008238 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 8008230:	4630      	mov	r0, r6
 8008232:	f000 f8f5 	bl	8008420 <USBD_CtlSendStatus>
              break;
 8008236:	e7cd      	b.n	80081d4 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008238:	f009 fa61 	bl	80116fe <USBD_LL_StallEP>
 800823c:	e7f8      	b.n	8008230 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800823e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b02      	cmp	r3, #2
 8008246:	d005      	beq.n	8008254 <USBD_StdEPReq+0xb2>
 8008248:	2b03      	cmp	r3, #3
 800824a:	d012      	beq.n	8008272 <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800824c:	4629      	mov	r1, r5
 800824e:	f7ff fd81 	bl	8007d54 <USBD_CtlError>
              break;
 8008252:	e7bf      	b.n	80081d4 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008254:	b109      	cbz	r1, 800825a <USBD_StdEPReq+0xb8>
 8008256:	2980      	cmp	r1, #128	; 0x80
 8008258:	d104      	bne.n	8008264 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800825a:	4629      	mov	r1, r5
 800825c:	4630      	mov	r0, r6
 800825e:	f7ff fd79 	bl	8007d54 <USBD_CtlError>
 8008262:	e7b7      	b.n	80081d4 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008264:	f009 fa4b 	bl	80116fe <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008268:	2180      	movs	r1, #128	; 0x80
 800826a:	4630      	mov	r0, r6
 800826c:	f009 fa47 	bl	80116fe <USBD_LL_StallEP>
 8008270:	e7b0      	b.n	80081d4 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008272:	886b      	ldrh	r3, [r5, #2]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1ad      	bne.n	80081d4 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8008278:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800827c:	d10a      	bne.n	8008294 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800827e:	4630      	mov	r0, r6
 8008280:	f000 f8ce 	bl	8008420 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008284:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	4629      	mov	r1, r5
 800828c:	4630      	mov	r0, r6
 800828e:	4798      	blx	r3
 8008290:	4604      	mov	r4, r0
 8008292:	e79f      	b.n	80081d4 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008294:	f009 fa3b 	bl	801170e <USBD_LL_ClearStallEP>
 8008298:	e7f1      	b.n	800827e <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800829a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800829e:	b2d2      	uxtb	r2, r2
 80082a0:	2a02      	cmp	r2, #2
 80082a2:	d006      	beq.n	80082b2 <USBD_StdEPReq+0x110>
 80082a4:	2a03      	cmp	r2, #3
 80082a6:	d029      	beq.n	80082fc <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 80082a8:	4629      	mov	r1, r5
 80082aa:	f7ff fd53 	bl	8007d54 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80082ae:	463c      	mov	r4, r7
              break;
 80082b0:	e790      	b.n	80081d4 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082b2:	b109      	cbz	r1, 80082b8 <USBD_StdEPReq+0x116>
 80082b4:	2980      	cmp	r1, #128	; 0x80
 80082b6:	d113      	bne.n	80082e0 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80082bc:	d115      	bne.n	80082ea <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082be:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80082c6:	0089      	lsls	r1, r1, #2
 80082c8:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 80082cc:	4431      	add	r1, r6
 80082ce:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082d4:	2202      	movs	r2, #2
 80082d6:	4630      	mov	r0, r6
 80082d8:	f000 f876 	bl	80083c8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80082dc:	463c      	mov	r4, r7
              break;
 80082de:	e779      	b.n	80081d4 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7ff fd37 	bl	8007d54 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80082e6:	463c      	mov	r4, r7
                break;
 80082e8:	e774      	b.n	80081d4 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082ea:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80082ee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80082f2:	0089      	lsls	r1, r1, #2
 80082f4:	3110      	adds	r1, #16
 80082f6:	4431      	add	r1, r6
 80082f8:	3104      	adds	r1, #4
 80082fa:	e7e9      	b.n	80082d0 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 80082fc:	b25b      	sxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	db1f      	blt.n	8008342 <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008302:	f001 020f 	and.w	r2, r1, #15
 8008306:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800830a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800830e:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 8008312:	b322      	cbz	r2, 800835e <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008314:	2b00      	cmp	r3, #0
 8008316:	db27      	blt.n	8008368 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008318:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800831c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008320:	009c      	lsls	r4, r3, #2
 8008322:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8008326:	4434      	add	r4, r6
 8008328:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800832a:	b109      	cbz	r1, 8008330 <USBD_StdEPReq+0x18e>
 800832c:	2980      	cmp	r1, #128	; 0x80
 800832e:	d124      	bne.n	800837a <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 8008330:	2300      	movs	r3, #0
 8008332:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008334:	2202      	movs	r2, #2
 8008336:	4621      	mov	r1, r4
 8008338:	4630      	mov	r0, r6
 800833a:	f000 f845 	bl	80083c8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800833e:	463c      	mov	r4, r7
              break;
 8008340:	e748      	b.n	80081d4 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008342:	f001 020f 	and.w	r2, r1, #15
 8008346:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800834a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800834e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008350:	2a00      	cmp	r2, #0
 8008352:	d1df      	bne.n	8008314 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 8008354:	4629      	mov	r1, r5
 8008356:	f7ff fcfd 	bl	8007d54 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800835a:	463c      	mov	r4, r7
                  break;
 800835c:	e73a      	b.n	80081d4 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800835e:	4629      	mov	r1, r5
 8008360:	f7ff fcf8 	bl	8007d54 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008364:	463c      	mov	r4, r7
                  break;
 8008366:	e735      	b.n	80081d4 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008368:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800836c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008370:	009c      	lsls	r4, r3, #2
 8008372:	3410      	adds	r4, #16
 8008374:	4434      	add	r4, r6
 8008376:	3404      	adds	r4, #4
 8008378:	e7d7      	b.n	800832a <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800837a:	4630      	mov	r0, r6
 800837c:	f009 f9cf 	bl	801171e <USBD_LL_IsStallEP>
 8008380:	b110      	cbz	r0, 8008388 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 8008382:	2301      	movs	r3, #1
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	e7d5      	b.n	8008334 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 8008388:	2300      	movs	r3, #0
 800838a:	6023      	str	r3, [r4, #0]
 800838c:	e7d2      	b.n	8008334 <USBD_StdEPReq+0x192>

0800838e <USBD_GetString>:
  if (desc == NULL)
 800838e:	b1d0      	cbz	r0, 80083c6 <USBD_GetString+0x38>
{
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	460d      	mov	r5, r1
 8008394:	4616      	mov	r6, r2
 8008396:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008398:	f7ff fcb4 	bl	8007d04 <USBD_GetLen>
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 80083a4:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083a6:	2303      	movs	r3, #3
 80083a8:	706b      	strb	r3, [r5, #1]
  idx++;
 80083aa:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 80083ac:	e007      	b.n	80083be <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 80083ae:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 80083b0:	3401      	adds	r4, #1
    idx++;
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 80083b6:	2100      	movs	r1, #0
 80083b8:	54a9      	strb	r1, [r5, r2]
    idx++;
 80083ba:	3302      	adds	r3, #2
 80083bc:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 80083be:	7822      	ldrb	r2, [r4, #0]
 80083c0:	2a00      	cmp	r2, #0
 80083c2:	d1f4      	bne.n	80083ae <USBD_GetString+0x20>
}
 80083c4:	bd70      	pop	{r4, r5, r6, pc}
 80083c6:	4770      	bx	lr

080083c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80083c8:	b508      	push	{r3, lr}
 80083ca:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083cc:	2202      	movs	r2, #2
 80083ce:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80083d2:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80083d4:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083d6:	460a      	mov	r2, r1
 80083d8:	2100      	movs	r1, #0
 80083da:	f009 f9bf 	bl	801175c <USBD_LL_Transmit>

  return USBD_OK;
}
 80083de:	2000      	movs	r0, #0
 80083e0:	bd08      	pop	{r3, pc}

080083e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80083e2:	b508      	push	{r3, lr}
 80083e4:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083e6:	460a      	mov	r2, r1
 80083e8:	2100      	movs	r1, #0
 80083ea:	f009 f9b7 	bl	801175c <USBD_LL_Transmit>

  return USBD_OK;
}
 80083ee:	2000      	movs	r0, #0
 80083f0:	bd08      	pop	{r3, pc}

080083f2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80083f2:	b508      	push	{r3, lr}
 80083f4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083f6:	2203      	movs	r2, #3
 80083f8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80083fc:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008400:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008404:	460a      	mov	r2, r1
 8008406:	2100      	movs	r1, #0
 8008408:	f009 f9b0 	bl	801176c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800840c:	2000      	movs	r0, #0
 800840e:	bd08      	pop	{r3, pc}

08008410 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008410:	b508      	push	{r3, lr}
 8008412:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008414:	460a      	mov	r2, r1
 8008416:	2100      	movs	r1, #0
 8008418:	f009 f9a8 	bl	801176c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800841c:	2000      	movs	r0, #0
 800841e:	bd08      	pop	{r3, pc}

08008420 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008420:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008422:	2204      	movs	r2, #4
 8008424:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008428:	2300      	movs	r3, #0
 800842a:	461a      	mov	r2, r3
 800842c:	4619      	mov	r1, r3
 800842e:	f009 f995 	bl	801175c <USBD_LL_Transmit>

  return USBD_OK;
}
 8008432:	2000      	movs	r0, #0
 8008434:	bd08      	pop	{r3, pc}

08008436 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008436:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008438:	2205      	movs	r2, #5
 800843a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800843e:	2300      	movs	r3, #0
 8008440:	461a      	mov	r2, r3
 8008442:	4619      	mov	r1, r3
 8008444:	f009 f992 	bl	801176c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008448:	2000      	movs	r0, #0
 800844a:	bd08      	pop	{r3, pc}

0800844c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800844c:	2884      	cmp	r0, #132	; 0x84
 800844e:	d001      	beq.n	8008454 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8008450:	3003      	adds	r0, #3
 8008452:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008454:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8008456:	4770      	bx	lr

08008458 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008458:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800845a:	f000 fee3 	bl	8009224 <vTaskStartScheduler>
  
  return osOK;
}
 800845e:	2000      	movs	r0, #0
 8008460:	bd08      	pop	{r3, pc}

08008462 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008462:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008464:	b085      	sub	sp, #20
 8008466:	460c      	mov	r4, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008468:	6845      	ldr	r5, [r0, #4]
 800846a:	6806      	ldr	r6, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800846c:	6907      	ldr	r7, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800846e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8008472:	f7ff ffeb 	bl	800844c <makeFreeRtosPriority>
 8008476:	ab03      	add	r3, sp, #12
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	9000      	str	r0, [sp, #0]
 800847c:	4623      	mov	r3, r4
 800847e:	b2ba      	uxth	r2, r7
 8008480:	4631      	mov	r1, r6
 8008482:	4628      	mov	r0, r5
 8008484:	f000 fe9c 	bl	80091c0 <xTaskCreate>
 8008488:	2801      	cmp	r0, #1
 800848a:	d102      	bne.n	8008492 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800848c:	9803      	ldr	r0, [sp, #12]
}
 800848e:	b005      	add	sp, #20
 8008490:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8008492:	2000      	movs	r0, #0
 8008494:	e7fb      	b.n	800848e <osThreadCreate+0x2c>

08008496 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008496:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008498:	b900      	cbnz	r0, 800849c <osDelay+0x6>
 800849a:	2001      	movs	r0, #1
 800849c:	f001 f83e 	bl	800951c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80084a0:	2000      	movs	r0, #0
 80084a2:	bd08      	pop	{r3, pc}

080084a4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80084a4:	b500      	push	{lr}
 80084a6:	b083      	sub	sp, #12
 80084a8:	4613      	mov	r3, r2
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 80084aa:	2901      	cmp	r1, #1
 80084ac:	d009      	beq.n	80084c2 <osTimerCreate+0x1e>
 80084ae:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80084b0:	6801      	ldr	r1, [r0, #0]
  return xTimerCreate((const char *)"",
 80084b2:	9100      	str	r1, [sp, #0]
 80084b4:	2101      	movs	r1, #1
 80084b6:	4804      	ldr	r0, [pc, #16]	; (80084c8 <osTimerCreate+0x24>)
 80084b8:	f001 fb44 	bl	8009b44 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 80084bc:	b003      	add	sp, #12
 80084be:	f85d fb04 	ldr.w	pc, [sp], #4
  return xTimerCreate((const char *)"",
 80084c2:	2201      	movs	r2, #1
 80084c4:	e7f4      	b.n	80084b0 <osTimerCreate+0xc>
 80084c6:	bf00      	nop
 80084c8:	08013900 	.word	0x08013900

080084cc <prvTestWaitCondition>:

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 80084cc:	b91a      	cbnz	r2, 80084d6 <prvTestWaitCondition+0xa>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80084ce:	4208      	tst	r0, r1
 80084d0:	d105      	bne.n	80084de <prvTestWaitCondition+0x12>
BaseType_t xWaitConditionMet = pdFALSE;
 80084d2:	4610      	mov	r0, r2
 80084d4:	4770      	bx	lr
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80084d6:	4381      	bics	r1, r0
 80084d8:	d003      	beq.n	80084e2 <prvTestWaitCondition+0x16>
BaseType_t xWaitConditionMet = pdFALSE;
 80084da:	2000      	movs	r0, #0
 80084dc:	4770      	bx	lr
			xWaitConditionMet = pdTRUE;
 80084de:	2001      	movs	r0, #1
 80084e0:	4770      	bx	lr
		{
			xWaitConditionMet = pdTRUE;
 80084e2:	2001      	movs	r0, #1
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
 80084e4:	4770      	bx	lr

080084e6 <xEventGroupCreate>:
	{
 80084e6:	b510      	push	{r4, lr}
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80084e8:	201c      	movs	r0, #28
 80084ea:	f001 ff0b 	bl	800a304 <pvPortMalloc>
		if( pxEventBits != NULL )
 80084ee:	4604      	mov	r4, r0
 80084f0:	b120      	cbz	r0, 80084fc <xEventGroupCreate+0x16>
			pxEventBits->uxEventBits = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80084f8:	f000 f8da 	bl	80086b0 <vListInitialise>
	}
 80084fc:	4620      	mov	r0, r4
 80084fe:	bd10      	pop	{r4, pc}

08008500 <xEventGroupWaitBits>:
{
 8008500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 8008504:	b178      	cbz	r0, 8008526 <xEventGroupWaitBits+0x26>
 8008506:	460c      	mov	r4, r1
 8008508:	4616      	mov	r6, r2
 800850a:	461d      	mov	r5, r3
 800850c:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800850e:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 8008512:	d011      	beq.n	8008538 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	e7fe      	b.n	8008524 <xEventGroupWaitBits+0x24>
 8008526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8008536:	e7fe      	b.n	8008536 <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 8008538:	b941      	cbnz	r1, 800854c <xEventGroupWaitBits+0x4c>
 800853a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	e7fe      	b.n	800854a <xEventGroupWaitBits+0x4a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800854c:	f001 f9ce 	bl	80098ec <xTaskGetSchedulerState>
 8008550:	b950      	cbnz	r0, 8008568 <xEventGroupWaitBits+0x68>
 8008552:	9b08      	ldr	r3, [sp, #32]
 8008554:	b143      	cbz	r3, 8008568 <xEventGroupWaitBits+0x68>
 8008556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	e7fe      	b.n	8008566 <xEventGroupWaitBits+0x66>
	vTaskSuspendAll();
 8008568:	f000 feb4 	bl	80092d4 <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800856c:	f8d7 9000 	ldr.w	r9, [r7]
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008570:	462a      	mov	r2, r5
 8008572:	4621      	mov	r1, r4
 8008574:	4648      	mov	r0, r9
 8008576:	f7ff ffa9 	bl	80084cc <prvTestWaitCondition>
		if( xWaitConditionMet != pdFALSE )
 800857a:	b1f0      	cbz	r0, 80085ba <xEventGroupWaitBits+0xba>
			if( xClearOnExit != pdFALSE )
 800857c:	b116      	cbz	r6, 8008584 <xEventGroupWaitBits+0x84>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800857e:	ea29 0304 	bic.w	r3, r9, r4
 8008582:	603b      	str	r3, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 8008584:	f000 ff4c 	bl	8009420 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8008588:	f1b8 0f00 	cmp.w	r8, #0
 800858c:	d012      	beq.n	80085b4 <xEventGroupWaitBits+0xb4>
		if( xAlreadyYielded == pdFALSE )
 800858e:	b948      	cbnz	r0, 80085a4 <xEventGroupWaitBits+0xa4>
			portYIELD_WITHIN_API();
 8008590:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008598:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 80085a4:	f001 fa12 	bl	80099cc <uxTaskResetEventItemValue>
 80085a8:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80085aa:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80085ae:	d01a      	beq.n	80085e6 <xEventGroupWaitBits+0xe6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80085b0:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
 80085b4:	4648      	mov	r0, r9
 80085b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80085ba:	9b08      	ldr	r3, [sp, #32]
 80085bc:	b183      	cbz	r3, 80085e0 <xEventGroupWaitBits+0xe0>
			if( xClearOnExit != pdFALSE )
 80085be:	b966      	cbnz	r6, 80085da <xEventGroupWaitBits+0xda>
EventBits_t uxReturn, uxControlBits = 0;
 80085c0:	4641      	mov	r1, r8
			if( xWaitForAllBits != pdFALSE )
 80085c2:	b10d      	cbz	r5, 80085c8 <xEventGroupWaitBits+0xc8>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80085c4:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80085c8:	9a08      	ldr	r2, [sp, #32]
 80085ca:	4321      	orrs	r1, r4
 80085cc:	1d38      	adds	r0, r7, #4
 80085ce:	f001 f85d 	bl	800968c <vTaskPlaceOnUnorderedEventList>
			uxReturn = 0;
 80085d2:	46c1      	mov	r9, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80085d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085d8:	e7d4      	b.n	8008584 <xEventGroupWaitBits+0x84>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80085da:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80085de:	e7f0      	b.n	80085c2 <xEventGroupWaitBits+0xc2>
 80085e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085e4:	e7ce      	b.n	8008584 <xEventGroupWaitBits+0x84>
			taskENTER_CRITICAL();
 80085e6:	f001 fcd5 	bl	8009f94 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 80085ea:	f8d7 9000 	ldr.w	r9, [r7]
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80085ee:	462a      	mov	r2, r5
 80085f0:	4621      	mov	r1, r4
 80085f2:	4648      	mov	r0, r9
 80085f4:	f7ff ff6a 	bl	80084cc <prvTestWaitCondition>
 80085f8:	b118      	cbz	r0, 8008602 <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 80085fa:	b116      	cbz	r6, 8008602 <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80085fc:	ea29 0404 	bic.w	r4, r9, r4
 8008600:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 8008602:	f001 fce9 	bl	8009fd8 <vPortExitCritical>
 8008606:	e7d3      	b.n	80085b0 <xEventGroupWaitBits+0xb0>

08008608 <xEventGroupSetBits>:
{
 8008608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( xEventGroup );
 800860a:	b168      	cbz	r0, 8008628 <xEventGroupSetBits+0x20>
 800860c:	460d      	mov	r5, r1
 800860e:	4604      	mov	r4, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008610:	f011 477f 	ands.w	r7, r1, #4278190080	; 0xff000000
 8008614:	d011      	beq.n	800863a <xEventGroupSetBits+0x32>
 8008616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	e7fe      	b.n	8008626 <xEventGroupSetBits+0x1e>
 8008628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8008638:	e7fe      	b.n	8008638 <xEventGroupSetBits+0x30>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800863a:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 800863e:	f000 fe49 	bl	80092d4 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008642:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	432b      	orrs	r3, r5
 8008648:	6023      	str	r3, [r4, #0]
		while( pxListItem != pxListEnd )
 800864a:	e00a      	b.n	8008662 <xEventGroupSetBits+0x5a>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800864c:	6821      	ldr	r1, [r4, #0]
 800864e:	ea32 0101 	bics.w	r1, r2, r1
 8008652:	d105      	bne.n	8008660 <xEventGroupSetBits+0x58>
 8008654:	e011      	b.n	800867a <xEventGroupSetBits+0x72>
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008656:	6821      	ldr	r1, [r4, #0]
 8008658:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800865c:	f001 f8aa 	bl	80097b4 <vTaskRemoveFromUnorderedEventList>
{
 8008660:	4628      	mov	r0, r5
		while( pxListItem != pxListEnd )
 8008662:	42b0      	cmp	r0, r6
 8008664:	d00e      	beq.n	8008684 <xEventGroupSetBits+0x7c>
			pxNext = listGET_NEXT( pxListItem );
 8008666:	6845      	ldr	r5, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008668:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800866a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800866e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8008672:	d1eb      	bne.n	800864c <xEventGroupSetBits+0x44>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008674:	6821      	ldr	r1, [r4, #0]
 8008676:	4211      	tst	r1, r2
 8008678:	d0f2      	beq.n	8008660 <xEventGroupSetBits+0x58>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800867a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800867e:	d0ea      	beq.n	8008656 <xEventGroupSetBits+0x4e>
					uxBitsToClear |= uxBitsWaitedFor;
 8008680:	4317      	orrs	r7, r2
 8008682:	e7e8      	b.n	8008656 <xEventGroupSetBits+0x4e>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	ea23 0307 	bic.w	r3, r3, r7
 800868a:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800868c:	f000 fec8 	bl	8009420 <xTaskResumeAll>
}
 8008690:	6820      	ldr	r0, [r4, #0]
 8008692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008694 <vEventGroupSetBitsCallback>:
{
 8008694:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008696:	f7ff ffb7 	bl	8008608 <xEventGroupSetBits>
}
 800869a:	bd08      	pop	{r3, pc}

0800869c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800869c:	b508      	push	{r3, lr}
 800869e:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80086a0:	460a      	mov	r2, r1
 80086a2:	4601      	mov	r1, r0
 80086a4:	4801      	ldr	r0, [pc, #4]	; (80086ac <xEventGroupSetBitsFromISR+0x10>)
 80086a6:	f001 fbf7 	bl	8009e98 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 80086aa:	bd08      	pop	{r3, pc}
 80086ac:	08008695 	.word	0x08008695

080086b0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086b0:	f100 0308 	add.w	r3, r0, #8
 80086b4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086ba:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086bc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086be:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086c4:	4770      	bx	lr

080086c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086ca:	4770      	bx	lr

080086cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80086cc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80086ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80086d0:	689a      	ldr	r2, [r3, #8]
 80086d2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086d4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086d6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086d8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80086da:	6803      	ldr	r3, [r0, #0]
 80086dc:	3301      	adds	r3, #1
 80086de:	6003      	str	r3, [r0, #0]
}
 80086e0:	4770      	bx	lr

080086e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086e2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086e4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086e6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80086ea:	d011      	beq.n	8008710 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086ec:	f100 0308 	add.w	r3, r0, #8
 80086f0:	461c      	mov	r4, r3
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	42aa      	cmp	r2, r5
 80086f8:	d9fa      	bls.n	80086f0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086fa:	6863      	ldr	r3, [r4, #4]
 80086fc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086fe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008700:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008702:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008704:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008706:	6803      	ldr	r3, [r0, #0]
 8008708:	3301      	adds	r3, #1
 800870a:	6003      	str	r3, [r0, #0]
}
 800870c:	bc30      	pop	{r4, r5}
 800870e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8008710:	6904      	ldr	r4, [r0, #16]
 8008712:	e7f2      	b.n	80086fa <vListInsert+0x18>

08008714 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008714:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008716:	6841      	ldr	r1, [r0, #4]
 8008718:	6882      	ldr	r2, [r0, #8]
 800871a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800871c:	6841      	ldr	r1, [r0, #4]
 800871e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	4282      	cmp	r2, r0
 8008724:	d006      	beq.n	8008734 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008726:	2200      	movs	r2, #0
 8008728:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	3a01      	subs	r2, #1
 800872e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008730:	6818      	ldr	r0, [r3, #0]
}
 8008732:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008734:	6882      	ldr	r2, [r0, #8]
 8008736:	605a      	str	r2, [r3, #4]
 8008738:	e7f5      	b.n	8008726 <uxListRemove+0x12>

0800873a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800873a:	b510      	push	{r4, lr}
 800873c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800873e:	f001 fc29 	bl	8009f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008742:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008744:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008746:	429a      	cmp	r2, r3
 8008748:	d004      	beq.n	8008754 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800874a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800874c:	f001 fc44 	bl	8009fd8 <vPortExitCritical>

	return xReturn;
}
 8008750:	4620      	mov	r0, r4
 8008752:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008754:	2401      	movs	r4, #1
 8008756:	e7f9      	b.n	800874c <prvIsQueueFull+0x12>

08008758 <prvIsQueueEmpty>:
{
 8008758:	b510      	push	{r4, lr}
 800875a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800875c:	f001 fc1a 	bl	8009f94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008760:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008762:	b923      	cbnz	r3, 800876e <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8008764:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8008766:	f001 fc37 	bl	8009fd8 <vPortExitCritical>
}
 800876a:	4620      	mov	r0, r4
 800876c:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800876e:	2400      	movs	r4, #0
 8008770:	e7f9      	b.n	8008766 <prvIsQueueEmpty+0xe>

08008772 <prvCopyDataToQueue>:
{
 8008772:	b570      	push	{r4, r5, r6, lr}
 8008774:	4604      	mov	r4, r0
 8008776:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008778:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800877a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800877c:	b95a      	cbnz	r2, 8008796 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800877e:	6803      	ldr	r3, [r0, #0]
 8008780:	b11b      	cbz	r3, 800878a <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008782:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008784:	3601      	adds	r6, #1
 8008786:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008788:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800878a:	6880      	ldr	r0, [r0, #8]
 800878c:	f001 f8be 	bl	800990c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008790:	2300      	movs	r3, #0
 8008792:	60a3      	str	r3, [r4, #8]
 8008794:	e7f6      	b.n	8008784 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008796:	b96d      	cbnz	r5, 80087b4 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008798:	6840      	ldr	r0, [r0, #4]
 800879a:	f009 fb33 	bl	8011e04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800879e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80087a0:	6863      	ldr	r3, [r4, #4]
 80087a2:	4413      	add	r3, r2
 80087a4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087a6:	68a2      	ldr	r2, [r4, #8]
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d319      	bcc.n	80087e0 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80087b0:	4628      	mov	r0, r5
 80087b2:	e7e7      	b.n	8008784 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087b4:	68c0      	ldr	r0, [r0, #12]
 80087b6:	f009 fb25 	bl	8011e04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80087bc:	4251      	negs	r1, r2
 80087be:	68e3      	ldr	r3, [r4, #12]
 80087c0:	1a9b      	subs	r3, r3, r2
 80087c2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087c4:	6822      	ldr	r2, [r4, #0]
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d202      	bcs.n	80087d0 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80087ca:	68a3      	ldr	r3, [r4, #8]
 80087cc:	440b      	add	r3, r1
 80087ce:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80087d0:	2d02      	cmp	r5, #2
 80087d2:	d001      	beq.n	80087d8 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80087d4:	2000      	movs	r0, #0
 80087d6:	e7d5      	b.n	8008784 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087d8:	b126      	cbz	r6, 80087e4 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80087da:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80087dc:	2000      	movs	r0, #0
 80087de:	e7d1      	b.n	8008784 <prvCopyDataToQueue+0x12>
 80087e0:	4628      	mov	r0, r5
 80087e2:	e7cf      	b.n	8008784 <prvCopyDataToQueue+0x12>
 80087e4:	2000      	movs	r0, #0
 80087e6:	e7cd      	b.n	8008784 <prvCopyDataToQueue+0x12>

080087e8 <prvCopyDataFromQueue>:
{
 80087e8:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80087ec:	b16a      	cbz	r2, 800880a <prvCopyDataFromQueue+0x22>
{
 80087ee:	b510      	push	{r4, lr}
 80087f0:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087f2:	68d9      	ldr	r1, [r3, #12]
 80087f4:	4411      	add	r1, r2
 80087f6:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80087f8:	689c      	ldr	r4, [r3, #8]
 80087fa:	42a1      	cmp	r1, r4
 80087fc:	d301      	bcc.n	8008802 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80087fe:	6819      	ldr	r1, [r3, #0]
 8008800:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008802:	68d9      	ldr	r1, [r3, #12]
 8008804:	f009 fafe 	bl	8011e04 <memcpy>
}
 8008808:	bd10      	pop	{r4, pc}
 800880a:	4770      	bx	lr

0800880c <prvUnlockQueue>:
{
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8008810:	f001 fbc0 	bl	8009f94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008814:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8008818:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800881a:	e001      	b.n	8008820 <prvUnlockQueue+0x14>
			--cTxLock;
 800881c:	3c01      	subs	r4, #1
 800881e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008820:	2c00      	cmp	r4, #0
 8008822:	dd0a      	ble.n	800883a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008824:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008826:	b143      	cbz	r3, 800883a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008828:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800882c:	f000 ff7a 	bl	8009724 <xTaskRemoveFromEventList>
 8008830:	2800      	cmp	r0, #0
 8008832:	d0f3      	beq.n	800881c <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8008834:	f001 f854 	bl	80098e0 <vTaskMissedYield>
 8008838:	e7f0      	b.n	800881c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800883a:	23ff      	movs	r3, #255	; 0xff
 800883c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008840:	f001 fbca 	bl	8009fd8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008844:	f001 fba6 	bl	8009f94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008848:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800884c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800884e:	e001      	b.n	8008854 <prvUnlockQueue+0x48>
				--cRxLock;
 8008850:	3c01      	subs	r4, #1
 8008852:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008854:	2c00      	cmp	r4, #0
 8008856:	dd0a      	ble.n	800886e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008858:	692b      	ldr	r3, [r5, #16]
 800885a:	b143      	cbz	r3, 800886e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800885c:	f105 0010 	add.w	r0, r5, #16
 8008860:	f000 ff60 	bl	8009724 <xTaskRemoveFromEventList>
 8008864:	2800      	cmp	r0, #0
 8008866:	d0f3      	beq.n	8008850 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8008868:	f001 f83a 	bl	80098e0 <vTaskMissedYield>
 800886c:	e7f0      	b.n	8008850 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800886e:	23ff      	movs	r3, #255	; 0xff
 8008870:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008874:	f001 fbb0 	bl	8009fd8 <vPortExitCritical>
}
 8008878:	bd38      	pop	{r3, r4, r5, pc}

0800887a <xQueueGenericReset>:
{
 800887a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800887c:	b1e0      	cbz	r0, 80088b8 <xQueueGenericReset+0x3e>
 800887e:	460d      	mov	r5, r1
 8008880:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008882:	f001 fb87 	bl	8009f94 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800888a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800888c:	fb01 3002 	mla	r0, r1, r2, r3
 8008890:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008892:	2000      	movs	r0, #0
 8008894:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008896:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008898:	3a01      	subs	r2, #1
 800889a:	fb02 3301 	mla	r3, r2, r1, r3
 800889e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80088a0:	23ff      	movs	r3, #255	; 0xff
 80088a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80088a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80088aa:	b9fd      	cbnz	r5, 80088ec <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088ac:	6923      	ldr	r3, [r4, #16]
 80088ae:	b963      	cbnz	r3, 80088ca <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80088b0:	f001 fb92 	bl	8009fd8 <vPortExitCritical>
}
 80088b4:	2001      	movs	r0, #1
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088bc:	f383 8811 	msr	BASEPRI, r3
 80088c0:	f3bf 8f6f 	isb	sy
 80088c4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80088c8:	e7fe      	b.n	80088c8 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088ca:	f104 0010 	add.w	r0, r4, #16
 80088ce:	f000 ff29 	bl	8009724 <xTaskRemoveFromEventList>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	d0ec      	beq.n	80088b0 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80088d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80088da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	e7e1      	b.n	80088b0 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088ec:	f104 0010 	add.w	r0, r4, #16
 80088f0:	f7ff fede 	bl	80086b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80088f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80088f8:	f7ff feda 	bl	80086b0 <vListInitialise>
 80088fc:	e7d8      	b.n	80088b0 <xQueueGenericReset+0x36>

080088fe <prvInitialiseNewQueue>:
{
 80088fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008900:	4605      	mov	r5, r0
 8008902:	461e      	mov	r6, r3
 8008904:	9c06      	ldr	r4, [sp, #24]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008906:	460f      	mov	r7, r1
 8008908:	b979      	cbnz	r1, 800892a <prvInitialiseNewQueue+0x2c>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800890a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800890c:	63e5      	str	r5, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800890e:	6427      	str	r7, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008910:	2101      	movs	r1, #1
 8008912:	4620      	mov	r0, r4
 8008914:	f7ff ffb1 	bl	800887a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008918:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
	traceQUEUE_CREATE( pxNewQueue );
 800891c:	4633      	mov	r3, r6
 800891e:	463a      	mov	r2, r7
 8008920:	4629      	mov	r1, r5
 8008922:	2073      	movs	r0, #115	; 0x73
 8008924:	f008 fab6 	bl	8010e94 <SEGGER_SYSVIEW_RecordU32x3>
}
 8008928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800892a:	6022      	str	r2, [r4, #0]
 800892c:	e7ee      	b.n	800890c <prvInitialiseNewQueue+0xe>

0800892e <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800892e:	b940      	cbnz	r0, 8008942 <xQueueGenericCreate+0x14>
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	e7fe      	b.n	8008940 <xQueueGenericCreate+0x12>
	{
 8008942:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008944:	b083      	sub	sp, #12
 8008946:	460c      	mov	r4, r1
 8008948:	4615      	mov	r5, r2
 800894a:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800894c:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008950:	3050      	adds	r0, #80	; 0x50
 8008952:	f001 fcd7 	bl	800a304 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008956:	4607      	mov	r7, r0
 8008958:	b138      	cbz	r0, 800896a <xQueueGenericCreate+0x3c>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800895a:	9000      	str	r0, [sp, #0]
 800895c:	462b      	mov	r3, r5
 800895e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8008962:	4621      	mov	r1, r4
 8008964:	4630      	mov	r0, r6
 8008966:	f7ff ffca 	bl	80088fe <prvInitialiseNewQueue>
	}
 800896a:	4638      	mov	r0, r7
 800896c:	b003      	add	sp, #12
 800896e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008970 <xQueueGenericSend>:
{
 8008970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008972:	b087      	sub	sp, #28
 8008974:	9203      	str	r2, [sp, #12]
	configASSERT( pxQueue );
 8008976:	b188      	cbz	r0, 800899c <xQueueGenericSend+0x2c>
 8008978:	460e      	mov	r6, r1
 800897a:	461d      	mov	r5, r3
 800897c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800897e:	b1b1      	cbz	r1, 80089ae <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008980:	2d02      	cmp	r5, #2
 8008982:	d120      	bne.n	80089c6 <xQueueGenericSend+0x56>
 8008984:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008986:	2b01      	cmp	r3, #1
 8008988:	d01d      	beq.n	80089c6 <xQueueGenericSend+0x56>
 800898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	e7fe      	b.n	800899a <xQueueGenericSend+0x2a>
 800899c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80089ac:	e7fe      	b.n	80089ac <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0e5      	beq.n	8008980 <xQueueGenericSend+0x10>
 80089b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	e7fe      	b.n	80089c4 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089c6:	f000 ff91 	bl	80098ec <xTaskGetSchedulerState>
 80089ca:	4607      	mov	r7, r0
 80089cc:	b958      	cbnz	r0, 80089e6 <xQueueGenericSend+0x76>
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d05c      	beq.n	8008a8e <xQueueGenericSend+0x11e>
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	e7fe      	b.n	80089e4 <xQueueGenericSend+0x74>
 80089e6:	2700      	movs	r7, #0
 80089e8:	e051      	b.n	8008a8e <xQueueGenericSend+0x11e>
				traceQUEUE_SEND( pxQueue );
 80089ea:	4620      	mov	r0, r4
 80089ec:	f008 f836 	bl	8010a5c <SEGGER_SYSVIEW_ShrinkId>
 80089f0:	4601      	mov	r1, r0
 80089f2:	9500      	str	r5, [sp, #0]
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	4632      	mov	r2, r6
 80089f8:	205a      	movs	r0, #90	; 0x5a
 80089fa:	f008 fa85 	bl	8010f08 <SEGGER_SYSVIEW_RecordU32x4>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089fe:	462a      	mov	r2, r5
 8008a00:	4631      	mov	r1, r6
 8008a02:	4620      	mov	r0, r4
 8008a04:	f7ff feb5 	bl	8008772 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a0a:	b97b      	cbnz	r3, 8008a2c <xQueueGenericSend+0xbc>
					else if( xYieldRequired != pdFALSE )
 8008a0c:	b148      	cbz	r0, 8008a22 <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8008a0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a16:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008a22:	f001 fad9 	bl	8009fd8 <vPortExitCritical>
				return pdPASS;
 8008a26:	2001      	movs	r0, #1
}
 8008a28:	b007      	add	sp, #28
 8008a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a30:	f000 fe78 	bl	8009724 <xTaskRemoveFromEventList>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d0f4      	beq.n	8008a22 <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
 8008a38:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a40:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	e7e9      	b.n	8008a22 <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
 8008a4e:	f001 fac3 	bl	8009fd8 <vPortExitCritical>
					traceQUEUE_SEND_FAILED( pxQueue );
 8008a52:	4620      	mov	r0, r4
 8008a54:	f008 f802 	bl	8010a5c <SEGGER_SYSVIEW_ShrinkId>
 8008a58:	4601      	mov	r1, r0
 8008a5a:	9500      	str	r5, [sp, #0]
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	4632      	mov	r2, r6
 8008a60:	205a      	movs	r0, #90	; 0x5a
 8008a62:	f008 fa51 	bl	8010f08 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8008a66:	2000      	movs	r0, #0
 8008a68:	e7de      	b.n	8008a28 <xQueueGenericSend+0xb8>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a6a:	a804      	add	r0, sp, #16
 8008a6c:	f000 feea 	bl	8009844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a70:	2701      	movs	r7, #1
 8008a72:	e019      	b.n	8008aa8 <xQueueGenericSend+0x138>
		prvLockQueue( pxQueue );
 8008a74:	2300      	movs	r3, #0
 8008a76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008a7a:	e021      	b.n	8008ac0 <xQueueGenericSend+0x150>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a82:	e023      	b.n	8008acc <xQueueGenericSend+0x15c>
				prvUnlockQueue( pxQueue );
 8008a84:	4620      	mov	r0, r4
 8008a86:	f7ff fec1 	bl	800880c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a8a:	f000 fcc9 	bl	8009420 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008a8e:	f001 fa81 	bl	8009f94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008a94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d3a7      	bcc.n	80089ea <xQueueGenericSend+0x7a>
 8008a9a:	2d02      	cmp	r5, #2
 8008a9c:	d0a5      	beq.n	80089ea <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a9e:	9b03      	ldr	r3, [sp, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0d4      	beq.n	8008a4e <xQueueGenericSend+0xde>
				else if( xEntryTimeSet == pdFALSE )
 8008aa4:	2f00      	cmp	r7, #0
 8008aa6:	d0e0      	beq.n	8008a6a <xQueueGenericSend+0xfa>
		taskEXIT_CRITICAL();
 8008aa8:	f001 fa96 	bl	8009fd8 <vPortExitCritical>
		vTaskSuspendAll();
 8008aac:	f000 fc12 	bl	80092d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ab0:	f001 fa70 	bl	8009f94 <vPortEnterCritical>
 8008ab4:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8008ab8:	b252      	sxtb	r2, r2
 8008aba:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008abe:	d0d9      	beq.n	8008a74 <xQueueGenericSend+0x104>
 8008ac0:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8008ac4:	b252      	sxtb	r2, r2
 8008ac6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008aca:	d0d7      	beq.n	8008a7c <xQueueGenericSend+0x10c>
 8008acc:	f001 fa84 	bl	8009fd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ad0:	a903      	add	r1, sp, #12
 8008ad2:	a804      	add	r0, sp, #16
 8008ad4:	f000 fec2 	bl	800985c <xTaskCheckForTimeOut>
 8008ad8:	b9d8      	cbnz	r0, 8008b12 <xQueueGenericSend+0x1a2>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ada:	4620      	mov	r0, r4
 8008adc:	f7ff fe2d 	bl	800873a <prvIsQueueFull>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d0cf      	beq.n	8008a84 <xQueueGenericSend+0x114>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ae4:	9903      	ldr	r1, [sp, #12]
 8008ae6:	f104 0010 	add.w	r0, r4, #16
 8008aea:	f000 fdb7 	bl	800965c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008aee:	4620      	mov	r0, r4
 8008af0:	f7ff fe8c 	bl	800880c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008af4:	f000 fc94 	bl	8009420 <xTaskResumeAll>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d1c8      	bne.n	8008a8e <xQueueGenericSend+0x11e>
					portYIELD_WITHIN_API();
 8008afc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b04:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	e7bd      	b.n	8008a8e <xQueueGenericSend+0x11e>
			prvUnlockQueue( pxQueue );
 8008b12:	4620      	mov	r0, r4
 8008b14:	f7ff fe7a 	bl	800880c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b18:	f000 fc82 	bl	8009420 <xTaskResumeAll>
			traceQUEUE_SEND_FAILED( pxQueue );
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f007 ff9d 	bl	8010a5c <SEGGER_SYSVIEW_ShrinkId>
 8008b22:	4601      	mov	r1, r0
 8008b24:	9500      	str	r5, [sp, #0]
 8008b26:	9b03      	ldr	r3, [sp, #12]
 8008b28:	4632      	mov	r2, r6
 8008b2a:	205a      	movs	r0, #90	; 0x5a
 8008b2c:	f008 f9ec 	bl	8010f08 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8008b30:	2000      	movs	r0, #0
 8008b32:	e779      	b.n	8008a28 <xQueueGenericSend+0xb8>

08008b34 <xQueueGenericSendFromISR>:
{
 8008b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008b38:	b190      	cbz	r0, 8008b60 <xQueueGenericSendFromISR+0x2c>
 8008b3a:	460f      	mov	r7, r1
 8008b3c:	4616      	mov	r6, r2
 8008b3e:	461c      	mov	r4, r3
 8008b40:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b42:	b1b1      	cbz	r1, 8008b72 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b44:	2c02      	cmp	r4, #2
 8008b46:	d120      	bne.n	8008b8a <xQueueGenericSendFromISR+0x56>
 8008b48:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d01d      	beq.n	8008b8a <xQueueGenericSendFromISR+0x56>
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	e7fe      	b.n	8008b5e <xQueueGenericSendFromISR+0x2a>
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008b70:	e7fe      	b.n	8008b70 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b72:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0e5      	beq.n	8008b44 <xQueueGenericSendFromISR+0x10>
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	e7fe      	b.n	8008b88 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b8a:	f001 fb29 	bl	800a1e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b8e:	f3ef 8911 	mrs	r9, BASEPRI
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ba2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008ba4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d301      	bcc.n	8008bae <xQueueGenericSendFromISR+0x7a>
 8008baa:	2c02      	cmp	r4, #2
 8008bac:	d12b      	bne.n	8008c06 <xQueueGenericSendFromISR+0xd2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bae:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8008bb2:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bb6:	6bab      	ldr	r3, [r5, #56]	; 0x38
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008bb8:	4628      	mov	r0, r5
 8008bba:	f007 ff4f 	bl	8010a5c <SEGGER_SYSVIEW_ShrinkId>
 8008bbe:	4601      	mov	r1, r0
 8008bc0:	4632      	mov	r2, r6
 8008bc2:	2060      	movs	r0, #96	; 0x60
 8008bc4:	f008 f924 	bl	8010e10 <SEGGER_SYSVIEW_RecordU32x2>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bc8:	4622      	mov	r2, r4
 8008bca:	4639      	mov	r1, r7
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f7ff fdd0 	bl	8008772 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008bd2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8008bd6:	d009      	beq.n	8008bec <xQueueGenericSendFromISR+0xb8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008bd8:	f108 0301 	add.w	r3, r8, #1
 8008bdc:	b25b      	sxtb	r3, r3
 8008bde:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8008be2:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008be4:	f389 8811 	msr	BASEPRI, r9
}
 8008be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008bee:	b90b      	cbnz	r3, 8008bf4 <xQueueGenericSendFromISR+0xc0>
			xReturn = pdPASS;
 8008bf0:	2001      	movs	r0, #1
 8008bf2:	e7f7      	b.n	8008be4 <xQueueGenericSendFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bf4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008bf8:	f000 fd94 	bl	8009724 <xTaskRemoveFromEventList>
 8008bfc:	b168      	cbz	r0, 8008c1a <xQueueGenericSendFromISR+0xe6>
							if( pxHigherPriorityTaskWoken != NULL )
 8008bfe:	b176      	cbz	r6, 8008c1e <xQueueGenericSendFromISR+0xea>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c00:	2001      	movs	r0, #1
 8008c02:	6030      	str	r0, [r6, #0]
 8008c04:	e7ee      	b.n	8008be4 <xQueueGenericSendFromISR+0xb0>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008c06:	4628      	mov	r0, r5
 8008c08:	f007 ff28 	bl	8010a5c <SEGGER_SYSVIEW_ShrinkId>
 8008c0c:	4601      	mov	r1, r0
 8008c0e:	4632      	mov	r2, r6
 8008c10:	2060      	movs	r0, #96	; 0x60
 8008c12:	f008 f8fd 	bl	8010e10 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8008c16:	2000      	movs	r0, #0
 8008c18:	e7e4      	b.n	8008be4 <xQueueGenericSendFromISR+0xb0>
			xReturn = pdPASS;
 8008c1a:	2001      	movs	r0, #1
 8008c1c:	e7e2      	b.n	8008be4 <xQueueGenericSendFromISR+0xb0>
 8008c1e:	2001      	movs	r0, #1
 8008c20:	e7e0      	b.n	8008be4 <xQueueGenericSendFromISR+0xb0>

08008c22 <xQueueReceive>:
{
 8008c22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c24:	b087      	sub	sp, #28
 8008c26:	9203      	str	r2, [sp, #12]
	configASSERT( ( pxQueue ) );
 8008c28:	b190      	cbz	r0, 8008c50 <xQueueReceive+0x2e>
 8008c2a:	460f      	mov	r7, r1
 8008c2c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c2e:	b1c1      	cbz	r1, 8008c62 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c30:	f000 fe5c 	bl	80098ec <xTaskGetSchedulerState>
 8008c34:	4606      	mov	r6, r0
 8008c36:	bb00      	cbnz	r0, 8008c7a <xQueueReceive+0x58>
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d07c      	beq.n	8008d38 <xQueueReceive+0x116>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	e7fe      	b.n	8008c4e <xQueueReceive+0x2c>
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8008c60:	e7fe      	b.n	8008c60 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c62:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d0e3      	beq.n	8008c30 <xQueueReceive+0xe>
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	e7fe      	b.n	8008c78 <xQueueReceive+0x56>
 8008c7a:	2600      	movs	r6, #0
 8008c7c:	e05c      	b.n	8008d38 <xQueueReceive+0x116>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c7e:	4639      	mov	r1, r7
 8008c80:	4620      	mov	r0, r4
 8008c82:	f7ff fdb1 	bl	80087e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8008c86:	4620      	mov	r0, r4
 8008c88:	f007 fee8 	bl	8010a5c <SEGGER_SYSVIEW_ShrinkId>
 8008c8c:	4606      	mov	r6, r0
 8008c8e:	2000      	movs	r0, #0
 8008c90:	f007 fee4 	bl	8010a5c <SEGGER_SYSVIEW_ShrinkId>
 8008c94:	4602      	mov	r2, r0
 8008c96:	2301      	movs	r3, #1
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	9b03      	ldr	r3, [sp, #12]
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	205c      	movs	r0, #92	; 0x5c
 8008ca0:	f008 f932 	bl	8010f08 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ca4:	3d01      	subs	r5, #1
 8008ca6:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ca8:	6923      	ldr	r3, [r4, #16]
 8008caa:	b923      	cbnz	r3, 8008cb6 <xQueueReceive+0x94>
				taskEXIT_CRITICAL();
 8008cac:	f001 f994 	bl	8009fd8 <vPortExitCritical>
				return pdPASS;
 8008cb0:	2001      	movs	r0, #1
}
 8008cb2:	b007      	add	sp, #28
 8008cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cb6:	f104 0010 	add.w	r0, r4, #16
 8008cba:	f000 fd33 	bl	8009724 <xTaskRemoveFromEventList>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d0f4      	beq.n	8008cac <xQueueReceive+0x8a>
						queueYIELD_IF_USING_PREEMPTION();
 8008cc2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	e7e9      	b.n	8008cac <xQueueReceive+0x8a>
					taskEXIT_CRITICAL();
 8008cd8:	f001 f97e 	bl	8009fd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f007 febd 	bl	8010a5c <SEGGER_SYSVIEW_ShrinkId>
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	f007 feb9 	bl	8010a5c <SEGGER_SYSVIEW_ShrinkId>
 8008cea:	4602      	mov	r2, r0
 8008cec:	2301      	movs	r3, #1
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	9b03      	ldr	r3, [sp, #12]
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	205c      	movs	r0, #92	; 0x5c
 8008cf6:	f008 f907 	bl	8010f08 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	e7d9      	b.n	8008cb2 <xQueueReceive+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cfe:	a804      	add	r0, sp, #16
 8008d00:	f000 fda0 	bl	8009844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d04:	2601      	movs	r6, #1
 8008d06:	e021      	b.n	8008d4c <xQueueReceive+0x12a>
		prvLockQueue( pxQueue );
 8008d08:	2300      	movs	r3, #0
 8008d0a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008d0e:	e029      	b.n	8008d64 <xQueueReceive+0x142>
 8008d10:	2300      	movs	r3, #0
 8008d12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d16:	e02b      	b.n	8008d70 <xQueueReceive+0x14e>
				prvUnlockQueue( pxQueue );
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f7ff fd77 	bl	800880c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d1e:	f000 fb7f 	bl	8009420 <xTaskResumeAll>
 8008d22:	e009      	b.n	8008d38 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8008d24:	4620      	mov	r0, r4
 8008d26:	f7ff fd71 	bl	800880c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d2a:	f000 fb79 	bl	8009420 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f7ff fd12 	bl	8008758 <prvIsQueueEmpty>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	d13f      	bne.n	8008db8 <xQueueReceive+0x196>
		taskENTER_CRITICAL();
 8008d38:	f001 f92c 	bl	8009f94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d3c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d3e:	2d00      	cmp	r5, #0
 8008d40:	d19d      	bne.n	8008c7e <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d42:	9b03      	ldr	r3, [sp, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0c7      	beq.n	8008cd8 <xQueueReceive+0xb6>
				else if( xEntryTimeSet == pdFALSE )
 8008d48:	2e00      	cmp	r6, #0
 8008d4a:	d0d8      	beq.n	8008cfe <xQueueReceive+0xdc>
		taskEXIT_CRITICAL();
 8008d4c:	f001 f944 	bl	8009fd8 <vPortExitCritical>
		vTaskSuspendAll();
 8008d50:	f000 fac0 	bl	80092d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d54:	f001 f91e 	bl	8009f94 <vPortEnterCritical>
 8008d58:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008d5c:	b25b      	sxtb	r3, r3
 8008d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d62:	d0d1      	beq.n	8008d08 <xQueueReceive+0xe6>
 8008d64:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008d68:	b25b      	sxtb	r3, r3
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d6e:	d0cf      	beq.n	8008d10 <xQueueReceive+0xee>
 8008d70:	f001 f932 	bl	8009fd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d74:	a903      	add	r1, sp, #12
 8008d76:	a804      	add	r0, sp, #16
 8008d78:	f000 fd70 	bl	800985c <xTaskCheckForTimeOut>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d1d1      	bne.n	8008d24 <xQueueReceive+0x102>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d80:	4620      	mov	r0, r4
 8008d82:	f7ff fce9 	bl	8008758 <prvIsQueueEmpty>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d0c6      	beq.n	8008d18 <xQueueReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d8a:	9903      	ldr	r1, [sp, #12]
 8008d8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d90:	f000 fc64 	bl	800965c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d94:	4620      	mov	r0, r4
 8008d96:	f7ff fd39 	bl	800880c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d9a:	f000 fb41 	bl	8009420 <xTaskResumeAll>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d1ca      	bne.n	8008d38 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8008da2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008daa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	e7bf      	b.n	8008d38 <xQueueReceive+0x116>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008db8:	4620      	mov	r0, r4
 8008dba:	f007 fe4f 	bl	8010a5c <SEGGER_SYSVIEW_ShrinkId>
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	f007 fe4b 	bl	8010a5c <SEGGER_SYSVIEW_ShrinkId>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	2301      	movs	r3, #1
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	9b03      	ldr	r3, [sp, #12]
 8008dce:	4621      	mov	r1, r4
 8008dd0:	205c      	movs	r0, #92	; 0x5c
 8008dd2:	f008 f899 	bl	8010f08 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	e76b      	b.n	8008cb2 <xQueueReceive+0x90>
	...

08008ddc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	460c      	mov	r4, r1
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008de0:	2300      	movs	r3, #0
 8008de2:	2b07      	cmp	r3, #7
 8008de4:	d812      	bhi.n	8008e0c <vQueueAddToRegistry+0x30>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008de6:	4a0a      	ldr	r2, [pc, #40]	; (8008e10 <vQueueAddToRegistry+0x34>)
 8008de8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008dec:	b10a      	cbz	r2, 8008df2 <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dee:	3301      	adds	r3, #1
 8008df0:	e7f7      	b.n	8008de2 <vQueueAddToRegistry+0x6>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008df2:	4a07      	ldr	r2, [pc, #28]	; (8008e10 <vQueueAddToRegistry+0x34>)
 8008df4:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008df8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008dfc:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8008dfe:	f007 fe2d 	bl	8010a5c <SEGGER_SYSVIEW_ShrinkId>
 8008e02:	4601      	mov	r1, r0
 8008e04:	4622      	mov	r2, r4
 8008e06:	2071      	movs	r0, #113	; 0x71
 8008e08:	f008 f802 	bl	8010e10 <SEGGER_SYSVIEW_RecordU32x2>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e0c:	bd10      	pop	{r4, pc}
 8008e0e:	bf00      	nop
 8008e10:	20002164 	.word	0x20002164

08008e14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	4604      	mov	r4, r0
 8008e18:	460d      	mov	r5, r1
 8008e1a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e1c:	f001 f8ba 	bl	8009f94 <vPortEnterCritical>
 8008e20:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008e24:	b25b      	sxtb	r3, r3
 8008e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e2a:	d00d      	beq.n	8008e48 <vQueueWaitForMessageRestricted+0x34>
 8008e2c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008e30:	b25b      	sxtb	r3, r3
 8008e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e36:	d00b      	beq.n	8008e50 <vQueueWaitForMessageRestricted+0x3c>
 8008e38:	f001 f8ce 	bl	8009fd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e3e:	b15b      	cbz	r3, 8008e58 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e40:	4620      	mov	r0, r4
 8008e42:	f7ff fce3 	bl	800880c <prvUnlockQueue>
	}
 8008e46:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008e4e:	e7ed      	b.n	8008e2c <vQueueWaitForMessageRestricted+0x18>
 8008e50:	2300      	movs	r3, #0
 8008e52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e56:	e7ef      	b.n	8008e38 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e58:	4632      	mov	r2, r6
 8008e5a:	4629      	mov	r1, r5
 8008e5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008e60:	f000 fc40 	bl	80096e4 <vTaskPlaceOnEventListRestricted>
 8008e64:	e7ec      	b.n	8008e40 <vQueueWaitForMessageRestricted+0x2c>
	...

08008e68 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e68:	4b08      	ldr	r3, [pc, #32]	; (8008e8c <prvResetNextTaskUnblockTime+0x24>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	b923      	cbnz	r3, 8008e7a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e70:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <prvResetNextTaskUnblockTime+0x28>)
 8008e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e7a:	4b04      	ldr	r3, [pc, #16]	; (8008e8c <prvResetNextTaskUnblockTime+0x24>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	4b02      	ldr	r3, [pc, #8]	; (8008e90 <prvResetNextTaskUnblockTime+0x28>)
 8008e86:	601a      	str	r2, [r3, #0]
	}
}
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	200021a8 	.word	0x200021a8
 8008e90:	20002284 	.word	0x20002284

08008e94 <prvInitialiseNewTask>:
{
 8008e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e98:	4680      	mov	r8, r0
 8008e9a:	460d      	mov	r5, r1
 8008e9c:	4617      	mov	r7, r2
 8008e9e:	4699      	mov	r9, r3
 8008ea0:	9e08      	ldr	r6, [sp, #32]
 8008ea2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008ea6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ea8:	0092      	lsls	r2, r2, #2
 8008eaa:	21a5      	movs	r1, #165	; 0xa5
 8008eac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008eae:	f008 feeb 	bl	8011c88 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008eb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008eb4:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8008eb8:	3a01      	subs	r2, #1
 8008eba:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ebe:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8008ec2:	2d00      	cmp	r5, #0
 8008ec4:	d043      	beq.n	8008f4e <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ec6:	f04f 0c00 	mov.w	ip, #0
 8008eca:	f1bc 0f0f 	cmp.w	ip, #15
 8008ece:	d809      	bhi.n	8008ee4 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ed0:	f815 300c 	ldrb.w	r3, [r5, ip]
 8008ed4:	eb04 020c 	add.w	r2, r4, ip
 8008ed8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8008edc:	b113      	cbz	r3, 8008ee4 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ede:	f10c 0c01 	add.w	ip, ip, #1
 8008ee2:	e7f2      	b.n	8008eca <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008eea:	2e06      	cmp	r6, #6
 8008eec:	d900      	bls.n	8008ef0 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008eee:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8008ef0:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008ef2:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ef4:	2500      	movs	r5, #0
 8008ef6:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ef8:	1d20      	adds	r0, r4, #4
 8008efa:	f7ff fbe4 	bl	80086c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008efe:	f104 0018 	add.w	r0, r4, #24
 8008f02:	f7ff fbe0 	bl	80086c6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f06:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f08:	f1c6 0607 	rsb	r6, r6, #7
 8008f0c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f0e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008f10:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ulNotifiedValue = 0;
 8008f12:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f16:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f1a:	224c      	movs	r2, #76	; 0x4c
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f22:	f008 feb1 	bl	8011c88 <memset>
 8008f26:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <prvInitialiseNewTask+0xc4>)
 8008f28:	65e3      	str	r3, [r4, #92]	; 0x5c
 8008f2a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008f2e:	6622      	str	r2, [r4, #96]	; 0x60
 8008f30:	33d0      	adds	r3, #208	; 0xd0
 8008f32:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f34:	464a      	mov	r2, r9
 8008f36:	4641      	mov	r1, r8
 8008f38:	4638      	mov	r0, r7
 8008f3a:	f000 ffff 	bl	8009f3c <pxPortInitialiseStack>
 8008f3e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008f40:	f1ba 0f00 	cmp.w	sl, #0
 8008f44:	d001      	beq.n	8008f4a <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f46:	f8ca 4000 	str.w	r4, [sl]
}
 8008f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008f54:	e7c9      	b.n	8008eea <prvInitialiseNewTask+0x56>
 8008f56:	bf00      	nop
 8008f58:	2000cb74 	.word	0x2000cb74

08008f5c <prvInitialiseTaskLists>:
{
 8008f5c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f5e:	2400      	movs	r4, #0
 8008f60:	e007      	b.n	8008f72 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f62:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008f66:	0093      	lsls	r3, r2, #2
 8008f68:	480e      	ldr	r0, [pc, #56]	; (8008fa4 <prvInitialiseTaskLists+0x48>)
 8008f6a:	4418      	add	r0, r3
 8008f6c:	f7ff fba0 	bl	80086b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f70:	3401      	adds	r4, #1
 8008f72:	2c06      	cmp	r4, #6
 8008f74:	d9f5      	bls.n	8008f62 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8008f76:	4d0c      	ldr	r5, [pc, #48]	; (8008fa8 <prvInitialiseTaskLists+0x4c>)
 8008f78:	4628      	mov	r0, r5
 8008f7a:	f7ff fb99 	bl	80086b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f7e:	4c0b      	ldr	r4, [pc, #44]	; (8008fac <prvInitialiseTaskLists+0x50>)
 8008f80:	4620      	mov	r0, r4
 8008f82:	f7ff fb95 	bl	80086b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f86:	480a      	ldr	r0, [pc, #40]	; (8008fb0 <prvInitialiseTaskLists+0x54>)
 8008f88:	f7ff fb92 	bl	80086b0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8008f8c:	4809      	ldr	r0, [pc, #36]	; (8008fb4 <prvInitialiseTaskLists+0x58>)
 8008f8e:	f7ff fb8f 	bl	80086b0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008f92:	4809      	ldr	r0, [pc, #36]	; (8008fb8 <prvInitialiseTaskLists+0x5c>)
 8008f94:	f7ff fb8c 	bl	80086b0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f98:	4b08      	ldr	r3, [pc, #32]	; (8008fbc <prvInitialiseTaskLists+0x60>)
 8008f9a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f9c:	4b08      	ldr	r3, [pc, #32]	; (8008fc0 <prvInitialiseTaskLists+0x64>)
 8008f9e:	601c      	str	r4, [r3, #0]
}
 8008fa0:	bd38      	pop	{r3, r4, r5, pc}
 8008fa2:	bf00      	nop
 8008fa4:	200021b0 	.word	0x200021b0
 8008fa8:	20002258 	.word	0x20002258
 8008fac:	2000226c 	.word	0x2000226c
 8008fb0:	20002290 	.word	0x20002290
 8008fb4:	200022bc 	.word	0x200022bc
 8008fb8:	200022a8 	.word	0x200022a8
 8008fbc:	200021a8 	.word	0x200021a8
 8008fc0:	200021ac 	.word	0x200021ac

08008fc4 <prvAddNewTaskToReadyList>:
{
 8008fc4:	b510      	push	{r4, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008fca:	f000 ffe3 	bl	8009f94 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008fce:	4a2b      	ldr	r2, [pc, #172]	; (800907c <prvAddNewTaskToReadyList+0xb8>)
 8008fd0:	6813      	ldr	r3, [r2, #0]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008fd6:	4b2a      	ldr	r3, [pc, #168]	; (8009080 <prvAddNewTaskToReadyList+0xbc>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	b15b      	cbz	r3, 8008ff4 <prvAddNewTaskToReadyList+0x30>
			if( xSchedulerRunning == pdFALSE )
 8008fdc:	4b29      	ldr	r3, [pc, #164]	; (8009084 <prvAddNewTaskToReadyList+0xc0>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	b96b      	cbnz	r3, 8008ffe <prvAddNewTaskToReadyList+0x3a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fe2:	4b27      	ldr	r3, [pc, #156]	; (8009080 <prvAddNewTaskToReadyList+0xbc>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d807      	bhi.n	8008ffe <prvAddNewTaskToReadyList+0x3a>
					pxCurrentTCB = pxNewTCB;
 8008fee:	4b24      	ldr	r3, [pc, #144]	; (8009080 <prvAddNewTaskToReadyList+0xbc>)
 8008ff0:	601c      	str	r4, [r3, #0]
 8008ff2:	e004      	b.n	8008ffe <prvAddNewTaskToReadyList+0x3a>
			pxCurrentTCB = pxNewTCB;
 8008ff4:	4b22      	ldr	r3, [pc, #136]	; (8009080 <prvAddNewTaskToReadyList+0xbc>)
 8008ff6:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ff8:	6813      	ldr	r3, [r2, #0]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d03b      	beq.n	8009076 <prvAddNewTaskToReadyList+0xb2>
		uxTaskNumber++;
 8008ffe:	4a22      	ldr	r2, [pc, #136]	; (8009088 <prvAddNewTaskToReadyList+0xc4>)
 8009000:	6813      	ldr	r3, [r2, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009006:	6463      	str	r3, [r4, #68]	; 0x44
		traceTASK_CREATE( pxNewTCB );
 8009008:	b164      	cbz	r4, 8009024 <prvAddNewTaskToReadyList+0x60>
 800900a:	4620      	mov	r0, r4
 800900c:	f008 f8ae 	bl	801116c <SEGGER_SYSVIEW_OnTaskCreate>
 8009010:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009012:	6822      	ldr	r2, [r4, #0]
 8009014:	1ad2      	subs	r2, r2, r3
 8009016:	9200      	str	r2, [sp, #0]
 8009018:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800901a:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800901e:	4620      	mov	r0, r4
 8009020:	f007 fa60 	bl	80104e4 <SYSVIEW_AddTask>
		prvAddTaskToReadyList( pxNewTCB );
 8009024:	4620      	mov	r0, r4
 8009026:	f008 f8e9 	bl	80111fc <SEGGER_SYSVIEW_OnTaskStartReady>
 800902a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800902c:	2301      	movs	r3, #1
 800902e:	4083      	lsls	r3, r0
 8009030:	4a16      	ldr	r2, [pc, #88]	; (800908c <prvAddNewTaskToReadyList+0xc8>)
 8009032:	6811      	ldr	r1, [r2, #0]
 8009034:	430b      	orrs	r3, r1
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800903c:	1d21      	adds	r1, r4, #4
 800903e:	4b14      	ldr	r3, [pc, #80]	; (8009090 <prvAddNewTaskToReadyList+0xcc>)
 8009040:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009044:	f7ff fb42 	bl	80086cc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009048:	f000 ffc6 	bl	8009fd8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800904c:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <prvAddNewTaskToReadyList+0xc0>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	b17b      	cbz	r3, 8009072 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009052:	4b0b      	ldr	r3, [pc, #44]	; (8009080 <prvAddNewTaskToReadyList+0xbc>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009058:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800905a:	429a      	cmp	r2, r3
 800905c:	d209      	bcs.n	8009072 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800905e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009066:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	f3bf 8f6f 	isb	sy
}
 8009072:	b002      	add	sp, #8
 8009074:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009076:	f7ff ff71 	bl	8008f5c <prvInitialiseTaskLists>
 800907a:	e7c0      	b.n	8008ffe <prvAddNewTaskToReadyList+0x3a>
 800907c:	20002244 	.word	0x20002244
 8009080:	200021a4 	.word	0x200021a4
 8009084:	200022a4 	.word	0x200022a4
 8009088:	20002250 	.word	0x20002250
 800908c:	20002254 	.word	0x20002254
 8009090:	200021b0 	.word	0x200021b0

08009094 <prvDeleteTCB>:
	{
 8009094:	b510      	push	{r4, lr}
 8009096:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009098:	3058      	adds	r0, #88	; 0x58
 800909a:	f008 fe0d 	bl	8011cb8 <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800909e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80090a0:	f001 f9ae 	bl	800a400 <vPortFree>
			vPortFree( pxTCB );
 80090a4:	4620      	mov	r0, r4
 80090a6:	f001 f9ab 	bl	800a400 <vPortFree>
	}
 80090aa:	bd10      	pop	{r4, pc}

080090ac <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090ac:	4b0f      	ldr	r3, [pc, #60]	; (80090ec <prvCheckTasksWaitingTermination+0x40>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	b1d3      	cbz	r3, 80090e8 <prvCheckTasksWaitingTermination+0x3c>
{
 80090b2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80090b4:	f000 ff6e 	bl	8009f94 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b8:	4b0d      	ldr	r3, [pc, #52]	; (80090f0 <prvCheckTasksWaitingTermination+0x44>)
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090be:	1d20      	adds	r0, r4, #4
 80090c0:	f7ff fb28 	bl	8008714 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090c4:	4a0b      	ldr	r2, [pc, #44]	; (80090f4 <prvCheckTasksWaitingTermination+0x48>)
 80090c6:	6813      	ldr	r3, [r2, #0]
 80090c8:	3b01      	subs	r3, #1
 80090ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80090cc:	4a07      	ldr	r2, [pc, #28]	; (80090ec <prvCheckTasksWaitingTermination+0x40>)
 80090ce:	6813      	ldr	r3, [r2, #0]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80090d4:	f000 ff80 	bl	8009fd8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80090d8:	4620      	mov	r0, r4
 80090da:	f7ff ffdb 	bl	8009094 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090de:	4b03      	ldr	r3, [pc, #12]	; (80090ec <prvCheckTasksWaitingTermination+0x40>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e6      	bne.n	80090b4 <prvCheckTasksWaitingTermination+0x8>
}
 80090e6:	bd10      	pop	{r4, pc}
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	20002248 	.word	0x20002248
 80090f0:	200022bc 	.word	0x200022bc
 80090f4:	20002244 	.word	0x20002244

080090f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090f8:	b570      	push	{r4, r5, r6, lr}
 80090fa:	4604      	mov	r4, r0
 80090fc:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090fe:	4b1d      	ldr	r3, [pc, #116]	; (8009174 <prvAddCurrentTaskToDelayedList+0x7c>)
 8009100:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009102:	4b1d      	ldr	r3, [pc, #116]	; (8009178 <prvAddCurrentTaskToDelayedList+0x80>)
 8009104:	6818      	ldr	r0, [r3, #0]
 8009106:	3004      	adds	r0, #4
 8009108:	f7ff fb04 	bl	8008714 <uxListRemove>
 800910c:	b948      	cbnz	r0, 8009122 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800910e:	4b1a      	ldr	r3, [pc, #104]	; (8009178 <prvAddCurrentTaskToDelayedList+0x80>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	2201      	movs	r2, #1
 8009116:	409a      	lsls	r2, r3
 8009118:	4918      	ldr	r1, [pc, #96]	; (800917c <prvAddCurrentTaskToDelayedList+0x84>)
 800911a:	680b      	ldr	r3, [r1, #0]
 800911c:	ea23 0302 	bic.w	r3, r3, r2
 8009120:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009122:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8009126:	d00d      	beq.n	8009144 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009128:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800912a:	4b13      	ldr	r3, [pc, #76]	; (8009178 <prvAddCurrentTaskToDelayedList+0x80>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8009130:	42a6      	cmp	r6, r4
 8009132:	d910      	bls.n	8009156 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009134:	4b12      	ldr	r3, [pc, #72]	; (8009180 <prvAddCurrentTaskToDelayedList+0x88>)
 8009136:	6818      	ldr	r0, [r3, #0]
 8009138:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <prvAddCurrentTaskToDelayedList+0x80>)
 800913a:	6819      	ldr	r1, [r3, #0]
 800913c:	3104      	adds	r1, #4
 800913e:	f7ff fad0 	bl	80086e2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009142:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009144:	2d00      	cmp	r5, #0
 8009146:	d0ef      	beq.n	8009128 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009148:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <prvAddCurrentTaskToDelayedList+0x80>)
 800914a:	6819      	ldr	r1, [r3, #0]
 800914c:	3104      	adds	r1, #4
 800914e:	480d      	ldr	r0, [pc, #52]	; (8009184 <prvAddCurrentTaskToDelayedList+0x8c>)
 8009150:	f7ff fabc 	bl	80086cc <vListInsertEnd>
 8009154:	e7f5      	b.n	8009142 <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009156:	4b0c      	ldr	r3, [pc, #48]	; (8009188 <prvAddCurrentTaskToDelayedList+0x90>)
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	4b07      	ldr	r3, [pc, #28]	; (8009178 <prvAddCurrentTaskToDelayedList+0x80>)
 800915c:	6819      	ldr	r1, [r3, #0]
 800915e:	3104      	adds	r1, #4
 8009160:	f7ff fabf 	bl	80086e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009164:	4b09      	ldr	r3, [pc, #36]	; (800918c <prvAddCurrentTaskToDelayedList+0x94>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	42a3      	cmp	r3, r4
 800916a:	d9ea      	bls.n	8009142 <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 800916c:	4b07      	ldr	r3, [pc, #28]	; (800918c <prvAddCurrentTaskToDelayedList+0x94>)
 800916e:	601c      	str	r4, [r3, #0]
}
 8009170:	e7e7      	b.n	8009142 <prvAddCurrentTaskToDelayedList+0x4a>
 8009172:	bf00      	nop
 8009174:	200022d0 	.word	0x200022d0
 8009178:	200021a4 	.word	0x200021a4
 800917c:	20002254 	.word	0x20002254
 8009180:	200021ac 	.word	0x200021ac
 8009184:	200022a8 	.word	0x200022a8
 8009188:	200021a8 	.word	0x200021a8
 800918c:	20002284 	.word	0x20002284

08009190 <prvIdleTask>:
{
 8009190:	b508      	push	{r3, lr}
 8009192:	e00b      	b.n	80091ac <prvIdleTask+0x1c>
				taskYIELD();
 8009194:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800919c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80091a8:	f7f7 fa8c 	bl	80006c4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80091ac:	f7ff ff7e 	bl	80090ac <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091b0:	4b02      	ldr	r3, [pc, #8]	; (80091bc <prvIdleTask+0x2c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d8ed      	bhi.n	8009194 <prvIdleTask+0x4>
 80091b8:	e7f6      	b.n	80091a8 <prvIdleTask+0x18>
 80091ba:	bf00      	nop
 80091bc:	200021b0 	.word	0x200021b0

080091c0 <xTaskCreate>:
	{
 80091c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091c4:	b085      	sub	sp, #20
 80091c6:	4607      	mov	r7, r0
 80091c8:	4688      	mov	r8, r1
 80091ca:	4614      	mov	r4, r2
 80091cc:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091ce:	0090      	lsls	r0, r2, #2
 80091d0:	f001 f898 	bl	800a304 <pvPortMalloc>
			if( pxStack != NULL )
 80091d4:	b1f0      	cbz	r0, 8009214 <xTaskCreate+0x54>
 80091d6:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091d8:	20ac      	movs	r0, #172	; 0xac
 80091da:	f001 f893 	bl	800a304 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80091de:	4605      	mov	r5, r0
 80091e0:	b1a0      	cbz	r0, 800920c <xTaskCreate+0x4c>
					pxNewTCB->pxStack = pxStack;
 80091e2:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80091e6:	b1d5      	cbz	r5, 800921e <xTaskCreate+0x5e>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091e8:	2300      	movs	r3, #0
 80091ea:	9303      	str	r3, [sp, #12]
 80091ec:	9502      	str	r5, [sp, #8]
 80091ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	4633      	mov	r3, r6
 80091f8:	4622      	mov	r2, r4
 80091fa:	4641      	mov	r1, r8
 80091fc:	4638      	mov	r0, r7
 80091fe:	f7ff fe49 	bl	8008e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009202:	4628      	mov	r0, r5
 8009204:	f7ff fede 	bl	8008fc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009208:	2001      	movs	r0, #1
 800920a:	e005      	b.n	8009218 <xTaskCreate+0x58>
					vPortFree( pxStack );
 800920c:	4648      	mov	r0, r9
 800920e:	f001 f8f7 	bl	800a400 <vPortFree>
 8009212:	e7e8      	b.n	80091e6 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8009218:	b005      	add	sp, #20
 800921a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800921e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8009222:	e7f9      	b.n	8009218 <xTaskCreate+0x58>

08009224 <vTaskStartScheduler>:
{
 8009224:	b510      	push	{r4, lr}
 8009226:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
 8009228:	4b22      	ldr	r3, [pc, #136]	; (80092b4 <vTaskStartScheduler+0x90>)
 800922a:	9301      	str	r3, [sp, #4]
 800922c:	2300      	movs	r3, #0
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	2280      	movs	r2, #128	; 0x80
 8009232:	4921      	ldr	r1, [pc, #132]	; (80092b8 <vTaskStartScheduler+0x94>)
 8009234:	4821      	ldr	r0, [pc, #132]	; (80092bc <vTaskStartScheduler+0x98>)
 8009236:	f7ff ffc3 	bl	80091c0 <xTaskCreate>
		if( xReturn == pdPASS )
 800923a:	2801      	cmp	r0, #1
 800923c:	d006      	beq.n	800924c <vTaskStartScheduler+0x28>
	if( xReturn == pdPASS )
 800923e:	2801      	cmp	r0, #1
 8009240:	d007      	beq.n	8009252 <vTaskStartScheduler+0x2e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009242:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009246:	d02c      	beq.n	80092a2 <vTaskStartScheduler+0x7e>
}
 8009248:	b002      	add	sp, #8
 800924a:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
 800924c:	f000 fc52 	bl	8009af4 <xTimerCreateTimerTask>
 8009250:	e7f5      	b.n	800923e <vTaskStartScheduler+0x1a>
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009262:	4c17      	ldr	r4, [pc, #92]	; (80092c0 <vTaskStartScheduler+0x9c>)
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	3358      	adds	r3, #88	; 0x58
 8009268:	4a16      	ldr	r2, [pc, #88]	; (80092c4 <vTaskStartScheduler+0xa0>)
 800926a:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800926c:	4b16      	ldr	r3, [pc, #88]	; (80092c8 <vTaskStartScheduler+0xa4>)
 800926e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009272:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009274:	4b15      	ldr	r3, [pc, #84]	; (80092cc <vTaskStartScheduler+0xa8>)
 8009276:	2201      	movs	r2, #1
 8009278:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800927a:	4b15      	ldr	r3, [pc, #84]	; (80092d0 <vTaskStartScheduler+0xac>)
 800927c:	2200      	movs	r2, #0
 800927e:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009280:	f7f7 fa1d 	bl	80006be <configureTimerForRunTimeStats>
		traceTASK_SWITCHED_IN();
 8009284:	6822      	ldr	r2, [r4, #0]
 8009286:	4b0b      	ldr	r3, [pc, #44]	; (80092b4 <vTaskStartScheduler+0x90>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	429a      	cmp	r2, r3
 800928c:	d006      	beq.n	800929c <vTaskStartScheduler+0x78>
 800928e:	4b0c      	ldr	r3, [pc, #48]	; (80092c0 <vTaskStartScheduler+0x9c>)
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	f007 ff8f 	bl	80111b4 <SEGGER_SYSVIEW_OnTaskStartExec>
		if( xPortStartScheduler() != pdFALSE )
 8009296:	f000 ff17 	bl	800a0c8 <xPortStartScheduler>
 800929a:	e7d5      	b.n	8009248 <vTaskStartScheduler+0x24>
		traceTASK_SWITCHED_IN();
 800929c:	f007 ff52 	bl	8011144 <SEGGER_SYSVIEW_OnIdle>
 80092a0:	e7f9      	b.n	8009296 <vTaskStartScheduler+0x72>
 80092a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a6:	f383 8811 	msr	BASEPRI, r3
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092b2:	e7fe      	b.n	80092b2 <vTaskStartScheduler+0x8e>
 80092b4:	20002280 	.word	0x20002280
 80092b8:	0801315c 	.word	0x0801315c
 80092bc:	08009191 	.word	0x08009191
 80092c0:	200021a4 	.word	0x200021a4
 80092c4:	20001868 	.word	0x20001868
 80092c8:	20002284 	.word	0x20002284
 80092cc:	200022a4 	.word	0x200022a4
 80092d0:	200022d0 	.word	0x200022d0

080092d4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80092d4:	4a02      	ldr	r2, [pc, #8]	; (80092e0 <vTaskSuspendAll+0xc>)
 80092d6:	6813      	ldr	r3, [r2, #0]
 80092d8:	3301      	adds	r3, #1
 80092da:	6013      	str	r3, [r2, #0]
}
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	2000224c 	.word	0x2000224c

080092e4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80092e4:	4b01      	ldr	r3, [pc, #4]	; (80092ec <xTaskGetTickCount+0x8>)
 80092e6:	6818      	ldr	r0, [r3, #0]
}
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	200022d0 	.word	0x200022d0

080092f0 <xTaskGetTickCountFromISR>:
{
 80092f0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092f2:	f000 ff75 	bl	800a1e0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80092f6:	4b01      	ldr	r3, [pc, #4]	; (80092fc <xTaskGetTickCountFromISR+0xc>)
 80092f8:	6818      	ldr	r0, [r3, #0]
}
 80092fa:	bd08      	pop	{r3, pc}
 80092fc:	200022d0 	.word	0x200022d0

08009300 <xTaskIncrementTick>:
{
 8009300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009302:	4b3c      	ldr	r3, [pc, #240]	; (80093f4 <xTaskIncrementTick+0xf4>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d16c      	bne.n	80093e4 <xTaskIncrementTick+0xe4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800930a:	4b3b      	ldr	r3, [pc, #236]	; (80093f8 <xTaskIncrementTick+0xf8>)
 800930c:	681d      	ldr	r5, [r3, #0]
 800930e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009310:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009312:	b9c5      	cbnz	r5, 8009346 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009314:	4b39      	ldr	r3, [pc, #228]	; (80093fc <xTaskIncrementTick+0xfc>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	b143      	cbz	r3, 800932e <xTaskIncrementTick+0x2e>
 800931c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009320:	f383 8811 	msr	BASEPRI, r3
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	e7fe      	b.n	800932c <xTaskIncrementTick+0x2c>
 800932e:	4a33      	ldr	r2, [pc, #204]	; (80093fc <xTaskIncrementTick+0xfc>)
 8009330:	6811      	ldr	r1, [r2, #0]
 8009332:	4b33      	ldr	r3, [pc, #204]	; (8009400 <xTaskIncrementTick+0x100>)
 8009334:	6818      	ldr	r0, [r3, #0]
 8009336:	6010      	str	r0, [r2, #0]
 8009338:	6019      	str	r1, [r3, #0]
 800933a:	4a32      	ldr	r2, [pc, #200]	; (8009404 <xTaskIncrementTick+0x104>)
 800933c:	6813      	ldr	r3, [r2, #0]
 800933e:	3301      	adds	r3, #1
 8009340:	6013      	str	r3, [r2, #0]
 8009342:	f7ff fd91 	bl	8008e68 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009346:	4b30      	ldr	r3, [pc, #192]	; (8009408 <xTaskIncrementTick+0x108>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	42ab      	cmp	r3, r5
 800934c:	d940      	bls.n	80093d0 <xTaskIncrementTick+0xd0>
BaseType_t xSwitchRequired = pdFALSE;
 800934e:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009350:	4b2e      	ldr	r3, [pc, #184]	; (800940c <xTaskIncrementTick+0x10c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009356:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800935a:	009a      	lsls	r2, r3, #2
 800935c:	4b2c      	ldr	r3, [pc, #176]	; (8009410 <xTaskIncrementTick+0x110>)
 800935e:	589b      	ldr	r3, [r3, r2]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d900      	bls.n	8009366 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8009364:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8009366:	4b2b      	ldr	r3, [pc, #172]	; (8009414 <xTaskIncrementTick+0x114>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d03f      	beq.n	80093ee <xTaskIncrementTick+0xee>
				xSwitchRequired = pdTRUE;
 800936e:	2701      	movs	r7, #1
	return xSwitchRequired;
 8009370:	e03d      	b.n	80093ee <xTaskIncrementTick+0xee>
							xSwitchRequired = pdTRUE;
 8009372:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009374:	4b21      	ldr	r3, [pc, #132]	; (80093fc <xTaskIncrementTick+0xfc>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	b35b      	cbz	r3, 80093d4 <xTaskIncrementTick+0xd4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800937c:	4b1f      	ldr	r3, [pc, #124]	; (80093fc <xTaskIncrementTick+0xfc>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009384:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8009386:	429d      	cmp	r5, r3
 8009388:	d329      	bcc.n	80093de <xTaskIncrementTick+0xde>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800938a:	1d26      	adds	r6, r4, #4
 800938c:	4630      	mov	r0, r6
 800938e:	f7ff f9c1 	bl	8008714 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009392:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009394:	b11b      	cbz	r3, 800939e <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009396:	f104 0018 	add.w	r0, r4, #24
 800939a:	f7ff f9bb 	bl	8008714 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800939e:	4620      	mov	r0, r4
 80093a0:	f007 ff2c 	bl	80111fc <SEGGER_SYSVIEW_OnTaskStartReady>
 80093a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80093a6:	2201      	movs	r2, #1
 80093a8:	409a      	lsls	r2, r3
 80093aa:	491b      	ldr	r1, [pc, #108]	; (8009418 <xTaskIncrementTick+0x118>)
 80093ac:	6808      	ldr	r0, [r1, #0]
 80093ae:	4302      	orrs	r2, r0
 80093b0:	600a      	str	r2, [r1, #0]
 80093b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80093b6:	009a      	lsls	r2, r3, #2
 80093b8:	4631      	mov	r1, r6
 80093ba:	4815      	ldr	r0, [pc, #84]	; (8009410 <xTaskIncrementTick+0x110>)
 80093bc:	4410      	add	r0, r2
 80093be:	f7ff f985 	bl	80086cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80093c4:	4b11      	ldr	r3, [pc, #68]	; (800940c <xTaskIncrementTick+0x10c>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d2d1      	bcs.n	8009372 <xTaskIncrementTick+0x72>
 80093ce:	e7d1      	b.n	8009374 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 80093d0:	2700      	movs	r7, #0
 80093d2:	e7cf      	b.n	8009374 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093d4:	4b0c      	ldr	r3, [pc, #48]	; (8009408 <xTaskIncrementTick+0x108>)
 80093d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093da:	601a      	str	r2, [r3, #0]
					break;
 80093dc:	e7b8      	b.n	8009350 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80093de:	4a0a      	ldr	r2, [pc, #40]	; (8009408 <xTaskIncrementTick+0x108>)
 80093e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80093e2:	e7b5      	b.n	8009350 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 80093e4:	4a0d      	ldr	r2, [pc, #52]	; (800941c <xTaskIncrementTick+0x11c>)
 80093e6:	6813      	ldr	r3, [r2, #0]
 80093e8:	3301      	adds	r3, #1
 80093ea:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80093ec:	2700      	movs	r7, #0
}
 80093ee:	4638      	mov	r0, r7
 80093f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093f2:	bf00      	nop
 80093f4:	2000224c 	.word	0x2000224c
 80093f8:	200022d0 	.word	0x200022d0
 80093fc:	200021a8 	.word	0x200021a8
 8009400:	200021ac 	.word	0x200021ac
 8009404:	20002288 	.word	0x20002288
 8009408:	20002284 	.word	0x20002284
 800940c:	200021a4 	.word	0x200021a4
 8009410:	200021b0 	.word	0x200021b0
 8009414:	200022d4 	.word	0x200022d4
 8009418:	20002254 	.word	0x20002254
 800941c:	2000228c 	.word	0x2000228c

08009420 <xTaskResumeAll>:
{
 8009420:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8009422:	4b36      	ldr	r3, [pc, #216]	; (80094fc <xTaskResumeAll+0xdc>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	b943      	cbnz	r3, 800943a <xTaskResumeAll+0x1a>
 8009428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	e7fe      	b.n	8009438 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800943a:	f000 fdab 	bl	8009f94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800943e:	4b2f      	ldr	r3, [pc, #188]	; (80094fc <xTaskResumeAll+0xdc>)
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	3a01      	subs	r2, #1
 8009444:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d152      	bne.n	80094f2 <xTaskResumeAll+0xd2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800944c:	4b2c      	ldr	r3, [pc, #176]	; (8009500 <xTaskResumeAll+0xe0>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	b90b      	cbnz	r3, 8009456 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8009452:	2400      	movs	r4, #0
 8009454:	e04e      	b.n	80094f4 <xTaskResumeAll+0xd4>
TCB_t *pxTCB = NULL;
 8009456:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009458:	4b2a      	ldr	r3, [pc, #168]	; (8009504 <xTaskResumeAll+0xe4>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	b333      	cbz	r3, 80094ac <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800945e:	4b29      	ldr	r3, [pc, #164]	; (8009504 <xTaskResumeAll+0xe4>)
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009464:	f104 0018 	add.w	r0, r4, #24
 8009468:	f7ff f954 	bl	8008714 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800946c:	1d25      	adds	r5, r4, #4
 800946e:	4628      	mov	r0, r5
 8009470:	f7ff f950 	bl	8008714 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009474:	4620      	mov	r0, r4
 8009476:	f007 fec1 	bl	80111fc <SEGGER_SYSVIEW_OnTaskStartReady>
 800947a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800947c:	2301      	movs	r3, #1
 800947e:	4083      	lsls	r3, r0
 8009480:	4a21      	ldr	r2, [pc, #132]	; (8009508 <xTaskResumeAll+0xe8>)
 8009482:	6811      	ldr	r1, [r2, #0]
 8009484:	430b      	orrs	r3, r1
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800948c:	4629      	mov	r1, r5
 800948e:	4b1f      	ldr	r3, [pc, #124]	; (800950c <xTaskResumeAll+0xec>)
 8009490:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009494:	f7ff f91a 	bl	80086cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009498:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800949a:	4b1d      	ldr	r3, [pc, #116]	; (8009510 <xTaskResumeAll+0xf0>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d3d9      	bcc.n	8009458 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 80094a4:	4b1b      	ldr	r3, [pc, #108]	; (8009514 <xTaskResumeAll+0xf4>)
 80094a6:	2201      	movs	r2, #1
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	e7d5      	b.n	8009458 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80094ac:	b10c      	cbz	r4, 80094b2 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80094ae:	f7ff fcdb 	bl	8008e68 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094b2:	4b19      	ldr	r3, [pc, #100]	; (8009518 <xTaskResumeAll+0xf8>)
 80094b4:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80094b6:	b984      	cbnz	r4, 80094da <xTaskResumeAll+0xba>
				if( xYieldPending != pdFALSE )
 80094b8:	4b16      	ldr	r3, [pc, #88]	; (8009514 <xTaskResumeAll+0xf4>)
 80094ba:	681c      	ldr	r4, [r3, #0]
 80094bc:	b1d4      	cbz	r4, 80094f4 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
 80094be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80094c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80094d2:	2401      	movs	r4, #1
 80094d4:	e00e      	b.n	80094f4 <xTaskResumeAll+0xd4>
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094d6:	3c01      	subs	r4, #1
 80094d8:	d007      	beq.n	80094ea <xTaskResumeAll+0xca>
							if( xTaskIncrementTick() != pdFALSE )
 80094da:	f7ff ff11 	bl	8009300 <xTaskIncrementTick>
 80094de:	2800      	cmp	r0, #0
 80094e0:	d0f9      	beq.n	80094d6 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 80094e2:	4b0c      	ldr	r3, [pc, #48]	; (8009514 <xTaskResumeAll+0xf4>)
 80094e4:	2201      	movs	r2, #1
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	e7f5      	b.n	80094d6 <xTaskResumeAll+0xb6>
						xPendedTicks = 0;
 80094ea:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <xTaskResumeAll+0xf8>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	601a      	str	r2, [r3, #0]
 80094f0:	e7e2      	b.n	80094b8 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 80094f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80094f4:	f000 fd70 	bl	8009fd8 <vPortExitCritical>
}
 80094f8:	4620      	mov	r0, r4
 80094fa:	bd38      	pop	{r3, r4, r5, pc}
 80094fc:	2000224c 	.word	0x2000224c
 8009500:	20002244 	.word	0x20002244
 8009504:	20002290 	.word	0x20002290
 8009508:	20002254 	.word	0x20002254
 800950c:	200021b0 	.word	0x200021b0
 8009510:	200021a4 	.word	0x200021a4
 8009514:	200022d4 	.word	0x200022d4
 8009518:	2000228c 	.word	0x2000228c

0800951c <vTaskDelay>:
	{
 800951c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800951e:	b1c8      	cbz	r0, 8009554 <vTaskDelay+0x38>
 8009520:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8009522:	4b12      	ldr	r3, [pc, #72]	; (800956c <vTaskDelay+0x50>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	b143      	cbz	r3, 800953a <vTaskDelay+0x1e>
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	e7fe      	b.n	8009538 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800953a:	f7ff fecb 	bl	80092d4 <vTaskSuspendAll>
				traceTASK_DELAY();
 800953e:	4621      	mov	r1, r4
 8009540:	2023      	movs	r0, #35	; 0x23
 8009542:	f007 fc45 	bl	8010dd0 <SEGGER_SYSVIEW_RecordU32>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009546:	2100      	movs	r1, #0
 8009548:	4620      	mov	r0, r4
 800954a:	f7ff fdd5 	bl	80090f8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800954e:	f7ff ff67 	bl	8009420 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009552:	b948      	cbnz	r0, 8009568 <vTaskDelay+0x4c>
			portYIELD_WITHIN_API();
 8009554:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800955c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	f3bf 8f6f 	isb	sy
	}
 8009568:	bd10      	pop	{r4, pc}
 800956a:	bf00      	nop
 800956c:	2000224c 	.word	0x2000224c

08009570 <vTaskSwitchContext>:
{
 8009570:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009572:	4b31      	ldr	r3, [pc, #196]	; (8009638 <vTaskSwitchContext+0xc8>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	b11b      	cbz	r3, 8009580 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8009578:	4b30      	ldr	r3, [pc, #192]	; (800963c <vTaskSwitchContext+0xcc>)
 800957a:	2201      	movs	r2, #1
 800957c:	601a      	str	r2, [r3, #0]
}
 800957e:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 8009580:	4b2e      	ldr	r3, [pc, #184]	; (800963c <vTaskSwitchContext+0xcc>)
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009586:	f7f7 f89b 	bl	80006c0 <getRunTimeCounterValue>
 800958a:	4b2d      	ldr	r3, [pc, #180]	; (8009640 <vTaskSwitchContext+0xd0>)
 800958c:	6018      	str	r0, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800958e:	4b2d      	ldr	r3, [pc, #180]	; (8009644 <vTaskSwitchContext+0xd4>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4298      	cmp	r0, r3
 8009594:	d905      	bls.n	80095a2 <vTaskSwitchContext+0x32>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009596:	4a2c      	ldr	r2, [pc, #176]	; (8009648 <vTaskSwitchContext+0xd8>)
 8009598:	6811      	ldr	r1, [r2, #0]
 800959a:	1ac3      	subs	r3, r0, r3
 800959c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800959e:	441a      	add	r2, r3
 80095a0:	654a      	str	r2, [r1, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80095a2:	4b28      	ldr	r3, [pc, #160]	; (8009644 <vTaskSwitchContext+0xd4>)
 80095a4:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a6:	4b29      	ldr	r3, [pc, #164]	; (800964c <vTaskSwitchContext+0xdc>)
 80095a8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80095aa:	fab3 f383 	clz	r3, r3
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	f1c3 031f 	rsb	r3, r3, #31
 80095b4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80095b8:	0092      	lsls	r2, r2, #2
 80095ba:	4925      	ldr	r1, [pc, #148]	; (8009650 <vTaskSwitchContext+0xe0>)
 80095bc:	588a      	ldr	r2, [r1, r2]
 80095be:	b942      	cbnz	r2, 80095d2 <vTaskSwitchContext+0x62>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	e7fe      	b.n	80095d0 <vTaskSwitchContext+0x60>
 80095d2:	491f      	ldr	r1, [pc, #124]	; (8009650 <vTaskSwitchContext+0xe0>)
 80095d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80095d8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80095dc:	6850      	ldr	r0, [r2, #4]
 80095de:	6840      	ldr	r0, [r0, #4]
 80095e0:	6050      	str	r0, [r2, #4]
 80095e2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80095e6:	0092      	lsls	r2, r2, #2
 80095e8:	3208      	adds	r2, #8
 80095ea:	4411      	add	r1, r2
 80095ec:	4288      	cmp	r0, r1
 80095ee:	d017      	beq.n	8009620 <vTaskSwitchContext+0xb0>
 80095f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80095f4:	4a16      	ldr	r2, [pc, #88]	; (8009650 <vTaskSwitchContext+0xe0>)
 80095f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	68da      	ldr	r2, [r3, #12]
 80095fe:	4b12      	ldr	r3, [pc, #72]	; (8009648 <vTaskSwitchContext+0xd8>)
 8009600:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	4b13      	ldr	r3, [pc, #76]	; (8009654 <vTaskSwitchContext+0xe4>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	429a      	cmp	r2, r3
 800960a:	d011      	beq.n	8009630 <vTaskSwitchContext+0xc0>
 800960c:	4b0e      	ldr	r3, [pc, #56]	; (8009648 <vTaskSwitchContext+0xd8>)
 800960e:	6818      	ldr	r0, [r3, #0]
 8009610:	f007 fdd0 	bl	80111b4 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009614:	4b0c      	ldr	r3, [pc, #48]	; (8009648 <vTaskSwitchContext+0xd8>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3358      	adds	r3, #88	; 0x58
 800961a:	4a0f      	ldr	r2, [pc, #60]	; (8009658 <vTaskSwitchContext+0xe8>)
 800961c:	6013      	str	r3, [r2, #0]
}
 800961e:	e7ae      	b.n	800957e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009620:	6840      	ldr	r0, [r0, #4]
 8009622:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009626:	4a0a      	ldr	r2, [pc, #40]	; (8009650 <vTaskSwitchContext+0xe0>)
 8009628:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800962c:	6050      	str	r0, [r2, #4]
 800962e:	e7df      	b.n	80095f0 <vTaskSwitchContext+0x80>
		traceTASK_SWITCHED_IN();
 8009630:	f007 fd88 	bl	8011144 <SEGGER_SYSVIEW_OnIdle>
 8009634:	e7ee      	b.n	8009614 <vTaskSwitchContext+0xa4>
 8009636:	bf00      	nop
 8009638:	2000224c 	.word	0x2000224c
 800963c:	200022d4 	.word	0x200022d4
 8009640:	20002240 	.word	0x20002240
 8009644:	2000223c 	.word	0x2000223c
 8009648:	200021a4 	.word	0x200021a4
 800964c:	20002254 	.word	0x20002254
 8009650:	200021b0 	.word	0x200021b0
 8009654:	20002280 	.word	0x20002280
 8009658:	20001868 	.word	0x20001868

0800965c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800965c:	b158      	cbz	r0, 8009676 <vTaskPlaceOnEventList+0x1a>
{
 800965e:	b510      	push	{r4, lr}
 8009660:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009662:	4a09      	ldr	r2, [pc, #36]	; (8009688 <vTaskPlaceOnEventList+0x2c>)
 8009664:	6811      	ldr	r1, [r2, #0]
 8009666:	3118      	adds	r1, #24
 8009668:	f7ff f83b 	bl	80086e2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800966c:	2101      	movs	r1, #1
 800966e:	4620      	mov	r0, r4
 8009670:	f7ff fd42 	bl	80090f8 <prvAddCurrentTaskToDelayedList>
}
 8009674:	bd10      	pop	{r4, pc}
 8009676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8009686:	e7fe      	b.n	8009686 <vTaskPlaceOnEventList+0x2a>
 8009688:	200021a4 	.word	0x200021a4

0800968c <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 800968c:	b170      	cbz	r0, 80096ac <vTaskPlaceOnUnorderedEventList+0x20>
{
 800968e:	b510      	push	{r4, lr}
 8009690:	4614      	mov	r4, r2
 8009692:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 8009694:	4b11      	ldr	r3, [pc, #68]	; (80096dc <vTaskPlaceOnUnorderedEventList+0x50>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	b98b      	cbnz	r3, 80096be <vTaskPlaceOnUnorderedEventList+0x32>
 800969a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	e7fe      	b.n	80096aa <vTaskPlaceOnUnorderedEventList+0x1e>
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80096bc:	e7fe      	b.n	80096bc <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80096be:	4b08      	ldr	r3, [pc, #32]	; (80096e0 <vTaskPlaceOnUnorderedEventList+0x54>)
 80096c0:	6818      	ldr	r0, [r3, #0]
 80096c2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80096c6:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096c8:	6819      	ldr	r1, [r3, #0]
 80096ca:	3118      	adds	r1, #24
 80096cc:	4610      	mov	r0, r2
 80096ce:	f7fe fffd 	bl	80086cc <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096d2:	2101      	movs	r1, #1
 80096d4:	4620      	mov	r0, r4
 80096d6:	f7ff fd0f 	bl	80090f8 <prvAddCurrentTaskToDelayedList>
}
 80096da:	bd10      	pop	{r4, pc}
 80096dc:	2000224c 	.word	0x2000224c
 80096e0:	200021a4 	.word	0x200021a4

080096e4 <vTaskPlaceOnEventListRestricted>:
	{
 80096e4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80096e6:	b188      	cbz	r0, 800970c <vTaskPlaceOnEventListRestricted+0x28>
 80096e8:	460d      	mov	r5, r1
 80096ea:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096ec:	4a0c      	ldr	r2, [pc, #48]	; (8009720 <vTaskPlaceOnEventListRestricted+0x3c>)
 80096ee:	6811      	ldr	r1, [r2, #0]
 80096f0:	3118      	adds	r1, #24
 80096f2:	f7fe ffeb 	bl	80086cc <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80096f6:	b10c      	cbz	r4, 80096fc <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80096f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80096fc:	2024      	movs	r0, #36	; 0x24
 80096fe:	f007 fb53 	bl	8010da8 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009702:	4621      	mov	r1, r4
 8009704:	4628      	mov	r0, r5
 8009706:	f7ff fcf7 	bl	80090f8 <prvAddCurrentTaskToDelayedList>
	}
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800971c:	e7fe      	b.n	800971c <vTaskPlaceOnEventListRestricted+0x38>
 800971e:	bf00      	nop
 8009720:	200021a4 	.word	0x200021a4

08009724 <xTaskRemoveFromEventList>:
{
 8009724:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009726:	68c3      	ldr	r3, [r0, #12]
 8009728:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800972a:	b33c      	cbz	r4, 800977c <xTaskRemoveFromEventList+0x58>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800972c:	f104 0518 	add.w	r5, r4, #24
 8009730:	4628      	mov	r0, r5
 8009732:	f7fe ffef 	bl	8008714 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009736:	4b19      	ldr	r3, [pc, #100]	; (800979c <xTaskRemoveFromEventList+0x78>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	bb43      	cbnz	r3, 800978e <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800973c:	1d25      	adds	r5, r4, #4
 800973e:	4628      	mov	r0, r5
 8009740:	f7fe ffe8 	bl	8008714 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009744:	4620      	mov	r0, r4
 8009746:	f007 fd59 	bl	80111fc <SEGGER_SYSVIEW_OnTaskStartReady>
 800974a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800974c:	2301      	movs	r3, #1
 800974e:	4083      	lsls	r3, r0
 8009750:	4a13      	ldr	r2, [pc, #76]	; (80097a0 <xTaskRemoveFromEventList+0x7c>)
 8009752:	6811      	ldr	r1, [r2, #0]
 8009754:	430b      	orrs	r3, r1
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800975c:	4629      	mov	r1, r5
 800975e:	4b11      	ldr	r3, [pc, #68]	; (80097a4 <xTaskRemoveFromEventList+0x80>)
 8009760:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009764:	f7fe ffb2 	bl	80086cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009768:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800976a:	4b0f      	ldr	r3, [pc, #60]	; (80097a8 <xTaskRemoveFromEventList+0x84>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009770:	429a      	cmp	r2, r3
 8009772:	d911      	bls.n	8009798 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8009774:	2001      	movs	r0, #1
 8009776:	4b0d      	ldr	r3, [pc, #52]	; (80097ac <xTaskRemoveFromEventList+0x88>)
 8009778:	6018      	str	r0, [r3, #0]
}
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009780:	f383 8811 	msr	BASEPRI, r3
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800978c:	e7fe      	b.n	800978c <xTaskRemoveFromEventList+0x68>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800978e:	4629      	mov	r1, r5
 8009790:	4807      	ldr	r0, [pc, #28]	; (80097b0 <xTaskRemoveFromEventList+0x8c>)
 8009792:	f7fe ff9b 	bl	80086cc <vListInsertEnd>
 8009796:	e7e7      	b.n	8009768 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 8009798:	2000      	movs	r0, #0
	return xReturn;
 800979a:	e7ee      	b.n	800977a <xTaskRemoveFromEventList+0x56>
 800979c:	2000224c 	.word	0x2000224c
 80097a0:	20002254 	.word	0x20002254
 80097a4:	200021b0 	.word	0x200021b0
 80097a8:	200021a4 	.word	0x200021a4
 80097ac:	200022d4 	.word	0x200022d4
 80097b0:	20002290 	.word	0x20002290

080097b4 <vTaskRemoveFromUnorderedEventList>:
{
 80097b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80097b6:	4b1e      	ldr	r3, [pc, #120]	; (8009830 <vTaskRemoveFromUnorderedEventList+0x7c>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	b943      	cbnz	r3, 80097ce <vTaskRemoveFromUnorderedEventList+0x1a>
 80097bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	e7fe      	b.n	80097cc <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80097ce:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80097d2:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097d4:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 80097d6:	b30c      	cbz	r4, 800981c <vTaskRemoveFromUnorderedEventList+0x68>
	( void ) uxListRemove( pxEventListItem );
 80097d8:	f7fe ff9c 	bl	8008714 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097dc:	1d25      	adds	r5, r4, #4
 80097de:	4628      	mov	r0, r5
 80097e0:	f7fe ff98 	bl	8008714 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80097e4:	4620      	mov	r0, r4
 80097e6:	f007 fd09 	bl	80111fc <SEGGER_SYSVIEW_OnTaskStartReady>
 80097ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80097ec:	2301      	movs	r3, #1
 80097ee:	4083      	lsls	r3, r0
 80097f0:	4a10      	ldr	r2, [pc, #64]	; (8009834 <vTaskRemoveFromUnorderedEventList+0x80>)
 80097f2:	6811      	ldr	r1, [r2, #0]
 80097f4:	430b      	orrs	r3, r1
 80097f6:	6013      	str	r3, [r2, #0]
 80097f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80097fc:	4629      	mov	r1, r5
 80097fe:	4b0e      	ldr	r3, [pc, #56]	; (8009838 <vTaskRemoveFromUnorderedEventList+0x84>)
 8009800:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009804:	f7fe ff62 	bl	80086cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009808:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800980a:	4b0c      	ldr	r3, [pc, #48]	; (800983c <vTaskRemoveFromUnorderedEventList+0x88>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009810:	429a      	cmp	r2, r3
 8009812:	d902      	bls.n	800981a <vTaskRemoveFromUnorderedEventList+0x66>
		xYieldPending = pdTRUE;
 8009814:	4b0a      	ldr	r3, [pc, #40]	; (8009840 <vTaskRemoveFromUnorderedEventList+0x8c>)
 8009816:	2201      	movs	r2, #1
 8009818:	601a      	str	r2, [r3, #0]
}
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800982c:	e7fe      	b.n	800982c <vTaskRemoveFromUnorderedEventList+0x78>
 800982e:	bf00      	nop
 8009830:	2000224c 	.word	0x2000224c
 8009834:	20002254 	.word	0x20002254
 8009838:	200021b0 	.word	0x200021b0
 800983c:	200021a4 	.word	0x200021a4
 8009840:	200022d4 	.word	0x200022d4

08009844 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009844:	4b03      	ldr	r3, [pc, #12]	; (8009854 <vTaskInternalSetTimeOutState+0x10>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800984a:	4b03      	ldr	r3, [pc, #12]	; (8009858 <vTaskInternalSetTimeOutState+0x14>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6043      	str	r3, [r0, #4]
}
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	20002288 	.word	0x20002288
 8009858:	200022d0 	.word	0x200022d0

0800985c <xTaskCheckForTimeOut>:
{
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800985e:	b1c8      	cbz	r0, 8009894 <xTaskCheckForTimeOut+0x38>
 8009860:	460c      	mov	r4, r1
 8009862:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009864:	b1f9      	cbz	r1, 80098a6 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8009866:	f000 fb95 	bl	8009f94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800986a:	4b1b      	ldr	r3, [pc, #108]	; (80098d8 <xTaskCheckForTimeOut+0x7c>)
 800986c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800986e:	686b      	ldr	r3, [r5, #4]
 8009870:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8009872:	6822      	ldr	r2, [r4, #0]
 8009874:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009878:	d026      	beq.n	80098c8 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800987a:	4e18      	ldr	r6, [pc, #96]	; (80098dc <xTaskCheckForTimeOut+0x80>)
 800987c:	6836      	ldr	r6, [r6, #0]
 800987e:	682f      	ldr	r7, [r5, #0]
 8009880:	42b7      	cmp	r7, r6
 8009882:	d001      	beq.n	8009888 <xTaskCheckForTimeOut+0x2c>
 8009884:	428b      	cmp	r3, r1
 8009886:	d924      	bls.n	80098d2 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009888:	4282      	cmp	r2, r0
 800988a:	d815      	bhi.n	80098b8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800988c:	2300      	movs	r3, #0
 800988e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009890:	2401      	movs	r4, #1
 8009892:	e01a      	b.n	80098ca <xTaskCheckForTimeOut+0x6e>
 8009894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80098a4:	e7fe      	b.n	80098a4 <xTaskCheckForTimeOut+0x48>
 80098a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80098b6:	e7fe      	b.n	80098b6 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 80098b8:	1a5b      	subs	r3, r3, r1
 80098ba:	4413      	add	r3, r2
 80098bc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098be:	4628      	mov	r0, r5
 80098c0:	f7ff ffc0 	bl	8009844 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098c4:	2400      	movs	r4, #0
 80098c6:	e000      	b.n	80098ca <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 80098c8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80098ca:	f000 fb85 	bl	8009fd8 <vPortExitCritical>
}
 80098ce:	4620      	mov	r0, r4
 80098d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80098d2:	2401      	movs	r4, #1
 80098d4:	e7f9      	b.n	80098ca <xTaskCheckForTimeOut+0x6e>
 80098d6:	bf00      	nop
 80098d8:	200022d0 	.word	0x200022d0
 80098dc:	20002288 	.word	0x20002288

080098e0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80098e0:	4b01      	ldr	r3, [pc, #4]	; (80098e8 <vTaskMissedYield+0x8>)
 80098e2:	2201      	movs	r2, #1
 80098e4:	601a      	str	r2, [r3, #0]
}
 80098e6:	4770      	bx	lr
 80098e8:	200022d4 	.word	0x200022d4

080098ec <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80098ec:	4b05      	ldr	r3, [pc, #20]	; (8009904 <xTaskGetSchedulerState+0x18>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	b133      	cbz	r3, 8009900 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098f2:	4b05      	ldr	r3, [pc, #20]	; (8009908 <xTaskGetSchedulerState+0x1c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	b10b      	cbz	r3, 80098fc <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80098f8:	2000      	movs	r0, #0
	}
 80098fa:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80098fc:	2002      	movs	r0, #2
 80098fe:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009900:	2001      	movs	r0, #1
 8009902:	4770      	bx	lr
 8009904:	200022a4 	.word	0x200022a4
 8009908:	2000224c 	.word	0x2000224c

0800990c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800990c:	2800      	cmp	r0, #0
 800990e:	d053      	beq.n	80099b8 <xTaskPriorityDisinherit+0xac>
	{
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009914:	4b2a      	ldr	r3, [pc, #168]	; (80099c0 <xTaskPriorityDisinherit+0xb4>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4283      	cmp	r3, r0
 800991a:	d008      	beq.n	800992e <xTaskPriorityDisinherit+0x22>
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	e7fe      	b.n	800992c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800992e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009930:	b943      	cbnz	r3, 8009944 <xTaskPriorityDisinherit+0x38>
 8009932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	e7fe      	b.n	8009942 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8009944:	3b01      	subs	r3, #1
 8009946:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009948:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800994a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800994c:	4291      	cmp	r1, r2
 800994e:	d035      	beq.n	80099bc <xTaskPriorityDisinherit+0xb0>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009950:	b10b      	cbz	r3, 8009956 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8009952:	2000      	movs	r0, #0
	}
 8009954:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009956:	1d05      	adds	r5, r0, #4
 8009958:	4628      	mov	r0, r5
 800995a:	f7fe fedb 	bl	8008714 <uxListRemove>
 800995e:	b968      	cbnz	r0, 800997c <xTaskPriorityDisinherit+0x70>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009960:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009962:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009966:	0092      	lsls	r2, r2, #2
 8009968:	4916      	ldr	r1, [pc, #88]	; (80099c4 <xTaskPriorityDisinherit+0xb8>)
 800996a:	588a      	ldr	r2, [r1, r2]
 800996c:	b932      	cbnz	r2, 800997c <xTaskPriorityDisinherit+0x70>
 800996e:	2201      	movs	r2, #1
 8009970:	409a      	lsls	r2, r3
 8009972:	4915      	ldr	r1, [pc, #84]	; (80099c8 <xTaskPriorityDisinherit+0xbc>)
 8009974:	680b      	ldr	r3, [r1, #0]
 8009976:	ea23 0302 	bic.w	r3, r3, r2
 800997a:	600b      	str	r3, [r1, #0]
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800997c:	4621      	mov	r1, r4
 800997e:	204a      	movs	r0, #74	; 0x4a
 8009980:	f007 fa26 	bl	8010dd0 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009984:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009986:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009988:	f1c3 0307 	rsb	r3, r3, #7
 800998c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800998e:	4620      	mov	r0, r4
 8009990:	f007 fc34 	bl	80111fc <SEGGER_SYSVIEW_OnTaskStartReady>
 8009994:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009996:	2401      	movs	r4, #1
 8009998:	fa04 f300 	lsl.w	r3, r4, r0
 800999c:	4a0a      	ldr	r2, [pc, #40]	; (80099c8 <xTaskPriorityDisinherit+0xbc>)
 800999e:	6811      	ldr	r1, [r2, #0]
 80099a0:	430b      	orrs	r3, r1
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80099a8:	4629      	mov	r1, r5
 80099aa:	4b06      	ldr	r3, [pc, #24]	; (80099c4 <xTaskPriorityDisinherit+0xb8>)
 80099ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80099b0:	f7fe fe8c 	bl	80086cc <vListInsertEnd>
					xReturn = pdTRUE;
 80099b4:	4620      	mov	r0, r4
 80099b6:	e7cd      	b.n	8009954 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80099b8:	2000      	movs	r0, #0
	}
 80099ba:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80099bc:	2000      	movs	r0, #0
 80099be:	e7c9      	b.n	8009954 <xTaskPriorityDisinherit+0x48>
 80099c0:	200021a4 	.word	0x200021a4
 80099c4:	200021b0 	.word	0x200021b0
 80099c8:	20002254 	.word	0x20002254

080099cc <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80099cc:	4a04      	ldr	r2, [pc, #16]	; (80099e0 <uxTaskResetEventItemValue+0x14>)
 80099ce:	6813      	ldr	r3, [r2, #0]
 80099d0:	6998      	ldr	r0, [r3, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099d2:	6813      	ldr	r3, [r2, #0]
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	6812      	ldr	r2, [r2, #0]
 80099d8:	f1c3 0307 	rsb	r3, r3, #7
 80099dc:	6193      	str	r3, [r2, #24]
}
 80099de:	4770      	bx	lr
 80099e0:	200021a4 	.word	0x200021a4

080099e4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099e4:	4b06      	ldr	r3, [pc, #24]	; (8009a00 <prvGetNextExpireTime+0x1c>)
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	6813      	ldr	r3, [r2, #0]
 80099ea:	b92b      	cbnz	r3, 80099f8 <prvGetNextExpireTime+0x14>
 80099ec:	2301      	movs	r3, #1
 80099ee:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099f0:	b923      	cbnz	r3, 80099fc <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099f2:	68d3      	ldr	r3, [r2, #12]
 80099f4:	6818      	ldr	r0, [r3, #0]
 80099f6:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099f8:	2300      	movs	r3, #0
 80099fa:	e7f8      	b.n	80099ee <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099fc:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80099fe:	4770      	bx	lr
 8009a00:	200022d8 	.word	0x200022d8

08009a04 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a04:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a06:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a08:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a0a:	4291      	cmp	r1, r2
 8009a0c:	d80c      	bhi.n	8009a28 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a0e:	1ad2      	subs	r2, r2, r3
 8009a10:	6983      	ldr	r3, [r0, #24]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d301      	bcc.n	8009a1a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a16:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8009a18:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a1a:	1d01      	adds	r1, r0, #4
 8009a1c:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <prvInsertTimerInActiveList+0x40>)
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	f7fe fe5f 	bl	80086e2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009a24:	2000      	movs	r0, #0
 8009a26:	e7f7      	b.n	8009a18 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d201      	bcs.n	8009a30 <prvInsertTimerInActiveList+0x2c>
 8009a2c:	4299      	cmp	r1, r3
 8009a2e:	d206      	bcs.n	8009a3e <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a30:	1d01      	adds	r1, r0, #4
 8009a32:	4b05      	ldr	r3, [pc, #20]	; (8009a48 <prvInsertTimerInActiveList+0x44>)
 8009a34:	6818      	ldr	r0, [r3, #0]
 8009a36:	f7fe fe54 	bl	80086e2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	e7ec      	b.n	8009a18 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8009a3e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009a40:	e7ea      	b.n	8009a18 <prvInsertTimerInActiveList+0x14>
 8009a42:	bf00      	nop
 8009a44:	200022dc 	.word	0x200022dc
 8009a48:	200022d8 	.word	0x200022d8

08009a4c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a4c:	b538      	push	{r3, r4, r5, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a4e:	f000 faa1 	bl	8009f94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a52:	4b0f      	ldr	r3, [pc, #60]	; (8009a90 <prvCheckForValidListAndQueue+0x44>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	b113      	cbz	r3, 8009a5e <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a58:	f000 fabe 	bl	8009fd8 <vPortExitCritical>
}
 8009a5c:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8009a5e:	4d0d      	ldr	r5, [pc, #52]	; (8009a94 <prvCheckForValidListAndQueue+0x48>)
 8009a60:	4628      	mov	r0, r5
 8009a62:	f7fe fe25 	bl	80086b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a66:	4c0c      	ldr	r4, [pc, #48]	; (8009a98 <prvCheckForValidListAndQueue+0x4c>)
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f7fe fe21 	bl	80086b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a6e:	4b0b      	ldr	r3, [pc, #44]	; (8009a9c <prvCheckForValidListAndQueue+0x50>)
 8009a70:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a72:	4b0b      	ldr	r3, [pc, #44]	; (8009aa0 <prvCheckForValidListAndQueue+0x54>)
 8009a74:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009a76:	2200      	movs	r2, #0
 8009a78:	2110      	movs	r1, #16
 8009a7a:	200a      	movs	r0, #10
 8009a7c:	f7fe ff57 	bl	800892e <xQueueGenericCreate>
 8009a80:	4b03      	ldr	r3, [pc, #12]	; (8009a90 <prvCheckForValidListAndQueue+0x44>)
 8009a82:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d0e7      	beq.n	8009a58 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a88:	4906      	ldr	r1, [pc, #24]	; (8009aa4 <prvCheckForValidListAndQueue+0x58>)
 8009a8a:	f7ff f9a7 	bl	8008ddc <vQueueAddToRegistry>
 8009a8e:	e7e3      	b.n	8009a58 <prvCheckForValidListAndQueue+0xc>
 8009a90:	2000230c 	.word	0x2000230c
 8009a94:	200022e0 	.word	0x200022e0
 8009a98:	200022f4 	.word	0x200022f4
 8009a9c:	200022d8 	.word	0x200022d8
 8009aa0:	200022dc 	.word	0x200022dc
 8009aa4:	08013164 	.word	0x08013164

08009aa8 <prvInitialiseNewTimer>:
{
 8009aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aac:	9f07      	ldr	r7, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009aae:	b941      	cbnz	r1, 8009ac2 <prvInitialiseNewTimer+0x1a>
 8009ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	e7fe      	b.n	8009ac0 <prvInitialiseNewTimer+0x18>
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	4614      	mov	r4, r2
 8009ac6:	461d      	mov	r5, r3
 8009ac8:	4688      	mov	r8, r1
	if( pxNewTimer != NULL )
 8009aca:	b18f      	cbz	r7, 8009af0 <prvInitialiseNewTimer+0x48>
		prvCheckForValidListAndQueue();
 8009acc:	f7ff ffbe 	bl	8009a4c <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8009ad0:	603e      	str	r6, [r7, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009ad2:	f8c7 8018 	str.w	r8, [r7, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009ad6:	61fd      	str	r5, [r7, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009ad8:	9b06      	ldr	r3, [sp, #24]
 8009ada:	623b      	str	r3, [r7, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009adc:	1d38      	adds	r0, r7, #4
 8009ade:	f7fe fdf2 	bl	80086c6 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009ae2:	b12c      	cbz	r4, 8009af0 <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009ae4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ae8:	f043 0304 	orr.w	r3, r3, #4
 8009aec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
}
 8009af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009af4 <xTimerCreateTimerTask>:
{
 8009af4:	b500      	push	{lr}
 8009af6:	b083      	sub	sp, #12
	prvCheckForValidListAndQueue();
 8009af8:	f7ff ffa8 	bl	8009a4c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009afc:	4b0d      	ldr	r3, [pc, #52]	; (8009b34 <xTimerCreateTimerTask+0x40>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	b15b      	cbz	r3, 8009b1a <xTimerCreateTimerTask+0x26>
			xReturn = xTaskCreate(	prvTimerTask,
 8009b02:	4b0d      	ldr	r3, [pc, #52]	; (8009b38 <xTimerCreateTimerTask+0x44>)
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	2306      	movs	r3, #6
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b10:	490a      	ldr	r1, [pc, #40]	; (8009b3c <xTimerCreateTimerTask+0x48>)
 8009b12:	480b      	ldr	r0, [pc, #44]	; (8009b40 <xTimerCreateTimerTask+0x4c>)
 8009b14:	f7ff fb54 	bl	80091c0 <xTaskCreate>
	configASSERT( xReturn );
 8009b18:	b940      	cbnz	r0, 8009b2c <xTimerCreateTimerTask+0x38>
 8009b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	e7fe      	b.n	8009b2a <xTimerCreateTimerTask+0x36>
}
 8009b2c:	b003      	add	sp, #12
 8009b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b32:	bf00      	nop
 8009b34:	2000230c 	.word	0x2000230c
 8009b38:	20002310 	.word	0x20002310
 8009b3c:	0801316c 	.word	0x0801316c
 8009b40:	08009e7d 	.word	0x08009e7d

08009b44 <xTimerCreate>:
	{
 8009b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	4688      	mov	r8, r1
 8009b4e:	4617      	mov	r7, r2
 8009b50:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009b52:	202c      	movs	r0, #44	; 0x2c
 8009b54:	f000 fbd6 	bl	800a304 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8009b58:	4606      	mov	r6, r0
 8009b5a:	b158      	cbz	r0, 8009b74 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009b62:	9001      	str	r0, [sp, #4]
 8009b64:	9b08      	ldr	r3, [sp, #32]
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	462b      	mov	r3, r5
 8009b6a:	463a      	mov	r2, r7
 8009b6c:	4641      	mov	r1, r8
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f7ff ff9a 	bl	8009aa8 <prvInitialiseNewTimer>
	}
 8009b74:	4630      	mov	r0, r6
 8009b76:	b002      	add	sp, #8
 8009b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b7c <xTimerGenericCommand>:
	configASSERT( xTimer );
 8009b7c:	b1b8      	cbz	r0, 8009bae <xTimerGenericCommand+0x32>
 8009b7e:	469c      	mov	ip, r3
 8009b80:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8009b82:	4818      	ldr	r0, [pc, #96]	; (8009be4 <xTimerGenericCommand+0x68>)
 8009b84:	6800      	ldr	r0, [r0, #0]
 8009b86:	b358      	cbz	r0, 8009be0 <xTimerGenericCommand+0x64>
{
 8009b88:	b500      	push	{lr}
 8009b8a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8009b8c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b8e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b90:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b92:	2905      	cmp	r1, #5
 8009b94:	dc1c      	bgt.n	8009bd0 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b96:	f7ff fea9 	bl	80098ec <xTaskGetSchedulerState>
 8009b9a:	2802      	cmp	r0, #2
 8009b9c:	d010      	beq.n	8009bc0 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	4669      	mov	r1, sp
 8009ba4:	480f      	ldr	r0, [pc, #60]	; (8009be4 <xTimerGenericCommand+0x68>)
 8009ba6:	6800      	ldr	r0, [r0, #0]
 8009ba8:	f7fe fee2 	bl	8008970 <xQueueGenericSend>
 8009bac:	e015      	b.n	8009bda <xTimerGenericCommand+0x5e>
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8009bbe:	e7fe      	b.n	8009bbe <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	9a06      	ldr	r2, [sp, #24]
 8009bc4:	4669      	mov	r1, sp
 8009bc6:	4807      	ldr	r0, [pc, #28]	; (8009be4 <xTimerGenericCommand+0x68>)
 8009bc8:	6800      	ldr	r0, [r0, #0]
 8009bca:	f7fe fed1 	bl	8008970 <xQueueGenericSend>
 8009bce:	e004      	b.n	8009bda <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	4662      	mov	r2, ip
 8009bd4:	4669      	mov	r1, sp
 8009bd6:	f7fe ffad 	bl	8008b34 <xQueueGenericSendFromISR>
}
 8009bda:	b005      	add	sp, #20
 8009bdc:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8009be0:	2000      	movs	r0, #0
}
 8009be2:	4770      	bx	lr
 8009be4:	2000230c 	.word	0x2000230c

08009be8 <prvSwitchTimerLists>:
{
 8009be8:	b570      	push	{r4, r5, r6, lr}
 8009bea:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bec:	4b1b      	ldr	r3, [pc, #108]	; (8009c5c <prvSwitchTimerLists+0x74>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	b362      	cbz	r2, 8009c4e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bfa:	1d25      	adds	r5, r4, #4
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	f7fe fd89 	bl	8008714 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c02:	6a23      	ldr	r3, [r4, #32]
 8009c04:	4620      	mov	r0, r4
 8009c06:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c08:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009c0c:	f013 0f04 	tst.w	r3, #4
 8009c10:	d0ec      	beq.n	8009bec <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c12:	69a3      	ldr	r3, [r4, #24]
 8009c14:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009c16:	429e      	cmp	r6, r3
 8009c18:	d207      	bcs.n	8009c2a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c1a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c1c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c1e:	4629      	mov	r1, r5
 8009c20:	4b0e      	ldr	r3, [pc, #56]	; (8009c5c <prvSwitchTimerLists+0x74>)
 8009c22:	6818      	ldr	r0, [r3, #0]
 8009c24:	f7fe fd5d 	bl	80086e2 <vListInsert>
 8009c28:	e7e0      	b.n	8009bec <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	9100      	str	r1, [sp, #0]
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4632      	mov	r2, r6
 8009c32:	4620      	mov	r0, r4
 8009c34:	f7ff ffa2 	bl	8009b7c <xTimerGenericCommand>
				configASSERT( xResult );
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d1d7      	bne.n	8009bec <prvSwitchTimerLists+0x4>
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	e7fe      	b.n	8009c4c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8009c4e:	4a04      	ldr	r2, [pc, #16]	; (8009c60 <prvSwitchTimerLists+0x78>)
 8009c50:	6810      	ldr	r0, [r2, #0]
 8009c52:	4902      	ldr	r1, [pc, #8]	; (8009c5c <prvSwitchTimerLists+0x74>)
 8009c54:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8009c56:	6013      	str	r3, [r2, #0]
}
 8009c58:	b002      	add	sp, #8
 8009c5a:	bd70      	pop	{r4, r5, r6, pc}
 8009c5c:	200022d8 	.word	0x200022d8
 8009c60:	200022dc 	.word	0x200022dc

08009c64 <prvSampleTimeNow>:
{
 8009c64:	b538      	push	{r3, r4, r5, lr}
 8009c66:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8009c68:	f7ff fb3c 	bl	80092e4 <xTaskGetTickCount>
 8009c6c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8009c6e:	4b07      	ldr	r3, [pc, #28]	; (8009c8c <prvSampleTimeNow+0x28>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4283      	cmp	r3, r0
 8009c74:	d805      	bhi.n	8009c82 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8009c76:	2300      	movs	r3, #0
 8009c78:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8009c7a:	4b04      	ldr	r3, [pc, #16]	; (8009c8c <prvSampleTimeNow+0x28>)
 8009c7c:	601c      	str	r4, [r3, #0]
}
 8009c7e:	4620      	mov	r0, r4
 8009c80:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8009c82:	f7ff ffb1 	bl	8009be8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c86:	2301      	movs	r3, #1
 8009c88:	602b      	str	r3, [r5, #0]
 8009c8a:	e7f6      	b.n	8009c7a <prvSampleTimeNow+0x16>
 8009c8c:	20002308 	.word	0x20002308

08009c90 <prvProcessExpiredTimer>:
{
 8009c90:	b570      	push	{r4, r5, r6, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	4606      	mov	r6, r0
 8009c96:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c98:	4917      	ldr	r1, [pc, #92]	; (8009cf8 <prvProcessExpiredTimer+0x68>)
 8009c9a:	6809      	ldr	r1, [r1, #0]
 8009c9c:	68c9      	ldr	r1, [r1, #12]
 8009c9e:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ca0:	1d20      	adds	r0, r4, #4
 8009ca2:	f7fe fd37 	bl	8008714 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ca6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 8009caa:	f01c 0f04 	tst.w	ip, #4
 8009cae:	d108      	bne.n	8009cc2 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cb0:	f02c 0c01 	bic.w	ip, ip, #1
 8009cb4:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cb8:	6a23      	ldr	r3, [r4, #32]
 8009cba:	4620      	mov	r0, r4
 8009cbc:	4798      	blx	r3
}
 8009cbe:	b002      	add	sp, #8
 8009cc0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009cc2:	69a1      	ldr	r1, [r4, #24]
 8009cc4:	4633      	mov	r3, r6
 8009cc6:	462a      	mov	r2, r5
 8009cc8:	4431      	add	r1, r6
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f7ff fe9a 	bl	8009a04 <prvInsertTimerInActiveList>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d0f1      	beq.n	8009cb8 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	9100      	str	r1, [sp, #0]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4632      	mov	r2, r6
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f7ff ff4d 	bl	8009b7c <xTimerGenericCommand>
			configASSERT( xResult );
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d1e8      	bne.n	8009cb8 <prvProcessExpiredTimer+0x28>
 8009ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	e7fe      	b.n	8009cf6 <prvProcessExpiredTimer+0x66>
 8009cf8:	200022d8 	.word	0x200022d8

08009cfc <prvProcessTimerOrBlockTask>:
{
 8009cfc:	b570      	push	{r4, r5, r6, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	4606      	mov	r6, r0
 8009d02:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8009d04:	f7ff fae6 	bl	80092d4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d08:	a801      	add	r0, sp, #4
 8009d0a:	f7ff ffab 	bl	8009c64 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009d0e:	9b01      	ldr	r3, [sp, #4]
 8009d10:	bb33      	cbnz	r3, 8009d60 <prvProcessTimerOrBlockTask+0x64>
 8009d12:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d14:	b90c      	cbnz	r4, 8009d1a <prvProcessTimerOrBlockTask+0x1e>
 8009d16:	42b0      	cmp	r0, r6
 8009d18:	d219      	bcs.n	8009d4e <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
 8009d1a:	b124      	cbz	r4, 8009d26 <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d1c:	4a12      	ldr	r2, [pc, #72]	; (8009d68 <prvProcessTimerOrBlockTask+0x6c>)
 8009d1e:	6812      	ldr	r2, [r2, #0]
 8009d20:	6812      	ldr	r2, [r2, #0]
 8009d22:	b9da      	cbnz	r2, 8009d5c <prvProcessTimerOrBlockTask+0x60>
 8009d24:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d26:	4622      	mov	r2, r4
 8009d28:	1b71      	subs	r1, r6, r5
 8009d2a:	4b10      	ldr	r3, [pc, #64]	; (8009d6c <prvProcessTimerOrBlockTask+0x70>)
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	f7ff f871 	bl	8008e14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d32:	f7ff fb75 	bl	8009420 <xTaskResumeAll>
 8009d36:	b9a8      	cbnz	r0, 8009d64 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8009d38:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d40:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	e00a      	b.n	8009d64 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8009d4e:	f7ff fb67 	bl	8009420 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d52:	4629      	mov	r1, r5
 8009d54:	4630      	mov	r0, r6
 8009d56:	f7ff ff9b 	bl	8009c90 <prvProcessExpiredTimer>
 8009d5a:	e003      	b.n	8009d64 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d5c:	461c      	mov	r4, r3
 8009d5e:	e7e2      	b.n	8009d26 <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 8009d60:	f7ff fb5e 	bl	8009420 <xTaskResumeAll>
}
 8009d64:	b002      	add	sp, #8
 8009d66:	bd70      	pop	{r4, r5, r6, pc}
 8009d68:	200022dc 	.word	0x200022dc
 8009d6c:	2000230c 	.word	0x2000230c

08009d70 <prvProcessReceivedCommands>:
{
 8009d70:	b510      	push	{r4, lr}
 8009d72:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d74:	e002      	b.n	8009d7c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d76:	9b04      	ldr	r3, [sp, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	da0f      	bge.n	8009d9c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	a904      	add	r1, sp, #16
 8009d80:	4b3d      	ldr	r3, [pc, #244]	; (8009e78 <prvProcessReceivedCommands+0x108>)
 8009d82:	6818      	ldr	r0, [r3, #0]
 8009d84:	f7fe ff4d 	bl	8008c22 <xQueueReceive>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d073      	beq.n	8009e74 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d8c:	9b04      	ldr	r3, [sp, #16]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	daf1      	bge.n	8009d76 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d92:	9907      	ldr	r1, [sp, #28]
 8009d94:	9806      	ldr	r0, [sp, #24]
 8009d96:	9b05      	ldr	r3, [sp, #20]
 8009d98:	4798      	blx	r3
 8009d9a:	e7ec      	b.n	8009d76 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d9c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d9e:	6963      	ldr	r3, [r4, #20]
 8009da0:	b113      	cbz	r3, 8009da8 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009da2:	1d20      	adds	r0, r4, #4
 8009da4:	f7fe fcb6 	bl	8008714 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009da8:	a803      	add	r0, sp, #12
 8009daa:	f7ff ff5b 	bl	8009c64 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009dae:	9b04      	ldr	r3, [sp, #16]
 8009db0:	2b09      	cmp	r3, #9
 8009db2:	d8e3      	bhi.n	8009d7c <prvProcessReceivedCommands+0xc>
 8009db4:	e8df f003 	tbb	[pc, r3]
 8009db8:	30050505 	.word	0x30050505
 8009dbc:	05055037 	.word	0x05055037
 8009dc0:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009dc2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009dce:	9b05      	ldr	r3, [sp, #20]
 8009dd0:	69a1      	ldr	r1, [r4, #24]
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	4419      	add	r1, r3
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f7ff fe14 	bl	8009a04 <prvInsertTimerInActiveList>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d0cd      	beq.n	8009d7c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009de0:	6a23      	ldr	r3, [r4, #32]
 8009de2:	4620      	mov	r0, r4
 8009de4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009de6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009dea:	f013 0f04 	tst.w	r3, #4
 8009dee:	d0c5      	beq.n	8009d7c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009df0:	69a2      	ldr	r2, [r4, #24]
 8009df2:	2100      	movs	r1, #0
 8009df4:	9100      	str	r1, [sp, #0]
 8009df6:	460b      	mov	r3, r1
 8009df8:	9805      	ldr	r0, [sp, #20]
 8009dfa:	4402      	add	r2, r0
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	f7ff febd 	bl	8009b7c <xTimerGenericCommand>
							configASSERT( xResult );
 8009e02:	2800      	cmp	r0, #0
 8009e04:	d1ba      	bne.n	8009d7c <prvProcessReceivedCommands+0xc>
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	e7fe      	b.n	8009e16 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e18:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009e1c:	f023 0301 	bic.w	r3, r3, #1
 8009e20:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8009e24:	e7aa      	b.n	8009d7c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e26:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009e2a:	f043 0301 	orr.w	r3, r3, #1
 8009e2e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e32:	9905      	ldr	r1, [sp, #20]
 8009e34:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e36:	b131      	cbz	r1, 8009e46 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e38:	4603      	mov	r3, r0
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	4401      	add	r1, r0
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f7ff fde0 	bl	8009a04 <prvInsertTimerInActiveList>
					break;
 8009e44:	e79a      	b.n	8009d7c <prvProcessReceivedCommands+0xc>
 8009e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4a:	f383 8811 	msr	BASEPRI, r3
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e56:	e7fe      	b.n	8009e56 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e58:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009e5c:	f013 0f02 	tst.w	r3, #2
 8009e60:	d004      	beq.n	8009e6c <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e62:	f023 0301 	bic.w	r3, r3, #1
 8009e66:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009e6a:	e787      	b.n	8009d7c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f000 fac7 	bl	800a400 <vPortFree>
 8009e72:	e783      	b.n	8009d7c <prvProcessReceivedCommands+0xc>
}
 8009e74:	b008      	add	sp, #32
 8009e76:	bd10      	pop	{r4, pc}
 8009e78:	2000230c 	.word	0x2000230c

08009e7c <prvTimerTask>:
{
 8009e7c:	b500      	push	{lr}
 8009e7e:	b083      	sub	sp, #12
		vApplicationDaemonTaskStartupHook();
 8009e80:	f7f6 fc21 	bl	80006c6 <vApplicationDaemonTaskStartupHook>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e84:	a801      	add	r0, sp, #4
 8009e86:	f7ff fdad 	bl	80099e4 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e8a:	9901      	ldr	r1, [sp, #4]
 8009e8c:	f7ff ff36 	bl	8009cfc <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8009e90:	f7ff ff6e 	bl	8009d70 <prvProcessReceivedCommands>
	for( ;; )
 8009e94:	e7f6      	b.n	8009e84 <prvTimerTask+0x8>
	...

08009e98 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009e98:	b510      	push	{r4, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	4614      	mov	r4, r2
 8009e9e:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009ea0:	f06f 0301 	mvn.w	r3, #1
 8009ea4:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009ea6:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009ea8:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009eaa:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009eac:	2300      	movs	r3, #0
 8009eae:	4669      	mov	r1, sp
 8009eb0:	4802      	ldr	r0, [pc, #8]	; (8009ebc <xTimerPendFunctionCallFromISR+0x24>)
 8009eb2:	6800      	ldr	r0, [r0, #0]
 8009eb4:	f7fe fe3e 	bl	8008b34 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8009eb8:	b004      	add	sp, #16
 8009eba:	bd10      	pop	{r4, pc}
 8009ebc:	2000230c 	.word	0x2000230c

08009ec0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ec0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ec6:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <prvTaskExitError+0x3c>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ece:	d008      	beq.n	8009ee2 <prvTaskExitError+0x22>
 8009ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	e7fe      	b.n	8009ee0 <prvTaskExitError+0x20>
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ef2:	9b01      	ldr	r3, [sp, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d0fc      	beq.n	8009ef2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ef8:	b002      	add	sp, #8
 8009efa:	4770      	bx	lr
 8009efc:	2000011c 	.word	0x2000011c

08009f00 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f00:	4808      	ldr	r0, [pc, #32]	; (8009f24 <prvPortStartFirstTask+0x24>)
 8009f02:	6800      	ldr	r0, [r0, #0]
 8009f04:	6800      	ldr	r0, [r0, #0]
 8009f06:	f380 8808 	msr	MSP, r0
 8009f0a:	f04f 0000 	mov.w	r0, #0
 8009f0e:	f380 8814 	msr	CONTROL, r0
 8009f12:	b662      	cpsie	i
 8009f14:	b661      	cpsie	f
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	df00      	svc	0
 8009f20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f22:	0000      	.short	0x0000
 8009f24:	e000ed08 	.word	0xe000ed08

08009f28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f38 <vPortEnableVFP+0x10>
 8009f2c:	6801      	ldr	r1, [r0, #0]
 8009f2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f32:	6001      	str	r1, [r0, #0]
 8009f34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f36:	0000      	.short	0x0000
 8009f38:	e000ed88 	.word	0xe000ed88

08009f3c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f40:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f44:	f021 0101 	bic.w	r1, r1, #1
 8009f48:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f4c:	4b05      	ldr	r3, [pc, #20]	; (8009f64 <pxPortInitialiseStack+0x28>)
 8009f4e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f52:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f56:	f06f 0302 	mvn.w	r3, #2
 8009f5a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8009f5e:	3844      	subs	r0, #68	; 0x44
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	08009ec1 	.word	0x08009ec1
	...

08009f70 <SVC_Handler>:
	__asm volatile (
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <pxCurrentTCBConst2>)
 8009f72:	6819      	ldr	r1, [r3, #0]
 8009f74:	6808      	ldr	r0, [r1, #0]
 8009f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7a:	f380 8809 	msr	PSP, r0
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f04f 0000 	mov.w	r0, #0
 8009f86:	f380 8811 	msr	BASEPRI, r0
 8009f8a:	4770      	bx	lr
 8009f8c:	f3af 8000 	nop.w

08009f90 <pxCurrentTCBConst2>:
 8009f90:	200021a4 	.word	0x200021a4

08009f94 <vPortEnterCritical>:
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009fa4:	4a0b      	ldr	r2, [pc, #44]	; (8009fd4 <vPortEnterCritical+0x40>)
 8009fa6:	6813      	ldr	r3, [r2, #0]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d000      	beq.n	8009fb2 <vPortEnterCritical+0x1e>
}
 8009fb0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fb2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009fb6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009fba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009fbe:	d0f7      	beq.n	8009fb0 <vPortEnterCritical+0x1c>
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	e7fe      	b.n	8009fd0 <vPortEnterCritical+0x3c>
 8009fd2:	bf00      	nop
 8009fd4:	2000011c 	.word	0x2000011c

08009fd8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009fd8:	4b09      	ldr	r3, [pc, #36]	; (800a000 <vPortExitCritical+0x28>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	b943      	cbnz	r3, 8009ff0 <vPortExitCritical+0x18>
 8009fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	e7fe      	b.n	8009fee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	4a03      	ldr	r2, [pc, #12]	; (800a000 <vPortExitCritical+0x28>)
 8009ff4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ff6:	b90b      	cbnz	r3, 8009ffc <vPortExitCritical+0x24>
	__asm volatile
 8009ff8:	f383 8811 	msr	BASEPRI, r3
}
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	2000011c 	.word	0x2000011c
	...

0800a010 <PendSV_Handler>:
	__asm volatile
 800a010:	f3ef 8009 	mrs	r0, PSP
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	4b15      	ldr	r3, [pc, #84]	; (800a070 <pxCurrentTCBConst>)
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	f01e 0f10 	tst.w	lr, #16
 800a020:	bf08      	it	eq
 800a022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02a:	6010      	str	r0, [r2, #0]
 800a02c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a030:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a034:	f380 8811 	msr	BASEPRI, r0
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f7ff fa96 	bl	8009570 <vTaskSwitchContext>
 800a044:	f04f 0000 	mov.w	r0, #0
 800a048:	f380 8811 	msr	BASEPRI, r0
 800a04c:	bc09      	pop	{r0, r3}
 800a04e:	6819      	ldr	r1, [r3, #0]
 800a050:	6808      	ldr	r0, [r1, #0]
 800a052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a056:	f01e 0f10 	tst.w	lr, #16
 800a05a:	bf08      	it	eq
 800a05c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a060:	f380 8809 	msr	PSP, r0
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	f3af 8000 	nop.w

0800a070 <pxCurrentTCBConst>:
 800a070:	200021a4 	.word	0x200021a4

0800a074 <SysTick_Handler>:
{
 800a074:	b508      	push	{r3, lr}
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a086:	f7ff f93b 	bl	8009300 <xTaskIncrementTick>
 800a08a:	b128      	cbz	r0, 800a098 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a08c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a094:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800a098:	2300      	movs	r3, #0
 800a09a:	f383 8811 	msr	BASEPRI, r3
}
 800a09e:	bd08      	pop	{r3, pc}

0800a0a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0a0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0a8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0aa:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <vPortSetupTimerInterrupt+0x20>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4905      	ldr	r1, [pc, #20]	; (800a0c4 <vPortSetupTimerInterrupt+0x24>)
 800a0b0:	fba1 1303 	umull	r1, r3, r1, r3
 800a0b4:	099b      	lsrs	r3, r3, #6
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0ba:	2307      	movs	r3, #7
 800a0bc:	6113      	str	r3, [r2, #16]
}
 800a0be:	4770      	bx	lr
 800a0c0:	20000000 	.word	0x20000000
 800a0c4:	10624dd3 	.word	0x10624dd3

0800a0c8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a0cc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800a0d0:	4b3d      	ldr	r3, [pc, #244]	; (800a1c8 <xPortStartScheduler+0x100>)
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d01c      	beq.n	800a110 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a0da:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800a0de:	4b3b      	ldr	r3, [pc, #236]	; (800a1cc <xPortStartScheduler+0x104>)
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d01e      	beq.n	800a122 <xPortStartScheduler+0x5a>
{
 800a0e4:	b530      	push	{r4, r5, lr}
 800a0e6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0e8:	4b39      	ldr	r3, [pc, #228]	; (800a1d0 <xPortStartScheduler+0x108>)
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	b2d2      	uxtb	r2, r2
 800a0ee:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0f0:	22ff      	movs	r2, #255	; 0xff
 800a0f2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a100:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a104:	4a33      	ldr	r2, [pc, #204]	; (800a1d4 <xPortStartScheduler+0x10c>)
 800a106:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a108:	4b33      	ldr	r3, [pc, #204]	; (800a1d8 <xPortStartScheduler+0x110>)
 800a10a:	2207      	movs	r2, #7
 800a10c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a10e:	e01b      	b.n	800a148 <xPortStartScheduler+0x80>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a120:	e7fe      	b.n	800a120 <xPortStartScheduler+0x58>
 800a122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a132:	e7fe      	b.n	800a132 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800a134:	4a28      	ldr	r2, [pc, #160]	; (800a1d8 <xPortStartScheduler+0x110>)
 800a136:	6813      	ldr	r3, [r2, #0]
 800a138:	3b01      	subs	r3, #1
 800a13a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a13c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a140:	005b      	lsls	r3, r3, #1
 800a142:	b2db      	uxtb	r3, r3
 800a144:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a148:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a14c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a150:	d1f0      	bne.n	800a134 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a152:	4b21      	ldr	r3, [pc, #132]	; (800a1d8 <xPortStartScheduler+0x110>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b03      	cmp	r3, #3
 800a158:	d008      	beq.n	800a16c <xPortStartScheduler+0xa4>
 800a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	e7fe      	b.n	800a16a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a16c:	021b      	lsls	r3, r3, #8
 800a16e:	4a1a      	ldr	r2, [pc, #104]	; (800a1d8 <xPortStartScheduler+0x110>)
 800a170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a172:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a176:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a178:	9b01      	ldr	r3, [sp, #4]
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	4a14      	ldr	r2, [pc, #80]	; (800a1d0 <xPortStartScheduler+0x108>)
 800a17e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a180:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800a184:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800a188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a18c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a190:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800a194:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a198:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800a19c:	f7ff ff80 	bl	800a0a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a1a0:	2500      	movs	r5, #0
 800a1a2:	4b0e      	ldr	r3, [pc, #56]	; (800a1dc <xPortStartScheduler+0x114>)
 800a1a4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800a1a6:	f7ff febf 	bl	8009f28 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1aa:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800a1ae:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a1b2:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800a1b6:	f7ff fea3 	bl	8009f00 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a1ba:	f7ff f9d9 	bl	8009570 <vTaskSwitchContext>
	prvTaskExitError();
 800a1be:	f7ff fe7f 	bl	8009ec0 <prvTaskExitError>
}
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	b003      	add	sp, #12
 800a1c6:	bd30      	pop	{r4, r5, pc}
 800a1c8:	410fc271 	.word	0x410fc271
 800a1cc:	410fc270 	.word	0x410fc270
 800a1d0:	e000e400 	.word	0xe000e400
 800a1d4:	20002314 	.word	0x20002314
 800a1d8:	20002318 	.word	0x20002318
 800a1dc:	2000011c 	.word	0x2000011c

0800a1e0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1e0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1e4:	2b0f      	cmp	r3, #15
 800a1e6:	d90f      	bls.n	800a208 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1e8:	4a11      	ldr	r2, [pc, #68]	; (800a230 <vPortValidateInterruptPriority+0x50>)
 800a1ea:	5c9b      	ldrb	r3, [r3, r2]
 800a1ec:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1ee:	4a11      	ldr	r2, [pc, #68]	; (800a234 <vPortValidateInterruptPriority+0x54>)
 800a1f0:	7812      	ldrb	r2, [r2, #0]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d908      	bls.n	800a208 <vPortValidateInterruptPriority+0x28>
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	e7fe      	b.n	800a206 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a208:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a20c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800a210:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a214:	4a08      	ldr	r2, [pc, #32]	; (800a238 <vPortValidateInterruptPriority+0x58>)
 800a216:	6812      	ldr	r2, [r2, #0]
 800a218:	4293      	cmp	r3, r2
 800a21a:	d908      	bls.n	800a22e <vPortValidateInterruptPriority+0x4e>
 800a21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	e7fe      	b.n	800a22c <vPortValidateInterruptPriority+0x4c>
	}
 800a22e:	4770      	bx	lr
 800a230:	e000e3f0 	.word	0xe000e3f0
 800a234:	20002314 	.word	0x20002314
 800a238:	20002318 	.word	0x20002318

0800a23c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a23c:	4a12      	ldr	r2, [pc, #72]	; (800a288 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a23e:	f012 0f07 	tst.w	r2, #7
 800a242:	d01e      	beq.n	800a282 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a244:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a246:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a24a:	f5c1 43a0 	rsb	r3, r1, #20480	; 0x5000
 800a24e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a250:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a252:	480e      	ldr	r0, [pc, #56]	; (800a28c <prvHeapInit+0x50>)
 800a254:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a256:	2100      	movs	r1, #0
 800a258:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a25a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800a25c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a25e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800a262:	480b      	ldr	r0, [pc, #44]	; (800a290 <prvHeapInit+0x54>)
 800a264:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800a266:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a268:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a26a:	1a99      	subs	r1, r3, r2
 800a26c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a26e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a270:	4b08      	ldr	r3, [pc, #32]	; (800a294 <prvHeapInit+0x58>)
 800a272:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a274:	4b08      	ldr	r3, [pc, #32]	; (800a298 <prvHeapInit+0x5c>)
 800a276:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a278:	4b08      	ldr	r3, [pc, #32]	; (800a29c <prvHeapInit+0x60>)
 800a27a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a27e:	601a      	str	r2, [r3, #0]
}
 800a280:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a282:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800a286:	e7e4      	b.n	800a252 <prvHeapInit+0x16>
 800a288:	20002320 	.word	0x20002320
 800a28c:	20007334 	.word	0x20007334
 800a290:	2000231c 	.word	0x2000231c
 800a294:	20007328 	.word	0x20007328
 800a298:	20007324 	.word	0x20007324
 800a29c:	20007320 	.word	0x20007320

0800a2a0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2a0:	4b16      	ldr	r3, [pc, #88]	; (800a2fc <prvInsertBlockIntoFreeList+0x5c>)
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4283      	cmp	r3, r0
 800a2a8:	d3fb      	bcc.n	800a2a2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2aa:	6851      	ldr	r1, [r2, #4]
 800a2ac:	eb02 0c01 	add.w	ip, r2, r1
 800a2b0:	4584      	cmp	ip, r0
 800a2b2:	d009      	beq.n	800a2c8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a2b4:	6841      	ldr	r1, [r0, #4]
 800a2b6:	eb00 0c01 	add.w	ip, r0, r1
 800a2ba:	4563      	cmp	r3, ip
 800a2bc:	d009      	beq.n	800a2d2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a2be:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a2c0:	4290      	cmp	r0, r2
 800a2c2:	d019      	beq.n	800a2f8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2c4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800a2c6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2c8:	6840      	ldr	r0, [r0, #4]
 800a2ca:	4401      	add	r1, r0
 800a2cc:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	e7f0      	b.n	800a2b4 <prvInsertBlockIntoFreeList+0x14>
{
 800a2d2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a2d4:	4c0a      	ldr	r4, [pc, #40]	; (800a300 <prvInsertBlockIntoFreeList+0x60>)
 800a2d6:	6824      	ldr	r4, [r4, #0]
 800a2d8:	42a3      	cmp	r3, r4
 800a2da:	d00b      	beq.n	800a2f4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	4419      	add	r1, r3
 800a2e0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a2e2:	6813      	ldr	r3, [r2, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800a2e8:	4290      	cmp	r0, r2
 800a2ea:	d000      	beq.n	800a2ee <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2ec:	6010      	str	r0, [r2, #0]
	}
}
 800a2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2f2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a2f4:	6004      	str	r4, [r0, #0]
 800a2f6:	e7f7      	b.n	800a2e8 <prvInsertBlockIntoFreeList+0x48>
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	20007334 	.word	0x20007334
 800a300:	2000231c 	.word	0x2000231c

0800a304 <pvPortMalloc>:
{
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800a308:	f7fe ffe4 	bl	80092d4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a30c:	4b36      	ldr	r3, [pc, #216]	; (800a3e8 <pvPortMalloc+0xe4>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	b1a3      	cbz	r3, 800a33c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a312:	4b36      	ldr	r3, [pc, #216]	; (800a3ec <pvPortMalloc+0xe8>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	421d      	tst	r5, r3
 800a318:	d14e      	bne.n	800a3b8 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800a31a:	b135      	cbz	r5, 800a32a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800a31c:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a31e:	f015 0f07 	tst.w	r5, #7
 800a322:	d002      	beq.n	800a32a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a324:	f025 0507 	bic.w	r5, r5, #7
 800a328:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a32a:	2d00      	cmp	r5, #0
 800a32c:	d046      	beq.n	800a3bc <pvPortMalloc+0xb8>
 800a32e:	4b30      	ldr	r3, [pc, #192]	; (800a3f0 <pvPortMalloc+0xec>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	42ab      	cmp	r3, r5
 800a334:	d351      	bcc.n	800a3da <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 800a336:	4a2f      	ldr	r2, [pc, #188]	; (800a3f4 <pvPortMalloc+0xf0>)
 800a338:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a33a:	e004      	b.n	800a346 <pvPortMalloc+0x42>
			prvHeapInit();
 800a33c:	f7ff ff7e 	bl	800a23c <prvHeapInit>
 800a340:	e7e7      	b.n	800a312 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800a342:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800a344:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a346:	6863      	ldr	r3, [r4, #4]
 800a348:	42ab      	cmp	r3, r5
 800a34a:	d202      	bcs.n	800a352 <pvPortMalloc+0x4e>
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1f7      	bne.n	800a342 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800a352:	4b25      	ldr	r3, [pc, #148]	; (800a3e8 <pvPortMalloc+0xe4>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	42a3      	cmp	r3, r4
 800a358:	d041      	beq.n	800a3de <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a35a:	6816      	ldr	r6, [r2, #0]
 800a35c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a362:	6863      	ldr	r3, [r4, #4]
 800a364:	1b5b      	subs	r3, r3, r5
 800a366:	2b10      	cmp	r3, #16
 800a368:	d910      	bls.n	800a38c <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a36a:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a36c:	f010 0f07 	tst.w	r0, #7
 800a370:	d008      	beq.n	800a384 <pvPortMalloc+0x80>
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	e7fe      	b.n	800a382 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a384:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a386:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a388:	f7ff ff8a 	bl	800a2a0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a38c:	6862      	ldr	r2, [r4, #4]
 800a38e:	4918      	ldr	r1, [pc, #96]	; (800a3f0 <pvPortMalloc+0xec>)
 800a390:	680b      	ldr	r3, [r1, #0]
 800a392:	1a9b      	subs	r3, r3, r2
 800a394:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a396:	4918      	ldr	r1, [pc, #96]	; (800a3f8 <pvPortMalloc+0xf4>)
 800a398:	6809      	ldr	r1, [r1, #0]
 800a39a:	428b      	cmp	r3, r1
 800a39c:	d201      	bcs.n	800a3a2 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a39e:	4916      	ldr	r1, [pc, #88]	; (800a3f8 <pvPortMalloc+0xf4>)
 800a3a0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3a2:	4b12      	ldr	r3, [pc, #72]	; (800a3ec <pvPortMalloc+0xe8>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800a3ae:	4a13      	ldr	r2, [pc, #76]	; (800a3fc <pvPortMalloc+0xf8>)
 800a3b0:	6813      	ldr	r3, [r2, #0]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	6013      	str	r3, [r2, #0]
 800a3b6:	e002      	b.n	800a3be <pvPortMalloc+0xba>
void *pvReturn = NULL;
 800a3b8:	2600      	movs	r6, #0
 800a3ba:	e000      	b.n	800a3be <pvPortMalloc+0xba>
 800a3bc:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800a3be:	f7ff f82f 	bl	8009420 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3c2:	f016 0f07 	tst.w	r6, #7
 800a3c6:	d00c      	beq.n	800a3e2 <pvPortMalloc+0xde>
 800a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	e7fe      	b.n	800a3d8 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 800a3da:	2600      	movs	r6, #0
 800a3dc:	e7ef      	b.n	800a3be <pvPortMalloc+0xba>
 800a3de:	2600      	movs	r6, #0
 800a3e0:	e7ed      	b.n	800a3be <pvPortMalloc+0xba>
}
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	bd70      	pop	{r4, r5, r6, pc}
 800a3e6:	bf00      	nop
 800a3e8:	2000231c 	.word	0x2000231c
 800a3ec:	20007320 	.word	0x20007320
 800a3f0:	20007324 	.word	0x20007324
 800a3f4:	20007334 	.word	0x20007334
 800a3f8:	20007328 	.word	0x20007328
 800a3fc:	2000732c 	.word	0x2000732c

0800a400 <vPortFree>:
	if( pv != NULL )
 800a400:	2800      	cmp	r0, #0
 800a402:	d034      	beq.n	800a46e <vPortFree+0x6e>
{
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800a408:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a40c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a410:	4a17      	ldr	r2, [pc, #92]	; (800a470 <vPortFree+0x70>)
 800a412:	6812      	ldr	r2, [r2, #0]
 800a414:	4213      	tst	r3, r2
 800a416:	d108      	bne.n	800a42a <vPortFree+0x2a>
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	e7fe      	b.n	800a428 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a42a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a42e:	b141      	cbz	r1, 800a442 <vPortFree+0x42>
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	e7fe      	b.n	800a440 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a442:	ea23 0302 	bic.w	r3, r3, r2
 800a446:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a44a:	f7fe ff43 	bl	80092d4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a44e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800a452:	4a08      	ldr	r2, [pc, #32]	; (800a474 <vPortFree+0x74>)
 800a454:	6813      	ldr	r3, [r2, #0]
 800a456:	440b      	add	r3, r1
 800a458:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a45a:	4628      	mov	r0, r5
 800a45c:	f7ff ff20 	bl	800a2a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a460:	4a05      	ldr	r2, [pc, #20]	; (800a478 <vPortFree+0x78>)
 800a462:	6813      	ldr	r3, [r2, #0]
 800a464:	3301      	adds	r3, #1
 800a466:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800a468:	f7fe ffda 	bl	8009420 <xTaskResumeAll>
}
 800a46c:	bd38      	pop	{r3, r4, r5, pc}
 800a46e:	4770      	bx	lr
 800a470:	20007320 	.word	0x20007320
 800a474:	20007324 	.word	0x20007324
 800a478:	20007330 	.word	0x20007330

0800a47c <printf_debug_msg>:
   }
   return dlc;
}

static void printf_debug_msg(struct can_iso_tp_init_t *link, char *msg)
{
 800a47c:	b508      	push	{r3, lr}
   if (NULL != link->print_debug)
 800a47e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a480:	b10b      	cbz	r3, 800a486 <printf_debug_msg+0xa>
   {
      link->print_debug(msg);
 800a482:	4608      	mov	r0, r1
 800a484:	4798      	blx	r3
   }
}
 800a486:	bd08      	pop	{r3, pc}

0800a488 <rx_event_handle_poll>:
   tx_event_cf_frame(link);
   return 0;
}

static int rx_event_handle_poll(can_iso_tp_link_t_p link, unsigned int user_ms)
{
 800a488:	b570      	push	{r4, r5, r6, lr}
 800a48a:	4604      	mov	r4, r0
 800a48c:	460d      	mov	r5, r1
   if (link->rx_record.status == rx_wait_cf)
 800a48e:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800a492:	2b03      	cmp	r3, #3
 800a494:	d00d      	beq.n	800a4b2 <rx_event_handle_poll+0x2a>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_CR);
         }
         link->rx_record.status = rx_idle;
      }
   }
   if ((link->rx_record.status == rx_tx_fc_wait_confirm) || (link->rx_record.status == rx_tx_fc))
 800a496:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800a49a:	3b01      	subs	r3, #1
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d918      	bls.n	800a4d4 <rx_event_handle_poll+0x4c>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_A);
         }
         link->rx_record.status = rx_idle;
      }
   }
   if (link->rx_record.status == rx_tx_fc)
 800a4a2:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d026      	beq.n	800a4f8 <rx_event_handle_poll+0x70>
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
      {
         link->rx_record.status = rx_tx_fc_wait_confirm;
      }
   }
   else if (link->rx_record.status == rx_tx_fc_overrun)
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	d02f      	beq.n	800a50e <rx_event_handle_poll+0x86>
      {
         link->rx_record.status = rx_tx_fc_overrun_wait_confirm;
      }
   }
   return 0;
}
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	bd70      	pop	{r4, r5, r6, pc}
      if ((user_ms - link->rx_record.last_msg_time_ms) > link->init_info.N_Cr)
 800a4b2:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
 800a4b6:	1acb      	subs	r3, r1, r3
 800a4b8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d9eb      	bls.n	800a496 <rx_event_handle_poll+0xe>
         if (link->init_info.N_USData_indication)
 800a4be:	6946      	ldr	r6, [r0, #20]
 800a4c0:	b126      	cbz	r6, 800a4cc <rx_event_handle_poll+0x44>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_CR);
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 800a4c8:	69c1      	ldr	r1, [r0, #28]
 800a4ca:	47b0      	blx	r6
         link->rx_record.status = rx_idle;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800a4d2:	e7e0      	b.n	800a496 <rx_event_handle_poll+0xe>
      if ((user_ms - link->rx_record.last_msg_time_ms) > link->init_info.N_Ar)
 800a4d4:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
 800a4d8:	1ae9      	subs	r1, r5, r3
 800a4da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a4dc:	4299      	cmp	r1, r3
 800a4de:	d9e0      	bls.n	800a4a2 <rx_event_handle_poll+0x1a>
         if (link->init_info.N_USData_indication)
 800a4e0:	6965      	ldr	r5, [r4, #20]
 800a4e2:	b12d      	cbz	r5, 800a4f0 <rx_event_handle_poll+0x68>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_A);
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
 800a4ea:	69e1      	ldr	r1, [r4, #28]
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	47a8      	blx	r5
         link->rx_record.status = rx_idle;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800a4f6:	e7d4      	b.n	800a4a2 <rx_event_handle_poll+0x1a>
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 800a4f8:	6923      	ldr	r3, [r4, #16]
 800a4fa:	f504 71a4 	add.w	r1, r4, #328	; 0x148
 800a4fe:	4620      	mov	r0, r4
 800a500:	4798      	blx	r3
 800a502:	2800      	cmp	r0, #0
 800a504:	d1d3      	bne.n	800a4ae <rx_event_handle_poll+0x26>
         link->rx_record.status = rx_tx_fc_wait_confirm;
 800a506:	2302      	movs	r3, #2
 800a508:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800a50c:	e7cf      	b.n	800a4ae <rx_event_handle_poll+0x26>
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 800a50e:	6923      	ldr	r3, [r4, #16]
 800a510:	f504 71a4 	add.w	r1, r4, #328	; 0x148
 800a514:	4620      	mov	r0, r4
 800a516:	4798      	blx	r3
 800a518:	2800      	cmp	r0, #0
 800a51a:	d1c8      	bne.n	800a4ae <rx_event_handle_poll+0x26>
         link->rx_record.status = rx_tx_fc_overrun_wait_confirm;
 800a51c:	2305      	movs	r3, #5
 800a51e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800a522:	e7c4      	b.n	800a4ae <rx_event_handle_poll+0x26>

0800a524 <rx_event_L_Data_Confirm>:

static int rx_event_L_Data_Confirm(can_iso_tp_link_t_p link, int8_t error)
{
   if (link->rx_record.status == rx_tx_fc_wait_confirm)
 800a524:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d003      	beq.n	800a534 <rx_event_L_Data_Confirm+0x10>
   {
      link->rx_record.status = rx_wait_cf;
   }
   else if (link->rx_record.status == rx_tx_fc_overrun_wait_confirm)
 800a52c:	2b05      	cmp	r3, #5
 800a52e:	d005      	beq.n	800a53c <rx_event_L_Data_Confirm+0x18>
   {
      link->rx_record.status = rx_idle;
   }
   return 0;
}
 800a530:	2000      	movs	r0, #0
 800a532:	4770      	bx	lr
      link->rx_record.status = rx_wait_cf;
 800a534:	2303      	movs	r3, #3
 800a536:	f880 3138 	strb.w	r3, [r0, #312]	; 0x138
 800a53a:	e7f9      	b.n	800a530 <rx_event_L_Data_Confirm+0xc>
      link->rx_record.status = rx_idle;
 800a53c:	2300      	movs	r3, #0
 800a53e:	f880 3138 	strb.w	r3, [r0, #312]	; 0x138
 800a542:	e7f5      	b.n	800a530 <rx_event_L_Data_Confirm+0xc>

0800a544 <rx_event_poll_handle>:
   tx_event_L_Data_indication(par->link, &par->rx_msg);
   par->handle = (event_handle_t)0;
}

static void rx_event_poll_handle(void *par_src)
{
 800a544:	b510      	push	{r4, lr}
 800a546:	4604      	mov	r4, r0
   struct time_poll_par_t *par = (struct time_poll_par_t *)par_src;
   rx_event_handle_poll(par->link, par->user_ms);
 800a548:	6881      	ldr	r1, [r0, #8]
 800a54a:	6840      	ldr	r0, [r0, #4]
 800a54c:	f7ff ff9c 	bl	800a488 <rx_event_handle_poll>
   par->handle = (event_handle_t)0;
 800a550:	2300      	movs	r3, #0
 800a552:	6023      	str	r3, [r4, #0]
}
 800a554:	bd10      	pop	{r4, pc}

0800a556 <rx_event_L_Data_Confirm_handle>:

static void rx_event_L_Data_Confirm_handle(void *par_src)
{
 800a556:	b508      	push	{r3, lr}
   struct L_Data_confirm_par_t *par = (struct L_Data_confirm_par_t *)par_src;
   int8_t error = par->error;
   par->handle = (event_handle_t)0;
 800a558:	2300      	movs	r3, #0
 800a55a:	6003      	str	r3, [r0, #0]
   rx_event_L_Data_Confirm(par->link, error);
 800a55c:	f990 1008 	ldrsb.w	r1, [r0, #8]
 800a560:	6840      	ldr	r0, [r0, #4]
 800a562:	f7ff ffdf 	bl	800a524 <rx_event_L_Data_Confirm>
}
 800a566:	bd08      	pop	{r3, pc}

0800a568 <event_manage_block_init>:
{
 800a568:	b510      	push	{r4, lr}
 800a56a:	4604      	mov	r4, r0
   mcu_lock_init(&event->lock);
 800a56c:	f000 fec1 	bl	800b2f2 <mcu_lock_init>
   if (!QueueInit(&event->fifo, event->fifo_data, sizeof(event->fifo_data) / sizeof(event->fifo_data[0])))
 800a570:	2203      	movs	r2, #3
 800a572:	1d21      	adds	r1, r4, #4
 800a574:	f104 0010 	add.w	r0, r4, #16
 800a578:	f000 fe68 	bl	800b24c <QueueInit>
 800a57c:	b108      	cbz	r0, 800a582 <event_manage_block_init+0x1a>
   return 0;
 800a57e:	2000      	movs	r0, #0
}
 800a580:	bd10      	pop	{r4, pc}
      return -1;
 800a582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a586:	e7fb      	b.n	800a580 <event_manage_block_init+0x18>

0800a588 <tx_event_cf_frame>:
{
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if (link->tx_record.status == tx_cf_wait_tx)
 800a58a:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
 800a58e:	2b06      	cmp	r3, #6
 800a590:	d001      	beq.n	800a596 <tx_event_cf_frame+0xe>
}
 800a592:	2000      	movs	r0, #0
 800a594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a596:	4604      	mov	r4, r0
      if (link->tx_record.rx_Stmin != 0)
 800a598:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
 800a59c:	b12b      	cbz	r3, 800a5aa <tx_event_cf_frame+0x22>
         if ((link->current_time_ms - link->tx_record.last_msg_time_ms) < link->tx_record.rx_Stmin)
 800a59e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a5a0:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800a5a4:	1a52      	subs	r2, r2, r1
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d3f3      	bcc.n	800a592 <tx_event_cf_frame+0xa>
         uint32_t txLen = link->tx_record.current_size - link->tx_record.current_tx_index;
 800a5aa:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a5ae:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a5b2:	1a53      	subs	r3, r2, r1
         if (txLen > (uint32_t)(dlc2len(link->init_info.TX_DLC) - 1))
 800a5b4:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800a5b8:	f007 000f 	and.w	r0, r7, #15
 800a5bc:	4d34      	ldr	r5, [pc, #208]	; (800a690 <tx_event_cf_frame+0x108>)
 800a5be:	5c2e      	ldrb	r6, [r5, r0]
         if (txLen > (uint32_t)(dlc2len(link->init_info.TX_DLC) - 1))
 800a5c0:	1e75      	subs	r5, r6, #1
 800a5c2:	429d      	cmp	r5, r3
 800a5c4:	d300      	bcc.n	800a5c8 <tx_event_cf_frame+0x40>
         uint32_t txLen = link->tx_record.current_size - link->tx_record.current_tx_index;
 800a5c6:	461d      	mov	r5, r3
         if (txLen == 0)
 800a5c8:	b955      	cbnz	r5, 800a5e0 <tx_event_cf_frame+0x58>
            link->tx_record.status = tx_idle;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
            if (link->init_info.N_USData_confirm)
 800a5d0:	69a5      	ldr	r5, [r4, #24]
 800a5d2:	2d00      	cmp	r5, #0
 800a5d4:	d0dd      	beq.n	800a592 <tx_event_cf_frame+0xa>
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_OK);
 800a5d6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a5da:	4620      	mov	r0, r4
 800a5dc:	47a8      	blx	r5
 800a5de:	e7d8      	b.n	800a592 <tx_event_cf_frame+0xa>
            link->tx_record.last_msg.id = link->init_info.tx_id;
 800a5e0:	6863      	ldr	r3, [r4, #4]
 800a5e2:	6423      	str	r3, [r4, #64]	; 0x40
            link->tx_record.last_msg.data[0] = 0x20 | (link->tx_record.current_tx_SN & 0xf);
 800a5e4:	f994 3098 	ldrsb.w	r3, [r4, #152]	; 0x98
 800a5e8:	f003 030f 	and.w	r3, r3, #15
 800a5ec:	f043 0320 	orr.w	r3, r3, #32
 800a5f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            memcpy(&link->tx_record.last_msg.data[1], &link->tx_record.current_playload[link->tx_record.current_tx_index], txLen);
 800a5f4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a5f8:	462a      	mov	r2, r5
 800a5fa:	4419      	add	r1, r3
 800a5fc:	f104 0046 	add.w	r0, r4, #70	; 0x46
 800a600:	f007 fc00 	bl	8011e04 <memcpy>
            if (dlc2len(link->init_info.TX_DLC) > (1 + txLen))
 800a604:	1c6b      	adds	r3, r5, #1
 800a606:	429e      	cmp	r6, r3
 800a608:	d820      	bhi.n	800a64c <tx_event_cf_frame+0xc4>
               link->tx_record.last_msg.dlc = link->init_info.TX_DLC;
 800a60a:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
            link->tx_record.current_tx_index += txLen;
 800a60e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a612:	442b      	add	r3, r5
 800a614:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            link->tx_record.status = tx_cf_wait_tx;
 800a618:	2306      	movs	r3, #6
 800a61a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
            link->tx_record.last_msg_time_ms = link->current_time_ms;
 800a61e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a620:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
            if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800a624:	6923      	ldr	r3, [r4, #16]
 800a626:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800a62a:	4620      	mov	r0, r4
 800a62c:	4798      	blx	r3
 800a62e:	bb58      	cbnz	r0, 800a688 <tx_event_cf_frame+0x100>
               link->tx_record.rx_BS_tx++;
 800a630:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800a634:	3301      	adds	r3, #1
 800a636:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
               link->tx_record.current_tx_SN++;
 800a63a:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800a63e:	3301      	adds	r3, #1
 800a640:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
               link->tx_record.status = tx_cf_wait_confirm;
 800a644:	2308      	movs	r3, #8
 800a646:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a64a:	e7a2      	b.n	800a592 <tx_event_cf_frame+0xa>
               memset(&link->tx_record.last_msg.data[1 + txLen], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 1 - txLen);
 800a64c:	f105 0341 	add.w	r3, r5, #65	; 0x41
 800a650:	18e0      	adds	r0, r4, r3
 800a652:	1b72      	subs	r2, r6, r5
 800a654:	3a01      	subs	r2, #1
 800a656:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800a65a:	3005      	adds	r0, #5
 800a65c:	f007 fb14 	bl	8011c88 <memset>
               link->tx_record.last_msg.dlc = lenToMinDlc(txLen + 1);
 800a660:	1c69      	adds	r1, r5, #1
 800a662:	b289      	uxth	r1, r1
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800a664:	2300      	movs	r3, #0
 800a666:	2b10      	cmp	r3, #16
 800a668:	d805      	bhi.n	800a676 <tx_event_cf_frame+0xee>
      if (len <= dlc_len_table[dlc])
 800a66a:	4a09      	ldr	r2, [pc, #36]	; (800a690 <tx_event_cf_frame+0x108>)
 800a66c:	5cd2      	ldrb	r2, [r2, r3]
 800a66e:	4291      	cmp	r1, r2
 800a670:	d901      	bls.n	800a676 <tx_event_cf_frame+0xee>
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800a672:	3301      	adds	r3, #1
 800a674:	e7f7      	b.n	800a666 <tx_event_cf_frame+0xde>
               link->tx_record.last_msg.dlc = lenToMinDlc(txLen + 1);
 800a676:	b2db      	uxtb	r3, r3
 800a678:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
               if (link->tx_record.last_msg.dlc < 8)
 800a67c:	2b07      	cmp	r3, #7
 800a67e:	d8c6      	bhi.n	800a60e <tx_event_cf_frame+0x86>
                  link->tx_record.last_msg.dlc = 8;
 800a680:	2308      	movs	r3, #8
 800a682:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a686:	e7c2      	b.n	800a60e <tx_event_cf_frame+0x86>
               link->tx_record.status = tx_cf_wait_tx_retry;
 800a688:	2307      	movs	r3, #7
 800a68a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a68e:	e780      	b.n	800a592 <tx_event_cf_frame+0xa>
 800a690:	08013618 	.word	0x08013618

0800a694 <tx_event_poll>:
{
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4604      	mov	r4, r0
   if (link->tx_record.status != tx_idle)
 800a698:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
 800a69c:	b193      	cbz	r3, 800a6c4 <tx_event_poll+0x30>
      if ((user_ms - link->tx_record.last_msg_time_ms) > link->init_info.N_As)
 800a69e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800a6a2:	1a89      	subs	r1, r1, r2
 800a6a4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 800a6a6:	4291      	cmp	r1, r2
 800a6a8:	d918      	bls.n	800a6dc <tx_event_poll+0x48>
         if (link->init_info.N_USData_confirm)
 800a6aa:	6985      	ldr	r5, [r0, #24]
 800a6ac:	b13d      	cbz	r5, 800a6be <tx_event_poll+0x2a>
            if (link->tx_record.status == tx_wait_fc)
 800a6ae:	2b05      	cmp	r3, #5
 800a6b0:	d00d      	beq.n	800a6ce <tx_event_poll+0x3a>
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_TIMEOUT_A);
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a6b8:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800a6bc:	47a8      	blx	r5
         link->tx_record.status = tx_idle;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
   tx_event_cf_frame(link);
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f7ff ff5f 	bl	800a588 <tx_event_cf_frame>
}
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	bd38      	pop	{r3, r4, r5, pc}
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_TIMEOUT_BS);
 800a6ce:	2302      	movs	r3, #2
 800a6d0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a6d4:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800a6d8:	47a8      	blx	r5
 800a6da:	e7f0      	b.n	800a6be <tx_event_poll+0x2a>
      else if (link->tx_record.status == tx_sf_wait_tx)
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d017      	beq.n	800a710 <tx_event_poll+0x7c>
      else if (link->tx_record.status == tx_ff_wait_tx)
 800a6e0:	2b03      	cmp	r3, #3
 800a6e2:	d01f      	beq.n	800a724 <tx_event_poll+0x90>
      else if (link->tx_record.status == tx_cf_wait_tx_retry)
 800a6e4:	2b07      	cmp	r3, #7
 800a6e6:	d1ed      	bne.n	800a6c4 <tx_event_poll+0x30>
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800a6e8:	6903      	ldr	r3, [r0, #16]
 800a6ea:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800a6ee:	4798      	blx	r3
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d1e7      	bne.n	800a6c4 <tx_event_poll+0x30>
            link->tx_record.rx_BS_tx++;
 800a6f4:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
            link->tx_record.current_tx_SN++;
 800a6fe:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800a702:	3301      	adds	r3, #1
 800a704:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
            link->tx_record.status = tx_cf_wait_confirm;
 800a708:	2308      	movs	r3, #8
 800a70a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a70e:	e7d9      	b.n	800a6c4 <tx_event_poll+0x30>
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800a710:	6903      	ldr	r3, [r0, #16]
 800a712:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800a716:	4798      	blx	r3
 800a718:	2800      	cmp	r0, #0
 800a71a:	d1d3      	bne.n	800a6c4 <tx_event_poll+0x30>
            link->tx_record.status = tx_sf_wait_confirm;
 800a71c:	2302      	movs	r3, #2
 800a71e:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a722:	e7cf      	b.n	800a6c4 <tx_event_poll+0x30>
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800a724:	6903      	ldr	r3, [r0, #16]
 800a726:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800a72a:	4798      	blx	r3
 800a72c:	2800      	cmp	r0, #0
 800a72e:	d1c9      	bne.n	800a6c4 <tx_event_poll+0x30>
            link->tx_record.status = tx_ff_wait_confirm;
 800a730:	2304      	movs	r3, #4
 800a732:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a736:	e7c5      	b.n	800a6c4 <tx_event_poll+0x30>

0800a738 <tx_event_poll_handle>:
{
 800a738:	b510      	push	{r4, lr}
 800a73a:	4604      	mov	r4, r0
   tx_event_poll(par->link, par->user_ms);
 800a73c:	6881      	ldr	r1, [r0, #8]
 800a73e:	6840      	ldr	r0, [r0, #4]
 800a740:	f7ff ffa8 	bl	800a694 <tx_event_poll>
   par->handle = (event_handle_t)0;
 800a744:	2300      	movs	r3, #0
 800a746:	6023      	str	r3, [r4, #0]
}
 800a748:	bd10      	pop	{r4, pc}
	...

0800a74c <tx_event_L_Data_Confirm>:
{
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4604      	mov	r4, r0
   if (link->tx_record.status == tx_sf_wait_confirm)
 800a750:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
 800a754:	2b02      	cmp	r3, #2
 800a756:	d012      	beq.n	800a77e <tx_event_L_Data_Confirm+0x32>
   else if (link->tx_record.status == tx_ff_wait_confirm)
 800a758:	2b04      	cmp	r3, #4
 800a75a:	d025      	beq.n	800a7a8 <tx_event_L_Data_Confirm+0x5c>
   else if (link->tx_record.status == tx_cf_wait_confirm)
 800a75c:	2b08      	cmp	r3, #8
 800a75e:	d11a      	bne.n	800a796 <tx_event_L_Data_Confirm+0x4a>
      if (link->tx_record.rx_BS != 0)
 800a760:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
 800a764:	b11b      	cbz	r3, 800a76e <tx_event_L_Data_Confirm+0x22>
         if ((link->tx_record.rx_BS == link->tx_record.rx_BS_tx) && (link->tx_record.current_size != link->tx_record.current_tx_index))
 800a766:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d03b      	beq.n	800a7e6 <tx_event_L_Data_Confirm+0x9a>
      if (link->tx_record.status == tx_cf_wait_confirm)
 800a76e:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 800a772:	2b08      	cmp	r3, #8
 800a774:	d041      	beq.n	800a7fa <tx_event_L_Data_Confirm+0xae>
      tx_event_cf_frame(link);
 800a776:	4620      	mov	r0, r4
 800a778:	f7ff ff06 	bl	800a588 <tx_event_cf_frame>
 800a77c:	e00b      	b.n	800a796 <tx_event_L_Data_Confirm+0x4a>
      if (link->init_info.N_USData_confirm)
 800a77e:	6985      	ldr	r5, [r0, #24]
 800a780:	b135      	cbz	r5, 800a790 <tx_event_L_Data_Confirm+0x44>
         if (0 == error)
 800a782:	b951      	cbnz	r1, 800a79a <tx_event_L_Data_Confirm+0x4e>
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_OK);
 800a784:	2300      	movs	r3, #0
 800a786:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a78a:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800a78e:	47a8      	blx	r5
      link->tx_record.status = tx_idle;
 800a790:	2300      	movs	r3, #0
 800a792:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
}
 800a796:	2000      	movs	r0, #0
 800a798:	bd38      	pop	{r3, r4, r5, pc}
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_ERROR);
 800a79a:	2309      	movs	r3, #9
 800a79c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a7a0:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800a7a4:	47a8      	blx	r5
 800a7a6:	e7f3      	b.n	800a790 <tx_event_L_Data_Confirm+0x44>
      if (link->tx_record.current_size > 0xfff)
 800a7a8:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800a7ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7b0:	d30f      	bcc.n	800a7d2 <tx_event_L_Data_Confirm+0x86>
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 6;
 800a7b2:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800a7b6:	f003 030f 	and.w	r3, r3, #15
 800a7ba:	4a12      	ldr	r2, [pc, #72]	; (800a804 <tx_event_L_Data_Confirm+0xb8>)
 800a7bc:	5cd3      	ldrb	r3, [r2, r3]
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 6;
 800a7be:	3b06      	subs	r3, #6
 800a7c0:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      link->tx_record.current_tx_SN = 1;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      link->tx_record.status = tx_wait_fc;
 800a7ca:	2305      	movs	r3, #5
 800a7cc:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a7d0:	e7e1      	b.n	800a796 <tx_event_L_Data_Confirm+0x4a>
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 2;
 800a7d2:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800a7d6:	f003 030f 	and.w	r3, r3, #15
 800a7da:	4a0a      	ldr	r2, [pc, #40]	; (800a804 <tx_event_L_Data_Confirm+0xb8>)
 800a7dc:	5cd3      	ldrb	r3, [r2, r3]
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 2;
 800a7de:	3b02      	subs	r3, #2
 800a7e0:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800a7e4:	e7ee      	b.n	800a7c4 <tx_event_L_Data_Confirm+0x78>
         if ((link->tx_record.rx_BS == link->tx_record.rx_BS_tx) && (link->tx_record.current_size != link->tx_record.current_tx_index))
 800a7e6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a7ea:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d0bd      	beq.n	800a76e <tx_event_L_Data_Confirm+0x22>
            link->tx_record.status = tx_wait_fc;
 800a7f2:	2305      	movs	r3, #5
 800a7f4:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
 800a7f8:	e7b9      	b.n	800a76e <tx_event_L_Data_Confirm+0x22>
         link->tx_record.status = tx_cf_wait_tx;
 800a7fa:	2306      	movs	r3, #6
 800a7fc:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a800:	e7b9      	b.n	800a776 <tx_event_L_Data_Confirm+0x2a>
 800a802:	bf00      	nop
 800a804:	08013618 	.word	0x08013618

0800a808 <tx_event_L_Data_Confirm_handle>:
{
 800a808:	b508      	push	{r3, lr}
   par->handle = (event_handle_t)0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	6003      	str	r3, [r0, #0]
   tx_event_L_Data_Confirm(par->link, par->error);
 800a80e:	f990 1008 	ldrsb.w	r1, [r0, #8]
 800a812:	6840      	ldr	r0, [r0, #4]
 800a814:	f7ff ff9a 	bl	800a74c <tx_event_L_Data_Confirm>
}
 800a818:	bd08      	pop	{r3, pc}

0800a81a <tx_event_L_Data_indication>:
{
 800a81a:	b538      	push	{r3, r4, r5, lr}
 800a81c:	4604      	mov	r4, r0
   if (link->tx_record.status == tx_wait_fc)
 800a81e:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
 800a822:	2b05      	cmp	r3, #5
 800a824:	d004      	beq.n	800a830 <tx_event_L_Data_indication+0x16>
   tx_event_cf_frame(link);
 800a826:	4620      	mov	r0, r4
 800a828:	f7ff feae 	bl	800a588 <tx_event_cf_frame>
}
 800a82c:	2000      	movs	r0, #0
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
      if (rx_msg->data[0] != 0x31)
 800a830:	794b      	ldrb	r3, [r1, #5]
 800a832:	2b31      	cmp	r3, #49	; 0x31
 800a834:	d002      	beq.n	800a83c <tx_event_L_Data_indication+0x22>
         link->tx_record.N_WFT_cnt = 0;
 800a836:	2300      	movs	r3, #0
 800a838:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
      if (rx_msg->data[0] == 0x30)
 800a83c:	794b      	ldrb	r3, [r1, #5]
 800a83e:	2b30      	cmp	r3, #48	; 0x30
 800a840:	d010      	beq.n	800a864 <tx_event_L_Data_indication+0x4a>
      else if (rx_msg->data[0] == 0x32)
 800a842:	2b32      	cmp	r3, #50	; 0x32
 800a844:	d029      	beq.n	800a89a <tx_event_L_Data_indication+0x80>
      else if (rx_msg->data[0] == 0x31)
 800a846:	2b31      	cmp	r3, #49	; 0x31
 800a848:	d035      	beq.n	800a8b6 <tx_event_L_Data_indication+0x9c>
         if (link->init_info.N_USData_confirm)
 800a84a:	69a5      	ldr	r5, [r4, #24]
 800a84c:	b135      	cbz	r5, 800a85c <tx_event_L_Data_indication+0x42>
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_INVALID_FS);
 800a84e:	2305      	movs	r3, #5
 800a850:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a854:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a858:	4620      	mov	r0, r4
 800a85a:	47a8      	blx	r5
         link->tx_record.status = tx_idle;
 800a85c:	2300      	movs	r3, #0
 800a85e:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a862:	e7e0      	b.n	800a826 <tx_event_L_Data_indication+0xc>
         link->tx_record.status = tx_cf_wait_tx;
 800a864:	2306      	movs	r3, #6
 800a866:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
         link->tx_record.rx_BS = rx_msg->data[1];
 800a86a:	798b      	ldrb	r3, [r1, #6]
 800a86c:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
         link->tx_record.rx_BS_tx = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
         link->tx_record.rx_Stmin = rx_msg->data[2];
 800a876:	79cb      	ldrb	r3, [r1, #7]
 800a878:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
         if (link->tx_record.rx_Stmin > 0x7f)
 800a87c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a880:	d107      	bne.n	800a892 <tx_event_L_Data_indication+0x78>
         link->tx_record.last_msg_time_ms = link->current_time_ms - link->tx_record.rx_Stmin - 1;
 800a882:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a884:	f894 209b 	ldrb.w	r2, [r4, #155]	; 0x9b
 800a888:	1a9b      	subs	r3, r3, r2
 800a88a:	3b01      	subs	r3, #1
 800a88c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800a890:	e7c9      	b.n	800a826 <tx_event_L_Data_indication+0xc>
            link->tx_record.rx_Stmin = 1;
 800a892:	2301      	movs	r3, #1
 800a894:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 800a898:	e7f3      	b.n	800a882 <tx_event_L_Data_indication+0x68>
         link->tx_record.status = tx_idle;
 800a89a:	2300      	movs	r3, #0
 800a89c:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
         if (link->init_info.N_USData_confirm)
 800a8a0:	69a5      	ldr	r5, [r4, #24]
 800a8a2:	2d00      	cmp	r5, #0
 800a8a4:	d0bf      	beq.n	800a826 <tx_event_L_Data_indication+0xc>
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_BUFFER_OVFLW);
 800a8a6:	2308      	movs	r3, #8
 800a8a8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a8ac:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	47a8      	blx	r5
 800a8b4:	e7b7      	b.n	800a826 <tx_event_L_Data_indication+0xc>
         if (0 != link->init_info.N_WFTmax)
 800a8b6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800a8ba:	2a00      	cmp	r2, #0
 800a8bc:	d0b3      	beq.n	800a826 <tx_event_L_Data_indication+0xc>
            link->tx_record.N_WFT_cnt++;
 800a8be:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
            if (link->init_info.N_WFTmax <= link->tx_record.N_WFT_cnt)
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d8ab      	bhi.n	800a826 <tx_event_L_Data_indication+0xc>
               link->tx_record.N_WFT_cnt = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
               link->tx_record.status = tx_idle;
 800a8d4:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800a8d8:	e7a5      	b.n	800a826 <tx_event_L_Data_indication+0xc>

0800a8da <tx_event_L_Data_indication_handle>:
{
 800a8da:	b510      	push	{r4, lr}
 800a8dc:	4604      	mov	r4, r0
   tx_event_L_Data_indication(par->link, &par->rx_msg);
 800a8de:	f100 0108 	add.w	r1, r0, #8
 800a8e2:	6840      	ldr	r0, [r0, #4]
 800a8e4:	f7ff ff99 	bl	800a81a <tx_event_L_Data_indication>
   par->handle = (event_handle_t)0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	6023      	str	r3, [r4, #0]
}
 800a8ec:	bd10      	pop	{r4, pc}
	...

0800a8f0 <rx_event_L_Data_indication>:
{
 800a8f0:	b570      	push	{r4, r5, r6, lr}
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	460d      	mov	r5, r1
   if ((rx_msg->data[0] & 0xf0) == 0)
 800a8f6:	794b      	ldrb	r3, [r1, #5]
 800a8f8:	f013 02f0 	ands.w	r2, r3, #240	; 0xf0
 800a8fc:	d13e      	bne.n	800a97c <rx_event_L_Data_indication+0x8c>
      if (rx_msg->data[0] != 0)
 800a8fe:	b1f3      	cbz	r3, 800a93e <rx_event_L_Data_indication+0x4e>
         if ((rx_msg->dlc <= 8) && (rx_msg->data[0] <= 7))
 800a900:	790a      	ldrb	r2, [r1, #4]
 800a902:	2a08      	cmp	r2, #8
 800a904:	d83e      	bhi.n	800a984 <rx_event_L_Data_indication+0x94>
 800a906:	2b07      	cmp	r3, #7
 800a908:	d83c      	bhi.n	800a984 <rx_event_L_Data_indication+0x94>
   return dlc_len_table[dlc & 0xf];
 800a90a:	f002 020f 	and.w	r2, r2, #15
 800a90e:	499d      	ldr	r1, [pc, #628]	; (800ab84 <rx_event_L_Data_indication+0x294>)
 800a910:	5c8a      	ldrb	r2, [r1, r2]
            if (rx_len >= (1 + len))
 800a912:	4293      	cmp	r3, r2
 800a914:	d236      	bcs.n	800a984 <rx_event_L_Data_indication+0x94>
               if (link->init_info.N_USData_indication)
 800a916:	6946      	ldr	r6, [r0, #20]
 800a918:	2e00      	cmp	r6, #0
 800a91a:	d033      	beq.n	800a984 <rx_event_L_Data_indication+0x94>
                  if (link->rx_record.status != rx_idle)
 800a91c:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800a920:	b123      	cbz	r3, 800a92c <rx_event_L_Data_indication+0x3c>
                     link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_UNEXP_PDU);
 800a922:	2306      	movs	r3, #6
 800a924:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 800a928:	69c1      	ldr	r1, [r0, #28]
 800a92a:	47b0      	blx	r6
                  link->rx_record.status = rx_idle;
 800a92c:	2300      	movs	r3, #0
 800a92e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
                  link->init_info.N_USData_indication(link, &rx_msg->data[1], rx_msg->data[0], N_OK);
 800a932:	6966      	ldr	r6, [r4, #20]
 800a934:	796a      	ldrb	r2, [r5, #5]
 800a936:	1da9      	adds	r1, r5, #6
 800a938:	4620      	mov	r0, r4
 800a93a:	47b0      	blx	r6
 800a93c:	e022      	b.n	800a984 <rx_event_L_Data_indication+0x94>
         if (rx_msg->dlc > 8)
 800a93e:	7909      	ldrb	r1, [r1, #4]
 800a940:	2908      	cmp	r1, #8
 800a942:	d91f      	bls.n	800a984 <rx_event_L_Data_indication+0x94>
            uint8_t len = rx_msg->data[1];
 800a944:	79aa      	ldrb	r2, [r5, #6]
            if (len > 0)
 800a946:	b1ea      	cbz	r2, 800a984 <rx_event_L_Data_indication+0x94>
   return dlc_len_table[dlc & 0xf];
 800a948:	f001 030f 	and.w	r3, r1, #15
 800a94c:	488d      	ldr	r0, [pc, #564]	; (800ab84 <rx_event_L_Data_indication+0x294>)
 800a94e:	5cc3      	ldrb	r3, [r0, r3]
               if (rx_len >= (2 + len))
 800a950:	1c50      	adds	r0, r2, #1
 800a952:	4298      	cmp	r0, r3
 800a954:	da16      	bge.n	800a984 <rx_event_L_Data_indication+0x94>
                  if (lenToMinDlc(len + 2) == rx_msg->dlc)
 800a956:	f102 0c02 	add.w	ip, r2, #2
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800a95a:	2300      	movs	r3, #0
 800a95c:	2b10      	cmp	r3, #16
 800a95e:	d805      	bhi.n	800a96c <rx_event_L_Data_indication+0x7c>
      if (len <= dlc_len_table[dlc])
 800a960:	4888      	ldr	r0, [pc, #544]	; (800ab84 <rx_event_L_Data_indication+0x294>)
 800a962:	5cc0      	ldrb	r0, [r0, r3]
 800a964:	4584      	cmp	ip, r0
 800a966:	d901      	bls.n	800a96c <rx_event_L_Data_indication+0x7c>
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800a968:	3301      	adds	r3, #1
 800a96a:	e7f7      	b.n	800a95c <rx_event_L_Data_indication+0x6c>
                  if (lenToMinDlc(len + 2) == rx_msg->dlc)
 800a96c:	4299      	cmp	r1, r3
 800a96e:	d109      	bne.n	800a984 <rx_event_L_Data_indication+0x94>
                     link->init_info.N_USData_indication(link, &rx_msg->data[2], len, N_OK);
 800a970:	6966      	ldr	r6, [r4, #20]
 800a972:	2300      	movs	r3, #0
 800a974:	1de9      	adds	r1, r5, #7
 800a976:	4620      	mov	r0, r4
 800a978:	47b0      	blx	r6
 800a97a:	e003      	b.n	800a984 <rx_event_L_Data_indication+0x94>
   else if ((rx_msg->data[0] & 0xf0) == 0x10)
 800a97c:	2a10      	cmp	r2, #16
 800a97e:	d00b      	beq.n	800a998 <rx_event_L_Data_indication+0xa8>
   else if ((rx_msg->data[0] & 0xf0) == 0x20)
 800a980:	2a20      	cmp	r2, #32
 800a982:	d049      	beq.n	800aa18 <rx_event_L_Data_indication+0x128>
   if (link->rx_record.status == rx_tx_fc)
 800a984:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800a988:	2b01      	cmp	r3, #1
 800a98a:	f000 80a6 	beq.w	800aada <rx_event_L_Data_indication+0x1ea>
   else if (link->rx_record.status == rx_tx_fc_overrun)
 800a98e:	2b04      	cmp	r3, #4
 800a990:	f000 80cf 	beq.w	800ab32 <rx_event_L_Data_indication+0x242>
}
 800a994:	2000      	movs	r0, #0
 800a996:	bd70      	pop	{r4, r5, r6, pc}
      if (link->rx_record.status != rx_idle)
 800a998:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800a99c:	b12b      	cbz	r3, 800a9aa <rx_event_L_Data_indication+0xba>
         link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_UNEXP_PDU);
 800a99e:	6946      	ldr	r6, [r0, #20]
 800a9a0:	2306      	movs	r3, #6
 800a9a2:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 800a9a6:	69c1      	ldr	r1, [r0, #28]
 800a9a8:	47b0      	blx	r6
      link->rx_record.rx_len = (rx_msg->data[0] & 0xf) * 256 + rx_msg->data[1];
 800a9aa:	796a      	ldrb	r2, [r5, #5]
 800a9ac:	f002 020f 	and.w	r2, r2, #15
 800a9b0:	79ab      	ldrb	r3, [r5, #6]
 800a9b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a9b6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
      if (0 == link->rx_record.rx_len)
 800a9ba:	b9ab      	cbnz	r3, 800a9e8 <rx_event_L_Data_indication+0xf8>
         link->rx_record.rx_len = (((uint32_t)rx_msg->data[2]) << 24) + (((uint32_t)rx_msg->data[3]) << 16) + (((uint32_t)rx_msg->data[4]) << 8) + (((uint32_t)rx_msg->data[5]));
 800a9bc:	79ea      	ldrb	r2, [r5, #7]
 800a9be:	7a2b      	ldrb	r3, [r5, #8]
 800a9c0:	041b      	lsls	r3, r3, #16
 800a9c2:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 800a9c6:	7a6a      	ldrb	r2, [r5, #9]
 800a9c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a9cc:	7aaa      	ldrb	r2, [r5, #10]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
         rx_index_offset = 6;
 800a9d4:	2106      	movs	r1, #6
      if (link->rx_record.rx_len <= link->init_info.rx_buff_len)
 800a9d6:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
 800a9da:	6a23      	ldr	r3, [r4, #32]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d905      	bls.n	800a9ec <rx_event_L_Data_indication+0xfc>
         link->rx_record.status = rx_tx_fc_overrun;
 800a9e0:	2304      	movs	r3, #4
 800a9e2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800a9e6:	e7cd      	b.n	800a984 <rx_event_L_Data_indication+0x94>
         rx_index_offset = 2;
 800a9e8:	2102      	movs	r1, #2
 800a9ea:	e7f4      	b.n	800a9d6 <rx_event_L_Data_indication+0xe6>
         link->rx_record.rx_index = dlc2len(rx_msg->dlc) - rx_index_offset;
 800a9ec:	792b      	ldrb	r3, [r5, #4]
   return dlc_len_table[dlc & 0xf];
 800a9ee:	f003 030f 	and.w	r3, r3, #15
 800a9f2:	4a64      	ldr	r2, [pc, #400]	; (800ab84 <rx_event_L_Data_indication+0x294>)
 800a9f4:	5cd2      	ldrb	r2, [r2, r3]
         link->rx_record.rx_index = dlc2len(rx_msg->dlc) - rx_index_offset;
 800a9f6:	1a52      	subs	r2, r2, r1
 800a9f8:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
         memcpy(link->init_info.rx_buff, &rx_msg->data[rx_index_offset], link->rx_record.rx_index);
 800a9fc:	4429      	add	r1, r5
 800a9fe:	3105      	adds	r1, #5
 800aa00:	69e0      	ldr	r0, [r4, #28]
 800aa02:	f007 f9ff 	bl	8011e04 <memcpy>
         link->rx_record.rx_SN = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
         link->rx_record.tx_BS_cnt = 0;
 800aa0c:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
         link->rx_record.status = rx_tx_fc;
 800aa10:	2301      	movs	r3, #1
 800aa12:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800aa16:	e7b5      	b.n	800a984 <rx_event_L_Data_indication+0x94>
      if (link->rx_record.status == rx_wait_cf)
 800aa18:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	d1b1      	bne.n	800a984 <rx_event_L_Data_indication+0x94>
         uint32_t rx_len = link->rx_record.rx_len - link->rx_record.rx_index;
 800aa20:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 800aa24:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 800aa28:	1a11      	subs	r1, r2, r0
         if (rx_len > (uint32_t)(dlc2len(rx_msg->dlc) - 1))
 800aa2a:	792b      	ldrb	r3, [r5, #4]
   return dlc_len_table[dlc & 0xf];
 800aa2c:	f003 030f 	and.w	r3, r3, #15
 800aa30:	4e54      	ldr	r6, [pc, #336]	; (800ab84 <rx_event_L_Data_indication+0x294>)
 800aa32:	5cf6      	ldrb	r6, [r6, r3]
         if (rx_len > (uint32_t)(dlc2len(rx_msg->dlc) - 1))
 800aa34:	3e01      	subs	r6, #1
 800aa36:	428e      	cmp	r6, r1
 800aa38:	d300      	bcc.n	800aa3c <rx_event_L_Data_indication+0x14c>
         uint32_t rx_len = link->rx_record.rx_len - link->rx_record.rx_index;
 800aa3a:	460e      	mov	r6, r1
         link->rx_record.rx_SN++;
 800aa3c:	f894 3144 	ldrb.w	r3, [r4, #324]	; 0x144
 800aa40:	3301      	adds	r3, #1
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
         link->rx_record.last_msg_time_ms = link->current_time_ms;
 800aa48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800aa4a:	f8c4 1190 	str.w	r1, [r4, #400]	; 0x190
         if ((link->rx_record.rx_SN & 0xf) == (rx_msg->data[0] & 0xf))
 800aa4e:	7969      	ldrb	r1, [r5, #5]
 800aa50:	404b      	eors	r3, r1
 800aa52:	f013 0f0f 	tst.w	r3, #15
 800aa56:	d008      	beq.n	800aa6a <rx_event_L_Data_indication+0x17a>
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_WRONG_SN);
 800aa58:	6965      	ldr	r5, [r4, #20]
 800aa5a:	2304      	movs	r3, #4
 800aa5c:	69e1      	ldr	r1, [r4, #28]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	47a8      	blx	r5
            link->rx_record.status = rx_idle;
 800aa62:	2300      	movs	r3, #0
 800aa64:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800aa68:	e78c      	b.n	800a984 <rx_event_L_Data_indication+0x94>
            memcpy(&link->init_info.rx_buff[link->rx_record.rx_index], &rx_msg->data[1], rx_len);
 800aa6a:	69e3      	ldr	r3, [r4, #28]
 800aa6c:	4632      	mov	r2, r6
 800aa6e:	1da9      	adds	r1, r5, #6
 800aa70:	4418      	add	r0, r3
 800aa72:	f007 f9c7 	bl	8011e04 <memcpy>
            link->rx_record.rx_index += rx_len;
 800aa76:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800aa7a:	441e      	add	r6, r3
 800aa7c:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
            if (link->rx_record.status != rx_idle)
 800aa80:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f43f af7d 	beq.w	800a984 <rx_event_L_Data_indication+0x94>
               if (link->rx_record.rx_index >= link->rx_record.rx_len)
 800aa8a:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
 800aa8e:	4296      	cmp	r6, r2
 800aa90:	d309      	bcc.n	800aaa6 <rx_event_L_Data_indication+0x1b6>
                  if (link->init_info.N_USData_indication)
 800aa92:	6965      	ldr	r5, [r4, #20]
 800aa94:	b11d      	cbz	r5, 800aa9e <rx_event_L_Data_indication+0x1ae>
                     link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_OK);
 800aa96:	2300      	movs	r3, #0
 800aa98:	69e1      	ldr	r1, [r4, #28]
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	47a8      	blx	r5
                  link->rx_record.status = rx_idle;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800aaa4:	e76e      	b.n	800a984 <rx_event_L_Data_indication+0x94>
                  link->rx_record.tx_BS_cnt++;
 800aaa6:	f894 3145 	ldrb.w	r3, [r4, #325]	; 0x145
 800aaaa:	3301      	adds	r3, #1
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
                  if (link->init_info.FC_BS != 0)
 800aab2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800aab6:	2a00      	cmp	r2, #0
 800aab8:	f43f af64 	beq.w	800a984 <rx_event_L_Data_indication+0x94>
                     if ((link->rx_record.tx_BS_cnt % link->init_info.FC_BS) == 0)
 800aabc:	fbb3 f1f2 	udiv	r1, r3, r2
 800aac0:	fb02 3311 	mls	r3, r2, r1, r3
 800aac4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aac8:	f47f af5c 	bne.w	800a984 <rx_event_L_Data_indication+0x94>
                        link->rx_record.status = rx_tx_fc;
 800aacc:	2301      	movs	r3, #1
 800aace:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
                        link->rx_record.tx_BS_cnt = 0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 800aad8:	e754      	b.n	800a984 <rx_event_L_Data_indication+0x94>
      link->rx_record.last_msg.id = link->init_info.tx_id;
 800aada:	6863      	ldr	r3, [r4, #4]
 800aadc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
      link->rx_record.last_msg.data[0] = 0x30;
 800aae0:	2330      	movs	r3, #48	; 0x30
 800aae2:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
      link->rx_record.last_msg.data[1] = link->init_info.FC_BS;
 800aae6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800aaea:	f884 314e 	strb.w	r3, [r4, #334]	; 0x14e
      link->rx_record.last_msg.data[2] = link->init_info.STmin;
 800aaee:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800aaf2:	f884 314f 	strb.w	r3, [r4, #335]	; 0x14f
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 800aaf6:	f894 502f 	ldrb.w	r5, [r4, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800aafa:	f005 030f 	and.w	r3, r5, #15
 800aafe:	4a21      	ldr	r2, [pc, #132]	; (800ab84 <rx_event_L_Data_indication+0x294>)
 800ab00:	5cd2      	ldrb	r2, [r2, r3]
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 800ab02:	3a03      	subs	r2, #3
 800ab04:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800ab08:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800ab0c:	f007 f8bc 	bl	8011c88 <memset>
      link->rx_record.last_msg.dlc = link->init_info.TX_DLC;
 800ab10:	f884 514c 	strb.w	r5, [r4, #332]	; 0x14c
      link->rx_record.last_msg_time_ms = link->current_time_ms;
 800ab14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ab16:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 800ab1a:	6923      	ldr	r3, [r4, #16]
 800ab1c:	f504 71a4 	add.w	r1, r4, #328	; 0x148
 800ab20:	4620      	mov	r0, r4
 800ab22:	4798      	blx	r3
 800ab24:	2800      	cmp	r0, #0
 800ab26:	f47f af35 	bne.w	800a994 <rx_event_L_Data_indication+0xa4>
         link->rx_record.status = rx_tx_fc_wait_confirm;
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800ab30:	e730      	b.n	800a994 <rx_event_L_Data_indication+0xa4>
      link->rx_record.last_msg.id = link->init_info.tx_id;
 800ab32:	6863      	ldr	r3, [r4, #4]
 800ab34:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
      link->rx_record.last_msg.data[0] = 0x32;
 800ab38:	2332      	movs	r3, #50	; 0x32
 800ab3a:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
      link->rx_record.last_msg.data[1] = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	f884 314e 	strb.w	r3, [r4, #334]	; 0x14e
      link->rx_record.last_msg.data[2] = 0;
 800ab44:	f884 314f 	strb.w	r3, [r4, #335]	; 0x14f
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 800ab48:	f894 502f 	ldrb.w	r5, [r4, #47]	; 0x2f
   return dlc_len_table[dlc & 0xf];
 800ab4c:	f005 030f 	and.w	r3, r5, #15
 800ab50:	4a0c      	ldr	r2, [pc, #48]	; (800ab84 <rx_event_L_Data_indication+0x294>)
 800ab52:	5cd2      	ldrb	r2, [r2, r3]
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 800ab54:	3a03      	subs	r2, #3
 800ab56:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800ab5a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800ab5e:	f007 f893 	bl	8011c88 <memset>
      link->rx_record.last_msg.dlc = link->init_info.TX_DLC;
 800ab62:	f884 514c 	strb.w	r5, [r4, #332]	; 0x14c
      link->rx_record.last_msg_time_ms = link->current_time_ms;
 800ab66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ab68:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 800ab6c:	6923      	ldr	r3, [r4, #16]
 800ab6e:	f504 71a4 	add.w	r1, r4, #328	; 0x148
 800ab72:	4620      	mov	r0, r4
 800ab74:	4798      	blx	r3
 800ab76:	2800      	cmp	r0, #0
 800ab78:	f47f af0c 	bne.w	800a994 <rx_event_L_Data_indication+0xa4>
         link->rx_record.status = rx_tx_fc_overrun_wait_confirm;
 800ab7c:	2305      	movs	r3, #5
 800ab7e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800ab82:	e707      	b.n	800a994 <rx_event_L_Data_indication+0xa4>
 800ab84:	08013618 	.word	0x08013618

0800ab88 <rx_event_L_Data_indication_handle>:

static void rx_event_L_Data_indication_handle(void *par_src)
{
 800ab88:	b510      	push	{r4, lr}
 800ab8a:	4604      	mov	r4, r0
   struct L_Data_indication_par_t *par = (struct L_Data_indication_par_t *)par_src;
   rx_event_L_Data_indication(par->link, &par->rx_msg);
 800ab8c:	f100 0108 	add.w	r1, r0, #8
 800ab90:	6840      	ldr	r0, [r0, #4]
 800ab92:	f7ff fead 	bl	800a8f0 <rx_event_L_Data_indication>
   par->handle = (event_handle_t)0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	6023      	str	r3, [r4, #0]
}
 800ab9a:	bd10      	pop	{r4, pc}

0800ab9c <tx_event_N_USData_Request>:
{
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	4604      	mov	r4, r0
 800aba0:	4616      	mov	r6, r2
 800aba2:	461d      	mov	r5, r3
   if (link->init_info.TX_DLC > 8)
 800aba4:	f890 702f 	ldrb.w	r7, [r0, #47]	; 0x2f
 800aba8:	2f08      	cmp	r7, #8
 800abaa:	d914      	bls.n	800abd6 <tx_event_N_USData_Request+0x3a>
   return dlc_len_table[dlc & 0xf];
 800abac:	f007 030f 	and.w	r3, r7, #15
 800abb0:	4a5d      	ldr	r2, [pc, #372]	; (800ad28 <tx_event_N_USData_Request+0x18c>)
 800abb2:	5cd3      	ldrb	r3, [r2, r3]
      single_frame_max_len = dlc2len(link->init_info.TX_DLC) - 2;
 800abb4:	3b02      	subs	r3, #2
 800abb6:	b2db      	uxtb	r3, r3
   if (link->tx_record.status == tx_idle)
 800abb8:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 800abbc:	2a00      	cmp	r2, #0
 800abbe:	f040 80a5 	bne.w	800ad0c <tx_event_N_USData_Request+0x170>
      if (size <= single_frame_max_len)
 800abc2:	461a      	mov	r2, r3
 800abc4:	42ab      	cmp	r3, r5
 800abc6:	d353      	bcc.n	800ac70 <tx_event_N_USData_Request+0xd4>
         if (isFunction == 0)
 800abc8:	b939      	cbnz	r1, 800abda <tx_event_N_USData_Request+0x3e>
            link->tx_record.last_msg.id = link->init_info.tx_id;
 800abca:	6863      	ldr	r3, [r4, #4]
 800abcc:	6423      	str	r3, [r4, #64]	; 0x40
         if (size <= 7)
 800abce:	2d07      	cmp	r5, #7
 800abd0:	d90e      	bls.n	800abf0 <tx_event_N_USData_Request+0x54>
            for (i = 0; i < size; i++)
 800abd2:	2000      	movs	r0, #0
 800abd4:	e01f      	b.n	800ac16 <tx_event_N_USData_Request+0x7a>
   uint8_t single_frame_max_len = 7;
 800abd6:	2307      	movs	r3, #7
 800abd8:	e7ee      	b.n	800abb8 <tx_event_N_USData_Request+0x1c>
            link->tx_record.last_msg.id = link->init_info.funtion_id;
 800abda:	68e3      	ldr	r3, [r4, #12]
 800abdc:	6423      	str	r3, [r4, #64]	; 0x40
 800abde:	e7f6      	b.n	800abce <tx_event_N_USData_Request+0x32>
               link->tx_record.last_msg.data[i] = payload[i];
 800abe0:	5c31      	ldrb	r1, [r6, r0]
 800abe2:	1823      	adds	r3, r4, r0
 800abe4:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
            for (i = 0; i < size; i++)
 800abe8:	3001      	adds	r0, #1
 800abea:	42a8      	cmp	r0, r5
 800abec:	d3f8      	bcc.n	800abe0 <tx_event_N_USData_Request+0x44>
 800abee:	e007      	b.n	800ac00 <tx_event_N_USData_Request+0x64>
 800abf0:	2000      	movs	r0, #0
 800abf2:	e7fa      	b.n	800abea <tx_event_N_USData_Request+0x4e>
               link->tx_record.last_msg.data[i] = link->init_info.frame_pad;
 800abf4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800abf8:	1823      	adds	r3, r4, r0
 800abfa:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
            for (; i < single_frame_max_len; i++)
 800abfe:	3001      	adds	r0, #1
 800ac00:	4282      	cmp	r2, r0
 800ac02:	d8f7      	bhi.n	800abf4 <tx_event_N_USData_Request+0x58>
            link->tx_record.last_msg.dlc = 8;
 800ac04:	2308      	movs	r3, #8
 800ac06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ac0a:	e01c      	b.n	800ac46 <tx_event_N_USData_Request+0xaa>
               link->tx_record.last_msg.data[i] = payload[i];
 800ac0c:	5c31      	ldrb	r1, [r6, r0]
 800ac0e:	1823      	adds	r3, r4, r0
 800ac10:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
            for (i = 0; i < size; i++)
 800ac14:	3001      	adds	r0, #1
 800ac16:	42a8      	cmp	r0, r5
 800ac18:	d3f8      	bcc.n	800ac0c <tx_event_N_USData_Request+0x70>
 800ac1a:	e005      	b.n	800ac28 <tx_event_N_USData_Request+0x8c>
               link->tx_record.last_msg.data[i] = link->init_info.frame_pad;
 800ac1c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800ac20:	1823      	adds	r3, r4, r0
 800ac22:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
            for (; i < single_frame_max_len; i++)
 800ac26:	3001      	adds	r0, #1
 800ac28:	4282      	cmp	r2, r0
 800ac2a:	d8f7      	bhi.n	800ac1c <tx_event_N_USData_Request+0x80>
            link->tx_record.last_msg.dlc = lenToMinDlc(size + 2);
 800ac2c:	1ca9      	adds	r1, r5, #2
 800ac2e:	b289      	uxth	r1, r1
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800ac30:	2300      	movs	r3, #0
 800ac32:	2b10      	cmp	r3, #16
 800ac34:	d805      	bhi.n	800ac42 <tx_event_N_USData_Request+0xa6>
      if (len <= dlc_len_table[dlc])
 800ac36:	4a3c      	ldr	r2, [pc, #240]	; (800ad28 <tx_event_N_USData_Request+0x18c>)
 800ac38:	5cd2      	ldrb	r2, [r2, r3]
 800ac3a:	4291      	cmp	r1, r2
 800ac3c:	d901      	bls.n	800ac42 <tx_event_N_USData_Request+0xa6>
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800ac3e:	3301      	adds	r3, #1
 800ac40:	e7f7      	b.n	800ac32 <tx_event_N_USData_Request+0x96>
            link->tx_record.last_msg.dlc = lenToMinDlc(size + 2);
 800ac42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
         link->tx_record.status = tx_sf_wait_tx;
 800ac46:	2301      	movs	r3, #1
 800ac48:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
         link->tx_record.last_msg_time_ms = link->current_time_ms;
 800ac4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ac4e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
         link->tx_record.current_playload = payload;
 800ac52:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
         link->tx_record.current_size = size;
 800ac56:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800ac5a:	6923      	ldr	r3, [r4, #16]
 800ac5c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800ac60:	4620      	mov	r0, r4
 800ac62:	4798      	blx	r3
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d15c      	bne.n	800ad22 <tx_event_N_USData_Request+0x186>
            link->tx_record.status = tx_sf_wait_confirm;
 800ac68:	2302      	movs	r3, #2
 800ac6a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800ac6e:	e058      	b.n	800ad22 <tx_event_N_USData_Request+0x186>
         link->tx_record.N_WFT_cnt = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
         link->tx_record.last_msg.id = link->init_info.tx_id;
 800ac76:	6863      	ldr	r3, [r4, #4]
 800ac78:	6423      	str	r3, [r4, #64]	; 0x40
         if (size <= 0xfff)
 800ac7a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800ac7e:	d227      	bcs.n	800acd0 <tx_event_N_USData_Request+0x134>
            link->tx_record.last_msg.data[0] = 0x10 | ((uint8_t)(size >> 8));
 800ac80:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800ac84:	f043 0310 	orr.w	r3, r3, #16
 800ac88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            link->tx_record.last_msg.data[1] = (uint8_t)(size & 0xff);
 800ac8c:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
   return dlc_len_table[dlc & 0xf];
 800ac90:	f007 030f 	and.w	r3, r7, #15
 800ac94:	4a24      	ldr	r2, [pc, #144]	; (800ad28 <tx_event_N_USData_Request+0x18c>)
 800ac96:	5cd2      	ldrb	r2, [r2, r3]
            memcpy(&link->tx_record.last_msg.data[2], payload, dlc2len(link->init_info.TX_DLC) - 2);
 800ac98:	3a02      	subs	r2, #2
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	f104 0047 	add.w	r0, r4, #71	; 0x47
 800aca0:	f007 f8b0 	bl	8011e04 <memcpy>
         link->tx_record.last_msg.dlc = link->init_info.TX_DLC;
 800aca4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
         link->tx_record.status = tx_ff_wait_tx;
 800aca8:	2303      	movs	r3, #3
 800acaa:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
         link->tx_record.last_msg_time_ms = link->current_time_ms;
 800acae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800acb0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
         link->tx_record.current_playload = payload;
 800acb4:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
         link->tx_record.current_size = size;
 800acb8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 800acbc:	6923      	ldr	r3, [r4, #16]
 800acbe:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800acc2:	4620      	mov	r0, r4
 800acc4:	4798      	blx	r3
 800acc6:	bb60      	cbnz	r0, 800ad22 <tx_event_N_USData_Request+0x186>
            link->tx_record.status = tx_ff_wait_confirm;
 800acc8:	2304      	movs	r3, #4
 800acca:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800acce:	e028      	b.n	800ad22 <tx_event_N_USData_Request+0x186>
            link->tx_record.last_msg.data[0] = 0x10;
 800acd0:	2310      	movs	r3, #16
 800acd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            link->tx_record.last_msg.data[1] = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
            link->tx_record.last_msg.data[2] = (uint8_t)(size >> 24);
 800acdc:	0e2b      	lsrs	r3, r5, #24
 800acde:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
            link->tx_record.last_msg.data[3] = (uint8_t)(size >> 16);
 800ace2:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800ace6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
            link->tx_record.last_msg.data[4] = (uint8_t)(size >> 8);
 800acea:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800acee:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
            link->tx_record.last_msg.data[5] = (uint8_t)(size);
 800acf2:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
   return dlc_len_table[dlc & 0xf];
 800acf6:	f007 030f 	and.w	r3, r7, #15
 800acfa:	4a0b      	ldr	r2, [pc, #44]	; (800ad28 <tx_event_N_USData_Request+0x18c>)
 800acfc:	5cd2      	ldrb	r2, [r2, r3]
            memcpy(&link->tx_record.last_msg.data[6], payload, dlc2len(link->init_info.TX_DLC) - 6);
 800acfe:	3a06      	subs	r2, #6
 800ad00:	4631      	mov	r1, r6
 800ad02:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 800ad06:	f007 f87d 	bl	8011e04 <memcpy>
 800ad0a:	e7cb      	b.n	800aca4 <tx_event_N_USData_Request+0x108>
      printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when last request is not done\n");
 800ad0c:	4907      	ldr	r1, [pc, #28]	; (800ad2c <tx_event_N_USData_Request+0x190>)
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f7ff fbb4 	bl	800a47c <printf_debug_msg>
      if (link->init_info.N_USData_confirm)
 800ad14:	69a7      	ldr	r7, [r4, #24]
 800ad16:	b127      	cbz	r7, 800ad22 <tx_event_N_USData_Request+0x186>
         link->init_info.N_USData_confirm(link, payload, size, N_ERROR);
 800ad18:	2309      	movs	r3, #9
 800ad1a:	462a      	mov	r2, r5
 800ad1c:	4631      	mov	r1, r6
 800ad1e:	4620      	mov	r0, r4
 800ad20:	47b8      	blx	r7
}
 800ad22:	2000      	movs	r0, #0
 800ad24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad26:	bf00      	nop
 800ad28:	08013618 	.word	0x08013618
 800ad2c:	08013174 	.word	0x08013174

0800ad30 <tx_event_N_USData_Request_handle>:
{
 800ad30:	b510      	push	{r4, lr}
 800ad32:	4604      	mov	r4, r0
   tx_event_N_USData_Request(par->link, par->isFunction, par->payload, par->size);
 800ad34:	68c3      	ldr	r3, [r0, #12]
 800ad36:	6902      	ldr	r2, [r0, #16]
 800ad38:	7a01      	ldrb	r1, [r0, #8]
 800ad3a:	6840      	ldr	r0, [r0, #4]
 800ad3c:	f7ff ff2e 	bl	800ab9c <tx_event_N_USData_Request>
   par->handle = (event_handle_t)0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	6023      	str	r3, [r4, #0]
}
 800ad44:	bd10      	pop	{r4, pc}

0800ad46 <report_event_to_manage_block>:
{
 800ad46:	b530      	push	{r4, r5, lr}
 800ad48:	b083      	sub	sp, #12
 800ad4a:	4604      	mov	r4, r0
   if (QueueOperateOk != QueueIn(&task->fifo, (ElemType)par_with_handle))
 800ad4c:	f100 0510 	add.w	r5, r0, #16
 800ad50:	4628      	mov	r0, r5
 800ad52:	f000 fa89 	bl	800b268 <QueueIn>
 800ad56:	2802      	cmp	r0, #2
 800ad58:	d002      	beq.n	800ad60 <report_event_to_manage_block+0x1a>
   int res = OP_NOK;
 800ad5a:	2001      	movs	r0, #1
}
 800ad5c:	b003      	add	sp, #12
 800ad5e:	bd30      	pop	{r4, r5, pc}
      if (mcu_lock_try_lock(&task->lock))
 800ad60:	4620      	mov	r0, r4
 800ad62:	f000 fac9 	bl	800b2f8 <mcu_lock_try_lock>
 800ad66:	b180      	cbz	r0, 800ad8a <report_event_to_manage_block+0x44>
            if (QueueOperateOk != QueueOut(&task->fifo, (ElemType *)&par))
 800ad68:	a901      	add	r1, sp, #4
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	f000 fa9f 	bl	800b2ae <QueueOut>
 800ad70:	2802      	cmp	r0, #2
 800ad72:	d105      	bne.n	800ad80 <report_event_to_manage_block+0x3a>
               if (par->handle)
 800ad74:	9801      	ldr	r0, [sp, #4]
 800ad76:	6803      	ldr	r3, [r0, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d0f5      	beq.n	800ad68 <report_event_to_manage_block+0x22>
                  par->handle((void *)par);
 800ad7c:	4798      	blx	r3
         {
 800ad7e:	e7f3      	b.n	800ad68 <report_event_to_manage_block+0x22>
         mcu_lock_unlock(&task->lock);
 800ad80:	4620      	mov	r0, r4
 800ad82:	f000 fac9 	bl	800b318 <mcu_lock_unlock>
      res = OP_OK;
 800ad86:	2000      	movs	r0, #0
 800ad88:	e7e8      	b.n	800ad5c <report_event_to_manage_block+0x16>
 800ad8a:	2000      	movs	r0, #0
   return res;
 800ad8c:	e7e6      	b.n	800ad5c <report_event_to_manage_block+0x16>
	...

0800ad90 <dlc2len>:
   return dlc_len_table[dlc & 0xf];
 800ad90:	f000 000f 	and.w	r0, r0, #15
}
 800ad94:	4b01      	ldr	r3, [pc, #4]	; (800ad9c <dlc2len+0xc>)
 800ad96:	5c18      	ldrb	r0, [r3, r0]
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	08013618 	.word	0x08013618

0800ada0 <lenToMinDlc>:
{
 800ada0:	4602      	mov	r2, r0
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 800ada2:	2000      	movs	r0, #0
 800ada4:	e000      	b.n	800ada8 <lenToMinDlc+0x8>
 800ada6:	3001      	adds	r0, #1
 800ada8:	2810      	cmp	r0, #16
 800adaa:	d803      	bhi.n	800adb4 <lenToMinDlc+0x14>
      if (len <= dlc_len_table[dlc])
 800adac:	4b02      	ldr	r3, [pc, #8]	; (800adb8 <lenToMinDlc+0x18>)
 800adae:	5c1b      	ldrb	r3, [r3, r0]
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d3f8      	bcc.n	800ada6 <lenToMinDlc+0x6>
}
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	08013618 	.word	0x08013618

0800adbc <iso_can_tp_create>:

//---------------------call interface------------------------
int iso_can_tp_create(can_iso_tp_link_t_p link, struct can_iso_tp_init_t *init)
{
   if ((struct can_iso_tp_init_t *)0 == init)
 800adbc:	2900      	cmp	r1, #0
 800adbe:	f000 80a7 	beq.w	800af10 <iso_can_tp_create+0x154>
{
 800adc2:	b570      	push	{r4, r5, r6, lr}
 800adc4:	4605      	mov	r5, r0
 800adc6:	460c      	mov	r4, r1
   {
      return OP_NOK;
   }
   if ((can_iso_tp_link_t_p)0 == link)
 800adc8:	2800      	cmp	r0, #0
 800adca:	f000 80a3 	beq.w	800af14 <iso_can_tp_create+0x158>
   {
      return OP_NOK;
   }
   if ((uint8_t *)0 == init->rx_buff)
 800adce:	69cb      	ldr	r3, [r1, #28]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d04e      	beq.n	800ae72 <iso_can_tp_create+0xb6>
   {
      printf_debug_msg(init, MODULE_PRINT "null rx_buff\n");
      return OP_NOK;
   }
   if (init->rx_buff_len < 8)
 800add4:	6a0b      	ldr	r3, [r1, #32]
 800add6:	2b07      	cmp	r3, #7
 800add8:	d951      	bls.n	800ae7e <iso_can_tp_create+0xc2>
//   if (memcmp(&init->rx_id, &init->tx_id, sizeof(init->tx_id)) == 0)
//   {
//      printf_debug_msg(init, MODULE_PRINT "rx_id should not = tx_id\n");
//      return OP_NOK;
//   }
   if (memcmp(&init->funtion_id, &init->tx_id, sizeof(init->tx_id)) == 0)
 800adda:	f101 060c 	add.w	r6, r1, #12
 800adde:	2204      	movs	r2, #4
 800ade0:	4411      	add	r1, r2
 800ade2:	4630      	mov	r0, r6
 800ade4:	f006 ff40 	bl	8011c68 <memcmp>
 800ade8:	2800      	cmp	r0, #0
 800adea:	d04e      	beq.n	800ae8a <iso_can_tp_create+0xce>
   {
      printf_debug_msg(init, MODULE_PRINT "function_id should not = tx_id\n");
      return OP_NOK;
   }
   if (memcmp(&init->funtion_id, &init->rx_id, sizeof(init->tx_id)) == 0)
 800adec:	2204      	movs	r2, #4
 800adee:	f104 0108 	add.w	r1, r4, #8
 800adf2:	4630      	mov	r0, r6
 800adf4:	f006 ff38 	bl	8011c68 <memcmp>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d04c      	beq.n	800ae96 <iso_can_tp_create+0xda>
   {
      printf_debug_msg(init, MODULE_PRINT "function_id should not = rx_id\n");
      return OP_NOK;
   }
   if (init->tx_id.isRemote != 0)
 800adfc:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	db4e      	blt.n	800aea2 <iso_can_tp_create+0xe6>
   {
      printf_debug_msg(init, MODULE_PRINT "tx frame should not be remote frame\n");
      init->tx_id.isRemote = 0;
   }
   if (init->funtion_id.isRemote != 0)
 800ae04:	f994 300f 	ldrsb.w	r3, [r4, #15]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	db53      	blt.n	800aeb4 <iso_can_tp_create+0xf8>
   {
      printf_debug_msg(init, MODULE_PRINT "function frame should not be remote frame\n");
      init->funtion_id.isRemote = 0;
   }
   if (init->rx_id.isRemote != 0)
 800ae0c:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	db58      	blt.n	800aec6 <iso_can_tp_create+0x10a>
   {
      printf_debug_msg(init, MODULE_PRINT "rx frame should not be remote frame\n");
      init->rx_id.isRemote = 0;
   }
#ifdef SUPPORT_CAN_FD
   if (init->TX_DLC < 8)
 800ae14:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ae18:	2b07      	cmp	r3, #7
 800ae1a:	d95d      	bls.n	800aed8 <iso_can_tp_create+0x11c>
   {
      printf_debug_msg(init, MODULE_PRINT "TX_DLC can not less than 8\n");
      init->TX_DLC = 8;
   }
   if (init->TX_DLC > 0xf)
 800ae1c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ae20:	2b0f      	cmp	r3, #15
 800ae22:	d861      	bhi.n	800aee8 <iso_can_tp_create+0x12c>
   {
      printf_debug_msg(init, MODULE_PRINT "rx frame can not have can-fd frame, compile with maro SUPPORT_CAN_FD if you need can-fd support\n");
      return OP_NOK;
   }
#endif
   memset(link, 0, sizeof(struct can_iso_tp_link_t));
 800ae24:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f006 ff2c 	bl	8011c88 <memset>
   link->init_info = *init;
 800ae30:	46ac      	mov	ip, r5
 800ae32:	46a6      	mov	lr, r4
 800ae34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ae38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ae3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ae40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ae44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ae48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ae4c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ae50:	e88c 0003 	stmia.w	ip, {r0, r1}
   if (0 != event_manage_block_init(&link->rx_events.event_manage))
 800ae54:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc
 800ae58:	f7ff fb86 	bl	800a568 <event_manage_block_init>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d14b      	bne.n	800aef8 <iso_can_tp_create+0x13c>
   {
      printf_debug_msg(init, MODULE_PRINT "can not create rx_events manage block\n");
      return OP_NOK;
   }
   if (0 != event_manage_block_init(&link->tx_events.event_manage))
 800ae60:	f505 708e 	add.w	r0, r5, #284	; 0x11c
 800ae64:	f7ff fb80 	bl	800a568 <event_manage_block_init>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d14b      	bne.n	800af04 <iso_can_tp_create+0x148>
   {
      printf_debug_msg(init, MODULE_PRINT "can not create tx_events manage block\n");
      return OP_NOK;
   }
   SET_INIT_DONE_FLAG(link);
 800ae6c:	4b2a      	ldr	r3, [pc, #168]	; (800af18 <iso_can_tp_create+0x15c>)
 800ae6e:	63ab      	str	r3, [r5, #56]	; 0x38
   return OP_OK;
}
 800ae70:	bd70      	pop	{r4, r5, r6, pc}
      printf_debug_msg(init, MODULE_PRINT "null rx_buff\n");
 800ae72:	492a      	ldr	r1, [pc, #168]	; (800af1c <iso_can_tp_create+0x160>)
 800ae74:	4620      	mov	r0, r4
 800ae76:	f7ff fb01 	bl	800a47c <printf_debug_msg>
      return OP_NOK;
 800ae7a:	2001      	movs	r0, #1
 800ae7c:	e7f8      	b.n	800ae70 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "rx_buff_len should not less than 8\n");
 800ae7e:	4928      	ldr	r1, [pc, #160]	; (800af20 <iso_can_tp_create+0x164>)
 800ae80:	4620      	mov	r0, r4
 800ae82:	f7ff fafb 	bl	800a47c <printf_debug_msg>
      return OP_NOK;
 800ae86:	2001      	movs	r0, #1
 800ae88:	e7f2      	b.n	800ae70 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "function_id should not = tx_id\n");
 800ae8a:	4926      	ldr	r1, [pc, #152]	; (800af24 <iso_can_tp_create+0x168>)
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f7ff faf5 	bl	800a47c <printf_debug_msg>
      return OP_NOK;
 800ae92:	2001      	movs	r0, #1
 800ae94:	e7ec      	b.n	800ae70 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "function_id should not = rx_id\n");
 800ae96:	4924      	ldr	r1, [pc, #144]	; (800af28 <iso_can_tp_create+0x16c>)
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f7ff faef 	bl	800a47c <printf_debug_msg>
      return OP_NOK;
 800ae9e:	2001      	movs	r0, #1
 800aea0:	e7e6      	b.n	800ae70 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "tx frame should not be remote frame\n");
 800aea2:	4922      	ldr	r1, [pc, #136]	; (800af2c <iso_can_tp_create+0x170>)
 800aea4:	4620      	mov	r0, r4
 800aea6:	f7ff fae9 	bl	800a47c <printf_debug_msg>
      init->tx_id.isRemote = 0;
 800aeaa:	79e3      	ldrb	r3, [r4, #7]
 800aeac:	f36f 13c7 	bfc	r3, #7, #1
 800aeb0:	71e3      	strb	r3, [r4, #7]
 800aeb2:	e7a7      	b.n	800ae04 <iso_can_tp_create+0x48>
      printf_debug_msg(init, MODULE_PRINT "function frame should not be remote frame\n");
 800aeb4:	491e      	ldr	r1, [pc, #120]	; (800af30 <iso_can_tp_create+0x174>)
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f7ff fae0 	bl	800a47c <printf_debug_msg>
      init->funtion_id.isRemote = 0;
 800aebc:	7be3      	ldrb	r3, [r4, #15]
 800aebe:	f36f 13c7 	bfc	r3, #7, #1
 800aec2:	73e3      	strb	r3, [r4, #15]
 800aec4:	e7a2      	b.n	800ae0c <iso_can_tp_create+0x50>
      printf_debug_msg(init, MODULE_PRINT "rx frame should not be remote frame\n");
 800aec6:	491b      	ldr	r1, [pc, #108]	; (800af34 <iso_can_tp_create+0x178>)
 800aec8:	4620      	mov	r0, r4
 800aeca:	f7ff fad7 	bl	800a47c <printf_debug_msg>
      init->rx_id.isRemote = 0;
 800aece:	7ae3      	ldrb	r3, [r4, #11]
 800aed0:	f36f 13c7 	bfc	r3, #7, #1
 800aed4:	72e3      	strb	r3, [r4, #11]
 800aed6:	e79d      	b.n	800ae14 <iso_can_tp_create+0x58>
      printf_debug_msg(init, MODULE_PRINT "TX_DLC can not less than 8\n");
 800aed8:	4917      	ldr	r1, [pc, #92]	; (800af38 <iso_can_tp_create+0x17c>)
 800aeda:	4620      	mov	r0, r4
 800aedc:	f7ff face 	bl	800a47c <printf_debug_msg>
      init->TX_DLC = 8;
 800aee0:	2308      	movs	r3, #8
 800aee2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800aee6:	e799      	b.n	800ae1c <iso_can_tp_create+0x60>
      printf_debug_msg(init, MODULE_PRINT "TX_DLC can not more than 0xf\n");
 800aee8:	4914      	ldr	r1, [pc, #80]	; (800af3c <iso_can_tp_create+0x180>)
 800aeea:	4620      	mov	r0, r4
 800aeec:	f7ff fac6 	bl	800a47c <printf_debug_msg>
      init->TX_DLC = 0xf;
 800aef0:	230f      	movs	r3, #15
 800aef2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800aef6:	e795      	b.n	800ae24 <iso_can_tp_create+0x68>
      printf_debug_msg(init, MODULE_PRINT "can not create rx_events manage block\n");
 800aef8:	4911      	ldr	r1, [pc, #68]	; (800af40 <iso_can_tp_create+0x184>)
 800aefa:	4620      	mov	r0, r4
 800aefc:	f7ff fabe 	bl	800a47c <printf_debug_msg>
      return OP_NOK;
 800af00:	2001      	movs	r0, #1
 800af02:	e7b5      	b.n	800ae70 <iso_can_tp_create+0xb4>
      printf_debug_msg(init, MODULE_PRINT "can not create tx_events manage block\n");
 800af04:	490f      	ldr	r1, [pc, #60]	; (800af44 <iso_can_tp_create+0x188>)
 800af06:	4620      	mov	r0, r4
 800af08:	f7ff fab8 	bl	800a47c <printf_debug_msg>
      return OP_NOK;
 800af0c:	2001      	movs	r0, #1
 800af0e:	e7af      	b.n	800ae70 <iso_can_tp_create+0xb4>
      return OP_NOK;
 800af10:	2001      	movs	r0, #1
}
 800af12:	4770      	bx	lr
      return OP_NOK;
 800af14:	2001      	movs	r0, #1
 800af16:	e7ab      	b.n	800ae70 <iso_can_tp_create+0xb4>
 800af18:	74185295 	.word	0x74185295
 800af1c:	080131b8 	.word	0x080131b8
 800af20:	080131d4 	.word	0x080131d4
 800af24:	08013204 	.word	0x08013204
 800af28:	08013230 	.word	0x08013230
 800af2c:	0801325c 	.word	0x0801325c
 800af30:	08013290 	.word	0x08013290
 800af34:	080132c8 	.word	0x080132c8
 800af38:	080132fc 	.word	0x080132fc
 800af3c:	08013324 	.word	0x08013324
 800af40:	08013350 	.word	0x08013350
 800af44:	08013384 	.word	0x08013384

0800af48 <iso_can_tp_poll>:

void iso_can_tp_poll(can_iso_tp_link_t_p link, unsigned int user_ms)
{
 800af48:	b538      	push	{r3, r4, r5, lr}
   if (!CHECK_INIT_DONE_FLAG(link))
 800af4a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800af4c:	4b1e      	ldr	r3, [pc, #120]	; (800afc8 <iso_can_tp_poll+0x80>)
 800af4e:	429a      	cmp	r2, r3
 800af50:	d000      	beq.n	800af54 <iso_can_tp_poll+0xc>
   else
   {
      MCU_LOCK_EXIT_CRITICAL;
      printf_debug_msg(&link->init_info, "iso_can_tp_poll cannot insert new tx evnent when last is not done.\n");
   }
}
 800af52:	bd38      	pop	{r3, r4, r5, pc}
 800af54:	4604      	mov	r4, r0
 800af56:	460d      	mov	r5, r1
   link->current_time_ms = user_ms;
 800af58:	63c1      	str	r1, [r0, #60]	; 0x3c
   MCU_LOCK_ENTER_CRITICAL;
 800af5a:	f7ff f81b 	bl	8009f94 <vPortEnterCritical>
   if (link->rx_events.time_poll_par.handle == (event_handle_t)0)
 800af5e:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 800af62:	b18b      	cbz	r3, 800af88 <iso_can_tp_poll+0x40>
      MCU_LOCK_EXIT_CRITICAL;
 800af64:	f7ff f838 	bl	8009fd8 <vPortExitCritical>
      printf_debug_msg(&link->init_info, "iso_can_tp_poll cannot insert new rx evnent when last is not done.\n");
 800af68:	4918      	ldr	r1, [pc, #96]	; (800afcc <iso_can_tp_poll+0x84>)
 800af6a:	4620      	mov	r0, r4
 800af6c:	f7ff fa86 	bl	800a47c <printf_debug_msg>
   MCU_LOCK_ENTER_CRITICAL;
 800af70:	f7ff f810 	bl	8009f94 <vPortEnterCritical>
   if (link->tx_events.time_poll_par.handle == (event_handle_t)0)
 800af74:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800af78:	b1b3      	cbz	r3, 800afa8 <iso_can_tp_poll+0x60>
      MCU_LOCK_EXIT_CRITICAL;
 800af7a:	f7ff f82d 	bl	8009fd8 <vPortExitCritical>
      printf_debug_msg(&link->init_info, "iso_can_tp_poll cannot insert new tx evnent when last is not done.\n");
 800af7e:	4914      	ldr	r1, [pc, #80]	; (800afd0 <iso_can_tp_poll+0x88>)
 800af80:	4620      	mov	r0, r4
 800af82:	f7ff fa7b 	bl	800a47c <printf_debug_msg>
 800af86:	e7e4      	b.n	800af52 <iso_can_tp_poll+0xa>
      link->rx_events.time_poll_par.handle = rx_event_poll_handle;
 800af88:	4b12      	ldr	r3, [pc, #72]	; (800afd4 <iso_can_tp_poll+0x8c>)
 800af8a:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
      MCU_LOCK_EXIT_CRITICAL;
 800af8e:	f7ff f823 	bl	8009fd8 <vPortExitCritical>
      link->rx_events.time_poll_par.link = link;
 800af92:	f8c4 41f4 	str.w	r4, [r4, #500]	; 0x1f4
      link->rx_events.time_poll_par.user_ms = user_ms;
 800af96:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
      report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.time_poll_par);
 800af9a:	f504 71f8 	add.w	r1, r4, #496	; 0x1f0
 800af9e:	f504 70fe 	add.w	r0, r4, #508	; 0x1fc
 800afa2:	f7ff fed0 	bl	800ad46 <report_event_to_manage_block>
 800afa6:	e7e3      	b.n	800af70 <iso_can_tp_poll+0x28>
      link->tx_events.time_poll_par.handle = tx_event_poll_handle;
 800afa8:	4b0b      	ldr	r3, [pc, #44]	; (800afd8 <iso_can_tp_poll+0x90>)
 800afaa:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
      MCU_LOCK_EXIT_CRITICAL;
 800afae:	f7ff f813 	bl	8009fd8 <vPortExitCritical>
      link->tx_events.time_poll_par.link = link;
 800afb2:	f8c4 4100 	str.w	r4, [r4, #256]	; 0x100
      link->tx_events.time_poll_par.user_ms = user_ms;
 800afb6:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
      report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.time_poll_par);
 800afba:	f104 01fc 	add.w	r1, r4, #252	; 0xfc
 800afbe:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 800afc2:	f7ff fec0 	bl	800ad46 <report_event_to_manage_block>
 800afc6:	e7c4      	b.n	800af52 <iso_can_tp_poll+0xa>
 800afc8:	74185295 	.word	0x74185295
 800afcc:	080133b8 	.word	0x080133b8
 800afd0:	080133fc 	.word	0x080133fc
 800afd4:	0800a545 	.word	0x0800a545
 800afd8:	0800a739 	.word	0x0800a739

0800afdc <iso_can_tp_L_Data_confirm>:

int iso_can_tp_L_Data_confirm(can_iso_tp_link_t_p link, const struct CAN_msg *msg, int8_t error)
{
   int res = OP_NOK;
   if ((can_iso_tp_link_t_p)0 == link)
 800afdc:	2800      	cmp	r0, #0
 800afde:	d065      	beq.n	800b0ac <iso_can_tp_L_Data_confirm+0xd0>
{
 800afe0:	b538      	push	{r3, r4, r5, lr}
 800afe2:	460b      	mov	r3, r1
 800afe4:	4614      	mov	r4, r2
 800afe6:	4605      	mov	r5, r0
   {
      return OP_NOK;
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 800afe8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800afea:	4a34      	ldr	r2, [pc, #208]	; (800b0bc <iso_can_tp_L_Data_confirm+0xe0>)
 800afec:	4291      	cmp	r1, r2
 800afee:	d15f      	bne.n	800b0b0 <iso_can_tp_L_Data_confirm+0xd4>
   {
      return OP_NOK;
   }
   if (msg != (const struct CAN_msg *)0)
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d05f      	beq.n	800b0b4 <iso_can_tp_L_Data_confirm+0xd8>
   {
      // RX task only focuses on sending completed flow control messages, other messages regardless, TX task does not care about sending completed flow control messages
      if ((msg->data[0] & 0xf0) == 0x30)
 800aff4:	795a      	ldrb	r2, [r3, #5]
 800aff6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800affa:	2a30      	cmp	r2, #48	; 0x30
 800affc:	d007      	beq.n	800b00e <iso_can_tp_L_Data_confirm+0x32>
         }
      }
      else
      {
         if ((msg->id.isExt == link->tx_record.last_msg.id.isExt) 
             && (msg->id.id == link->tx_record.last_msg.id.id))
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6c02      	ldr	r2, [r0, #64]	; 0x40
         if ((msg->id.isExt == link->tx_record.last_msg.id.isExt) 
 800b002:	4053      	eors	r3, r2
 800b004:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 800b008:	d033      	beq.n	800b072 <iso_can_tp_L_Data_confirm+0x96>
   int res = OP_NOK;
 800b00a:	2001      	movs	r0, #1
 800b00c:	e051      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
             && (msg->id.id == link->rx_record.last_msg.id.id) 
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
         if ((msg->id.isExt == link->rx_record.last_msg.id.isExt) 
 800b014:	404a      	eors	r2, r1
 800b016:	f032 4240 	bics.w	r2, r2, #3221225472	; 0xc0000000
 800b01a:	d14d      	bne.n	800b0b8 <iso_can_tp_L_Data_confirm+0xdc>
             && (0 == memcmp(msg->data, link->rx_record.last_msg.data, dlc2len(link->rx_record.last_msg.dlc))))
 800b01c:	f890 214c 	ldrb.w	r2, [r0, #332]	; 0x14c
   return dlc_len_table[dlc & 0xf];
 800b020:	f002 020f 	and.w	r2, r2, #15
             && (0 == memcmp(msg->data, link->rx_record.last_msg.data, dlc2len(link->rx_record.last_msg.dlc))))
 800b024:	4926      	ldr	r1, [pc, #152]	; (800b0c0 <iso_can_tp_L_Data_confirm+0xe4>)
 800b026:	5c8a      	ldrb	r2, [r1, r2]
 800b028:	f200 114d 	addw	r1, r0, #333	; 0x14d
 800b02c:	1d58      	adds	r0, r3, #5
 800b02e:	f006 fe1b 	bl	8011c68 <memcmp>
 800b032:	b108      	cbz	r0, 800b038 <iso_can_tp_L_Data_confirm+0x5c>
   int res = OP_NOK;
 800b034:	2001      	movs	r0, #1
 800b036:	e03c      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
            MCU_LOCK_ENTER_CRITICAL;
 800b038:	f7fe ffac 	bl	8009f94 <vPortEnterCritical>
            if (link->rx_events.L_Data_confirm_par.handle == (event_handle_t)0)
 800b03c:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
 800b040:	b13b      	cbz	r3, 800b052 <iso_can_tp_L_Data_confirm+0x76>
               MCU_LOCK_EXIT_CRITICAL;
 800b042:	f7fe ffc9 	bl	8009fd8 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_confirm cannot insert new rx evnent when last is not done.\n");
 800b046:	491f      	ldr	r1, [pc, #124]	; (800b0c4 <iso_can_tp_L_Data_confirm+0xe8>)
 800b048:	4628      	mov	r0, r5
 800b04a:	f7ff fa17 	bl	800a47c <printf_debug_msg>
   int res = OP_NOK;
 800b04e:	2001      	movs	r0, #1
 800b050:	e02f      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
               link->rx_events.L_Data_confirm_par.handle = rx_event_L_Data_Confirm_handle;
 800b052:	4b1d      	ldr	r3, [pc, #116]	; (800b0c8 <iso_can_tp_L_Data_confirm+0xec>)
 800b054:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
               MCU_LOCK_EXIT_CRITICAL;
 800b058:	f7fe ffbe 	bl	8009fd8 <vPortExitCritical>
               link->rx_events.L_Data_confirm_par.link = link;
 800b05c:	f8c5 51e8 	str.w	r5, [r5, #488]	; 0x1e8
               link->rx_events.L_Data_confirm_par.error = error;
 800b060:	f885 41ec 	strb.w	r4, [r5, #492]	; 0x1ec
               res = report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.L_Data_confirm_par);
 800b064:	f505 71f2 	add.w	r1, r5, #484	; 0x1e4
 800b068:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc
 800b06c:	f7ff fe6b 	bl	800ad46 <report_event_to_manage_block>
 800b070:	e01f      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
         {
            MCU_LOCK_ENTER_CRITICAL;
 800b072:	f7fe ff8f 	bl	8009f94 <vPortEnterCritical>
            if (link->tx_events.L_Data_confirm_par.handle == (event_handle_t)0)
 800b076:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 800b07a:	b13b      	cbz	r3, 800b08c <iso_can_tp_L_Data_confirm+0xb0>
               link->tx_events.L_Data_confirm_par.error = error;
               res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.L_Data_confirm_par);
            }
            else
            {
               MCU_LOCK_EXIT_CRITICAL;
 800b07c:	f7fe ffac 	bl	8009fd8 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_confirm cannot insert new tx event when last is not done.\n");
 800b080:	4912      	ldr	r1, [pc, #72]	; (800b0cc <iso_can_tp_L_Data_confirm+0xf0>)
 800b082:	4628      	mov	r0, r5
 800b084:	f7ff f9fa 	bl	800a47c <printf_debug_msg>
   int res = OP_NOK;
 800b088:	2001      	movs	r0, #1
 800b08a:	e012      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
               link->tx_events.L_Data_confirm_par.handle = tx_event_L_Data_Confirm_handle;
 800b08c:	4b10      	ldr	r3, [pc, #64]	; (800b0d0 <iso_can_tp_L_Data_confirm+0xf4>)
 800b08e:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
               MCU_LOCK_EXIT_CRITICAL;
 800b092:	f7fe ffa1 	bl	8009fd8 <vPortExitCritical>
               link->tx_events.L_Data_confirm_par.link = link;
 800b096:	f8c5 50f4 	str.w	r5, [r5, #244]	; 0xf4
               link->tx_events.L_Data_confirm_par.error = error;
 800b09a:	f885 40f8 	strb.w	r4, [r5, #248]	; 0xf8
               res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.L_Data_confirm_par);
 800b09e:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
 800b0a2:	f505 708e 	add.w	r0, r5, #284	; 0x11c
 800b0a6:	f7ff fe4e 	bl	800ad46 <report_event_to_manage_block>
 800b0aa:	e002      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
      return OP_NOK;
 800b0ac:	2001      	movs	r0, #1
   else
   {
      // no need to print info
   }
   return res;
}
 800b0ae:	4770      	bx	lr
      return OP_NOK;
 800b0b0:	2001      	movs	r0, #1
}
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
   int res = OP_NOK;
 800b0b4:	2001      	movs	r0, #1
 800b0b6:	e7fc      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
 800b0b8:	2001      	movs	r0, #1
 800b0ba:	e7fa      	b.n	800b0b2 <iso_can_tp_L_Data_confirm+0xd6>
 800b0bc:	74185295 	.word	0x74185295
 800b0c0:	08013618 	.word	0x08013618
 800b0c4:	08013440 	.word	0x08013440
 800b0c8:	0800a557 	.word	0x0800a557
 800b0cc:	08013484 	.word	0x08013484
 800b0d0:	0800a809 	.word	0x0800a809

0800b0d4 <iso_can_tp_L_Data_indication>:

int iso_can_tp_L_Data_indication(can_iso_tp_link_t_p link, const struct CAN_msg *msg)
{
   int res = OP_NOK;
   if ((can_iso_tp_link_t_p)0 == link)
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d05e      	beq.n	800b196 <iso_can_tp_L_Data_indication+0xc2>
{
 800b0d8:	b538      	push	{r3, r4, r5, lr}
 800b0da:	460c      	mov	r4, r1
 800b0dc:	4605      	mov	r5, r0
   {
      return OP_NOK;
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 800b0de:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b0e0:	4b32      	ldr	r3, [pc, #200]	; (800b1ac <iso_can_tp_L_Data_indication+0xd8>)
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d159      	bne.n	800b19a <iso_can_tp_L_Data_indication+0xc6>
   {
      return OP_NOK;
   }
   if (msg)
 800b0e6:	2900      	cmp	r1, #0
 800b0e8:	d059      	beq.n	800b19e <iso_can_tp_L_Data_indication+0xca>
   {
      // ignore remote frames
      if (msg->id.isRemote != 0)
 800b0ea:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	db57      	blt.n	800b1a2 <iso_can_tp_L_Data_indication+0xce>
      {
         printf_debug_msg(&link->init_info, "L_Data_indication cannot handle CANFD frame when SUPPORT_CAN_FD is not defined.\n");
         return OP_NOK;
      }
#endif
      if (((msg->id.isExt == link->init_info.rx_id.isExt) && (msg->id.id == link->init_info.rx_id.id)) 
 800b0f2:	680a      	ldr	r2, [r1, #0]
 800b0f4:	6883      	ldr	r3, [r0, #8]
 800b0f6:	4053      	eors	r3, r2
 800b0f8:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 800b0fc:	d004      	beq.n	800b108 <iso_can_tp_L_Data_indication+0x34>
          || ((msg->id.isExt == link->init_info.funtion_id.isExt) && (msg->id.id == link->init_info.funtion_id.id)))
 800b0fe:	68c3      	ldr	r3, [r0, #12]
 800b100:	405a      	eors	r2, r3
 800b102:	f032 4340 	bics.w	r3, r2, #3221225472	; 0xc0000000
 800b106:	d14e      	bne.n	800b1a6 <iso_can_tp_L_Data_indication+0xd2>
      {
         // TX task only pays attention to receiving flow control message, other receive message can be ignored, RX task no matter receiving flow control message
         if ((msg->data[0] & 0xf0) == 0x30)
 800b108:	7963      	ldrb	r3, [r4, #5]
 800b10a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b10e:	2b30      	cmp	r3, #48	; 0x30
 800b110:	d00c      	beq.n	800b12c <iso_can_tp_L_Data_indication+0x58>
               printf_debug_msg(&link->init_info, "L_Data_indication cannot insert new tx event when last is not done.\n");
            }
         }
         else
         {
            MCU_LOCK_ENTER_CRITICAL;
 800b112:	f7fe ff3f 	bl	8009f94 <vPortEnterCritical>
            if (link->rx_events.L_Data_indication_par.handle == (event_handle_t)0)
 800b116:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
 800b11a:	b343      	cbz	r3, 800b16e <iso_can_tp_L_Data_indication+0x9a>
               link->rx_events.L_Data_indication_par.rx_msg = *msg;
               res = report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.L_Data_indication_par);
            }
            else
            {
               MCU_LOCK_EXIT_CRITICAL;
 800b11c:	f7fe ff5c 	bl	8009fd8 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_indication cannot insert new rx event when last is not done.\n");
 800b120:	4923      	ldr	r1, [pc, #140]	; (800b1b0 <iso_can_tp_L_Data_indication+0xdc>)
 800b122:	4628      	mov	r0, r5
 800b124:	f7ff f9aa 	bl	800a47c <printf_debug_msg>
   int res = OP_NOK;
 800b128:	2001      	movs	r0, #1
 800b12a:	e037      	b.n	800b19c <iso_can_tp_L_Data_indication+0xc8>
            MCU_LOCK_ENTER_CRITICAL;
 800b12c:	f7fe ff32 	bl	8009f94 <vPortEnterCritical>
            if (link->tx_events.L_Data_indication_par.handle == (event_handle_t)0)
 800b130:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 800b134:	b13b      	cbz	r3, 800b146 <iso_can_tp_L_Data_indication+0x72>
               MCU_LOCK_EXIT_CRITICAL;
 800b136:	f7fe ff4f 	bl	8009fd8 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_indication cannot insert new tx event when last is not done.\n");
 800b13a:	491e      	ldr	r1, [pc, #120]	; (800b1b4 <iso_can_tp_L_Data_indication+0xe0>)
 800b13c:	4628      	mov	r0, r5
 800b13e:	f7ff f99d 	bl	800a47c <printf_debug_msg>
   int res = OP_NOK;
 800b142:	2001      	movs	r0, #1
 800b144:	e02a      	b.n	800b19c <iso_can_tp_L_Data_indication+0xc8>
               link->tx_events.L_Data_indication_par.handle = tx_event_L_Data_indication_handle;
 800b146:	4b1c      	ldr	r3, [pc, #112]	; (800b1b8 <iso_can_tp_L_Data_indication+0xe4>)
 800b148:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
               MCU_LOCK_EXIT_CRITICAL;
 800b14c:	f7fe ff44 	bl	8009fd8 <vPortExitCritical>
               link->tx_events.L_Data_indication_par.link = link;
 800b150:	f8c5 50a4 	str.w	r5, [r5, #164]	; 0xa4
               link->tx_events.L_Data_indication_par.rx_msg = *msg;
 800b154:	2248      	movs	r2, #72	; 0x48
 800b156:	4621      	mov	r1, r4
 800b158:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
 800b15c:	f006 fe52 	bl	8011e04 <memcpy>
               res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.L_Data_indication_par);
 800b160:	f105 01a0 	add.w	r1, r5, #160	; 0xa0
 800b164:	f505 708e 	add.w	r0, r5, #284	; 0x11c
 800b168:	f7ff fded 	bl	800ad46 <report_event_to_manage_block>
 800b16c:	e016      	b.n	800b19c <iso_can_tp_L_Data_indication+0xc8>
               link->rx_events.L_Data_indication_par.handle = rx_event_L_Data_indication_handle;
 800b16e:	4b13      	ldr	r3, [pc, #76]	; (800b1bc <iso_can_tp_L_Data_indication+0xe8>)
 800b170:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
               MCU_LOCK_EXIT_CRITICAL;
 800b174:	f7fe ff30 	bl	8009fd8 <vPortExitCritical>
               link->rx_events.L_Data_indication_par.link = link;
 800b178:	f8c5 5198 	str.w	r5, [r5, #408]	; 0x198
               link->rx_events.L_Data_indication_par.rx_msg = *msg;
 800b17c:	2248      	movs	r2, #72	; 0x48
 800b17e:	4621      	mov	r1, r4
 800b180:	f505 70ce 	add.w	r0, r5, #412	; 0x19c
 800b184:	f006 fe3e 	bl	8011e04 <memcpy>
               res = report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.L_Data_indication_par);
 800b188:	f505 71ca 	add.w	r1, r5, #404	; 0x194
 800b18c:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc
 800b190:	f7ff fdd9 	bl	800ad46 <report_event_to_manage_block>
 800b194:	e002      	b.n	800b19c <iso_can_tp_L_Data_indication+0xc8>
      return OP_NOK;
 800b196:	2001      	movs	r0, #1
            }
         }
      }
   }
   return res;
}
 800b198:	4770      	bx	lr
      return OP_NOK;
 800b19a:	2001      	movs	r0, #1
}
 800b19c:	bd38      	pop	{r3, r4, r5, pc}
   int res = OP_NOK;
 800b19e:	2001      	movs	r0, #1
 800b1a0:	e7fc      	b.n	800b19c <iso_can_tp_L_Data_indication+0xc8>
         return OP_NOK;
 800b1a2:	2001      	movs	r0, #1
 800b1a4:	e7fa      	b.n	800b19c <iso_can_tp_L_Data_indication+0xc8>
   int res = OP_NOK;
 800b1a6:	2001      	movs	r0, #1
 800b1a8:	e7f8      	b.n	800b19c <iso_can_tp_L_Data_indication+0xc8>
 800b1aa:	bf00      	nop
 800b1ac:	74185295 	.word	0x74185295
 800b1b0:	08013510 	.word	0x08013510
 800b1b4:	080134c8 	.word	0x080134c8
 800b1b8:	0800a8db 	.word	0x0800a8db
 800b1bc:	0800ab89 	.word	0x0800ab89

0800b1c0 <iso_can_tp_N_USData_request>:

int iso_can_tp_N_USData_request(can_iso_tp_link_t_p link, uint8_t isFunction, const uint8_t payload[], uint32_t size)
{
   int res = OP_NOK;
   
   if ((can_iso_tp_link_t_p)0 == link)
 800b1c0:	b3a8      	cbz	r0, 800b22e <iso_can_tp_N_USData_request+0x6e>
{
 800b1c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c4:	460f      	mov	r7, r1
 800b1c6:	4616      	mov	r6, r2
 800b1c8:	461d      	mov	r5, r3
 800b1ca:	4604      	mov	r4, r0
   {
      return OP_NOK;
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 800b1cc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b1ce:	4b1a      	ldr	r3, [pc, #104]	; (800b238 <iso_can_tp_N_USData_request+0x78>)
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d12e      	bne.n	800b232 <iso_can_tp_N_USData_request+0x72>
   {
      return OP_NOK;
   }
   if ((const uint8_t *)0 == payload)
 800b1d4:	b12e      	cbz	r6, 800b1e2 <iso_can_tp_N_USData_request+0x22>
      res = OP_NOK;
      printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when payload == (const uint8_t*)0\n");
   }
   else
   {
      if (0 == size)
 800b1d6:	b94d      	cbnz	r5, 800b1ec <iso_can_tp_N_USData_request+0x2c>
      {
         res = OP_NOK;
         printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when size == 0\n");
 800b1d8:	4918      	ldr	r1, [pc, #96]	; (800b23c <iso_can_tp_N_USData_request+0x7c>)
 800b1da:	f7ff f94f 	bl	800a47c <printf_debug_msg>
         res = OP_NOK;
 800b1de:	2001      	movs	r0, #1
 800b1e0:	e028      	b.n	800b234 <iso_can_tp_N_USData_request+0x74>
      printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when payload == (const uint8_t*)0\n");
 800b1e2:	4917      	ldr	r1, [pc, #92]	; (800b240 <iso_can_tp_N_USData_request+0x80>)
 800b1e4:	f7ff f94a 	bl	800a47c <printf_debug_msg>
      res = OP_NOK;
 800b1e8:	2001      	movs	r0, #1
 800b1ea:	e023      	b.n	800b234 <iso_can_tp_N_USData_request+0x74>
      }
      else
      {
         MCU_LOCK_ENTER_CRITICAL;
 800b1ec:	f7fe fed2 	bl	8009f94 <vPortEnterCritical>
         if (link->tx_events.N_USData_request_par.handle == (event_handle_t)0)
 800b1f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800b1f4:	b13b      	cbz	r3, 800b206 <iso_can_tp_N_USData_request+0x46>
            link->tx_events.N_USData_request_par.size = size;
            res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.N_USData_request_par);
         }
         else
         {
            MCU_LOCK_EXIT_CRITICAL;
 800b1f6:	f7fe feef 	bl	8009fd8 <vPortExitCritical>
            printf_debug_msg(&link->init_info, "N_USData_request cannot insert new tx event when last is not done.\n");
 800b1fa:	4912      	ldr	r1, [pc, #72]	; (800b244 <iso_can_tp_N_USData_request+0x84>)
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f7ff f93d 	bl	800a47c <printf_debug_msg>
   int res = OP_NOK;
 800b202:	2001      	movs	r0, #1
 800b204:	e016      	b.n	800b234 <iso_can_tp_N_USData_request+0x74>
            link->tx_events.N_USData_request_par.handle = tx_event_N_USData_Request_handle;
 800b206:	4b10      	ldr	r3, [pc, #64]	; (800b248 <iso_can_tp_N_USData_request+0x88>)
 800b208:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            MCU_LOCK_EXIT_CRITICAL;
 800b20c:	f7fe fee4 	bl	8009fd8 <vPortExitCritical>
            link->tx_events.N_USData_request_par.link = link;
 800b210:	f8c4 410c 	str.w	r4, [r4, #268]	; 0x10c
            link->tx_events.N_USData_request_par.isFunction = isFunction;
 800b214:	f884 7110 	strb.w	r7, [r4, #272]	; 0x110
            link->tx_events.N_USData_request_par.payload = payload;
 800b218:	f8c4 6118 	str.w	r6, [r4, #280]	; 0x118
            link->tx_events.N_USData_request_par.size = size;
 800b21c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
            res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.N_USData_request_par);
 800b220:	f504 7184 	add.w	r1, r4, #264	; 0x108
 800b224:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 800b228:	f7ff fd8d 	bl	800ad46 <report_event_to_manage_block>
 800b22c:	e002      	b.n	800b234 <iso_can_tp_N_USData_request+0x74>
      return OP_NOK;
 800b22e:	2001      	movs	r0, #1
         }
      }
   }
   return res;
}
 800b230:	4770      	bx	lr
      return OP_NOK;
 800b232:	2001      	movs	r0, #1
}
 800b234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b236:	bf00      	nop
 800b238:	74185295 	.word	0x74185295
 800b23c:	080135a0 	.word	0x080135a0
 800b240:	08013558 	.word	0x08013558
 800b244:	080135d4 	.word	0x080135d4
 800b248:	0800ad31 	.word	0x0800ad31

0800b24c <QueueInit>:
/*Queue Init*/
uint8_t
QueueInit(struct FifoQueue *Queue, ElemType *dat, uint16_t queue_size)
{
   uint8_t ret = (0 == 1);
   Queue->queue_size = queue_size;
 800b24c:	8082      	strh	r2, [r0, #4]
   Queue->dat = dat;
 800b24e:	6001      	str	r1, [r0, #0]
   if ((Queue->dat != (ElemType *)0) && (Queue->queue_size != 0))
 800b250:	b131      	cbz	r1, 800b260 <QueueInit+0x14>
 800b252:	b13a      	cbz	r2, 800b264 <QueueInit+0x18>
   {
      Queue->front = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	80c3      	strh	r3, [r0, #6]
      Queue->rear = 0;
 800b258:	8103      	strh	r3, [r0, #8]
      ;
      Queue->count = 0;
 800b25a:	8143      	strh	r3, [r0, #10]
      ret = (1 == 1);
 800b25c:	2001      	movs	r0, #1
 800b25e:	4770      	bx	lr
   uint8_t ret = (0 == 1);
 800b260:	2000      	movs	r0, #0
 800b262:	4770      	bx	lr
 800b264:	2000      	movs	r0, #0
   }
   return ret;
}
 800b266:	4770      	bx	lr

0800b268 <QueueIn>:

/* Queue In */
uint8_t
QueueIn(register struct FifoQueue *Queue, ElemType sdat)
{
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	4604      	mov	r4, r0
 800b26c:	460d      	mov	r5, r1
   MCU_LOCK_ENTER_CRITICAL;
 800b26e:	f7fe fe91 	bl	8009f94 <vPortEnterCritical>
   if ((Queue->front == Queue->rear) && (Queue->count == Queue->queue_size))
 800b272:	88e2      	ldrh	r2, [r4, #6]
 800b274:	8923      	ldrh	r3, [r4, #8]
 800b276:	429a      	cmp	r2, r3
 800b278:	d103      	bne.n	800b282 <QueueIn+0x1a>
 800b27a:	8961      	ldrh	r1, [r4, #10]
 800b27c:	88a2      	ldrh	r2, [r4, #4]
 800b27e:	4291      	cmp	r1, r2
 800b280:	d011      	beq.n	800b2a6 <QueueIn+0x3e>
      MCU_LOCK_EXIT_CRITICAL;
      return QueueFull;
   }
   else
   {
      Queue->dat[Queue->rear] = sdat;
 800b282:	6822      	ldr	r2, [r4, #0]
 800b284:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
      Queue->rear = (Queue->rear + 1) % Queue->queue_size;
 800b288:	8923      	ldrh	r3, [r4, #8]
 800b28a:	3301      	adds	r3, #1
 800b28c:	88a2      	ldrh	r2, [r4, #4]
 800b28e:	fb93 f1f2 	sdiv	r1, r3, r2
 800b292:	fb02 3311 	mls	r3, r2, r1, r3
 800b296:	8123      	strh	r3, [r4, #8]
      Queue->count = Queue->count + 1;
 800b298:	8963      	ldrh	r3, [r4, #10]
 800b29a:	3301      	adds	r3, #1
 800b29c:	8163      	strh	r3, [r4, #10]
      MCU_LOCK_EXIT_CRITICAL;
 800b29e:	f7fe fe9b 	bl	8009fd8 <vPortExitCritical>
      return QueueOperateOk;
 800b2a2:	2002      	movs	r0, #2
   }
}
 800b2a4:	bd38      	pop	{r3, r4, r5, pc}
      MCU_LOCK_EXIT_CRITICAL;
 800b2a6:	f7fe fe97 	bl	8009fd8 <vPortExitCritical>
      return QueueFull;
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	e7fa      	b.n	800b2a4 <QueueIn+0x3c>

0800b2ae <QueueOut>:

/* Queue Out*/
uint8_t
QueueOut(register struct FifoQueue *Queue, ElemType *sdat)
{
 800b2ae:	b538      	push	{r3, r4, r5, lr}
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	460d      	mov	r5, r1
   MCU_LOCK_ENTER_CRITICAL;
 800b2b4:	f7fe fe6e 	bl	8009f94 <vPortEnterCritical>
   if ((Queue->front == Queue->rear) && (Queue->count == 0))
 800b2b8:	88e3      	ldrh	r3, [r4, #6]
 800b2ba:	8922      	ldrh	r2, [r4, #8]
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d101      	bne.n	800b2c4 <QueueOut+0x16>
 800b2c0:	8962      	ldrh	r2, [r4, #10]
 800b2c2:	b192      	cbz	r2, 800b2ea <QueueOut+0x3c>
      MCU_LOCK_EXIT_CRITICAL;
      return QueueEmpty;
   }
   else
   {
      *sdat = Queue->dat[Queue->front];
 800b2c4:	6822      	ldr	r2, [r4, #0]
 800b2c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ca:	602b      	str	r3, [r5, #0]
      Queue->front = (Queue->front + 1) % Queue->queue_size;
 800b2cc:	88e3      	ldrh	r3, [r4, #6]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	88a2      	ldrh	r2, [r4, #4]
 800b2d2:	fb93 f1f2 	sdiv	r1, r3, r2
 800b2d6:	fb02 3311 	mls	r3, r2, r1, r3
 800b2da:	80e3      	strh	r3, [r4, #6]
      Queue->count = Queue->count - 1;
 800b2dc:	8963      	ldrh	r3, [r4, #10]
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	8163      	strh	r3, [r4, #10]
      MCU_LOCK_EXIT_CRITICAL;
 800b2e2:	f7fe fe79 	bl	8009fd8 <vPortExitCritical>
      return QueueOperateOk;
 800b2e6:	2002      	movs	r0, #2
   }
 800b2e8:	bd38      	pop	{r3, r4, r5, pc}
      MCU_LOCK_EXIT_CRITICAL;
 800b2ea:	f7fe fe75 	bl	8009fd8 <vPortExitCritical>
      return QueueEmpty;
 800b2ee:	2001      	movs	r0, #1
 800b2f0:	e7fa      	b.n	800b2e8 <QueueOut+0x3a>

0800b2f2 <mcu_lock_init>:
#include <stdint.h>
#include "can_iso_tp_mcu_lock.h"

void mcu_lock_init(mcu_lock_t *lock)
{
   *lock = 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	6003      	str	r3, [r0, #0]
}
 800b2f6:	4770      	bx	lr

0800b2f8 <mcu_lock_try_lock>:

unsigned int mcu_lock_try_lock(register mcu_lock_t *lock)
{
 800b2f8:	b538      	push	{r3, r4, r5, lr}
   register volatile cpu_status_t cpu_sr;
   register unsigned int ret = (0 == 1);
   if (0 == *lock)
 800b2fa:	6805      	ldr	r5, [r0, #0]
 800b2fc:	b115      	cbz	r5, 800b304 <mcu_lock_try_lock+0xc>
   register unsigned int ret = (0 == 1);
 800b2fe:	2500      	movs	r5, #0
         ret = (1 == 1);
      }
      MCU_LOCK_EXIT_CRITICAL;
   }
   return ret;
}
 800b300:	4628      	mov	r0, r5
 800b302:	bd38      	pop	{r3, r4, r5, pc}
 800b304:	4604      	mov	r4, r0
      MCU_LOCK_ENTER_CRITICAL;
 800b306:	f7fe fe45 	bl	8009f94 <vPortEnterCritical>
      if (0 == *lock)
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	b90b      	cbnz	r3, 800b312 <mcu_lock_try_lock+0x1a>
         *lock = 1;
 800b30e:	2501      	movs	r5, #1
 800b310:	6025      	str	r5, [r4, #0]
      MCU_LOCK_EXIT_CRITICAL;
 800b312:	f7fe fe61 	bl	8009fd8 <vPortExitCritical>
 800b316:	e7f3      	b.n	800b300 <mcu_lock_try_lock+0x8>

0800b318 <mcu_lock_unlock>:
      {
         *lock = false;
      }
      MCU_LOCK_EXIT_CRITICAL;
   }*/
   *lock = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	6003      	str	r3, [r0, #0]
 800b31c:	4770      	bx	lr
	...

0800b320 <lan9252_cmd_read>:
#include "lan9252.h"
#include "spiDma.h"

static void lan9252_cmd_read(uint16_t address)
{
 800b320:	b500      	push	{lr}
 800b322:	b083      	sub	sp, #12
   uint8_t command[4] = {0u};
 800b324:	2300      	movs	r3, #0
 800b326:	9301      	str	r3, [sp, #4]

   /* Prepare the data structure contains read command. */
   command[0] = (uint8_t)LAN9252_ESC_CMD_SERIAL_FAST_READ;
 800b328:	230b      	movs	r3, #11
 800b32a:	f88d 3004 	strb.w	r3, [sp, #4]
   command[1] = (uint8_t)((address >> 8u) & 0xFF);
 800b32e:	0a03      	lsrs	r3, r0, #8
 800b330:	f88d 3005 	strb.w	r3, [sp, #5]
   command[2] = (uint8_t)(address & 0xFF);
 800b334:	f88d 0006 	strb.w	r0, [sp, #6]
   command[3] = (uint8_t)(0x01);
 800b338:	2301      	movs	r3, #1
 800b33a:	f88d 3007 	strb.w	r3, [sp, #7]

   /* Send the command to Lan9252. */
   SpiDma_write(&spiDmaModule, (uint8_t *)&command[0], sizeof(command));
 800b33e:	2204      	movs	r2, #4
 800b340:	eb0d 0102 	add.w	r1, sp, r2
 800b344:	4802      	ldr	r0, [pc, #8]	; (800b350 <lan9252_cmd_read+0x30>)
 800b346:	f003 fc41 	bl	800ebcc <SpiDma_write>
}
 800b34a:	b003      	add	sp, #12
 800b34c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b350:	20000120 	.word	0x20000120

0800b354 <lan9252_cmd_write>:

static void lan9252_cmd_write(uint16_t address)
{
 800b354:	b500      	push	{lr}
 800b356:	b083      	sub	sp, #12
   uint8_t command[3] = {0u};
 800b358:	4b0b      	ldr	r3, [pc, #44]	; (800b388 <lan9252_cmd_write+0x34>)
 800b35a:	881b      	ldrh	r3, [r3, #0]
 800b35c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800b360:	2300      	movs	r3, #0
 800b362:	f88d 3006 	strb.w	r3, [sp, #6]

   /* Prepare the data structure contains read command. */
   command[0] = (uint8_t)LAN9252_ESC_CMD_SERIAL_WRITE;
 800b366:	2302      	movs	r3, #2
 800b368:	f88d 3004 	strb.w	r3, [sp, #4]
   command[1] = (uint8_t)((address >> 8u) & 0xFF);
 800b36c:	0a03      	lsrs	r3, r0, #8
 800b36e:	f88d 3005 	strb.w	r3, [sp, #5]
   command[2] = (uint8_t)(address & 0xFF);
 800b372:	f88d 0006 	strb.w	r0, [sp, #6]

   /* Send the command to tmc slave. */
   SpiDma_write(&spiDmaModule, (uint8_t *)&command[0], sizeof(command));
 800b376:	2203      	movs	r2, #3
 800b378:	a901      	add	r1, sp, #4
 800b37a:	4804      	ldr	r0, [pc, #16]	; (800b38c <lan9252_cmd_write+0x38>)
 800b37c:	f003 fc26 	bl	800ebcc <SpiDma_write>
}
 800b380:	b003      	add	sp, #12
 800b382:	f85d fb04 	ldr.w	pc, [sp], #4
 800b386:	bf00      	nop
 800b388:	08012e24 	.word	0x08012e24
 800b38c:	20000120 	.word	0x20000120

0800b390 <lan9252_Init>:

void lan9252_Init(void)
{
 800b390:	b508      	push	{r3, lr}
   /* Initialize the SPI DMA module. */
   SpiDma_Init(&spiDmaModule);
 800b392:	4802      	ldr	r0, [pc, #8]	; (800b39c <lan9252_Init+0xc>)
 800b394:	f003 fbf0 	bl	800eb78 <SpiDma_Init>

   /* Verify the connection with Lan9252. */

   /* Reset all register status of lan9252. */
}
 800b398:	bd08      	pop	{r3, pc}
 800b39a:	bf00      	nop
 800b39c:	20000120 	.word	0x20000120

0800b3a0 <lan9252_read_data>:
{
   SpiDma_Deinit(&spiDmaModule);
}

void lan9252_read_data(uint8_t *data_ptr, uint16_t address, uint16_t len)
{
 800b3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3a2:	b0a1      	sub	sp, #132	; 0x84
 800b3a4:	4605      	mov	r5, r0
 800b3a6:	460e      	mov	r6, r1
 800b3a8:	4614      	mov	r4, r2
   uint8_t iter = 0u;
   uint8_t tx_dummy_arr[128];

   /* Prepare the tx data dummy. */
   for (iter = 0U; iter < len; iter++)
 800b3aa:	f04f 0c00 	mov.w	ip, #0
 800b3ae:	e00a      	b.n	800b3c6 <lan9252_read_data+0x26>
   {
      tx_dummy_arr[iter] = 0xFFu;
 800b3b0:	f10c 0380 	add.w	r3, ip, #128	; 0x80
 800b3b4:	eb0d 0e03 	add.w	lr, sp, r3
 800b3b8:	23ff      	movs	r3, #255	; 0xff
 800b3ba:	f80e 3c80 	strb.w	r3, [lr, #-128]
   for (iter = 0U; iter < len; iter++)
 800b3be:	f10c 0c01 	add.w	ip, ip, #1
 800b3c2:	fa5f fc8c 	uxtb.w	ip, ip
 800b3c6:	fa1f fe8c 	uxth.w	lr, ip
 800b3ca:	45a6      	cmp	lr, r4
 800b3cc:	d3f0      	bcc.n	800b3b0 <lan9252_read_data+0x10>
   }

   /* Change the CS pin to active state. */
   SpiDma_CsPinChangeState(&spiDmaModule, true);
 800b3ce:	4f0a      	ldr	r7, [pc, #40]	; (800b3f8 <lan9252_read_data+0x58>)
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	f003 fbec 	bl	800ebb0 <SpiDma_CsPinChangeState>

   /* Send Read command to address. */
   lan9252_cmd_read(address);
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7ff ffa1 	bl	800b320 <lan9252_cmd_read>

   /* Read data. */
   SpiDma_read(&spiDmaModule, data_ptr, tx_dummy_arr, len);
 800b3de:	4623      	mov	r3, r4
 800b3e0:	466a      	mov	r2, sp
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	4638      	mov	r0, r7
 800b3e6:	f003 fc2d 	bl	800ec44 <SpiDma_read>

   /* Change the CS pin to inactive state. */
   SpiDma_CsPinChangeState(&spiDmaModule, false);
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	f003 fbdf 	bl	800ebb0 <SpiDma_CsPinChangeState>
}
 800b3f2:	b021      	add	sp, #132	; 0x84
 800b3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20000120 	.word	0x20000120

0800b3fc <lan9252_read_32>:

   return ret;
}

uint32_t lan9252_read_32(uint16_t address)
{
 800b3fc:	b500      	push	{lr}
 800b3fe:	b083      	sub	sp, #12
 800b400:	4601      	mov	r1, r0
   uint32_t ret = 0u;
   uint8_t buffer[4] = {0u};
 800b402:	2300      	movs	r3, #0
 800b404:	9301      	str	r3, [sp, #4]

   lan9252_read_data(buffer, address, sizeof(buffer));
 800b406:	2204      	movs	r2, #4
 800b408:	eb0d 0002 	add.w	r0, sp, r2
 800b40c:	f7ff ffc8 	bl	800b3a0 <lan9252_read_data>

   ret = (((uint32_t)buffer[3] << 24u) |
 800b410:	f89d 2007 	ldrb.w	r2, [sp, #7]
          ((uint32_t)buffer[2] << 16u) |
 800b414:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b418:	041b      	lsls	r3, r3, #16
   ret = (((uint32_t)buffer[3] << 24u) |
 800b41a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          ((uint32_t)buffer[1] << 8u) |
 800b41e:	f89d 2005 	ldrb.w	r2, [sp, #5]
          ((uint32_t)buffer[2] << 16u) |
 800b422:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          ((uint32_t)buffer[0] << 0u));
 800b426:	f89d 0004 	ldrb.w	r0, [sp, #4]

   return ret;
}
 800b42a:	4318      	orrs	r0, r3
 800b42c:	b003      	add	sp, #12
 800b42e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b434 <lan9252_write_data>:

void lan9252_write_data(uint8_t *data_ptr, uint16_t address, uint16_t len)
{
 800b434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b436:	4605      	mov	r5, r0
 800b438:	460f      	mov	r7, r1
 800b43a:	4616      	mov	r6, r2
   /* Change the CS pin to active state. */
   SpiDma_CsPinChangeState(&spiDmaModule, true);
 800b43c:	4c08      	ldr	r4, [pc, #32]	; (800b460 <lan9252_write_data+0x2c>)
 800b43e:	2101      	movs	r1, #1
 800b440:	4620      	mov	r0, r4
 800b442:	f003 fbb5 	bl	800ebb0 <SpiDma_CsPinChangeState>

   /* Send request write. */
   lan9252_cmd_write(address);
 800b446:	4638      	mov	r0, r7
 800b448:	f7ff ff84 	bl	800b354 <lan9252_cmd_write>

   /* Send data to lan9252. */
   SpiDma_write (&spiDmaModule, data_ptr, len);
 800b44c:	4632      	mov	r2, r6
 800b44e:	4629      	mov	r1, r5
 800b450:	4620      	mov	r0, r4
 800b452:	f003 fbbb 	bl	800ebcc <SpiDma_write>

   /* Change the CS pin to inactive state. */
   SpiDma_CsPinChangeState(&spiDmaModule, false);
 800b456:	2100      	movs	r1, #0
 800b458:	4620      	mov	r0, r4
 800b45a:	f003 fba9 	bl	800ebb0 <SpiDma_CsPinChangeState>
}
 800b45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b460:	20000120 	.word	0x20000120

0800b464 <lan9252_write_32>:

   lan9252_write_data (data, address, 2);
}

void lan9252_write_32 (uint16_t address, uint32_t value)
{
 800b464:	b500      	push	{lr}
 800b466:	b083      	sub	sp, #12
   uint8_t data[4] = {0u};
 800b468:	2300      	movs	r3, #0
 800b46a:	9301      	str	r3, [sp, #4]

   data[0] = (uint8_t)(value & 0xFF);
 800b46c:	f88d 1004 	strb.w	r1, [sp, #4]
   data[1] = (uint8_t)((value >> 8u) & 0xFF);
 800b470:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800b474:	f88d 3005 	strb.w	r3, [sp, #5]
   data[2] = (uint8_t)((value >> 16u) & 0xFF);
 800b478:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800b47c:	f88d 3006 	strb.w	r3, [sp, #6]
   data[3] = (uint8_t)((value >> 24u) & 0xFF);
 800b480:	0e09      	lsrs	r1, r1, #24
 800b482:	f88d 1007 	strb.w	r1, [sp, #7]

   lan9252_write_data (data, address, 4u);
 800b486:	2204      	movs	r2, #4
 800b488:	4601      	mov	r1, r0
 800b48a:	eb0d 0002 	add.w	r0, sp, r2
 800b48e:	f7ff ffd1 	bl	800b434 <lan9252_write_data>
}
 800b492:	b003      	add	sp, #12
 800b494:	f85d fb04 	ldr.w	pc, [sp], #4

0800b498 <lwrb_init>:
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t *buff, void *buffdata, size_t size)
{
   if (buff == NULL || buffdata == NULL || size == 0)
 800b498:	4603      	mov	r3, r0
 800b49a:	b198      	cbz	r0, 800b4c4 <lwrb_init+0x2c>
 800b49c:	b1a1      	cbz	r1, 800b4c8 <lwrb_init+0x30>
 800b49e:	b90a      	cbnz	r2, 800b4a4 <lwrb_init+0xc>
   {
      return 0;
 800b4a0:	2000      	movs	r0, #0
   buff->magic1 = 0xDEADBEEF;
   buff->magic2 = ~0xDEADBEEF;
#endif /* LWRB_USE_MAGIC */

   return 1;
}
 800b4a2:	4770      	bx	lr
   BUF_MEMSET((void *)buff, 0x00, sizeof(*buff));
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	6018      	str	r0, [r3, #0]
 800b4a8:	6058      	str	r0, [r3, #4]
 800b4aa:	6098      	str	r0, [r3, #8]
 800b4ac:	60d8      	str	r0, [r3, #12]
 800b4ae:	6118      	str	r0, [r3, #16]
 800b4b0:	6158      	str	r0, [r3, #20]
 800b4b2:	6198      	str	r0, [r3, #24]
   buff->size = size;
 800b4b4:	609a      	str	r2, [r3, #8]
   buff->buff = buffdata;
 800b4b6:	6059      	str	r1, [r3, #4]
   buff->magic1 = 0xDEADBEEF;
 800b4b8:	4a04      	ldr	r2, [pc, #16]	; (800b4cc <lwrb_init+0x34>)
 800b4ba:	601a      	str	r2, [r3, #0]
   buff->magic2 = ~0xDEADBEEF;
 800b4bc:	4a04      	ldr	r2, [pc, #16]	; (800b4d0 <lwrb_init+0x38>)
 800b4be:	619a      	str	r2, [r3, #24]
   return 1;
 800b4c0:	2001      	movs	r0, #1
 800b4c2:	4770      	bx	lr
      return 0;
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	4770      	bx	lr
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	4770      	bx	lr
 800b4cc:	deadbeef 	.word	0xdeadbeef
 800b4d0:	21524110 	.word	0x21524110

0800b4d4 <lwrb_get_full>:
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t *buff)
{
   size_t w, r, size;

   if (!BUF_IS_VALID(buff))
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	b1b0      	cbz	r0, 800b506 <lwrb_get_full+0x32>
 800b4d8:	6801      	ldr	r1, [r0, #0]
 800b4da:	4a10      	ldr	r2, [pc, #64]	; (800b51c <lwrb_get_full+0x48>)
 800b4dc:	4291      	cmp	r1, r2
 800b4de:	d114      	bne.n	800b50a <lwrb_get_full+0x36>
 800b4e0:	6981      	ldr	r1, [r0, #24]
 800b4e2:	4a0f      	ldr	r2, [pc, #60]	; (800b520 <lwrb_get_full+0x4c>)
 800b4e4:	4291      	cmp	r1, r2
 800b4e6:	d112      	bne.n	800b50e <lwrb_get_full+0x3a>
 800b4e8:	6842      	ldr	r2, [r0, #4]
 800b4ea:	b192      	cbz	r2, 800b512 <lwrb_get_full+0x3e>
 800b4ec:	6880      	ldr	r0, [r0, #8]
 800b4ee:	b198      	cbz	r0, 800b518 <lwrb_get_full+0x44>
   {
      return 0;
   }

   /* Use temporary values in case they are changed during operations */
   w = buff->w;
 800b4f0:	691a      	ldr	r2, [r3, #16]
   r = buff->r;
 800b4f2:	68d9      	ldr	r1, [r3, #12]
   if (w == r)
 800b4f4:	428a      	cmp	r2, r1
 800b4f6:	d00e      	beq.n	800b516 <lwrb_get_full+0x42>
   {
      size = 0;
   }
   else if (w > r)
 800b4f8:	d901      	bls.n	800b4fe <lwrb_get_full+0x2a>
   {
      size = w - r;
 800b4fa:	1a50      	subs	r0, r2, r1
 800b4fc:	4770      	bx	lr
   }
   else
   {
      size = buff->size - (r - w);
 800b4fe:	6898      	ldr	r0, [r3, #8]
 800b500:	1a52      	subs	r2, r2, r1
 800b502:	4410      	add	r0, r2
 800b504:	4770      	bx	lr
      return 0;
 800b506:	2000      	movs	r0, #0
 800b508:	4770      	bx	lr
 800b50a:	2000      	movs	r0, #0
 800b50c:	4770      	bx	lr
 800b50e:	2000      	movs	r0, #0
 800b510:	4770      	bx	lr
 800b512:	2000      	movs	r0, #0
 800b514:	4770      	bx	lr
      size = 0;
 800b516:	2000      	movs	r0, #0
   }
   return size;
}
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	deadbeef 	.word	0xdeadbeef
 800b520:	21524110 	.word	0x21524110

0800b524 <lwrb_get_linear_block_read_address>:
 * \return          Linear buffer start address
 */
void *
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t *buff)
{
   if (!BUF_IS_VALID(buff))
 800b524:	4603      	mov	r3, r0
 800b526:	b178      	cbz	r0, 800b548 <lwrb_get_linear_block_read_address+0x24>
 800b528:	6801      	ldr	r1, [r0, #0]
 800b52a:	4a0b      	ldr	r2, [pc, #44]	; (800b558 <lwrb_get_linear_block_read_address+0x34>)
 800b52c:	4291      	cmp	r1, r2
 800b52e:	d10c      	bne.n	800b54a <lwrb_get_linear_block_read_address+0x26>
 800b530:	6981      	ldr	r1, [r0, #24]
 800b532:	4a0a      	ldr	r2, [pc, #40]	; (800b55c <lwrb_get_linear_block_read_address+0x38>)
 800b534:	4291      	cmp	r1, r2
 800b536:	d10a      	bne.n	800b54e <lwrb_get_linear_block_read_address+0x2a>
 800b538:	6840      	ldr	r0, [r0, #4]
 800b53a:	b158      	cbz	r0, 800b554 <lwrb_get_linear_block_read_address+0x30>
 800b53c:	689a      	ldr	r2, [r3, #8]
 800b53e:	b142      	cbz	r2, 800b552 <lwrb_get_linear_block_read_address+0x2e>
   {
      return NULL;
   }
   return &buff->buff[buff->r];
 800b540:	6858      	ldr	r0, [r3, #4]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	4418      	add	r0, r3
 800b546:	4770      	bx	lr
 800b548:	4770      	bx	lr
      return NULL;
 800b54a:	2000      	movs	r0, #0
 800b54c:	4770      	bx	lr
 800b54e:	2000      	movs	r0, #0
 800b550:	4770      	bx	lr
 800b552:	2000      	movs	r0, #0
}
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	deadbeef 	.word	0xdeadbeef
 800b55c:	21524110 	.word	0x21524110

0800b560 <lwrb_get_linear_block_read_length>:
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t *buff)
{
   size_t w, r, len;

   if (!BUF_IS_VALID(buff))
 800b560:	4603      	mov	r3, r0
 800b562:	b1b0      	cbz	r0, 800b592 <lwrb_get_linear_block_read_length+0x32>
 800b564:	6801      	ldr	r1, [r0, #0]
 800b566:	4a10      	ldr	r2, [pc, #64]	; (800b5a8 <lwrb_get_linear_block_read_length+0x48>)
 800b568:	4291      	cmp	r1, r2
 800b56a:	d114      	bne.n	800b596 <lwrb_get_linear_block_read_length+0x36>
 800b56c:	6981      	ldr	r1, [r0, #24]
 800b56e:	4a0f      	ldr	r2, [pc, #60]	; (800b5ac <lwrb_get_linear_block_read_length+0x4c>)
 800b570:	4291      	cmp	r1, r2
 800b572:	d112      	bne.n	800b59a <lwrb_get_linear_block_read_length+0x3a>
 800b574:	6842      	ldr	r2, [r0, #4]
 800b576:	b192      	cbz	r2, 800b59e <lwrb_get_linear_block_read_length+0x3e>
 800b578:	6880      	ldr	r0, [r0, #8]
 800b57a:	b198      	cbz	r0, 800b5a4 <lwrb_get_linear_block_read_length+0x44>
   {
      return 0;
   }

   /* Use temporary values in case they are changed during operations */
   w = buff->w;
 800b57c:	691a      	ldr	r2, [r3, #16]
   r = buff->r;
 800b57e:	68d8      	ldr	r0, [r3, #12]
   if (w > r)
 800b580:	4282      	cmp	r2, r0
 800b582:	d901      	bls.n	800b588 <lwrb_get_linear_block_read_length+0x28>
   {
      len = w - r;
 800b584:	1a10      	subs	r0, r2, r0
 800b586:	4770      	bx	lr
   }
   else if (r > w)
 800b588:	4282      	cmp	r2, r0
 800b58a:	d20a      	bcs.n	800b5a2 <lwrb_get_linear_block_read_length+0x42>
   {
      len = buff->size - r;
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	1a18      	subs	r0, r3, r0
 800b590:	4770      	bx	lr
      return 0;
 800b592:	2000      	movs	r0, #0
 800b594:	4770      	bx	lr
 800b596:	2000      	movs	r0, #0
 800b598:	4770      	bx	lr
 800b59a:	2000      	movs	r0, #0
 800b59c:	4770      	bx	lr
 800b59e:	2000      	movs	r0, #0
 800b5a0:	4770      	bx	lr
   }
   else
   {
      len = 0;
 800b5a2:	2000      	movs	r0, #0
   }
   return len;
}
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	deadbeef 	.word	0xdeadbeef
 800b5ac:	21524110 	.word	0x21524110

0800b5b0 <lwrb_skip>:
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t *buff, size_t len)
{
 800b5b0:	b570      	push	{r4, r5, r6, lr}
   size_t full;

   if (!BUF_IS_VALID(buff) || len == 0)
 800b5b2:	b348      	cbz	r0, 800b608 <lwrb_skip+0x58>
 800b5b4:	460d      	mov	r5, r1
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	6802      	ldr	r2, [r0, #0]
 800b5ba:	4b18      	ldr	r3, [pc, #96]	; (800b61c <lwrb_skip+0x6c>)
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d125      	bne.n	800b60c <lwrb_skip+0x5c>
 800b5c0:	6982      	ldr	r2, [r0, #24]
 800b5c2:	4b17      	ldr	r3, [pc, #92]	; (800b620 <lwrb_skip+0x70>)
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d124      	bne.n	800b612 <lwrb_skip+0x62>
 800b5c8:	6843      	ldr	r3, [r0, #4]
 800b5ca:	b323      	cbz	r3, 800b616 <lwrb_skip+0x66>
 800b5cc:	6884      	ldr	r4, [r0, #8]
 800b5ce:	b1f4      	cbz	r4, 800b60e <lwrb_skip+0x5e>
 800b5d0:	b909      	cbnz	r1, 800b5d6 <lwrb_skip+0x26>
   {
      return 0;
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	e01b      	b.n	800b60e <lwrb_skip+0x5e>
   }

   full = lwrb_get_full(buff);
 800b5d6:	f7ff ff7d 	bl	800b4d4 <lwrb_get_full>
   len = BUF_MIN(len, full);
 800b5da:	462c      	mov	r4, r5
 800b5dc:	4285      	cmp	r5, r0
 800b5de:	bf28      	it	cs
 800b5e0:	4604      	movcs	r4, r0
   buff->r += len;
 800b5e2:	68f3      	ldr	r3, [r6, #12]
 800b5e4:	4423      	add	r3, r4
 800b5e6:	60f3      	str	r3, [r6, #12]
   if (buff->r >= buff->size)
 800b5e8:	68f2      	ldr	r2, [r6, #12]
 800b5ea:	68b3      	ldr	r3, [r6, #8]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d303      	bcc.n	800b5f8 <lwrb_skip+0x48>
   {
      buff->r -= buff->size;
 800b5f0:	68b2      	ldr	r2, [r6, #8]
 800b5f2:	68f3      	ldr	r3, [r6, #12]
 800b5f4:	1a9b      	subs	r3, r3, r2
 800b5f6:	60f3      	str	r3, [r6, #12]
   }
   BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 800b5f8:	6973      	ldr	r3, [r6, #20]
 800b5fa:	b143      	cbz	r3, 800b60e <lwrb_skip+0x5e>
 800b5fc:	6973      	ldr	r3, [r6, #20]
 800b5fe:	4622      	mov	r2, r4
 800b600:	2100      	movs	r1, #0
 800b602:	4630      	mov	r0, r6
 800b604:	4798      	blx	r3
 800b606:	e002      	b.n	800b60e <lwrb_skip+0x5e>
      return 0;
 800b608:	2400      	movs	r4, #0
 800b60a:	e000      	b.n	800b60e <lwrb_skip+0x5e>
 800b60c:	2400      	movs	r4, #0
   return len;
}
 800b60e:	4620      	mov	r0, r4
 800b610:	bd70      	pop	{r4, r5, r6, pc}
      return 0;
 800b612:	2400      	movs	r4, #0
 800b614:	e7fb      	b.n	800b60e <lwrb_skip+0x5e>
 800b616:	2400      	movs	r4, #0
 800b618:	e7f9      	b.n	800b60e <lwrb_skip+0x5e>
 800b61a:	bf00      	nop
 800b61c:	deadbeef 	.word	0xdeadbeef
 800b620:	21524110 	.word	0x21524110

0800b624 <md80_PackImpedanceFrame>:
   return (me->local.isEnabled);
}

static void md80_PackImpedanceFrame(tMd80_Device *const me)
{
   me->local.command.toMd80.length = 32u;
 800b624:	2320      	movs	r3, #32
 800b626:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_IMP_CONTROL;
 800b62a:	2312      	movs	r3, #18
 800b62c:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b630:	2300      	movs	r3, #0
 800b632:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->config.impedanceController.kp;
 800b636:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b638:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = me->config.impedanceController.kd;
 800b63c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b63e:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = me->input.position;
 800b642:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b644:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
   *(float *)&me->local.command.toMd80.data[14] = me->input.velocity;
 800b648:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b64a:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
   *(float *)&me->local.command.toMd80.data[18] = me->input.torque;
 800b64e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b650:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
   *(float *)&me->local.command.toMd80.data[22] = me->config.torqueMax;
 800b654:	6843      	ldr	r3, [r0, #4]
 800b656:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
}
 800b65a:	4770      	bx	lr

0800b65c <md80_PackPositionFrame>:

static void md80_PackPositionFrame(tMd80_Device *const me)
{
   me->local.command.toMd80.length = 32;
 800b65c:	2320      	movs	r3, #32
 800b65e:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_POS_CONTROL;
 800b662:	2310      	movs	r3, #16
 800b664:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b668:	2300      	movs	r3, #0
 800b66a:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->config.positionController.kp;
 800b66e:	6a03      	ldr	r3, [r0, #32]
 800b670:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = me->config.positionController.ki;
 800b674:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b676:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = me->config.positionController.kd;
 800b67a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b67c:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
   *(float *)&me->local.command.toMd80.data[14] = me->config.positionController.i_windup;
 800b680:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b682:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
   *(float *)&me->local.command.toMd80.data[18] = me->config.velocityMax;
 800b686:	6883      	ldr	r3, [r0, #8]
 800b688:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
   *(float *)&me->local.command.toMd80.data[22] = me->input.position;
 800b68c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b68e:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
}
 800b692:	4770      	bx	lr

0800b694 <md80_PackVelocityFrame>:

static void md80_PackVelocityFrame(tMd80_Device *const me)
{
   me->local.command.toMd80.length = 32;
 800b694:	2320      	movs	r3, #32
 800b696:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_VEL_CONTROL;
 800b69a:	2311      	movs	r3, #17
 800b69c:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->config.velocityController.kp;
 800b6a6:	6903      	ldr	r3, [r0, #16]
 800b6a8:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = me->config.velocityController.ki;
 800b6ac:	6943      	ldr	r3, [r0, #20]
 800b6ae:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = me->config.velocityController.kd;
 800b6b2:	6983      	ldr	r3, [r0, #24]
 800b6b4:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
   *(float *)&me->local.command.toMd80.data[14] = me->config.velocityController.i_windup;
 800b6b8:	69c3      	ldr	r3, [r0, #28]
 800b6ba:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
   *(float *)&me->local.command.toMd80.data[18] = me->config.torqueMax;
 800b6be:	6843      	ldr	r3, [r0, #4]
 800b6c0:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
   *(float *)&me->local.command.toMd80.data[22] = me->input.velocity;
 800b6c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b6c6:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
}
 800b6ca:	4770      	bx	lr

0800b6cc <md80_PackMotionTargetsFrame>:

static void md80_PackMotionTargetsFrame(tMd80_Device *const me)
{
   me->local.command.toMd80.length = 24;
 800b6cc:	2318      	movs	r3, #24
 800b6ce:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_SET_MOTION_TARGETS;
 800b6d2:	2314      	movs	r3, #20
 800b6d4:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->input.velocity;
 800b6de:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b6e0:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = me->input.position;
 800b6e4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b6e6:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = me->input.torque;
 800b6ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b6ec:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
   *(float *)&me->local.command.toMd80.data[18] = (true == me->config.isTorqueMaxAdjust) ? me->config.velocityMax : 0;
 800b6f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b6f4:	b13b      	cbz	r3, 800b706 <md80_PackMotionTargetsFrame+0x3a>
 800b6f6:	6882      	ldr	r2, [r0, #8]
 800b6f8:	f8c0 21bc 	str.w	r2, [r0, #444]	; 0x1bc
   *(float *)&me->local.command.toMd80.data[14] = (true == me->config.isTorqueMaxAdjust) ? me->config.torqueMax : 0;
 800b6fc:	b12b      	cbz	r3, 800b70a <md80_PackMotionTargetsFrame+0x3e>
 800b6fe:	6843      	ldr	r3, [r0, #4]
 800b700:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
}
 800b704:	4770      	bx	lr
   *(float *)&me->local.command.toMd80.data[18] = (true == me->config.isTorqueMaxAdjust) ? me->config.velocityMax : 0;
 800b706:	2200      	movs	r2, #0
 800b708:	e7f6      	b.n	800b6f8 <md80_PackMotionTargetsFrame+0x2c>
   *(float *)&me->local.command.toMd80.data[14] = (true == me->config.isTorqueMaxAdjust) ? me->config.torqueMax : 0;
 800b70a:	2300      	movs	r3, #0
 800b70c:	e7f8      	b.n	800b700 <md80_PackMotionTargetsFrame+0x34>

0800b70e <md80_UpdateCommandFrame>:
{
 800b70e:	b510      	push	{r4, lr}
 800b710:	4604      	mov	r4, r0
   switch (me->local.mode)
 800b712:	f890 31ed 	ldrb.w	r3, [r0, #493]	; 0x1ed
 800b716:	2b04      	cmp	r3, #4
 800b718:	d80d      	bhi.n	800b736 <md80_UpdateCommandFrame+0x28>
 800b71a:	e8df f003 	tbb	[pc, r3]
 800b71e:	1903      	.short	0x1903
 800b720:	0c2e      	.short	0x0c2e
 800b722:	0d          	.byte	0x0d
 800b723:	00          	.byte	0x00
		  me->local.command.toMd80.length = 2u;
 800b724:	2302      	movs	r3, #2
 800b726:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
		  me->local.command.toMd80.data[0] = MD80_FRAME_GET_INFO;
 800b72a:	2305      	movs	r3, #5
 800b72c:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
		  me->local.command.toMd80.data[1] = 0x00;
 800b730:	2300      	movs	r3, #0
 800b732:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
}
 800b736:	bd10      	pop	{r4, pc}
		  if (true == me->config.isRegularsAdjust)
 800b738:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b73c:	b12b      	cbz	r3, 800b74a <md80_UpdateCommandFrame+0x3c>
			 md80_PackImpedanceFrame(me);
 800b73e:	f7ff ff71 	bl	800b624 <md80_PackImpedanceFrame>
			 me->config.isRegularsAdjust = false;
 800b742:	2300      	movs	r3, #0
 800b744:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b748:	e7f5      	b.n	800b736 <md80_UpdateCommandFrame+0x28>
			 md80_PackMotionTargetsFrame(me);
 800b74a:	f7ff ffbf 	bl	800b6cc <md80_PackMotionTargetsFrame>
 800b74e:	e7f2      	b.n	800b736 <md80_UpdateCommandFrame+0x28>
		  if (true == me->config.isRegularsAdjust)
 800b750:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b754:	b943      	cbnz	r3, 800b768 <md80_UpdateCommandFrame+0x5a>
		  else if (true == me->config.isVelocityRegulatorAdjust)
 800b756:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800b75a:	b15b      	cbz	r3, 800b774 <md80_UpdateCommandFrame+0x66>
			 md80_PackVelocityFrame(me);
 800b75c:	f7ff ff9a 	bl	800b694 <md80_PackVelocityFrame>
			 me->config.isVelocityRegulatorAdjust = false;
 800b760:	2300      	movs	r3, #0
 800b762:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b766:	e7e6      	b.n	800b736 <md80_UpdateCommandFrame+0x28>
			 md80_PackPositionFrame(me);
 800b768:	f7ff ff78 	bl	800b65c <md80_PackPositionFrame>
			 me->config.isRegularsAdjust = false;
 800b76c:	2300      	movs	r3, #0
 800b76e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b772:	e7e0      	b.n	800b736 <md80_UpdateCommandFrame+0x28>
			 md80_PackMotionTargetsFrame(me);
 800b774:	f7ff ffaa 	bl	800b6cc <md80_PackMotionTargetsFrame>
 800b778:	e7dd      	b.n	800b736 <md80_UpdateCommandFrame+0x28>
		  if (true == me->config.isVelocityRegulatorAdjust)
 800b77a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800b77e:	b12b      	cbz	r3, 800b78c <md80_UpdateCommandFrame+0x7e>
			 md80_PackVelocityFrame(me);
 800b780:	f7ff ff88 	bl	800b694 <md80_PackVelocityFrame>
			 me->config.isVelocityRegulatorAdjust = false;
 800b784:	2300      	movs	r3, #0
 800b786:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b78a:	e7d4      	b.n	800b736 <md80_UpdateCommandFrame+0x28>
			 md80_PackMotionTargetsFrame(me);
 800b78c:	f7ff ff9e 	bl	800b6cc <md80_PackMotionTargetsFrame>
}
 800b790:	e7d1      	b.n	800b736 <md80_UpdateCommandFrame+0x28>
	...

0800b794 <md80_Transmit>:
{
 800b794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b796:	4604      	mov	r4, r0
   uint32_t timeoutTemp = pdMS_TO_TICKS(timeout);
 800b798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b79c:	fb03 f601 	mul.w	r6, r3, r1
 800b7a0:	4b19      	ldr	r3, [pc, #100]	; (800b808 <md80_Transmit+0x74>)
 800b7a2:	fba3 3606 	umull	r3, r6, r3, r6
 800b7a6:	09b6      	lsrs	r6, r6, #6
 800b7a8:	4635      	mov	r5, r6
 800b7aa:	e000      	b.n	800b7ae <md80_Transmit+0x1a>
   } while (timeoutTemp--);
 800b7ac:	461d      	mov	r5, r3
      ret = canM_Send(me->config.canId, me->local.command.toMd80.data, me->local.command.toMd80.length);
 800b7ae:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
 800b7b2:	f504 71d5 	add.w	r1, r4, #426	; 0x1aa
 800b7b6:	7820      	ldrb	r0, [r4, #0]
 800b7b8:	f004 fc74 	bl	80100a4 <canM_Send>
      if (ret)
 800b7bc:	4607      	mov	r7, r0
 800b7be:	b928      	cbnz	r0, 800b7cc <md80_Transmit+0x38>
      vTaskDelay(1);
 800b7c0:	2001      	movs	r0, #1
 800b7c2:	f7fd feab 	bl	800951c <vTaskDelay>
   } while (timeoutTemp--);
 800b7c6:	1e6b      	subs	r3, r5, #1
 800b7c8:	2d00      	cmp	r5, #0
 800b7ca:	d1ef      	bne.n	800b7ac <md80_Transmit+0x18>
   if (true == ret)
 800b7cc:	b92f      	cbnz	r7, 800b7da <md80_Transmit+0x46>
}
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         vTaskDelay(1);
 800b7d2:	2001      	movs	r0, #1
 800b7d4:	f7fd fea2 	bl	800951c <vTaskDelay>
      while (timeoutTemp--)
 800b7d8:	462e      	mov	r6, r5
 800b7da:	1e75      	subs	r5, r6, #1
 800b7dc:	2e00      	cmp	r6, #0
 800b7de:	d0f6      	beq.n	800b7ce <md80_Transmit+0x3a>
         if (true == canM_Read(&me->local.response.canId, me->local.response.fromMd80.data, (uint8_t *)&me->local.response.fromMd80.length))
 800b7e0:	f204 12cb 	addw	r2, r4, #459	; 0x1cb
 800b7e4:	f504 71e6 	add.w	r1, r4, #460	; 0x1cc
 800b7e8:	f504 70e5 	add.w	r0, r4, #458	; 0x1ca
 800b7ec:	f004 fca2 	bl	8010134 <canM_Read>
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d0ed      	beq.n	800b7d2 <md80_Transmit+0x3e>
            ret = (me->local.response.canId == me->config.canId) ? true : false;
 800b7f6:	f894 21ca 	ldrb.w	r2, [r4, #458]	; 0x1ca
 800b7fa:	7823      	ldrb	r3, [r4, #0]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	bf0c      	ite	eq
 800b800:	2701      	moveq	r7, #1
 800b802:	2700      	movne	r7, #0
            if (ret)
 800b804:	d1e5      	bne.n	800b7d2 <md80_Transmit+0x3e>
 800b806:	e7e2      	b.n	800b7ce <md80_Transmit+0x3a>
 800b808:	10624dd3 	.word	0x10624dd3

0800b80c <md80_Init>:
}
 800b80c:	4770      	bx	lr

0800b80e <md80_UpdateRespondeData>:
   if ((me->config.canId != respFrame->canId) || (respFrame->fromMd80.data[0] != MD80_RESPONSE_DEFAULT))
 800b80e:	7802      	ldrb	r2, [r0, #0]
 800b810:	780b      	ldrb	r3, [r1, #0]
 800b812:	429a      	cmp	r2, r3
 800b814:	d11b      	bne.n	800b84e <md80_UpdateRespondeData+0x40>
 800b816:	788b      	ldrb	r3, [r1, #2]
 800b818:	2ba0      	cmp	r3, #160	; 0xa0
 800b81a:	d118      	bne.n	800b84e <md80_UpdateRespondeData+0x40>
   me->output.errorVector = *(uint16_t *)&respFrame->fromMd80.data[1];
 800b81c:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 800b820:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
   me->output.temperature = respFrame->fromMd80.data[3];
 800b824:	794b      	ldrb	r3, [r1, #5]
 800b826:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
   me->output.position = *(float *)&respFrame->fromMd80.data[4];
 800b82a:	1d8b      	adds	r3, r1, #6
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6543      	str	r3, [r0, #84]	; 0x54
   me->output.velocity = *(float *)&respFrame->fromMd80.data[8];
 800b830:	f101 030a 	add.w	r3, r1, #10
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6583      	str	r3, [r0, #88]	; 0x58
   me->output.torque = *(float *)&respFrame->fromMd80.data[12];
 800b838:	f101 030e 	add.w	r3, r1, #14
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	65c3      	str	r3, [r0, #92]	; 0x5c
   me->output.encoderPosition = *(float *)&respFrame->fromMd80.data[16];
 800b840:	f101 0312 	add.w	r3, r1, #18
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	6603      	str	r3, [r0, #96]	; 0x60
   me->output.encoderVelocity = *(float *)&respFrame->fromMd80.data[20];
 800b848:	3116      	adds	r1, #22
 800b84a:	680b      	ldr	r3, [r1, #0]
 800b84c:	6643      	str	r3, [r0, #100]	; 0x64
}
 800b84e:	4770      	bx	lr

0800b850 <md80_ConfigBlink>:
{
 800b850:	b508      	push	{r3, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_FLASH_LED;
 800b852:	2200      	movs	r2, #0
 800b854:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b858:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800b85c:	2202      	movs	r2, #2
 800b85e:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 500))
 800b862:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b866:	f7ff ff95 	bl	800b794 <md80_Transmit>
}
 800b86a:	bd08      	pop	{r3, pc}

0800b86c <md80_setupCalibration>:
{
 800b86c:	b508      	push	{r3, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_CALIBRATION;
 800b86e:	2270      	movs	r2, #112	; 0x70
 800b870:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b874:	2200      	movs	r2, #0
 800b876:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800b87a:	2202      	movs	r2, #2
 800b87c:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800b880:	2132      	movs	r1, #50	; 0x32
 800b882:	f7ff ff87 	bl	800b794 <md80_Transmit>
}
 800b886:	bd08      	pop	{r3, pc}

0800b888 <md80_setupCalibrationOutput>:
{
 800b888:	b508      	push	{r3, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_CALIBRATION_OUTPUT;
 800b88a:	2271      	movs	r2, #113	; 0x71
 800b88c:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b890:	2200      	movs	r2, #0
 800b892:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800b896:	2202      	movs	r2, #2
 800b898:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800b89c:	2132      	movs	r1, #50	; 0x32
 800b89e:	f7ff ff79 	bl	800b794 <md80_Transmit>
}
 800b8a2:	bd08      	pop	{r3, pc}

0800b8a4 <md80_Restart>:
{
 800b8a4:	b508      	push	{r3, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_RESTART;
 800b8a6:	2213      	movs	r2, #19
 800b8a8:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800b8b8:	2132      	movs	r1, #50	; 0x32
 800b8ba:	f7ff ff6b 	bl	800b794 <md80_Transmit>
}
 800b8be:	bd08      	pop	{r3, pc}

0800b8c0 <md80_ConfigMd80Can>:
{
 800b8c0:	b510      	push	{r4, lr}
   me->local.command.toMd80.data[0] = MD80_FRAME_CAN_CONFIG;
 800b8c2:	2420      	movs	r4, #32
 800b8c4:	f880 41aa 	strb.w	r4, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b8c8:	2400      	movs	r4, #0
 800b8ca:	f880 41ab 	strb.w	r4, [r0, #427]	; 0x1ab
   *(uint16_t *)&me->local.command.toMd80.data[2] = canM_Devices[me->config.canId].local.init_info.tx_id.id;
 800b8ce:	f890 c000 	ldrb.w	ip, [r0]
 800b8d2:	4c0e      	ldr	r4, [pc, #56]	; (800b90c <md80_ConfigMd80Can+0x4c>)
 800b8d4:	f44f 7e16 	mov.w	lr, #600	; 0x258
 800b8d8:	fb0e 4c0c 	mla	ip, lr, ip, r4
 800b8dc:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 800b8e0:	f8a0 41ac 	strh.w	r4, [r0, #428]	; 0x1ac
   *(uint32_t *)&me->local.command.toMd80.data[4] = newBaudrateMbps * 1000000;
 800b8e4:	4c0a      	ldr	r4, [pc, #40]	; (800b910 <md80_ConfigMd80Can+0x50>)
 800b8e6:	fb04 f101 	mul.w	r1, r4, r1
 800b8ea:	f8c0 11ae 	str.w	r1, [r0, #430]	; 0x1ae
   *(uint16_t *)&me->local.command.toMd80.data[8] = newTimeout;
 800b8ee:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
   *(uint16_t *)&me->local.command.toMd80.data[10] = (uint16_t)(true == canTermination) ? 1U : 0U;
 800b8f2:	b14b      	cbz	r3, 800b908 <md80_ConfigMd80Can+0x48>
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	f8a0 31b4 	strh.w	r3, [r0, #436]	; 0x1b4
   me->local.command.toMd80.length = 12u;
 800b8fa:	230c      	movs	r3, #12
 800b8fc:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 100))
 800b900:	2164      	movs	r1, #100	; 0x64
 800b902:	f7ff ff47 	bl	800b794 <md80_Transmit>
}
 800b906:	bd10      	pop	{r4, pc}
   *(uint16_t *)&me->local.command.toMd80.data[10] = (uint16_t)(true == canTermination) ? 1U : 0U;
 800b908:	2300      	movs	r3, #0
 800b90a:	e7f4      	b.n	800b8f6 <md80_ConfigMd80Can+0x36>
 800b90c:	2000016c 	.word	0x2000016c
 800b910:	000f4240 	.word	0x000f4240

0800b914 <md80_ConfigMd80Save>:
{
 800b914:	b508      	push	{r3, lr}
   me->local.command.toMd80.length = 2u;
 800b916:	2202      	movs	r2, #2
 800b918:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_CAN_SAVE;
 800b91c:	2221      	movs	r2, #33	; 0x21
 800b91e:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b922:	2200      	movs	r2, #0
 800b924:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
   if (true == md80_Transmit(me, 100))
 800b928:	2164      	movs	r1, #100	; 0x64
 800b92a:	f7ff ff33 	bl	800b794 <md80_Transmit>
}
 800b92e:	bd08      	pop	{r3, pc}

0800b930 <md80_SendMotionCommand>:
{
 800b930:	b510      	push	{r4, lr}
 800b932:	4604      	mov	r4, r0
   me->local.command.toMd80.length = 16U;
 800b934:	2310      	movs	r3, #16
 800b936:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_SET_MOTION_TARGETS;
 800b93a:	2314      	movs	r3, #20
 800b93c:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b940:	2300      	movs	r3, #0
 800b942:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = vel;
 800b946:	edc0 0a6b 	vstr	s1, [r0, #428]	; 0x1ac
   *(float *)&me->local.command.toMd80.data[6] = pos;
 800b94a:	ed80 0a6c 	vstr	s0, [r0, #432]	; 0x1b0
   *(float *)&me->local.command.toMd80.data[10] = torque;
 800b94e:	ed80 1a6d 	vstr	s2, [r0, #436]	; 0x1b4
   if (true == md80_Transmit(me, 100))
 800b952:	2164      	movs	r1, #100	; 0x64
 800b954:	f7ff ff1e 	bl	800b794 <md80_Transmit>
 800b958:	b900      	cbnz	r0, 800b95c <md80_SendMotionCommand+0x2c>
}
 800b95a:	bd10      	pop	{r4, pc}
      md80_UpdateRespondeData(me, (tMd80_ResponseFrame *)&me->local.response);
 800b95c:	f504 71e5 	add.w	r1, r4, #458	; 0x1ca
 800b960:	4620      	mov	r0, r4
 800b962:	f7ff ff54 	bl	800b80e <md80_UpdateRespondeData>
}
 800b966:	e7f8      	b.n	800b95a <md80_SendMotionCommand+0x2a>

0800b968 <md80_SetCurrentLimit>:
{
 800b968:	b510      	push	{r4, lr}
 800b96a:	ed2d 8b02 	vpush	{d8}
 800b96e:	4604      	mov	r4, r0
   if (MD80_DRIVER_MAXCURRENT < currentLimit)
 800b970:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b9c4 <md80_SetCurrentLimit+0x5c>
 800b974:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b97c:	dc0b      	bgt.n	800b996 <md80_SetCurrentLimit+0x2e>
 800b97e:	eeb0 8a40 	vmov.f32	s16, s0
   else if (MD80_DRIVER_MINCURRENT > currentLimit)
 800b982:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b986:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b98e:	d504      	bpl.n	800b99a <md80_SetCurrentLimit+0x32>
      currentLimit = MD80_DRIVER_MINCURRENT;
 800b990:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800b994:	e001      	b.n	800b99a <md80_SetCurrentLimit+0x32>
      currentLimit = MD80_DRIVER_MAXCURRENT;
 800b996:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 800b9c4 <md80_SetCurrentLimit+0x5c>
   me->local.command.toMd80.data[0] = MD80_FRAME_BASE_CONFIG;
 800b99a:	2304      	movs	r3, #4
 800b99c:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
   me->local.command.toMd80.length = 6u;
 800b9a6:	2306      	movs	r3, #6
 800b9a8:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
   *(float *)&me->local.command.toMd80.data[2] = currentLimit;
 800b9ac:	ed84 8a6b 	vstr	s16, [r4, #428]	; 0x1ac
   if (true == md80_Transmit(me, 50))
 800b9b0:	2132      	movs	r1, #50	; 0x32
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f7ff feee 	bl	800b794 <md80_Transmit>
 800b9b8:	b108      	cbz	r0, 800b9be <md80_SetCurrentLimit+0x56>
      me->config.currentMax = currentLimit;
 800b9ba:	ed84 8a03 	vstr	s16, [r4, #12]
}
 800b9be:	ecbd 8b02 	vpop	{d8}
 800b9c2:	bd10      	pop	{r4, pc}
 800b9c4:	42200000 	.word	0x42200000

0800b9c8 <md80_ControlMd80Mode>:
{
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	460d      	mov	r5, r1
   me->local.command.toMd80.data[0] = MD80_FRAME_CONTROL_SELECT;
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   me->local.command.toMd80.data[2] = (uint8_t)mode;
 800b9da:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
   me->local.command.toMd80.length = 3u;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800b9e4:	2132      	movs	r1, #50	; 0x32
 800b9e6:	f7ff fed5 	bl	800b794 <md80_Transmit>
 800b9ea:	b108      	cbz	r0, 800b9f0 <md80_ControlMd80Mode+0x28>
      me->local.mode = mode;
 800b9ec:	f884 51ed 	strb.w	r5, [r4, #493]	; 0x1ed
}
 800b9f0:	bd38      	pop	{r3, r4, r5, pc}

0800b9f2 <md80_ControlMd80Enable>:
{
 800b9f2:	b538      	push	{r3, r4, r5, lr}
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	460d      	mov	r5, r1
   me->local.command.toMd80.data[0] = MD80_FRAME_MOTOR_ENABLE;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   me->local.command.toMd80.data[2] = (uint8_t)enable;
 800ba04:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
   me->local.command.toMd80.length = 3u;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800ba0e:	2132      	movs	r1, #50	; 0x32
 800ba10:	f7ff fec0 	bl	800b794 <md80_Transmit>
 800ba14:	b108      	cbz	r0, 800ba1a <md80_ControlMd80Enable+0x28>
      me->local.isEnabled = (enable == true) ? true : false;
 800ba16:	f884 51ec 	strb.w	r5, [r4, #492]	; 0x1ec
}
 800ba1a:	bd38      	pop	{r3, r4, r5, pc}

0800ba1c <md80_MainFunction>:
   if ((true == me->config.isMd80Detected) && (true == me->local.isEnabled))
 800ba1c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ba20:	b19b      	cbz	r3, 800ba4a <md80_MainFunction+0x2e>
{
 800ba22:	b510      	push	{r4, lr}
 800ba24:	4604      	mov	r4, r0
   if ((true == me->config.isMd80Detected) && (true == me->local.isEnabled))
 800ba26:	f890 31ec 	ldrb.w	r3, [r0, #492]	; 0x1ec
 800ba2a:	b903      	cbnz	r3, 800ba2e <md80_MainFunction+0x12>
}
 800ba2c:	bd10      	pop	{r4, pc}
      md80_UpdateCommandFrame(me);
 800ba2e:	f7ff fe6e 	bl	800b70e <md80_UpdateCommandFrame>
      if (true == md80_Transmit(me, 100))
 800ba32:	2164      	movs	r1, #100	; 0x64
 800ba34:	4620      	mov	r0, r4
 800ba36:	f7ff fead 	bl	800b794 <md80_Transmit>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d0f6      	beq.n	800ba2c <md80_MainFunction+0x10>
         md80_UpdateRespondeData(me, (tMd80_ResponseFrame *)&me->local.response);
 800ba3e:	f504 71e5 	add.w	r1, r4, #458	; 0x1ca
 800ba42:	4620      	mov	r0, r4
 800ba44:	f7ff fee3 	bl	800b80e <md80_UpdateRespondeData>
}
 800ba48:	e7f0      	b.n	800ba2c <md80_MainFunction+0x10>
 800ba4a:	4770      	bx	lr

0800ba4c <md80_SetPositionControllerParams>:
   me->config.isRegularsAdjust = true;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   me->config.positionController.kp = kp;
 800ba52:	ed80 0a08 	vstr	s0, [r0, #32]
   me->config.positionController.ki = ki;
 800ba56:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
   me->config.positionController.kd = kd;
 800ba5a:	ed80 1a0a 	vstr	s2, [r0, #40]	; 0x28
   me->config.positionController.i_windup = iWindup;
 800ba5e:	edc0 1a0b 	vstr	s3, [r0, #44]	; 0x2c
}
 800ba62:	4770      	bx	lr

0800ba64 <md80_SetVelocityControllerParams>:
   me->config.velocityController.kp = kp;
 800ba64:	ed80 0a04 	vstr	s0, [r0, #16]
   me->config.velocityController.ki = ki;
 800ba68:	edc0 0a05 	vstr	s1, [r0, #20]
   me->config.velocityController.kd = kd;
 800ba6c:	ed80 1a06 	vstr	s2, [r0, #24]
   me->config.velocityController.i_windup = iWindup;
 800ba70:	edc0 1a07 	vstr	s3, [r0, #28]
   me->config.isVelocityRegulatorAdjust = true;
 800ba74:	2301      	movs	r3, #1
 800ba76:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
}
 800ba7a:	4770      	bx	lr

0800ba7c <md80_SetImpedanceControllerParams>:
   me->config.impedanceController.kp = kp;
 800ba7c:	ed80 0a0c 	vstr	s0, [r0, #48]	; 0x30
   me->config.impedanceController.kd = kd;
 800ba80:	edc0 0a0d 	vstr	s1, [r0, #52]	; 0x34
   me->config.isRegularsAdjust = true;
 800ba84:	2301      	movs	r3, #1
 800ba86:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
}
 800ba8a:	4770      	bx	lr

0800ba8c <md80_SetMaxTorque>:
{
 800ba8c:	ee07 1a90 	vmov	s15, r1
   me->config.torqueMax = maxTorque;
 800ba90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba94:	edc0 7a01 	vstr	s15, [r0, #4]
   me->config.isTorqueMaxAdjust = true;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800ba9e:	4770      	bx	lr

0800baa0 <md80_SetMaxVelocity>:
   me->config.velocityMax = maxVelocity;
 800baa0:	ed80 0a02 	vstr	s0, [r0, #8]
   me->config.isVelocityAdjust = true;
 800baa4:	2301      	movs	r3, #1
 800baa6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800baaa:	4770      	bx	lr

0800baac <md80_SetTargetPosition>:
   me->input.position = pos;
 800baac:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
}
 800bab0:	4770      	bx	lr
	...

0800bab4 <md80_SetEncoderZero>:
{
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	ed2d 8b02 	vpush	{d8}
 800baba:	4604      	mov	r4, r0
   me->local.command.toMd80.data[0] = MD80_FRAME_ZERO_ENCODER;
 800babc:	2303      	movs	r3, #3
 800babe:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800bac2:	2300      	movs	r3, #0
 800bac4:	f880 31ab 	strb.w	r3, [r0, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 800bac8:	2302      	movs	r3, #2
 800baca:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
   if (true == md80_Transmit(me, 50))
 800bace:	2132      	movs	r1, #50	; 0x32
 800bad0:	f7ff fe60 	bl	800b794 <md80_Transmit>
 800bad4:	4605      	mov	r5, r0
 800bad6:	b918      	cbnz	r0, 800bae0 <md80_SetEncoderZero+0x2c>
}
 800bad8:	4628      	mov	r0, r5
 800bada:	ecbd 8b02 	vpop	{d8}
 800bade:	bd38      	pop	{r3, r4, r5, pc}
      md80_SendMotionCommand(me, 0.0f, 0.0f, 0.0f);
 800bae0:	ed9f 8a08 	vldr	s16, [pc, #32]	; 800bb04 <md80_SetEncoderZero+0x50>
 800bae4:	eeb0 1a48 	vmov.f32	s2, s16
 800bae8:	eef0 0a48 	vmov.f32	s1, s16
 800baec:	eeb0 0a48 	vmov.f32	s0, s16
 800baf0:	4620      	mov	r0, r4
 800baf2:	f7ff ff1d 	bl	800b930 <md80_SendMotionCommand>
      md80_SetTargetPosition(me, 0.0f);
 800baf6:	eeb0 0a48 	vmov.f32	s0, s16
 800bafa:	4620      	mov	r0, r4
 800bafc:	f7ff ffd6 	bl	800baac <md80_SetTargetPosition>
      ret = true;
 800bb00:	e7ea      	b.n	800bad8 <md80_SetEncoderZero+0x24>
 800bb02:	bf00      	nop
 800bb04:	00000000 	.word	0x00000000

0800bb08 <md80_IsEnabled>:
}
 800bb08:	f890 01ec 	ldrb.w	r0, [r0, #492]	; 0x1ec
 800bb0c:	4770      	bx	lr
	...

0800bb10 <ESC_download_pre_objecthandler>:
uint32_t ESC_download_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t size,
      uint16_t flags)
{
 800bb10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb14:	b083      	sub	sp, #12
 800bb16:	4604      	mov	r4, r0
 800bb18:	460d      	mov	r5, r1
 800bb1a:	4616      	mov	r6, r2
 800bb1c:	461f      	mov	r7, r3
 800bb1e:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   if (IS_RXPDO (index) ||
 800bb22:	f5a0 51b0 	sub.w	r1, r0, #5632	; 0x1600
 800bb26:	b289      	uxth	r1, r1
 800bb28:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bb2c:	d30d      	bcc.n	800bb4a <ESC_download_pre_objecthandler+0x3a>
       IS_TXPDO (index) ||
 800bb2e:	f5a0 53d0 	sub.w	r3, r0, #6656	; 0x1a00
 800bb32:	b29b      	uxth	r3, r3
   if (IS_RXPDO (index) ||
 800bb34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb38:	d307      	bcc.n	800bb4a <ESC_download_pre_objecthandler+0x3a>
       IS_TXPDO (index) ||
 800bb3a:	f641 4312 	movw	r3, #7186	; 0x1c12
 800bb3e:	4298      	cmp	r0, r3
 800bb40:	d003      	beq.n	800bb4a <ESC_download_pre_objecthandler+0x3a>
       index == RX_PDO_OBJIDX ||
 800bb42:	f641 4313 	movw	r3, #7187	; 0x1c13
 800bb46:	4298      	cmp	r0, r3
 800bb48:	d102      	bne.n	800bb50 <ESC_download_pre_objecthandler+0x40>
       index == TX_PDO_OBJIDX)
   {
      uint8_t minSub = ((flags & COMPLETE_ACCESS_FLAG) == 0) ? 0 : 1;
      if (subindex > minSub && COE_maxSub (index) != 0)
 800bb4a:	ebb5 3fd8 	cmp.w	r5, r8, lsr #15
 800bb4e:	d80f      	bhi.n	800bb70 <ESC_download_pre_objecthandler+0x60>
      {
         return ABORT_SUBINDEX0_NOT_ZERO;
      }
   }

   if (ESCvar.pre_object_download_hook)
 800bb50:	4b0c      	ldr	r3, [pc, #48]	; (800bb84 <ESC_download_pre_objecthandler+0x74>)
 800bb52:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 800bb56:	f1b9 0f00 	cmp.w	r9, #0
 800bb5a:	d010      	beq.n	800bb7e <ESC_download_pre_objecthandler+0x6e>
   {
      return (ESCvar.pre_object_download_hook) (index,
 800bb5c:	f8cd 8000 	str.w	r8, [sp]
 800bb60:	463b      	mov	r3, r7
 800bb62:	4632      	mov	r2, r6
 800bb64:	4629      	mov	r1, r5
 800bb66:	4620      	mov	r0, r4
 800bb68:	47c8      	blx	r9
            size,
            flags);
   }

   return 0;
}
 800bb6a:	b003      	add	sp, #12
 800bb6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (subindex > minSub && COE_maxSub (index) != 0)
 800bb70:	4620      	mov	r0, r4
 800bb72:	f002 fdbf 	bl	800e6f4 <COE_maxSub>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	d0ea      	beq.n	800bb50 <ESC_download_pre_objecthandler+0x40>
         return ABORT_SUBINDEX0_NOT_ZERO;
 800bb7a:	4803      	ldr	r0, [pc, #12]	; (800bb88 <ESC_download_pre_objecthandler+0x78>)
 800bb7c:	e7f5      	b.n	800bb6a <ESC_download_pre_objecthandler+0x5a>
   return 0;
 800bb7e:	2000      	movs	r0, #0
 800bb80:	e7f3      	b.n	800bb6a <ESC_download_pre_objecthandler+0x5a>
 800bb82:	bf00      	nop
 800bb84:	200082bc 	.word	0x200082bc
 800bb88:	06010003 	.word	0x06010003

0800bb8c <ESC_download_post_objecthandler>:
 * @param[in] index      = index of SDO download request to handle
 * @param[in] sub-index  = sub-index of SDO download request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_download_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 800bb8c:	b508      	push	{r3, lr}
   if (ESCvar.post_object_download_hook != NULL)
 800bb8e:	4b03      	ldr	r3, [pc, #12]	; (800bb9c <ESC_download_post_objecthandler+0x10>)
 800bb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb92:	b10b      	cbz	r3, 800bb98 <ESC_download_post_objecthandler+0xc>
   {
      return (ESCvar.post_object_download_hook)(index, subindex, flags);
 800bb94:	4798      	blx	r3
   }

   return 0;
}
 800bb96:	bd08      	pop	{r3, pc}
   return 0;
 800bb98:	2000      	movs	r0, #0
 800bb9a:	e7fc      	b.n	800bb96 <ESC_download_post_objecthandler+0xa>
 800bb9c:	200082bc 	.word	0x200082bc

0800bba0 <ESC_upload_pre_objecthandler>:
uint32_t ESC_upload_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t *size,
      uint16_t flags)
{
 800bba0:	b530      	push	{r4, r5, lr}
 800bba2:	b083      	sub	sp, #12
   if (ESCvar.pre_object_upload_hook != NULL)
 800bba4:	4c05      	ldr	r4, [pc, #20]	; (800bbbc <ESC_upload_pre_objecthandler+0x1c>)
 800bba6:	6c64      	ldr	r4, [r4, #68]	; 0x44
 800bba8:	b12c      	cbz	r4, 800bbb6 <ESC_upload_pre_objecthandler+0x16>
   {
      return (ESCvar.pre_object_upload_hook) (index,
 800bbaa:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 800bbae:	9500      	str	r5, [sp, #0]
 800bbb0:	47a0      	blx	r4
            size,
            flags);
   }

   return 0;
}
 800bbb2:	b003      	add	sp, #12
 800bbb4:	bd30      	pop	{r4, r5, pc}
   return 0;
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	e7fb      	b.n	800bbb2 <ESC_upload_pre_objecthandler+0x12>
 800bbba:	bf00      	nop
 800bbbc:	200082bc 	.word	0x200082bc

0800bbc0 <ESC_upload_post_objecthandler>:
 * @param[in] index      = index of SDO upload request to handle
 * @param[in] sub-index  = sub-index of SDO upload request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_upload_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 800bbc0:	b508      	push	{r3, lr}
   if (ESCvar.post_object_upload_hook != NULL)
 800bbc2:	4b03      	ldr	r3, [pc, #12]	; (800bbd0 <ESC_upload_post_objecthandler+0x10>)
 800bbc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbc6:	b10b      	cbz	r3, 800bbcc <ESC_upload_post_objecthandler+0xc>
   {
      return (ESCvar.post_object_upload_hook)(index, subindex, flags);
 800bbc8:	4798      	blx	r3
   }

   return 0;
}
 800bbca:	bd08      	pop	{r3, pc}
   return 0;
 800bbcc:	2000      	movs	r0, #0
 800bbce:	e7fc      	b.n	800bbca <ESC_upload_post_objecthandler+0xa>
 800bbd0:	200082bc 	.word	0x200082bc

0800bbd4 <APP_safeoutput>:

/** Hook called from the slave stack ESC_stopoutputs to act on state changes
 * forcing us to stop outputs. Here we can set them to a safe state.
 */
void APP_safeoutput (void)
{
 800bbd4:	b508      	push	{r3, lr}
   DPRINT ("APP_safeoutput\n");

   if(ESCvar.safeoutput_override != NULL)
 800bbd6:	4b02      	ldr	r3, [pc, #8]	; (800bbe0 <APP_safeoutput+0xc>)
 800bbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbda:	b103      	cbz	r3, 800bbde <APP_safeoutput+0xa>
   {
      (ESCvar.safeoutput_override)();
 800bbdc:	4798      	blx	r3
   }
}
 800bbde:	bd08      	pop	{r3, pc}
 800bbe0:	200082bc 	.word	0x200082bc

0800bbe4 <TXPDO_update>:

/** Write local process data to Sync Manager 3, Master Inputs.
 */
void TXPDO_update (void)
{
 800bbe4:	b538      	push	{r3, r4, r5, lr}
	//TODO TOUCH HERE
   if(ESCvar.txpdo_override != NULL)
 800bbe6:	4b0a      	ldr	r3, [pc, #40]	; (800bc10 <TXPDO_update+0x2c>)
 800bbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbea:	b10b      	cbz	r3, 800bbf0 <TXPDO_update+0xc>
   {
      (ESCvar.txpdo_override)();
 800bbec:	4798      	blx	r3
      {
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
      }
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
   }
}
 800bbee:	bd38      	pop	{r3, r4, r5, pc}
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
 800bbf0:	4d07      	ldr	r5, [pc, #28]	; (800bc10 <TXPDO_update+0x2c>)
 800bbf2:	4c08      	ldr	r4, [pc, #32]	; (800bc14 <TXPDO_update+0x30>)
 800bbf4:	4a08      	ldr	r2, [pc, #32]	; (800bc18 <TXPDO_update+0x34>)
 800bbf6:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f002 fd06 	bl	800e60c <COE_pdoPack>
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
 800bc00:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
 800bc04:	4621      	mov	r1, r4
 800bc06:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800bc0a:	f002 ff3b 	bl	800ea84 <ESC_write>
}
 800bc0e:	e7ee      	b.n	800bbee <TXPDO_update+0xa>
 800bc10:	200082bc 	.word	0x200082bc
 800bc14:	200097b0 	.word	0x200097b0
 800bc18:	200091ec 	.word	0x200091ec

0800bc1c <RXPDO_update>:

/** Read Sync Manager 2 to local process data, Master Outputs.
 */
void RXPDO_update (void)
{
 800bc1c:	b538      	push	{r3, r4, r5, lr}
   if(ESCvar.rxpdo_override != NULL)
 800bc1e:	4b0a      	ldr	r3, [pc, #40]	; (800bc48 <RXPDO_update+0x2c>)
 800bc20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc22:	b10b      	cbz	r3, 800bc28 <RXPDO_update+0xc>
   {
      (ESCvar.rxpdo_override)();
 800bc24:	4798      	blx	r3
      if (MAX_MAPPINGS_SM2 > 0)
      {
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
      }
   }
}
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
      ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 800bc28:	4d07      	ldr	r5, [pc, #28]	; (800bc48 <RXPDO_update+0x2c>)
 800bc2a:	4c08      	ldr	r4, [pc, #32]	; (800bc4c <RXPDO_update+0x30>)
 800bc2c:	f8b5 2078 	ldrh.w	r2, [r5, #120]	; 0x78
 800bc30:	4621      	mov	r1, r4
 800bc32:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800bc36:	f002 fee9 	bl	800ea0c <ESC_read>
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
 800bc3a:	4a05      	ldr	r2, [pc, #20]	; (800bc50 <RXPDO_update+0x34>)
 800bc3c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800bc40:	4620      	mov	r0, r4
 800bc42:	f002 fd1f 	bl	800e684 <COE_pdoUnpack>
}
 800bc46:	e7ee      	b.n	800bc26 <RXPDO_update+0xa>
 800bc48:	200082bc 	.word	0x200082bc
 800bc4c:	200095b0 	.word	0x200095b0
 800bc50:	20008fac 	.word	0x20008fac

0800bc54 <DIG_process>:
/* Function to update local I/O, call read ethercat outputs, call
 * write ethercat inputs. Implement watch-dog counter to count-out if we have
 * made state change affecting the App.state.
 */
void DIG_process (uint8_t flags)
{
 800bc54:	b510      	push	{r4, lr}
 800bc56:	4604      	mov	r4, r0
   /* Handle watchdog */
   if((flags & DIG_PROCESS_WD_FLAG) > 0)
 800bc58:	f010 0f04 	tst.w	r0, #4
 800bc5c:	d10d      	bne.n	800bc7a <DIG_process+0x26>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
      }
   }

   /* Handle Outputs */
   if ((flags & DIG_PROCESS_OUTPUTS_FLAG) > 0)
 800bc5e:	f014 0f02 	tst.w	r4, #2
 800bc62:	d14e      	bne.n	800bd02 <DIG_process+0xae>
         ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
      }
   }

   /* Call application */
   if ((flags & DIG_PROCESS_APP_HOOK_FLAG) > 0)
 800bc64:	f014 0f08 	tst.w	r4, #8
 800bc68:	d003      	beq.n	800bc72 <DIG_process+0x1e>
   {
      /* Call application callback if set */
      if (ESCvar.application_hook != NULL)
 800bc6a:	4b43      	ldr	r3, [pc, #268]	; (800bd78 <DIG_process+0x124>)
 800bc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc6e:	b103      	cbz	r3, 800bc72 <DIG_process+0x1e>
      {
         (ESCvar.application_hook)();
 800bc70:	4798      	blx	r3
      }
   }

   /* Handle Inputs */
   if ((flags & DIG_PROCESS_INPUTS_FLAG) > 0)
 800bc72:	f014 0f01 	tst.w	r4, #1
 800bc76:	d171      	bne.n	800bd5c <DIG_process+0x108>
         /* Update inputs */
         cb_get_inputs();
         TXPDO_update();
      }
   }
}
 800bc78:	bd10      	pop	{r4, pc}
      if (CC_ATOMIC_GET(watchdog) > 0)
 800bc7a:	f3bf 8f5b 	dmb	ish
 800bc7e:	4b3f      	ldr	r3, [pc, #252]	; (800bd7c <DIG_process+0x128>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f3bf 8f5b 	dmb	ish
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	dd0b      	ble.n	800bca2 <DIG_process+0x4e>
         CC_ATOMIC_SUB(watchdog, 1);
 800bc8a:	4b3c      	ldr	r3, [pc, #240]	; (800bd7c <DIG_process+0x128>)
 800bc8c:	f3bf 8f5b 	dmb	ish
 800bc90:	e853 1f00 	ldrex	r1, [r3]
 800bc94:	3901      	subs	r1, #1
 800bc96:	e843 1200 	strex	r2, r1, [r3]
 800bc9a:	2a00      	cmp	r2, #0
 800bc9c:	d1f8      	bne.n	800bc90 <DIG_process+0x3c>
 800bc9e:	f3bf 8f5b 	dmb	ish
      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 800bca2:	f3bf 8f5b 	dmb	ish
 800bca6:	4b35      	ldr	r3, [pc, #212]	; (800bd7c <DIG_process+0x128>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f3bf 8f5b 	dmb	ish
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	dd13      	ble.n	800bcda <DIG_process+0x86>
      else if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) == 0))
 800bcb2:	f3bf 8f5b 	dmb	ish
 800bcb6:	4b30      	ldr	r3, [pc, #192]	; (800bd78 <DIG_process+0x124>)
 800bcb8:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800bcbc:	f3bf 8f5b 	dmb	ish
 800bcc0:	f013 0f02 	tst.w	r3, #2
 800bcc4:	d1cb      	bne.n	800bc5e <DIG_process+0xa>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 800bcc6:	4b2c      	ldr	r3, [pc, #176]	; (800bd78 <DIG_process+0x124>)
 800bcc8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800bccc:	f3bf 8f5b 	dmb	ish
 800bcd0:	4b2a      	ldr	r3, [pc, #168]	; (800bd7c <DIG_process+0x128>)
 800bcd2:	601a      	str	r2, [r3, #0]
 800bcd4:	f3bf 8f5b 	dmb	ish
 800bcd8:	e7c1      	b.n	800bc5e <DIG_process+0xa>
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800bcda:	f3bf 8f5b 	dmb	ish
 800bcde:	4b26      	ldr	r3, [pc, #152]	; (800bd78 <DIG_process+0x124>)
 800bce0:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800bce4:	f3bf 8f5b 	dmb	ish
      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 800bce8:	f013 0f02 	tst.w	r3, #2
 800bcec:	d0e1      	beq.n	800bcb2 <DIG_process+0x5e>
           (ESCvar.ESC_SM2_sml > 0))
 800bcee:	4b22      	ldr	r3, [pc, #136]	; (800bd78 <DIG_process+0x124>)
 800bcf0:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d0dc      	beq.n	800bcb2 <DIG_process+0x5e>
         ESC_ALstatusgotoerror((ESCsafeop | ESCerror), ALERR_WATCHDOG);
 800bcf8:	211b      	movs	r1, #27
 800bcfa:	2014      	movs	r0, #20
 800bcfc:	f000 fdc4 	bl	800c888 <ESC_ALstatusgotoerror>
 800bd00:	e7ad      	b.n	800bc5e <DIG_process+0xa>
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800bd02:	f3bf 8f5b 	dmb	ish
 800bd06:	4b1c      	ldr	r3, [pc, #112]	; (800bd78 <DIG_process+0x124>)
 800bd08:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800bd0c:	f3bf 8f5b 	dmb	ish
 800bd10:	f013 0f02 	tst.w	r3, #2
 800bd14:	d005      	beq.n	800bd22 <DIG_process+0xce>
         (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
 800bd16:	4b18      	ldr	r3, [pc, #96]	; (800bd78 <DIG_process+0x124>)
 800bd18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800bd1c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800bd20:	d10e      	bne.n	800bd40 <DIG_process+0xec>
      else if (ESCvar.ALevent & ESCREG_ALEVENT_SM2)
 800bd22:	4b15      	ldr	r3, [pc, #84]	; (800bd78 <DIG_process+0x124>)
 800bd24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bd28:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800bd2c:	d09a      	beq.n	800bc64 <DIG_process+0x10>
         ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 800bd2e:	4b12      	ldr	r3, [pc, #72]	; (800bd78 <DIG_process+0x124>)
 800bd30:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 800bd34:	4912      	ldr	r1, [pc, #72]	; (800bd80 <DIG_process+0x12c>)
 800bd36:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800bd3a:	f002 fe67 	bl	800ea0c <ESC_read>
 800bd3e:	e791      	b.n	800bc64 <DIG_process+0x10>
         RXPDO_update();
 800bd40:	f7ff ff6c 	bl	800bc1c <RXPDO_update>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 800bd44:	4b0c      	ldr	r3, [pc, #48]	; (800bd78 <DIG_process+0x124>)
 800bd46:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800bd4a:	f3bf 8f5b 	dmb	ish
 800bd4e:	4b0b      	ldr	r3, [pc, #44]	; (800bd7c <DIG_process+0x128>)
 800bd50:	601a      	str	r2, [r3, #0]
 800bd52:	f3bf 8f5b 	dmb	ish
         cb_set_outputs();
 800bd56:	f004 fb4e 	bl	80103f6 <cb_set_outputs>
 800bd5a:	e783      	b.n	800bc64 <DIG_process+0x10>
      if(CC_ATOMIC_GET(ESCvar.App.state) > 0)
 800bd5c:	f3bf 8f5b 	dmb	ish
 800bd60:	4b05      	ldr	r3, [pc, #20]	; (800bd78 <DIG_process+0x124>)
 800bd62:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800bd66:	f3bf 8f5b 	dmb	ish
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d084      	beq.n	800bc78 <DIG_process+0x24>
         cb_get_inputs();
 800bd6e:	f004 fb41 	bl	80103f4 <cb_get_inputs>
         TXPDO_update();
 800bd72:	f7ff ff37 	bl	800bbe4 <TXPDO_update>
}
 800bd76:	e77f      	b.n	800bc78 <DIG_process+0x24>
 800bd78:	200082bc 	.word	0x200082bc
 800bd7c:	200099b0 	.word	0x200099b0
 800bd80:	200095b0 	.word	0x200095b0

0800bd84 <read_local_time>:

   ESC_ALeventmaskwrite(ESC_ALeventmaskread() | event_mask);
}


uint32_t read_local_time(){
 800bd84:	b510      	push	{r4, lr}
	ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 800bd86:	4c05      	ldr	r4, [pc, #20]	; (800bd9c <read_local_time+0x18>)
 800bd88:	2204      	movs	r2, #4
 800bd8a:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 800bd8e:	f44f 6011 	mov.w	r0, #2320	; 0x910
 800bd92:	f002 fe3b 	bl	800ea0c <ESC_read>
	return etohl (ESCvar.Time);
 800bd96:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
}
 800bd9a:	bd10      	pop	{r4, pc}
 800bd9c:	200082bc 	.word	0x200082bc

0800bda0 <ecat_slv_poll>:
 * Polling function. It should be called periodically for an application 
 * when only SM2/DC interrupt is active.
 * Read and handle events for the EtherCAT state, status, mailbox and eeprom.
 */
void ecat_slv_poll (void)
{
 800bda0:	b510      	push	{r4, lr}

   /* Read local time from ESC*/

   ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 800bda2:	4c0e      	ldr	r4, [pc, #56]	; (800bddc <ecat_slv_poll+0x3c>)
 800bda4:	2204      	movs	r2, #4
 800bda6:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 800bdaa:	f44f 6011 	mov.w	r0, #2320	; 0x910
 800bdae:	f002 fe2d 	bl	800ea0c <ESC_read>
   ESCvar.Time = etohl (ESCvar.Time);
 800bdb2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800bdb6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0

   /* Check the state machine */
   ESC_state();
 800bdba:	f000 fe2d 	bl	800ca18 <ESC_state>

   /* Check the SM activation event */
   ESC_sm_act_event();
 800bdbe:	f000 fda1 	bl	800c904 <ESC_sm_act_event>

   /* Check mailboxes */
   if (ESC_mbxprocess())
 800bdc2:	f000 fb27 	bl	800c414 <ESC_mbxprocess>
 800bdc6:	b920      	cbnz	r0, 800bdd2 <ecat_slv_poll+0x32>
#if USE_EOE
   ESC_eoeprocess_tx();
#endif

   /* Call emulated eeprom handler if set */
   if (ESCvar.esc_hw_eep_handler != NULL)
 800bdc8:	4b04      	ldr	r3, [pc, #16]	; (800bddc <ecat_slv_poll+0x3c>)
 800bdca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdcc:	b103      	cbz	r3, 800bdd0 <ecat_slv_poll+0x30>
   {
      (ESCvar.esc_hw_eep_handler)();
 800bdce:	4798      	blx	r3
   }

}
 800bdd0:	bd10      	pop	{r4, pc}
      ESC_coeprocess();
 800bdd2:	f002 fb3d 	bl	800e450 <ESC_coeprocess>
      ESC_xoeprocess();
 800bdd6:	f000 fc07 	bl	800c5e8 <ESC_xoeprocess>
 800bdda:	e7f5      	b.n	800bdc8 <ecat_slv_poll+0x28>
 800bddc:	200082bc 	.word	0x200082bc

0800bde0 <ecat_slv>:

/*
 * Poll all events in a free-run application
 */
void ecat_slv (void)
{
 800bde0:	b508      	push	{r3, lr}
   ecat_slv_poll();
 800bde2:	f7ff ffdd 	bl	800bda0 <ecat_slv_poll>
   DIG_process(DIG_PROCESS_WD_FLAG | DIG_PROCESS_OUTPUTS_FLAG |
 800bde6:	200f      	movs	r0, #15
 800bde8:	f7ff ff34 	bl	800bc54 <DIG_process>
         DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
}
 800bdec:	bd08      	pop	{r3, pc}
	...

0800bdf0 <ecat_slv_init>:

/*
 * Initialize the slave stack.
 */
void ecat_slv_init (esc_cfg_t * config)
{
 800bdf0:	b510      	push	{r4, lr}
 800bdf2:	4604      	mov	r4, r0
   DPRINT ("Slave stack init started\n\n");

   /* Init watchdog */
   watchdog = config->watchdog_cnt;
 800bdf4:	6882      	ldr	r2, [r0, #8]
 800bdf6:	4b11      	ldr	r3, [pc, #68]	; (800be3c <ecat_slv_init+0x4c>)
 800bdf8:	601a      	str	r2, [r3, #0]

   /* Call stack configuration */
   ESC_config (config);
 800bdfa:	f000 ffe1 	bl	800cdc0 <ESC_config>
   /* Call HW init */
   ESC_init (config);
 800bdfe:	4620      	mov	r0, r4
 800be00:	f002 fe7c 	bl	800eafc <ESC_init>

   /*  wait until ESC is started up */
   while ((ESCvar.DLstatus & 0x0001) == 0)
 800be04:	e005      	b.n	800be12 <ecat_slv_init+0x22>
   {
      ESC_read (ESCREG_DLSTATUS, (void *) &ESCvar.DLstatus,
 800be06:	2202      	movs	r2, #2
 800be08:	490d      	ldr	r1, [pc, #52]	; (800be40 <ecat_slv_init+0x50>)
 800be0a:	f44f 7088 	mov.w	r0, #272	; 0x110
 800be0e:	f002 fdfd 	bl	800ea0c <ESC_read>
   while ((ESCvar.DLstatus & 0x0001) == 0)
 800be12:	4b0c      	ldr	r3, [pc, #48]	; (800be44 <ecat_slv_init+0x54>)
 800be14:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800be18:	f013 0f01 	tst.w	r3, #1
 800be1c:	d0f3      	beq.n	800be06 <ecat_slv_init+0x16>
   /* Init EoE */
   EOE_init ();
#endif

   /* reset ESC to init state */
   ESC_ALstatus (ESCinit);
 800be1e:	2001      	movs	r0, #1
 800be20:	f000 f86e 	bl	800bf00 <ESC_ALstatus>
   ESC_ALerror (ALERR_NONE);
 800be24:	2000      	movs	r0, #0
 800be26:	f000 f837 	bl	800be98 <ESC_ALerror>
   ESC_stopmbx ();
 800be2a:	f000 f9cd 	bl	800c1c8 <ESC_stopmbx>
   ESC_stopinput ();
 800be2e:	f000 fcdb 	bl	800c7e8 <ESC_stopinput>
   ESC_stopoutput ();
 800be32:	f000 fd13 	bl	800c85c <ESC_stopoutput>
   /* Init Object Dictionary default values */
   COE_initDefaultValues ();
 800be36:	f002 fbb3 	bl	800e5a0 <COE_initDefaultValues>
}
 800be3a:	bd10      	pop	{r4, pc}
 800be3c:	200099b0 	.word	0x200099b0
 800be40:	20008342 	.word	0x20008342
 800be44:	200082bc 	.word	0x200082bc

0800be48 <ESC_check_id_request>:
   }
}

static bool ESC_check_id_request (uint16_t ALcontrol, uint8_t * an)
{
   if ((ALcontrol & ESCREG_AL_ID_REQUEST) != 0)
 800be48:	f010 0f20 	tst.w	r0, #32
 800be4c:	d01f      	beq.n	800be8e <ESC_check_id_request+0x46>
   {
      uint8_t state = ALcontrol & ESCREG_AL_ERRACKMASK;
 800be4e:	b2c3      	uxtb	r3, r0
 800be50:	f000 000f 	and.w	r0, r0, #15

      if ((state != ESCboot) &&
 800be54:	2803      	cmp	r0, #3
 800be56:	d01c      	beq.n	800be92 <ESC_check_id_request+0x4a>
 800be58:	f013 0f0c 	tst.w	r3, #12
 800be5c:	d006      	beq.n	800be6c <ESC_check_id_request+0x24>
          ((state < ESCsafeop) || (*an == ESCsafeop) || (*an == ESCop)))
 800be5e:	780b      	ldrb	r3, [r1, #0]
 800be60:	2b04      	cmp	r3, #4
 800be62:	d003      	beq.n	800be6c <ESC_check_id_request+0x24>
 800be64:	2b08      	cmp	r3, #8
 800be66:	d001      	beq.n	800be6c <ESC_check_id_request+0x24>

         return (ALstatuscode == ALERR_NONE);
      }
   }

   return false;
 800be68:	2000      	movs	r0, #0
}
 800be6a:	4770      	bx	lr
{
 800be6c:	b500      	push	{lr}
 800be6e:	b083      	sub	sp, #12
         ESC_read (ESCREG_ALERROR,
 800be70:	2202      	movs	r2, #2
 800be72:	f10d 0106 	add.w	r1, sp, #6
 800be76:	f44f 709a 	mov.w	r0, #308	; 0x134
 800be7a:	f002 fdc7 	bl	800ea0c <ESC_read>
         return (ALstatuscode == ALERR_NONE);
 800be7e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800be82:	fab0 f080 	clz	r0, r0
 800be86:	0940      	lsrs	r0, r0, #5
}
 800be88:	b003      	add	sp, #12
 800be8a:	f85d fb04 	ldr.w	pc, [sp], #4
   return false;
 800be8e:	2000      	movs	r0, #0
 800be90:	4770      	bx	lr
 800be92:	2000      	movs	r0, #0
 800be94:	4770      	bx	lr
	...

0800be98 <ESC_ALerror>:
{
 800be98:	b500      	push	{lr}
 800be9a:	b083      	sub	sp, #12
   ESCvar.ALerror = errornumber;
 800be9c:	4b07      	ldr	r3, [pc, #28]	; (800bebc <ESC_ALerror+0x24>)
 800be9e:	f8a3 0084 	strh.w	r0, [r3, #132]	; 0x84
   dummy = htoes (errornumber);
 800bea2:	f8ad 0006 	strh.w	r0, [sp, #6]
   ESC_write (ESCREG_ALERROR, &dummy, sizeof (dummy));
 800bea6:	2202      	movs	r2, #2
 800bea8:	f10d 0106 	add.w	r1, sp, #6
 800beac:	f44f 709a 	mov.w	r0, #308	; 0x134
 800beb0:	f002 fde8 	bl	800ea84 <ESC_write>
}
 800beb4:	b003      	add	sp, #12
 800beb6:	f85d fb04 	ldr.w	pc, [sp], #4
 800beba:	bf00      	nop
 800bebc:	200082bc 	.word	0x200082bc

0800bec0 <ESC_load_device_id>:

static uint8_t ESC_load_device_id (void)
{
 800bec0:	b500      	push	{lr}
 800bec2:	b083      	sub	sp, #12
   uint16_t device_id;

   if (ESCvar.get_device_id != NULL)
 800bec4:	4b0d      	ldr	r3, [pc, #52]	; (800befc <ESC_load_device_id+0x3c>)
 800bec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bec8:	b16b      	cbz	r3, 800bee6 <ESC_load_device_id+0x26>
   {
      if (ESCvar.get_device_id (&device_id) != 0)
 800beca:	f10d 0006 	add.w	r0, sp, #6
 800bece:	4798      	blx	r3
 800bed0:	b110      	cbz	r0, 800bed8 <ESC_load_device_id+0x18>
      {
         device_id = 0;
 800bed2:	2300      	movs	r3, #0
 800bed4:	f8ad 3006 	strh.w	r3, [sp, #6]
      ESC_read (ESCREG_CONF_STATION_ALIAS,
                (void *)&device_id,
                sizeof (device_id));
   }

   if (device_id != 0)
 800bed8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800bedc:	b950      	cbnz	r0, 800bef4 <ESC_load_device_id+0x34>
      ESC_ALerror (device_id);

      return ESCREG_AL_ID_REQUEST;
   }

   return 0;
 800bede:	2000      	movs	r0, #0
}
 800bee0:	b003      	add	sp, #12
 800bee2:	f85d fb04 	ldr.w	pc, [sp], #4
      ESC_read (ESCREG_CONF_STATION_ALIAS,
 800bee6:	2202      	movs	r2, #2
 800bee8:	f10d 0106 	add.w	r1, sp, #6
 800beec:	2012      	movs	r0, #18
 800beee:	f002 fd8d 	bl	800ea0c <ESC_read>
 800bef2:	e7f1      	b.n	800bed8 <ESC_load_device_id+0x18>
      ESC_ALerror (device_id);
 800bef4:	f7ff ffd0 	bl	800be98 <ESC_ALerror>
      return ESCREG_AL_ID_REQUEST;
 800bef8:	2020      	movs	r0, #32
 800befa:	e7f1      	b.n	800bee0 <ESC_load_device_id+0x20>
 800befc:	200082bc 	.word	0x200082bc

0800bf00 <ESC_ALstatus>:
{
 800bf00:	b500      	push	{lr}
 800bf02:	b083      	sub	sp, #12
   ESCvar.ALstatus = status;
 800bf04:	4b07      	ldr	r3, [pc, #28]	; (800bf24 <ESC_ALstatus+0x24>)
 800bf06:	f8a3 0080 	strh.w	r0, [r3, #128]	; 0x80
   dummy = htoes ((uint16_t) status);
 800bf0a:	f8ad 0006 	strh.w	r0, [sp, #6]
   ESC_write (ESCREG_ALSTATUS, &dummy, sizeof (dummy));
 800bf0e:	2202      	movs	r2, #2
 800bf10:	f10d 0106 	add.w	r1, sp, #6
 800bf14:	f44f 7098 	mov.w	r0, #304	; 0x130
 800bf18:	f002 fdb4 	bl	800ea84 <ESC_write>
}
 800bf1c:	b003      	add	sp, #12
 800bf1e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf22:	bf00      	nop
 800bf24:	200082bc 	.word	0x200082bc

0800bf28 <ESC_ALeventmaskwrite>:
{
 800bf28:	b500      	push	{lr}
 800bf2a:	b083      	sub	sp, #12
   aleventmask = htoel(mask);
 800bf2c:	9001      	str	r0, [sp, #4]
   ESC_write (ESCREG_ALEVENTMASK, &aleventmask, sizeof(aleventmask));
 800bf2e:	2204      	movs	r2, #4
 800bf30:	eb0d 0102 	add.w	r1, sp, r2
 800bf34:	f44f 7001 	mov.w	r0, #516	; 0x204
 800bf38:	f002 fda4 	bl	800ea84 <ESC_write>
}
 800bf3c:	b003      	add	sp, #12
 800bf3e:	f85d fb04 	ldr.w	pc, [sp], #4

0800bf42 <ESC_SMack>:
{
 800bf42:	b500      	push	{lr}
 800bf44:	b083      	sub	sp, #12
   ESC_read ((uint16_t)(ESCREG_SM0ACTIVATE + (n << 3)), &dummy, 1);
 800bf46:	00c0      	lsls	r0, r0, #3
 800bf48:	2201      	movs	r2, #1
 800bf4a:	f10d 0107 	add.w	r1, sp, #7
 800bf4e:	f600 0006 	addw	r0, r0, #2054	; 0x806
 800bf52:	f002 fd5b 	bl	800ea0c <ESC_read>
}
 800bf56:	b003      	add	sp, #12
 800bf58:	f85d fb04 	ldr.w	pc, [sp], #4

0800bf5c <ESC_SMstatus>:
{
 800bf5c:	b508      	push	{r3, lr}
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800bf5e:	f100 0317 	add.w	r3, r0, #23
 800bf62:	4905      	ldr	r1, [pc, #20]	; (800bf78 <ESC_SMstatus+0x1c>)
 800bf64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ESC_read ((uint16_t)(ESCREG_SM0STATUS + (n << 3)), &(sm->Status), 1);
 800bf68:	00c0      	lsls	r0, r0, #3
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	3109      	adds	r1, #9
 800bf6e:	f600 0005 	addw	r0, r0, #2053	; 0x805
 800bf72:	f002 fd4b 	bl	800ea0c <ESC_read>
}
 800bf76:	bd08      	pop	{r3, pc}
 800bf78:	200082bc 	.word	0x200082bc

0800bf7c <ESC_SMwritepdi>:
{
 800bf7c:	b508      	push	{r3, lr}
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800bf7e:	f100 0317 	add.w	r3, r0, #23
 800bf82:	4905      	ldr	r1, [pc, #20]	; (800bf98 <ESC_SMwritepdi+0x1c>)
 800bf84:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ESC_write ((uint16_t)(ESCREG_SM0PDI + (n << 3)), &(sm->ActPDI), 1);
 800bf88:	00c0      	lsls	r0, r0, #3
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	310b      	adds	r1, #11
 800bf8e:	f600 0007 	addw	r0, r0, #2055	; 0x807
 800bf92:	f002 fd77 	bl	800ea84 <ESC_write>
}
 800bf96:	bd08      	pop	{r3, pc}
 800bf98:	200082bc 	.word	0x200082bc

0800bf9c <ESC_SMenable>:
{
 800bf9c:	b508      	push	{r3, lr}
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800bf9e:	f100 0217 	add.w	r2, r0, #23
 800bfa2:	4b05      	ldr	r3, [pc, #20]	; (800bfb8 <ESC_SMenable+0x1c>)
 800bfa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   sm->ActPDI &= (uint8_t)~ESCREG_SMENABLE_BIT;
 800bfa8:	7ada      	ldrb	r2, [r3, #11]
 800bfaa:	f022 0201 	bic.w	r2, r2, #1
 800bfae:	72da      	strb	r2, [r3, #11]
   ESC_SMwritepdi (n);
 800bfb0:	f7ff ffe4 	bl	800bf7c <ESC_SMwritepdi>
}
 800bfb4:	bd08      	pop	{r3, pc}
 800bfb6:	bf00      	nop
 800bfb8:	200082bc 	.word	0x200082bc

0800bfbc <ESC_SMdisable>:
{
 800bfbc:	b508      	push	{r3, lr}
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800bfbe:	f100 0217 	add.w	r2, r0, #23
 800bfc2:	4b05      	ldr	r3, [pc, #20]	; (800bfd8 <ESC_SMdisable+0x1c>)
 800bfc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   sm->ActPDI |= ESCREG_SMENABLE_BIT;
 800bfc8:	7ada      	ldrb	r2, [r3, #11]
 800bfca:	f042 0201 	orr.w	r2, r2, #1
 800bfce:	72da      	strb	r2, [r3, #11]
   ESC_SMwritepdi (n);
 800bfd0:	f7ff ffd4 	bl	800bf7c <ESC_SMwritepdi>
}
 800bfd4:	bd08      	pop	{r3, pc}
 800bfd6:	bf00      	nop
 800bfd8:	200082bc 	.word	0x200082bc

0800bfdc <ESC_address>:
{
 800bfdc:	b508      	push	{r3, lr}
   ESC_read (ESCREG_ADDRESS, (void *) &ESCvar.address, sizeof (ESCvar.address));
 800bfde:	2202      	movs	r2, #2
 800bfe0:	4902      	ldr	r1, [pc, #8]	; (800bfec <ESC_address+0x10>)
 800bfe2:	2010      	movs	r0, #16
 800bfe4:	f002 fd12 	bl	800ea0c <ESC_read>
}
 800bfe8:	bd08      	pop	{r3, pc}
 800bfea:	bf00      	nop
 800bfec:	20008344 	.word	0x20008344

0800bff0 <ESC_SYNCactivation>:
{
 800bff0:	b500      	push	{lr}
 800bff2:	b083      	sub	sp, #12
   ESC_read (ESCREG_SYNC_ACT, &activation, sizeof(activation));
 800bff4:	2201      	movs	r2, #1
 800bff6:	f10d 0107 	add.w	r1, sp, #7
 800bffa:	f640 1081 	movw	r0, #2433	; 0x981
 800bffe:	f002 fd05 	bl	800ea0c <ESC_read>
}
 800c002:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c006:	b003      	add	sp, #12
 800c008:	f85d fb04 	ldr.w	pc, [sp], #4

0800c00c <ESC_checkDC>:
{
 800c00c:	b508      	push	{r3, lr}
   uint8_t sync_act = ESC_SYNCactivation();
 800c00e:	f7ff ffef 	bl	800bff0 <ESC_SYNCactivation>
   if((sync_act & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_AUTO_ACTIVATED)) > 0)
 800c012:	f010 0f09 	tst.w	r0, #9
 800c016:	d004      	beq.n	800c022 <ESC_checkDC+0x16>
      if(ESCvar.esc_check_dc_handler != NULL)
 800c018:	4b06      	ldr	r3, [pc, #24]	; (800c034 <ESC_checkDC+0x28>)
 800c01a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c01c:	b143      	cbz	r3, 800c030 <ESC_checkDC+0x24>
         ret = (ESCvar.esc_check_dc_handler)();
 800c01e:	4798      	blx	r3
 800c020:	e005      	b.n	800c02e <ESC_checkDC+0x22>
      ESCvar.dcsync = 0;
 800c022:	4b04      	ldr	r3, [pc, #16]	; (800c034 <ESC_checkDC+0x28>)
 800c024:	2000      	movs	r0, #0
 800c026:	f883 007c 	strb.w	r0, [r3, #124]	; 0x7c
      ESCvar.synccounter = 0;
 800c02a:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
}
 800c02e:	bd08      	pop	{r3, pc}
      ret = ALERR_DCINVALIDSYNCCFG;
 800c030:	2030      	movs	r0, #48	; 0x30
 800c032:	e7fc      	b.n	800c02e <ESC_checkDC+0x22>
 800c034:	200082bc 	.word	0x200082bc

0800c038 <ESC_checkmbx>:
{
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	4605      	mov	r5, r0
   ESC_read (ESCREG_SM0, (void *) &ESCvar.SM[0], sizeof (ESCvar.SM[0]));
 800c03c:	4c2b      	ldr	r4, [pc, #172]	; (800c0ec <ESC_checkmbx+0xb4>)
 800c03e:	2208      	movs	r2, #8
 800c040:	4621      	mov	r1, r4
 800c042:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c046:	f002 fce1 	bl	800ea0c <ESC_read>
   ESC_read (ESCREG_SM1, (void *) &ESCvar.SM[1], sizeof (ESCvar.SM[1]));
 800c04a:	2208      	movs	r2, #8
 800c04c:	18a1      	adds	r1, r4, r2
 800c04e:	f640 0008 	movw	r0, #2056	; 0x808
 800c052:	f002 fcdb 	bl	800ea0c <ESC_read>
   if ((etohs (SM->PSA) != ESC_MBX0_sma) || (etohs (SM->Length) != ESC_MBX0_sml)
 800c056:	f834 19bc 	ldrh.w	r1, [r4], #-188
 800c05a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c05c:	881a      	ldrh	r2, [r3, #0]
 800c05e:	4291      	cmp	r1, r2
 800c060:	d12c      	bne.n	800c0bc <ESC_checkmbx+0x84>
 800c062:	4a23      	ldr	r2, [pc, #140]	; (800c0f0 <ESC_checkmbx+0xb8>)
 800c064:	f8b2 10be 	ldrh.w	r1, [r2, #190]	; 0xbe
 800c068:	885a      	ldrh	r2, [r3, #2]
 800c06a:	4291      	cmp	r1, r2
 800c06c:	d126      	bne.n	800c0bc <ESC_checkmbx+0x84>
       || (SM->Command != ESC_MBX0_smc) || (ESCvar.SM[0].ECsm == 0))
 800c06e:	4a20      	ldr	r2, [pc, #128]	; (800c0f0 <ESC_checkmbx+0xb8>)
 800c070:	f892 20c0 	ldrb.w	r2, [r2, #192]	; 0xc0
 800c074:	799b      	ldrb	r3, [r3, #6]
 800c076:	429a      	cmp	r2, r3
 800c078:	d120      	bne.n	800c0bc <ESC_checkmbx+0x84>
 800c07a:	4b1d      	ldr	r3, [pc, #116]	; (800c0f0 <ESC_checkmbx+0xb8>)
 800c07c:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800c080:	f013 0f01 	tst.w	r3, #1
 800c084:	d01a      	beq.n	800c0bc <ESC_checkmbx+0x84>
   if ((etohs (SM->PSA) != ESC_MBX1_sma) || (etohs (SM->Length) != ESC_MBX1_sml)
 800c086:	4b1a      	ldr	r3, [pc, #104]	; (800c0f0 <ESC_checkmbx+0xb8>)
 800c088:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
 800c08c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c08e:	881a      	ldrh	r2, [r3, #0]
 800c090:	4291      	cmp	r1, r2
 800c092:	d11f      	bne.n	800c0d4 <ESC_checkmbx+0x9c>
 800c094:	4a16      	ldr	r2, [pc, #88]	; (800c0f0 <ESC_checkmbx+0xb8>)
 800c096:	f8b2 10c6 	ldrh.w	r1, [r2, #198]	; 0xc6
 800c09a:	885a      	ldrh	r2, [r3, #2]
 800c09c:	4291      	cmp	r1, r2
 800c09e:	d119      	bne.n	800c0d4 <ESC_checkmbx+0x9c>
       || (SM->Command != ESC_MBX1_smc) || (ESCvar.SM[1].ECsm == 0))
 800c0a0:	4a13      	ldr	r2, [pc, #76]	; (800c0f0 <ESC_checkmbx+0xb8>)
 800c0a2:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
 800c0a6:	799b      	ldrb	r3, [r3, #6]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d113      	bne.n	800c0d4 <ESC_checkmbx+0x9c>
 800c0ac:	4b10      	ldr	r3, [pc, #64]	; (800c0f0 <ESC_checkmbx+0xb8>)
 800c0ae:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 800c0b2:	f013 0f01 	tst.w	r3, #1
 800c0b6:	d00d      	beq.n	800c0d4 <ESC_checkmbx+0x9c>
   return state;
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	e00a      	b.n	800c0d2 <ESC_checkmbx+0x9a>
      ESCvar.SMtestresult = SMRESULT_ERRSM0;
 800c0bc:	2401      	movs	r4, #1
 800c0be:	4b0c      	ldr	r3, [pc, #48]	; (800c0f0 <ESC_checkmbx+0xb8>)
 800c0c0:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
      ESC_SMdisable (0);
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	f7ff ff79 	bl	800bfbc <ESC_SMdisable>
      ESC_SMdisable (1);
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f7ff ff76 	bl	800bfbc <ESC_SMdisable>
      return (uint8_t) (ESCinit | ESCerror);      //fail state change
 800c0d0:	2011      	movs	r0, #17
}
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
      ESCvar.SMtestresult = SMRESULT_ERRSM1;
 800c0d4:	4b06      	ldr	r3, [pc, #24]	; (800c0f0 <ESC_checkmbx+0xb8>)
 800c0d6:	2202      	movs	r2, #2
 800c0d8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      ESC_SMdisable (0);
 800c0dc:	2000      	movs	r0, #0
 800c0de:	f7ff ff6d 	bl	800bfbc <ESC_SMdisable>
      ESC_SMdisable (1);
 800c0e2:	2001      	movs	r0, #1
 800c0e4:	f7ff ff6a 	bl	800bfbc <ESC_SMdisable>
      return ESCinit | ESCerror;        //fail state change
 800c0e8:	2011      	movs	r0, #17
 800c0ea:	e7f2      	b.n	800c0d2 <ESC_checkmbx+0x9a>
 800c0ec:	20008378 	.word	0x20008378
 800c0f0:	200082bc 	.word	0x200082bc

0800c0f4 <ESC_startmbx>:
{
 800c0f4:	b510      	push	{r4, lr}
 800c0f6:	4604      	mov	r4, r0
   ESCvar.activembxsize = MBXSIZE;
 800c0f8:	4b17      	ldr	r3, [pc, #92]	; (800c158 <ESC_startmbx+0x64>)
 800c0fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c0fe:	66da      	str	r2, [r3, #108]	; 0x6c
   ESCvar.activemb0 = &ESCvar.mb[0];
 800c100:	1d1a      	adds	r2, r3, #4
 800c102:	671a      	str	r2, [r3, #112]	; 0x70
   ESCvar.activemb1 = &ESCvar.mb[1];
 800c104:	f103 020c 	add.w	r2, r3, #12
 800c108:	675a      	str	r2, [r3, #116]	; 0x74
   ESC_SMenable (0);
 800c10a:	2000      	movs	r0, #0
 800c10c:	f7ff ff46 	bl	800bf9c <ESC_SMenable>
   ESC_SMenable (1);
 800c110:	2001      	movs	r0, #1
 800c112:	f7ff ff43 	bl	800bf9c <ESC_SMenable>
   ESC_SMstatus (0);
 800c116:	2000      	movs	r0, #0
 800c118:	f7ff ff20 	bl	800bf5c <ESC_SMstatus>
   ESC_SMstatus (1);
 800c11c:	2001      	movs	r0, #1
 800c11e:	f7ff ff1d 	bl	800bf5c <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 800c122:	4620      	mov	r0, r4
 800c124:	f7ff ff88 	bl	800c038 <ESC_checkmbx>
 800c128:	4604      	mov	r4, r0
 800c12a:	f010 0f10 	tst.w	r0, #16
 800c12e:	d10b      	bne.n	800c148 <ESC_startmbx+0x54>
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 800c130:	4b09      	ldr	r3, [pc, #36]	; (800c158 <ESC_startmbx+0x64>)
 800c132:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
 800c136:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800c13a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      ESCvar.MBXrun = 1;
 800c13e:	2201      	movs	r2, #1
 800c140:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800c144:	4620      	mov	r0, r4
 800c146:	bd10      	pop	{r4, pc}
      ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 800c148:	2016      	movs	r0, #22
 800c14a:	f7ff fea5 	bl	800be98 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 800c14e:	4b02      	ldr	r3, [pc, #8]	; (800c158 <ESC_startmbx+0x64>)
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c156:	e7f5      	b.n	800c144 <ESC_startmbx+0x50>
 800c158:	200082bc 	.word	0x200082bc

0800c15c <ESC_startmbxboot>:
{
 800c15c:	b510      	push	{r4, lr}
 800c15e:	4604      	mov	r4, r0
   ESCvar.activembxsize = MBXSIZEBOOT;
 800c160:	4b18      	ldr	r3, [pc, #96]	; (800c1c4 <ESC_startmbxboot+0x68>)
 800c162:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c166:	66da      	str	r2, [r3, #108]	; 0x6c
   ESCvar.activemb0 = &ESCvar.mbboot[0];
 800c168:	f103 0214 	add.w	r2, r3, #20
 800c16c:	671a      	str	r2, [r3, #112]	; 0x70
   ESCvar.activemb1 = &ESCvar.mbboot[1];
 800c16e:	f103 021c 	add.w	r2, r3, #28
 800c172:	675a      	str	r2, [r3, #116]	; 0x74
   ESC_SMenable (0);
 800c174:	2000      	movs	r0, #0
 800c176:	f7ff ff11 	bl	800bf9c <ESC_SMenable>
   ESC_SMenable (1);
 800c17a:	2001      	movs	r0, #1
 800c17c:	f7ff ff0e 	bl	800bf9c <ESC_SMenable>
   ESC_SMstatus (0);
 800c180:	2000      	movs	r0, #0
 800c182:	f7ff feeb 	bl	800bf5c <ESC_SMstatus>
   ESC_SMstatus (1);
 800c186:	2001      	movs	r0, #1
 800c188:	f7ff fee8 	bl	800bf5c <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 800c18c:	4620      	mov	r0, r4
 800c18e:	f7ff ff53 	bl	800c038 <ESC_checkmbx>
 800c192:	4604      	mov	r4, r0
 800c194:	f010 0f10 	tst.w	r0, #16
 800c198:	d10b      	bne.n	800c1b2 <ESC_startmbxboot+0x56>
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 800c19a:	4b0a      	ldr	r3, [pc, #40]	; (800c1c4 <ESC_startmbxboot+0x68>)
 800c19c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
 800c1a0:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800c1a4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      ESCvar.MBXrun = 1;
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	bd10      	pop	{r4, pc}
      ESC_ALerror (ALERR_INVALIDBOOTMBXCONFIG);
 800c1b2:	2015      	movs	r0, #21
 800c1b4:	f7ff fe70 	bl	800be98 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 800c1b8:	4b02      	ldr	r3, [pc, #8]	; (800c1c4 <ESC_startmbxboot+0x68>)
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c1c0:	e7f5      	b.n	800c1ae <ESC_startmbxboot+0x52>
 800c1c2:	bf00      	nop
 800c1c4:	200082bc 	.word	0x200082bc

0800c1c8 <ESC_stopmbx>:
{
 800c1c8:	b510      	push	{r4, lr}
   ESCvar.MBXrun = 0;
 800c1ca:	2400      	movs	r4, #0
 800c1cc:	4b17      	ldr	r3, [pc, #92]	; (800c22c <ESC_stopmbx+0x64>)
 800c1ce:	f883 4068 	strb.w	r4, [r3, #104]	; 0x68
   ESC_SMdisable (0);
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f7ff fef2 	bl	800bfbc <ESC_SMdisable>
   ESC_SMdisable (1);
 800c1d8:	2001      	movs	r0, #1
 800c1da:	f7ff feef 	bl	800bfbc <ESC_SMdisable>
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 800c1de:	4620      	mov	r0, r4
 800c1e0:	e004      	b.n	800c1ec <ESC_stopmbx+0x24>
      MBXcontrol[n].state = MBXstate_idle;
 800c1e2:	4b13      	ldr	r3, [pc, #76]	; (800c230 <ESC_stopmbx+0x68>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	541a      	strb	r2, [r3, r0]
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	b2c0      	uxtb	r0, r0
 800c1ec:	2802      	cmp	r0, #2
 800c1ee:	d9f8      	bls.n	800c1e2 <ESC_stopmbx+0x1a>
   ESCvar.mbxoutpost = 0;
 800c1f0:	4b0e      	ldr	r3, [pc, #56]	; (800c22c <ESC_stopmbx+0x64>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
   ESCvar.mbxbackup = 0;
 800c1f8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
   ESCvar.xoe = 0;
 800c1fc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   ESCvar.mbxfree = 1;
 800c200:	2101      	movs	r1, #1
 800c202:	f883 1090 	strb.w	r1, [r3, #144]	; 0x90
   ESCvar.toggle = 0;
 800c206:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
   ESCvar.mbxincnt = 0;
 800c20a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
   ESCvar.segmented = 0;
 800c20e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
   ESCvar.frags = 0;
 800c212:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   ESCvar.fragsleft = 0;
 800c216:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   ESCvar.txcue = 0;
 800c21a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
   ESCvar.index = 0;
 800c21e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
   ESCvar.subindex = 0;
 800c222:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
   ESCvar.flags = 0;
 800c226:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 800c22a:	bd10      	pop	{r4, pc}
 800c22c:	200082bc 	.word	0x200082bc
 800c230:	20008fa8 	.word	0x20008fa8

0800c234 <ESC_readmbx>:
{
 800c234:	b530      	push	{r4, r5, lr}
 800c236:	b083      	sub	sp, #12
   ESC_read (ESC_MBX0_sma, MB, ESC_MBXHSIZE);
 800c238:	4c17      	ldr	r4, [pc, #92]	; (800c298 <ESC_readmbx+0x64>)
 800c23a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c23c:	4d17      	ldr	r5, [pc, #92]	; (800c29c <ESC_readmbx+0x68>)
 800c23e:	2206      	movs	r2, #6
 800c240:	4629      	mov	r1, r5
 800c242:	8818      	ldrh	r0, [r3, #0]
 800c244:	f002 fbe2 	bl	800ea0c <ESC_read>
   length = etohs (MB->header.length);
 800c248:	882b      	ldrh	r3, [r5, #0]
 800c24a:	b298      	uxth	r0, r3
 800c24c:	f8ad 3006 	strh.w	r3, [sp, #6]
   if (length > (ESC_MBX0_sml - ESC_MBXHSIZE))
 800c250:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c252:	8853      	ldrh	r3, [r2, #2]
 800c254:	1f99      	subs	r1, r3, #6
 800c256:	4288      	cmp	r0, r1
 800c258:	d901      	bls.n	800c25e <ESC_readmbx+0x2a>
      length = (uint16_t)(ESC_MBX0_sml - ESC_MBXHSIZE);
 800c25a:	f8ad 1006 	strh.w	r1, [sp, #6]
   ESC_read ((uint16_t)(ESC_MBX0_sma + ESC_MBXHSIZE), MB->b, length);
 800c25e:	8810      	ldrh	r0, [r2, #0]
 800c260:	3006      	adds	r0, #6
 800c262:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c266:	490e      	ldr	r1, [pc, #56]	; (800c2a0 <ESC_readmbx+0x6c>)
 800c268:	b280      	uxth	r0, r0
 800c26a:	f002 fbcf 	bl	800ea0c <ESC_read>
   if (length + ESC_MBXHSIZE < ESC_MBX0_sml)
 800c26e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c272:	3306      	adds	r3, #6
 800c274:	4a08      	ldr	r2, [pc, #32]	; (800c298 <ESC_readmbx+0x64>)
 800c276:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800c278:	8842      	ldrh	r2, [r0, #2]
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d304      	bcc.n	800c288 <ESC_readmbx+0x54>
   MBXcontrol[0].state = MBXstate_inclaim;
 800c27e:	4b09      	ldr	r3, [pc, #36]	; (800c2a4 <ESC_readmbx+0x70>)
 800c280:	2201      	movs	r2, #1
 800c282:	701a      	strb	r2, [r3, #0]
}
 800c284:	b003      	add	sp, #12
 800c286:	bd30      	pop	{r4, r5, pc}
      ESC_read (ESC_MBX0_sme, &length, 1);
 800c288:	2201      	movs	r2, #1
 800c28a:	f10d 0106 	add.w	r1, sp, #6
 800c28e:	8880      	ldrh	r0, [r0, #4]
 800c290:	f002 fbbc 	bl	800ea0c <ESC_read>
 800c294:	e7f3      	b.n	800c27e <ESC_readmbx+0x4a>
 800c296:	bf00      	nop
 800c298:	200082bc 	.word	0x200082bc
 800c29c:	200089a8 	.word	0x200089a8
 800c2a0:	200089ae 	.word	0x200089ae
 800c2a4:	20008fa8 	.word	0x20008fa8

0800c2a8 <ESC_writembx>:
{
 800c2a8:	b510      	push	{r4, lr}
 800c2aa:	b082      	sub	sp, #8
   _MBXh *MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 800c2ac:	4a13      	ldr	r2, [pc, #76]	; (800c2fc <ESC_writembx+0x54>)
 800c2ae:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 800c2b0:	fb03 f000 	mul.w	r0, r3, r0
 800c2b4:	4b12      	ldr	r3, [pc, #72]	; (800c300 <ESC_writembx+0x58>)
 800c2b6:	18c1      	adds	r1, r0, r3
   uint8_t dummy = 0;
 800c2b8:	2400      	movs	r4, #0
 800c2ba:	f88d 4007 	strb.w	r4, [sp, #7]
   length = etohs (MBh->length);
 800c2be:	5a1b      	ldrh	r3, [r3, r0]
   if (length > (ESC_MBX1_sml - ESC_MBXHSIZE))
 800c2c0:	6f50      	ldr	r0, [r2, #116]	; 0x74
 800c2c2:	8842      	ldrh	r2, [r0, #2]
 800c2c4:	1f94      	subs	r4, r2, #6
 800c2c6:	42a3      	cmp	r3, r4
 800c2c8:	d900      	bls.n	800c2cc <ESC_writembx+0x24>
      length = (uint16_t)(ESC_MBX1_sml - ESC_MBXHSIZE);
 800c2ca:	b2a3      	uxth	r3, r4
   ESC_write (ESC_MBX1_sma, MBh, (uint16_t)(ESC_MBXHSIZE + length));
 800c2cc:	1d9c      	adds	r4, r3, #6
 800c2ce:	b2a2      	uxth	r2, r4
 800c2d0:	8800      	ldrh	r0, [r0, #0]
 800c2d2:	f002 fbd7 	bl	800ea84 <ESC_write>
   if (length + ESC_MBXHSIZE < ESC_MBX1_sml)
 800c2d6:	4b09      	ldr	r3, [pc, #36]	; (800c2fc <ESC_writembx+0x54>)
 800c2d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2da:	885a      	ldrh	r2, [r3, #2]
 800c2dc:	4294      	cmp	r4, r2
 800c2de:	d305      	bcc.n	800c2ec <ESC_writembx+0x44>
   ESCvar.mbxfree = 0;
 800c2e0:	4b06      	ldr	r3, [pc, #24]	; (800c2fc <ESC_writembx+0x54>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 800c2e8:	b002      	add	sp, #8
 800c2ea:	bd10      	pop	{r4, pc}
      ESC_write (ESC_MBX1_sme, &dummy, 1);
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	f10d 0107 	add.w	r1, sp, #7
 800c2f2:	8898      	ldrh	r0, [r3, #4]
 800c2f4:	f002 fbc6 	bl	800ea84 <ESC_write>
 800c2f8:	e7f2      	b.n	800c2e0 <ESC_writembx+0x38>
 800c2fa:	bf00      	nop
 800c2fc:	200082bc 	.word	0x200082bc
 800c300:	200089a8 	.word	0x200089a8

0800c304 <ESC_ackmbxread>:
{
 800c304:	b510      	push	{r4, lr}
 800c306:	b082      	sub	sp, #8
   uint8_t dummy = 0;
 800c308:	2300      	movs	r3, #0
 800c30a:	f88d 3007 	strb.w	r3, [sp, #7]
   ESC_write (ESC_MBX1_sma, &dummy, 1);
 800c30e:	4c06      	ldr	r4, [pc, #24]	; (800c328 <ESC_ackmbxread+0x24>)
 800c310:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c312:	2201      	movs	r2, #1
 800c314:	f10d 0107 	add.w	r1, sp, #7
 800c318:	8818      	ldrh	r0, [r3, #0]
 800c31a:	f002 fbb3 	bl	800ea84 <ESC_write>
   ESCvar.mbxfree = 1;
 800c31e:	2301      	movs	r3, #1
 800c320:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800c324:	b002      	add	sp, #8
 800c326:	bd10      	pop	{r4, pc}
 800c328:	200082bc 	.word	0x200082bc

0800c32c <ESC_claimbuffer>:
   uint8_t n = ESC_MBXBUFFERS - 1;
 800c32c:	2002      	movs	r0, #2
   while ((n > 0) && (MBXcontrol[n].state))
 800c32e:	e001      	b.n	800c334 <ESC_claimbuffer+0x8>
      n--;
 800c330:	3801      	subs	r0, #1
 800c332:	b2c0      	uxtb	r0, r0
   while ((n > 0) && (MBXcontrol[n].state))
 800c334:	b118      	cbz	r0, 800c33e <ESC_claimbuffer+0x12>
 800c336:	4b1a      	ldr	r3, [pc, #104]	; (800c3a0 <ESC_claimbuffer+0x74>)
 800c338:	5c1b      	ldrb	r3, [r3, r0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1f8      	bne.n	800c330 <ESC_claimbuffer+0x4>
   if (n)
 800c33e:	b368      	cbz	r0, 800c39c <ESC_claimbuffer+0x70>
      MBXcontrol[n].state = MBXstate_outclaim;
 800c340:	4b17      	ldr	r3, [pc, #92]	; (800c3a0 <ESC_claimbuffer+0x74>)
 800c342:	2202      	movs	r2, #2
 800c344:	541a      	strb	r2, [r3, r0]
      MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 800c346:	4917      	ldr	r1, [pc, #92]	; (800c3a4 <ESC_claimbuffer+0x78>)
 800c348:	6eca      	ldr	r2, [r1, #108]	; 0x6c
 800c34a:	4b17      	ldr	r3, [pc, #92]	; (800c3a8 <ESC_claimbuffer+0x7c>)
 800c34c:	fb02 3300 	mla	r3, r2, r0, r3
      ESCvar.mbxcnt++;
 800c350:	f891 208a 	ldrb.w	r2, [r1, #138]	; 0x8a
 800c354:	3201      	adds	r2, #1
 800c356:	b2d2      	uxtb	r2, r2
 800c358:	f881 208a 	strb.w	r2, [r1, #138]	; 0x8a
      ESCvar.mbxcnt = (ESCvar.mbxcnt & 0x07);
 800c35c:	f002 0207 	and.w	r2, r2, #7
 800c360:	f881 208a 	strb.w	r2, [r1, #138]	; 0x8a
      if (ESCvar.mbxcnt == 0)
 800c364:	b91a      	cbnz	r2, 800c36e <ESC_claimbuffer+0x42>
         ESCvar.mbxcnt = 1;
 800c366:	460a      	mov	r2, r1
 800c368:	2101      	movs	r1, #1
 800c36a:	f882 108a 	strb.w	r1, [r2, #138]	; 0x8a
      MBh->address = htoes (0x0000);      // destination is master
 800c36e:	2200      	movs	r2, #0
 800c370:	709a      	strb	r2, [r3, #2]
 800c372:	70da      	strb	r2, [r3, #3]
      MBh->channel = 0;
 800c374:	7919      	ldrb	r1, [r3, #4]
 800c376:	f362 0105 	bfi	r1, r2, #0, #6
 800c37a:	7119      	strb	r1, [r3, #4]
      MBh->priority = 0;
 800c37c:	b2c9      	uxtb	r1, r1
 800c37e:	f362 1187 	bfi	r1, r2, #6, #2
 800c382:	7119      	strb	r1, [r3, #4]
      MBh->mbxcnt = ESCvar.mbxcnt & 0xFU;
 800c384:	4a07      	ldr	r2, [pc, #28]	; (800c3a4 <ESC_claimbuffer+0x78>)
 800c386:	f892 c08a 	ldrb.w	ip, [r2, #138]	; 0x8a
 800c38a:	7959      	ldrb	r1, [r3, #5]
 800c38c:	f36c 1107 	bfi	r1, ip, #4, #4
 800c390:	7159      	strb	r1, [r3, #5]
      ESCvar.txcue++;
 800c392:	f892 308f 	ldrb.w	r3, [r2, #143]	; 0x8f
 800c396:	3301      	adds	r3, #1
 800c398:	f882 308f 	strb.w	r3, [r2, #143]	; 0x8f
}
 800c39c:	4770      	bx	lr
 800c39e:	bf00      	nop
 800c3a0:	20008fa8 	.word	0x20008fa8
 800c3a4:	200082bc 	.word	0x200082bc
 800c3a8:	200089a8 	.word	0x200089a8

0800c3ac <ESC_outreqbuffer>:
   uint8_t n = ESC_MBXBUFFERS - 1;
 800c3ac:	2002      	movs	r0, #2
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 800c3ae:	e001      	b.n	800c3b4 <ESC_outreqbuffer+0x8>
      n--;
 800c3b0:	3801      	subs	r0, #1
 800c3b2:	b2c0      	uxtb	r0, r0
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 800c3b4:	b118      	cbz	r0, 800c3be <ESC_outreqbuffer+0x12>
 800c3b6:	4b02      	ldr	r3, [pc, #8]	; (800c3c0 <ESC_outreqbuffer+0x14>)
 800c3b8:	5c1b      	ldrb	r3, [r3, r0]
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	d1f8      	bne.n	800c3b0 <ESC_outreqbuffer+0x4>
}
 800c3be:	4770      	bx	lr
 800c3c0:	20008fa8 	.word	0x20008fa8

0800c3c4 <MBX_error>:
{
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	4604      	mov	r4, r0
   MBXout = ESC_claimbuffer ();
 800c3c8:	f7ff ffb0 	bl	800c32c <ESC_claimbuffer>
   if (MBXout)
 800c3cc:	b1d0      	cbz	r0, 800c404 <MBX_error+0x40>
 800c3ce:	4601      	mov	r1, r0
      mbxerr = (_MBXerr *) &MBX[MBXout * ESC_MBXSIZE];
 800c3d0:	4b0d      	ldr	r3, [pc, #52]	; (800c408 <MBX_error+0x44>)
 800c3d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c3d4:	fb00 f202 	mul.w	r2, r0, r2
 800c3d8:	480c      	ldr	r0, [pc, #48]	; (800c40c <MBX_error+0x48>)
 800c3da:	1813      	adds	r3, r2, r0
      mbxerr->mbxheader.length = htoes ((uint16_t) 0x04);
 800c3dc:	f04f 0c00 	mov.w	ip, #0
 800c3e0:	f04f 0e04 	mov.w	lr, #4
 800c3e4:	f800 e002 	strb.w	lr, [r0, r2]
 800c3e8:	f883 c001 	strb.w	ip, [r3, #1]
      mbxerr->mbxheader.mbxtype = MBXERR;
 800c3ec:	795a      	ldrb	r2, [r3, #5]
 800c3ee:	f36c 0203 	bfi	r2, ip, #0, #4
 800c3f2:	715a      	strb	r2, [r3, #5]
      mbxerr->type = htoes ((uint16_t) 0x01);
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	719a      	strb	r2, [r3, #6]
 800c3f8:	f883 c007 	strb.w	ip, [r3, #7]
      mbxerr->detail = htoes (error);
 800c3fc:	811c      	strh	r4, [r3, #8]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800c3fe:	4b04      	ldr	r3, [pc, #16]	; (800c410 <MBX_error+0x4c>)
 800c400:	2203      	movs	r2, #3
 800c402:	545a      	strb	r2, [r3, r1]
}
 800c404:	bd10      	pop	{r4, pc}
 800c406:	bf00      	nop
 800c408:	200082bc 	.word	0x200082bc
 800c40c:	200089a8 	.word	0x200089a8
 800c410:	20008fa8 	.word	0x20008fa8

0800c414 <ESC_mbxprocess>:
   if (ESCvar.MBXrun == 0)
 800c414:	4b71      	ldr	r3, [pc, #452]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c416:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
 800c41a:	2800      	cmp	r0, #0
 800c41c:	f000 80dc 	beq.w	800c5d8 <ESC_mbxprocess+0x1c4>
{
 800c420:	b510      	push	{r4, lr}
   if (ESCvar.ALevent & (ESCREG_ALEVENT_SM0 | ESCREG_ALEVENT_SM1))
 800c422:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c426:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c42a:	d12f      	bne.n	800c48c <ESC_mbxprocess+0x78>
   if (ESCvar.mbxoutpost && (ESCvar.ALevent & ESCREG_ALEVENT_SM1))
 800c42c:	4b6b      	ldr	r3, [pc, #428]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c42e:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
 800c432:	b121      	cbz	r1, 800c43e <ESC_mbxprocess+0x2a>
 800c434:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c438:	f413 7f00 	tst.w	r3, #512	; 0x200
 800c43c:	d12d      	bne.n	800c49a <ESC_mbxprocess+0x86>
   if (ESCvar.SM[1].ECrep != ESCvar.toggle)
 800c43e:	4a67      	ldr	r2, [pc, #412]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c440:	f892 30ca 	ldrb.w	r3, [r2, #202]	; 0xca
 800c444:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c448:	f892 20aa 	ldrb.w	r2, [r2, #170]	; 0xaa
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d05d      	beq.n	800c50c <ESC_mbxprocess+0xf8>
      if (ESCvar.mbxoutpost || ESCvar.mbxbackup)
 800c450:	4b62      	ldr	r3, [pc, #392]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c452:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800c456:	b1bb      	cbz	r3, 800c488 <ESC_mbxprocess+0x74>
         if (ESCvar.mbxoutpost == 0)
 800c458:	2900      	cmp	r1, #0
 800c45a:	d146      	bne.n	800c4ea <ESC_mbxprocess+0xd6>
            ESC_writembx (ESCvar.mbxbackup);
 800c45c:	4b5f      	ldr	r3, [pc, #380]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c45e:	f893 008d 	ldrb.w	r0, [r3, #141]	; 0x8d
 800c462:	f7ff ff21 	bl	800c2a8 <ESC_writembx>
         ESCvar.toggle = ESCvar.SM[1].ECrep;
 800c466:	4b5d      	ldr	r3, [pc, #372]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c468:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
 800c46c:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800c470:	460a      	mov	r2, r1
 800c472:	f883 10aa 	strb.w	r1, [r3, #170]	; 0xaa
         ESCvar.SM[1].PDIrep = ESCvar.toggle & 0x1U;
 800c476:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
 800c47a:	f362 0141 	bfi	r1, r2, #1, #1
 800c47e:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
         ESC_SMwritepdi (1);
 800c482:	2001      	movs	r0, #1
 800c484:	f7ff fd7a 	bl	800bf7c <ESC_SMwritepdi>
      return 0;
 800c488:	2000      	movs	r0, #0
}
 800c48a:	bd10      	pop	{r4, pc}
      ESC_SMstatus (0);
 800c48c:	2000      	movs	r0, #0
 800c48e:	f7ff fd65 	bl	800bf5c <ESC_SMstatus>
      ESC_SMstatus (1);
 800c492:	2001      	movs	r0, #1
 800c494:	f7ff fd62 	bl	800bf5c <ESC_SMstatus>
 800c498:	e7c8      	b.n	800c42c <ESC_mbxprocess+0x18>
      ESC_ackmbxread ();
 800c49a:	f7ff ff33 	bl	800c304 <ESC_ackmbxread>
      measure(read_local_time());
 800c49e:	f7ff fc71 	bl	800bd84 <read_local_time>
 800c4a2:	f7f4 fb5b 	bl	8000b5c <measure>
      if (ESCvar.mbxbackup)
 800c4a6:	4b4d      	ldr	r3, [pc, #308]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c4a8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800c4ac:	b113      	cbz	r3, 800c4b4 <ESC_mbxprocess+0xa0>
         MBXcontrol[ESCvar.mbxbackup].state = MBXstate_idle;
 800c4ae:	4a4c      	ldr	r2, [pc, #304]	; (800c5e0 <ESC_mbxprocess+0x1cc>)
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	54d1      	strb	r1, [r2, r3]
      if (MBXcontrol[ESCvar.mbxoutpost].state == MBXstate_again)
 800c4b4:	4b49      	ldr	r3, [pc, #292]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c4b6:	f893 008c 	ldrb.w	r0, [r3, #140]	; 0x8c
 800c4ba:	4b49      	ldr	r3, [pc, #292]	; (800c5e0 <ESC_mbxprocess+0x1cc>)
 800c4bc:	5c1b      	ldrb	r3, [r3, r0]
 800c4be:	2b06      	cmp	r3, #6
 800c4c0:	d010      	beq.n	800c4e4 <ESC_mbxprocess+0xd0>
      MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_backup;
 800c4c2:	4b46      	ldr	r3, [pc, #280]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c4c4:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800c4c8:	4945      	ldr	r1, [pc, #276]	; (800c5e0 <ESC_mbxprocess+0x1cc>)
 800c4ca:	2005      	movs	r0, #5
 800c4cc:	5488      	strb	r0, [r1, r2]
      ESCvar.mbxbackup = ESCvar.mbxoutpost;
 800c4ce:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
      ESCvar.mbxoutpost = 0;
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      if(ESCvar.xoe > 0)
 800c4d8:	f893 008e 	ldrb.w	r0, [r3, #142]	; 0x8e
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	d0d4      	beq.n	800c48a <ESC_mbxprocess+0x76>
         return 1;
 800c4e0:	2001      	movs	r0, #1
 800c4e2:	e7d2      	b.n	800c48a <ESC_mbxprocess+0x76>
         ESC_writembx (ESCvar.mbxoutpost);
 800c4e4:	f7ff fee0 	bl	800c2a8 <ESC_writembx>
 800c4e8:	e7eb      	b.n	800c4c2 <ESC_mbxprocess+0xae>
            ESC_SMdisable (1);
 800c4ea:	2001      	movs	r0, #1
 800c4ec:	f7ff fd66 	bl	800bfbc <ESC_SMdisable>
            MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_again;
 800c4f0:	4c3a      	ldr	r4, [pc, #232]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c4f2:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800c4f6:	4a3a      	ldr	r2, [pc, #232]	; (800c5e0 <ESC_mbxprocess+0x1cc>)
 800c4f8:	2106      	movs	r1, #6
 800c4fa:	54d1      	strb	r1, [r2, r3]
            ESC_SMenable (1);
 800c4fc:	2001      	movs	r0, #1
 800c4fe:	f7ff fd4d 	bl	800bf9c <ESC_SMenable>
            ESC_writembx (ESCvar.mbxbackup);
 800c502:	f894 008d 	ldrb.w	r0, [r4, #141]	; 0x8d
 800c506:	f7ff fecf 	bl	800c2a8 <ESC_writembx>
 800c50a:	e7ac      	b.n	800c466 <ESC_mbxprocess+0x52>
   if (ESCvar.txcue && (ESCvar.mbxfree || !ESCvar.SM[1].MBXstat))
 800c50c:	4b33      	ldr	r3, [pc, #204]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c50e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800c512:	b173      	cbz	r3, 800c532 <ESC_mbxprocess+0x11e>
 800c514:	4b31      	ldr	r3, [pc, #196]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c516:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c51a:	b92b      	cbnz	r3, 800c528 <ESC_mbxprocess+0x114>
 800c51c:	4b2f      	ldr	r3, [pc, #188]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c51e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c522:	f013 0f08 	tst.w	r3, #8
 800c526:	d104      	bne.n	800c532 <ESC_mbxprocess+0x11e>
      mbxhandle = ESC_outreqbuffer ();
 800c528:	f7ff ff40 	bl	800c3ac <ESC_outreqbuffer>
      if (mbxhandle)
 800c52c:	4604      	mov	r4, r0
 800c52e:	2800      	cmp	r0, #0
 800c530:	d131      	bne.n	800c596 <ESC_mbxprocess+0x182>
   if ((ESCvar.SM[0].MBXstat != 0) && (MBXcontrol[0].state == 0)
 800c532:	4b2a      	ldr	r3, [pc, #168]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c534:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
 800c538:	f010 0008 	ands.w	r0, r0, #8
 800c53c:	d0a5      	beq.n	800c48a <ESC_mbxprocess+0x76>
 800c53e:	4b28      	ldr	r3, [pc, #160]	; (800c5e0 <ESC_mbxprocess+0x1cc>)
 800c540:	7818      	ldrb	r0, [r3, #0]
 800c542:	2800      	cmp	r0, #0
 800c544:	d146      	bne.n	800c5d4 <ESC_mbxprocess+0x1c0>
         && (ESCvar.mbxoutpost == 0) && (ESCvar.xoe == 0))
 800c546:	4b25      	ldr	r3, [pc, #148]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c54c:	f013 1fff 	tst.w	r3, #16711935	; 0xff00ff
 800c550:	d19b      	bne.n	800c48a <ESC_mbxprocess+0x76>
      ESC_readmbx ();
 800c552:	f7ff fe6f 	bl	800c234 <ESC_readmbx>
      ESCvar.SM[0].MBXstat = 0;
 800c556:	4b21      	ldr	r3, [pc, #132]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c558:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
 800c55c:	f36f 02c3 	bfc	r2, #3, #1
 800c560:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
      if (etohs (MBh->length) == 0)
 800c564:	4b1f      	ldr	r3, [pc, #124]	; (800c5e4 <ESC_mbxprocess+0x1d0>)
 800c566:	881b      	ldrh	r3, [r3, #0]
 800c568:	b34b      	cbz	r3, 800c5be <ESC_mbxprocess+0x1aa>
      if ((MBh->mbxcnt != 0) && (MBh->mbxcnt == ESCvar.mbxincnt))
 800c56a:	4b1e      	ldr	r3, [pc, #120]	; (800c5e4 <ESC_mbxprocess+0x1d0>)
 800c56c:	795b      	ldrb	r3, [r3, #5]
 800c56e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800c572:	d007      	beq.n	800c584 <ESC_mbxprocess+0x170>
 800c574:	4b1b      	ldr	r3, [pc, #108]	; (800c5e4 <ESC_mbxprocess+0x1d0>)
 800c576:	795a      	ldrb	r2, [r3, #5]
 800c578:	4b18      	ldr	r3, [pc, #96]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c57a:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800c57e:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 800c582:	d023      	beq.n	800c5cc <ESC_mbxprocess+0x1b8>
      ESCvar.mbxincnt = MBh->mbxcnt;
 800c584:	4b17      	ldr	r3, [pc, #92]	; (800c5e4 <ESC_mbxprocess+0x1d0>)
 800c586:	795b      	ldrb	r3, [r3, #5]
 800c588:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c58c:	4a13      	ldr	r2, [pc, #76]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c58e:	f882 308b 	strb.w	r3, [r2, #139]	; 0x8b
      return 1;
 800c592:	2001      	movs	r0, #1
 800c594:	e779      	b.n	800c48a <ESC_mbxprocess+0x76>
         ESC_writembx (mbxhandle);
 800c596:	f7ff fe87 	bl	800c2a8 <ESC_writembx>
         ESC_SMstatus (1);
 800c59a:	2001      	movs	r0, #1
 800c59c:	f7ff fcde 	bl	800bf5c <ESC_SMstatus>
         MBXcontrol[mbxhandle].state = MBXstate_outpost;
 800c5a0:	4b0f      	ldr	r3, [pc, #60]	; (800c5e0 <ESC_mbxprocess+0x1cc>)
 800c5a2:	2204      	movs	r2, #4
 800c5a4:	551a      	strb	r2, [r3, r4]
         ESCvar.mbxoutpost = mbxhandle;
 800c5a6:	4b0d      	ldr	r3, [pc, #52]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c5a8:	f883 408c 	strb.w	r4, [r3, #140]	; 0x8c
         if (ESCvar.txcue)
 800c5ac:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d0be      	beq.n	800c532 <ESC_mbxprocess+0x11e>
            ESCvar.txcue--;
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	4a09      	ldr	r2, [pc, #36]	; (800c5dc <ESC_mbxprocess+0x1c8>)
 800c5b8:	f882 308f 	strb.w	r3, [r2, #143]	; 0x8f
 800c5bc:	e7b9      	b.n	800c532 <ESC_mbxprocess+0x11e>
         MBX_error (MBXERR_INVALIDHEADER);
 800c5be:	2005      	movs	r0, #5
 800c5c0:	f7ff ff00 	bl	800c3c4 <MBX_error>
         MBXcontrol[0].state = MBXstate_idle;
 800c5c4:	4b06      	ldr	r3, [pc, #24]	; (800c5e0 <ESC_mbxprocess+0x1cc>)
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	701a      	strb	r2, [r3, #0]
 800c5ca:	e7ce      	b.n	800c56a <ESC_mbxprocess+0x156>
         MBXcontrol[0].state = MBXstate_idle;
 800c5cc:	4b04      	ldr	r3, [pc, #16]	; (800c5e0 <ESC_mbxprocess+0x1cc>)
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	701a      	strb	r2, [r3, #0]
 800c5d2:	e7d7      	b.n	800c584 <ESC_mbxprocess+0x170>
   return 0;
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	e758      	b.n	800c48a <ESC_mbxprocess+0x76>
}
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop
 800c5dc:	200082bc 	.word	0x200082bc
 800c5e0:	20008fa8 	.word	0x20008fa8
 800c5e4:	200089a8 	.word	0x200089a8

0800c5e8 <ESC_xoeprocess>:
{
 800c5e8:	b508      	push	{r3, lr}
   if (ESCvar.MBXrun == 0)
 800c5ea:	4b10      	ldr	r3, [pc, #64]	; (800c62c <ESC_xoeprocess+0x44>)
 800c5ec:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c5f0:	b13b      	cbz	r3, 800c602 <ESC_xoeprocess+0x1a>
   if ((ESCvar.xoe == 0) && (MBXcontrol[0].state == MBXstate_inclaim))
 800c5f2:	4b0e      	ldr	r3, [pc, #56]	; (800c62c <ESC_xoeprocess+0x44>)
 800c5f4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800c5f8:	b91b      	cbnz	r3, 800c602 <ESC_xoeprocess+0x1a>
 800c5fa:	4b0d      	ldr	r3, [pc, #52]	; (800c630 <ESC_xoeprocess+0x48>)
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d000      	beq.n	800c604 <ESC_xoeprocess+0x1c>
}
 800c602:	bd08      	pop	{r3, pc}
      if ((mbh->mbxtype == 0) || (etohs (mbh->length) == 0))
 800c604:	4b0b      	ldr	r3, [pc, #44]	; (800c634 <ESC_xoeprocess+0x4c>)
 800c606:	795b      	ldrb	r3, [r3, #5]
 800c608:	f013 0f0f 	tst.w	r3, #15
 800c60c:	d002      	beq.n	800c614 <ESC_xoeprocess+0x2c>
 800c60e:	4b09      	ldr	r3, [pc, #36]	; (800c634 <ESC_xoeprocess+0x4c>)
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	b933      	cbnz	r3, 800c622 <ESC_xoeprocess+0x3a>
         MBX_error (MBXERR_INVALIDHEADER);
 800c614:	2005      	movs	r0, #5
 800c616:	f7ff fed5 	bl	800c3c4 <MBX_error>
      MBXcontrol[0].state = MBXstate_idle;
 800c61a:	4b05      	ldr	r3, [pc, #20]	; (800c630 <ESC_xoeprocess+0x48>)
 800c61c:	2200      	movs	r2, #0
 800c61e:	701a      	strb	r2, [r3, #0]
 800c620:	e7ef      	b.n	800c602 <ESC_xoeprocess+0x1a>
         MBX_error (MBXERR_UNSUPPORTEDPROTOCOL);
 800c622:	2002      	movs	r0, #2
 800c624:	f7ff fece 	bl	800c3c4 <MBX_error>
 800c628:	e7f7      	b.n	800c61a <ESC_xoeprocess+0x32>
 800c62a:	bf00      	nop
 800c62c:	200082bc 	.word	0x200082bc
 800c630:	20008fa8 	.word	0x20008fa8
 800c634:	200089a8 	.word	0x200089a8

0800c638 <ESC_checkSM23>:
{
 800c638:	b538      	push	{r3, r4, r5, lr}
 800c63a:	4605      	mov	r5, r0
   ESC_read (ESCREG_SM2, (void *) &ESCvar.SM[2], sizeof (ESCvar.SM[2]));
 800c63c:	4c38      	ldr	r4, [pc, #224]	; (800c720 <ESC_checkSM23+0xe8>)
 800c63e:	2208      	movs	r2, #8
 800c640:	4621      	mov	r1, r4
 800c642:	f44f 6001 	mov.w	r0, #2064	; 0x810
 800c646:	f002 f9e1 	bl	800ea0c <ESC_read>
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 800c64a:	8823      	ldrh	r3, [r4, #0]
 800c64c:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 800c650:	d139      	bne.n	800c6c6 <ESC_checkSM23+0x8e>
       (SM->Command != ESC_SM2_smc))
 800c652:	f1a4 03cc 	sub.w	r3, r4, #204	; 0xcc
 800c656:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 800c65a:	2b24      	cmp	r3, #36	; 0x24
 800c65c:	d133      	bne.n	800c6c6 <ESC_checkSM23+0x8e>
   else if (etohs (SM->Length) != ESCvar.ESC_SM2_sml)
 800c65e:	4a31      	ldr	r2, [pc, #196]	; (800c724 <ESC_checkSM23+0xec>)
 800c660:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
 800c664:	f8b2 2078 	ldrh.w	r2, [r2, #120]	; 0x78
 800c668:	4293      	cmp	r3, r2
 800c66a:	d132      	bne.n	800c6d2 <ESC_checkSM23+0x9a>
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800c66c:	492d      	ldr	r1, [pc, #180]	; (800c724 <ESC_checkSM23+0xec>)
 800c66e:	f891 10d2 	ldrb.w	r1, [r1, #210]	; 0xd2
   else if (((ESC_SM2_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 800c672:	f011 0f01 	tst.w	r1, #1
 800c676:	d100      	bne.n	800c67a <ESC_checkSM23+0x42>
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800c678:	bb8a      	cbnz	r2, 800c6de <ESC_checkSM23+0xa6>
   if ((ESC_SM2_sma + (etohs (SM->Length) * 3)) > ESC_SM3_sma)
 800c67a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c67e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c682:	dc32      	bgt.n	800c6ea <ESC_checkSM23+0xb2>
   ESC_read (ESCREG_SM3, (void *) &ESCvar.SM[3], sizeof (ESCvar.SM[3]));
 800c684:	4c28      	ldr	r4, [pc, #160]	; (800c728 <ESC_checkSM23+0xf0>)
 800c686:	2208      	movs	r2, #8
 800c688:	4621      	mov	r1, r4
 800c68a:	f640 0018 	movw	r0, #2072	; 0x818
 800c68e:	f002 f9bd 	bl	800ea0c <ESC_read>
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 800c692:	8823      	ldrh	r3, [r4, #0]
 800c694:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 800c698:	d12d      	bne.n	800c6f6 <ESC_checkSM23+0xbe>
       (SM->Command != ESC_SM3_smc))
 800c69a:	f1a4 03d4 	sub.w	r3, r4, #212	; 0xd4
 800c69e:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 800c6a2:	2b20      	cmp	r3, #32
 800c6a4:	d127      	bne.n	800c6f6 <ESC_checkSM23+0xbe>
   else if (etohs (SM->Length) != ESCvar.ESC_SM3_sml)
 800c6a6:	4b1f      	ldr	r3, [pc, #124]	; (800c724 <ESC_checkSM23+0xec>)
 800c6a8:	f8b3 20d6 	ldrh.w	r2, [r3, #214]	; 0xd6
 800c6ac:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d126      	bne.n	800c702 <ESC_checkSM23+0xca>
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800c6b4:	4a1b      	ldr	r2, [pc, #108]	; (800c724 <ESC_checkSM23+0xec>)
 800c6b6:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
   else if (((ESC_SM3_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 800c6ba:	f012 0f01 	tst.w	r2, #1
 800c6be:	d12c      	bne.n	800c71a <ESC_checkSM23+0xe2>
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800c6c0:	bb2b      	cbnz	r3, 800c70e <ESC_checkSM23+0xd6>
   return state;
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	e004      	b.n	800c6d0 <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800c6c6:	4b17      	ldr	r3, [pc, #92]	; (800c724 <ESC_checkSM23+0xec>)
 800c6c8:	2204      	movs	r2, #4
 800c6ca:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c6ce:	2012      	movs	r0, #18
}
 800c6d0:	bd38      	pop	{r3, r4, r5, pc}
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800c6d2:	4b14      	ldr	r3, [pc, #80]	; (800c724 <ESC_checkSM23+0xec>)
 800c6d4:	2204      	movs	r2, #4
 800c6d6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c6da:	2012      	movs	r0, #18
 800c6dc:	e7f8      	b.n	800c6d0 <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800c6de:	4b11      	ldr	r3, [pc, #68]	; (800c724 <ESC_checkSM23+0xec>)
 800c6e0:	2204      	movs	r2, #4
 800c6e2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c6e6:	2012      	movs	r0, #18
 800c6e8:	e7f2      	b.n	800c6d0 <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800c6ea:	4b0e      	ldr	r3, [pc, #56]	; (800c724 <ESC_checkSM23+0xec>)
 800c6ec:	2204      	movs	r2, #4
 800c6ee:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c6f2:	2012      	movs	r0, #18
 800c6f4:	e7ec      	b.n	800c6d0 <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800c6f6:	4b0b      	ldr	r3, [pc, #44]	; (800c724 <ESC_checkSM23+0xec>)
 800c6f8:	2208      	movs	r2, #8
 800c6fa:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c6fe:	2012      	movs	r0, #18
 800c700:	e7e6      	b.n	800c6d0 <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800c702:	4b08      	ldr	r3, [pc, #32]	; (800c724 <ESC_checkSM23+0xec>)
 800c704:	2208      	movs	r2, #8
 800c706:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c70a:	2012      	movs	r0, #18
 800c70c:	e7e0      	b.n	800c6d0 <ESC_checkSM23+0x98>
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800c70e:	4b05      	ldr	r3, [pc, #20]	; (800c724 <ESC_checkSM23+0xec>)
 800c710:	2208      	movs	r2, #8
 800c712:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      return (ESCpreop | ESCerror);
 800c716:	2012      	movs	r0, #18
 800c718:	e7da      	b.n	800c6d0 <ESC_checkSM23+0x98>
   return state;
 800c71a:	4628      	mov	r0, r5
 800c71c:	e7d8      	b.n	800c6d0 <ESC_checkSM23+0x98>
 800c71e:	bf00      	nop
 800c720:	20008388 	.word	0x20008388
 800c724:	200082bc 	.word	0x200082bc
 800c728:	20008390 	.word	0x20008390

0800c72c <ESC_startinput>:
{
 800c72c:	b510      	push	{r4, lr}
   state = ESC_checkSM23 (state);
 800c72e:	f7ff ff83 	bl	800c638 <ESC_checkSM23>
 800c732:	4604      	mov	r4, r0
   if (state != (ESCpreop | ESCerror))
 800c734:	2812      	cmp	r0, #18
 800c736:	d015      	beq.n	800c764 <ESC_startinput+0x38>
      if (ESCvar.ESC_SM3_sml > 0)
 800c738:	4b29      	ldr	r3, [pc, #164]	; (800c7e0 <ESC_startinput+0xb4>)
 800c73a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800c73e:	b96b      	cbnz	r3, 800c75c <ESC_startinput+0x30>
      CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_INPUT);
 800c740:	f3bf 8f5b 	dmb	ish
 800c744:	4b27      	ldr	r3, [pc, #156]	; (800c7e4 <ESC_startinput+0xb8>)
 800c746:	2201      	movs	r2, #1
 800c748:	701a      	strb	r2, [r3, #0]
 800c74a:	f3bf 8f5b 	dmb	ish
   if (ESCvar.use_interrupt == 0)
 800c74e:	4b24      	ldr	r3, [pc, #144]	; (800c7e0 <ESC_startinput+0xb4>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	b10b      	cbz	r3, 800c758 <ESC_startinput+0x2c>
   if (state != (ESCpreop | ESCerror))
 800c754:	2c12      	cmp	r4, #18
 800c756:	d119      	bne.n	800c78c <ESC_startinput+0x60>
}
 800c758:	4620      	mov	r0, r4
 800c75a:	bd10      	pop	{r4, pc}
         ESC_SMenable (3);
 800c75c:	2003      	movs	r0, #3
 800c75e:	f7ff fc1d 	bl	800bf9c <ESC_SMenable>
 800c762:	e7ed      	b.n	800c740 <ESC_startinput+0x14>
      ESC_SMdisable (2);
 800c764:	2002      	movs	r0, #2
 800c766:	f7ff fc29 	bl	800bfbc <ESC_SMdisable>
      ESC_SMdisable (3);
 800c76a:	2003      	movs	r0, #3
 800c76c:	f7ff fc26 	bl	800bfbc <ESC_SMdisable>
      if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 800c770:	4b1b      	ldr	r3, [pc, #108]	; (800c7e0 <ESC_startinput+0xb4>)
 800c772:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800c776:	f013 0f08 	tst.w	r3, #8
 800c77a:	d003      	beq.n	800c784 <ESC_startinput+0x58>
         ESC_ALerror (ALERR_INVALIDINPUTSM);
 800c77c:	201e      	movs	r0, #30
 800c77e:	f7ff fb8b 	bl	800be98 <ESC_ALerror>
 800c782:	e7e4      	b.n	800c74e <ESC_startinput+0x22>
         ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800c784:	201d      	movs	r0, #29
 800c786:	f7ff fb87 	bl	800be98 <ESC_ALerror>
 800c78a:	e7e0      	b.n	800c74e <ESC_startinput+0x22>
      dc_check_result = ESC_checkDC();
 800c78c:	f7ff fc3e 	bl	800c00c <ESC_checkDC>
      if(dc_check_result > 0)
 800c790:	b988      	cbnz	r0, 800c7b6 <ESC_startinput+0x8a>
         if (ESCvar.esc_hw_interrupt_enable != NULL)
 800c792:	4b13      	ldr	r3, [pc, #76]	; (800c7e0 <ESC_startinput+0xb4>)
 800c794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c796:	2b00      	cmp	r3, #0
 800c798:	d0de      	beq.n	800c758 <ESC_startinput+0x2c>
            if (ESCvar.ESC_SM2_sml == 0)
 800c79a:	4a11      	ldr	r2, [pc, #68]	; (800c7e0 <ESC_startinput+0xb4>)
 800c79c:	f8b2 2078 	ldrh.w	r2, [r2, #120]	; 0x78
 800c7a0:	b9d2      	cbnz	r2, 800c7d8 <ESC_startinput+0xac>
               int_mask = ESCREG_ALEVENT_SM3;
 800c7a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
            if (ESCvar.dcsync > 0)
 800c7a6:	4a0e      	ldr	r2, [pc, #56]	; (800c7e0 <ESC_startinput+0xb4>)
 800c7a8:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 800c7ac:	b10a      	cbz	r2, 800c7b2 <ESC_startinput+0x86>
               int_mask |= ESCREG_ALEVENT_DC_SYNC0;
 800c7ae:	f040 0004 	orr.w	r0, r0, #4
            ESCvar.esc_hw_interrupt_enable (int_mask);
 800c7b2:	4798      	blx	r3
 800c7b4:	e7d0      	b.n	800c758 <ESC_startinput+0x2c>
         ESC_ALerror (dc_check_result);
 800c7b6:	f7ff fb6f 	bl	800be98 <ESC_ALerror>
         ESC_SMdisable (2);
 800c7ba:	2002      	movs	r0, #2
 800c7bc:	f7ff fbfe 	bl	800bfbc <ESC_SMdisable>
         ESC_SMdisable (3);
 800c7c0:	2003      	movs	r0, #3
 800c7c2:	f7ff fbfb 	bl	800bfbc <ESC_SMdisable>
         CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 800c7c6:	f3bf 8f5b 	dmb	ish
 800c7ca:	4b06      	ldr	r3, [pc, #24]	; (800c7e4 <ESC_startinput+0xb8>)
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	701a      	strb	r2, [r3, #0]
 800c7d0:	f3bf 8f5b 	dmb	ish
         state = (ESCpreop | ESCerror);
 800c7d4:	2412      	movs	r4, #18
 800c7d6:	e7bf      	b.n	800c758 <ESC_startinput+0x2c>
               int_mask = ESCREG_ALEVENT_SM2;
 800c7d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c7dc:	e7e3      	b.n	800c7a6 <ESC_startinput+0x7a>
 800c7de:	bf00      	nop
 800c7e0:	200082bc 	.word	0x200082bc
 800c7e4:	200083a5 	.word	0x200083a5

0800c7e8 <ESC_stopinput>:
{
 800c7e8:	b510      	push	{r4, lr}
   CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 800c7ea:	4c0c      	ldr	r4, [pc, #48]	; (800c81c <ESC_stopinput+0x34>)
 800c7ec:	f3bf 8f5b 	dmb	ish
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	7023      	strb	r3, [r4, #0]
 800c7f4:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (3);
 800c7f8:	2003      	movs	r0, #3
 800c7fa:	f7ff fbdf 	bl	800bfbc <ESC_SMdisable>
   ESC_SMdisable (2);
 800c7fe:	2002      	movs	r0, #2
 800c800:	f7ff fbdc 	bl	800bfbc <ESC_SMdisable>
   if ((ESCvar.use_interrupt != 0) &&
 800c804:	f854 3ce9 	ldr.w	r3, [r4, #-233]
 800c808:	b133      	cbz	r3, 800c818 <ESC_stopinput+0x30>
         (ESCvar.esc_hw_interrupt_disable != NULL))
 800c80a:	f1a4 03e9 	sub.w	r3, r4, #233	; 0xe9
 800c80e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   if ((ESCvar.use_interrupt != 0) &&
 800c810:	b113      	cbz	r3, 800c818 <ESC_stopinput+0x30>
      ESCvar.esc_hw_interrupt_disable (ESCREG_ALEVENT_DC_SYNC0 |
 800c812:	f640 4004 	movw	r0, #3076	; 0xc04
 800c816:	4798      	blx	r3
}
 800c818:	bd10      	pop	{r4, pc}
 800c81a:	bf00      	nop
 800c81c:	200083a5 	.word	0x200083a5

0800c820 <ESC_startoutput>:
{
 800c820:	b510      	push	{r4, lr}
 800c822:	4604      	mov	r4, r0
   if (ESCvar.ESC_SM2_sml > 0)
 800c824:	4b0b      	ldr	r3, [pc, #44]	; (800c854 <ESC_startoutput+0x34>)
 800c826:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800c82a:	b973      	cbnz	r3, 800c84a <ESC_startoutput+0x2a>
   CC_ATOMIC_OR(ESCvar.App.state, APPSTATE_OUTPUT);
 800c82c:	4b0a      	ldr	r3, [pc, #40]	; (800c858 <ESC_startoutput+0x38>)
 800c82e:	f3bf 8f5b 	dmb	ish
 800c832:	e8d3 1f4f 	ldrexb	r1, [r3]
 800c836:	f041 0102 	orr.w	r1, r1, #2
 800c83a:	e8c3 1f42 	strexb	r2, r1, [r3]
 800c83e:	2a00      	cmp	r2, #0
 800c840:	d1f7      	bne.n	800c832 <ESC_startoutput+0x12>
 800c842:	f3bf 8f5b 	dmb	ish
}
 800c846:	4620      	mov	r0, r4
 800c848:	bd10      	pop	{r4, pc}
      ESC_SMenable (2);
 800c84a:	2002      	movs	r0, #2
 800c84c:	f7ff fba6 	bl	800bf9c <ESC_SMenable>
 800c850:	e7ec      	b.n	800c82c <ESC_startoutput+0xc>
 800c852:	bf00      	nop
 800c854:	200082bc 	.word	0x200082bc
 800c858:	200083a5 	.word	0x200083a5

0800c85c <ESC_stopoutput>:
{
 800c85c:	b508      	push	{r3, lr}
   CC_ATOMIC_AND(ESCvar.App.state, APPSTATE_INPUT);
 800c85e:	4b09      	ldr	r3, [pc, #36]	; (800c884 <ESC_stopoutput+0x28>)
 800c860:	f3bf 8f5b 	dmb	ish
 800c864:	e8d3 1f4f 	ldrexb	r1, [r3]
 800c868:	f001 0101 	and.w	r1, r1, #1
 800c86c:	e8c3 1f42 	strexb	r2, r1, [r3]
 800c870:	2a00      	cmp	r2, #0
 800c872:	d1f7      	bne.n	800c864 <ESC_stopoutput+0x8>
 800c874:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (2);
 800c878:	2002      	movs	r0, #2
 800c87a:	f7ff fb9f 	bl	800bfbc <ESC_SMdisable>
   APP_safeoutput ();
 800c87e:	f7ff f9a9 	bl	800bbd4 <APP_safeoutput>
}
 800c882:	bd08      	pop	{r3, pc}
 800c884:	200083a5 	.word	0x200083a5

0800c888 <ESC_ALstatusgotoerror>:
   if(status & ESCop)
 800c888:	f010 0f08 	tst.w	r0, #8
 800c88c:	d135      	bne.n	800c8fa <ESC_ALstatusgotoerror+0x72>
{
 800c88e:	b530      	push	{r4, r5, lr}
 800c890:	b083      	sub	sp, #12
 800c892:	4604      	mov	r4, r0
 800c894:	460d      	mov	r5, r1
   as = ESCvar.ALstatus & ESCREG_AL_ERRACKMASK;
 800c896:	4a19      	ldr	r2, [pc, #100]	; (800c8fc <ESC_ALstatusgotoerror+0x74>)
 800c898:	f8b2 3080 	ldrh.w	r3, [r2, #128]	; 0x80
 800c89c:	f003 030f 	and.w	r3, r3, #15
 800c8a0:	f88d 3006 	strb.w	r3, [sp, #6]
   an = as;
 800c8a4:	f88d 3007 	strb.w	r3, [sp, #7]
   as = (uint8_t)(((status & ESCREG_AL_ERRACKMASK) << 4) | (as & 0x0f));
 800c8a8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800c8ac:	f88d 3006 	strb.w	r3, [sp, #6]
   if (ESCvar.pre_state_change_hook != NULL)
 800c8b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c8b2:	b123      	cbz	r3, 800c8be <ESC_ALstatusgotoerror+0x36>
      ESCvar.pre_state_change_hook (&as, &an);
 800c8b4:	f10d 0107 	add.w	r1, sp, #7
 800c8b8:	f10d 0006 	add.w	r0, sp, #6
 800c8bc:	4798      	blx	r3
   if ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 800c8be:	f3bf 8f5b 	dmb	ish
 800c8c2:	4b0f      	ldr	r3, [pc, #60]	; (800c900 <ESC_ALstatusgotoerror+0x78>)
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	f3bf 8f5b 	dmb	ish
 800c8ca:	f013 0f02 	tst.w	r3, #2
 800c8ce:	d111      	bne.n	800c8f4 <ESC_ALstatusgotoerror+0x6c>
   ESC_ALerror(errornumber);
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	f7ff fae1 	bl	800be98 <ESC_ALerror>
   ESC_ALstatus(status);
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f7ff fb12 	bl	800bf00 <ESC_ALstatus>
   an = status;
 800c8dc:	f88d 4007 	strb.w	r4, [sp, #7]
   if (ESCvar.post_state_change_hook != NULL)
 800c8e0:	4b06      	ldr	r3, [pc, #24]	; (800c8fc <ESC_ALstatusgotoerror+0x74>)
 800c8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8e4:	b123      	cbz	r3, 800c8f0 <ESC_ALstatusgotoerror+0x68>
      ESCvar.post_state_change_hook (&as, &an);
 800c8e6:	f10d 0107 	add.w	r1, sp, #7
 800c8ea:	f10d 0006 	add.w	r0, sp, #6
 800c8ee:	4798      	blx	r3
}
 800c8f0:	b003      	add	sp, #12
 800c8f2:	bd30      	pop	{r4, r5, pc}
      ESC_stopoutput();
 800c8f4:	f7ff ffb2 	bl	800c85c <ESC_stopoutput>
 800c8f8:	e7ea      	b.n	800c8d0 <ESC_ALstatusgotoerror+0x48>
 800c8fa:	4770      	bx	lr
 800c8fc:	200082bc 	.word	0x200082bc
 800c900:	200083a5 	.word	0x200083a5

0800c904 <ESC_sm_act_event>:
{
 800c904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if ((ESCvar.ALevent & ESCREG_ALEVENT_SMCHANGE) == 0)
 800c906:	4b42      	ldr	r3, [pc, #264]	; (800ca10 <ESC_sm_act_event+0x10c>)
 800c908:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c90c:	f013 0f10 	tst.w	r3, #16
 800c910:	d034      	beq.n	800c97c <ESC_sm_act_event+0x78>
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 800c912:	4b3f      	ldr	r3, [pc, #252]	; (800ca10 <ESC_sm_act_event+0x10c>)
 800c914:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800c918:	f002 051f 	and.w	r5, r2, #31
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 800c91c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c920:	f003 041f 	and.w	r4, r3, #31
   if (((ac & ESCerror) || (ac == ESCinit)))
 800c924:	f012 0f10 	tst.w	r2, #16
 800c928:	d103      	bne.n	800c932 <ESC_sm_act_event+0x2e>
 800c92a:	2d01      	cmp	r5, #1
 800c92c:	d001      	beq.n	800c932 <ESC_sm_act_event+0x2e>
   an = as;
 800c92e:	4626      	mov	r6, r4
 800c930:	e003      	b.n	800c93a <ESC_sm_act_event+0x36>
      ac &= ESCREG_AL_ERRACKMASK;
 800c932:	f002 050f 	and.w	r5, r2, #15
      an &= ESCREG_AL_ERRACKMASK;
 800c936:	f003 060f 	and.w	r6, r3, #15
   if ((as & ESCREG_AL_ALLBUTINITMASK) &&
 800c93a:	f013 0f0e 	tst.w	r3, #14
 800c93e:	d005      	beq.n	800c94c <ESC_sm_act_event+0x48>
 800c940:	2c03      	cmp	r4, #3
 800c942:	d003      	beq.n	800c94c <ESC_sm_act_event+0x48>
       ((as == ESCboot) == 0) && ESCvar.MBXrun)
 800c944:	4b32      	ldr	r3, [pc, #200]	; (800ca10 <ESC_sm_act_event+0x10c>)
 800c946:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c94a:	b9c3      	cbnz	r3, 800c97e <ESC_sm_act_event+0x7a>
      ESC_SMack (0);
 800c94c:	2000      	movs	r0, #0
 800c94e:	f7ff faf8 	bl	800bf42 <ESC_SMack>
      ESC_SMack (1);
 800c952:	2001      	movs	r0, #1
 800c954:	f7ff faf5 	bl	800bf42 <ESC_SMack>
      ESC_SMack (2);
 800c958:	2002      	movs	r0, #2
 800c95a:	f7ff faf2 	bl	800bf42 <ESC_SMack>
      ESC_SMack (3);
 800c95e:	2003      	movs	r0, #3
 800c960:	f7ff faef 	bl	800bf42 <ESC_SMack>
      ESC_SMack (4);
 800c964:	2004      	movs	r0, #4
 800c966:	f7ff faec 	bl	800bf42 <ESC_SMack>
      ESC_SMack (5);
 800c96a:	2005      	movs	r0, #5
 800c96c:	f7ff fae9 	bl	800bf42 <ESC_SMack>
      ESC_SMack (6);
 800c970:	2006      	movs	r0, #6
 800c972:	f7ff fae6 	bl	800bf42 <ESC_SMack>
      ESC_SMack (7);
 800c976:	2007      	movs	r0, #7
 800c978:	f7ff fae3 	bl	800bf42 <ESC_SMack>
}
 800c97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ax = ESC_checkmbx (as);
 800c97e:	4620      	mov	r0, r4
 800c980:	f7ff fb5a 	bl	800c038 <ESC_checkmbx>
 800c984:	4607      	mov	r7, r0
      ax23 = ESC_checkSM23 (as);
 800c986:	4620      	mov	r0, r4
 800c988:	f7ff fe56 	bl	800c638 <ESC_checkSM23>
 800c98c:	4604      	mov	r4, r0
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800c98e:	f016 0f10 	tst.w	r6, #16
 800c992:	d002      	beq.n	800c99a <ESC_sm_act_event+0x96>
 800c994:	f015 0f10 	tst.w	r5, #16
 800c998:	d0f0      	beq.n	800c97c <ESC_sm_act_event+0x78>
      else if (ax == (ESCinit | ESCerror))
 800c99a:	2f11      	cmp	r7, #17
 800c99c:	d01a      	beq.n	800c9d4 <ESC_sm_act_event+0xd0>
      else if (CC_ATOMIC_GET(ESCvar.App.state) && (ax23 == (ESCpreop | ESCerror)))
 800c99e:	f3bf 8f5b 	dmb	ish
 800c9a2:	4b1c      	ldr	r3, [pc, #112]	; (800ca14 <ESC_sm_act_event+0x110>)
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	f3bf 8f5b 	dmb	ish
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d0e6      	beq.n	800c97c <ESC_sm_act_event+0x78>
 800c9ae:	2c12      	cmp	r4, #18
 800c9b0:	d1e4      	bne.n	800c97c <ESC_sm_act_event+0x78>
         ESC_stopoutput ();
 800c9b2:	f7ff ff53 	bl	800c85c <ESC_stopoutput>
         ESC_stopinput ();
 800c9b6:	f7ff ff17 	bl	800c7e8 <ESC_stopinput>
         if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 800c9ba:	4b15      	ldr	r3, [pc, #84]	; (800ca10 <ESC_sm_act_event+0x10c>)
 800c9bc:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800c9c0:	f013 0f08 	tst.w	r3, #8
 800c9c4:	d01f      	beq.n	800ca06 <ESC_sm_act_event+0x102>
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 800c9c6:	201e      	movs	r0, #30
 800c9c8:	f7ff fa66 	bl	800be98 <ESC_ALerror>
         ESC_ALstatus (ax23);
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f7ff fa97 	bl	800bf00 <ESC_ALstatus>
 800c9d2:	e7d3      	b.n	800c97c <ESC_sm_act_event+0x78>
         if (CC_ATOMIC_GET(ESCvar.App.state))
 800c9d4:	f3bf 8f5b 	dmb	ish
 800c9d8:	4b0e      	ldr	r3, [pc, #56]	; (800ca14 <ESC_sm_act_event+0x110>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	f3bf 8f5b 	dmb	ish
 800c9e0:	b963      	cbnz	r3, 800c9fc <ESC_sm_act_event+0xf8>
         ESC_stopmbx ();
 800c9e2:	f7ff fbf1 	bl	800c1c8 <ESC_stopmbx>
         ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 800c9e6:	2016      	movs	r0, #22
 800c9e8:	f7ff fa56 	bl	800be98 <ESC_ALerror>
         ESCvar.MBXrun = 0;
 800c9ec:	4b08      	ldr	r3, [pc, #32]	; (800ca10 <ESC_sm_act_event+0x10c>)
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
         ESC_ALstatus (ax);
 800c9f4:	4638      	mov	r0, r7
 800c9f6:	f7ff fa83 	bl	800bf00 <ESC_ALstatus>
         return;
 800c9fa:	e7bf      	b.n	800c97c <ESC_sm_act_event+0x78>
            ESC_stopoutput ();
 800c9fc:	f7ff ff2e 	bl	800c85c <ESC_stopoutput>
            ESC_stopinput ();
 800ca00:	f7ff fef2 	bl	800c7e8 <ESC_stopinput>
 800ca04:	e7ed      	b.n	800c9e2 <ESC_sm_act_event+0xde>
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800ca06:	201d      	movs	r0, #29
 800ca08:	f7ff fa46 	bl	800be98 <ESC_ALerror>
 800ca0c:	e7de      	b.n	800c9cc <ESC_sm_act_event+0xc8>
 800ca0e:	bf00      	nop
 800ca10:	200082bc 	.word	0x200082bc
 800ca14:	200083a5 	.word	0x200083a5

0800ca18 <ESC_state>:
void ESC_state (void)
{
   uint8_t ac, an, as;

   /* Do we have a state change request pending */
   if (ESCvar.ALevent & ESCREG_ALEVENT_CONTROL)
 800ca18:	4ba5      	ldr	r3, [pc, #660]	; (800ccb0 <ESC_state+0x298>)
 800ca1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ca1e:	f013 0f01 	tst.w	r3, #1
 800ca22:	d100      	bne.n	800ca26 <ESC_state+0xe>
 800ca24:	4770      	bx	lr
{
 800ca26:	b530      	push	{r4, r5, lr}
 800ca28:	b083      	sub	sp, #12
   {
      ESC_read (ESCREG_ALCONTROL, (void *) &ESCvar.ALcontrol,
 800ca2a:	4ca2      	ldr	r4, [pc, #648]	; (800ccb4 <ESC_state+0x29c>)
 800ca2c:	2202      	movs	r2, #2
 800ca2e:	4621      	mov	r1, r4
 800ca30:	f44f 7090 	mov.w	r0, #288	; 0x120
 800ca34:	f001 ffea 	bl	800ea0c <ESC_read>
                sizeof (ESCvar.ALcontrol));
      ESCvar.ALcontrol = etohs (ESCvar.ALcontrol);
 800ca38:	4621      	mov	r1, r4
   {
      /* nothing to do */
      return;
   }
   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 800ca3a:	f811 2982 	ldrb.w	r2, [r1], #-130
 800ca3e:	f002 041f 	and.w	r4, r2, #31
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 800ca42:	f8b1 3080 	ldrh.w	r3, [r1, #128]	; 0x80
 800ca46:	f003 031f 	and.w	r3, r3, #31
 800ca4a:	f88d 3006 	strb.w	r3, [sp, #6]
   an = as;
 800ca4e:	f88d 3007 	strb.w	r3, [sp, #7]
   if (((ac & ESCerror) || (ac == ESCinit)))
 800ca52:	f012 0f10 	tst.w	r2, #16
 800ca56:	d101      	bne.n	800ca5c <ESC_state+0x44>
 800ca58:	2c01      	cmp	r4, #1
 800ca5a:	d105      	bne.n	800ca68 <ESC_state+0x50>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 800ca5c:	f002 040f 	and.w	r4, r2, #15
      an &= ESCREG_AL_ERRACKMASK;
 800ca60:	f003 020f 	and.w	r2, r3, #15
 800ca64:	f88d 2007 	strb.w	r2, [sp, #7]
   }

   /* Error state not acked, leave original */
   if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800ca68:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ca6c:	f012 0f10 	tst.w	r2, #16
 800ca70:	d003      	beq.n	800ca7a <ESC_state+0x62>
 800ca72:	f014 0f10 	tst.w	r4, #16
 800ca76:	f000 80b6 	beq.w	800cbe6 <ESC_state+0x1ce>
   {
      return;
   }

   /* Mask high bits ALcommand, low bits ALstatus */
   as = (uint8_t)((ac << 4) | (as & 0x0f));
 800ca7a:	f003 030f 	and.w	r3, r3, #15
 800ca7e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800ca82:	f88d 3006 	strb.w	r3, [sp, #6]

   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 800ca86:	4b8a      	ldr	r3, [pc, #552]	; (800ccb0 <ESC_state+0x298>)
 800ca88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8a:	b123      	cbz	r3, 800ca96 <ESC_state+0x7e>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 800ca8c:	f10d 0107 	add.w	r1, sp, #7
 800ca90:	f10d 0006 	add.w	r0, sp, #6
 800ca94:	4798      	blx	r3
   }

   /* Switch through the state change requested via AlControl from
    * current state read in AL status
    */
   switch (as)
 800ca96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca9a:	3b11      	subs	r3, #17
 800ca9c:	2b77      	cmp	r3, #119	; 0x77
 800ca9e:	f200 815a 	bhi.w	800cd56 <ESC_state+0x33e>
 800caa2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800caa6:	007f      	.short	0x007f
 800caa8:	00c800c2 	.word	0x00c800c2
 800caac:	015800ba 	.word	0x015800ba
 800cab0:	01580158 	.word	0x01580158
 800cab4:	015800b0 	.word	0x015800b0
 800cab8:	01580158 	.word	0x01580158
 800cabc:	01580158 	.word	0x01580158
 800cac0:	01580158 	.word	0x01580158
 800cac4:	00780158 	.word	0x00780158
 800cac8:	00ce007f 	.word	0x00ce007f
 800cacc:	01580127 	.word	0x01580127
 800cad0:	01580158 	.word	0x01580158
 800cad4:	0158011f 	.word	0x0158011f
 800cad8:	01580158 	.word	0x01580158
 800cadc:	01580158 	.word	0x01580158
 800cae0:	01580158 	.word	0x01580158
 800cae4:	00a20158 	.word	0x00a20158
 800cae8:	00a200ce 	.word	0x00a200ce
 800caec:	0158012d 	.word	0x0158012d
 800caf0:	01580158 	.word	0x01580158
 800caf4:	0158013a 	.word	0x0158013a
 800caf8:	01580158 	.word	0x01580158
 800cafc:	01580158 	.word	0x01580158
 800cb00:	01580158 	.word	0x01580158
 800cb04:	00aa0158 	.word	0x00aa0158
 800cb08:	00ce00d5 	.word	0x00ce00d5
 800cb0c:	015800d5 	.word	0x015800d5
 800cb10:	01580158 	.word	0x01580158
 800cb14:	01580152 	.word	0x01580152
 800cb18:	01580158 	.word	0x01580158
 800cb1c:	01580158 	.word	0x01580158
 800cb20:	01580158 	.word	0x01580158
 800cb24:	01580158 	.word	0x01580158
 800cb28:	01580158 	.word	0x01580158
 800cb2c:	01580158 	.word	0x01580158
 800cb30:	01580158 	.word	0x01580158
 800cb34:	01580158 	.word	0x01580158
 800cb38:	01580158 	.word	0x01580158
 800cb3c:	01580158 	.word	0x01580158
 800cb40:	01580158 	.word	0x01580158
 800cb44:	01580158 	.word	0x01580158
 800cb48:	01580158 	.word	0x01580158
 800cb4c:	01580158 	.word	0x01580158
 800cb50:	01580158 	.word	0x01580158
 800cb54:	01580158 	.word	0x01580158
 800cb58:	01580158 	.word	0x01580158
 800cb5c:	01580158 	.word	0x01580158
 800cb60:	01580158 	.word	0x01580158
 800cb64:	01580158 	.word	0x01580158
 800cb68:	01580158 	.word	0x01580158
 800cb6c:	01580158 	.word	0x01580158
 800cb70:	01580158 	.word	0x01580158
 800cb74:	01580158 	.word	0x01580158
 800cb78:	01580158 	.word	0x01580158
 800cb7c:	01580158 	.word	0x01580158
 800cb80:	01580158 	.word	0x01580158
 800cb84:	00aa0158 	.word	0x00aa0158
 800cb88:	00ce0118 	.word	0x00ce0118
 800cb8c:	01580134 	.word	0x01580134
 800cb90:	01580158 	.word	0x01580158
 800cb94:	007f      	.short	0x007f
         break;
      }
      case INIT_TO_PREOP:
      {
         /* get station address */
         ESC_address ();
 800cb96:	f7ff fa21 	bl	800bfdc <ESC_address>
         an = ESC_startmbx (ac);
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f7ff faaa 	bl	800c0f4 <ESC_startmbx>
 800cba0:	f88d 0007 	strb.w	r0, [sp, #7]
         break;
      }
   }

   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 800cba4:	4b42      	ldr	r3, [pc, #264]	; (800ccb0 <ESC_state+0x298>)
 800cba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba8:	b123      	cbz	r3, 800cbb4 <ESC_state+0x19c>
   {
      ESCvar.post_state_change_hook (&as, &an);
 800cbaa:	f10d 0107 	add.w	r1, sp, #7
 800cbae:	f10d 0006 	add.w	r0, sp, #6
 800cbb2:	4798      	blx	r3
   }

   if (!(an & ESCerror) && (ESCvar.ALerror))
 800cbb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cbb8:	f013 0f10 	tst.w	r3, #16
 800cbbc:	d105      	bne.n	800cbca <ESC_state+0x1b2>
 800cbbe:	4b3c      	ldr	r3, [pc, #240]	; (800ccb0 <ESC_state+0x298>)
 800cbc0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	f040 80ed 	bne.w	800cda4 <ESC_state+0x38c>
   {
      /* clear error */
      ESC_ALerror (ALERR_NONE);
   }

   if (ESC_check_id_request (ESCvar.ALcontrol, &an))
 800cbca:	f10d 0107 	add.w	r1, sp, #7
 800cbce:	4b38      	ldr	r3, [pc, #224]	; (800ccb0 <ESC_state+0x298>)
 800cbd0:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800cbd4:	f7ff f938 	bl	800be48 <ESC_check_id_request>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	f040 80e7 	bne.w	800cdac <ESC_state+0x394>
   {
      an |= ESC_load_device_id ();
   }

   ESC_ALstatus (an);
 800cbde:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800cbe2:	f7ff f98d 	bl	800bf00 <ESC_ALstatus>

#ifdef ESC_DEBUG
   DPRINT ("state %s\n", ESC_state_to_string (an & 0xF));
#endif
}
 800cbe6:	b003      	add	sp, #12
 800cbe8:	bd30      	pop	{r4, r5, pc}
         ESC_address ();
 800cbea:	f7ff f9f7 	bl	800bfdc <ESC_address>
         an = ESC_startmbxboot (ac);
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f7ff fab4 	bl	800c15c <ESC_startmbxboot>
 800cbf4:	f88d 0007 	strb.w	r0, [sp, #7]
         break;
 800cbf8:	e7d4      	b.n	800cba4 <ESC_state+0x18c>
         an = ESCinit | ESCerror;
 800cbfa:	2011      	movs	r0, #17
 800cbfc:	f88d 0007 	strb.w	r0, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800cc00:	f7ff f94a 	bl	800be98 <ESC_ALerror>
         break;
 800cc04:	e7ce      	b.n	800cba4 <ESC_state+0x18c>
         ESC_stopoutput ();
 800cc06:	f7ff fe29 	bl	800c85c <ESC_stopoutput>
         ESC_stopinput ();
 800cc0a:	f7ff fded 	bl	800c7e8 <ESC_stopinput>
         ESC_stopmbx ();
 800cc0e:	f7ff fadb 	bl	800c1c8 <ESC_stopmbx>
         an = ESCinit;
 800cc12:	2301      	movs	r3, #1
 800cc14:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800cc18:	e7c4      	b.n	800cba4 <ESC_state+0x18c>
         ESC_stopinput ();
 800cc1a:	f7ff fde5 	bl	800c7e8 <ESC_stopinput>
         ESC_stopmbx ();
 800cc1e:	f7ff fad3 	bl	800c1c8 <ESC_stopmbx>
         an = ESCinit;
 800cc22:	2301      	movs	r3, #1
 800cc24:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800cc28:	e7bc      	b.n	800cba4 <ESC_state+0x18c>
         ESC_stopmbx ();
 800cc2a:	f7ff facd 	bl	800c1c8 <ESC_stopmbx>
         an = ESCinit;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800cc34:	e7b6      	b.n	800cba4 <ESC_state+0x18c>
         ESC_stopmbx ();
 800cc36:	f7ff fac7 	bl	800c1c8 <ESC_stopmbx>
         an = ESCinit;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800cc40:	e7b0      	b.n	800cba4 <ESC_state+0x18c>
         an = ESCpreop | ESCerror;
 800cc42:	2312      	movs	r3, #18
 800cc44:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800cc48:	2011      	movs	r0, #17
 800cc4a:	f7ff f925 	bl	800be98 <ESC_ALerror>
         break;
 800cc4e:	e7a9      	b.n	800cba4 <ESC_state+0x18c>
         ESCvar.ESC_SM2_sml = sizeOfPDO (RX_PDO_OBJIDX, &ESCvar.sm2mappings,
 800cc50:	4d19      	ldr	r5, [pc, #100]	; (800ccb8 <ESC_state+0x2a0>)
 800cc52:	2330      	movs	r3, #48	; 0x30
 800cc54:	4a19      	ldr	r2, [pc, #100]	; (800ccbc <ESC_state+0x2a4>)
 800cc56:	4629      	mov	r1, r5
 800cc58:	f641 4012 	movw	r0, #7186	; 0x1c12
 800cc5c:	f001 fb34 	bl	800e2c8 <sizeOfPDO>
 800cc60:	f825 0c34 	strh.w	r0, [r5, #-52]
 800cc64:	3dac      	subs	r5, #172	; 0xac
         if (ESCvar.sm2mappings < 0)
 800cc66:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	db19      	blt.n	800cca2 <ESC_state+0x28a>
         ESCvar.ESC_SM3_sml = sizeOfPDO (TX_PDO_OBJIDX, &ESCvar.sm3mappings,
 800cc6e:	4d14      	ldr	r5, [pc, #80]	; (800ccc0 <ESC_state+0x2a8>)
 800cc70:	2350      	movs	r3, #80	; 0x50
 800cc72:	4a14      	ldr	r2, [pc, #80]	; (800ccc4 <ESC_state+0x2ac>)
 800cc74:	4629      	mov	r1, r5
 800cc76:	f641 4013 	movw	r0, #7187	; 0x1c13
 800cc7a:	f001 fb25 	bl	800e2c8 <sizeOfPDO>
 800cc7e:	f825 0c36 	strh.w	r0, [r5, #-54]
 800cc82:	3db0      	subs	r5, #176	; 0xb0
         if (ESCvar.sm3mappings < 0)
 800cc84:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	db1d      	blt.n	800ccc8 <ESC_state+0x2b0>
         an = ESC_startinput (ac);
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f7ff fd4d 	bl	800c72c <ESC_startinput>
 800cc92:	f88d 0007 	strb.w	r0, [sp, #7]
         if (an == ac)
 800cc96:	42a0      	cmp	r0, r4
 800cc98:	d184      	bne.n	800cba4 <ESC_state+0x18c>
            ESC_SMenable (2);
 800cc9a:	2002      	movs	r0, #2
 800cc9c:	f7ff f97e 	bl	800bf9c <ESC_SMenable>
 800cca0:	e780      	b.n	800cba4 <ESC_state+0x18c>
            an = ESCpreop | ESCerror;
 800cca2:	2312      	movs	r3, #18
 800cca4:	f88d 3007 	strb.w	r3, [sp, #7]
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800cca8:	201d      	movs	r0, #29
 800ccaa:	f7ff f8f5 	bl	800be98 <ESC_ALerror>
            break;
 800ccae:	e779      	b.n	800cba4 <ESC_state+0x18c>
 800ccb0:	200082bc 	.word	0x200082bc
 800ccb4:	2000833e 	.word	0x2000833e
 800ccb8:	20008368 	.word	0x20008368
 800ccbc:	20008fac 	.word	0x20008fac
 800ccc0:	2000836c 	.word	0x2000836c
 800ccc4:	200091ec 	.word	0x200091ec
            an = ESCpreop | ESCerror;
 800ccc8:	2312      	movs	r3, #18
 800ccca:	f88d 3007 	strb.w	r3, [sp, #7]
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 800ccce:	201e      	movs	r0, #30
 800ccd0:	f7ff f8e2 	bl	800be98 <ESC_ALerror>
            break;
 800ccd4:	e766      	b.n	800cba4 <ESC_state+0x18c>
         an = ESCpreop | ESCerror;
 800ccd6:	2312      	movs	r3, #18
 800ccd8:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800ccdc:	2011      	movs	r0, #17
 800ccde:	f7ff f8db 	bl	800be98 <ESC_ALerror>
         break;
 800cce2:	e75f      	b.n	800cba4 <ESC_state+0x18c>
         ESC_stopoutput ();
 800cce4:	f7ff fdba 	bl	800c85c <ESC_stopoutput>
         ESC_stopinput ();
 800cce8:	f7ff fd7e 	bl	800c7e8 <ESC_stopinput>
         an = ESCpreop;
 800ccec:	2302      	movs	r3, #2
 800ccee:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800ccf2:	e757      	b.n	800cba4 <ESC_state+0x18c>
         ESC_stopinput ();
 800ccf4:	f7ff fd78 	bl	800c7e8 <ESC_stopinput>
         an = ESCpreop;
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	f88d 3007 	strb.w	r3, [sp, #7]
         break;
 800ccfe:	e751      	b.n	800cba4 <ESC_state+0x18c>
         an = ESCsafeop | ESCerror;
 800cd00:	2314      	movs	r3, #20
 800cd02:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800cd06:	2011      	movs	r0, #17
 800cd08:	f7ff f8c6 	bl	800be98 <ESC_ALerror>
         break;
 800cd0c:	e74a      	b.n	800cba4 <ESC_state+0x18c>
         an = ESC_startoutput (ac);
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f7ff fd86 	bl	800c820 <ESC_startoutput>
 800cd14:	f88d 0007 	strb.w	r0, [sp, #7]
         break;
 800cd18:	e744      	b.n	800cba4 <ESC_state+0x18c>
         an = ESCsafeop | ESCerror;
 800cd1a:	2314      	movs	r3, #20
 800cd1c:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800cd20:	2011      	movs	r0, #17
 800cd22:	f7ff f8b9 	bl	800be98 <ESC_ALerror>
         ESC_stopoutput ();
 800cd26:	f7ff fd99 	bl	800c85c <ESC_stopoutput>
         if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 800cd2a:	4b24      	ldr	r3, [pc, #144]	; (800cdbc <ESC_state+0x3a4>)
 800cd2c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f47f af37 	bne.w	800cba4 <ESC_state+0x18c>
 800cd36:	4b21      	ldr	r3, [pc, #132]	; (800cdbc <ESC_state+0x3a4>)
 800cd38:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f43f af31 	beq.w	800cba4 <ESC_state+0x18c>
            ESC_SMdisable (3);
 800cd42:	2003      	movs	r0, #3
 800cd44:	f7ff f93a 	bl	800bfbc <ESC_SMdisable>
 800cd48:	e72c      	b.n	800cba4 <ESC_state+0x18c>
         an = ESCsafeop;
 800cd4a:	2304      	movs	r3, #4
 800cd4c:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_stopoutput ();
 800cd50:	f7ff fd84 	bl	800c85c <ESC_stopoutput>
         break;
 800cd54:	e726      	b.n	800cba4 <ESC_state+0x18c>
         if (an == ESCop)
 800cd56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cd5a:	2b08      	cmp	r3, #8
 800cd5c:	d00d      	beq.n	800cd7a <ESC_state+0x362>
         if (as == ESCsafeop)
 800cd5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cd62:	2b04      	cmp	r3, #4
 800cd64:	d01b      	beq.n	800cd9e <ESC_state+0x386>
         an |= ESCerror;
 800cd66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cd6a:	f043 0310 	orr.w	r3, r3, #16
 800cd6e:	f88d 3007 	strb.w	r3, [sp, #7]
         ESC_ALerror (ALERR_UNKNOWNSTATE);
 800cd72:	2012      	movs	r0, #18
 800cd74:	f7ff f890 	bl	800be98 <ESC_ALerror>
         break;
 800cd78:	e714      	b.n	800cba4 <ESC_state+0x18c>
            ESC_stopoutput ();
 800cd7a:	f7ff fd6f 	bl	800c85c <ESC_stopoutput>
            if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 800cd7e:	4b0f      	ldr	r3, [pc, #60]	; (800cdbc <ESC_state+0x3a4>)
 800cd80:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800cd84:	b91b      	cbnz	r3, 800cd8e <ESC_state+0x376>
 800cd86:	4b0d      	ldr	r3, [pc, #52]	; (800cdbc <ESC_state+0x3a4>)
 800cd88:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800cd8c:	b91b      	cbnz	r3, 800cd96 <ESC_state+0x37e>
            an = ESCsafeop;
 800cd8e:	2304      	movs	r3, #4
 800cd90:	f88d 3007 	strb.w	r3, [sp, #7]
 800cd94:	e7e3      	b.n	800cd5e <ESC_state+0x346>
               ESC_SMdisable (3);
 800cd96:	2003      	movs	r0, #3
 800cd98:	f7ff f910 	bl	800bfbc <ESC_SMdisable>
 800cd9c:	e7f7      	b.n	800cd8e <ESC_state+0x376>
            ESC_stopinput ();
 800cd9e:	f7ff fd23 	bl	800c7e8 <ESC_stopinput>
 800cda2:	e7e0      	b.n	800cd66 <ESC_state+0x34e>
      ESC_ALerror (ALERR_NONE);
 800cda4:	2000      	movs	r0, #0
 800cda6:	f7ff f877 	bl	800be98 <ESC_ALerror>
 800cdaa:	e70e      	b.n	800cbca <ESC_state+0x1b2>
      an |= ESC_load_device_id ();
 800cdac:	f7ff f888 	bl	800bec0 <ESC_load_device_id>
 800cdb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cdb4:	4318      	orrs	r0, r3
 800cdb6:	f88d 0007 	strb.w	r0, [sp, #7]
 800cdba:	e710      	b.n	800cbde <ESC_state+0x1c6>
 800cdbc:	200082bc 	.word	0x200082bc

0800cdc0 <ESC_config>:
 *
 * @param[in] cfg   = Pointer to the Application configuration variable
 * holding application specific details. Data is copied.
 */
void ESC_config (esc_cfg_t * cfg)
{
 800cdc0:	4602      	mov	r2, r0
   static sm_cfg_t mb1 = {MBX1_sma, MBX1_sml, MBX1_sme, MBX1_smc, 0};
   static sm_cfg_t mbboot0 = {MBX0_sma_b, MBX0_sml_b, MBX0_sme_b, MBX0_smc_b, 0};
   static sm_cfg_t mbboot1 = {MBX1_sma_b, MBX1_sml_b, MBX1_sme_b, MBX1_smc_b, 0};

   /* Configure stack */
   ESCvar.use_interrupt = cfg->use_interrupt;
 800cdc2:	6841      	ldr	r1, [r0, #4]
 800cdc4:	4b20      	ldr	r3, [pc, #128]	; (800ce48 <ESC_config+0x88>)
 800cdc6:	6019      	str	r1, [r3, #0]
   ESCvar.watchdogcnt = cfg->watchdog_cnt;
 800cdc8:	6881      	ldr	r1, [r0, #8]
 800cdca:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc

   ESCvar.mb[0] = mb0;
 800cdce:	491f      	ldr	r1, [pc, #124]	; (800ce4c <ESC_config+0x8c>)
 800cdd0:	f103 0c04 	add.w	ip, r3, #4
 800cdd4:	c903      	ldmia	r1, {r0, r1}
 800cdd6:	e88c 0003 	stmia.w	ip, {r0, r1}
   ESCvar.mb[1] = mb1;
 800cdda:	491d      	ldr	r1, [pc, #116]	; (800ce50 <ESC_config+0x90>)
 800cddc:	f103 0c0c 	add.w	ip, r3, #12
 800cde0:	c903      	ldmia	r1, {r0, r1}
 800cde2:	e88c 0003 	stmia.w	ip, {r0, r1}
   ESCvar.mbboot[0] = mbboot0;
 800cde6:	491b      	ldr	r1, [pc, #108]	; (800ce54 <ESC_config+0x94>)
 800cde8:	f103 0c14 	add.w	ip, r3, #20
 800cdec:	c903      	ldmia	r1, {r0, r1}
 800cdee:	e88c 0003 	stmia.w	ip, {r0, r1}
   ESCvar.mbboot[1] = mbboot1;
 800cdf2:	4919      	ldr	r1, [pc, #100]	; (800ce58 <ESC_config+0x98>)
 800cdf4:	f103 0c1c 	add.w	ip, r3, #28
 800cdf8:	c903      	ldmia	r1, {r0, r1}
 800cdfa:	e88c 0003 	stmia.w	ip, {r0, r1}

   ESCvar.skip_default_initialization = cfg->skip_default_initialization;
 800cdfe:	7b11      	ldrb	r1, [r2, #12]
 800ce00:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
   ESCvar.set_defaults_hook = cfg->set_defaults_hook;
 800ce04:	6911      	ldr	r1, [r2, #16]
 800ce06:	6299      	str	r1, [r3, #40]	; 0x28
   ESCvar.pre_state_change_hook = cfg->pre_state_change_hook;
 800ce08:	6951      	ldr	r1, [r2, #20]
 800ce0a:	62d9      	str	r1, [r3, #44]	; 0x2c
   ESCvar.post_state_change_hook = cfg->post_state_change_hook;
 800ce0c:	6991      	ldr	r1, [r2, #24]
 800ce0e:	6319      	str	r1, [r3, #48]	; 0x30
   ESCvar.application_hook = cfg->application_hook;
 800ce10:	69d1      	ldr	r1, [r2, #28]
 800ce12:	6359      	str	r1, [r3, #52]	; 0x34
   ESCvar.safeoutput_override = cfg->safeoutput_override;
 800ce14:	6a11      	ldr	r1, [r2, #32]
 800ce16:	6399      	str	r1, [r3, #56]	; 0x38
   ESCvar.pre_object_download_hook = cfg->pre_object_download_hook;
 800ce18:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800ce1a:	63d9      	str	r1, [r3, #60]	; 0x3c
   ESCvar.post_object_download_hook = cfg->post_object_download_hook;
 800ce1c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ce1e:	6419      	str	r1, [r3, #64]	; 0x40
   ESCvar.pre_object_upload_hook = cfg->pre_object_upload_hook;
 800ce20:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ce22:	6459      	str	r1, [r3, #68]	; 0x44
   ESCvar.post_object_upload_hook = cfg->post_object_upload_hook;
 800ce24:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800ce26:	6499      	str	r1, [r3, #72]	; 0x48
   ESCvar.rxpdo_override = cfg->rxpdo_override;
 800ce28:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800ce2a:	64d9      	str	r1, [r3, #76]	; 0x4c
   ESCvar.txpdo_override = cfg->txpdo_override;
 800ce2c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800ce2e:	6519      	str	r1, [r3, #80]	; 0x50
   ESCvar.esc_hw_interrupt_enable = cfg->esc_hw_interrupt_enable;
 800ce30:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800ce32:	6559      	str	r1, [r3, #84]	; 0x54
   ESCvar.esc_hw_interrupt_disable = cfg->esc_hw_interrupt_disable;
 800ce34:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ce36:	6599      	str	r1, [r3, #88]	; 0x58
   ESCvar.esc_hw_eep_handler = cfg->esc_hw_eep_handler;
 800ce38:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800ce3a:	65d9      	str	r1, [r3, #92]	; 0x5c
   ESCvar.esc_check_dc_handler = cfg->esc_check_dc_handler;
 800ce3c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800ce3e:	6619      	str	r1, [r3, #96]	; 0x60
   ESCvar.get_device_id = cfg->get_device_id;
 800ce40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ce42:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	200082bc 	.word	0x200082bc
 800ce4c:	08013628 	.word	0x08013628
 800ce50:	08013630 	.word	0x08013630
 800ce54:	08013638 	.word	0x08013638
 800ce58:	08013640 	.word	0x08013640

0800ce5c <init_coesdo>:
static void init_coesdo(_COEsdo *coesdo,
                        uint8_t sdoservice,
                        uint8_t command,
                        uint16_t index,
                        uint8_t subindex)
{
 800ce5c:	b500      	push	{lr}
   coesdo->mbxheader.length = htoes(COE_DEFAULTLENGTH);
 800ce5e:	f04f 0c0a 	mov.w	ip, #10
 800ce62:	f8a0 c000 	strh.w	ip, [r0]
   coesdo->mbxheader.mbxtype = MBXCOE;
 800ce66:	f890 c005 	ldrb.w	ip, [r0, #5]
 800ce6a:	f04f 0e03 	mov.w	lr, #3
 800ce6e:	f36e 0c03 	bfi	ip, lr, #0, #4
 800ce72:	f880 c005 	strb.w	ip, [r0, #5]
   coesdo->coeheader.numberservice = htoes(sdoservice << 12);
 800ce76:	0309      	lsls	r1, r1, #12
 800ce78:	80c1      	strh	r1, [r0, #6]
   coesdo->command = command;
 800ce7a:	7202      	strb	r2, [r0, #8]
   coesdo->index = htoes(index);
 800ce7c:	f8a0 3009 	strh.w	r3, [r0, #9]
   coesdo->subindex = subindex;
 800ce80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ce84:	72c3      	strb	r3, [r0, #11]
}
 800ce86:	f85d fb04 	ldr.w	pc, [sp], #4

0800ce8a <COE_bitsliceGet>:
 * @param[in] offset = start offset
 * @param[in] length = number of bits to get
 * @return bitslice value
 */
static uint64_t COE_bitsliceGet (uint64_t * bitmap, unsigned int offset, unsigned int length)
{
 800ce8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   const unsigned int word_offset = offset / 64;
 800ce8e:	098d      	lsrs	r5, r1, #6
   const unsigned int bit_offset = offset % 64;
 800ce90:	f001 033f 	and.w	r3, r1, #63	; 0x3f
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800ce94:	2a40      	cmp	r2, #64	; 0x40
 800ce96:	d043      	beq.n	800cf20 <COE_bitsliceGet+0x96>
 800ce98:	f04f 0e01 	mov.w	lr, #1
 800ce9c:	f1a2 0120 	sub.w	r1, r2, #32
 800cea0:	f1c2 0420 	rsb	r4, r2, #32
 800cea4:	fa0e f101 	lsl.w	r1, lr, r1
 800cea8:	fa2e f404 	lsr.w	r4, lr, r4
 800ceac:	4321      	orrs	r1, r4
 800ceae:	fa0e fe02 	lsl.w	lr, lr, r2
 800ceb2:	f11e 3eff 	adds.w	lr, lr, #4294967295	; 0xffffffff
 800ceb6:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
   uint64_t w0;
   uint64_t w1 = 0;

   /* Get the least significant word */
   w0 = bitmap[word_offset];
 800ceba:	eb00 04c5 	add.w	r4, r0, r5, lsl #3
 800cebe:	6864      	ldr	r4, [r4, #4]
   w0 = w0 >> bit_offset;
 800cec0:	f1c3 0720 	rsb	r7, r3, #32
 800cec4:	f1a3 0620 	sub.w	r6, r3, #32
 800cec8:	f850 1035 	ldr.w	r1, [r0, r5, lsl #3]
 800cecc:	fa21 fc03 	lsr.w	ip, r1, r3
 800ced0:	fa04 f707 	lsl.w	r7, r4, r7
 800ced4:	ea4c 0c07 	orr.w	ip, ip, r7
 800ced8:	fa24 f606 	lsr.w	r6, r4, r6
 800cedc:	ea4c 0c06 	orr.w	ip, ip, r6
 800cee0:	40dc      	lsrs	r4, r3

   /* Get the most significant word, if required */
   if (length + bit_offset > 64)
 800cee2:	441a      	add	r2, r3
 800cee4:	2a40      	cmp	r2, #64	; 0x40
 800cee6:	d91f      	bls.n	800cf28 <COE_bitsliceGet+0x9e>
   {
      w1 = bitmap[word_offset + 1];
 800cee8:	3501      	adds	r5, #1
 800ceea:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 800ceee:	f850 0035 	ldr.w	r0, [r0, r5, lsl #3]
 800cef2:	6852      	ldr	r2, [r2, #4]
      w1 = w1 << (64 - bit_offset);
 800cef4:	f1c3 0640 	rsb	r6, r3, #64	; 0x40
 800cef8:	f1c3 0520 	rsb	r5, r3, #32
 800cefc:	3b20      	subs	r3, #32
 800cefe:	40b2      	lsls	r2, r6
 800cf00:	fa00 f505 	lsl.w	r5, r0, r5
 800cf04:	432a      	orrs	r2, r5
 800cf06:	fa20 f303 	lsr.w	r3, r0, r3
 800cf0a:	431a      	orrs	r2, r3
 800cf0c:	40b0      	lsls	r0, r6
   }

   w0 = (w1 | w0);
 800cf0e:	ea40 000c 	orr.w	r0, r0, ip
 800cf12:	4322      	orrs	r2, r4
   return (w0 & mask);
}
 800cf14:	ea0e 0000 	and.w	r0, lr, r0
 800cf18:	ea08 0102 	and.w	r1, r8, r2
 800cf1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800cf20:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800cf24:	46f0      	mov	r8, lr
 800cf26:	e7c8      	b.n	800ceba <COE_bitsliceGet+0x30>
   uint64_t w1 = 0;
 800cf28:	2000      	movs	r0, #0
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	e7ef      	b.n	800cf0e <COE_bitsliceGet+0x84>

0800cf2e <COE_bitsliceSet>:
 * @param[in] length = number of bits to set
 * @param[in] value  = value to set
 */
static void COE_bitsliceSet (uint64_t * bitmap, unsigned int offset, unsigned int length,
                             uint64_t value)
{
 800cf2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf32:	b083      	sub	sp, #12
 800cf34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cf36:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   const unsigned int word_offset = offset / 64;
 800cf38:	098e      	lsrs	r6, r1, #6
   const unsigned int bit_offset = offset % 64;
 800cf3a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800cf3e:	2a40      	cmp	r2, #64	; 0x40
 800cf40:	d079      	beq.n	800d036 <COE_bitsliceSet+0x108>
 800cf42:	2301      	movs	r3, #1
 800cf44:	f1a2 0e20 	sub.w	lr, r2, #32
 800cf48:	f1c2 0520 	rsb	r5, r2, #32
 800cf4c:	fa03 fe0e 	lsl.w	lr, r3, lr
 800cf50:	fa23 f505 	lsr.w	r5, r3, r5
 800cf54:	ea4e 0e05 	orr.w	lr, lr, r5
 800cf58:	4093      	lsls	r3, r2
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
   const uint64_t mask0 = mask << bit_offset;
 800cf60:	f1a1 0c20 	sub.w	ip, r1, #32
 800cf64:	f1c1 0520 	rsb	r5, r1, #32
 800cf68:	fa0e f801 	lsl.w	r8, lr, r1
 800cf6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 800cf70:	ea48 080c 	orr.w	r8, r8, ip
 800cf74:	fa23 f505 	lsr.w	r5, r3, r5
 800cf78:	ea48 0805 	orr.w	r8, r8, r5
 800cf7c:	fa03 f501 	lsl.w	r5, r3, r1
 800cf80:	9501      	str	r5, [sp, #4]
   uint64_t v0 = value << bit_offset;
 800cf82:	f1a1 0a20 	sub.w	sl, r1, #32
 800cf86:	f1c1 0920 	rsb	r9, r1, #32
 800cf8a:	fa07 fc01 	lsl.w	ip, r7, r1
 800cf8e:	fa04 fa0a 	lsl.w	sl, r4, sl
 800cf92:	ea4c 0c0a 	orr.w	ip, ip, sl
 800cf96:	fa24 f909 	lsr.w	r9, r4, r9
 800cf9a:	ea4c 0c09 	orr.w	ip, ip, r9
 800cf9e:	fa04 f901 	lsl.w	r9, r4, r1
   uint64_t w0 = bitmap[word_offset];
 800cfa2:	eb00 0ac6 	add.w	sl, r0, r6, lsl #3
 800cfa6:	f850 b036 	ldr.w	fp, [r0, r6, lsl #3]

   /* Set the least significant word */
   w0 = (w0 & ~mask0) | (v0 & mask0);
 800cfaa:	ea89 090b 	eor.w	r9, r9, fp
 800cfae:	f8da 5004 	ldr.w	r5, [sl, #4]
 800cfb2:	ea8c 0c05 	eor.w	ip, ip, r5
 800cfb6:	9d01      	ldr	r5, [sp, #4]
 800cfb8:	ea09 0505 	and.w	r5, r9, r5
 800cfbc:	ea0c 0c08 	and.w	ip, ip, r8
 800cfc0:	ea85 0b0b 	eor.w	fp, r5, fp
 800cfc4:	f8da 5004 	ldr.w	r5, [sl, #4]
 800cfc8:	ea8c 0505 	eor.w	r5, ip, r5
   bitmap[word_offset] = w0;
 800cfcc:	f840 b036 	str.w	fp, [r0, r6, lsl #3]
 800cfd0:	f8ca 5004 	str.w	r5, [sl, #4]

   /* Set the most significant word, if required */
   if (length + bit_offset > 64)
 800cfd4:	440a      	add	r2, r1
 800cfd6:	2a40      	cmp	r2, #64	; 0x40
 800cfd8:	d92a      	bls.n	800d030 <COE_bitsliceSet+0x102>
   {
      const uint64_t mask1 = mask >> (64 - bit_offset);
 800cfda:	f1c1 0240 	rsb	r2, r1, #64	; 0x40
 800cfde:	f1a1 0520 	sub.w	r5, r1, #32
 800cfe2:	f1c1 0120 	rsb	r1, r1, #32
 800cfe6:	40d3      	lsrs	r3, r2
 800cfe8:	fa0e f505 	lsl.w	r5, lr, r5
 800cfec:	432b      	orrs	r3, r5
 800cfee:	fa2e f101 	lsr.w	r1, lr, r1
 800cff2:	430b      	orrs	r3, r1
 800cff4:	fa2e fe02 	lsr.w	lr, lr, r2
      uint64_t v1 = value >> (64 - bit_offset);
 800cff8:	f1c2 0520 	rsb	r5, r2, #32
 800cffc:	f1a2 0120 	sub.w	r1, r2, #32
 800d000:	40d4      	lsrs	r4, r2
 800d002:	fa07 f505 	lsl.w	r5, r7, r5
 800d006:	432c      	orrs	r4, r5
 800d008:	fa27 f101 	lsr.w	r1, r7, r1
 800d00c:	430c      	orrs	r4, r1
 800d00e:	40d7      	lsrs	r7, r2
      uint64_t w1 = bitmap[word_offset + 1];
 800d010:	3601      	adds	r6, #1
 800d012:	eb00 05c6 	add.w	r5, r0, r6, lsl #3
 800d016:	f850 1036 	ldr.w	r1, [r0, r6, lsl #3]
 800d01a:	686a      	ldr	r2, [r5, #4]

      w1 = (w1 & ~mask1) | (v1 & mask1);
 800d01c:	404c      	eors	r4, r1
 800d01e:	4057      	eors	r7, r2
 800d020:	401c      	ands	r4, r3
 800d022:	ea07 070e 	and.w	r7, r7, lr
 800d026:	4061      	eors	r1, r4
 800d028:	407a      	eors	r2, r7
      bitmap[word_offset + 1] = w1;
 800d02a:	f840 1036 	str.w	r1, [r0, r6, lsl #3]
 800d02e:	606a      	str	r2, [r5, #4]
   }
}
 800d030:	b003      	add	sp, #12
 800d032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800d036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d03a:	469e      	mov	lr, r3
 800d03c:	e790      	b.n	800cf60 <COE_bitsliceSet+0x32>

0800d03e <COE_setValue>:
 * @param[in] obj   = object description
 * @param[in] value = new value
 */
static void COE_setValue (const _objd * obj, uint64_t value)
{
   switch(obj->datatype)
 800d03e:	8841      	ldrh	r1, [r0, #2]
 800d040:	3901      	subs	r1, #1
 800d042:	2936      	cmp	r1, #54	; 0x36
 800d044:	d829      	bhi.n	800d09a <COE_setValue+0x5c>
 800d046:	e8df f001 	tbb	[pc, r1]
 800d04a:	1c1c      	.short	0x1c1c
 800d04c:	1f1c221f 	.word	0x1f1c221f
 800d050:	28282222 	.word	0x28282222
 800d054:	28282828 	.word	0x28282828
 800d058:	28252828 	.word	0x28252828
 800d05c:	28252828 	.word	0x28252828
 800d060:	28282828 	.word	0x28282828
 800d064:	28282825 	.word	0x28282825
 800d068:	28282828 	.word	0x28282828
 800d06c:	28282828 	.word	0x28282828
 800d070:	28282828 	.word	0x28282828
 800d074:	1f1c2828 	.word	0x1f1c2828
 800d078:	1c1c1c22 	.word	0x1c1c1c22
 800d07c:	1c1c1c1c 	.word	0x1c1c1c1c
 800d080:	1c          	.byte	0x1c
 800d081:	00          	.byte	0x00
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
   case DTYPE_BITARR8:
      *(uint8_t *)obj->data = value & UINT8_MAX;
 800d082:	6903      	ldr	r3, [r0, #16]
 800d084:	701a      	strb	r2, [r3, #0]
      break;
 800d086:	4770      	bx	lr

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
   case DTYPE_BITARR16:
      *(uint16_t *)obj->data = value & UINT16_MAX;
 800d088:	6903      	ldr	r3, [r0, #16]
 800d08a:	801a      	strh	r2, [r3, #0]
      break;
 800d08c:	4770      	bx	lr

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
   case DTYPE_BITARR32:
      *(uint32_t *)obj->data = value & UINT32_MAX;
 800d08e:	6903      	ldr	r3, [r0, #16]
 800d090:	601a      	str	r2, [r3, #0]
      break;
 800d092:	4770      	bx	lr

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      *(uint64_t *)obj->data = value;
 800d094:	6901      	ldr	r1, [r0, #16]
 800d096:	600a      	str	r2, [r1, #0]
 800d098:	604b      	str	r3, [r1, #4]

   default:
      DPRINT ("ignored\n");
      break;
   }
}
 800d09a:	4770      	bx	lr

0800d09c <SDO_getodlistcont>:
{
 800d09c:	b570      	push	{r4, r5, r6, lr}
   MBXout = ESC_claimbuffer ();
 800d09e:	f7ff f945 	bl	800c32c <ESC_claimbuffer>
   if (MBXout)
 800d0a2:	2800      	cmp	r0, #0
 800d0a4:	d059      	beq.n	800d15a <SDO_getodlistcont+0xbe>
 800d0a6:	4686      	mov	lr, r0
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800d0a8:	492c      	ldr	r1, [pc, #176]	; (800d15c <SDO_getodlistcont+0xc0>)
 800d0aa:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
 800d0ac:	fb03 fc00 	mul.w	ip, r3, r0
 800d0b0:	4c2b      	ldr	r4, [pc, #172]	; (800d160 <SDO_getodlistcont+0xc4>)
 800d0b2:	eb0c 0204 	add.w	r2, ip, r4
      coel->mbxheader.mbxtype = MBXCOE;
 800d0b6:	7953      	ldrb	r3, [r2, #5]
 800d0b8:	2003      	movs	r0, #3
 800d0ba:	f360 0303 	bfi	r3, r0, #0, #4
 800d0be:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 800d0c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0c4:	80d3      	strh	r3, [r2, #6]
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 800d0c6:	7a13      	ldrb	r3, [r2, #8]
 800d0c8:	2002      	movs	r0, #2
 800d0ca:	f360 0306 	bfi	r3, r0, #0, #7
 800d0ce:	7213      	strb	r3, [r2, #8]
      s = (uint16_t)((ESCvar.frags - ESCvar.fragsleft) * (ODLISTSIZE >> 1));
 800d0d0:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 800d0d4:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 800d0d8:	1a1e      	subs	r6, r3, r0
 800d0da:	b2b6      	uxth	r6, r6
 800d0dc:	6f49      	ldr	r1, [r1, #116]	; 0x74
 800d0de:	884b      	ldrh	r3, [r1, #2]
 800d0e0:	3b0e      	subs	r3, #14
 800d0e2:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800d0e6:	fb16 f603 	smulbb	r6, r6, r3
 800d0ea:	b2b6      	uxth	r6, r6
      if (ESCvar.fragsleft > 1)
 800d0ec:	2801      	cmp	r0, #1
 800d0ee:	d913      	bls.n	800d118 <SDO_getodlistcont+0x7c>
         coel->infoheader.incomplete = 1;
 800d0f0:	7a13      	ldrb	r3, [r2, #8]
 800d0f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0f6:	7213      	strb	r3, [r2, #8]
         n = (uint16_t)(s + (ODLISTSIZE >> 1));
 800d0f8:	8849      	ldrh	r1, [r1, #2]
 800d0fa:	390e      	subs	r1, #14
 800d0fc:	f3c1 014e 	ubfx	r1, r1, #1, #15
 800d100:	4431      	add	r1, r6
 800d102:	b289      	uxth	r1, r1
      coel->infoheader.reserved = 0x00;
 800d104:	2300      	movs	r3, #0
 800d106:	7253      	strb	r3, [r2, #9]
      ESCvar.fragsleft--;
 800d108:	3801      	subs	r0, #1
 800d10a:	4b14      	ldr	r3, [pc, #80]	; (800d15c <SDO_getodlistcont+0xc0>)
 800d10c:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
      coel->infoheader.fragmentsleft = htoes ((uint16_t)ESCvar.fragsleft);
 800d110:	8150      	strh	r0, [r2, #10]
      p = &(coel->index);
 800d112:	320c      	adds	r2, #12
      for (i = s; i < n; i++)
 800d114:	4633      	mov	r3, r6
 800d116:	e013      	b.n	800d140 <SDO_getodlistcont+0xa4>
         coel->infoheader.incomplete = 0;
 800d118:	7a13      	ldrb	r3, [r2, #8]
 800d11a:	f36f 13c7 	bfc	r3, #7, #1
 800d11e:	7213      	strb	r3, [r2, #8]
         MBXcontrol[0].state = MBXstate_idle;
 800d120:	2100      	movs	r1, #0
 800d122:	4b10      	ldr	r3, [pc, #64]	; (800d164 <SDO_getodlistcont+0xc8>)
 800d124:	7019      	strb	r1, [r3, #0]
         ESCvar.xoe = 0;
 800d126:	4b0d      	ldr	r3, [pc, #52]	; (800d15c <SDO_getodlistcont+0xc0>)
 800d128:	f883 108e 	strb.w	r1, [r3, #142]	; 0x8e
         n = ESCvar.entries;
 800d12c:	f8b3 1098 	ldrh.w	r1, [r3, #152]	; 0x98
 800d130:	e7e8      	b.n	800d104 <SDO_getodlistcont+0x68>
         *p = htoes (SDOobjects[i].index);
 800d132:	0118      	lsls	r0, r3, #4
 800d134:	4d0c      	ldr	r5, [pc, #48]	; (800d168 <SDO_getodlistcont+0xcc>)
 800d136:	5a28      	ldrh	r0, [r5, r0]
 800d138:	f822 0b02 	strh.w	r0, [r2], #2
      for (i = s; i < n; i++)
 800d13c:	3301      	adds	r3, #1
 800d13e:	b29b      	uxth	r3, r3
 800d140:	428b      	cmp	r3, r1
 800d142:	d3f6      	bcc.n	800d132 <SDO_getodlistcont+0x96>
      coel->mbxheader.length = htoes (0x06 + ((n - s) << 1));
 800d144:	1b8b      	subs	r3, r1, r6
 800d146:	b29b      	uxth	r3, r3
 800d148:	005b      	lsls	r3, r3, #1
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	3306      	adds	r3, #6
 800d14e:	f824 300c 	strh.w	r3, [r4, ip]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d152:	4b04      	ldr	r3, [pc, #16]	; (800d164 <SDO_getodlistcont+0xc8>)
 800d154:	2203      	movs	r2, #3
 800d156:	f803 200e 	strb.w	r2, [r3, lr]
}
 800d15a:	bd70      	pop	{r4, r5, r6, pc}
 800d15c:	200082bc 	.word	0x200082bc
 800d160:	200089a8 	.word	0x200089a8
 800d164:	20008fa8 	.word	0x20008fa8
 800d168:	0801558c 	.word	0x0801558c

0800d16c <SDO_infoerror>:
{
 800d16c:	b538      	push	{r3, r4, r5, lr}
 800d16e:	4604      	mov	r4, r0
   MBXout = ESC_claimbuffer ();
 800d170:	f7ff f8dc 	bl	800c32c <ESC_claimbuffer>
   if (MBXout)
 800d174:	b340      	cbz	r0, 800d1c8 <SDO_infoerror+0x5c>
 800d176:	4601      	mov	r1, r0
      coeres = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800d178:	4814      	ldr	r0, [pc, #80]	; (800d1cc <SDO_infoerror+0x60>)
 800d17a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800d17c:	fb01 f202 	mul.w	r2, r1, r2
 800d180:	4d13      	ldr	r5, [pc, #76]	; (800d1d0 <SDO_infoerror+0x64>)
 800d182:	1953      	adds	r3, r2, r5
      coeres->mbxheader.length = htoes (COE_HEADERSIZE);
 800d184:	f04f 0c0a 	mov.w	ip, #10
 800d188:	f825 c002 	strh.w	ip, [r5, r2]
      coeres->mbxheader.mbxtype = MBXCOE;
 800d18c:	795a      	ldrb	r2, [r3, #5]
 800d18e:	f04f 0c03 	mov.w	ip, #3
 800d192:	f36c 0203 	bfi	r2, ip, #0, #4
 800d196:	715a      	strb	r2, [r3, #5]
      coeres->coeheader.numberservice =
 800d198:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d19c:	80da      	strh	r2, [r3, #6]
      coeres->infoheader.opcode = COE_INFOERROR;
 800d19e:	7a1a      	ldrb	r2, [r3, #8]
 800d1a0:	2507      	movs	r5, #7
 800d1a2:	f365 0206 	bfi	r2, r5, #0, #7
 800d1a6:	721a      	strb	r2, [r3, #8]
      coeres->infoheader.incomplete = 0;
 800d1a8:	b2d2      	uxtb	r2, r2
 800d1aa:	f36f 12c7 	bfc	r2, #7, #1
 800d1ae:	721a      	strb	r2, [r3, #8]
      coeres->infoheader.reserved = 0x00;
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	725a      	strb	r2, [r3, #9]
      coeres->infoheader.fragmentsleft = 0;
 800d1b4:	815a      	strh	r2, [r3, #10]
      coeres->index = (uint16_t)htoel (abortcode);
 800d1b6:	819c      	strh	r4, [r3, #12]
      coeres->datatype = (uint16_t)(htoel (abortcode) >> 16);
 800d1b8:	0c24      	lsrs	r4, r4, #16
 800d1ba:	81dc      	strh	r4, [r3, #14]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d1bc:	4b05      	ldr	r3, [pc, #20]	; (800d1d4 <SDO_infoerror+0x68>)
 800d1be:	f803 c001 	strb.w	ip, [r3, r1]
      MBXcontrol[0].state = MBXstate_idle;
 800d1c2:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 800d1c4:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
}
 800d1c8:	bd38      	pop	{r3, r4, r5, pc}
 800d1ca:	bf00      	nop
 800d1cc:	200082bc 	.word	0x200082bc
 800d1d0:	200089a8 	.word	0x200089a8
 800d1d4:	20008fa8 	.word	0x20008fa8

0800d1d8 <SDO_getodlist>:
{
 800d1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t entries = 0;
 800d1da:	2400      	movs	r4, #0
   while (SDOobjects[entries].index != 0xffff)
 800d1dc:	e001      	b.n	800d1e2 <SDO_getodlist+0xa>
      entries++;
 800d1de:	3401      	adds	r4, #1
 800d1e0:	b2a4      	uxth	r4, r4
   while (SDOobjects[entries].index != 0xffff)
 800d1e2:	0123      	lsls	r3, r4, #4
 800d1e4:	4a46      	ldr	r2, [pc, #280]	; (800d300 <SDO_getodlist+0x128>)
 800d1e6:	5ad2      	ldrh	r2, [r2, r3]
 800d1e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d1f6      	bne.n	800d1de <SDO_getodlist+0x6>
   ESCvar.entries = entries;
 800d1f0:	4b44      	ldr	r3, [pc, #272]	; (800d304 <SDO_getodlist+0x12c>)
 800d1f2:	f8a3 4098 	strh.w	r4, [r3, #152]	; 0x98
   frags = ((uint32_t)(entries << 1) + ODLISTSIZE - 1U);
 800d1f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1f8:	885b      	ldrh	r3, [r3, #2]
 800d1fa:	3b0e      	subs	r3, #14
 800d1fc:	f023 0301 	bic.w	r3, r3, #1
 800d200:	041b      	lsls	r3, r3, #16
 800d202:	0c1b      	lsrs	r3, r3, #16
 800d204:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800d208:	3901      	subs	r1, #1
   frags /= ODLISTSIZE;
 800d20a:	fbb1 f5f3 	udiv	r5, r1, r3
   if (etohs (coer->index) > 0x01)
 800d20e:	4b3e      	ldr	r3, [pc, #248]	; (800d308 <SDO_getodlist+0x130>)
 800d210:	899b      	ldrh	r3, [r3, #12]
 800d212:	2b01      	cmp	r3, #1
 800d214:	d903      	bls.n	800d21e <SDO_getodlist+0x46>
      SDO_infoerror (ABORT_UNSUPPORTED);
 800d216:	483d      	ldr	r0, [pc, #244]	; (800d30c <SDO_getodlist+0x134>)
 800d218:	f7ff ffa8 	bl	800d16c <SDO_infoerror>
}
 800d21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MBXout = ESC_claimbuffer ();
 800d21e:	f7ff f885 	bl	800c32c <ESC_claimbuffer>
   if (MBXout)
 800d222:	4684      	mov	ip, r0
 800d224:	2800      	cmp	r0, #0
 800d226:	d0f9      	beq.n	800d21c <SDO_getodlist+0x44>
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800d228:	4b36      	ldr	r3, [pc, #216]	; (800d304 <SDO_getodlist+0x12c>)
 800d22a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d22c:	fb00 f00c 	mul.w	r0, r0, ip
 800d230:	4e35      	ldr	r6, [pc, #212]	; (800d308 <SDO_getodlist+0x130>)
 800d232:	1983      	adds	r3, r0, r6
      coel->mbxheader.mbxtype = MBXCOE;
 800d234:	795a      	ldrb	r2, [r3, #5]
 800d236:	2103      	movs	r1, #3
 800d238:	f361 0203 	bfi	r2, r1, #0, #4
 800d23c:	715a      	strb	r2, [r3, #5]
      coel->coeheader.numberservice =
 800d23e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d242:	80da      	strh	r2, [r3, #6]
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 800d244:	7a1a      	ldrb	r2, [r3, #8]
 800d246:	2102      	movs	r1, #2
 800d248:	f361 0206 	bfi	r2, r1, #0, #7
 800d24c:	721a      	strb	r2, [r3, #8]
      if (etohs (coer->index) == 0x00)
 800d24e:	89b2      	ldrh	r2, [r6, #12]
 800d250:	b9ba      	cbnz	r2, 800d282 <SDO_getodlist+0xaa>
         coel->index = htoes (0x00);
 800d252:	819a      	strh	r2, [r3, #12]
         coel->infoheader.incomplete = 0;
 800d254:	7a19      	ldrb	r1, [r3, #8]
 800d256:	f362 11c7 	bfi	r1, r2, #7, #1
 800d25a:	7219      	strb	r1, [r3, #8]
         coel->infoheader.reserved = 0x00;
 800d25c:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 800d25e:	815a      	strh	r2, [r3, #10]
         MBXcontrol[0].state = MBXstate_idle;
 800d260:	492b      	ldr	r1, [pc, #172]	; (800d310 <SDO_getodlist+0x138>)
 800d262:	700a      	strb	r2, [r1, #0]
         ESCvar.xoe = 0;
 800d264:	4927      	ldr	r1, [pc, #156]	; (800d304 <SDO_getodlist+0x12c>)
 800d266:	f881 208e 	strb.w	r2, [r1, #142]	; 0x8e
         ESCvar.frags = frags;
 800d26a:	f8c1 509c 	str.w	r5, [r1, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 800d26e:	1e6f      	subs	r7, r5, #1
 800d270:	f8c1 70a0 	str.w	r7, [r1, #160]	; 0xa0
         *p = htoes (entries);
 800d274:	81dc      	strh	r4, [r3, #14]
         *p = 0;
 800d276:	821a      	strh	r2, [r3, #16]
         *p = 0;
 800d278:	825a      	strh	r2, [r3, #18]
         *p = 0;
 800d27a:	829a      	strh	r2, [r3, #20]
         *p = 0;
 800d27c:	82da      	strh	r2, [r3, #22]
         coel->mbxheader.length = htoes (0x08 + (5 << 1));
 800d27e:	2212      	movs	r2, #18
 800d280:	5232      	strh	r2, [r6, r0]
      if (etohs (coer->index) == 0x01)
 800d282:	4a21      	ldr	r2, [pc, #132]	; (800d308 <SDO_getodlist+0x130>)
 800d284:	8992      	ldrh	r2, [r2, #12]
 800d286:	2a01      	cmp	r2, #1
 800d288:	d004      	beq.n	800d294 <SDO_getodlist+0xbc>
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d28a:	4b21      	ldr	r3, [pc, #132]	; (800d310 <SDO_getodlist+0x138>)
 800d28c:	2203      	movs	r2, #3
 800d28e:	f803 200c 	strb.w	r2, [r3, ip]
}
 800d292:	e7c3      	b.n	800d21c <SDO_getodlist+0x44>
         if (frags > 1)
 800d294:	2d01      	cmp	r5, #1
 800d296:	d919      	bls.n	800d2cc <SDO_getodlist+0xf4>
            coel->infoheader.incomplete = 1;
 800d298:	7a1a      	ldrb	r2, [r3, #8]
 800d29a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d29e:	721a      	strb	r2, [r3, #8]
            ESCvar.xoe = MBXCOE + MBXODL;
 800d2a0:	4a18      	ldr	r2, [pc, #96]	; (800d304 <SDO_getodlist+0x12c>)
 800d2a2:	2113      	movs	r1, #19
 800d2a4:	f882 108e 	strb.w	r1, [r2, #142]	; 0x8e
            n = ODLISTSIZE >> 1;
 800d2a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d2aa:	8854      	ldrh	r4, [r2, #2]
 800d2ac:	3c0e      	subs	r4, #14
 800d2ae:	f3c4 044e 	ubfx	r4, r4, #1, #15
         coel->infoheader.reserved = 0x00;
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	725a      	strb	r2, [r3, #9]
         ESCvar.frags = frags;
 800d2b6:	4f13      	ldr	r7, [pc, #76]	; (800d304 <SDO_getodlist+0x12c>)
 800d2b8:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 800d2bc:	3d01      	subs	r5, #1
 800d2be:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
         coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 800d2c2:	815d      	strh	r5, [r3, #10]
         coel->index = htoes (0x01);
 800d2c4:	2101      	movs	r1, #1
 800d2c6:	8199      	strh	r1, [r3, #12]
         p = &(coel->datatype);
 800d2c8:	330e      	adds	r3, #14
         for (i = 0; i < n; i++)
 800d2ca:	e011      	b.n	800d2f0 <SDO_getodlist+0x118>
            coel->infoheader.incomplete = 0;
 800d2cc:	7a1a      	ldrb	r2, [r3, #8]
 800d2ce:	f36f 12c7 	bfc	r2, #7, #1
 800d2d2:	721a      	strb	r2, [r3, #8]
            MBXcontrol[0].state = MBXstate_idle;
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	490e      	ldr	r1, [pc, #56]	; (800d310 <SDO_getodlist+0x138>)
 800d2d8:	700a      	strb	r2, [r1, #0]
            ESCvar.xoe = 0;
 800d2da:	490a      	ldr	r1, [pc, #40]	; (800d304 <SDO_getodlist+0x12c>)
 800d2dc:	f881 208e 	strb.w	r2, [r1, #142]	; 0x8e
            n = entries;
 800d2e0:	e7e7      	b.n	800d2b2 <SDO_getodlist+0xda>
            *p = htoes (SDOobjects[i].index);
 800d2e2:	0111      	lsls	r1, r2, #4
 800d2e4:	4d06      	ldr	r5, [pc, #24]	; (800d300 <SDO_getodlist+0x128>)
 800d2e6:	5a69      	ldrh	r1, [r5, r1]
 800d2e8:	f823 1b02 	strh.w	r1, [r3], #2
         for (i = 0; i < n; i++)
 800d2ec:	3201      	adds	r2, #1
 800d2ee:	b292      	uxth	r2, r2
 800d2f0:	42a2      	cmp	r2, r4
 800d2f2:	d3f6      	bcc.n	800d2e2 <SDO_getodlist+0x10a>
         coel->mbxheader.length = htoes (0x08 + (n << 1));
 800d2f4:	0063      	lsls	r3, r4, #1
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	3308      	adds	r3, #8
 800d2fa:	5233      	strh	r3, [r6, r0]
 800d2fc:	e7c5      	b.n	800d28a <SDO_getodlist+0xb2>
 800d2fe:	bf00      	nop
 800d300:	0801558c 	.word	0x0801558c
 800d304:	200082bc 	.word	0x200082bc
 800d308:	200089a8 	.word	0x200089a8
 800d30c:	06010000 	.word	0x06010000
 800d310:	20008fa8 	.word	0x20008fa8

0800d314 <SDO_abort>:
{
 800d314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d316:	460e      	mov	r6, r1
 800d318:	4615      	mov	r5, r2
 800d31a:	461f      	mov	r7, r3
   if (reusembx)
 800d31c:	4604      	mov	r4, r0
 800d31e:	b300      	cbz	r0, 800d362 <SDO_abort+0x4e>
   if (MBXout)
 800d320:	b1f4      	cbz	r4, 800d360 <SDO_abort+0x4c>
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800d322:	4b12      	ldr	r3, [pc, #72]	; (800d36c <SDO_abort+0x58>)
 800d324:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d326:	fb04 f000 	mul.w	r0, r4, r0
 800d32a:	4b11      	ldr	r3, [pc, #68]	; (800d370 <SDO_abort+0x5c>)
 800d32c:	eb00 0c03 	add.w	ip, r0, r3
      coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800d330:	220a      	movs	r2, #10
 800d332:	521a      	strh	r2, [r3, r0]
      coeres->mbxheader.mbxtype = MBXCOE;
 800d334:	f89c 2005 	ldrb.w	r2, [ip, #5]
 800d338:	2303      	movs	r3, #3
 800d33a:	f363 0203 	bfi	r2, r3, #0, #4
 800d33e:	f88c 2005 	strb.w	r2, [ip, #5]
      coeres->coeheader.numberservice =
 800d342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d346:	f8ac 2006 	strh.w	r2, [ip, #6]
      coeres->index = htoes (index);
 800d34a:	f8ac 6009 	strh.w	r6, [ip, #9]
      coeres->subindex = subindex;
 800d34e:	f88c 500b 	strb.w	r5, [ip, #11]
      coeres->command = COE_COMMAND_SDOABORT;
 800d352:	2280      	movs	r2, #128	; 0x80
 800d354:	f88c 2008 	strb.w	r2, [ip, #8]
      coeres->size = htoel (abortcode);
 800d358:	f8cc 700c 	str.w	r7, [ip, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d35c:	4a05      	ldr	r2, [pc, #20]	; (800d374 <SDO_abort+0x60>)
 800d35e:	5513      	strb	r3, [r2, r4]
}
 800d360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MBXout = ESC_claimbuffer ();
 800d362:	f7fe ffe3 	bl	800c32c <ESC_claimbuffer>
 800d366:	4604      	mov	r4, r0
 800d368:	e7da      	b.n	800d320 <SDO_abort+0xc>
 800d36a:	bf00      	nop
 800d36c:	200082bc 	.word	0x200082bc
 800d370:	200089a8 	.word	0x200089a8
 800d374:	20008fa8 	.word	0x20008fa8

0800d378 <set_state_idle>:
{
 800d378:	b508      	push	{r3, lr}
   if (abortcode != 0)
 800d37a:	b933      	cbnz	r3, 800d38a <set_state_idle+0x12>
   MBXcontrol[0].state = MBXstate_idle;
 800d37c:	2300      	movs	r3, #0
 800d37e:	4a04      	ldr	r2, [pc, #16]	; (800d390 <set_state_idle+0x18>)
 800d380:	7013      	strb	r3, [r2, #0]
   ESCvar.xoe = 0;
 800d382:	4a04      	ldr	r2, [pc, #16]	; (800d394 <set_state_idle+0x1c>)
 800d384:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
}
 800d388:	bd08      	pop	{r3, pc}
      SDO_abort (reusembx, index, subindex, abortcode);
 800d38a:	f7ff ffc3 	bl	800d314 <SDO_abort>
 800d38e:	e7f5      	b.n	800d37c <set_state_idle+0x4>
 800d390:	20008fa8 	.word	0x20008fa8
 800d394:	200082bc 	.word	0x200082bc

0800d398 <copy2mbx>:
{
 800d398:	b508      	push	{r3, lr}
 800d39a:	460b      	mov	r3, r1
   memcpy (dest, source, size);
 800d39c:	4601      	mov	r1, r0
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f004 fd30 	bl	8011e04 <memcpy>
}
 800d3a4:	bd08      	pop	{r3, pc}
	...

0800d3a8 <SDO_uploadsegment>:
{
 800d3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3ac:	b082      	sub	sp, #8
   MBXout = ESC_claimbuffer ();
 800d3ae:	f7fe ffbd 	bl	800c32c <ESC_claimbuffer>
   if (MBXout)
 800d3b2:	b940      	cbnz	r0, 800d3c6 <SDO_uploadsegment+0x1e>
   MBXcontrol[0].state = MBXstate_idle;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	4a39      	ldr	r2, [pc, #228]	; (800d49c <SDO_uploadsegment+0xf4>)
 800d3b8:	7013      	strb	r3, [r2, #0]
   ESCvar.xoe = 0;
 800d3ba:	4a39      	ldr	r2, [pc, #228]	; (800d4a0 <SDO_uploadsegment+0xf8>)
 800d3bc:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
}
 800d3c0:	b002      	add	sp, #8
 800d3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c6:	4606      	mov	r6, r0
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800d3c8:	4f35      	ldr	r7, [pc, #212]	; (800d4a0 <SDO_uploadsegment+0xf8>)
 800d3ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3cc:	fb03 f800 	mul.w	r8, r3, r0
 800d3d0:	4d34      	ldr	r5, [pc, #208]	; (800d4a4 <SDO_uploadsegment+0xfc>)
 800d3d2:	eb08 0905 	add.w	r9, r8, r5
      offset = ESCvar.fragsleft;
 800d3d6:	f8d7 a0a0 	ldr.w	sl, [r7, #160]	; 0xa0
      size = ESCvar.frags - ESCvar.fragsleft;
 800d3da:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800d3de:	eba4 040a 	sub.w	r4, r4, sl
            (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 800d3e2:	7a2a      	ldrb	r2, [r5, #8]
      init_coesdo(coeres, COE_SDORESPONSE, command,
 800d3e4:	7aeb      	ldrb	r3, [r5, #11]
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800d3ec:	f002 0210 	and.w	r2, r2, #16
 800d3f0:	2103      	movs	r1, #3
 800d3f2:	4648      	mov	r0, r9
 800d3f4:	f7ff fd32 	bl	800ce5c <init_coesdo>
      if ((size + COE_SEGMENTHEADERSIZE) > ESC_MBXDSIZE)
 800d3f8:	1ce1      	adds	r1, r4, #3
 800d3fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3fc:	1f9a      	subs	r2, r3, #6
 800d3fe:	4291      	cmp	r1, r2
 800d400:	d919      	bls.n	800d436 <SDO_uploadsegment+0x8e>
         size = ESC_MBXDSIZE - COE_SEGMENTHEADERSIZE;
 800d402:	f1a3 0409 	sub.w	r4, r3, #9
         ESCvar.fragsleft += size;
 800d406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d40a:	4423      	add	r3, r4
 800d40c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
         coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 800d410:	1ce3      	adds	r3, r4, #3
 800d412:	f825 3008 	strh.w	r3, [r5, r8]
      copy2mbx ((uint8_t *) ESCvar.data + offset, (&(coeres->command)) + 1,
 800d416:	4d22      	ldr	r5, [pc, #136]	; (800d4a0 <SDO_uploadsegment+0xf8>)
 800d418:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 800d41c:	4622      	mov	r2, r4
 800d41e:	f109 0109 	add.w	r1, r9, #9
 800d422:	4450      	add	r0, sl
 800d424:	f7ff ffb8 	bl	800d398 <copy2mbx>
      if (ESCvar.segmented == 0)
 800d428:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
 800d42c:	b31b      	cbz	r3, 800d476 <SDO_uploadsegment+0xce>
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d42e:	4b1b      	ldr	r3, [pc, #108]	; (800d49c <SDO_uploadsegment+0xf4>)
 800d430:	2203      	movs	r2, #3
 800d432:	559a      	strb	r2, [r3, r6]
 800d434:	e7be      	b.n	800d3b4 <SDO_uploadsegment+0xc>
         ESCvar.segmented = 0;
 800d436:	4b1a      	ldr	r3, [pc, #104]	; (800d4a0 <SDO_uploadsegment+0xf8>)
 800d438:	2200      	movs	r2, #0
 800d43a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.frags = 0;
 800d43e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = 0;
 800d442:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         coeres->command |= COE_COMMAND_LASTSEGMENTBIT;
 800d446:	f899 3008 	ldrb.w	r3, [r9, #8]
 800d44a:	f043 0301 	orr.w	r3, r3, #1
 800d44e:	f889 3008 	strb.w	r3, [r9, #8]
         if (size >= 7)
 800d452:	2c06      	cmp	r4, #6
 800d454:	d903      	bls.n	800d45e <SDO_uploadsegment+0xb6>
            coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 800d456:	1ce3      	adds	r3, r4, #3
 800d458:	f825 3008 	strh.w	r3, [r5, r8]
 800d45c:	e7db      	b.n	800d416 <SDO_uploadsegment+0x6e>
            coeres->command |= (uint8_t)((7U - size) << 1);
 800d45e:	f1c4 0207 	rsb	r2, r4, #7
 800d462:	b2d2      	uxtb	r2, r2
 800d464:	0052      	lsls	r2, r2, #1
 800d466:	b2d2      	uxtb	r2, r2
 800d468:	4313      	orrs	r3, r2
 800d46a:	f889 3008 	strb.w	r3, [r9, #8]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800d46e:	230a      	movs	r3, #10
 800d470:	f825 3008 	strh.w	r3, [r5, r8]
 800d474:	e7cf      	b.n	800d416 <SDO_uploadsegment+0x6e>
         abort = ESC_upload_post_objecthandler (etohs (coesdo->index),
 800d476:	4b0b      	ldr	r3, [pc, #44]	; (800d4a4 <SDO_uploadsegment+0xfc>)
 800d478:	f8b5 20a8 	ldrh.w	r2, [r5, #168]	; 0xa8
 800d47c:	7ad9      	ldrb	r1, [r3, #11]
 800d47e:	f8b3 0009 	ldrh.w	r0, [r3, #9]
 800d482:	f7fe fb9d 	bl	800bbc0 <ESC_upload_post_objecthandler>
         if (abort != 0)
 800d486:	4603      	mov	r3, r0
 800d488:	2800      	cmp	r0, #0
 800d48a:	d0d0      	beq.n	800d42e <SDO_uploadsegment+0x86>
            set_state_idle (MBXout, etohs (coesdo->index), coesdo->subindex, abort);
 800d48c:	4905      	ldr	r1, [pc, #20]	; (800d4a4 <SDO_uploadsegment+0xfc>)
 800d48e:	7aca      	ldrb	r2, [r1, #11]
 800d490:	f8b1 1009 	ldrh.w	r1, [r1, #9]
 800d494:	4630      	mov	r0, r6
 800d496:	f7ff ff6f 	bl	800d378 <set_state_idle>
            return;
 800d49a:	e791      	b.n	800d3c0 <SDO_uploadsegment+0x18>
 800d49c:	20008fa8 	.word	0x20008fa8
 800d4a0:	200082bc 	.word	0x200082bc
 800d4a4:	200089a8 	.word	0x200089a8

0800d4a8 <complete_access_subindex_loop>:
{
 800d4a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ac:	461f      	mov	r7, r3
 800d4ae:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
 800d4b2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 800d4b6:	8843      	ldrh	r3, [r0, #2]
       (objd->datatype == DTYPE_OCTET_STRING)   ||
 800d4b8:	3b09      	subs	r3, #9
 800d4ba:	b29b      	uxth	r3, r3
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 800d4bc:	2b02      	cmp	r3, #2
 800d4be:	f240 80a0 	bls.w	800d602 <complete_access_subindex_loop+0x15a>
 800d4c2:	4681      	mov	r9, r0
 800d4c4:	468a      	mov	sl, r1
 800d4c6:	4614      	mov	r4, r2
   if ((load_type == UPLOAD) && (mbxdata != NULL))
 800d4c8:	f1bb 0f00 	cmp.w	fp, #0
 800d4cc:	d102      	bne.n	800d4d4 <complete_access_subindex_loop+0x2c>
 800d4ce:	b10f      	cbz	r7, 800d4d4 <complete_access_subindex_loop+0x2c>
      mbxdata[1] = 0;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	707b      	strb	r3, [r7, #1]
      size += (nsub == 0) ? 16 : bitlen;
 800d4d4:	2600      	movs	r6, #0
 800d4d6:	e049      	b.n	800d56c <complete_access_subindex_loop+0xc4>
            (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800d4d8:	f103 010c 	add.w	r1, r3, #12
 800d4dc:	e055      	b.n	800d58a <complete_access_subindex_loop+0xe2>
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 800d4de:	1df0      	adds	r0, r6, #7
                        BITS2BYTES(bitlen));
 800d4e0:	1dea      	adds	r2, r5, #7
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 800d4e2:	08d2      	lsrs	r2, r2, #3
 800d4e4:	eb07 00d0 	add.w	r0, r7, r0, lsr #3
 800d4e8:	f004 fc8c 	bl	8011e04 <memcpy>
 800d4ec:	e032      	b.n	800d554 <complete_access_subindex_loop+0xac>
            else if (WRITE_ACCESS(access, state))
 800d4ee:	f01c 0f08 	tst.w	ip, #8
 800d4f2:	d001      	beq.n	800d4f8 <complete_access_subindex_loop+0x50>
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d009      	beq.n	800d50c <complete_access_subindex_loop+0x64>
 800d4f8:	f01c 0f10 	tst.w	ip, #16
 800d4fc:	d001      	beq.n	800d502 <complete_access_subindex_loop+0x5a>
 800d4fe:	2b04      	cmp	r3, #4
 800d500:	d004      	beq.n	800d50c <complete_access_subindex_loop+0x64>
 800d502:	f01c 0f20 	tst.w	ip, #32
 800d506:	d025      	beq.n	800d554 <complete_access_subindex_loop+0xac>
 800d508:	2b08      	cmp	r3, #8
 800d50a:	d123      	bne.n	800d554 <complete_access_subindex_loop+0xac>
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 800d50c:	1df1      	adds	r1, r6, #7
                     BITS2BYTES(bitlen));
 800d50e:	1dea      	adds	r2, r5, #7
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 800d510:	08d2      	lsrs	r2, r2, #3
 800d512:	eb07 01d1 	add.w	r1, r7, r1, lsr #3
 800d516:	f004 fc75 	bl	8011e04 <memcpy>
 800d51a:	e01b      	b.n	800d554 <complete_access_subindex_loop+0xac>
      else if ((load_type == UPLOAD) && (mbxdata != NULL))
 800d51c:	f1bb 0f00 	cmp.w	fp, #0
 800d520:	d118      	bne.n	800d554 <complete_access_subindex_loop+0xac>
 800d522:	b1bf      	cbz	r7, 800d554 <complete_access_subindex_loop+0xac>
         uint32_t bitmask = (1U << bitlen) - 1U;
 800d524:	2001      	movs	r0, #1
 800d526:	40a8      	lsls	r0, r5
 800d528:	3801      	subs	r0, #1
         if (READ_ACCESS(access, state))
 800d52a:	f01c 0f01 	tst.w	ip, #1
 800d52e:	d001      	beq.n	800d534 <complete_access_subindex_loop+0x8c>
 800d530:	2b02      	cmp	r3, #2
 800d532:	d057      	beq.n	800d5e4 <complete_access_subindex_loop+0x13c>
 800d534:	f01c 0f02 	tst.w	ip, #2
 800d538:	d001      	beq.n	800d53e <complete_access_subindex_loop+0x96>
 800d53a:	2b04      	cmp	r3, #4
 800d53c:	d052      	beq.n	800d5e4 <complete_access_subindex_loop+0x13c>
 800d53e:	f01c 0f04 	tst.w	ip, #4
 800d542:	d001      	beq.n	800d548 <complete_access_subindex_loop+0xa0>
 800d544:	2b08      	cmp	r3, #8
 800d546:	d04d      	beq.n	800d5e4 <complete_access_subindex_loop+0x13c>
            tempmask = ~(bitmask << bitoffset);
 800d548:	4090      	lsls	r0, r2
            mbxdata[BITSPOS2BYTESOFFSET(size)] &= (uint8_t)tempmask;
 800d54a:	08f2      	lsrs	r2, r6, #3
 800d54c:	5cbb      	ldrb	r3, [r7, r2]
 800d54e:	ea23 0300 	bic.w	r3, r3, r0
 800d552:	54bb      	strb	r3, [r7, r2]
      size += (nsub == 0) ? 16 : bitlen;
 800d554:	b904      	cbnz	r4, 800d558 <complete_access_subindex_loop+0xb0>
 800d556:	2510      	movs	r5, #16
 800d558:	442e      	add	r6, r5
      nsub++;
 800d55a:	3401      	adds	r4, #1
 800d55c:	b224      	sxth	r4, r4
      if ((max_bytes > 0) && (BITS2BYTES(size) >= max_bytes))
 800d55e:	f1b8 0f00 	cmp.w	r8, #0
 800d562:	d003      	beq.n	800d56c <complete_access_subindex_loop+0xc4>
 800d564:	1df3      	adds	r3, r6, #7
 800d566:	ebb8 0fd3 	cmp.w	r8, r3, lsr #3
 800d56a:	d94b      	bls.n	800d604 <complete_access_subindex_loop+0x15c>
   while (nsub <= SDOobjects[nidx].maxsub)
 800d56c:	4b27      	ldr	r3, [pc, #156]	; (800d60c <complete_access_subindex_loop+0x164>)
 800d56e:	eb03 130a 	add.w	r3, r3, sl, lsl #4
 800d572:	791b      	ldrb	r3, [r3, #4]
 800d574:	429c      	cmp	r4, r3
 800d576:	dc45      	bgt.n	800d604 <complete_access_subindex_loop+0x15c>
      uint16_t bitlen = (objd + nsub)->bitlength;
 800d578:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800d57c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d580:	889d      	ldrh	r5, [r3, #4]
      void *ul_source = ((objd + nsub)->data != NULL) ?
 800d582:	6918      	ldr	r0, [r3, #16]
            (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800d584:	2800      	cmp	r0, #0
 800d586:	d0a7      	beq.n	800d4d8 <complete_access_subindex_loop+0x30>
 800d588:	4601      	mov	r1, r0
      uint8_t bitoffset = size % 8;
 800d58a:	f006 0207 	and.w	r2, r6, #7
      uint8_t access = (objd + nsub)->flags & 0x3f;
 800d58e:	f893 c006 	ldrb.w	ip, [r3, #6]
      uint8_t state = ESCvar.ALstatus & 0x0f;
 800d592:	4b1f      	ldr	r3, [pc, #124]	; (800d610 <complete_access_subindex_loop+0x168>)
 800d594:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d598:	f003 030f 	and.w	r3, r3, #15
      if ((bitlen % 8) == 0)
 800d59c:	f015 0f07 	tst.w	r5, #7
 800d5a0:	d1bc      	bne.n	800d51c <complete_access_subindex_loop+0x74>
         if (bitoffset != 0)
 800d5a2:	b112      	cbz	r2, 800d5aa <complete_access_subindex_loop+0x102>
            size += (8U - bitoffset);
 800d5a4:	1ab2      	subs	r2, r6, r2
 800d5a6:	f102 0608 	add.w	r6, r2, #8
         if (mbxdata != NULL)
 800d5aa:	2f00      	cmp	r7, #0
 800d5ac:	d0d2      	beq.n	800d554 <complete_access_subindex_loop+0xac>
            if (load_type == UPLOAD)
 800d5ae:	f1bb 0f00 	cmp.w	fp, #0
 800d5b2:	d19c      	bne.n	800d4ee <complete_access_subindex_loop+0x46>
               if (READ_ACCESS(access, state))
 800d5b4:	f01c 0f01 	tst.w	ip, #1
 800d5b8:	d001      	beq.n	800d5be <complete_access_subindex_loop+0x116>
 800d5ba:	2b02      	cmp	r3, #2
 800d5bc:	d08f      	beq.n	800d4de <complete_access_subindex_loop+0x36>
 800d5be:	f01c 0f02 	tst.w	ip, #2
 800d5c2:	d001      	beq.n	800d5c8 <complete_access_subindex_loop+0x120>
 800d5c4:	2b04      	cmp	r3, #4
 800d5c6:	d08a      	beq.n	800d4de <complete_access_subindex_loop+0x36>
 800d5c8:	f01c 0f04 	tst.w	ip, #4
 800d5cc:	d001      	beq.n	800d5d2 <complete_access_subindex_loop+0x12a>
 800d5ce:	2b08      	cmp	r3, #8
 800d5d0:	d085      	beq.n	800d4de <complete_access_subindex_loop+0x36>
                  memset(&mbxdata[BITS2BYTES(size)], 0, BITS2BYTES(bitlen));
 800d5d2:	1df0      	adds	r0, r6, #7
 800d5d4:	1dea      	adds	r2, r5, #7
 800d5d6:	08d2      	lsrs	r2, r2, #3
 800d5d8:	2100      	movs	r1, #0
 800d5da:	eb07 00d0 	add.w	r0, r7, r0, lsr #3
 800d5de:	f004 fb53 	bl	8011c88 <memset>
 800d5e2:	e7b7      	b.n	800d554 <complete_access_subindex_loop+0xac>
            if (bitoffset == 0)
 800d5e4:	b922      	cbnz	r2, 800d5f0 <complete_access_subindex_loop+0x148>
               mbxdata[BITSPOS2BYTESOFFSET(size)] = 0;
 800d5e6:	08f3      	lsrs	r3, r6, #3
 800d5e8:	f04f 0c00 	mov.w	ip, #0
 800d5ec:	f807 c003 	strb.w	ip, [r7, r3]
            tempmask = (*(uint8_t *)ul_source & bitmask) << bitoffset;
 800d5f0:	780b      	ldrb	r3, [r1, #0]
 800d5f2:	4003      	ands	r3, r0
 800d5f4:	4093      	lsls	r3, r2
            mbxdata[BITSPOS2BYTESOFFSET(size)] |= (uint8_t)tempmask;
 800d5f6:	08f2      	lsrs	r2, r6, #3
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	5cb9      	ldrb	r1, [r7, r2]
 800d5fc:	430b      	orrs	r3, r1
 800d5fe:	54bb      	strb	r3, [r7, r2]
 800d600:	e7a8      	b.n	800d554 <complete_access_subindex_loop+0xac>
      return ABORT_CA_NOT_SUPPORTED;
 800d602:	4e04      	ldr	r6, [pc, #16]	; (800d614 <complete_access_subindex_loop+0x16c>)
}
 800d604:	4630      	mov	r0, r6
 800d606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d60a:	bf00      	nop
 800d60c:	0801558c 	.word	0x0801558c
 800d610:	200082bc 	.word	0x200082bc
 800d614:	06010004 	.word	0x06010004

0800d618 <COE_getValue>:
{
 800d618:	b508      	push	{r3, lr}
   switch(obj->datatype)
 800d61a:	8843      	ldrh	r3, [r0, #2]
 800d61c:	3b01      	subs	r3, #1
 800d61e:	2b36      	cmp	r3, #54	; 0x36
 800d620:	d82d      	bhi.n	800d67e <COE_getValue+0x66>
 800d622:	e8df f003 	tbb	[pc, r3]
 800d626:	1c1c      	.short	0x1c1c
 800d628:	201c2420 	.word	0x201c2420
 800d62c:	2c2c2424 	.word	0x2c2c2424
 800d630:	2c2c2c2c 	.word	0x2c2c2c2c
 800d634:	2c282c2c 	.word	0x2c282c2c
 800d638:	2c282c2c 	.word	0x2c282c2c
 800d63c:	2c2c2c2c 	.word	0x2c2c2c2c
 800d640:	2c2c2c28 	.word	0x2c2c2c28
 800d644:	2c2c2c2c 	.word	0x2c2c2c2c
 800d648:	2c2c2c2c 	.word	0x2c2c2c2c
 800d64c:	2c2c2c2c 	.word	0x2c2c2c2c
 800d650:	201c2c2c 	.word	0x201c2c2c
 800d654:	1c1c1c24 	.word	0x1c1c1c24
 800d658:	1c1c1c1c 	.word	0x1c1c1c1c
 800d65c:	1c          	.byte	0x1c
 800d65d:	00          	.byte	0x00
      value = *(uint8_t *)obj->data;
 800d65e:	6903      	ldr	r3, [r0, #16]
 800d660:	7818      	ldrb	r0, [r3, #0]
 800d662:	2100      	movs	r1, #0
}
 800d664:	bd08      	pop	{r3, pc}
      value = *(uint16_t *)obj->data;
 800d666:	6903      	ldr	r3, [r0, #16]
 800d668:	8818      	ldrh	r0, [r3, #0]
 800d66a:	2100      	movs	r1, #0
      break;
 800d66c:	e7fa      	b.n	800d664 <COE_getValue+0x4c>
      value = *(uint32_t *)obj->data;
 800d66e:	6903      	ldr	r3, [r0, #16]
 800d670:	6818      	ldr	r0, [r3, #0]
 800d672:	2100      	movs	r1, #0
      break;
 800d674:	e7f6      	b.n	800d664 <COE_getValue+0x4c>
      value = *(uint64_t *)obj->data;
 800d676:	6903      	ldr	r3, [r0, #16]
 800d678:	6818      	ldr	r0, [r3, #0]
 800d67a:	6859      	ldr	r1, [r3, #4]
      break;
 800d67c:	e7f2      	b.n	800d664 <COE_getValue+0x4c>
      CC_ASSERT (0);
 800d67e:	4b03      	ldr	r3, [pc, #12]	; (800d68c <COE_getValue+0x74>)
 800d680:	4a03      	ldr	r2, [pc, #12]	; (800d690 <COE_getValue+0x78>)
 800d682:	f240 618d 	movw	r1, #1677	; 0x68d
 800d686:	4803      	ldr	r0, [pc, #12]	; (800d694 <COE_getValue+0x7c>)
 800d688:	f004 f978 	bl	801197c <__assert_func>
 800d68c:	08013648 	.word	0x08013648
 800d690:	080136a0 	.word	0x080136a0
 800d694:	0801364c 	.word	0x0801364c

0800d698 <SDO_findsubindex>:
{
 800d698:	b410      	push	{r4}
   objd = SDOobjects[nidx].objdesc;
 800d69a:	4b14      	ldr	r3, [pc, #80]	; (800d6ec <SDO_findsubindex+0x54>)
 800d69c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800d6a0:	68c4      	ldr	r4, [r0, #12]
   maxsub = SDOobjects[nidx].maxsub;
 800d6a2:	f890 c004 	ldrb.w	ip, [r0, #4]
   if ((subindex <= maxsub) && ((objd + subindex)->subindex == subindex))
 800d6a6:	458c      	cmp	ip, r1
 800d6a8:	d20c      	bcs.n	800d6c4 <SDO_findsubindex+0x2c>
 800d6aa:	2000      	movs	r0, #0
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 800d6ac:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800d6b0:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 800d6b4:	b28b      	uxth	r3, r1
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d20f      	bcs.n	800d6da <SDO_findsubindex+0x42>
 800d6ba:	4560      	cmp	r0, ip
 800d6bc:	da0d      	bge.n	800d6da <SDO_findsubindex+0x42>
      n++;
 800d6be:	3001      	adds	r0, #1
 800d6c0:	b200      	sxth	r0, r0
 800d6c2:	e7f3      	b.n	800d6ac <SDO_findsubindex+0x14>
   if ((subindex <= maxsub) && ((objd + subindex)->subindex == subindex))
 800d6c4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d6c8:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 800d6cc:	b28b      	uxth	r3, r1
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d001      	beq.n	800d6d6 <SDO_findsubindex+0x3e>
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	e7ea      	b.n	800d6ac <SDO_findsubindex+0x14>
      return subindex;
 800d6d6:	b208      	sxth	r0, r1
 800d6d8:	e001      	b.n	800d6de <SDO_findsubindex+0x46>
   if ((objd + n)->subindex != subindex)
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d102      	bne.n	800d6e4 <SDO_findsubindex+0x4c>
}
 800d6de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6e2:	4770      	bx	lr
      return -1;
 800d6e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6e8:	e7f9      	b.n	800d6de <SDO_findsubindex+0x46>
 800d6ea:	bf00      	nop
 800d6ec:	0801558c 	.word	0x0801558c

0800d6f0 <SDO_findobject>:
{
 800d6f0:	4601      	mov	r1, r0
   int32_t n = 0;
 800d6f2:	2000      	movs	r0, #0
   while (SDOobjects[n].index < index)
 800d6f4:	e000      	b.n	800d6f8 <SDO_findobject+0x8>
      n++;
 800d6f6:	3001      	adds	r0, #1
   while (SDOobjects[n].index < index)
 800d6f8:	0103      	lsls	r3, r0, #4
 800d6fa:	4a04      	ldr	r2, [pc, #16]	; (800d70c <SDO_findobject+0x1c>)
 800d6fc:	5ad3      	ldrh	r3, [r2, r3]
 800d6fe:	428b      	cmp	r3, r1
 800d700:	d3f9      	bcc.n	800d6f6 <SDO_findobject+0x6>
   if (SDOobjects[n].index != index)
 800d702:	d100      	bne.n	800d706 <SDO_findobject+0x16>
}
 800d704:	4770      	bx	lr
      return -1;
 800d706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d70a:	e7fb      	b.n	800d704 <SDO_findobject+0x14>
 800d70c:	0801558c 	.word	0x0801558c

0800d710 <complete_access_get_variables>:
{
 800d710:	b538      	push	{r3, r4, r5, lr}
 800d712:	461d      	mov	r5, r3
   *index = etohs (coesdo->index);
 800d714:	f8b0 3009 	ldrh.w	r3, [r0, #9]
 800d718:	800b      	strh	r3, [r1, #0]
   *subindex = coesdo->subindex;
 800d71a:	7ac3      	ldrb	r3, [r0, #11]
 800d71c:	7013      	strb	r3, [r2, #0]
   if (*subindex > 1)
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d80f      	bhi.n	800d742 <complete_access_get_variables+0x32>
 800d722:	4614      	mov	r4, r2
   *nidx = SDO_findobject (*index);
 800d724:	8808      	ldrh	r0, [r1, #0]
 800d726:	f7ff ffe3 	bl	800d6f0 <SDO_findobject>
 800d72a:	6028      	str	r0, [r5, #0]
   if (*nidx < 0)
 800d72c:	2800      	cmp	r0, #0
 800d72e:	db0a      	blt.n	800d746 <complete_access_get_variables+0x36>
   *nsub = SDO_findsubindex (*nidx, *subindex);
 800d730:	7821      	ldrb	r1, [r4, #0]
 800d732:	f7ff ffb1 	bl	800d698 <SDO_findsubindex>
 800d736:	9b04      	ldr	r3, [sp, #16]
 800d738:	8018      	strh	r0, [r3, #0]
   if (*nsub < 0)
 800d73a:	2800      	cmp	r0, #0
 800d73c:	db05      	blt.n	800d74a <complete_access_get_variables+0x3a>
   return 0;
 800d73e:	2000      	movs	r0, #0
}
 800d740:	bd38      	pop	{r3, r4, r5, pc}
      return ABORT_UNSUPPORTED;
 800d742:	4803      	ldr	r0, [pc, #12]	; (800d750 <complete_access_get_variables+0x40>)
 800d744:	e7fc      	b.n	800d740 <complete_access_get_variables+0x30>
      return ABORT_NOOBJECT;
 800d746:	4803      	ldr	r0, [pc, #12]	; (800d754 <complete_access_get_variables+0x44>)
 800d748:	e7fa      	b.n	800d740 <complete_access_get_variables+0x30>
      return ABORT_NOSUBINDEX;
 800d74a:	4803      	ldr	r0, [pc, #12]	; (800d758 <complete_access_get_variables+0x48>)
 800d74c:	e7f8      	b.n	800d740 <complete_access_get_variables+0x30>
 800d74e:	bf00      	nop
 800d750:	06010000 	.word	0x06010000
 800d754:	06020000 	.word	0x06020000
 800d758:	06090011 	.word	0x06090011

0800d75c <SDO_upload_complete_access>:
{
 800d75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d760:	b087      	sub	sp, #28
   uint32_t abortcode = complete_access_get_variables
 800d762:	f10d 030e 	add.w	r3, sp, #14
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	ab04      	add	r3, sp, #16
 800d76a:	f10d 0215 	add.w	r2, sp, #21
 800d76e:	f10d 0116 	add.w	r1, sp, #22
 800d772:	4876      	ldr	r0, [pc, #472]	; (800d94c <SDO_upload_complete_access+0x1f0>)
 800d774:	f7ff ffcc 	bl	800d710 <complete_access_get_variables>
   if (abortcode != 0)
 800d778:	2800      	cmp	r0, #0
 800d77a:	f040 80a1 	bne.w	800d8c0 <SDO_upload_complete_access+0x164>
   uint8_t MBXout = ESC_claimbuffer ();
 800d77e:	f7fe fdd5 	bl	800c32c <ESC_claimbuffer>
   if (MBXout == 0)
 800d782:	4606      	mov	r6, r0
 800d784:	2800      	cmp	r0, #0
 800d786:	f000 80a6 	beq.w	800d8d6 <SDO_upload_complete_access+0x17a>
   const _objd *objd = SDOobjects[nidx].objdesc;
 800d78a:	9904      	ldr	r1, [sp, #16]
 800d78c:	4b70      	ldr	r3, [pc, #448]	; (800d950 <SDO_upload_complete_access+0x1f4>)
 800d78e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d792:	68dd      	ldr	r5, [r3, #12]
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, UPLOAD, 0);
 800d794:	2300      	movs	r3, #0
 800d796:	9301      	str	r3, [sp, #4]
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f7ff fe82 	bl	800d4a8 <complete_access_subindex_loop>
 800d7a4:	9002      	str	r0, [sp, #8]
   uint8_t dss = (size > 24) ? 0 : (uint8_t)(4U * (3U - ((size - 1U) >> 3)));
 800d7a6:	2818      	cmp	r0, #24
 800d7a8:	f200 809e 	bhi.w	800d8e8 <SDO_upload_complete_access+0x18c>
 800d7ac:	1e44      	subs	r4, r0, #1
 800d7ae:	08e4      	lsrs	r4, r4, #3
 800d7b0:	f1c4 0403 	rsb	r4, r4, #3
 800d7b4:	b2e4      	uxtb	r4, r4
 800d7b6:	00a4      	lsls	r4, r4, #2
 800d7b8:	b2e4      	uxtb	r4, r4
   size = BITS2BYTES(size);
 800d7ba:	3007      	adds	r0, #7
 800d7bc:	08c3      	lsrs	r3, r0, #3
 800d7be:	9302      	str	r3, [sp, #8]
   if (size > 0xffff)
 800d7c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7c4:	f080 8092 	bcs.w	800d8ec <SDO_upload_complete_access+0x190>
   if ((size + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 800d7c8:	331e      	adds	r3, #30
 800d7ca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d7ce:	f200 8095 	bhi.w	800d8fc <SDO_upload_complete_access+0x1a0>
         objd->data, (size_t *)&size, objd->flags | COMPLETE_ACCESS_FLAG);
 800d7d2:	692a      	ldr	r2, [r5, #16]
 800d7d4:	88eb      	ldrh	r3, [r5, #6]
   abortcode = ESC_upload_pre_objecthandler(index, subindex,
 800d7d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7da:	9300      	str	r3, [sp, #0]
 800d7dc:	ab02      	add	r3, sp, #8
 800d7de:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800d7e2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800d7e6:	f7fe f9db 	bl	800bba0 <ESC_upload_pre_objecthandler>
   if (abortcode != 0)
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	f040 808e 	bne.w	800d90e <SDO_upload_complete_access+0x1b2>
   complete_access_subindex_loop(objd, nidx, nsub, ESCvar.mbxdata, UPLOAD, 0);
 800d7f2:	4f58      	ldr	r7, [pc, #352]	; (800d954 <SDO_upload_complete_access+0x1f8>)
 800d7f4:	f04f 0a00 	mov.w	sl, #0
 800d7f8:	f8cd a004 	str.w	sl, [sp, #4]
 800d7fc:	f8cd a000 	str.w	sl, [sp]
 800d800:	463b      	mov	r3, r7
 800d802:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800d806:	9904      	ldr	r1, [sp, #16]
 800d808:	4628      	mov	r0, r5
 800d80a:	f7ff fe4d 	bl	800d4a8 <complete_access_subindex_loop>
   _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800d80e:	f857 3c7e 	ldr.w	r3, [r7, #-126]
 800d812:	fb03 f806 	mul.w	r8, r3, r6
 800d816:	f8df b134 	ldr.w	fp, [pc, #308]	; 800d94c <SDO_upload_complete_access+0x1f0>
 800d81a:	eb08 090b 	add.w	r9, r8, fp
   init_coesdo(coeres, COE_SDORESPONSE,
 800d81e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800d822:	9300      	str	r3, [sp, #0]
 800d824:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800d828:	2251      	movs	r2, #81	; 0x51
 800d82a:	2103      	movs	r1, #3
 800d82c:	4648      	mov	r0, r9
 800d82e:	f7ff fb15 	bl	800ce5c <init_coesdo>
   ESCvar.segmented = 0;
 800d832:	f807 ac59 	strb.w	sl, [r7, #-89]
   _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800d836:	3fea      	subs	r7, #234	; 0xea
   if (size <= 4)
 800d838:	9a02      	ldr	r2, [sp, #8]
 800d83a:	2a04      	cmp	r2, #4
 800d83c:	d96f      	bls.n	800d91e <SDO_upload_complete_access+0x1c2>
      coeres->size = htoel (size);
 800d83e:	f8c9 200c 	str.w	r2, [r9, #12]
      if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 800d842:	f102 030a 	add.w	r3, r2, #10
 800d846:	4944      	ldr	r1, [pc, #272]	; (800d958 <SDO_upload_complete_access+0x1fc>)
 800d848:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 800d84a:	1f88      	subs	r0, r1, #6
 800d84c:	4283      	cmp	r3, r0
 800d84e:	d911      	bls.n	800d874 <SDO_upload_complete_access+0x118>
         ESCvar.frags = size;
 800d850:	4b41      	ldr	r3, [pc, #260]	; (800d958 <SDO_upload_complete_access+0x1fc>)
 800d852:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800d856:	3910      	subs	r1, #16
 800d858:	9102      	str	r1, [sp, #8]
         ESCvar.fragsleft = size;
 800d85a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
         ESCvar.segmented = MBXSEU;
 800d85e:	2240      	movs	r2, #64	; 0x40
 800d860:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.data = ESCvar.mbxdata;
 800d864:	f103 02ea 	add.w	r2, r3, #234	; 0xea
 800d868:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 800d86c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d870:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
      coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 800d874:	9a02      	ldr	r2, [sp, #8]
 800d876:	f102 030a 	add.w	r3, r2, #10
 800d87a:	f82b 3008 	strh.w	r3, [fp, r8]
      memcpy((&(coeres->size)) + 1, ESCvar.mbxdata, size);
 800d87e:	4935      	ldr	r1, [pc, #212]	; (800d954 <SDO_upload_complete_access+0x1f8>)
 800d880:	f109 0010 	add.w	r0, r9, #16
 800d884:	f004 fabe 	bl	8011e04 <memcpy>
   if (ESCvar.segmented == 0)
 800d888:	4b33      	ldr	r3, [pc, #204]	; (800d958 <SDO_upload_complete_access+0x1fc>)
 800d88a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d88e:	b95b      	cbnz	r3, 800d8a8 <SDO_upload_complete_access+0x14c>
            objd->flags | COMPLETE_ACCESS_FLAG);
 800d890:	88ea      	ldrh	r2, [r5, #6]
      abortcode = ESC_upload_post_objecthandler (index, subindex,
 800d892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d896:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800d89a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800d89e:	f7fe f98f 	bl	800bbc0 <ESC_upload_post_objecthandler>
      if (abortcode != 0)
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	d148      	bne.n	800d93a <SDO_upload_complete_access+0x1de>
   MBXcontrol[MBXout].state = MBXstate_outreq;
 800d8a8:	4b2c      	ldr	r3, [pc, #176]	; (800d95c <SDO_upload_complete_access+0x200>)
 800d8aa:	2203      	movs	r2, #3
 800d8ac:	559a      	strb	r2, [r3, r6]
   set_state_idle (MBXout, index, subindex, 0);
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d8b4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d8b8:	4630      	mov	r0, r6
 800d8ba:	f7ff fd5d 	bl	800d378 <set_state_idle>
 800d8be:	e007      	b.n	800d8d0 <SDO_upload_complete_access+0x174>
 800d8c0:	4603      	mov	r3, r0
      set_state_idle (0, index, subindex, abortcode);
 800d8c2:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d8c6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d8ca:	2000      	movs	r0, #0
 800d8cc:	f7ff fd54 	bl	800d378 <set_state_idle>
}
 800d8d0:	b007      	add	sp, #28
 800d8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      set_state_idle (0, index, subindex, 0);
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d8dc:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7ff fd49 	bl	800d378 <set_state_idle>
      return;
 800d8e6:	e7f3      	b.n	800d8d0 <SDO_upload_complete_access+0x174>
   uint8_t dss = (size > 24) ? 0 : (uint8_t)(4U * (3U - ((size - 1U) >> 3)));
 800d8e8:	2400      	movs	r4, #0
 800d8ea:	e766      	b.n	800d7ba <SDO_upload_complete_access+0x5e>
      set_state_idle (MBXout, index, subindex, size);
 800d8ec:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d8f0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	f7ff fd3f 	bl	800d378 <set_state_idle>
      return;
 800d8fa:	e7e9      	b.n	800d8d0 <SDO_upload_complete_access+0x174>
      set_state_idle (MBXout, index, subindex, ABORT_CA_NOT_SUPPORTED);
 800d8fc:	4b18      	ldr	r3, [pc, #96]	; (800d960 <SDO_upload_complete_access+0x204>)
 800d8fe:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d902:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d906:	4630      	mov	r0, r6
 800d908:	f7ff fd36 	bl	800d378 <set_state_idle>
      return;
 800d90c:	e7e0      	b.n	800d8d0 <SDO_upload_complete_access+0x174>
      set_state_idle (MBXout, index, subindex, abortcode);
 800d90e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d912:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d916:	4630      	mov	r0, r6
 800d918:	f7ff fd2e 	bl	800d378 <set_state_idle>
      return;
 800d91c:	e7d8      	b.n	800d8d0 <SDO_upload_complete_access+0x174>
      coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 800d91e:	f899 3008 	ldrb.w	r3, [r9, #8]
 800d922:	431c      	orrs	r4, r3
 800d924:	f044 0402 	orr.w	r4, r4, #2
 800d928:	f889 4008 	strb.w	r4, [r9, #8]
      memcpy(&(coeres->size), ESCvar.mbxdata, size);
 800d92c:	f107 01ea 	add.w	r1, r7, #234	; 0xea
 800d930:	f109 000c 	add.w	r0, r9, #12
 800d934:	f004 fa66 	bl	8011e04 <memcpy>
 800d938:	e7a6      	b.n	800d888 <SDO_upload_complete_access+0x12c>
         set_state_idle (MBXout, index, subindex, abortcode);
 800d93a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d93e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d942:	4630      	mov	r0, r6
 800d944:	f7ff fd18 	bl	800d378 <set_state_idle>
         return;
 800d948:	e7c2      	b.n	800d8d0 <SDO_upload_complete_access+0x174>
 800d94a:	bf00      	nop
 800d94c:	200089a8 	.word	0x200089a8
 800d950:	0801558c 	.word	0x0801558c
 800d954:	200083a6 	.word	0x200083a6
 800d958:	200082bc 	.word	0x200082bc
 800d95c:	20008fa8 	.word	0x20008fa8
 800d960:	06010004 	.word	0x06010004

0800d964 <SDO_download_complete_access>:
{
 800d964:	b570      	push	{r4, r5, r6, lr}
 800d966:	b086      	sub	sp, #24
   uint32_t abortcode = complete_access_get_variables
 800d968:	f10d 030e 	add.w	r3, sp, #14
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	ab04      	add	r3, sp, #16
 800d970:	f10d 0215 	add.w	r2, sp, #21
 800d974:	f10d 0116 	add.w	r1, sp, #22
 800d978:	4869      	ldr	r0, [pc, #420]	; (800db20 <SDO_download_complete_access+0x1bc>)
 800d97a:	f7ff fec9 	bl	800d710 <complete_access_get_variables>
   if (abortcode != 0)
 800d97e:	2800      	cmp	r0, #0
 800d980:	d166      	bne.n	800da50 <SDO_download_complete_access+0xec>
   if (coesdo->command & COE_EXPEDITED_INDICATOR)
 800d982:	4b67      	ldr	r3, [pc, #412]	; (800db20 <SDO_download_complete_access+0x1bc>)
 800d984:	7a1c      	ldrb	r4, [r3, #8]
 800d986:	f014 0f02 	tst.w	r4, #2
 800d98a:	d06a      	beq.n	800da62 <SDO_download_complete_access+0xfe>
      bytes = 4U - ((coesdo->command & 0x0CU) >> 2);
 800d98c:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800d990:	f1c4 0404 	rsb	r4, r4, #4
   uint32_t *mbxdata = &(coesdo->size);
 800d994:	f103 050c 	add.w	r5, r3, #12
   const _objd *objd = SDOobjects[nidx].objdesc;
 800d998:	9904      	ldr	r1, [sp, #16]
 800d99a:	4b62      	ldr	r3, [pc, #392]	; (800db24 <SDO_download_complete_access+0x1c0>)
 800d99c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d9a0:	68de      	ldr	r6, [r3, #12]
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, DOWNLOAD, 0);
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	9301      	str	r3, [sp, #4]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	9200      	str	r2, [sp, #0]
 800d9aa:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f7ff fd7a 	bl	800d4a8 <complete_access_subindex_loop>
   size = BITS2BYTES(size);
 800d9b4:	3007      	adds	r0, #7
 800d9b6:	08c3      	lsrs	r3, r0, #3
   if (size > 0xffff)
 800d9b8:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800d9bc:	d256      	bcs.n	800da6c <SDO_download_complete_access+0x108>
   else if (bytes <= size)
 800d9be:	429c      	cmp	r4, r3
 800d9c0:	f200 808f 	bhi.w	800dae2 <SDO_download_complete_access+0x17e>
            size, objd->flags | COMPLETE_ACCESS_FLAG);
 800d9c4:	88f2      	ldrh	r2, [r6, #6]
      abortcode = ESC_download_pre_objecthandler(index, subindex, mbxdata,
 800d9c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d9ca:	9200      	str	r2, [sp, #0]
 800d9cc:	462a      	mov	r2, r5
 800d9ce:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800d9d2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800d9d6:	f7fe f89b 	bl	800bb10 <ESC_download_pre_objecthandler>
      if (abortcode != 0)
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	d14d      	bne.n	800da7c <SDO_download_complete_access+0x118>
      if ((bytes + COE_HEADERSIZE) > ESC_MBXDSIZE)
 800d9e0:	f104 030a 	add.w	r3, r4, #10
 800d9e4:	4a50      	ldr	r2, [pc, #320]	; (800db28 <SDO_download_complete_access+0x1c4>)
 800d9e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d9e8:	1f91      	subs	r1, r2, #6
 800d9ea:	428b      	cmp	r3, r1
 800d9ec:	d957      	bls.n	800da9e <SDO_download_complete_access+0x13a>
         if ((bytes + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 800d9ee:	f104 031e 	add.w	r3, r4, #30
 800d9f2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d9f6:	d849      	bhi.n	800da8c <SDO_download_complete_access+0x128>
         ESCvar.frags = bytes;
 800d9f8:	4b4b      	ldr	r3, [pc, #300]	; (800db28 <SDO_download_complete_access+0x1c4>)
 800d9fa:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800d9fe:	3a10      	subs	r2, #16
         ESCvar.fragsleft = size;
 800da00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         ESCvar.segmented = MBXSED;
 800da04:	2150      	movs	r1, #80	; 0x50
 800da06:	f883 1091 	strb.w	r1, [r3, #145]	; 0x91
         ESCvar.data = ESCvar.mbxdata + size;
 800da0a:	f103 01ea 	add.w	r1, r3, #234	; 0xea
 800da0e:	1850      	adds	r0, r2, r1
 800da10:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
         ESCvar.index = index;
 800da14:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800da18:	f8a3 00a4 	strh.w	r0, [r3, #164]	; 0xa4
         ESCvar.subindex = subindex;
 800da1c:	f89d 0015 	ldrb.w	r0, [sp, #21]
 800da20:	f883 00a6 	strb.w	r0, [r3, #166]	; 0xa6
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 800da24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800da28:	f8a3 00a8 	strh.w	r0, [r3, #168]	; 0xa8
         copy2mbx (mbxdata, ESCvar.mbxdata, size);
 800da2c:	4628      	mov	r0, r5
 800da2e:	f7ff fcb3 	bl	800d398 <copy2mbx>
   uint8_t MBXout = ESC_claimbuffer ();
 800da32:	f7fe fc7b 	bl	800c32c <ESC_claimbuffer>
   if (MBXout > 0)
 800da36:	4604      	mov	r4, r0
 800da38:	2800      	cmp	r0, #0
 800da3a:	d15b      	bne.n	800daf4 <SDO_download_complete_access+0x190>
   set_state_idle (MBXout, index, subindex, 0);
 800da3c:	2300      	movs	r3, #0
 800da3e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800da42:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800da46:	4620      	mov	r0, r4
 800da48:	f7ff fc96 	bl	800d378 <set_state_idle>
}
 800da4c:	b006      	add	sp, #24
 800da4e:	bd70      	pop	{r4, r5, r6, pc}
 800da50:	4603      	mov	r3, r0
      set_state_idle (0, index, subindex, abortcode);
 800da52:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800da56:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800da5a:	2000      	movs	r0, #0
 800da5c:	f7ff fc8c 	bl	800d378 <set_state_idle>
      return;
 800da60:	e7f4      	b.n	800da4c <SDO_download_complete_access+0xe8>
      bytes = (etohl (coesdo->size) & 0xffff);
 800da62:	4d2f      	ldr	r5, [pc, #188]	; (800db20 <SDO_download_complete_access+0x1bc>)
 800da64:	68ec      	ldr	r4, [r5, #12]
 800da66:	b2a4      	uxth	r4, r4
      mbxdata++;
 800da68:	3510      	adds	r5, #16
 800da6a:	e795      	b.n	800d998 <SDO_download_complete_access+0x34>
      set_state_idle (0, index, subindex, size);
 800da6c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800da70:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800da74:	2000      	movs	r0, #0
 800da76:	f7ff fc7f 	bl	800d378 <set_state_idle>
      return;
 800da7a:	e7e7      	b.n	800da4c <SDO_download_complete_access+0xe8>
         set_state_idle (0, index, subindex, abortcode);
 800da7c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800da80:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800da84:	2000      	movs	r0, #0
 800da86:	f7ff fc77 	bl	800d378 <set_state_idle>
         return;
 800da8a:	e7df      	b.n	800da4c <SDO_download_complete_access+0xe8>
             set_state_idle(0, index, subindex, ABORT_CA_NOT_SUPPORTED);
 800da8c:	4b27      	ldr	r3, [pc, #156]	; (800db2c <SDO_download_complete_access+0x1c8>)
 800da8e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800da92:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800da96:	2000      	movs	r0, #0
 800da98:	f7ff fc6e 	bl	800d378 <set_state_idle>
             return;
 800da9c:	e7d6      	b.n	800da4c <SDO_download_complete_access+0xe8>
         ESCvar.segmented = 0;
 800da9e:	4b22      	ldr	r3, [pc, #136]	; (800db28 <SDO_download_complete_access+0x1c4>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         complete_access_subindex_loop(objd, nidx, nsub, (uint8_t *)mbxdata, DOWNLOAD, bytes);
 800daa6:	9401      	str	r4, [sp, #4]
 800daa8:	2301      	movs	r3, #1
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	462b      	mov	r3, r5
 800daae:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800dab2:	9904      	ldr	r1, [sp, #16]
 800dab4:	4630      	mov	r0, r6
 800dab6:	f7ff fcf7 	bl	800d4a8 <complete_access_subindex_loop>
               objd->flags | COMPLETE_ACCESS_FLAG);
 800daba:	88f2      	ldrh	r2, [r6, #6]
         abortcode = ESC_download_post_objecthandler(index, subindex,
 800dabc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dac0:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800dac4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800dac8:	f7fe f860 	bl	800bb8c <ESC_download_post_objecthandler>
         if (abortcode != 0)
 800dacc:	4603      	mov	r3, r0
 800dace:	2800      	cmp	r0, #0
 800dad0:	d0af      	beq.n	800da32 <SDO_download_complete_access+0xce>
            set_state_idle (0, index, subindex, abortcode);
 800dad2:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800dad6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800dada:	2000      	movs	r0, #0
 800dadc:	f7ff fc4c 	bl	800d378 <set_state_idle>
            return;
 800dae0:	e7b4      	b.n	800da4c <SDO_download_complete_access+0xe8>
      set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 800dae2:	4b13      	ldr	r3, [pc, #76]	; (800db30 <SDO_download_complete_access+0x1cc>)
 800dae4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800dae8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800daec:	2000      	movs	r0, #0
 800daee:	f7ff fc43 	bl	800d378 <set_state_idle>
      return;
 800daf2:	e7ab      	b.n	800da4c <SDO_download_complete_access+0xe8>
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800daf4:	4b0c      	ldr	r3, [pc, #48]	; (800db28 <SDO_download_complete_access+0x1c4>)
 800daf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daf8:	4d09      	ldr	r5, [pc, #36]	; (800db20 <SDO_download_complete_access+0x1bc>)
 800dafa:	fb03 5500 	mla	r5, r3, r0, r5
      init_coesdo(coeres, COE_SDORESPONSE,
 800dafe:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800db02:	9300      	str	r3, [sp, #0]
 800db04:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800db08:	2270      	movs	r2, #112	; 0x70
 800db0a:	2103      	movs	r1, #3
 800db0c:	4628      	mov	r0, r5
 800db0e:	f7ff f9a5 	bl	800ce5c <init_coesdo>
      coeres->size = 0;
 800db12:	2300      	movs	r3, #0
 800db14:	60eb      	str	r3, [r5, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800db16:	4b07      	ldr	r3, [pc, #28]	; (800db34 <SDO_download_complete_access+0x1d0>)
 800db18:	2203      	movs	r2, #3
 800db1a:	551a      	strb	r2, [r3, r4]
 800db1c:	e78e      	b.n	800da3c <SDO_download_complete_access+0xd8>
 800db1e:	bf00      	nop
 800db20:	200089a8 	.word	0x200089a8
 800db24:	0801558c 	.word	0x0801558c
 800db28:	200082bc 	.word	0x200082bc
 800db2c:	06010004 	.word	0x06010004
 800db30:	06070010 	.word	0x06070010
 800db34:	20008fa8 	.word	0x20008fa8

0800db38 <SDO_upload>:
{
 800db38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3c:	b085      	sub	sp, #20
   index = etohs (coesdo->index);
 800db3e:	4b7c      	ldr	r3, [pc, #496]	; (800dd30 <SDO_upload+0x1f8>)
 800db40:	f8b3 6009 	ldrh.w	r6, [r3, #9]
 800db44:	b2b5      	uxth	r5, r6
   subindex = coesdo->subindex;
 800db46:	7adf      	ldrb	r7, [r3, #11]
   nidx = SDO_findobject (index);
 800db48:	4628      	mov	r0, r5
 800db4a:	f7ff fdd1 	bl	800d6f0 <SDO_findobject>
   if (nidx >= 0)
 800db4e:	1e04      	subs	r4, r0, #0
 800db50:	f2c0 80de 	blt.w	800dd10 <SDO_upload+0x1d8>
      nsub = SDO_findsubindex (nidx, subindex);
 800db54:	4639      	mov	r1, r7
 800db56:	4620      	mov	r0, r4
 800db58:	f7ff fd9e 	bl	800d698 <SDO_findsubindex>
      if (nsub >= 0)
 800db5c:	2800      	cmp	r0, #0
 800db5e:	f2c0 80d0 	blt.w	800dd02 <SDO_upload+0x1ca>
         objd = SDOobjects[nidx].objdesc;
 800db62:	4b74      	ldr	r3, [pc, #464]	; (800dd34 <SDO_upload+0x1fc>)
 800db64:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800db68:	68dc      	ldr	r4, [r3, #12]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 800db6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800db6e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800db72:	79a2      	ldrb	r2, [r4, #6]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 800db74:	4b70      	ldr	r3, [pc, #448]	; (800dd38 <SDO_upload+0x200>)
 800db76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db7a:	f003 030f 	and.w	r3, r3, #15
         if (!READ_ACCESS(access, state))
 800db7e:	f012 0f01 	tst.w	r2, #1
 800db82:	d001      	beq.n	800db88 <SDO_upload+0x50>
 800db84:	2b02      	cmp	r3, #2
 800db86:	d010      	beq.n	800dbaa <SDO_upload+0x72>
 800db88:	f012 0f02 	tst.w	r2, #2
 800db8c:	d001      	beq.n	800db92 <SDO_upload+0x5a>
 800db8e:	2b04      	cmp	r3, #4
 800db90:	d00b      	beq.n	800dbaa <SDO_upload+0x72>
 800db92:	f012 0f04 	tst.w	r2, #4
 800db96:	d001      	beq.n	800db9c <SDO_upload+0x64>
 800db98:	2b08      	cmp	r3, #8
 800db9a:	d006      	beq.n	800dbaa <SDO_upload+0x72>
            set_state_idle (0, index, subindex, ABORT_WRITEONLY);
 800db9c:	4b67      	ldr	r3, [pc, #412]	; (800dd3c <SDO_upload+0x204>)
 800db9e:	463a      	mov	r2, r7
 800dba0:	4629      	mov	r1, r5
 800dba2:	2000      	movs	r0, #0
 800dba4:	f7ff fbe8 	bl	800d378 <set_state_idle>
            return;
 800dba8:	e0be      	b.n	800dd28 <SDO_upload+0x1f0>
         MBXout = ESC_claimbuffer ();
 800dbaa:	f7fe fbbf 	bl	800c32c <ESC_claimbuffer>
         if (MBXout)
 800dbae:	4682      	mov	sl, r0
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	f000 80b3 	beq.w	800dd1c <SDO_upload+0x1e4>
            coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800dbb6:	4b60      	ldr	r3, [pc, #384]	; (800dd38 <SDO_upload+0x200>)
 800dbb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbba:	fb03 f900 	mul.w	r9, r3, r0
 800dbbe:	f8df b170 	ldr.w	fp, [pc, #368]	; 800dd30 <SDO_upload+0x1f8>
 800dbc2:	eb09 080b 	add.w	r8, r9, fp
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800dbc6:	230a      	movs	r3, #10
 800dbc8:	f82b 3009 	strh.w	r3, [fp, r9]
            coeres->mbxheader.mbxtype = MBXCOE;
 800dbcc:	f898 3005 	ldrb.w	r3, [r8, #5]
 800dbd0:	2203      	movs	r2, #3
 800dbd2:	f362 0303 	bfi	r3, r2, #0, #4
 800dbd6:	f888 3005 	strb.w	r3, [r8, #5]
            coeres->coeheader.numberservice =
 800dbda:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800dbde:	f8a8 3006 	strh.w	r3, [r8, #6]
            size = (objd + nsub)->bitlength;
 800dbe2:	88a3      	ldrh	r3, [r4, #4]
 800dbe4:	9303      	str	r3, [sp, #12]
            if (size > 8)
 800dbe6:	2b08      	cmp	r3, #8
 800dbe8:	d833      	bhi.n	800dc52 <SDO_upload+0x11a>
            dss = 0x0c;
 800dbea:	220c      	movs	r2, #12
            if (size > 16)
 800dbec:	2b10      	cmp	r3, #16
 800dbee:	d900      	bls.n	800dbf2 <SDO_upload+0xba>
               dss = 0x04;
 800dbf0:	2204      	movs	r2, #4
            if (size > 24)
 800dbf2:	2b18      	cmp	r3, #24
 800dbf4:	d900      	bls.n	800dbf8 <SDO_upload+0xc0>
               dss = 0x00;
 800dbf6:	2200      	movs	r2, #0
            coeres->index = htoes (index);
 800dbf8:	f8a8 6009 	strh.w	r6, [r8, #9]
            coeres->subindex = subindex;
 800dbfc:	f888 700b 	strb.w	r7, [r8, #11]
            coeres->command = COE_COMMAND_UPLOADRESPONSE |
 800dc00:	2141      	movs	r1, #65	; 0x41
 800dc02:	f888 1008 	strb.w	r1, [r8, #8]
            size = BITS2BYTES(size);
 800dc06:	3307      	adds	r3, #7
 800dc08:	08db      	lsrs	r3, r3, #3
 800dc0a:	9303      	str	r3, [sp, #12]
            if (size <= 4)
 800dc0c:	2b04      	cmp	r3, #4
 800dc0e:	d830      	bhi.n	800dc72 <SDO_upload+0x13a>
               coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 800dc10:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 800dc14:	f888 2008 	strb.w	r2, [r8, #8]
               void *dataptr = ((objd + nsub)->data) ?
 800dc18:	6922      	ldr	r2, [r4, #16]
                     (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800dc1a:	b1e2      	cbz	r2, 800dc56 <SDO_upload+0x11e>
                     dataptr, (size_t *)&size, (objd + nsub)->flags);
 800dc1c:	88e3      	ldrh	r3, [r4, #6]
               abort = ESC_upload_pre_objecthandler (index, subindex,
 800dc1e:	9300      	str	r3, [sp, #0]
 800dc20:	ab03      	add	r3, sp, #12
 800dc22:	4639      	mov	r1, r7
 800dc24:	4628      	mov	r0, r5
 800dc26:	f7fd ffbb 	bl	800bba0 <ESC_upload_pre_objecthandler>
               if (abort == 0)
 800dc2a:	4606      	mov	r6, r0
 800dc2c:	b9d0      	cbnz	r0, 800dc64 <SDO_upload+0x12c>
                  if ((objd + nsub)->data == NULL)
 800dc2e:	6920      	ldr	r0, [r4, #16]
 800dc30:	b1a0      	cbz	r0, 800dc5c <SDO_upload+0x124>
                     copy2mbx ((objd + nsub)->data, &(coeres->size), size);
 800dc32:	9a03      	ldr	r2, [sp, #12]
 800dc34:	f108 010c 	add.w	r1, r8, #12
 800dc38:	f7ff fbae 	bl	800d398 <copy2mbx>
            if ((abort == 0) && (ESCvar.segmented == 0))
 800dc3c:	b926      	cbnz	r6, 800dc48 <SDO_upload+0x110>
 800dc3e:	4b3e      	ldr	r3, [pc, #248]	; (800dd38 <SDO_upload+0x200>)
 800dc40:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d04e      	beq.n	800dce6 <SDO_upload+0x1ae>
            MBXcontrol[MBXout].state = MBXstate_outreq;
 800dc48:	4b3d      	ldr	r3, [pc, #244]	; (800dd40 <SDO_upload+0x208>)
 800dc4a:	2203      	movs	r2, #3
 800dc4c:	f803 200a 	strb.w	r2, [r3, sl]
 800dc50:	e064      	b.n	800dd1c <SDO_upload+0x1e4>
               dss = 0x08;
 800dc52:	2208      	movs	r2, #8
 800dc54:	e7ca      	b.n	800dbec <SDO_upload+0xb4>
                     (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800dc56:	f104 020c 	add.w	r2, r4, #12
 800dc5a:	e7df      	b.n	800dc1c <SDO_upload+0xe4>
                     coeres->size = htoel ((objd + nsub)->value);
 800dc5c:	68e3      	ldr	r3, [r4, #12]
 800dc5e:	f8c8 300c 	str.w	r3, [r8, #12]
 800dc62:	e7eb      	b.n	800dc3c <SDO_upload+0x104>
                  set_state_idle (MBXout, index, subindex, abort);
 800dc64:	4603      	mov	r3, r0
 800dc66:	463a      	mov	r2, r7
 800dc68:	4629      	mov	r1, r5
 800dc6a:	4650      	mov	r0, sl
 800dc6c:	f7ff fb84 	bl	800d378 <set_state_idle>
                  return;
 800dc70:	e05a      	b.n	800dd28 <SDO_upload+0x1f0>
                     (objd + nsub)->data, (size_t *)&size, (objd + nsub)->flags);
 800dc72:	6922      	ldr	r2, [r4, #16]
 800dc74:	88e3      	ldrh	r3, [r4, #6]
               abort = ESC_upload_pre_objecthandler (index, subindex,
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	ab03      	add	r3, sp, #12
 800dc7a:	4639      	mov	r1, r7
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	f7fd ff8f 	bl	800bba0 <ESC_upload_pre_objecthandler>
               if (abort == 0)
 800dc82:	4606      	mov	r6, r0
 800dc84:	bb40      	cbnz	r0, 800dcd8 <SDO_upload+0x1a0>
                  ESCvar.frags = size;
 800dc86:	9b03      	ldr	r3, [sp, #12]
 800dc88:	4a2b      	ldr	r2, [pc, #172]	; (800dd38 <SDO_upload+0x200>)
 800dc8a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                  coeres->size = htoel (size);
 800dc8e:	f8c8 300c 	str.w	r3, [r8, #12]
                  if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 800dc92:	330a      	adds	r3, #10
 800dc94:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800dc96:	1f91      	subs	r1, r2, #6
 800dc98:	428b      	cmp	r3, r1
 800dc9a:	d918      	bls.n	800dcce <SDO_upload+0x196>
                     size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800dc9c:	3a10      	subs	r2, #16
 800dc9e:	9203      	str	r2, [sp, #12]
                     ESCvar.fragsleft = size;
 800dca0:	4b25      	ldr	r3, [pc, #148]	; (800dd38 <SDO_upload+0x200>)
 800dca2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                     ESCvar.segmented = MBXSEU;
 800dca6:	2240      	movs	r2, #64	; 0x40
 800dca8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                     ESCvar.data = (objd + nsub)->data;
 800dcac:	6922      	ldr	r2, [r4, #16]
 800dcae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                     ESCvar.flags = (objd + nsub)->flags;
 800dcb2:	88e2      	ldrh	r2, [r4, #6]
 800dcb4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
                  coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 800dcb8:	9a03      	ldr	r2, [sp, #12]
 800dcba:	f102 030a 	add.w	r3, r2, #10
 800dcbe:	f82b 3009 	strh.w	r3, [fp, r9]
                  copy2mbx ((objd + nsub)->data, (&(coeres->size)) + 1, size);
 800dcc2:	f108 0110 	add.w	r1, r8, #16
 800dcc6:	6920      	ldr	r0, [r4, #16]
 800dcc8:	f7ff fb66 	bl	800d398 <copy2mbx>
 800dccc:	e7b6      	b.n	800dc3c <SDO_upload+0x104>
                     ESCvar.segmented = 0;
 800dcce:	4b1a      	ldr	r3, [pc, #104]	; (800dd38 <SDO_upload+0x200>)
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800dcd6:	e7ef      	b.n	800dcb8 <SDO_upload+0x180>
                  set_state_idle (MBXout, index, subindex, abort);
 800dcd8:	4603      	mov	r3, r0
 800dcda:	463a      	mov	r2, r7
 800dcdc:	4629      	mov	r1, r5
 800dcde:	4650      	mov	r0, sl
 800dce0:	f7ff fb4a 	bl	800d378 <set_state_idle>
                  return;
 800dce4:	e020      	b.n	800dd28 <SDO_upload+0x1f0>
               abort = ESC_upload_post_objecthandler (index, subindex,
 800dce6:	88e2      	ldrh	r2, [r4, #6]
 800dce8:	4639      	mov	r1, r7
 800dcea:	4628      	mov	r0, r5
 800dcec:	f7fd ff68 	bl	800bbc0 <ESC_upload_post_objecthandler>
               if (abort != 0)
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	d0a8      	beq.n	800dc48 <SDO_upload+0x110>
                  set_state_idle (MBXout, index, subindex, abort);
 800dcf6:	463a      	mov	r2, r7
 800dcf8:	4629      	mov	r1, r5
 800dcfa:	4650      	mov	r0, sl
 800dcfc:	f7ff fb3c 	bl	800d378 <set_state_idle>
                  return;
 800dd00:	e012      	b.n	800dd28 <SDO_upload+0x1f0>
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 800dd02:	4b10      	ldr	r3, [pc, #64]	; (800dd44 <SDO_upload+0x20c>)
 800dd04:	463a      	mov	r2, r7
 800dd06:	4629      	mov	r1, r5
 800dd08:	2000      	movs	r0, #0
 800dd0a:	f7ff fb03 	bl	800d314 <SDO_abort>
 800dd0e:	e005      	b.n	800dd1c <SDO_upload+0x1e4>
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 800dd10:	4b0d      	ldr	r3, [pc, #52]	; (800dd48 <SDO_upload+0x210>)
 800dd12:	463a      	mov	r2, r7
 800dd14:	4629      	mov	r1, r5
 800dd16:	2000      	movs	r0, #0
 800dd18:	f7ff fafc 	bl	800d314 <SDO_abort>
   MBXcontrol[0].state = MBXstate_idle;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	4a08      	ldr	r2, [pc, #32]	; (800dd40 <SDO_upload+0x208>)
 800dd20:	7013      	strb	r3, [r2, #0]
   ESCvar.xoe = 0;
 800dd22:	4a05      	ldr	r2, [pc, #20]	; (800dd38 <SDO_upload+0x200>)
 800dd24:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
}
 800dd28:	b005      	add	sp, #20
 800dd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd2e:	bf00      	nop
 800dd30:	200089a8 	.word	0x200089a8
 800dd34:	0801558c 	.word	0x0801558c
 800dd38:	200082bc 	.word	0x200082bc
 800dd3c:	06010001 	.word	0x06010001
 800dd40:	20008fa8 	.word	0x20008fa8
 800dd44:	06090011 	.word	0x06090011
 800dd48:	06020000 	.word	0x06020000

0800dd4c <SDO_download>:
{
 800dd4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd50:	b083      	sub	sp, #12
   index = etohs (coesdo->index);
 800dd52:	4b77      	ldr	r3, [pc, #476]	; (800df30 <SDO_download+0x1e4>)
 800dd54:	f8b3 7009 	ldrh.w	r7, [r3, #9]
 800dd58:	b2bd      	uxth	r5, r7
   subindex = coesdo->subindex;
 800dd5a:	7ade      	ldrb	r6, [r3, #11]
   nidx = SDO_findobject (index);
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	f7ff fcc7 	bl	800d6f0 <SDO_findobject>
   if (nidx >= 0)
 800dd62:	1e04      	subs	r4, r0, #0
 800dd64:	f2c0 80d5 	blt.w	800df12 <SDO_download+0x1c6>
      nsub = SDO_findsubindex (nidx, subindex);
 800dd68:	4631      	mov	r1, r6
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f7ff fc94 	bl	800d698 <SDO_findsubindex>
      if (nsub >= 0)
 800dd70:	2800      	cmp	r0, #0
 800dd72:	f2c0 80c7 	blt.w	800df04 <SDO_download+0x1b8>
         objd = SDOobjects[nidx].objdesc;
 800dd76:	4b6f      	ldr	r3, [pc, #444]	; (800df34 <SDO_download+0x1e8>)
 800dd78:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800dd7c:	68dc      	ldr	r4, [r3, #12]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 800dd7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dd82:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800dd86:	79a3      	ldrb	r3, [r4, #6]
 800dd88:	f003 013f 	and.w	r1, r3, #63	; 0x3f
         uint8_t state = ESCvar.ALstatus & 0x0f;
 800dd8c:	4a6a      	ldr	r2, [pc, #424]	; (800df38 <SDO_download+0x1ec>)
 800dd8e:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800dd92:	f002 020f 	and.w	r2, r2, #15
         if (WRITE_ACCESS(access, state))
 800dd96:	f013 0f08 	tst.w	r3, #8
 800dd9a:	d001      	beq.n	800dda0 <SDO_download+0x54>
 800dd9c:	2a02      	cmp	r2, #2
 800dd9e:	d013      	beq.n	800ddc8 <SDO_download+0x7c>
 800dda0:	f013 0f10 	tst.w	r3, #16
 800dda4:	d001      	beq.n	800ddaa <SDO_download+0x5e>
 800dda6:	2a04      	cmp	r2, #4
 800dda8:	d00e      	beq.n	800ddc8 <SDO_download+0x7c>
 800ddaa:	f013 0f20 	tst.w	r3, #32
 800ddae:	d001      	beq.n	800ddb4 <SDO_download+0x68>
 800ddb0:	2a08      	cmp	r2, #8
 800ddb2:	d009      	beq.n	800ddc8 <SDO_download+0x7c>
            if (access == ATYPE_RO)
 800ddb4:	2907      	cmp	r1, #7
 800ddb6:	f000 809e 	beq.w	800def6 <SDO_download+0x1aa>
               SDO_abort (0, index, subindex, ABORT_NOTINTHISSTATE);
 800ddba:	4b60      	ldr	r3, [pc, #384]	; (800df3c <SDO_download+0x1f0>)
 800ddbc:	4632      	mov	r2, r6
 800ddbe:	4629      	mov	r1, r5
 800ddc0:	2000      	movs	r0, #0
 800ddc2:	f7ff faa7 	bl	800d314 <SDO_abort>
 800ddc6:	e0aa      	b.n	800df1e <SDO_download+0x1d2>
            if (coesdo->command & COE_EXPEDITED_INDICATOR)
 800ddc8:	4b59      	ldr	r3, [pc, #356]	; (800df30 <SDO_download+0x1e4>)
 800ddca:	f893 8008 	ldrb.w	r8, [r3, #8]
 800ddce:	f018 0f02 	tst.w	r8, #2
 800ddd2:	d019      	beq.n	800de08 <SDO_download+0xbc>
               size = 4U - ((coesdo->command & 0x0CU) >> 2);
 800ddd4:	f3c8 0881 	ubfx	r8, r8, #2, #2
 800ddd8:	f1c8 0804 	rsb	r8, r8, #4
               mbxdata = &(coesdo->size);
 800dddc:	f103 090c 	add.w	r9, r3, #12
            actsize = BITS2BYTES((objd + nsub)->bitlength);
 800dde0:	88a3      	ldrh	r3, [r4, #4]
 800dde2:	3307      	adds	r3, #7
 800dde4:	08da      	lsrs	r2, r3, #3
            if (actsize != size)
 800dde6:	ebb8 0fd3 	cmp.w	r8, r3, lsr #3
 800ddea:	d022      	beq.n	800de32 <SDO_download+0xe6>
               uint16_t type = (objd + nsub)->datatype;
 800ddec:	8863      	ldrh	r3, [r4, #2]
               if (type == DTYPE_VISIBLE_STRING)
 800ddee:	2b09      	cmp	r3, #9
 800ddf0:	d012      	beq.n	800de18 <SDO_download+0xcc>
               else if ((type != DTYPE_OCTET_STRING) &&
 800ddf2:	2b0b      	cmp	r3, #11
 800ddf4:	d818      	bhi.n	800de28 <SDO_download+0xdc>
 800ddf6:	2b0a      	cmp	r3, #10
 800ddf8:	d21b      	bcs.n	800de32 <SDO_download+0xe6>
                  set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 800ddfa:	4b51      	ldr	r3, [pc, #324]	; (800df40 <SDO_download+0x1f4>)
 800ddfc:	4632      	mov	r2, r6
 800ddfe:	4629      	mov	r1, r5
 800de00:	2000      	movs	r0, #0
 800de02:	f7ff fab9 	bl	800d378 <set_state_idle>
                  return;
 800de06:	e090      	b.n	800df2a <SDO_download+0x1de>
               size = (etohl (coesdo->size) & 0xffff);
 800de08:	4b49      	ldr	r3, [pc, #292]	; (800df30 <SDO_download+0x1e4>)
 800de0a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800de0e:	fa1f f888 	uxth.w	r8, r8
               mbxdata = (&(coesdo->size)) + 1;
 800de12:	f103 0910 	add.w	r9, r3, #16
 800de16:	e7e3      	b.n	800dde0 <SDO_download+0x94>
                  memset((objd + nsub)->data + size, 0, actsize - size);
 800de18:	6920      	ldr	r0, [r4, #16]
 800de1a:	eba2 0208 	sub.w	r2, r2, r8
 800de1e:	2100      	movs	r1, #0
 800de20:	4440      	add	r0, r8
 800de22:	f003 ff31 	bl	8011c88 <memset>
 800de26:	e004      	b.n	800de32 <SDO_download+0xe6>
 800de28:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	2b03      	cmp	r3, #3
 800de30:	d8e3      	bhi.n	800ddfa <SDO_download+0xae>
                  (objd + nsub)->flags
 800de32:	88e3      	ldrh	r3, [r4, #6]
            abort = ESC_download_pre_objecthandler (
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	4643      	mov	r3, r8
 800de38:	464a      	mov	r2, r9
 800de3a:	4631      	mov	r1, r6
 800de3c:	4628      	mov	r0, r5
 800de3e:	f7fd fe67 	bl	800bb10 <ESC_download_pre_objecthandler>
            if (abort == 0)
 800de42:	4603      	mov	r3, r0
 800de44:	2800      	cmp	r0, #0
 800de46:	d150      	bne.n	800deea <SDO_download+0x19e>
               if ((size > 4) &&
 800de48:	f1b8 0f04 	cmp.w	r8, #4
 800de4c:	d915      	bls.n	800de7a <SDO_download+0x12e>
                     (size > (coesdo->mbxheader.length - COE_HEADERSIZE)))
 800de4e:	4b38      	ldr	r3, [pc, #224]	; (800df30 <SDO_download+0x1e4>)
 800de50:	881b      	ldrh	r3, [r3, #0]
 800de52:	3b0a      	subs	r3, #10
               if ((size > 4) &&
 800de54:	4543      	cmp	r3, r8
 800de56:	d210      	bcs.n	800de7a <SDO_download+0x12e>
                  ESCvar.segmented = MBXSED;
 800de58:	4a37      	ldr	r2, [pc, #220]	; (800df38 <SDO_download+0x1ec>)
 800de5a:	2150      	movs	r1, #80	; 0x50
 800de5c:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
                  ESCvar.data = (objd + nsub)->data + size;
 800de60:	6921      	ldr	r1, [r4, #16]
 800de62:	4419      	add	r1, r3
 800de64:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
                  ESCvar.index = index;
 800de68:	f8a2 70a4 	strh.w	r7, [r2, #164]	; 0xa4
                  ESCvar.subindex = subindex;
 800de6c:	f882 60a6 	strb.w	r6, [r2, #166]	; 0xa6
                  ESCvar.flags = (objd + nsub)->flags;
 800de70:	88e1      	ldrh	r1, [r4, #6]
 800de72:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
                  size = coesdo->mbxheader.length - COE_HEADERSIZE;
 800de76:	4698      	mov	r8, r3
                  ESCvar.flags = (objd + nsub)->flags;
 800de78:	e003      	b.n	800de82 <SDO_download+0x136>
                  ESCvar.segmented = 0;
 800de7a:	4b2f      	ldr	r3, [pc, #188]	; (800df38 <SDO_download+0x1ec>)
 800de7c:	2200      	movs	r2, #0
 800de7e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
               copy2mbx (mbxdata, (objd + nsub)->data, size);
 800de82:	4642      	mov	r2, r8
 800de84:	6921      	ldr	r1, [r4, #16]
 800de86:	4648      	mov	r0, r9
 800de88:	f7ff fa86 	bl	800d398 <copy2mbx>
               MBXout = ESC_claimbuffer ();
 800de8c:	f7fe fa4e 	bl	800c32c <ESC_claimbuffer>
               if (MBXout)
 800de90:	4680      	mov	r8, r0
 800de92:	b1c8      	cbz	r0, 800dec8 <SDO_download+0x17c>
                  coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800de94:	4b28      	ldr	r3, [pc, #160]	; (800df38 <SDO_download+0x1ec>)
 800de96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800de98:	fb02 f200 	mul.w	r2, r2, r0
 800de9c:	4924      	ldr	r1, [pc, #144]	; (800df30 <SDO_download+0x1e4>)
 800de9e:	1853      	adds	r3, r2, r1
                  coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800dea0:	200a      	movs	r0, #10
 800dea2:	5288      	strh	r0, [r1, r2]
                  coeres->mbxheader.mbxtype = MBXCOE;
 800dea4:	7959      	ldrb	r1, [r3, #5]
 800dea6:	2203      	movs	r2, #3
 800dea8:	f362 0103 	bfi	r1, r2, #0, #4
 800deac:	7159      	strb	r1, [r3, #5]
                  coeres->coeheader.numberservice =
 800deae:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800deb2:	80d9      	strh	r1, [r3, #6]
                  coeres->index = htoes (index);
 800deb4:	f8a3 7009 	strh.w	r7, [r3, #9]
                  coeres->subindex = subindex;
 800deb8:	72de      	strb	r6, [r3, #11]
                  coeres->command = COE_COMMAND_DOWNLOADRESPONSE;
 800deba:	2160      	movs	r1, #96	; 0x60
 800debc:	7219      	strb	r1, [r3, #8]
                  coeres->size = htoel (0);
 800debe:	2100      	movs	r1, #0
 800dec0:	60d9      	str	r1, [r3, #12]
                  MBXcontrol[MBXout].state = MBXstate_outreq;
 800dec2:	4b20      	ldr	r3, [pc, #128]	; (800df44 <SDO_download+0x1f8>)
 800dec4:	f803 2008 	strb.w	r2, [r3, r8]
               if (ESCvar.segmented == 0)
 800dec8:	4b1b      	ldr	r3, [pc, #108]	; (800df38 <SDO_download+0x1ec>)
 800deca:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800dece:	bb33      	cbnz	r3, 800df1e <SDO_download+0x1d2>
                  abort = ESC_download_post_objecthandler (index, subindex, (objd + nsub)->flags);
 800ded0:	88e2      	ldrh	r2, [r4, #6]
 800ded2:	4631      	mov	r1, r6
 800ded4:	4628      	mov	r0, r5
 800ded6:	f7fd fe59 	bl	800bb8c <ESC_download_post_objecthandler>
                  if (abort != 0)
 800deda:	4603      	mov	r3, r0
 800dedc:	b1f8      	cbz	r0, 800df1e <SDO_download+0x1d2>
                     SDO_abort (MBXout, index, subindex, abort);
 800dede:	4632      	mov	r2, r6
 800dee0:	4629      	mov	r1, r5
 800dee2:	4640      	mov	r0, r8
 800dee4:	f7ff fa16 	bl	800d314 <SDO_abort>
 800dee8:	e019      	b.n	800df1e <SDO_download+0x1d2>
               SDO_abort (0, index, subindex, abort);
 800deea:	4632      	mov	r2, r6
 800deec:	4629      	mov	r1, r5
 800deee:	2000      	movs	r0, #0
 800def0:	f7ff fa10 	bl	800d314 <SDO_abort>
 800def4:	e013      	b.n	800df1e <SDO_download+0x1d2>
               SDO_abort (0, index, subindex, ABORT_READONLY);
 800def6:	4b14      	ldr	r3, [pc, #80]	; (800df48 <SDO_download+0x1fc>)
 800def8:	4632      	mov	r2, r6
 800defa:	4629      	mov	r1, r5
 800defc:	2000      	movs	r0, #0
 800defe:	f7ff fa09 	bl	800d314 <SDO_abort>
 800df02:	e00c      	b.n	800df1e <SDO_download+0x1d2>
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 800df04:	4b11      	ldr	r3, [pc, #68]	; (800df4c <SDO_download+0x200>)
 800df06:	4632      	mov	r2, r6
 800df08:	4629      	mov	r1, r5
 800df0a:	2000      	movs	r0, #0
 800df0c:	f7ff fa02 	bl	800d314 <SDO_abort>
 800df10:	e005      	b.n	800df1e <SDO_download+0x1d2>
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 800df12:	4b0f      	ldr	r3, [pc, #60]	; (800df50 <SDO_download+0x204>)
 800df14:	4632      	mov	r2, r6
 800df16:	4629      	mov	r1, r5
 800df18:	2000      	movs	r0, #0
 800df1a:	f7ff f9fb 	bl	800d314 <SDO_abort>
   MBXcontrol[0].state = MBXstate_idle;
 800df1e:	2300      	movs	r3, #0
 800df20:	4a08      	ldr	r2, [pc, #32]	; (800df44 <SDO_download+0x1f8>)
 800df22:	7013      	strb	r3, [r2, #0]
   ESCvar.xoe = 0;
 800df24:	4a04      	ldr	r2, [pc, #16]	; (800df38 <SDO_download+0x1ec>)
 800df26:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
}
 800df2a:	b003      	add	sp, #12
 800df2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df30:	200089a8 	.word	0x200089a8
 800df34:	0801558c 	.word	0x0801558c
 800df38:	200082bc 	.word	0x200082bc
 800df3c:	08000022 	.word	0x08000022
 800df40:	06070010 	.word	0x06070010
 800df44:	20008fa8 	.word	0x20008fa8
 800df48:	06010002 	.word	0x06010002
 800df4c:	06090011 	.word	0x06090011
 800df50:	06020000 	.word	0x06020000

0800df54 <SDO_downloadsegment>:
{
 800df54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df58:	b082      	sub	sp, #8
   uint8_t MBXout = ESC_claimbuffer ();
 800df5a:	f7fe f9e7 	bl	800c32c <ESC_claimbuffer>
   if (MBXout)
 800df5e:	2800      	cmp	r0, #0
 800df60:	f000 808c 	beq.w	800e07c <SDO_downloadsegment+0x128>
 800df64:	4606      	mov	r6, r0
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800df66:	4b4a      	ldr	r3, [pc, #296]	; (800e090 <SDO_downloadsegment+0x13c>)
 800df68:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800df6a:	4b4a      	ldr	r3, [pc, #296]	; (800e094 <SDO_downloadsegment+0x140>)
 800df6c:	fb00 3006 	mla	r0, r0, r6, r3
      uint32_t size = coesdo->mbxheader.length - 3U;
 800df70:	881b      	ldrh	r3, [r3, #0]
 800df72:	1edc      	subs	r4, r3, #3
      if (size == 7)
 800df74:	2b0a      	cmp	r3, #10
 800df76:	d05b      	beq.n	800e030 <SDO_downloadsegment+0xdc>
      uint8_t command2 = (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 800df78:	4d46      	ldr	r5, [pc, #280]	; (800e094 <SDO_downloadsegment+0x140>)
 800df7a:	7a2a      	ldrb	r2, [r5, #8]
 800df7c:	f002 0210 	and.w	r2, r2, #16
      init_coesdo(coeres, COE_SDORESPONSE, command, 0, 0);
 800df80:	2300      	movs	r3, #0
 800df82:	9300      	str	r3, [sp, #0]
 800df84:	f042 0220 	orr.w	r2, r2, #32
 800df88:	2103      	movs	r1, #3
 800df8a:	f7fe ff67 	bl	800ce5c <init_coesdo>
      copy2mbx (mbxdata, ESCvar.data, size);
 800df8e:	4622      	mov	r2, r4
 800df90:	4b3f      	ldr	r3, [pc, #252]	; (800e090 <SDO_downloadsegment+0x13c>)
 800df92:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800df96:	f105 0009 	add.w	r0, r5, #9
 800df9a:	f7ff f9fd 	bl	800d398 <copy2mbx>
      if (coesdo->command & COE_COMMAND_LASTSEGMENTBIT)
 800df9e:	7a2b      	ldrb	r3, [r5, #8]
 800dfa0:	f013 0f01 	tst.w	r3, #1
 800dfa4:	d05c      	beq.n	800e060 <SDO_downloadsegment+0x10c>
         if(ESCvar.flags == COMPLETE_ACCESS_FLAG)
 800dfa6:	4b3a      	ldr	r3, [pc, #232]	; (800e090 <SDO_downloadsegment+0x13c>)
 800dfa8:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800dfac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfb0:	d123      	bne.n	800dffa <SDO_downloadsegment+0xa6>
            if(ESCvar.frags > ESCvar.fragsleft + size)
 800dfb2:	4b37      	ldr	r3, [pc, #220]	; (800e090 <SDO_downloadsegment+0x13c>)
 800dfb4:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 800dfb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dfbc:	4423      	add	r3, r4
 800dfbe:	429d      	cmp	r5, r3
 800dfc0:	d83d      	bhi.n	800e03e <SDO_downloadsegment+0xea>
            nidx = SDO_findobject(ESCvar.index);
 800dfc2:	4f33      	ldr	r7, [pc, #204]	; (800e090 <SDO_downloadsegment+0x13c>)
 800dfc4:	f8b7 80a4 	ldrh.w	r8, [r7, #164]	; 0xa4
 800dfc8:	4640      	mov	r0, r8
 800dfca:	f7ff fb91 	bl	800d6f0 <SDO_findobject>
 800dfce:	4604      	mov	r4, r0
            nsub = SDO_findsubindex (nidx, ESCvar.subindex);
 800dfd0:	f897 70a6 	ldrb.w	r7, [r7, #166]	; 0xa6
 800dfd4:	4639      	mov	r1, r7
 800dfd6:	f7ff fb5f 	bl	800d698 <SDO_findsubindex>
 800dfda:	4602      	mov	r2, r0
            if ((nidx < 0) || (nsub < 0))
 800dfdc:	2c00      	cmp	r4, #0
 800dfde:	db38      	blt.n	800e052 <SDO_downloadsegment+0xfe>
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	db36      	blt.n	800e052 <SDO_downloadsegment+0xfe>
            const _objd *objd = SDOobjects[nidx].objdesc;
 800dfe4:	482c      	ldr	r0, [pc, #176]	; (800e098 <SDO_downloadsegment+0x144>)
 800dfe6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
            complete_access_subindex_loop(objd,
 800dfea:	9501      	str	r5, [sp, #4]
 800dfec:	2301      	movs	r3, #1
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	4b2a      	ldr	r3, [pc, #168]	; (800e09c <SDO_downloadsegment+0x148>)
 800dff2:	4621      	mov	r1, r4
 800dff4:	68c0      	ldr	r0, [r0, #12]
 800dff6:	f7ff fa57 	bl	800d4a8 <complete_access_subindex_loop>
         ESCvar.segmented = 0;
 800dffa:	4b25      	ldr	r3, [pc, #148]	; (800e090 <SDO_downloadsegment+0x13c>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.frags = 0;
 800e002:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = 0;
 800e006:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         uint32_t abort = ESC_download_post_objecthandler
 800e00a:	f8b3 20a8 	ldrh.w	r2, [r3, #168]	; 0xa8
 800e00e:	f893 10a6 	ldrb.w	r1, [r3, #166]	; 0xa6
 800e012:	f8b3 00a4 	ldrh.w	r0, [r3, #164]	; 0xa4
 800e016:	f7fd fdb9 	bl	800bb8c <ESC_download_post_objecthandler>
         if (abort != 0)
 800e01a:	4603      	mov	r3, r0
 800e01c:	b358      	cbz	r0, 800e076 <SDO_downloadsegment+0x122>
            set_state_idle (MBXout, ESCvar.index, ESCvar.subindex, abort);
 800e01e:	491c      	ldr	r1, [pc, #112]	; (800e090 <SDO_downloadsegment+0x13c>)
 800e020:	f891 20a6 	ldrb.w	r2, [r1, #166]	; 0xa6
 800e024:	f8b1 10a4 	ldrh.w	r1, [r1, #164]	; 0xa4
 800e028:	4630      	mov	r0, r6
 800e02a:	f7ff f9a5 	bl	800d378 <set_state_idle>
            return;
 800e02e:	e02b      	b.n	800e088 <SDO_downloadsegment+0x134>
         size = 7 - ((coesdo->command >> 1) & 7);
 800e030:	4b18      	ldr	r3, [pc, #96]	; (800e094 <SDO_downloadsegment+0x140>)
 800e032:	7a1c      	ldrb	r4, [r3, #8]
 800e034:	ea6f 0454 	mvn.w	r4, r4, lsr #1
 800e038:	f004 0407 	and.w	r4, r4, #7
 800e03c:	e79c      	b.n	800df78 <SDO_downloadsegment+0x24>
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_TYPEMISMATCH);
 800e03e:	4914      	ldr	r1, [pc, #80]	; (800e090 <SDO_downloadsegment+0x13c>)
 800e040:	4b17      	ldr	r3, [pc, #92]	; (800e0a0 <SDO_downloadsegment+0x14c>)
 800e042:	f891 20a6 	ldrb.w	r2, [r1, #166]	; 0xa6
 800e046:	f8b1 10a4 	ldrh.w	r1, [r1, #164]	; 0xa4
 800e04a:	2000      	movs	r0, #0
 800e04c:	f7ff f994 	bl	800d378 <set_state_idle>
               return;
 800e050:	e01a      	b.n	800e088 <SDO_downloadsegment+0x134>
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_NOOBJECT);
 800e052:	4b14      	ldr	r3, [pc, #80]	; (800e0a4 <SDO_downloadsegment+0x150>)
 800e054:	463a      	mov	r2, r7
 800e056:	4641      	mov	r1, r8
 800e058:	2000      	movs	r0, #0
 800e05a:	f7ff f98d 	bl	800d378 <set_state_idle>
               return;
 800e05e:	e013      	b.n	800e088 <SDO_downloadsegment+0x134>
         ESCvar.data += size;
 800e060:	4b0b      	ldr	r3, [pc, #44]	; (800e090 <SDO_downloadsegment+0x13c>)
 800e062:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e066:	4422      	add	r2, r4
 800e068:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
         ESCvar.fragsleft += size;
 800e06c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e070:	4422      	add	r2, r4
 800e072:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800e076:	4b0c      	ldr	r3, [pc, #48]	; (800e0a8 <SDO_downloadsegment+0x154>)
 800e078:	2203      	movs	r2, #3
 800e07a:	559a      	strb	r2, [r3, r6]
   set_state_idle (0, 0, 0, 0);
 800e07c:	2300      	movs	r3, #0
 800e07e:	461a      	mov	r2, r3
 800e080:	4619      	mov	r1, r3
 800e082:	4618      	mov	r0, r3
 800e084:	f7ff f978 	bl	800d378 <set_state_idle>
}
 800e088:	b002      	add	sp, #8
 800e08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e08e:	bf00      	nop
 800e090:	200082bc 	.word	0x200082bc
 800e094:	200089a8 	.word	0x200089a8
 800e098:	0801558c 	.word	0x0801558c
 800e09c:	200083a6 	.word	0x200083a6
 800e0a0:	06070010 	.word	0x06070010
 800e0a4:	06020000 	.word	0x06020000
 800e0a8:	20008fa8 	.word	0x20008fa8

0800e0ac <SDO_getod>:
{
 800e0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   index = etohs (coer->index);
 800e0b0:	4b44      	ldr	r3, [pc, #272]	; (800e1c4 <SDO_getod+0x118>)
 800e0b2:	f8b3 900c 	ldrh.w	r9, [r3, #12]
   nidx = SDO_findobject (index);
 800e0b6:	fa1f f089 	uxth.w	r0, r9
 800e0ba:	f7ff fb19 	bl	800d6f0 <SDO_findobject>
   if (nidx >= 0)
 800e0be:	f1b0 0800 	subs.w	r8, r0, #0
 800e0c2:	db7a      	blt.n	800e1ba <SDO_getod+0x10e>
      MBXout = ESC_claimbuffer ();
 800e0c4:	f7fe f932 	bl	800c32c <ESC_claimbuffer>
      if (MBXout)
 800e0c8:	4605      	mov	r5, r0
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d078      	beq.n	800e1c0 <SDO_getod+0x114>
         coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800e0ce:	4b3e      	ldr	r3, [pc, #248]	; (800e1c8 <SDO_getod+0x11c>)
 800e0d0:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800e0d2:	fb00 f404 	mul.w	r4, r0, r4
 800e0d6:	4e3b      	ldr	r6, [pc, #236]	; (800e1c4 <SDO_getod+0x118>)
 800e0d8:	19a7      	adds	r7, r4, r6
         coel->mbxheader.mbxtype = MBXCOE;
 800e0da:	797b      	ldrb	r3, [r7, #5]
 800e0dc:	2203      	movs	r2, #3
 800e0de:	f362 0303 	bfi	r3, r2, #0, #4
 800e0e2:	717b      	strb	r3, [r7, #5]
         coel->coeheader.numberservice =
 800e0e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0e8:	80fb      	strh	r3, [r7, #6]
         coel->infoheader.opcode = COE_GETODRESPONSE;
 800e0ea:	7a3b      	ldrb	r3, [r7, #8]
 800e0ec:	2204      	movs	r2, #4
 800e0ee:	f362 0306 	bfi	r3, r2, #0, #7
 800e0f2:	723b      	strb	r3, [r7, #8]
         coel->infoheader.incomplete = 0;
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	f36f 13c7 	bfc	r3, #7, #1
 800e0fa:	723b      	strb	r3, [r7, #8]
         coel->infoheader.reserved = 0x00;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	727b      	strb	r3, [r7, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 800e100:	817b      	strh	r3, [r7, #10]
         coel->index = htoes (index);
 800e102:	f8a7 900c 	strh.w	r9, [r7, #12]
         if (SDOobjects[nidx].objtype == OTYPE_VAR)
 800e106:	4b31      	ldr	r3, [pc, #196]	; (800e1cc <SDO_getod+0x120>)
 800e108:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e10c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e110:	f1b9 0f07 	cmp.w	r9, #7
 800e114:	d015      	beq.n	800e142 <SDO_getod+0x96>
         else if (SDOobjects[nidx].objtype == OTYPE_ARRAY)
 800e116:	f1b9 0f08 	cmp.w	r9, #8
 800e11a:	d023      	beq.n	800e164 <SDO_getod+0xb8>
            coel->datatype = htoes (0);
 800e11c:	2300      	movs	r3, #0
 800e11e:	81fb      	strh	r3, [r7, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 800e120:	4b2a      	ldr	r3, [pc, #168]	; (800e1cc <SDO_getod+0x120>)
 800e122:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	7b1b      	ldrb	r3, [r3, #12]
 800e12a:	743b      	strb	r3, [r7, #16]
         coel->objectcode = (uint8_t)SDOobjects[nidx].objtype;
 800e12c:	f887 9011 	strb.w	r9, [r7, #17]
         s = (uint8_t *) SDOobjects[nidx].name;
 800e130:	4b26      	ldr	r3, [pc, #152]	; (800e1cc <SDO_getod+0x120>)
 800e132:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e136:	f8d3 c008 	ldr.w	ip, [r3, #8]
         d = (uint8_t *) &(coel->name);
 800e13a:	f107 0112 	add.w	r1, r7, #18
   uint8_t n = 0;
 800e13e:	2300      	movs	r3, #0
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 800e140:	e027      	b.n	800e192 <SDO_getod+0xe6>
            int32_t nsub = SDO_findsubindex (nidx, 0);
 800e142:	2100      	movs	r1, #0
 800e144:	4640      	mov	r0, r8
 800e146:	f7ff faa7 	bl	800d698 <SDO_findsubindex>
            const _objd *objd = SDOobjects[nidx].objdesc;
 800e14a:	4b20      	ldr	r3, [pc, #128]	; (800e1cc <SDO_getod+0x120>)
 800e14c:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e150:	68da      	ldr	r2, [r3, #12]
            coel->datatype = htoes ((objd + nsub)->datatype);
 800e152:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e156:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e15a:	8852      	ldrh	r2, [r2, #2]
 800e15c:	81fa      	strh	r2, [r7, #14]
            coel->maxsub = SDOobjects[nidx].maxsub;
 800e15e:	791b      	ldrb	r3, [r3, #4]
 800e160:	743b      	strb	r3, [r7, #16]
 800e162:	e7e3      	b.n	800e12c <SDO_getod+0x80>
            int32_t nsub = SDO_findsubindex (nidx, 0);
 800e164:	2100      	movs	r1, #0
 800e166:	4640      	mov	r0, r8
 800e168:	f7ff fa96 	bl	800d698 <SDO_findsubindex>
            const _objd *objd = SDOobjects[nidx].objdesc;
 800e16c:	4b17      	ldr	r3, [pc, #92]	; (800e1cc <SDO_getod+0x120>)
 800e16e:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e172:	68db      	ldr	r3, [r3, #12]
            coel->datatype = htoes ((objd + nsub)->datatype);
 800e174:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e178:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e17c:	8842      	ldrh	r2, [r0, #2]
 800e17e:	81fa      	strh	r2, [r7, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 800e180:	7b1b      	ldrb	r3, [r3, #12]
 800e182:	743b      	strb	r3, [r7, #16]
 800e184:	e7d2      	b.n	800e12c <SDO_getod+0x80>
            *d = *s;
 800e186:	f801 0b01 	strb.w	r0, [r1], #1
            n++;
 800e18a:	3301      	adds	r3, #1
 800e18c:	b2db      	uxtb	r3, r3
            s++;
 800e18e:	f10c 0c01 	add.w	ip, ip, #1
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 800e192:	f89c 0000 	ldrb.w	r0, [ip]
 800e196:	b120      	cbz	r0, 800e1a2 <SDO_getod+0xf6>
 800e198:	4a0b      	ldr	r2, [pc, #44]	; (800e1c8 <SDO_getod+0x11c>)
 800e19a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e19c:	3a12      	subs	r2, #18
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d3f1      	bcc.n	800e186 <SDO_getod+0xda>
         *d = *s;
 800e1a2:	7008      	strb	r0, [r1, #0]
         coel->mbxheader.length = htoes (0x0C + n);
 800e1a4:	330c      	adds	r3, #12
 800e1a6:	5333      	strh	r3, [r6, r4]
         MBXcontrol[MBXout].state = MBXstate_outreq;
 800e1a8:	4a09      	ldr	r2, [pc, #36]	; (800e1d0 <SDO_getod+0x124>)
 800e1aa:	2303      	movs	r3, #3
 800e1ac:	5553      	strb	r3, [r2, r5]
         MBXcontrol[0].state = MBXstate_idle;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	7013      	strb	r3, [r2, #0]
         ESCvar.xoe = 0;
 800e1b2:	4a05      	ldr	r2, [pc, #20]	; (800e1c8 <SDO_getod+0x11c>)
 800e1b4:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 800e1b8:	e002      	b.n	800e1c0 <SDO_getod+0x114>
      SDO_infoerror (ABORT_NOOBJECT);
 800e1ba:	4806      	ldr	r0, [pc, #24]	; (800e1d4 <SDO_getod+0x128>)
 800e1bc:	f7fe ffd6 	bl	800d16c <SDO_infoerror>
}
 800e1c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1c4:	200089a8 	.word	0x200089a8
 800e1c8:	200082bc 	.word	0x200082bc
 800e1cc:	0801558c 	.word	0x0801558c
 800e1d0:	20008fa8 	.word	0x20008fa8
 800e1d4:	06020000 	.word	0x06020000

0800e1d8 <SDO_geted>:
{
 800e1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   index = etohs (coer->index);
 800e1dc:	4b34      	ldr	r3, [pc, #208]	; (800e2b0 <SDO_geted+0xd8>)
 800e1de:	899d      	ldrh	r5, [r3, #12]
   subindex = coer->subindex;
 800e1e0:	7b9e      	ldrb	r6, [r3, #14]
   nidx = SDO_findobject (index);
 800e1e2:	b2a8      	uxth	r0, r5
 800e1e4:	f7ff fa84 	bl	800d6f0 <SDO_findobject>
   if (nidx >= 0)
 800e1e8:	1e07      	subs	r7, r0, #0
 800e1ea:	db5d      	blt.n	800e2a8 <SDO_geted+0xd0>
      nsub = SDO_findsubindex (nidx, subindex);
 800e1ec:	4631      	mov	r1, r6
 800e1ee:	4638      	mov	r0, r7
 800e1f0:	f7ff fa52 	bl	800d698 <SDO_findsubindex>
      if (nsub >= 0)
 800e1f4:	1e04      	subs	r4, r0, #0
 800e1f6:	db52      	blt.n	800e29e <SDO_geted+0xc6>
         objd = SDOobjects[nidx].objdesc;
 800e1f8:	4b2e      	ldr	r3, [pc, #184]	; (800e2b4 <SDO_geted+0xdc>)
 800e1fa:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800e1fe:	68df      	ldr	r7, [r3, #12]
         MBXout = ESC_claimbuffer ();
 800e200:	f7fe f894 	bl	800c32c <ESC_claimbuffer>
         if (MBXout)
 800e204:	4684      	mov	ip, r0
 800e206:	2800      	cmp	r0, #0
 800e208:	d04c      	beq.n	800e2a4 <SDO_geted+0xcc>
            coel = (_COEentdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800e20a:	4b2b      	ldr	r3, [pc, #172]	; (800e2b8 <SDO_geted+0xe0>)
 800e20c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e20e:	fb00 f00c 	mul.w	r0, r0, ip
 800e212:	f8df e09c 	ldr.w	lr, [pc, #156]	; 800e2b0 <SDO_geted+0xd8>
 800e216:	eb00 020e 	add.w	r2, r0, lr
            coel->mbxheader.mbxtype = MBXCOE;
 800e21a:	7953      	ldrb	r3, [r2, #5]
 800e21c:	2103      	movs	r1, #3
 800e21e:	f361 0303 	bfi	r3, r1, #0, #4
 800e222:	7153      	strb	r3, [r2, #5]
            coel->coeheader.numberservice =
 800e224:	2300      	movs	r3, #0
 800e226:	7193      	strb	r3, [r2, #6]
 800e228:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800e22c:	71d1      	strb	r1, [r2, #7]
            coel->infoheader.opcode = COE_ENTRYDESCRIPTIONRESPONSE;
 800e22e:	7a11      	ldrb	r1, [r2, #8]
 800e230:	f04f 0806 	mov.w	r8, #6
 800e234:	f368 0106 	bfi	r1, r8, #0, #7
 800e238:	7211      	strb	r1, [r2, #8]
            coel->infoheader.incomplete = 0;
 800e23a:	b2c9      	uxtb	r1, r1
 800e23c:	f363 11c7 	bfi	r1, r3, #7, #1
 800e240:	7211      	strb	r1, [r2, #8]
            coel->infoheader.reserved = 0x00;
 800e242:	7253      	strb	r3, [r2, #9]
            coel->infoheader.fragmentsleft = htoes (0);
 800e244:	7293      	strb	r3, [r2, #10]
 800e246:	72d3      	strb	r3, [r2, #11]
            coel->index = htoes (index);
 800e248:	8195      	strh	r5, [r2, #12]
            coel->subindex = subindex;
 800e24a:	7396      	strb	r6, [r2, #14]
            coel->valueinfo = COE_VALUEINFO_ACCESS +
 800e24c:	2107      	movs	r1, #7
 800e24e:	73d1      	strb	r1, [r2, #15]
            coel->datatype = htoes ((objd + nsub)->datatype);
 800e250:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e254:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 800e258:	8879      	ldrh	r1, [r7, #2]
 800e25a:	8211      	strh	r1, [r2, #16]
            coel->bitlength = htoes ((objd + nsub)->bitlength);
 800e25c:	88b9      	ldrh	r1, [r7, #4]
 800e25e:	8251      	strh	r1, [r2, #18]
            coel->access = htoes ((objd + nsub)->flags);
 800e260:	88f9      	ldrh	r1, [r7, #6]
 800e262:	8291      	strh	r1, [r2, #20]
            s = (uint8_t *) (objd + nsub)->name;
 800e264:	68bd      	ldr	r5, [r7, #8]
            d = (uint8_t *) &(coel->name);
 800e266:	3216      	adds	r2, #22
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 800e268:	782c      	ldrb	r4, [r5, #0]
 800e26a:	b154      	cbz	r4, 800e282 <SDO_geted+0xaa>
 800e26c:	4912      	ldr	r1, [pc, #72]	; (800e2b8 <SDO_geted+0xe0>)
 800e26e:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 800e270:	3916      	subs	r1, #22
 800e272:	428b      	cmp	r3, r1
 800e274:	d205      	bcs.n	800e282 <SDO_geted+0xaa>
               *d = *s;
 800e276:	f802 4b01 	strb.w	r4, [r2], #1
               n++;
 800e27a:	3301      	adds	r3, #1
 800e27c:	b2db      	uxtb	r3, r3
               s++;
 800e27e:	3501      	adds	r5, #1
               d++;
 800e280:	e7f2      	b.n	800e268 <SDO_geted+0x90>
            *d = *s;
 800e282:	7014      	strb	r4, [r2, #0]
            coel->mbxheader.length = htoes (0x10 + n);
 800e284:	3310      	adds	r3, #16
 800e286:	f82e 3000 	strh.w	r3, [lr, r0]
            MBXcontrol[MBXout].state = MBXstate_outreq;
 800e28a:	4a0c      	ldr	r2, [pc, #48]	; (800e2bc <SDO_geted+0xe4>)
 800e28c:	2303      	movs	r3, #3
 800e28e:	f802 300c 	strb.w	r3, [r2, ip]
            MBXcontrol[0].state = MBXstate_idle;
 800e292:	2300      	movs	r3, #0
 800e294:	7013      	strb	r3, [r2, #0]
            ESCvar.xoe = 0;
 800e296:	4a08      	ldr	r2, [pc, #32]	; (800e2b8 <SDO_geted+0xe0>)
 800e298:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 800e29c:	e002      	b.n	800e2a4 <SDO_geted+0xcc>
         SDO_infoerror (ABORT_NOSUBINDEX);
 800e29e:	4808      	ldr	r0, [pc, #32]	; (800e2c0 <SDO_geted+0xe8>)
 800e2a0:	f7fe ff64 	bl	800d16c <SDO_infoerror>
}
 800e2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SDO_infoerror (ABORT_NOOBJECT);
 800e2a8:	4806      	ldr	r0, [pc, #24]	; (800e2c4 <SDO_geted+0xec>)
 800e2aa:	f7fe ff5f 	bl	800d16c <SDO_infoerror>
}
 800e2ae:	e7f9      	b.n	800e2a4 <SDO_geted+0xcc>
 800e2b0:	200089a8 	.word	0x200089a8
 800e2b4:	0801558c 	.word	0x0801558c
 800e2b8:	200082bc 	.word	0x200082bc
 800e2bc:	20008fa8 	.word	0x20008fa8
 800e2c0:	06090011 	.word	0x06090011
 800e2c4:	06020000 	.word	0x06020000

0800e2c8 <sizeOfPDO>:
{
 800e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	b087      	sub	sp, #28
 800e2ce:	9105      	str	r1, [sp, #20]
 800e2d0:	9201      	str	r2, [sp, #4]
 800e2d2:	469b      	mov	fp, r3
   if ((index != RX_PDO_OBJIDX) && (index != TX_PDO_OBJIDX))
 800e2d4:	f5a0 53e0 	sub.w	r3, r0, #7168	; 0x1c00
 800e2d8:	3b12      	subs	r3, #18
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	f200 80ae 	bhi.w	800e43e <sizeOfPDO+0x176>
   nidx = SDO_findobject (index);
 800e2e2:	f7ff fa05 	bl	800d6f0 <SDO_findobject>
   if(nidx < 0)
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	f2c0 80ad 	blt.w	800e446 <sizeOfPDO+0x17e>
   objd1c1x = SDOobjects[nidx].objdesc;
 800e2ec:	4b57      	ldr	r3, [pc, #348]	; (800e44c <sizeOfPDO+0x184>)
 800e2ee:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	9304      	str	r3, [sp, #16]
   si = OBJ_VALUE_FETCH (si, objd1c1x[0]);
 800e2f6:	691b      	ldr	r3, [r3, #16]
 800e2f8:	b19b      	cbz	r3, 800e322 <sizeOfPDO+0x5a>
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	9303      	str	r3, [sp, #12]
   if (si)
 800e2fe:	9b03      	ldr	r3, [sp, #12]
 800e300:	2b00      	cmp	r3, #0
 800e302:	f040 8092 	bne.w	800e42a <sizeOfPDO+0x162>
   int mapIx = 0;
 800e306:	f04f 0800 	mov.w	r8, #0
   uint32_t offset = 0;
 800e30a:	4647      	mov	r7, r8
   if (max_mappings > 0)
 800e30c:	f1bb 0f00 	cmp.w	fp, #0
 800e310:	f340 8091 	ble.w	800e436 <sizeOfPDO+0x16e>
      *nmappings = mapIx;
 800e314:	9b05      	ldr	r3, [sp, #20]
 800e316:	f8c3 8000 	str.w	r8, [r3]
   return BITS2BYTES (offset) & 0xFFFF;
 800e31a:	1df8      	adds	r0, r7, #7
 800e31c:	f3c0 00cf 	ubfx	r0, r0, #3, #16
 800e320:	e08e      	b.n	800e440 <sizeOfPDO+0x178>
   si = OBJ_VALUE_FETCH (si, objd1c1x[0]);
 800e322:	9b04      	ldr	r3, [sp, #16]
 800e324:	7b1b      	ldrb	r3, [r3, #12]
 800e326:	9303      	str	r3, [sp, #12]
 800e328:	e7e9      	b.n	800e2fe <sizeOfPDO+0x36>
         hobj = OBJ_VALUE_FETCH (hobj, objd1c1x[sic]);
 800e32a:	8998      	ldrh	r0, [r3, #12]
 800e32c:	e06c      	b.n	800e408 <sizeOfPDO+0x140>
            maxsub = OBJ_VALUE_FETCH (maxsub, objd[0]);
 800e32e:	f89a 300c 	ldrb.w	r3, [sl, #12]
 800e332:	9300      	str	r3, [sp, #0]
 800e334:	e077      	b.n	800e426 <sizeOfPDO+0x15e>
               uint32_t value = OBJ_VALUE_FETCH (value, objd[c]);
 800e336:	68de      	ldr	r6, [r3, #12]
 800e338:	e036      	b.n	800e3a8 <sizeOfPDO+0xe0>
                     *nmappings = -1;
 800e33a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e33e:	9a05      	ldr	r2, [sp, #20]
 800e340:	6013      	str	r3, [r2, #0]
                     return 0;
 800e342:	2000      	movs	r0, #0
 800e344:	e07c      	b.n	800e440 <sizeOfPDO+0x178>
                     nidx = SDO_findobject (index);
 800e346:	f7ff f9d3 	bl	800d6f0 <SDO_findobject>
                     if (nidx >= 0)
 800e34a:	1e05      	subs	r5, r0, #0
 800e34c:	db41      	blt.n	800e3d2 <sizeOfPDO+0x10a>
                        nsub = SDO_findsubindex (nidx, subindex);
 800e34e:	4649      	mov	r1, r9
 800e350:	4628      	mov	r0, r5
 800e352:	f7ff f9a1 	bl	800d698 <SDO_findsubindex>
                        if (nsub < 0)
 800e356:	2800      	cmp	r0, #0
 800e358:	db35      	blt.n	800e3c6 <sizeOfPDO+0xfe>
                        mapping = &SDOobjects[nidx].objdesc[nsub];
 800e35a:	4b3c      	ldr	r3, [pc, #240]	; (800e44c <sizeOfPDO+0x184>)
 800e35c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800e360:	68db      	ldr	r3, [r3, #12]
 800e362:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e366:	eb03 0380 	add.w	r3, r3, r0, lsl #2
                  mappings[mapIx].obj = mapping;
 800e36a:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800e36e:	9801      	ldr	r0, [sp, #4]
 800e370:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800e374:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
                  if(mapping != NULL)
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d030      	beq.n	800e3de <sizeOfPDO+0x116>
                     mappings[mapIx].objectlistitem = &SDOobjects[nidx];
 800e37c:	4b33      	ldr	r3, [pc, #204]	; (800e44c <sizeOfPDO+0x184>)
 800e37e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800e382:	604b      	str	r3, [r1, #4]
                  mappings[mapIx++].offset = offset;
 800e384:	f108 0801 	add.w	r8, r8, #1
 800e388:	608f      	str	r7, [r1, #8]
               offset += bitlength;
 800e38a:	fa57 f786 	uxtab	r7, r7, r6
            for (c = 1; c <= maxsub; c++)
 800e38e:	3401      	adds	r4, #1
 800e390:	b2e4      	uxtb	r4, r4
 800e392:	9b00      	ldr	r3, [sp, #0]
 800e394:	429c      	cmp	r4, r3
 800e396:	d825      	bhi.n	800e3e4 <sizeOfPDO+0x11c>
               uint32_t value = OBJ_VALUE_FETCH (value, objd[c]);
 800e398:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e39c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800e3a0:	691a      	ldr	r2, [r3, #16]
 800e3a2:	2a00      	cmp	r2, #0
 800e3a4:	d0c7      	beq.n	800e336 <sizeOfPDO+0x6e>
 800e3a6:	6816      	ldr	r6, [r2, #0]
               if (max_mappings > 0)
 800e3a8:	f1bb 0f00 	cmp.w	fp, #0
 800e3ac:	dded      	ble.n	800e38a <sizeOfPDO+0xc2>
                  uint16_t index = (uint16_t)(value >> 16);
 800e3ae:	0c30      	lsrs	r0, r6, #16
                  uint8_t subindex = (value >> 8) & 0xFF;
 800e3b0:	f3c6 2907 	ubfx	r9, r6, #8, #8
                  if (mapIx == max_mappings)
 800e3b4:	45d8      	cmp	r8, fp
 800e3b6:	d0c0      	beq.n	800e33a <sizeOfPDO+0x72>
                  if (index == 0 && subindex == 0)
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	d1c4      	bne.n	800e346 <sizeOfPDO+0x7e>
 800e3bc:	f1b9 0f00 	cmp.w	r9, #0
 800e3c0:	d1c1      	bne.n	800e346 <sizeOfPDO+0x7e>
                     mapping = NULL;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	e7d1      	b.n	800e36a <sizeOfPDO+0xa2>
                           *nmappings = -1;
 800e3c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3ca:	9a05      	ldr	r2, [sp, #20]
 800e3cc:	6013      	str	r3, [r2, #0]
                           return 0;
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	e036      	b.n	800e440 <sizeOfPDO+0x178>
                        *nmappings = -1;
 800e3d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3d6:	9a05      	ldr	r2, [sp, #20]
 800e3d8:	6013      	str	r3, [r2, #0]
                        return 0;
 800e3da:	2000      	movs	r0, #0
 800e3dc:	e030      	b.n	800e440 <sizeOfPDO+0x178>
                     mappings[mapIx].objectlistitem = NULL;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	604b      	str	r3, [r1, #4]
 800e3e2:	e7cf      	b.n	800e384 <sizeOfPDO+0xbc>
      for (sic = 1; sic <= si; sic++)
 800e3e4:	9b02      	ldr	r3, [sp, #8]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	9302      	str	r3, [sp, #8]
 800e3ec:	9b02      	ldr	r3, [sp, #8]
 800e3ee:	9a03      	ldr	r2, [sp, #12]
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d88b      	bhi.n	800e30c <sizeOfPDO+0x44>
         hobj = OBJ_VALUE_FETCH (hobj, objd1c1x[sic]);
 800e3f4:	9b02      	ldr	r3, [sp, #8]
 800e3f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e3fa:	9a04      	ldr	r2, [sp, #16]
 800e3fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e400:	691a      	ldr	r2, [r3, #16]
 800e402:	2a00      	cmp	r2, #0
 800e404:	d091      	beq.n	800e32a <sizeOfPDO+0x62>
 800e406:	8810      	ldrh	r0, [r2, #0]
         nidx = SDO_findobject (hobj);
 800e408:	f7ff f972 	bl	800d6f0 <SDO_findobject>
         if (nidx >= 0)
 800e40c:	1e05      	subs	r5, r0, #0
 800e40e:	dbe9      	blt.n	800e3e4 <sizeOfPDO+0x11c>
            objd = SDOobjects[nidx].objdesc;
 800e410:	4b0e      	ldr	r3, [pc, #56]	; (800e44c <sizeOfPDO+0x184>)
 800e412:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800e416:	f8d3 a00c 	ldr.w	sl, [r3, #12]
            maxsub = OBJ_VALUE_FETCH (maxsub, objd[0]);
 800e41a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d085      	beq.n	800e32e <sizeOfPDO+0x66>
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	9300      	str	r3, [sp, #0]
            for (c = 1; c <= maxsub; c++)
 800e426:	2401      	movs	r4, #1
 800e428:	e7b3      	b.n	800e392 <sizeOfPDO+0xca>
   int mapIx = 0;
 800e42a:	f04f 0800 	mov.w	r8, #0
      for (sic = 1; sic <= si; sic++)
 800e42e:	2301      	movs	r3, #1
 800e430:	9302      	str	r3, [sp, #8]
   uint32_t offset = 0;
 800e432:	4647      	mov	r7, r8
 800e434:	e7da      	b.n	800e3ec <sizeOfPDO+0x124>
      *nmappings = 0;
 800e436:	2300      	movs	r3, #0
 800e438:	9a05      	ldr	r2, [sp, #20]
 800e43a:	6013      	str	r3, [r2, #0]
 800e43c:	e76d      	b.n	800e31a <sizeOfPDO+0x52>
      return 0;
 800e43e:	2000      	movs	r0, #0
}
 800e440:	b007      	add	sp, #28
 800e442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return 0;
 800e446:	2000      	movs	r0, #0
 800e448:	e7fa      	b.n	800e440 <sizeOfPDO+0x178>
 800e44a:	bf00      	nop
 800e44c:	0801558c 	.word	0x0801558c

0800e450 <ESC_coeprocess>:
{
 800e450:	b508      	push	{r3, lr}
   if (ESCvar.MBXrun == 0)
 800e452:	4b4f      	ldr	r3, [pc, #316]	; (800e590 <ESC_coeprocess+0x140>)
 800e454:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800e458:	b1a3      	cbz	r3, 800e484 <ESC_coeprocess+0x34>
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 800e45a:	4b4d      	ldr	r3, [pc, #308]	; (800e590 <ESC_coeprocess+0x140>)
 800e45c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800e460:	b91b      	cbnz	r3, 800e46a <ESC_coeprocess+0x1a>
 800e462:	4b4c      	ldr	r3, [pc, #304]	; (800e594 <ESC_coeprocess+0x144>)
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	2b01      	cmp	r3, #1
 800e468:	d00d      	beq.n	800e486 <ESC_coeprocess+0x36>
   if ((ESCvar.xoe == (MBXCOE + MBXODL)) && (!ESCvar.mbxoutpost))
 800e46a:	4b49      	ldr	r3, [pc, #292]	; (800e590 <ESC_coeprocess+0x140>)
 800e46c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e470:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800e474:	f5b3 1f98 	cmp.w	r3, #1245184	; 0x130000
 800e478:	d018      	beq.n	800e4ac <ESC_coeprocess+0x5c>
   if (ESCvar.xoe == MBXCOE)   {
 800e47a:	4b45      	ldr	r3, [pc, #276]	; (800e590 <ESC_coeprocess+0x140>)
 800e47c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800e480:	2b03      	cmp	r3, #3
 800e482:	d016      	beq.n	800e4b2 <ESC_coeprocess+0x62>
}
 800e484:	bd08      	pop	{r3, pc}
      if (mbh->mbxtype == MBXCOE)
 800e486:	4b44      	ldr	r3, [pc, #272]	; (800e598 <ESC_coeprocess+0x148>)
 800e488:	795b      	ldrb	r3, [r3, #5]
 800e48a:	f003 030f 	and.w	r3, r3, #15
 800e48e:	2b03      	cmp	r3, #3
 800e490:	d1eb      	bne.n	800e46a <ESC_coeprocess+0x1a>
         if (etohs (mbh->length) < COE_MINIMUM_LENGTH)
 800e492:	4b41      	ldr	r3, [pc, #260]	; (800e598 <ESC_coeprocess+0x148>)
 800e494:	881b      	ldrh	r3, [r3, #0]
 800e496:	2b07      	cmp	r3, #7
 800e498:	d904      	bls.n	800e4a4 <ESC_coeprocess+0x54>
            ESCvar.xoe = MBXCOE;
 800e49a:	4b3d      	ldr	r3, [pc, #244]	; (800e590 <ESC_coeprocess+0x140>)
 800e49c:	2203      	movs	r2, #3
 800e49e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 800e4a2:	e7e2      	b.n	800e46a <ESC_coeprocess+0x1a>
            MBX_error (MBXERR_INVALIDSIZE);
 800e4a4:	2008      	movs	r0, #8
 800e4a6:	f7fd ff8d 	bl	800c3c4 <MBX_error>
 800e4aa:	e7de      	b.n	800e46a <ESC_coeprocess+0x1a>
      SDO_getodlistcont ();
 800e4ac:	f7fe fdf6 	bl	800d09c <SDO_getodlistcont>
 800e4b0:	e7e3      	b.n	800e47a <ESC_coeprocess+0x2a>
      service = etohs (coesdo->coeheader.numberservice) >> 12;
 800e4b2:	4b39      	ldr	r3, [pc, #228]	; (800e598 <ESC_coeprocess+0x148>)
 800e4b4:	88db      	ldrh	r3, [r3, #6]
 800e4b6:	0b1b      	lsrs	r3, r3, #12
      if (service == COE_SDOREQUEST)
 800e4b8:	2b02      	cmp	r3, #2
 800e4ba:	d011      	beq.n	800e4e0 <ESC_coeprocess+0x90>
         if ((service == COE_SDOINFORMATION)
 800e4bc:	2b08      	cmp	r3, #8
 800e4be:	d042      	beq.n	800e546 <ESC_coeprocess+0xf6>
            if ((service == COE_SDOINFORMATION)
 800e4c0:	2b08      	cmp	r3, #8
 800e4c2:	d049      	beq.n	800e558 <ESC_coeprocess+0x108>
               if ((service == COE_SDOINFORMATION)
 800e4c4:	2b08      	cmp	r3, #8
 800e4c6:	d050      	beq.n	800e56a <ESC_coeprocess+0x11a>
                     if (service == 0)
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d157      	bne.n	800e57c <ESC_coeprocess+0x12c>
                        MBX_error (MBXERR_INVALIDHEADER);
 800e4cc:	2005      	movs	r0, #5
 800e4ce:	f7fd ff79 	bl	800c3c4 <MBX_error>
                     MBXcontrol[0].state = MBXstate_idle;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	4a2f      	ldr	r2, [pc, #188]	; (800e594 <ESC_coeprocess+0x144>)
 800e4d6:	7013      	strb	r3, [r2, #0]
                     ESCvar.xoe = 0;
 800e4d8:	4a2d      	ldr	r2, [pc, #180]	; (800e590 <ESC_coeprocess+0x140>)
 800e4da:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 800e4de:	e7d1      	b.n	800e484 <ESC_coeprocess+0x34>
         if ((SDO_COMMAND(coesdo->command) == COE_COMMAND_UPLOADREQUEST)
 800e4e0:	4b2d      	ldr	r3, [pc, #180]	; (800e598 <ESC_coeprocess+0x148>)
 800e4e2:	7a1a      	ldrb	r2, [r3, #8]
 800e4e4:	f002 03e0 	and.w	r3, r2, #224	; 0xe0
 800e4e8:	2b40      	cmp	r3, #64	; 0x40
 800e4ea:	d00a      	beq.n	800e502 <ESC_coeprocess+0xb2>
         else if (((coesdo->command & 0xef) == COE_COMMAND_UPLOADSEGREQ)
 800e4ec:	f002 01ef 	and.w	r1, r2, #239	; 0xef
 800e4f0:	2960      	cmp	r1, #96	; 0x60
 800e4f2:	d013      	beq.n	800e51c <ESC_coeprocess+0xcc>
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADREQUEST)
 800e4f4:	2b20      	cmp	r3, #32
 800e4f6:	d01d      	beq.n	800e534 <ESC_coeprocess+0xe4>
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADSEGREQ)
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1c3      	bne.n	800e484 <ESC_coeprocess+0x34>
            SDO_downloadsegment ();
 800e4fc:	f7ff fd2a 	bl	800df54 <SDO_downloadsegment>
 800e500:	e7c0      	b.n	800e484 <ESC_coeprocess+0x34>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE))
 800e502:	4925      	ldr	r1, [pc, #148]	; (800e598 <ESC_coeprocess+0x148>)
 800e504:	8809      	ldrh	r1, [r1, #0]
 800e506:	290a      	cmp	r1, #10
 800e508:	d1f0      	bne.n	800e4ec <ESC_coeprocess+0x9c>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 800e50a:	f012 0f10 	tst.w	r2, #16
 800e50e:	d002      	beq.n	800e516 <ESC_coeprocess+0xc6>
               SDO_upload_complete_access ();
 800e510:	f7ff f924 	bl	800d75c <SDO_upload_complete_access>
 800e514:	e7b6      	b.n	800e484 <ESC_coeprocess+0x34>
               SDO_upload ();
 800e516:	f7ff fb0f 	bl	800db38 <SDO_upload>
 800e51a:	e7b3      	b.n	800e484 <ESC_coeprocess+0x34>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE)
 800e51c:	491e      	ldr	r1, [pc, #120]	; (800e598 <ESC_coeprocess+0x148>)
 800e51e:	8809      	ldrh	r1, [r1, #0]
 800e520:	290a      	cmp	r1, #10
 800e522:	d1e7      	bne.n	800e4f4 <ESC_coeprocess+0xa4>
               && (ESCvar.segmented == MBXSEU))
 800e524:	491a      	ldr	r1, [pc, #104]	; (800e590 <ESC_coeprocess+0x140>)
 800e526:	f891 1091 	ldrb.w	r1, [r1, #145]	; 0x91
 800e52a:	2940      	cmp	r1, #64	; 0x40
 800e52c:	d1e2      	bne.n	800e4f4 <ESC_coeprocess+0xa4>
            SDO_uploadsegment ();
 800e52e:	f7fe ff3b 	bl	800d3a8 <SDO_uploadsegment>
 800e532:	e7a7      	b.n	800e484 <ESC_coeprocess+0x34>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 800e534:	f012 0f10 	tst.w	r2, #16
 800e538:	d002      	beq.n	800e540 <ESC_coeprocess+0xf0>
               SDO_download_complete_access ();
 800e53a:	f7ff fa13 	bl	800d964 <SDO_download_complete_access>
 800e53e:	e7a1      	b.n	800e484 <ESC_coeprocess+0x34>
               SDO_download ();
 800e540:	f7ff fc04 	bl	800dd4c <SDO_download>
 800e544:	e79e      	b.n	800e484 <ESC_coeprocess+0x34>
               && (coeobjdesc->infoheader.opcode == 0x01))
 800e546:	4a14      	ldr	r2, [pc, #80]	; (800e598 <ESC_coeprocess+0x148>)
 800e548:	7a12      	ldrb	r2, [r2, #8]
 800e54a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e54e:	2a01      	cmp	r2, #1
 800e550:	d1b6      	bne.n	800e4c0 <ESC_coeprocess+0x70>
            SDO_getodlist ();
 800e552:	f7fe fe41 	bl	800d1d8 <SDO_getodlist>
 800e556:	e795      	b.n	800e484 <ESC_coeprocess+0x34>
                  && (coeobjdesc->infoheader.opcode == 0x03))
 800e558:	4a0f      	ldr	r2, [pc, #60]	; (800e598 <ESC_coeprocess+0x148>)
 800e55a:	7a12      	ldrb	r2, [r2, #8]
 800e55c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e560:	2a03      	cmp	r2, #3
 800e562:	d1af      	bne.n	800e4c4 <ESC_coeprocess+0x74>
               SDO_getod ();
 800e564:	f7ff fda2 	bl	800e0ac <SDO_getod>
 800e568:	e78c      	b.n	800e484 <ESC_coeprocess+0x34>
                     && (coeobjdesc->infoheader.opcode == 0x05))
 800e56a:	4a0b      	ldr	r2, [pc, #44]	; (800e598 <ESC_coeprocess+0x148>)
 800e56c:	7a12      	ldrb	r2, [r2, #8]
 800e56e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e572:	2a05      	cmp	r2, #5
 800e574:	d1a8      	bne.n	800e4c8 <ESC_coeprocess+0x78>
                  SDO_geted ();
 800e576:	f7ff fe2f 	bl	800e1d8 <SDO_geted>
 800e57a:	e783      	b.n	800e484 <ESC_coeprocess+0x34>
                        SDO_abort (0, etohs (coesdo->index), coesdo->subindex, ABORT_UNSUPPORTED);
 800e57c:	4906      	ldr	r1, [pc, #24]	; (800e598 <ESC_coeprocess+0x148>)
 800e57e:	4b07      	ldr	r3, [pc, #28]	; (800e59c <ESC_coeprocess+0x14c>)
 800e580:	7aca      	ldrb	r2, [r1, #11]
 800e582:	f8b1 1009 	ldrh.w	r1, [r1, #9]
 800e586:	2000      	movs	r0, #0
 800e588:	f7fe fec4 	bl	800d314 <SDO_abort>
 800e58c:	e7a1      	b.n	800e4d2 <ESC_coeprocess+0x82>
 800e58e:	bf00      	nop
 800e590:	200082bc 	.word	0x200082bc
 800e594:	20008fa8 	.word	0x20008fa8
 800e598:	200089a8 	.word	0x200089a8
 800e59c:	06010000 	.word	0x06010000

0800e5a0 <COE_initDefaultValues>:
   const _objd *objd;
   int n;
   uint8_t maxsub;

   /* Let application decide if initialization will be skipped */
   if (ESCvar.skip_default_initialization)
 800e5a0:	4b18      	ldr	r3, [pc, #96]	; (800e604 <COE_initDefaultValues+0x64>)
 800e5a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e5a6:	bb63      	cbnz	r3, 800e602 <COE_initDefaultValues+0x62>
{
 800e5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   {
      return;
   }

   /* Set default values from object descriptor */
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 800e5ac:	f04f 0800 	mov.w	r8, #0
 800e5b0:	e012      	b.n	800e5d8 <COE_initDefaultValues+0x38>
      i = 0;
      do
      {
         if (objd[i].data != NULL)
         {
            COE_setValue (&objd[i], objd[i].value);
 800e5b2:	68c2      	ldr	r2, [r0, #12]
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	f7fe fd42 	bl	800d03e <COE_setValue>
            DPRINT ("%04x:%02x = %x\n", SDOobjects[n].index, objd[i].subindex, objd[i].value);
         }
      } while (objd[i++].subindex < maxsub);
 800e5ba:	3401      	adds	r4, #1
 800e5bc:	5b72      	ldrh	r2, [r6, r5]
 800e5be:	b2bb      	uxth	r3, r7
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d207      	bcs.n	800e5d4 <COE_initDefaultValues+0x34>
         if (objd[i].data != NULL)
 800e5c4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e5c8:	009d      	lsls	r5, r3, #2
 800e5ca:	1970      	adds	r0, r6, r5
 800e5cc:	6903      	ldr	r3, [r0, #16]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d1ef      	bne.n	800e5b2 <COE_initDefaultValues+0x12>
 800e5d2:	e7f2      	b.n	800e5ba <COE_initDefaultValues+0x1a>
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 800e5d4:	f108 0801 	add.w	r8, r8, #1
 800e5d8:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800e5dc:	4a0a      	ldr	r2, [pc, #40]	; (800e608 <COE_initDefaultValues+0x68>)
 800e5de:	5ad2      	ldrh	r2, [r2, r3]
 800e5e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d006      	beq.n	800e5f6 <COE_initDefaultValues+0x56>
      objd = SDOobjects[n].objdesc;
 800e5e8:	4b07      	ldr	r3, [pc, #28]	; (800e608 <COE_initDefaultValues+0x68>)
 800e5ea:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 800e5ee:	68de      	ldr	r6, [r3, #12]
      maxsub = SDOobjects[n].maxsub;
 800e5f0:	791f      	ldrb	r7, [r3, #4]
      i = 0;
 800e5f2:	2400      	movs	r4, #0
 800e5f4:	e7e6      	b.n	800e5c4 <COE_initDefaultValues+0x24>
   }

   /* Let application override default values */
   if (ESCvar.set_defaults_hook != NULL)
 800e5f6:	4b03      	ldr	r3, [pc, #12]	; (800e604 <COE_initDefaultValues+0x64>)
 800e5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5fa:	b103      	cbz	r3, 800e5fe <COE_initDefaultValues+0x5e>
   {
      ESCvar.set_defaults_hook();
 800e5fc:	4798      	blx	r3
   }
}
 800e5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e602:	4770      	bx	lr
 800e604:	200082bc 	.word	0x200082bc
 800e608:	0801558c 	.word	0x0801558c

0800e60c <COE_pdoPack>:
 * @param[in] buffer     = input process data
 * @param[in] nmappings  = number of mappings in sync manager
 * @param[in] mappings   = list of mapped objects in sync manager
 */
void COE_pdoPack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 800e60c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e610:	b083      	sub	sp, #12
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 800e612:	f010 0f07 	tst.w	r0, #7
 800e616:	d104      	bne.n	800e622 <COE_pdoPack+0x16>
 800e618:	4680      	mov	r8, r0
 800e61a:	460f      	mov	r7, r1
 800e61c:	4616      	mov	r6, r2

   for (ix = 0; ix < nmappings; ix++)
 800e61e:	2400      	movs	r4, #0
 800e620:	e010      	b.n	800e644 <COE_pdoPack+0x38>
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 800e622:	4b15      	ldr	r3, [pc, #84]	; (800e678 <COE_pdoPack+0x6c>)
 800e624:	4a15      	ldr	r2, [pc, #84]	; (800e67c <COE_pdoPack+0x70>)
 800e626:	f240 61ff 	movw	r1, #1791	; 0x6ff
 800e62a:	4815      	ldr	r0, [pc, #84]	; (800e680 <COE_pdoPack+0x74>)
 800e62c:	f003 f9a6 	bl	801197c <__assert_func>
            );
         }
         else
         {
            /* Atomically get object value */
            uint64_t value = COE_getValue (obj);
 800e630:	f7fe fff2 	bl	800d618 <COE_getValue>
            COE_bitsliceSet (
 800e634:	e9cd 0100 	strd	r0, r1, [sp]
 800e638:	462a      	mov	r2, r5
 800e63a:	4649      	mov	r1, r9
 800e63c:	4640      	mov	r0, r8
 800e63e:	f7fe fc76 	bl	800cf2e <COE_bitsliceSet>
   for (ix = 0; ix < nmappings; ix++)
 800e642:	3401      	adds	r4, #1
 800e644:	42bc      	cmp	r4, r7
 800e646:	da14      	bge.n	800e672 <COE_pdoPack+0x66>
      const _objd * obj = mappings[ix].obj;
 800e648:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e64c:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800e650:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
      uint32_t offset = mappings[ix].offset;
 800e654:	f8d2 9008 	ldr.w	r9, [r2, #8]
      if (obj != NULL)
 800e658:	2800      	cmp	r0, #0
 800e65a:	d0f2      	beq.n	800e642 <COE_pdoPack+0x36>
         if (obj->bitlength > 64)
 800e65c:	8885      	ldrh	r5, [r0, #4]
 800e65e:	2d40      	cmp	r5, #64	; 0x40
 800e660:	d9e6      	bls.n	800e630 <COE_pdoPack+0x24>
               BITS2BYTES (obj->bitlength)
 800e662:	1dea      	adds	r2, r5, #7
            memcpy (
 800e664:	08d2      	lsrs	r2, r2, #3
 800e666:	6901      	ldr	r1, [r0, #16]
 800e668:	eb08 00d9 	add.w	r0, r8, r9, lsr #3
 800e66c:	f003 fbca 	bl	8011e04 <memcpy>
 800e670:	e7e7      	b.n	800e642 <COE_pdoPack+0x36>
               value
            );
         }
      }
   }
}
 800e672:	b003      	add	sp, #12
 800e674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e678:	08013670 	.word	0x08013670
 800e67c:	080136b0 	.word	0x080136b0
 800e680:	0801364c 	.word	0x0801364c

0800e684 <COE_pdoUnpack>:
 * @param[in] buffer    = output process data
 * @param[in] nmappings = number of mappings in sync manager
 * @param[in] mappings  = list of mapped objects in sync manager
 */
void COE_pdoUnpack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 800e684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 800e688:	f010 0f07 	tst.w	r0, #7
 800e68c:	d104      	bne.n	800e698 <COE_pdoUnpack+0x14>
 800e68e:	4680      	mov	r8, r0
 800e690:	460f      	mov	r7, r1
 800e692:	4616      	mov	r6, r2

   for (ix = 0; ix < nmappings; ix++)
 800e694:	2400      	movs	r4, #0
 800e696:	e00f      	b.n	800e6b8 <COE_pdoUnpack+0x34>
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 800e698:	4b13      	ldr	r3, [pc, #76]	; (800e6e8 <COE_pdoUnpack+0x64>)
 800e69a:	4a14      	ldr	r2, [pc, #80]	; (800e6ec <COE_pdoUnpack+0x68>)
 800e69c:	f240 712e 	movw	r1, #1838	; 0x72e
 800e6a0:	4813      	ldr	r0, [pc, #76]	; (800e6f0 <COE_pdoUnpack+0x6c>)
 800e6a2:	f003 f96b 	bl	801197c <__assert_func>
            );
         }
         else
         {
            /* Atomically set object value */
            uint64_t value = COE_bitsliceGet (
 800e6a6:	4640      	mov	r0, r8
 800e6a8:	f7fe fbef 	bl	800ce8a <COE_bitsliceGet>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	460b      	mov	r3, r1
               (uint64_t *)buffer,
               offset,
               obj->bitlength
            );
            COE_setValue (obj, value);
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	f7fe fcc4 	bl	800d03e <COE_setValue>
   for (ix = 0; ix < nmappings; ix++)
 800e6b6:	3401      	adds	r4, #1
 800e6b8:	42bc      	cmp	r4, r7
 800e6ba:	da13      	bge.n	800e6e4 <COE_pdoUnpack+0x60>
      const _objd * obj = mappings[ix].obj;
 800e6bc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e6c0:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800e6c4:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
      uint32_t offset = mappings[ix].offset;
 800e6c8:	6891      	ldr	r1, [r2, #8]
      if (obj != NULL)
 800e6ca:	2d00      	cmp	r5, #0
 800e6cc:	d0f3      	beq.n	800e6b6 <COE_pdoUnpack+0x32>
         if (obj->bitlength > 64)
 800e6ce:	88aa      	ldrh	r2, [r5, #4]
 800e6d0:	2a40      	cmp	r2, #64	; 0x40
 800e6d2:	d9e8      	bls.n	800e6a6 <COE_pdoUnpack+0x22>
               BITS2BYTES (obj->bitlength)
 800e6d4:	3207      	adds	r2, #7
            memcpy (
 800e6d6:	08d2      	lsrs	r2, r2, #3
 800e6d8:	eb08 01d1 	add.w	r1, r8, r1, lsr #3
 800e6dc:	6928      	ldr	r0, [r5, #16]
 800e6de:	f003 fb91 	bl	8011e04 <memcpy>
 800e6e2:	e7e8      	b.n	800e6b6 <COE_pdoUnpack+0x32>
         }
      }
   }
}
 800e6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6e8:	08013670 	.word	0x08013670
 800e6ec:	08013690 	.word	0x08013690
 800e6f0:	0801364c 	.word	0x0801364c

0800e6f4 <COE_maxSub>:
 * This function fetches the value of subindex 0 (max subindex).
 *
 * @param[in] index = object index
 */
uint8_t COE_maxSub (uint16_t index)
{
 800e6f4:	b508      	push	{r3, lr}
   int32_t nidx;
   uint8_t maxsub;

   nidx = SDO_findobject (index);
 800e6f6:	f7fe fffb 	bl	800d6f0 <SDO_findobject>
   if (nidx == -1)
 800e6fa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e6fe:	d009      	beq.n	800e714 <COE_maxSub+0x20>
      return 0;

   maxsub = OBJ_VALUE_FETCH (maxsub, SDOobjects[nidx].objdesc[0]);
 800e700:	4b05      	ldr	r3, [pc, #20]	; (800e718 <COE_maxSub+0x24>)
 800e702:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800e706:	68da      	ldr	r2, [r3, #12]
 800e708:	6913      	ldr	r3, [r2, #16]
 800e70a:	b10b      	cbz	r3, 800e710 <COE_maxSub+0x1c>
 800e70c:	7818      	ldrb	r0, [r3, #0]
   return maxsub;
}
 800e70e:	bd08      	pop	{r3, pc}
   maxsub = OBJ_VALUE_FETCH (maxsub, SDOobjects[nidx].objdesc[0]);
 800e710:	7b10      	ldrb	r0, [r2, #12]
 800e712:	e7fc      	b.n	800e70e <COE_maxSub+0x1a>
      return 0;
 800e714:	2000      	movs	r0, #0
 800e716:	e7fa      	b.n	800e70e <COE_maxSub+0x1a>
 800e718:	0801558c 	.word	0x0801558c

0800e71c <ESC_read_pram>:
   } while(value & LAN9252_ESC_CSR_CMD_BUSY);
}

/* ESC read process data ram function */
static void ESC_read_pram (uint16_t address, void *buf, uint16_t len)
{
 800e71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e720:	b0c2      	sub	sp, #264	; 0x108
 800e722:	4607      	mov	r7, r0
 800e724:	4688      	mov	r8, r1
 800e726:	4615      	mov	r5, r2
   uint32_t value;
   uint8_t * temp_buf = buf;
   uint16_t quotient, remainder, byte_offset = 0;
   uint8_t fifo_cnt, fifo_size, fifo_range, first_byte_position, temp_len;
   uint8_t buffer[256] = {0};
 800e728:	2100      	movs	r1, #0
 800e72a:	9101      	str	r1, [sp, #4]
 800e72c:	22fc      	movs	r2, #252	; 0xfc
 800e72e:	a802      	add	r0, sp, #8
 800e730:	f003 faaa 	bl	8011c88 <memset>
   int i, size;

   lan9252_write_32 (LAN9252_ESC_PRAM_RD_CMD_REG, LAN9252_ESC_PRAM_CMD_ABORT);
 800e734:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e738:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800e73c:	f7fc fe92 	bl	800b464 <lan9252_write_32>

   do
   {
      value = lan9252_read_32 (LAN9252_ESC_PRAM_RD_CMD_REG);
 800e740:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800e744:	f7fc fe5a 	bl	800b3fc <lan9252_read_32>
 800e748:	9041      	str	r0, [sp, #260]	; 0x104
   } while(value & LAN9252_ESC_PRAM_CMD_BUSY);
 800e74a:	2800      	cmp	r0, #0
 800e74c:	dbf8      	blt.n	800e740 <ESC_read_pram+0x24>

   lan9252_write_32 (LAN9252_ESC_PRAM_RD_ADDR_LEN_REG, (LAN9252_ESC_PRAM_SIZE(len) | LAN9252_ESC_PRAM_ADDR(address)));
 800e74e:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800e752:	f44f 7042 	mov.w	r0, #776	; 0x308
 800e756:	f7fc fe85 	bl	800b464 <lan9252_write_32>
   lan9252_write_32 (LAN9252_ESC_PRAM_RD_CMD_REG, LAN9252_ESC_PRAM_CMD_BUSY);
 800e75a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e75e:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800e762:	f7fc fe7f 	bl	800b464 <lan9252_write_32>

   /* Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet and MicroChip SDK code
    */
   first_byte_position = (address & 0x03);
 800e766:	f007 0703 	and.w	r7, r7, #3
   uint16_t quotient, remainder, byte_offset = 0;
 800e76a:	2600      	movs	r6, #0

   /* Transfer data */
   while (len > 0)
 800e76c:	2d00      	cmp	r5, #0
 800e76e:	d06f      	beq.n	800e850 <ESC_read_pram+0x134>
   {
      /* Wait for read availability */
      if (byte_offset > 0)
 800e770:	b346      	cbz	r6, 800e7c4 <ESC_read_pram+0xa8>
      {
         quotient = len/4;
 800e772:	08ac      	lsrs	r4, r5, #2
         remainder = len - quotient*4;
 800e774:	f005 0303 	and.w	r3, r5, #3
      {
         quotient = (len + first_byte_position)/4;
         remainder = (len + first_byte_position) - quotient*4;
      }

      if (remainder != 0)
 800e778:	b10b      	cbz	r3, 800e77e <ESC_read_pram+0x62>
      {
         quotient++;
 800e77a:	3401      	adds	r4, #1
 800e77c:	b2a4      	uxth	r4, r4
      }

      fifo_range = MIN(quotient,16);
 800e77e:	2c10      	cmp	r4, #16
 800e780:	bf28      	it	cs
 800e782:	2410      	movcs	r4, #16
 800e784:	b2e4      	uxtb	r4, r4

      do
      {
         value = lan9252_read_32 (LAN9252_ESC_PRAM_RD_CMD_REG);
 800e786:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800e78a:	f7fc fe37 	bl	800b3fc <lan9252_read_32>
 800e78e:	9041      	str	r0, [sp, #260]	; 0x104
      }while(!(value & LAN9252_ESC_PRAM_CMD_AVAIL) || (LAN9252_ESC_PRAM_CMD_CNT(value) < fifo_range));
 800e790:	f010 0f01 	tst.w	r0, #1
 800e794:	d0f7      	beq.n	800e786 <ESC_read_pram+0x6a>
 800e796:	ea4f 2910 	mov.w	r9, r0, lsr #8
 800e79a:	f3c0 2004 	ubfx	r0, r0, #8, #5
 800e79e:	42a0      	cmp	r0, r4
 800e7a0:	d3f1      	bcc.n	800e786 <ESC_read_pram+0x6a>

      /* Fifo size */
      fifo_size = LAN9252_ESC_PRAM_CMD_CNT(value);
 800e7a2:	f009 091f 	and.w	r9, r9, #31

      /* Transfer data size */
      size = 4*fifo_size;
 800e7a6:	ea4f 0489 	mov.w	r4, r9, lsl #2

      /* Reset fifo count */
      fifo_cnt = fifo_size;

      /* Reset buffer */
      memset(buffer,0,size);
 800e7aa:	4622      	mov	r2, r4
 800e7ac:	2100      	movs	r1, #0
 800e7ae:	a801      	add	r0, sp, #4
 800e7b0:	f003 fa6a 	bl	8011c88 <memset>

      /* Transfer batch of data */
      lan9252_read_data ((uint8_t *)buffer, LAN9252_ESC_PRAM_RD_FIFO_REG, size);
 800e7b4:	4622      	mov	r2, r4
 800e7b6:	2100      	movs	r1, #0
 800e7b8:	a801      	add	r0, sp, #4
 800e7ba:	f7fc fdf1 	bl	800b3a0 <lan9252_read_data>

      i = 0;
 800e7be:	f04f 0a00 	mov.w	sl, #0
      while (fifo_cnt > 0 && len > 0)
 800e7c2:	e01f      	b.n	800e804 <ESC_read_pram+0xe8>
         quotient = (len + first_byte_position)/4;
 800e7c4:	19ec      	adds	r4, r5, r7
 800e7c6:	f3c4 048f 	ubfx	r4, r4, #2, #16
         remainder = (len + first_byte_position) - quotient*4;
 800e7ca:	19eb      	adds	r3, r5, r7
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	00a2      	lsls	r2, r4, #2
 800e7d0:	b292      	uxth	r2, r2
 800e7d2:	1a9b      	subs	r3, r3, r2
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	e7cf      	b.n	800e778 <ESC_read_pram+0x5c>
            temp_len = (len > 4) ? 4: len;
            memcpy(temp_buf + byte_offset ,&value, temp_len);
         }
         else
         {
            temp_len = (len > (4 - first_byte_position)) ? (4 - first_byte_position) : len;
 800e7d8:	f1c7 0404 	rsb	r4, r7, #4
 800e7dc:	42ac      	cmp	r4, r5
 800e7de:	bfa8      	it	ge
 800e7e0:	462c      	movge	r4, r5
 800e7e2:	b2e4      	uxtb	r4, r4
            memcpy(temp_buf ,((uint8_t *)&value + first_byte_position), temp_len);
 800e7e4:	4622      	mov	r2, r4
 800e7e6:	ab41      	add	r3, sp, #260	; 0x104
 800e7e8:	19d9      	adds	r1, r3, r7
 800e7ea:	4640      	mov	r0, r8
 800e7ec:	f003 fb0a 	bl	8011e04 <memcpy>
         }

         i += 4;
 800e7f0:	f10a 0a04 	add.w	sl, sl, #4
         fifo_cnt--;
 800e7f4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e7f8:	fa5f f989 	uxtb.w	r9, r9
         len -= temp_len;
 800e7fc:	1b2d      	subs	r5, r5, r4
 800e7fe:	b2ad      	uxth	r5, r5
         byte_offset += temp_len;
 800e800:	4434      	add	r4, r6
 800e802:	b2a6      	uxth	r6, r4
      while (fifo_cnt > 0 && len > 0)
 800e804:	f1b9 0f00 	cmp.w	r9, #0
 800e808:	d0b0      	beq.n	800e76c <ESC_read_pram+0x50>
 800e80a:	2d00      	cmp	r5, #0
 800e80c:	d0ae      	beq.n	800e76c <ESC_read_pram+0x50>
         value = buffer[i] | (buffer[i+1] << 8) | (buffer[i+2] << 16) | (buffer[i+3] << 24);
 800e80e:	aa01      	add	r2, sp, #4
 800e810:	f812 300a 	ldrb.w	r3, [r2, sl]
 800e814:	f10a 0101 	add.w	r1, sl, #1
 800e818:	5c51      	ldrb	r1, [r2, r1]
 800e81a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e81e:	f10a 0102 	add.w	r1, sl, #2
 800e822:	5c51      	ldrb	r1, [r2, r1]
 800e824:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800e828:	f10a 0103 	add.w	r1, sl, #3
 800e82c:	5c52      	ldrb	r2, [r2, r1]
 800e82e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e832:	9341      	str	r3, [sp, #260]	; 0x104
         if (byte_offset > 0)
 800e834:	2e00      	cmp	r6, #0
 800e836:	d0cf      	beq.n	800e7d8 <ESC_read_pram+0xbc>
            temp_len = (len > 4) ? 4: len;
 800e838:	462c      	mov	r4, r5
 800e83a:	2d04      	cmp	r5, #4
 800e83c:	bf28      	it	cs
 800e83e:	2404      	movcs	r4, #4
 800e840:	b2e4      	uxtb	r4, r4
            memcpy(temp_buf + byte_offset ,&value, temp_len);
 800e842:	4622      	mov	r2, r4
 800e844:	a941      	add	r1, sp, #260	; 0x104
 800e846:	eb08 0006 	add.w	r0, r8, r6
 800e84a:	f003 fadb 	bl	8011e04 <memcpy>
 800e84e:	e7cf      	b.n	800e7f0 <ESC_read_pram+0xd4>
      }

      // vPortFree(buffer);
   }
}
 800e850:	b042      	add	sp, #264	; 0x108
 800e852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e856 <ESC_read_csr>:
{
 800e856:	b530      	push	{r4, r5, lr}
 800e858:	b083      	sub	sp, #12
 800e85a:	460d      	mov	r5, r1
 800e85c:	4614      	mov	r4, r2
   value = (LAN9252_ESC_CSR_CMD_READ | LAN9252_ESC_CSR_CMD_SIZE(len) | address);
 800e85e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e862:	f040 4140 	orr.w	r1, r0, #3221225472	; 0xc0000000
 800e866:	9101      	str	r1, [sp, #4]
   lan9252_write_32 (LAN9252_ESC_CSR_CMD_REG, value);
 800e868:	f44f 7041 	mov.w	r0, #772	; 0x304
 800e86c:	f7fc fdfa 	bl	800b464 <lan9252_write_32>
      value = lan9252_read_32 (LAN9252_ESC_CSR_CMD_REG);
 800e870:	f44f 7041 	mov.w	r0, #772	; 0x304
 800e874:	f7fc fdc2 	bl	800b3fc <lan9252_read_32>
 800e878:	9001      	str	r0, [sp, #4]
   } while (value & LAN9252_ESC_CSR_CMD_BUSY);
 800e87a:	2800      	cmp	r0, #0
 800e87c:	dbf8      	blt.n	800e870 <ESC_read_csr+0x1a>
   value = lan9252_read_32 (LAN9252_ESC_CSR_DATA_REG);
 800e87e:	f44f 7040 	mov.w	r0, #768	; 0x300
 800e882:	f7fc fdbb 	bl	800b3fc <lan9252_read_32>
 800e886:	9001      	str	r0, [sp, #4]
   memcpy(buf, (uint8_t *)&value, len);
 800e888:	4622      	mov	r2, r4
 800e88a:	a901      	add	r1, sp, #4
 800e88c:	4628      	mov	r0, r5
 800e88e:	f003 fab9 	bl	8011e04 <memcpy>
}
 800e892:	b003      	add	sp, #12
 800e894:	bd30      	pop	{r4, r5, pc}

0800e896 <ESC_write_csr>:
{
 800e896:	b530      	push	{r4, r5, lr}
 800e898:	b083      	sub	sp, #12
 800e89a:	4604      	mov	r4, r0
 800e89c:	4615      	mov	r5, r2
   memcpy((uint8_t*)&value, buf,len);
 800e89e:	a801      	add	r0, sp, #4
 800e8a0:	f003 fab0 	bl	8011e04 <memcpy>
   lan9252_write_32 (LAN9252_ESC_CSR_DATA_REG, value);
 800e8a4:	9901      	ldr	r1, [sp, #4]
 800e8a6:	f44f 7040 	mov.w	r0, #768	; 0x300
 800e8aa:	f7fc fddb 	bl	800b464 <lan9252_write_32>
   value = (LAN9252_ESC_CSR_CMD_WRITE | LAN9252_ESC_CSR_CMD_SIZE(len) | address);
 800e8ae:	ea44 4105 	orr.w	r1, r4, r5, lsl #16
 800e8b2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800e8b6:	9101      	str	r1, [sp, #4]
   lan9252_write_32 (LAN9252_ESC_CSR_CMD_REG, value);
 800e8b8:	f44f 7041 	mov.w	r0, #772	; 0x304
 800e8bc:	f7fc fdd2 	bl	800b464 <lan9252_write_32>
      value = lan9252_read_32 (LAN9252_ESC_CSR_CMD_REG);
 800e8c0:	f44f 7041 	mov.w	r0, #772	; 0x304
 800e8c4:	f7fc fd9a 	bl	800b3fc <lan9252_read_32>
 800e8c8:	9001      	str	r0, [sp, #4]
   } while(value & LAN9252_ESC_CSR_CMD_BUSY);
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	dbf8      	blt.n	800e8c0 <ESC_write_csr+0x2a>
}
 800e8ce:	b003      	add	sp, #12
 800e8d0:	bd30      	pop	{r4, r5, pc}

0800e8d2 <ESC_write_pram>:

/* ESC write process data ram function */
static void ESC_write_pram (uint16_t address, void *buf, uint16_t len)
{
 800e8d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d6:	b0c3      	sub	sp, #268	; 0x10c
 800e8d8:	4607      	mov	r7, r0
 800e8da:	4688      	mov	r8, r1
 800e8dc:	4615      	mov	r5, r2
   uint32_t value;
   uint8_t * temp_buf = buf;
   uint16_t quotient, remainder, byte_offset = 0;
   uint8_t fifo_cnt, fifo_size, fifo_range, first_byte_position, temp_len;
   uint8_t buffer[256] = {0};
 800e8de:	2100      	movs	r1, #0
 800e8e0:	9101      	str	r1, [sp, #4]
 800e8e2:	22fc      	movs	r2, #252	; 0xfc
 800e8e4:	a802      	add	r0, sp, #8
 800e8e6:	f003 f9cf 	bl	8011c88 <memset>
   int i, size;

   lan9252_write_32 (LAN9252_ESC_PRAM_WR_CMD_REG, LAN9252_ESC_PRAM_CMD_ABORT);
 800e8ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e8ee:	f44f 7045 	mov.w	r0, #788	; 0x314
 800e8f2:	f7fc fdb7 	bl	800b464 <lan9252_write_32>

   do
   {
      value = lan9252_read_32 (LAN9252_ESC_PRAM_WR_CMD_REG);
 800e8f6:	f44f 7045 	mov.w	r0, #788	; 0x314
 800e8fa:	f7fc fd7f 	bl	800b3fc <lan9252_read_32>
 800e8fe:	9041      	str	r0, [sp, #260]	; 0x104
   } while(value & LAN9252_ESC_PRAM_CMD_BUSY);
 800e900:	2800      	cmp	r0, #0
 800e902:	dbf8      	blt.n	800e8f6 <ESC_write_pram+0x24>

   lan9252_write_32 (LAN9252_ESC_PRAM_WR_ADDR_LEN_REG, (LAN9252_ESC_PRAM_SIZE(len) | LAN9252_ESC_PRAM_ADDR(address)));
 800e904:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800e908:	f44f 7044 	mov.w	r0, #784	; 0x310
 800e90c:	f7fc fdaa 	bl	800b464 <lan9252_write_32>
   lan9252_write_32 (LAN9252_ESC_PRAM_WR_CMD_REG, LAN9252_ESC_PRAM_CMD_BUSY);
 800e910:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e914:	f44f 7045 	mov.w	r0, #788	; 0x314
 800e918:	f7fc fda4 	bl	800b464 <lan9252_write_32>

   /* Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet and MicroChip SDK code
    */
   first_byte_position = (address & 0x03);
 800e91c:	f007 0703 	and.w	r7, r7, #3
   uint16_t quotient, remainder, byte_offset = 0;
 800e920:	2600      	movs	r6, #0

   /* Transfer data */
   while (len > 0)
 800e922:	e048      	b.n	800e9b6 <ESC_write_pram+0xe4>
         quotient = len/4;
         remainder = len - quotient*4;
      }
      else
      {
         quotient = (len + first_byte_position)/4;
 800e924:	19ec      	adds	r4, r5, r7
 800e926:	f3c4 048f 	ubfx	r4, r4, #2, #16
         remainder = (len + first_byte_position) - quotient*4;
 800e92a:	19eb      	adds	r3, r5, r7
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	00a2      	lsls	r2, r4, #2
 800e930:	b292      	uxth	r2, r2
 800e932:	1a9b      	subs	r3, r3, r2
 800e934:	b29b      	uxth	r3, r3
 800e936:	e044      	b.n	800e9c2 <ESC_write_pram+0xf0>
            temp_len = (len > 4) ? 4: len;
            memcpy(&value, (temp_buf + byte_offset), temp_len);
         }
         else
         {
            temp_len = (len > (4 - first_byte_position)) ? (4 - first_byte_position) : len;
 800e938:	f1c7 0404 	rsb	r4, r7, #4
 800e93c:	42ac      	cmp	r4, r5
 800e93e:	bfa8      	it	ge
 800e940:	462c      	movge	r4, r5
 800e942:	b2e4      	uxtb	r4, r4
            memcpy(((uint8_t *)&value + first_byte_position), temp_buf, temp_len);
 800e944:	4622      	mov	r2, r4
 800e946:	4641      	mov	r1, r8
 800e948:	ab41      	add	r3, sp, #260	; 0x104
 800e94a:	19d8      	adds	r0, r3, r7
 800e94c:	f003 fa5a 	bl	8011e04 <memcpy>
         }

         buffer[i] = (value & 0xFF);
 800e950:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e952:	aa01      	add	r2, sp, #4
 800e954:	f802 300a 	strb.w	r3, [r2, sl]
         buffer[i+1] = ((value >> 8) & 0xFF);
 800e958:	0a18      	lsrs	r0, r3, #8
 800e95a:	f10a 0101 	add.w	r1, sl, #1
 800e95e:	5450      	strb	r0, [r2, r1]
         buffer[i+2] = ((value >> 16) & 0xFF);
 800e960:	0c18      	lsrs	r0, r3, #16
 800e962:	f10a 0102 	add.w	r1, sl, #2
 800e966:	5450      	strb	r0, [r2, r1]
         buffer[i+3] = ((value >> 24) & 0xFF);
 800e968:	0e1b      	lsrs	r3, r3, #24
 800e96a:	f10a 0103 	add.w	r1, sl, #3
 800e96e:	5453      	strb	r3, [r2, r1]

         i += 4;
 800e970:	f10a 0a04 	add.w	sl, sl, #4
         fifo_cnt--;
 800e974:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e978:	fa5f f989 	uxtb.w	r9, r9
         len -= temp_len;
 800e97c:	1b2d      	subs	r5, r5, r4
 800e97e:	b2ad      	uxth	r5, r5
         byte_offset += temp_len;
 800e980:	4434      	add	r4, r6
 800e982:	b2a6      	uxth	r6, r4
      while (fifo_cnt > 0 && len > 0)
 800e984:	f1b9 0f00 	cmp.w	r9, #0
 800e988:	d010      	beq.n	800e9ac <ESC_write_pram+0xda>
 800e98a:	b17d      	cbz	r5, 800e9ac <ESC_write_pram+0xda>
         value = 0;
 800e98c:	2300      	movs	r3, #0
 800e98e:	9341      	str	r3, [sp, #260]	; 0x104
         if (byte_offset > 0)
 800e990:	2e00      	cmp	r6, #0
 800e992:	d0d1      	beq.n	800e938 <ESC_write_pram+0x66>
            temp_len = (len > 4) ? 4: len;
 800e994:	462c      	mov	r4, r5
 800e996:	2d04      	cmp	r5, #4
 800e998:	bf28      	it	cs
 800e99a:	2404      	movcs	r4, #4
 800e99c:	b2e4      	uxtb	r4, r4
            memcpy(&value, (temp_buf + byte_offset), temp_len);
 800e99e:	4622      	mov	r2, r4
 800e9a0:	eb08 0106 	add.w	r1, r8, r6
 800e9a4:	a841      	add	r0, sp, #260	; 0x104
 800e9a6:	f003 fa2d 	bl	8011e04 <memcpy>
 800e9aa:	e7d1      	b.n	800e950 <ESC_write_pram+0x7e>
      }

      /* Transfer batch of data */
      lan9252_write_data ((uint8_t *)buffer, LAN9252_ESC_PRAM_WR_FIFO_REG, size);
 800e9ac:	465a      	mov	r2, fp
 800e9ae:	2120      	movs	r1, #32
 800e9b0:	a801      	add	r0, sp, #4
 800e9b2:	f7fc fd3f 	bl	800b434 <lan9252_write_data>
   while (len > 0)
 800e9b6:	b32d      	cbz	r5, 800ea04 <ESC_write_pram+0x132>
      if (byte_offset > 0)
 800e9b8:	2e00      	cmp	r6, #0
 800e9ba:	d0b3      	beq.n	800e924 <ESC_write_pram+0x52>
         quotient = len/4;
 800e9bc:	08ac      	lsrs	r4, r5, #2
         remainder = len - quotient*4;
 800e9be:	f005 0303 	and.w	r3, r5, #3
      if (remainder != 0)
 800e9c2:	b10b      	cbz	r3, 800e9c8 <ESC_write_pram+0xf6>
         quotient++;
 800e9c4:	3401      	adds	r4, #1
 800e9c6:	b2a4      	uxth	r4, r4
      fifo_range = MIN(quotient,16);
 800e9c8:	2c10      	cmp	r4, #16
 800e9ca:	bf28      	it	cs
 800e9cc:	2410      	movcs	r4, #16
 800e9ce:	b2e4      	uxtb	r4, r4
         value = lan9252_read_32 (LAN9252_ESC_PRAM_WR_CMD_REG);
 800e9d0:	f44f 7045 	mov.w	r0, #788	; 0x314
 800e9d4:	f7fc fd12 	bl	800b3fc <lan9252_read_32>
 800e9d8:	9041      	str	r0, [sp, #260]	; 0x104
      }while(!(value & LAN9252_ESC_PRAM_CMD_AVAIL) || (LAN9252_ESC_PRAM_CMD_CNT(value) < fifo_range));
 800e9da:	f010 0f01 	tst.w	r0, #1
 800e9de:	d0f7      	beq.n	800e9d0 <ESC_write_pram+0xfe>
 800e9e0:	ea4f 2910 	mov.w	r9, r0, lsr #8
 800e9e4:	f3c0 2004 	ubfx	r0, r0, #8, #5
 800e9e8:	42a0      	cmp	r0, r4
 800e9ea:	d3f1      	bcc.n	800e9d0 <ESC_write_pram+0xfe>
      fifo_size = LAN9252_ESC_PRAM_CMD_CNT(value);
 800e9ec:	f009 091f 	and.w	r9, r9, #31
      size = 4*fifo_size;
 800e9f0:	ea4f 0b89 	mov.w	fp, r9, lsl #2
      memset(buffer,0,size);
 800e9f4:	465a      	mov	r2, fp
 800e9f6:	2100      	movs	r1, #0
 800e9f8:	a801      	add	r0, sp, #4
 800e9fa:	f003 f945 	bl	8011c88 <memset>
      i = 0;
 800e9fe:	f04f 0a00 	mov.w	sl, #0
      while (fifo_cnt > 0 && len > 0)
 800ea02:	e7bf      	b.n	800e984 <ESC_write_pram+0xb2>
      // vPortFree(buffer);
   }
}
 800ea04:	b043      	add	sp, #268	; 0x10c
 800ea06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ea0c <ESC_read>:
 * @param[in]   address     = address of ESC register to read
 * @param[out]  buf         = pointer to buffer to read in
 * @param[in]   len         = number of bytes to read
 */
void ESC_read (uint16_t address, void *buf, uint16_t len)
{
 800ea0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea0e:	4604      	mov	r4, r0
 800ea10:	460f      	mov	r7, r1
 800ea12:	4615      	mov	r5, r2
   /* Select Read function depending on address, process data ram or not */
   if (address >= 0x1000)
 800ea14:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800ea18:	d31e      	bcc.n	800ea58 <ESC_read+0x4c>
   {
      ESC_read_pram (address, buf, len);
 800ea1a:	f7ff fe7f 	bl	800e71c <ESC_read_pram>
         temp_buf += size;
         address += size;
      }
   }
   /* To mimic the ET1100 always providing AlEvent on every read or write */
   ESC_read_csr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
 800ea1e:	4c18      	ldr	r4, [pc, #96]	; (800ea80 <ESC_read+0x74>)
 800ea20:	2204      	movs	r2, #4
 800ea22:	4621      	mov	r1, r4
 800ea24:	f44f 7008 	mov.w	r0, #544	; 0x220
 800ea28:	f7ff ff15 	bl	800e856 <ESC_read_csr>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	f851 39e4 	ldr.w	r3, [r1], #-228
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4

}
 800ea38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         else if (size == 3)
 800ea3a:	2d03      	cmp	r5, #3
 800ea3c:	d102      	bne.n	800ea44 <ESC_read+0x38>
            size = 1;
 800ea3e:	2601      	movs	r6, #1
 800ea40:	e000      	b.n	800ea44 <ESC_read+0x38>
            size = 1;
 800ea42:	2601      	movs	r6, #1
         ESC_read_csr(address, temp_buf, size);
 800ea44:	4632      	mov	r2, r6
 800ea46:	4639      	mov	r1, r7
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f7ff ff04 	bl	800e856 <ESC_read_csr>
         len -= size;
 800ea4e:	1bad      	subs	r5, r5, r6
 800ea50:	b2ad      	uxth	r5, r5
         temp_buf += size;
 800ea52:	4437      	add	r7, r6
         address += size;
 800ea54:	4434      	add	r4, r6
 800ea56:	b2a4      	uxth	r4, r4
      while(len > 0)
 800ea58:	2d00      	cmp	r5, #0
 800ea5a:	d0e0      	beq.n	800ea1e <ESC_read+0x12>
         size = (len > 4) ? 4 : len;
 800ea5c:	462e      	mov	r6, r5
 800ea5e:	2d04      	cmp	r5, #4
 800ea60:	bf28      	it	cs
 800ea62:	2604      	movcs	r6, #4
         if(address & BIT(0))
 800ea64:	f014 0f01 	tst.w	r4, #1
 800ea68:	d1eb      	bne.n	800ea42 <ESC_read+0x36>
         else if (address & BIT(1))
 800ea6a:	f014 0f02 	tst.w	r4, #2
 800ea6e:	d0e4      	beq.n	800ea3a <ESC_read+0x2e>
            size = (size & BIT(0)) ? 1 : 2;
 800ea70:	f016 0f01 	tst.w	r6, #1
 800ea74:	d001      	beq.n	800ea7a <ESC_read+0x6e>
 800ea76:	2601      	movs	r6, #1
 800ea78:	e7e4      	b.n	800ea44 <ESC_read+0x38>
 800ea7a:	2602      	movs	r6, #2
 800ea7c:	e7e2      	b.n	800ea44 <ESC_read+0x38>
 800ea7e:	bf00      	nop
 800ea80:	200083a0 	.word	0x200083a0

0800ea84 <ESC_write>:
 * @param[in]   address     = address of ESC register to write
 * @param[out]  buf         = pointer to buffer to write from
 * @param[in]   len         = number of bytes to write
 */
void ESC_write (uint16_t address, void *buf, uint16_t len)
{
 800ea84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea86:	4604      	mov	r4, r0
 800ea88:	460f      	mov	r7, r1
 800ea8a:	4615      	mov	r5, r2
   /* Select Write function depending on address, process data ram or not */
   if (address >= 0x1000)
 800ea8c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800ea90:	d31e      	bcc.n	800ead0 <ESC_write+0x4c>
   {
      ESC_write_pram(address, buf, len);
 800ea92:	f7ff ff1e 	bl	800e8d2 <ESC_write_pram>
         address += size;
      }
   }

   /* To mimic the ET1x00 always providing AlEvent on every read or write */
   ESC_read_csr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
 800ea96:	4c18      	ldr	r4, [pc, #96]	; (800eaf8 <ESC_write+0x74>)
 800ea98:	2204      	movs	r2, #4
 800ea9a:	4621      	mov	r1, r4
 800ea9c:	f44f 7008 	mov.w	r0, #544	; 0x220
 800eaa0:	f7ff fed9 	bl	800e856 <ESC_read_csr>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 800eaa4:	4621      	mov	r1, r4
 800eaa6:	f851 39e4 	ldr.w	r3, [r1], #-228
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
}
 800eab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         else if (size == 3)
 800eab2:	2d03      	cmp	r5, #3
 800eab4:	d102      	bne.n	800eabc <ESC_write+0x38>
            size = 1;
 800eab6:	2601      	movs	r6, #1
 800eab8:	e000      	b.n	800eabc <ESC_write+0x38>
            size = 1;
 800eaba:	2601      	movs	r6, #1
         ESC_write_csr(address, temp_buf, size);
 800eabc:	4632      	mov	r2, r6
 800eabe:	4639      	mov	r1, r7
 800eac0:	4620      	mov	r0, r4
 800eac2:	f7ff fee8 	bl	800e896 <ESC_write_csr>
         len -= size;
 800eac6:	1bad      	subs	r5, r5, r6
 800eac8:	b2ad      	uxth	r5, r5
         temp_buf += size;
 800eaca:	4437      	add	r7, r6
         address += size;
 800eacc:	4434      	add	r4, r6
 800eace:	b2a4      	uxth	r4, r4
      while(len > 0)
 800ead0:	2d00      	cmp	r5, #0
 800ead2:	d0e0      	beq.n	800ea96 <ESC_write+0x12>
         size = (len > 4) ? 4 : len;
 800ead4:	462e      	mov	r6, r5
 800ead6:	2d04      	cmp	r5, #4
 800ead8:	bf28      	it	cs
 800eada:	2604      	movcs	r6, #4
         if(address & BIT(0))
 800eadc:	f014 0f01 	tst.w	r4, #1
 800eae0:	d1eb      	bne.n	800eaba <ESC_write+0x36>
         else if (address & BIT(1))
 800eae2:	f014 0f02 	tst.w	r4, #2
 800eae6:	d0e4      	beq.n	800eab2 <ESC_write+0x2e>
            size = (size & BIT(0)) ? 1 : 2;
 800eae8:	f016 0f01 	tst.w	r6, #1
 800eaec:	d001      	beq.n	800eaf2 <ESC_write+0x6e>
 800eaee:	2601      	movs	r6, #1
 800eaf0:	e7e4      	b.n	800eabc <ESC_write+0x38>
 800eaf2:	2602      	movs	r6, #2
 800eaf4:	e7e2      	b.n	800eabc <ESC_write+0x38>
 800eaf6:	bf00      	nop
 800eaf8:	200083a0 	.word	0x200083a0

0800eafc <ESC_init>:
{

}

void ESC_init (const esc_cfg_t * config)
{
 800eafc:	b510      	push	{r4, lr}
   uint32_t counter = 0;
   uint32_t timeout = 1000; // wait 100msec

   // start initialization
   // Reset the ecat core here due to evb-lan9252-digio not having any GPIO for that purpose.
   lan9252_write_32(LAN9252_ESC_CMD_RESET_CTL, LAN9252_ESC_RESET_CTRL_RST);
 800eafe:	2141      	movs	r1, #65	; 0x41
 800eb00:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 800eb04:	f7fc fcae 	bl	800b464 <lan9252_write_32>
   uint32_t counter = 0;
 800eb08:	2400      	movs	r4, #0

   // Wait until reset command has been executed
   do
   {
      osDelay(100);
 800eb0a:	2064      	movs	r0, #100	; 0x64
 800eb0c:	f7f9 fcc3 	bl	8008496 <osDelay>
      counter++;
 800eb10:	3401      	adds	r4, #1
      value = lan9252_read_32(LAN9252_ESC_CMD_RESET_CTL);
 800eb12:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 800eb16:	f7fc fc71 	bl	800b3fc <lan9252_read_32>
   } while ((value & LAN9252_ESC_RESET_CTRL_RST) && (counter < timeout));
 800eb1a:	f010 0f41 	tst.w	r0, #65	; 0x41
 800eb1e:	d002      	beq.n	800eb26 <ESC_init+0x2a>
 800eb20:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800eb24:	d3f1      	bcc.n	800eb0a <ESC_init+0xe>

   // Perform byte test
   do
   {
      osDelay(100);
 800eb26:	2064      	movs	r0, #100	; 0x64
 800eb28:	f7f9 fcb5 	bl	8008496 <osDelay>
      counter++;
 800eb2c:	3401      	adds	r4, #1
      value = lan9252_read_32(LAN9252_ESC_CMD_BYTE_TEST);
 800eb2e:	2064      	movs	r0, #100	; 0x64
 800eb30:	f7fc fc64 	bl	800b3fc <lan9252_read_32>
   } while ((value != LAN9252_ESC_BYTE_TEST_OK) && (counter < timeout));
 800eb34:	4b0f      	ldr	r3, [pc, #60]	; (800eb74 <ESC_init+0x78>)
 800eb36:	4298      	cmp	r0, r3
 800eb38:	d002      	beq.n	800eb40 <ESC_init+0x44>
 800eb3a:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800eb3e:	d3f2      	bcc.n	800eb26 <ESC_init+0x2a>

   // Check hardware is ready
   do
   {
      osDelay(100);
 800eb40:	2064      	movs	r0, #100	; 0x64
 800eb42:	f7f9 fca8 	bl	8008496 <osDelay>
      counter++;
 800eb46:	3401      	adds	r4, #1
      value = lan9252_read_32(LAN9252_ESC_CMD_HW_CFG);
 800eb48:	2074      	movs	r0, #116	; 0x74
 800eb4a:	f7fc fc57 	bl	800b3fc <lan9252_read_32>
   } while (!(value & LAN9252_ESC_HW_CFG_READY) && (counter < timeout));
 800eb4e:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 800eb52:	d102      	bne.n	800eb5a <ESC_init+0x5e>
 800eb54:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800eb58:	d3f2      	bcc.n	800eb40 <ESC_init+0x44>

   // Check if timeout occured
   if (counter < timeout)
 800eb5a:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800eb5e:	d300      	bcc.n	800eb62 <ESC_init+0x66>
   }
   else
   {
      DPRINT("Timeout occurred during reset \n");
   }
}
 800eb60:	bd10      	pop	{r4, pc}
      value = lan9252_read_32(LAN9252_ESC_CMD_ID_REV);
 800eb62:	2050      	movs	r0, #80	; 0x50
 800eb64:	f7fc fc4a 	bl	800b3fc <lan9252_read_32>
      ESC_ALeventmaskwrite(value);
 800eb68:	f240 3011 	movw	r0, #785	; 0x311
 800eb6c:	f7fd f9dc 	bl	800bf28 <ESC_ALeventmaskwrite>
}
 800eb70:	e7f6      	b.n	800eb60 <ESC_init+0x64>
 800eb72:	bf00      	nop
 800eb74:	87654321 	.word	0x87654321

0800eb78 <SpiDma_Init>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

bool SpiDma_Init (tSpiDmaModule * const me)
{
 800eb78:	b570      	push	{r4, r5, r6, lr}
   bool ret = true;

   /* Create the spiDma event group. */
   spiDma_event = xEventGroupCreate();
 800eb7a:	f7f9 fcb4 	bl	80084e6 <xEventGroupCreate>
 800eb7e:	4b0a      	ldr	r3, [pc, #40]	; (800eba8 <SpiDma_Init+0x30>)
 800eb80:	6018      	str	r0, [r3, #0]
   
   /* Was the event group created successfully? */
   if (NULL == spiDma_event) {
 800eb82:	b178      	cbz	r0, 800eba4 <SpiDma_Init+0x2c>
   bool ret = true;
 800eb84:	2601      	movs	r6, #1
      ret = false;
   }

   /* Clear the buffer. */
   bzero (SPIDMA_Rx_Buffer, SPIDMA_RX_SIZE);
 800eb86:	4c09      	ldr	r4, [pc, #36]	; (800ebac <SpiDma_Init+0x34>)
 800eb88:	f44f 7580 	mov.w	r5, #256	; 0x100
 800eb8c:	462a      	mov	r2, r5
 800eb8e:	2100      	movs	r1, #0
 800eb90:	4620      	mov	r0, r4
 800eb92:	f003 f879 	bl	8011c88 <memset>
   bzero (SPIDMA_Tx_Buffer, SPIDMA_TX_SIZE);
 800eb96:	462a      	mov	r2, r5
 800eb98:	2100      	movs	r1, #0
 800eb9a:	1960      	adds	r0, r4, r5
 800eb9c:	f003 f874 	bl	8011c88 <memset>

   return ret;
}
 800eba0:	4630      	mov	r0, r6
 800eba2:	bd70      	pop	{r4, r5, r6, pc}
      ret = false;
 800eba4:	2600      	movs	r6, #0
 800eba6:	e7ee      	b.n	800eb86 <SpiDma_Init+0xe>
 800eba8:	200099b4 	.word	0x200099b4
 800ebac:	2000d2c0 	.word	0x2000d2c0

0800ebb0 <SpiDma_CsPinChangeState>:
{
   return ((me->states != SPIDMA_IDLE) ? true : false);
}

void SpiDma_CsPinChangeState (tSpiDmaModule * const me, bool state)
{
 800ebb0:	b508      	push	{r3, lr}
   GPIO_PinState pinSt = GPIO_PIN_RESET;

   pinSt = (true == state) ? (me->config.csActiveLevel) : 
 800ebb2:	b129      	cbz	r1, 800ebc0 <SpiDma_CsPinChangeState+0x10>
 800ebb4:	7802      	ldrb	r2, [r0, #0]
      ((GPIO_PIN_RESET == me->config.csActiveLevel) ? GPIO_PIN_SET : GPIO_PIN_RESET);
   
   HAL_GPIO_WritePin (me->config.csPort, me->config.csPin, pinSt);
 800ebb6:	8901      	ldrh	r1, [r0, #8]
 800ebb8:	6840      	ldr	r0, [r0, #4]
 800ebba:	f7f3 fcd5 	bl	8002568 <HAL_GPIO_WritePin>
}
 800ebbe:	bd08      	pop	{r3, pc}
      ((GPIO_PIN_RESET == me->config.csActiveLevel) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800ebc0:	7802      	ldrb	r2, [r0, #0]
 800ebc2:	fab2 f282 	clz	r2, r2
 800ebc6:	0952      	lsrs	r2, r2, #5
 800ebc8:	e7f5      	b.n	800ebb6 <SpiDma_CsPinChangeState+0x6>
	...

0800ebcc <SpiDma_write>:
{
   bool ret = true;
   EventBits_t bits = (EventBits_t)0U; 

   /* Verify the parameters input. */
   if (NULL == me)
 800ebcc:	b378      	cbz	r0, 800ec2e <SpiDma_write+0x62>
{
 800ebce:	b570      	push	{r4, r5, r6, lr}
 800ebd0:	b082      	sub	sp, #8
 800ebd2:	460c      	mov	r4, r1
 800ebd4:	4615      	mov	r5, r2
 800ebd6:	4606      	mov	r6, r0
   {
      /* Pointer to the module SpiDma is NULL. */
      ret = false;
   }
   else if (NULL == data_ptr)
 800ebd8:	b359      	cbz	r1, 800ec32 <SpiDma_write+0x66>
   {
      /* Pointer to data array is NULL. */
      ret = false;
   }
   else if (0 >= len)
 800ebda:	b912      	cbnz	r2, 800ebe2 <SpiDma_write+0x16>
   {
      /* The length of data input is equal 0. */
      ret = false;
 800ebdc:	2000      	movs	r0, #0
      }
   }

   /* Return state. */
   return ret;
}
 800ebde:	b002      	add	sp, #8
 800ebe0:	bd70      	pop	{r4, r5, r6, pc}
      taskENTER_CRITICAL();
 800ebe2:	f7fb f9d7 	bl	8009f94 <vPortEnterCritical>
      memcpy (me->ptrTxArr, data_ptr, len);
 800ebe6:	462a      	mov	r2, r5
 800ebe8:	4621      	mov	r1, r4
 800ebea:	69b0      	ldr	r0, [r6, #24]
 800ebec:	f003 f90a 	bl	8011e04 <memcpy>
      HAL_SPI_Transmit_DMA (me->spiModule, me->ptrTxArr, len);
 800ebf0:	462a      	mov	r2, r5
 800ebf2:	69b1      	ldr	r1, [r6, #24]
 800ebf4:	6970      	ldr	r0, [r6, #20]
 800ebf6:	f7f6 f88b 	bl	8004d10 <HAL_SPI_Transmit_DMA>
      me->states = SPIDMA_TX;
 800ebfa:	2401      	movs	r4, #1
 800ebfc:	7434      	strb	r4, [r6, #16]
      taskEXIT_CRITICAL();
 800ebfe:	f7fb f9eb 	bl	8009fd8 <vPortExitCritical>
      bits = xEventGroupWaitBits (spiDma_event, SPIDMA_TX_DONE, pdTRUE, pdFALSE, pdMS_TO_TICKS(me->timeOut));
 800ec02:	8c33      	ldrh	r3, [r6, #32]
 800ec04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec08:	fb02 f303 	mul.w	r3, r2, r3
 800ec0c:	4a0b      	ldr	r2, [pc, #44]	; (800ec3c <SpiDma_write+0x70>)
 800ec0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ec12:	099b      	lsrs	r3, r3, #6
 800ec14:	9300      	str	r3, [sp, #0]
 800ec16:	2300      	movs	r3, #0
 800ec18:	4622      	mov	r2, r4
 800ec1a:	4621      	mov	r1, r4
 800ec1c:	4808      	ldr	r0, [pc, #32]	; (800ec40 <SpiDma_write+0x74>)
 800ec1e:	6800      	ldr	r0, [r0, #0]
 800ec20:	f7f9 fc6e 	bl	8008500 <xEventGroupWaitBits>
      if (SPIDMA_TX_DONE != (bits & SPIDMA_TX_DONE))
 800ec24:	f010 0f01 	tst.w	r0, #1
 800ec28:	d005      	beq.n	800ec36 <SpiDma_write+0x6a>
   bool ret = true;
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	e7d7      	b.n	800ebde <SpiDma_write+0x12>
      ret = false;
 800ec2e:	2000      	movs	r0, #0
}
 800ec30:	4770      	bx	lr
      ret = false;
 800ec32:	2000      	movs	r0, #0
 800ec34:	e7d3      	b.n	800ebde <SpiDma_write+0x12>
         ret = false;
 800ec36:	2000      	movs	r0, #0
 800ec38:	e7d1      	b.n	800ebde <SpiDma_write+0x12>
 800ec3a:	bf00      	nop
 800ec3c:	10624dd3 	.word	0x10624dd3
 800ec40:	200099b4 	.word	0x200099b4

0800ec44 <SpiDma_read>:

bool SpiDma_read (tSpiDmaModule * const me, uint8_t * data_rx_ptr, uint8_t * data_tx_dummy, uint16_t len)
{
 800ec44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec46:	b083      	sub	sp, #12
   bool ret = true;
   EventBits_t bits = (EventBits_t)0U; 

   /* Verify the parameters input. */
   if (NULL == me)
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	d038      	beq.n	800ecbe <SpiDma_read+0x7a>
 800ec4c:	460e      	mov	r6, r1
 800ec4e:	4614      	mov	r4, r2
 800ec50:	461d      	mov	r5, r3
 800ec52:	4607      	mov	r7, r0
   {
      /* Pointer to the module SpiDma is NULL. */
      ret = false;
   }
   else if ((NULL == data_rx_ptr) || (NULL == data_tx_dummy))
 800ec54:	2900      	cmp	r1, #0
 800ec56:	d036      	beq.n	800ecc6 <SpiDma_read+0x82>
 800ec58:	2a00      	cmp	r2, #0
 800ec5a:	d036      	beq.n	800ecca <SpiDma_read+0x86>
   {
      /* Pointer to data array is NULL. */
      ret = false;
   }
   else if (0 >= len)
 800ec5c:	b90b      	cbnz	r3, 800ec62 <SpiDma_read+0x1e>
   {
      /* The length of data input is equal 0. */
      ret = false;
 800ec5e:	2400      	movs	r4, #0
 800ec60:	e02e      	b.n	800ecc0 <SpiDma_read+0x7c>
   
   /* If the params input are valid, send data to DMA to transfer dummy to read data from slave.*/
   if (ret)
   {
      /* Enter Critical section. */
      taskENTER_CRITICAL();
 800ec62:	f7fb f997 	bl	8009f94 <vPortEnterCritical>

      /* Copy the data to TX buffer. */
      memcpy (me->ptrTxArr, data_tx_dummy, len);
 800ec66:	462a      	mov	r2, r5
 800ec68:	4621      	mov	r1, r4
 800ec6a:	69b8      	ldr	r0, [r7, #24]
 800ec6c:	f003 f8ca 	bl	8011e04 <memcpy>

      /* Start transmit data via DMA. */
      HAL_SPI_TransmitReceive_DMA (me->spiModule, me->ptrTxArr, me->ptrRxArr, len);
 800ec70:	462b      	mov	r3, r5
 800ec72:	69fa      	ldr	r2, [r7, #28]
 800ec74:	69b9      	ldr	r1, [r7, #24]
 800ec76:	6978      	ldr	r0, [r7, #20]
 800ec78:	f7f6 f900 	bl	8004e7c <HAL_SPI_TransmitReceive_DMA>

      /* Change state into TX. */
      me->states = SPIDMA_RX;
 800ec7c:	2402      	movs	r4, #2
 800ec7e:	743c      	strb	r4, [r7, #16]

      /* Exit Critical section. */
      taskEXIT_CRITICAL();
 800ec80:	f7fb f9aa 	bl	8009fd8 <vPortExitCritical>

      /* Blocking the currently executing task until SPI transmit data is finished. */
      bits = xEventGroupWaitBits (spiDma_event, SPIDMA_RX_DONE, pdTRUE, pdFALSE, pdMS_TO_TICKS(me->timeOut));
 800ec84:	8c3b      	ldrh	r3, [r7, #32]
 800ec86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec8a:	fb02 f303 	mul.w	r3, r2, r3
 800ec8e:	4a10      	ldr	r2, [pc, #64]	; (800ecd0 <SpiDma_read+0x8c>)
 800ec90:	fba2 2303 	umull	r2, r3, r2, r3
 800ec94:	099b      	lsrs	r3, r3, #6
 800ec96:	9300      	str	r3, [sp, #0]
 800ec98:	2300      	movs	r3, #0
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	4621      	mov	r1, r4
 800ec9e:	480d      	ldr	r0, [pc, #52]	; (800ecd4 <SpiDma_read+0x90>)
 800eca0:	6800      	ldr	r0, [r0, #0]
 800eca2:	f7f9 fc2d 	bl	8008500 <xEventGroupWaitBits>

      /* Update new state. */
      if (SPIDMA_RX_DONE != (bits & SPIDMA_RX_DONE))
 800eca6:	f010 0f02 	tst.w	r0, #2
 800ecaa:	d006      	beq.n	800ecba <SpiDma_read+0x76>
   bool ret = true;
 800ecac:	2401      	movs	r4, #1
      {
         ret = false;
      }

      /* Copy data to data array return. */
      memcpy (data_rx_ptr, me->ptrRxArr, len);
 800ecae:	462a      	mov	r2, r5
 800ecb0:	69f9      	ldr	r1, [r7, #28]
 800ecb2:	4630      	mov	r0, r6
 800ecb4:	f003 f8a6 	bl	8011e04 <memcpy>
 800ecb8:	e002      	b.n	800ecc0 <SpiDma_read+0x7c>
         ret = false;
 800ecba:	2400      	movs	r4, #0
 800ecbc:	e7f7      	b.n	800ecae <SpiDma_read+0x6a>
      ret = false;
 800ecbe:	2400      	movs	r4, #0
   }

   /* Return state. */
   return ret;
}
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	b003      	add	sp, #12
 800ecc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = false;
 800ecc6:	2400      	movs	r4, #0
 800ecc8:	e7fa      	b.n	800ecc0 <SpiDma_read+0x7c>
 800ecca:	2400      	movs	r4, #0
 800eccc:	e7f8      	b.n	800ecc0 <SpiDma_read+0x7c>
 800ecce:	bf00      	nop
 800ecd0:	10624dd3 	.word	0x10624dd3
 800ecd4:	200099b4 	.word	0x200099b4

0800ecd8 <SpiDma_WriteCompleteIrq>:


void SpiDma_WriteCompleteIrq (tSpiDmaModule * const me)
{
 800ecd8:	b500      	push	{lr}
 800ecda:	b083      	sub	sp, #12
   /* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	9301      	str	r3, [sp, #4]

   /* Write data complete, change the state of this module to TxEnd. */
   me->states = SPIDMA_IDLE;
 800ece0:	7403      	strb	r3, [r0, #16]

   /* Set bit to inform the TX is finish. */
   xEventGroupSetBitsFromISR (spiDma_event, SPIDMA_TX_DONE, &xHigherPriorityTaskWoken);
 800ece2:	aa01      	add	r2, sp, #4
 800ece4:	2101      	movs	r1, #1
 800ece6:	4b03      	ldr	r3, [pc, #12]	; (800ecf4 <SpiDma_WriteCompleteIrq+0x1c>)
 800ece8:	6818      	ldr	r0, [r3, #0]
 800ecea:	f7f9 fcd7 	bl	800869c <xEventGroupSetBitsFromISR>
}  
 800ecee:	b003      	add	sp, #12
 800ecf0:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecf4:	200099b4 	.word	0x200099b4

0800ecf8 <SpiDma_ReadCompleteIrq>:

void SpiDma_ReadCompleteIrq (tSpiDmaModule * const me)
{
 800ecf8:	b500      	push	{lr}
 800ecfa:	b083      	sub	sp, #12
   /* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	9301      	str	r3, [sp, #4]

   /* Read data complete, change the state of this module to RxEnd. */
   me->states = SPIDMA_IDLE;
 800ed00:	7403      	strb	r3, [r0, #16]

   /* Set bit to inform the RX is finish. */
   xEventGroupSetBitsFromISR (spiDma_event, SPIDMA_RX_DONE, &xHigherPriorityTaskWoken);
 800ed02:	aa01      	add	r2, sp, #4
 800ed04:	2102      	movs	r1, #2
 800ed06:	4b03      	ldr	r3, [pc, #12]	; (800ed14 <SpiDma_ReadCompleteIrq+0x1c>)
 800ed08:	6818      	ldr	r0, [r3, #0]
 800ed0a:	f7f9 fcc7 	bl	800869c <xEventGroupSetBitsFromISR>
}
 800ed0e:	b003      	add	sp, #12
 800ed10:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed14:	200099b4 	.word	0x200099b4

0800ed18 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ed18:	b508      	push	{r3, lr}
   SpiDma_WriteCompleteIrq (&spiDmaModule);
 800ed1a:	4802      	ldr	r0, [pc, #8]	; (800ed24 <HAL_SPI_TxCpltCallback+0xc>)
 800ed1c:	f7ff ffdc 	bl	800ecd8 <SpiDma_WriteCompleteIrq>
}
 800ed20:	bd08      	pop	{r3, pc}
 800ed22:	bf00      	nop
 800ed24:	20000120 	.word	0x20000120

0800ed28 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ed28:	b508      	push	{r3, lr}
   SpiDma_ReadCompleteIrq (&spiDmaModule);
 800ed2a:	4802      	ldr	r0, [pc, #8]	; (800ed34 <HAL_SPI_TxRxCpltCallback+0xc>)
 800ed2c:	f7ff ffe4 	bl	800ecf8 <SpiDma_ReadCompleteIrq>
}
 800ed30:	bd08      	pop	{r3, pc}
 800ed32:	bf00      	nop
 800ed34:	20000120 	.word	0x20000120

0800ed38 <uartDma_init>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

void  uartDma_init (void)
{
 800ed38:	b508      	push	{r3, lr}
   /* Initialize ringbuffer. */
   lwrb_init((volatile lwrb_t *)&uartDmaModule.tx_buff, uartDmaModule.p_tx_buff_data, UARTDMA_TX_SIZE);
 800ed3a:	4804      	ldr	r0, [pc, #16]	; (800ed4c <uartDma_init+0x14>)
 800ed3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ed40:	6a01      	ldr	r1, [r0, #32]
 800ed42:	3004      	adds	r0, #4
 800ed44:	f7fc fba8 	bl	800b498 <lwrb_init>
}
 800ed48:	bd08      	pop	{r3, pc}
 800ed4a:	bf00      	nop
 800ed4c:	20000144 	.word	0x20000144

0800ed50 <uartDma_start_tx_dma_transfer>:

#endif 
}

uint8_t  uartDma_start_tx_dma_transfer(void)
{
 800ed50:	b538      	push	{r3, r4, r5, lr}
   uint8_t started = 0;
   if (uartDmaModule.tx_dma_current_len == 0)
 800ed52:	4b11      	ldr	r3, [pc, #68]	; (800ed98 <uartDma_start_tx_dma_transfer+0x48>)
 800ed54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed56:	b10b      	cbz	r3, 800ed5c <uartDma_start_tx_dma_transfer+0xc>
   uint8_t started = 0;
 800ed58:	2000      	movs	r0, #0
                               uartDmaModule.tx_dma_current_len);
      }
   }

   return started;
}
 800ed5a:	bd38      	pop	{r3, r4, r5, pc}
      uartDmaModule.tx_dma_current_len = lwrb_get_linear_block_read_length(&uartDmaModule.tx_buff);
 800ed5c:	4c0e      	ldr	r4, [pc, #56]	; (800ed98 <uartDma_start_tx_dma_transfer+0x48>)
 800ed5e:	1d20      	adds	r0, r4, #4
 800ed60:	f7fc fbfe 	bl	800b560 <lwrb_get_linear_block_read_length>
 800ed64:	6260      	str	r0, [r4, #36]	; 0x24
      if (uartDmaModule.tx_dma_current_len > 0)
 800ed66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed68:	b19b      	cbz	r3, 800ed92 <uartDma_start_tx_dma_transfer+0x42>
            (uartDmaModule.tx_dma_current_len > 32) ? 32 : uartDmaModule.tx_dma_current_len;
 800ed6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed6c:	2b20      	cmp	r3, #32
 800ed6e:	d80e      	bhi.n	800ed8e <uartDma_start_tx_dma_transfer+0x3e>
 800ed70:	6a63      	ldr	r3, [r4, #36]	; 0x24
         uartDmaModule.tx_dma_current_len = 
 800ed72:	4c09      	ldr	r4, [pc, #36]	; (800ed98 <uartDma_start_tx_dma_transfer+0x48>)
 800ed74:	6263      	str	r3, [r4, #36]	; 0x24
         started = HAL_UART_Transmit_DMA((UART_HandleTypeDef *)uartDmaModule.huart,
 800ed76:	4620      	mov	r0, r4
 800ed78:	f850 5b04 	ldr.w	r5, [r0], #4
                               (uint8_t *) lwrb_get_linear_block_read_address(&uartDmaModule.tx_buff),
 800ed7c:	f7fc fbd2 	bl	800b524 <lwrb_get_linear_block_read_address>
 800ed80:	4601      	mov	r1, r0
                               uartDmaModule.tx_dma_current_len);
 800ed82:	6a62      	ldr	r2, [r4, #36]	; 0x24
         started = HAL_UART_Transmit_DMA((UART_HandleTypeDef *)uartDmaModule.huart,
 800ed84:	b292      	uxth	r2, r2
 800ed86:	4628      	mov	r0, r5
 800ed88:	f7f6 fd4e 	bl	8005828 <HAL_UART_Transmit_DMA>
 800ed8c:	e7e5      	b.n	800ed5a <uartDma_start_tx_dma_transfer+0xa>
            (uartDmaModule.tx_dma_current_len > 32) ? 32 : uartDmaModule.tx_dma_current_len;
 800ed8e:	2320      	movs	r3, #32
 800ed90:	e7ef      	b.n	800ed72 <uartDma_start_tx_dma_transfer+0x22>
   uint8_t started = 0;
 800ed92:	2000      	movs	r0, #0
 800ed94:	e7e1      	b.n	800ed5a <uartDma_start_tx_dma_transfer+0xa>
 800ed96:	bf00      	nop
 800ed98:	20000144 	.word	0x20000144

0800ed9c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ed9c:	b510      	push	{r4, lr}
   lwrb_skip(&uartDmaModule.tx_buff, uartDmaModule.tx_dma_current_len);
 800ed9e:	4c05      	ldr	r4, [pc, #20]	; (800edb4 <HAL_UART_TxCpltCallback+0x18>)
 800eda0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eda2:	1d20      	adds	r0, r4, #4
 800eda4:	f7fc fc04 	bl	800b5b0 <lwrb_skip>
   uartDmaModule.tx_dma_current_len = 0;
 800eda8:	2300      	movs	r3, #0
 800edaa:	6263      	str	r3, [r4, #36]	; 0x24

   /* Send next data remaining in tx buffer. */
   uartDma_start_tx_dma_transfer();
 800edac:	f7ff ffd0 	bl	800ed50 <uartDma_start_tx_dma_transfer>
}
 800edb0:	bd10      	pop	{r4, pc}
 800edb2:	bf00      	nop
 800edb4:	20000144 	.word	0x20000144

0800edb8 <canIdle_Begin>:
   }
}

static void canIdle_Begin(tCanIdle_Data *const app)
{
   if (app->workState == CANIDLE_STOP)
 800edb8:	7f03      	ldrb	r3, [r0, #28]
 800edba:	b90b      	cbnz	r3, 800edc0 <canIdle_Begin+0x8>
   {
	  //cdc_printf("[Command]@%u:\t inputs: %d %d\r\n",GetCycleCount(),app->cmd.frId, app->cmd.motorId)
      app->workState = CANIDLE_RUN;
 800edbc:	2301      	movs	r3, #1
 800edbe:	7703      	strb	r3, [r0, #28]
   }
}
 800edc0:	4770      	bx	lr

0800edc2 <canIdle_End>:

static void canIdle_End (tCanIdle_Data *const app)
{
   if (app->workState == CANIDLE_RUN)
 800edc2:	7f03      	ldrb	r3, [r0, #28]
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d000      	beq.n	800edca <canIdle_End+0x8>
   {
      app->workState = CANIDLE_STOP;
   }
}
 800edc8:	4770      	bx	lr
      app->workState = CANIDLE_STOP;
 800edca:	2300      	movs	r3, #0
 800edcc:	7703      	strb	r3, [r0, #28]
}
 800edce:	e7fb      	b.n	800edc8 <canIdle_End+0x6>

0800edd0 <canIdle_EventHandle>:
static tCanIdle_States canIdle_EventHandle(tCanIdle_Data *const app)
{
   tCanIdle_States nextState = CANIDLE_IDLE;

   /** Determine if there has new command. */
   if (true == app->isNewCommand)
 800edd0:	7f43      	ldrb	r3, [r0, #29]
 800edd2:	b11b      	cbz	r3, 800eddc <canIdle_EventHandle+0xc>
   {
      /* Update next state to Command. */
      nextState = CANIDLE_COMMAND_ENTER;

      /* Clear the flag.*/
      app->isNewCommand = false;
 800edd4:	2300      	movs	r3, #0
 800edd6:	7743      	strb	r3, [r0, #29]
      nextState = CANIDLE_COMMAND_ENTER;
 800edd8:	2001      	movs	r0, #1
 800edda:	4770      	bx	lr
   tCanIdle_States nextState = CANIDLE_IDLE;
 800eddc:	2000      	movs	r0, #0
   {
      /* Keep is in Control state. */
   }

   return (nextState);
}
 800edde:	4770      	bx	lr

0800ede0 <canIdle_Command_Enter>:

static tCanIdle_States canIdle_Command_Enter(tCanIdle_Data *const app)
{
 800ede0:	b508      	push	{r3, lr}
   tCanIdle_States nextState = CANIDLE_COMMAND_ENTER;

   /* Copy data to local. */
   app->cmd.frId = app->hostReq.frId;
 800ede2:	7843      	ldrb	r3, [r0, #1]
 800ede4:	77c3      	strb	r3, [r0, #31]
   app->cmd.motorId = app->hostReq.motorId;
 800ede6:	7803      	ldrb	r3, [r0, #0]
 800ede8:	7783      	strb	r3, [r0, #30]
   app->cmd.size = app->hostReq.size;
 800edea:	7882      	ldrb	r2, [r0, #2]
 800edec:	f880 2020 	strb.w	r2, [r0, #32]

   memcpy((uint8_t *)app->cmd.data, (uint8_t *)app->hostReq.data, app->cmd.size);
 800edf0:	1cc1      	adds	r1, r0, #3
 800edf2:	3021      	adds	r0, #33	; 0x21
 800edf4:	f003 f806 	bl	8011e04 <memcpy>
   /* Go to next state. */
   nextState = CANIDLE_COMMAND;

   /* Update next state. */
   return nextState;
}
 800edf8:	2002      	movs	r0, #2
 800edfa:	bd08      	pop	{r3, pc}

0800edfc <canIdle_ConfigBaudrate>:

static void canIdle_ConfigBaudrate (tCanIdle_Data * const app)
{
 800edfc:	b510      	push	{r4, lr}
 800edfe:	4604      	mov	r4, r0
   uint8_t md80Id = 0u;

   /* Get baudrate. */
   newBaudrate = app->cmd.data[0];

   app->rsp.frId = app->cmd.frId;
 800ee00:	7fc3      	ldrb	r3, [r0, #31]
 800ee02:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   
   /* Configure new baudrate. */
   if (true == canM_SetNewBaudrate(newBaudrate))
 800ee06:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 800ee0a:	f001 f8e5 	bl	800ffd8 <canM_SetNewBaudrate>
 800ee0e:	b118      	cbz	r0, 800ee18 <canIdle_ConfigBaudrate+0x1c>
   {
      app->rsp.data[0] = true;
 800ee10:	2301      	movs	r3, #1
 800ee12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   }
   else 
   {
      app->rsp.data[0] = false;
   }
}
 800ee16:	bd10      	pop	{r4, pc}
      app->rsp.data[0] = false;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ee1e:	e7fa      	b.n	800ee16 <canIdle_ConfigBaudrate+0x1a>

0800ee20 <canIdle_UpdateDataControl>:
{
 800ee20:	b570      	push	{r4, r5, r6, lr}
   for (md80idx = 0u; md80idx < canIdle_Module.numMd80Det; md80idx ++)
 800ee22:	2400      	movs	r4, #0
 800ee24:	e074      	b.n	800ef10 <canIdle_UpdateDataControl+0xf0>
      cdc_printf("@%u\t[Motor packet]:\tid:%d\tpos:%d\r\n", GetCycleCount(),md80idx,pEcatObj->md80_0_DataControl.Position  );
 800ee26:	f7f1 febd 	bl	8000ba4 <GetCycleCount>
 800ee2a:	4601      	mov	r1, r0
 800ee2c:	4eb6      	ldr	r6, [pc, #728]	; (800f108 <canIdle_UpdateDataControl+0x2e8>)
 800ee2e:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
 800ee32:	4622      	mov	r2, r4
 800ee34:	48b5      	ldr	r0, [pc, #724]	; (800f10c <canIdle_UpdateDataControl+0x2ec>)
 800ee36:	f7f1 fe65 	bl	8000b04 <cdc_printf>
      old_position = pEcatObj->md80_0_DataControl.Position;
 800ee3a:	f8b6 20c4 	ldrh.w	r2, [r6, #196]	; 0xc4
 800ee3e:	4bb4      	ldr	r3, [pc, #720]	; (800f110 <canIdle_UpdateDataControl+0x2f0>)
 800ee40:	801a      	strh	r2, [r3, #0]
 800ee42:	e07d      	b.n	800ef40 <canIdle_UpdateDataControl+0x120>
            taskENTER_CRITICAL();
 800ee44:	f7fb f8a6 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_0_DataControl.Velocity);
 800ee48:	4eaf      	ldr	r6, [pc, #700]	; (800f108 <canIdle_UpdateDataControl+0x2e8>)
 800ee4a:	f8b6 30c6 	ldrh.w	r3, [r6, #198]	; 0xc6
 800ee4e:	ee07 3a10 	vmov	s14, r3
 800ee52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ee56:	eddf 7aaf 	vldr	s15, [pc, #700]	; 800f114 <canIdle_UpdateDataControl+0x2f4>
 800ee5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ee5e:	49ae      	ldr	r1, [pc, #696]	; (800f118 <canIdle_UpdateDataControl+0x2f8>)
 800ee60:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800ee64:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800ee68:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_0_DataControl.Position);
 800ee6c:	f8b6 20c4 	ldrh.w	r2, [r6, #196]	; 0xc4
 800ee70:	ee07 2a10 	vmov	s14, r2
 800ee74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ee78:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ee7c:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_0_DataControl.Torque);
 800ee80:	f8b6 20c8 	ldrh.w	r2, [r6, #200]	; 0xc8
 800ee84:	ee07 2a10 	vmov	s14, r2
 800ee88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ee8c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ee90:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_0_DataReturn.enabled = true;
 800ee94:	2201      	movs	r2, #1
 800ee96:	f886 202e 	strb.w	r2, [r6, #46]	; 0x2e
            pEcatObj->md80_0_DataReturn.Mode = pMd80dev->local.mode;
 800ee9a:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800ee9e:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
            pEcatObj->md80_0_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800eea2:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800eea6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eeaa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800eeae:	ee17 2a10 	vmov	r2, s14
 800eeb2:	84f2      	strh	r2, [r6, #38]	; 0x26
            pEcatObj->md80_0_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800eeb4:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800eeb8:	ee07 2a10 	vmov	s14, r2
 800eebc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eec0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eec4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800eec8:	ee17 2a10 	vmov	r2, s14
 800eecc:	f886 202c 	strb.w	r2, [r6, #44]	; 0x2c
            pEcatObj->md80_0_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800eed0:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800eed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eed8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800eedc:	ee17 3a10 	vmov	r3, s14
 800eee0:	8573      	strh	r3, [r6, #42]	; 0x2a
            pEcatObj->md80_0_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800eee2:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800eee6:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800eeea:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800eeee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eef6:	ee17 3a90 	vmov	r3, s15
 800eefa:	8533      	strh	r3, [r6, #40]	; 0x28
            pEcatObj->md80_0_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800eefc:	f7fa f9f2 	bl	80092e4 <xTaskGetTickCount>
 800ef00:	6370      	str	r0, [r6, #52]	; 0x34
            pEcatObj->md80_0_DataReturn.counter++;
 800ef02:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800ef04:	3301      	adds	r3, #1
 800ef06:	6333      	str	r3, [r6, #48]	; 0x30
            taskEXIT_CRITICAL();
 800ef08:	f7fb f866 	bl	8009fd8 <vPortExitCritical>
   for (md80idx = 0u; md80idx < canIdle_Module.numMd80Det; md80idx ++)
 800ef0c:	3401      	adds	r4, #1
 800ef0e:	b2e4      	uxtb	r4, r4
 800ef10:	4b82      	ldr	r3, [pc, #520]	; (800f11c <canIdle_UpdateDataControl+0x2fc>)
 800ef12:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ef16:	42a3      	cmp	r3, r4
 800ef18:	f240 831d 	bls.w	800f556 <canIdle_UpdateDataControl+0x736>
      pMd80dev = (tMd80_Device *)&md80Dev[md80idx];
 800ef1c:	4625      	mov	r5, r4
      if (true == pMd80dev->local.isEnabled)
 800ef1e:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
 800ef22:	4b7d      	ldr	r3, [pc, #500]	; (800f118 <canIdle_UpdateDataControl+0x2f8>)
 800ef24:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800ef28:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d0ed      	beq.n	800ef0c <canIdle_UpdateDataControl+0xec>
    	  if(old_position != pEcatObj->md80_0_DataControl.Position ){
 800ef30:	4b75      	ldr	r3, [pc, #468]	; (800f108 <canIdle_UpdateDataControl+0x2e8>)
 800ef32:	f8b3 20c4 	ldrh.w	r2, [r3, #196]	; 0xc4
 800ef36:	4b76      	ldr	r3, [pc, #472]	; (800f110 <canIdle_UpdateDataControl+0x2f0>)
 800ef38:	881b      	ldrh	r3, [r3, #0]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	f47f af73 	bne.w	800ee26 <canIdle_UpdateDataControl+0x6>
         switch (md80idx)
 800ef40:	2c07      	cmp	r4, #7
 800ef42:	d8e3      	bhi.n	800ef0c <canIdle_UpdateDataControl+0xec>
 800ef44:	a301      	add	r3, pc, #4	; (adr r3, 800ef4c <canIdle_UpdateDataControl+0x12c>)
 800ef46:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800ef4a:	bf00      	nop
 800ef4c:	0800ee45 	.word	0x0800ee45
 800ef50:	0800ef6d 	.word	0x0800ef6d
 800ef54:	0800f037 	.word	0x0800f037
 800ef58:	0800f121 	.word	0x0800f121
 800ef5c:	0800f1f1 	.word	0x0800f1f1
 800ef60:	0800f2c7 	.word	0x0800f2c7
 800ef64:	0800f39d 	.word	0x0800f39d
 800ef68:	0800f481 	.word	0x0800f481
            taskENTER_CRITICAL();
 800ef6c:	f7fb f812 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_1_DataControl.Velocity);
 800ef70:	4e65      	ldr	r6, [pc, #404]	; (800f108 <canIdle_UpdateDataControl+0x2e8>)
 800ef72:	f8b6 30d2 	ldrh.w	r3, [r6, #210]	; 0xd2
 800ef76:	ee07 3a10 	vmov	s14, r3
 800ef7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ef7e:	eddf 7a65 	vldr	s15, [pc, #404]	; 800f114 <canIdle_UpdateDataControl+0x2f4>
 800ef82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ef86:	4964      	ldr	r1, [pc, #400]	; (800f118 <canIdle_UpdateDataControl+0x2f8>)
 800ef88:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800ef8c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800ef90:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_1_DataControl.Position);
 800ef94:	f8b6 20d0 	ldrh.w	r2, [r6, #208]	; 0xd0
 800ef98:	ee07 2a10 	vmov	s14, r2
 800ef9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800efa0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800efa4:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_1_DataControl.Torque);
 800efa8:	f8b6 20d4 	ldrh.w	r2, [r6, #212]	; 0xd4
 800efac:	ee07 2a10 	vmov	s14, r2
 800efb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800efb4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800efb8:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_1_DataReturn.enabled = true;
 800efbc:	2201      	movs	r2, #1
 800efbe:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
            pEcatObj->md80_1_DataReturn.Mode = pMd80dev->local.mode;
 800efc2:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800efc6:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
            pEcatObj->md80_1_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800efca:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800efce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800efd2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800efd6:	ee17 2a10 	vmov	r2, s14
 800efda:	8772      	strh	r2, [r6, #58]	; 0x3a
            pEcatObj->md80_1_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800efdc:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800efe0:	ee07 2a10 	vmov	s14, r2
 800efe4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800efe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800efec:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800eff0:	ee17 2a10 	vmov	r2, s14
 800eff4:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
            pEcatObj->md80_1_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800eff8:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800effc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f000:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f004:	ee17 3a10 	vmov	r3, s14
 800f008:	87f3      	strh	r3, [r6, #62]	; 0x3e
            pEcatObj->md80_1_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f00a:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f00e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f012:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f01a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f01e:	ee17 3a90 	vmov	r3, s15
 800f022:	87b3      	strh	r3, [r6, #60]	; 0x3c
            pEcatObj->md80_1_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f024:	f7fa f95e 	bl	80092e4 <xTaskGetTickCount>
 800f028:	64b0      	str	r0, [r6, #72]	; 0x48
            pEcatObj->md80_1_DataReturn.counter++;
 800f02a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f02c:	3301      	adds	r3, #1
 800f02e:	6473      	str	r3, [r6, #68]	; 0x44
            taskEXIT_CRITICAL();
 800f030:	f7fa ffd2 	bl	8009fd8 <vPortExitCritical>
            break;
 800f034:	e76a      	b.n	800ef0c <canIdle_UpdateDataControl+0xec>
            taskENTER_CRITICAL();
 800f036:	f7fa ffad 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_2_DataControl.Velocity);
 800f03a:	4e33      	ldr	r6, [pc, #204]	; (800f108 <canIdle_UpdateDataControl+0x2e8>)
 800f03c:	f8b6 30de 	ldrh.w	r3, [r6, #222]	; 0xde
 800f040:	ee07 3a10 	vmov	s14, r3
 800f044:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f048:	eddf 7a32 	vldr	s15, [pc, #200]	; 800f114 <canIdle_UpdateDataControl+0x2f4>
 800f04c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f050:	4931      	ldr	r1, [pc, #196]	; (800f118 <canIdle_UpdateDataControl+0x2f8>)
 800f052:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f056:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f05a:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_2_DataControl.Position);
 800f05e:	f8b6 20dc 	ldrh.w	r2, [r6, #220]	; 0xdc
 800f062:	ee07 2a10 	vmov	s14, r2
 800f066:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f06a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f06e:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_2_DataControl.Torque);
 800f072:	f8b6 20e0 	ldrh.w	r2, [r6, #224]	; 0xe0
 800f076:	ee07 2a10 	vmov	s14, r2
 800f07a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f07e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f082:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_2_DataReturn.enabled = true;
 800f086:	2201      	movs	r2, #1
 800f088:	f886 2056 	strb.w	r2, [r6, #86]	; 0x56
            pEcatObj->md80_2_DataReturn.Mode = pMd80dev->local.mode;
 800f08c:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f090:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
            pEcatObj->md80_2_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f094:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f09c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f0a0:	ee17 2a10 	vmov	r2, s14
 800f0a4:	f8a6 204e 	strh.w	r2, [r6, #78]	; 0x4e
            pEcatObj->md80_2_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f0a8:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f0ac:	ee07 2a10 	vmov	s14, r2
 800f0b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f0b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0b8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f0bc:	ee17 2a10 	vmov	r2, s14
 800f0c0:	f886 2054 	strb.w	r2, [r6, #84]	; 0x54
            pEcatObj->md80_2_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f0c4:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f0c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0cc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f0d0:	ee17 3a10 	vmov	r3, s14
 800f0d4:	f8a6 3052 	strh.w	r3, [r6, #82]	; 0x52
            pEcatObj->md80_2_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f0d8:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f0dc:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f0e0:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0ec:	ee17 3a90 	vmov	r3, s15
 800f0f0:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
            pEcatObj->md80_2_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f0f4:	f7fa f8f6 	bl	80092e4 <xTaskGetTickCount>
 800f0f8:	65f0      	str	r0, [r6, #92]	; 0x5c
            pEcatObj->md80_2_DataReturn.counter++;
 800f0fa:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	65b3      	str	r3, [r6, #88]	; 0x58
            taskEXIT_CRITICAL();
 800f100:	f7fa ff6a 	bl	8009fd8 <vPortExitCritical>
            break;
 800f104:	e702      	b.n	800ef0c <canIdle_UpdateDataControl+0xec>
 800f106:	bf00      	nop
 800f108:	2000d4c0 	.word	0x2000d4c0
 800f10c:	080136bc 	.word	0x080136bc
 800f110:	200099b8 	.word	0x200099b8
 800f114:	42c80000 	.word	0x42c80000
 800f118:	2000733c 	.word	0x2000733c
 800f11c:	200099bc 	.word	0x200099bc
            taskENTER_CRITICAL();
 800f120:	f7fa ff38 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_3_DataControl.Velocity);
 800f124:	4ed3      	ldr	r6, [pc, #844]	; (800f474 <canIdle_UpdateDataControl+0x654>)
 800f126:	f8b6 30ea 	ldrh.w	r3, [r6, #234]	; 0xea
 800f12a:	ee07 3a10 	vmov	s14, r3
 800f12e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f132:	eddf 7ad1 	vldr	s15, [pc, #836]	; 800f478 <canIdle_UpdateDataControl+0x658>
 800f136:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f13a:	49d0      	ldr	r1, [pc, #832]	; (800f47c <canIdle_UpdateDataControl+0x65c>)
 800f13c:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f140:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f144:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_3_DataControl.Position);
 800f148:	f8b6 20e8 	ldrh.w	r2, [r6, #232]	; 0xe8
 800f14c:	ee07 2a10 	vmov	s14, r2
 800f150:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f154:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f158:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_3_DataControl.Torque);
 800f15c:	f8b6 20ec 	ldrh.w	r2, [r6, #236]	; 0xec
 800f160:	ee07 2a10 	vmov	s14, r2
 800f164:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f168:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f16c:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_3_DataReturn.enabled = true;
 800f170:	2201      	movs	r2, #1
 800f172:	f886 206a 	strb.w	r2, [r6, #106]	; 0x6a
            pEcatObj->md80_3_DataReturn.Mode = pMd80dev->local.mode;
 800f176:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f17a:	f886 2060 	strb.w	r2, [r6, #96]	; 0x60
            pEcatObj->md80_3_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f17e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f182:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f186:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f18a:	ee17 2a10 	vmov	r2, s14
 800f18e:	f8a6 2062 	strh.w	r2, [r6, #98]	; 0x62
            pEcatObj->md80_3_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f192:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f196:	ee07 2a10 	vmov	s14, r2
 800f19a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f19e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f1a2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f1a6:	ee17 2a10 	vmov	r2, s14
 800f1aa:	f886 2068 	strb.w	r2, [r6, #104]	; 0x68
            pEcatObj->md80_3_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f1ae:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f1b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f1b6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f1ba:	ee17 3a10 	vmov	r3, s14
 800f1be:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
            pEcatObj->md80_3_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f1c2:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f1c6:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f1ca:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f1d6:	ee17 3a90 	vmov	r3, s15
 800f1da:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            pEcatObj->md80_3_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f1de:	f7fa f881 	bl	80092e4 <xTaskGetTickCount>
 800f1e2:	6730      	str	r0, [r6, #112]	; 0x70
            pEcatObj->md80_3_DataReturn.counter++;
 800f1e4:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	66f3      	str	r3, [r6, #108]	; 0x6c
            taskEXIT_CRITICAL();
 800f1ea:	f7fa fef5 	bl	8009fd8 <vPortExitCritical>
            break;
 800f1ee:	e68d      	b.n	800ef0c <canIdle_UpdateDataControl+0xec>
            taskENTER_CRITICAL();
 800f1f0:	f7fa fed0 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_4_DataControl.Velocity);
 800f1f4:	4e9f      	ldr	r6, [pc, #636]	; (800f474 <canIdle_UpdateDataControl+0x654>)
 800f1f6:	f8b6 30f6 	ldrh.w	r3, [r6, #246]	; 0xf6
 800f1fa:	ee07 3a10 	vmov	s14, r3
 800f1fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f202:	eddf 7a9d 	vldr	s15, [pc, #628]	; 800f478 <canIdle_UpdateDataControl+0x658>
 800f206:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f20a:	499c      	ldr	r1, [pc, #624]	; (800f47c <canIdle_UpdateDataControl+0x65c>)
 800f20c:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f210:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f214:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_4_DataControl.Position);
 800f218:	f8b6 20f4 	ldrh.w	r2, [r6, #244]	; 0xf4
 800f21c:	ee07 2a10 	vmov	s14, r2
 800f220:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f224:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f228:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_4_DataControl.Torque);
 800f22c:	f8b6 20f8 	ldrh.w	r2, [r6, #248]	; 0xf8
 800f230:	ee07 2a10 	vmov	s14, r2
 800f234:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f238:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f23c:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_4_DataReturn.enabled = true;
 800f240:	2201      	movs	r2, #1
 800f242:	f886 207e 	strb.w	r2, [r6, #126]	; 0x7e
            pEcatObj->md80_4_DataReturn.Mode = pMd80dev->local.mode;
 800f246:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f24a:	f886 2074 	strb.w	r2, [r6, #116]	; 0x74
            pEcatObj->md80_4_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f24e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f252:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f256:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f25a:	ee17 2a10 	vmov	r2, s14
 800f25e:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
            pEcatObj->md80_4_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f262:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f266:	ee07 2a10 	vmov	s14, r2
 800f26a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f26e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f272:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f276:	ee17 2a10 	vmov	r2, s14
 800f27a:	f886 207c 	strb.w	r2, [r6, #124]	; 0x7c
            pEcatObj->md80_4_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f27e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f282:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f286:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f28a:	ee17 3a10 	vmov	r3, s14
 800f28e:	f8a6 307a 	strh.w	r3, [r6, #122]	; 0x7a
            pEcatObj->md80_4_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f292:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f296:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f29a:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2a6:	ee17 3a90 	vmov	r3, s15
 800f2aa:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
            pEcatObj->md80_4_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f2ae:	f7fa f819 	bl	80092e4 <xTaskGetTickCount>
 800f2b2:	f8c6 0084 	str.w	r0, [r6, #132]	; 0x84
            pEcatObj->md80_4_DataReturn.counter++;
 800f2b6:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
            taskEXIT_CRITICAL();
 800f2c0:	f7fa fe8a 	bl	8009fd8 <vPortExitCritical>
            break;
 800f2c4:	e622      	b.n	800ef0c <canIdle_UpdateDataControl+0xec>
            taskENTER_CRITICAL();
 800f2c6:	f7fa fe65 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_5_DataControl.Velocity);
 800f2ca:	4e6a      	ldr	r6, [pc, #424]	; (800f474 <canIdle_UpdateDataControl+0x654>)
 800f2cc:	f8b6 3102 	ldrh.w	r3, [r6, #258]	; 0x102
 800f2d0:	ee07 3a10 	vmov	s14, r3
 800f2d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f2d8:	eddf 7a67 	vldr	s15, [pc, #412]	; 800f478 <canIdle_UpdateDataControl+0x658>
 800f2dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f2e0:	4966      	ldr	r1, [pc, #408]	; (800f47c <canIdle_UpdateDataControl+0x65c>)
 800f2e2:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f2e6:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f2ea:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_5_DataControl.Position);
 800f2ee:	f8b6 2100 	ldrh.w	r2, [r6, #256]	; 0x100
 800f2f2:	ee07 2a10 	vmov	s14, r2
 800f2f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f2fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f2fe:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_5_DataControl.Torque);
 800f302:	f8b6 2104 	ldrh.w	r2, [r6, #260]	; 0x104
 800f306:	ee07 2a10 	vmov	s14, r2
 800f30a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f30e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f312:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_5_DataReturn.enabled = true;
 800f316:	2201      	movs	r2, #1
 800f318:	f886 2092 	strb.w	r2, [r6, #146]	; 0x92
            pEcatObj->md80_5_DataReturn.Mode = pMd80dev->local.mode;
 800f31c:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f320:	f886 2088 	strb.w	r2, [r6, #136]	; 0x88
            pEcatObj->md80_5_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f324:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f32c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f330:	ee17 2a10 	vmov	r2, s14
 800f334:	f8a6 208a 	strh.w	r2, [r6, #138]	; 0x8a
            pEcatObj->md80_5_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f338:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f33c:	ee07 2a10 	vmov	s14, r2
 800f340:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f344:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f348:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f34c:	ee17 2a10 	vmov	r2, s14
 800f350:	f886 2090 	strb.w	r2, [r6, #144]	; 0x90
            pEcatObj->md80_5_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f354:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f358:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f35c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f360:	ee17 3a10 	vmov	r3, s14
 800f364:	f8a6 308e 	strh.w	r3, [r6, #142]	; 0x8e
            pEcatObj->md80_5_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f368:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f36c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f370:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f374:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f37c:	ee17 3a90 	vmov	r3, s15
 800f380:	f8a6 308c 	strh.w	r3, [r6, #140]	; 0x8c
            pEcatObj->md80_5_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f384:	f7f9 ffae 	bl	80092e4 <xTaskGetTickCount>
 800f388:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
            pEcatObj->md80_5_DataReturn.counter++;
 800f38c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800f390:	3301      	adds	r3, #1
 800f392:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
            taskEXIT_CRITICAL();
 800f396:	f7fa fe1f 	bl	8009fd8 <vPortExitCritical>
            break;
 800f39a:	e5b7      	b.n	800ef0c <canIdle_UpdateDataControl+0xec>
            taskENTER_CRITICAL();
 800f39c:	f7fa fdfa 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_6_DataControl.Velocity);
 800f3a0:	4e34      	ldr	r6, [pc, #208]	; (800f474 <canIdle_UpdateDataControl+0x654>)
 800f3a2:	f8b6 310e 	ldrh.w	r3, [r6, #270]	; 0x10e
 800f3a6:	ee07 3a10 	vmov	s14, r3
 800f3aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f3ae:	eddf 7a32 	vldr	s15, [pc, #200]	; 800f478 <canIdle_UpdateDataControl+0x658>
 800f3b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f3b6:	4931      	ldr	r1, [pc, #196]	; (800f47c <canIdle_UpdateDataControl+0x65c>)
 800f3b8:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f3bc:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f3c0:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_6_DataControl.Position);
 800f3c4:	f8b6 210c 	ldrh.w	r2, [r6, #268]	; 0x10c
 800f3c8:	ee07 2a10 	vmov	s14, r2
 800f3cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f3d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f3d4:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_6_DataControl.Torque);
 800f3d8:	f8b6 2110 	ldrh.w	r2, [r6, #272]	; 0x110
 800f3dc:	ee07 2a10 	vmov	s14, r2
 800f3e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f3e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f3e8:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_6_DataReturn.enabled = true;
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	f886 20a6 	strb.w	r2, [r6, #166]	; 0xa6
            pEcatObj->md80_6_DataReturn.Mode = pMd80dev->local.mode;
 800f3f2:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f3f6:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
            pEcatObj->md80_6_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f3fa:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f3fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f402:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f406:	ee17 2a10 	vmov	r2, s14
 800f40a:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
            pEcatObj->md80_6_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f40e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f412:	ee07 2a10 	vmov	s14, r2
 800f416:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f41a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f41e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f422:	ee17 2a10 	vmov	r2, s14
 800f426:	f886 20a4 	strb.w	r2, [r6, #164]	; 0xa4
            pEcatObj->md80_6_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f42a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f42e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f432:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f436:	ee17 3a10 	vmov	r3, s14
 800f43a:	f8a6 30a2 	strh.w	r3, [r6, #162]	; 0xa2
            pEcatObj->md80_6_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f43e:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f442:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f446:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f44a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f44e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f452:	ee17 3a90 	vmov	r3, s15
 800f456:	f8a6 30a0 	strh.w	r3, [r6, #160]	; 0xa0
            pEcatObj->md80_6_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f45a:	f7f9 ff43 	bl	80092e4 <xTaskGetTickCount>
 800f45e:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
            pEcatObj->md80_6_DataReturn.counter++;
 800f462:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 800f466:	3301      	adds	r3, #1
 800f468:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
            taskEXIT_CRITICAL();
 800f46c:	f7fa fdb4 	bl	8009fd8 <vPortExitCritical>
            break;
 800f470:	e54c      	b.n	800ef0c <canIdle_UpdateDataControl+0xec>
 800f472:	bf00      	nop
 800f474:	2000d4c0 	.word	0x2000d4c0
 800f478:	42c80000 	.word	0x42c80000
 800f47c:	2000733c 	.word	0x2000733c
            taskENTER_CRITICAL();
 800f480:	f7fa fd88 	bl	8009f94 <vPortEnterCritical>
            pMd80dev->input.velocity = CANIDLE_ETH_TO_REAL(pEcatObj->md80_7_DataControl.Velocity);
 800f484:	4e34      	ldr	r6, [pc, #208]	; (800f558 <canIdle_UpdateDataControl+0x738>)
 800f486:	f8b6 311a 	ldrh.w	r3, [r6, #282]	; 0x11a
 800f48a:	ee07 3a10 	vmov	s14, r3
 800f48e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f492:	eddf 7a32 	vldr	s15, [pc, #200]	; 800f55c <canIdle_UpdateDataControl+0x73c>
 800f496:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f49a:	4931      	ldr	r1, [pc, #196]	; (800f560 <canIdle_UpdateDataControl+0x740>)
 800f49c:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800f4a0:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f4a4:	edc3 6a13 	vstr	s13, [r3, #76]	; 0x4c
            pMd80dev->input.position = CANIDLE_ETH_TO_REAL(pEcatObj->md80_7_DataControl.Position);
 800f4a8:	f8b6 2118 	ldrh.w	r2, [r6, #280]	; 0x118
 800f4ac:	ee07 2a10 	vmov	s14, r2
 800f4b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f4b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f4b8:	edc3 6a12 	vstr	s13, [r3, #72]	; 0x48
            pMd80dev->input.torque = CANIDLE_ETH_TO_REAL(pEcatObj->md80_7_DataControl.Torque);
 800f4bc:	f8b6 211c 	ldrh.w	r2, [r6, #284]	; 0x11c
 800f4c0:	ee07 2a10 	vmov	s14, r2
 800f4c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f4c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f4cc:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
            pEcatObj->md80_7_DataReturn.enabled = true;
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	f886 20ba 	strb.w	r2, [r6, #186]	; 0xba
            pEcatObj->md80_7_DataReturn.Mode = pMd80dev->local.mode;
 800f4d6:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 800f4da:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
            pEcatObj->md80_7_DataReturn.Position = CANIDLE_REAL_TO_ETH(pMd80dev->output.position);
 800f4de:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800f4e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4e6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f4ea:	ee17 2a10 	vmov	r2, s14
 800f4ee:	f8a6 20b2 	strh.w	r2, [r6, #178]	; 0xb2
            pEcatObj->md80_7_DataReturn.Temperature = CANIDLE_REAL_TO_ETH(pMd80dev->output.temperature);
 800f4f2:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f4f6:	ee07 2a10 	vmov	s14, r2
 800f4fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f4fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f502:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f506:	ee17 2a10 	vmov	r2, s14
 800f50a:	f886 20b8 	strb.w	r2, [r6, #184]	; 0xb8
            pEcatObj->md80_7_DataReturn.Torque = CANIDLE_REAL_TO_ETH(pMd80dev->output.torque);
 800f50e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800f512:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f516:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f51a:	ee17 3a10 	vmov	r3, s14
 800f51e:	f8a6 30b6 	strh.w	r3, [r6, #182]	; 0xb6
            pEcatObj->md80_7_DataReturn.Velocity = CANIDLE_REAL_TO_ETH(pMd80dev->output.velocity);
 800f522:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800f526:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800f52a:	ed91 7a16 	vldr	s14, [r1, #88]	; 0x58
 800f52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f536:	ee17 3a90 	vmov	r3, s15
 800f53a:	f8a6 30b4 	strh.w	r3, [r6, #180]	; 0xb4
            pEcatObj->md80_7_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 800f53e:	f7f9 fed1 	bl	80092e4 <xTaskGetTickCount>
 800f542:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
            pEcatObj->md80_7_DataReturn.counter++;
 800f546:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
 800f54a:	3301      	adds	r3, #1
 800f54c:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
            taskEXIT_CRITICAL();
 800f550:	f7fa fd42 	bl	8009fd8 <vPortExitCritical>
            break;
 800f554:	e4da      	b.n	800ef0c <canIdle_UpdateDataControl+0xec>
}
 800f556:	bd70      	pop	{r4, r5, r6, pc}
 800f558:	2000d4c0 	.word	0x2000d4c0
 800f55c:	42c80000 	.word	0x42c80000
 800f560:	2000733c 	.word	0x2000733c

0800f564 <canIdle_ScanDevice>:
{
 800f564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f568:	b096      	sub	sp, #88	; 0x58
 800f56a:	4607      	mov	r7, r0
   uint8_t data[2u] = {0u};
 800f56c:	2600      	movs	r6, #0
 800f56e:	f8ad 6054 	strh.w	r6, [sp, #84]	; 0x54
   uint8_t dataResp[64u] = {0};
 800f572:	9605      	str	r6, [sp, #20]
 800f574:	223c      	movs	r2, #60	; 0x3c
 800f576:	4631      	mov	r1, r6
 800f578:	a806      	add	r0, sp, #24
 800f57a:	f002 fb85 	bl	8011c88 <memset>
   uint8_t dataSize = 0;
 800f57e:	f88d 6013 	strb.w	r6, [sp, #19]
   uint16_t md80Addr[CANIDLE_TOTAL_DEV_SUPPORT] = {0};
 800f582:	9600      	str	r6, [sp, #0]
 800f584:	9601      	str	r6, [sp, #4]
 800f586:	9602      	str	r6, [sp, #8]
 800f588:	9603      	str	r6, [sp, #12]
   data[0] = MD80_FRAME_GET_INFO;
 800f58a:	2305      	movs	r3, #5
 800f58c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
   for (addr = CANIDLE_START_ADDR; addr <= CANIDLE_END_ADDR; addr++)
 800f590:	240a      	movs	r4, #10
 800f592:	e00e      	b.n	800f5b2 <canIdle_ScanDevice+0x4e>
		 cdc_printf("@%u\t[scan adder] addr: %d id %d\n",xTaskGetTickCount()/portTICK_PERIOD_MS, addr,md80Addr[md80num] );
 800f594:	f7f9 fea6 	bl	80092e4 <xTaskGetTickCount>
 800f598:	4601      	mov	r1, r0
 800f59a:	ab16      	add	r3, sp, #88	; 0x58
 800f59c:	eb03 0846 	add.w	r8, r3, r6, lsl #1
 800f5a0:	f838 3c58 	ldrh.w	r3, [r8, #-88]
 800f5a4:	4622      	mov	r2, r4
 800f5a6:	481a      	ldr	r0, [pc, #104]	; (800f610 <canIdle_ScanDevice+0xac>)
 800f5a8:	f7f1 faac 	bl	8000b04 <cdc_printf>
               md80num++;
 800f5ac:	3601      	adds	r6, #1
 800f5ae:	b2f6      	uxtb	r6, r6
   for (addr = CANIDLE_START_ADDR; addr <= CANIDLE_END_ADDR; addr++)
 800f5b0:	3401      	adds	r4, #1
 800f5b2:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 800f5b6:	d81b      	bhi.n	800f5f0 <canIdle_ScanDevice+0x8c>
      if (true == canM_SendToAddr(addr, data, 2u))
 800f5b8:	2202      	movs	r2, #2
 800f5ba:	a915      	add	r1, sp, #84	; 0x54
 800f5bc:	4620      	mov	r0, r4
 800f5be:	f000 fd8f 	bl	80100e0 <canM_SendToAddr>
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	d0f4      	beq.n	800f5b0 <canIdle_ScanDevice+0x4c>
 800f5c6:	2201      	movs	r2, #1
         while (timeout--)
 800f5c8:	1e53      	subs	r3, r2, #1
 800f5ca:	b2dd      	uxtb	r5, r3
 800f5cc:	2a00      	cmp	r2, #0
 800f5ce:	d0ef      	beq.n	800f5b0 <canIdle_ScanDevice+0x4c>
            if (true == canM_ReadAddr((uint32_t *)&md80Addr[md80num], (uint8_t *)dataResp, (uint8_t *)&dataSize))
 800f5d0:	f10d 0213 	add.w	r2, sp, #19
 800f5d4:	a905      	add	r1, sp, #20
 800f5d6:	eb0d 0046 	add.w	r0, sp, r6, lsl #1
 800f5da:	f000 fdcb 	bl	8010174 <canM_ReadAddr>
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	d1d8      	bne.n	800f594 <canIdle_ScanDevice+0x30>
            if (md80num >= CANIDLE_TOTAL_DEV_SUPPORT)
 800f5e2:	2e07      	cmp	r6, #7
 800f5e4:	d8e4      	bhi.n	800f5b0 <canIdle_ScanDevice+0x4c>
            osDelay(1);
 800f5e6:	2001      	movs	r0, #1
 800f5e8:	f7f8 ff55 	bl	8008496 <osDelay>
         while (timeout--)
 800f5ec:	462a      	mov	r2, r5
 800f5ee:	e7eb      	b.n	800f5c8 <canIdle_ScanDevice+0x64>
   if (md80num > 0)
 800f5f0:	b916      	cbnz	r6, 800f5f8 <canIdle_ScanDevice+0x94>
}
 800f5f2:	b016      	add	sp, #88	; 0x58
 800f5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      memcpy(app->rsp.data, md80Addr, md80num * 2u);
 800f5f8:	0074      	lsls	r4, r6, #1
 800f5fa:	4622      	mov	r2, r4
 800f5fc:	4669      	mov	r1, sp
 800f5fe:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800f602:	f002 fbff 	bl	8011e04 <memcpy>
      app->rsp.size = md80num * 2u;
 800f606:	f887 403b 	strb.w	r4, [r7, #59]	; 0x3b
      app->numMd80Det = md80num;
 800f60a:	f887 6054 	strb.w	r6, [r7, #84]	; 0x54
}
 800f60e:	e7f0      	b.n	800f5f2 <canIdle_ScanDevice+0x8e>
 800f610:	080136e0 	.word	0x080136e0

0800f614 <canIdle_AddMd80>:
{
 800f614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f618:	b082      	sub	sp, #8
   uint16_t canTxAddr = 0u;
 800f61a:	2300      	movs	r3, #0
 800f61c:	f8ad 3006 	strh.w	r3, [sp, #6]
   uint16_t canRxAddr = 0u;
 800f620:	f8ad 3004 	strh.w	r3, [sp, #4]
   if (app->cmd.size > 2u)
 800f624:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f628:	2b02      	cmp	r3, #2
 800f62a:	d91c      	bls.n	800f666 <canIdle_AddMd80+0x52>
      canAddr = (((uint16_t)app->cmd.data[1] << 8u) & 0xFF00U) | (((uint16_t)app->cmd.data[0]) & 0x00FFU);
 800f62c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800f630:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
 800f634:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
      for (iter = 0u; iter < CANIDLE_TOTAL_DEV_SUPPORT; iter++)
 800f638:	2400      	movs	r4, #0
 800f63a:	e019      	b.n	800f670 <canIdle_AddMd80+0x5c>
            md80_Init((tMd80_Device *)pMd80dev);
 800f63c:	f7fc f8e6 	bl	800b80c <md80_Init>
            pMd80dev->config.canId = iter;
 800f640:	4f18      	ldr	r7, [pc, #96]	; (800f6a4 <canIdle_AddMd80+0x90>)
 800f642:	ea4f 1844 	mov.w	r8, r4, lsl #5
 800f646:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 800f64a:	011b      	lsls	r3, r3, #4
 800f64c:	54fc      	strb	r4, [r7, r3]
            canM_SetAddrTxRxDev(iter, canAddr, canAddr);
 800f64e:	462a      	mov	r2, r5
 800f650:	4629      	mov	r1, r5
 800f652:	4620      	mov	r0, r4
 800f654:	f000 fd00 	bl	8010058 <canM_SetAddrTxRxDev>
            pMd80dev->config.isMd80Detected = true;
 800f658:	eba8 0804 	sub.w	r8, r8, r4
 800f65c:	eb07 1708 	add.w	r7, r7, r8, lsl #4
 800f660:	2301      	movs	r3, #1
 800f662:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
}
 800f666:	b002      	add	sp, #8
 800f668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      for (iter = 0u; iter < CANIDLE_TOTAL_DEV_SUPPORT; iter++)
 800f66c:	3401      	adds	r4, #1
 800f66e:	b2e4      	uxtb	r4, r4
 800f670:	2c07      	cmp	r4, #7
 800f672:	d8f8      	bhi.n	800f666 <canIdle_AddMd80+0x52>
         pMd80dev = (tMd80_Device *)&md80Dev[iter];
 800f674:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 800f678:	480a      	ldr	r0, [pc, #40]	; (800f6a4 <canIdle_AddMd80+0x90>)
 800f67a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
         if (false == pMd80dev->config.isMd80Detected)
 800f67e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800f682:	2b00      	cmp	r3, #0
 800f684:	d0da      	beq.n	800f63c <canIdle_AddMd80+0x28>
            canM_GetAddrTxRxDev(iter, &canTxAddr, &canRxAddr);
 800f686:	aa01      	add	r2, sp, #4
 800f688:	f10d 0106 	add.w	r1, sp, #6
 800f68c:	4620      	mov	r0, r4
 800f68e:	f000 fcf9 	bl	8010084 <canM_GetAddrTxRxDev>
            if ((canAddr == canTxAddr) && (canAddr == canRxAddr))
 800f692:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f696:	42ab      	cmp	r3, r5
 800f698:	d1e8      	bne.n	800f66c <canIdle_AddMd80+0x58>
 800f69a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f69e:	42ab      	cmp	r3, r5
 800f6a0:	d1e4      	bne.n	800f66c <canIdle_AddMd80+0x58>
 800f6a2:	e7e0      	b.n	800f666 <canIdle_AddMd80+0x52>
 800f6a4:	2000733c 	.word	0x2000733c

0800f6a8 <canIdle_Reset>:
{
 800f6a8:	b570      	push	{r4, r5, r6, lr}
 800f6aa:	4606      	mov	r6, r0
   canIdle_End(app);
 800f6ac:	f7ff fb89 	bl	800edc2 <canIdle_End>
   taskENTER_CRITICAL();
 800f6b0:	f7fa fc70 	bl	8009f94 <vPortEnterCritical>
   if (app->numMd80Det > 0)
 800f6b4:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
 800f6b8:	b9fb      	cbnz	r3, 800f6fa <canIdle_Reset+0x52>
   app->numMd80Det = 0;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   app->state = CANIDLE_IDLE;
 800f6c0:	76f3      	strb	r3, [r6, #27]
   app->isNewCommand = false;
 800f6c2:	7773      	strb	r3, [r6, #29]
   taskEXIT_CRITICAL();
 800f6c4:	f7fa fc88 	bl	8009fd8 <vPortExitCritical>
}
 800f6c8:	bd70      	pop	{r4, r5, r6, pc}
      for (md80Idx = 0u; md80Idx < app->numMd80Det; md80Idx ++)
 800f6ca:	3401      	adds	r4, #1
 800f6cc:	b2e4      	uxtb	r4, r4
 800f6ce:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
 800f6d2:	42a3      	cmp	r3, r4
 800f6d4:	d913      	bls.n	800f6fe <canIdle_Reset+0x56>
         pMd80dev = (tMd80_Device *)&md80Dev[md80Idx];
 800f6d6:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 800f6da:	4d0f      	ldr	r5, [pc, #60]	; (800f718 <canIdle_Reset+0x70>)
 800f6dc:	eb05 1503 	add.w	r5, r5, r3, lsl #4
         if (true == md80_IsEnabled(pMd80dev))
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	f7fc fa11 	bl	800bb08 <md80_IsEnabled>
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	d0ef      	beq.n	800f6ca <canIdle_Reset+0x22>
            md80_ControlMd80Enable (pMd80dev, false);
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	4628      	mov	r0, r5
 800f6ee:	f7fc f980 	bl	800b9f2 <md80_ControlMd80Enable>
            pMd80dev->config.isMd80Detected = false;
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
 800f6f8:	e7e7      	b.n	800f6ca <canIdle_Reset+0x22>
      for (md80Idx = 0u; md80Idx < app->numMd80Det; md80Idx ++)
 800f6fa:	2400      	movs	r4, #0
 800f6fc:	e7e7      	b.n	800f6ce <canIdle_Reset+0x26>
      for (md80Idx = 0u; md80Idx < CANIDLE_TOTAL_DEV_SUPPORT; md80Idx ++)
 800f6fe:	2300      	movs	r3, #0
 800f700:	e006      	b.n	800f710 <canIdle_Reset+0x68>
         Obj.md80_addrs[md80Idx] = 0x00;
 800f702:	4a06      	ldr	r2, [pc, #24]	; (800f71c <canIdle_Reset+0x74>)
 800f704:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f708:	2100      	movs	r1, #0
 800f70a:	6051      	str	r1, [r2, #4]
      for (md80Idx = 0u; md80Idx < CANIDLE_TOTAL_DEV_SUPPORT; md80Idx ++)
 800f70c:	3301      	adds	r3, #1
 800f70e:	b2db      	uxtb	r3, r3
 800f710:	2b07      	cmp	r3, #7
 800f712:	d9f6      	bls.n	800f702 <canIdle_Reset+0x5a>
 800f714:	e7d1      	b.n	800f6ba <canIdle_Reset+0x12>
 800f716:	bf00      	nop
 800f718:	2000733c 	.word	0x2000733c
 800f71c:	2000d4c0 	.word	0x2000d4c0

0800f720 <canIdle_Control>:
   /* Update state. */
   return nextState;
}

static void canIdle_Control(tCanIdle_Data * const app)
{
 800f720:	b538      	push	{r3, r4, r5, lr}
 800f722:	4605      	mov	r5, r0
   uint8_t iter = 0u;
   tMd80_Device *pMd80dev = NULL;

   for (iter = 0u; iter < app->numMd80Det; iter++)
 800f724:	2400      	movs	r4, #0
 800f726:	e008      	b.n	800f73a <canIdle_Control+0x1a>
   {
      /* Get the data structure of md80. */
      pMd80dev = (tMd80_Device *)&md80Dev[iter];
 800f728:	ebc4 1044 	rsb	r0, r4, r4, lsl #5

      /* Run the main function. */
      md80_MainFunction(pMd80dev);
 800f72c:	4b05      	ldr	r3, [pc, #20]	; (800f744 <canIdle_Control+0x24>)
 800f72e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800f732:	f7fc f973 	bl	800ba1c <md80_MainFunction>
   for (iter = 0u; iter < app->numMd80Det; iter++)
 800f736:	3401      	adds	r4, #1
 800f738:	b2e4      	uxtb	r4, r4
 800f73a:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 800f73e:	42a3      	cmp	r3, r4
 800f740:	d8f2      	bhi.n	800f728 <canIdle_Control+0x8>
   }
}
 800f742:	bd38      	pop	{r3, r4, r5, pc}
 800f744:	2000733c 	.word	0x2000733c

0800f748 <frameTypeName>:
	switch (idType){
 800f748:	2871      	cmp	r0, #113	; 0x71
 800f74a:	d83e      	bhi.n	800f7ca <frameTypeName+0x82>
 800f74c:	2871      	cmp	r0, #113	; 0x71
 800f74e:	d862      	bhi.n	800f816 <frameTypeName+0xce>
 800f750:	e8df f000 	tbb	[pc, r0]
 800f754:	413f6339 	.word	0x413f6339
 800f758:	61474543 	.word	0x61474543
 800f75c:	61616161 	.word	0x61616161
 800f760:	61616161 	.word	0x61616161
 800f764:	4f4d4b49 	.word	0x4f4d4b49
 800f768:	61616151 	.word	0x61616151
 800f76c:	61616161 	.word	0x61616161
 800f770:	61616161 	.word	0x61616161
 800f774:	61615553 	.word	0x61615553
 800f778:	61616161 	.word	0x61616161
 800f77c:	61616161 	.word	0x61616161
 800f780:	61616161 	.word	0x61616161
 800f784:	61616161 	.word	0x61616161
 800f788:	61616161 	.word	0x61616161
 800f78c:	61616161 	.word	0x61616161
 800f790:	61616161 	.word	0x61616161
 800f794:	61615957 	.word	0x61615957
 800f798:	61616161 	.word	0x61616161
 800f79c:	61616161 	.word	0x61616161
 800f7a0:	61616161 	.word	0x61616161
 800f7a4:	61616161 	.word	0x61616161
 800f7a8:	61616161 	.word	0x61616161
 800f7ac:	61616161 	.word	0x61616161
 800f7b0:	61616161 	.word	0x61616161
 800f7b4:	61616161 	.word	0x61616161
 800f7b8:	61616161 	.word	0x61616161
 800f7bc:	61615b61 	.word	0x61615b61
 800f7c0:	61616161 	.word	0x61616161
 800f7c4:	5f5d      	.short	0x5f5d
 800f7c6:	4817      	ldr	r0, [pc, #92]	; (800f824 <frameTypeName+0xdc>)
 800f7c8:	4770      	bx	lr
 800f7ca:	28a0      	cmp	r0, #160	; 0xa0
 800f7cc:	d127      	bne.n	800f81e <frameTypeName+0xd6>
				return "RESPONSE_DEFAULT";
 800f7ce:	4816      	ldr	r0, [pc, #88]	; (800f828 <frameTypeName+0xe0>)
 800f7d0:	4770      	bx	lr
				return "CONTROL_SELECT";
 800f7d2:	4816      	ldr	r0, [pc, #88]	; (800f82c <frameTypeName+0xe4>)
 800f7d4:	4770      	bx	lr
				return "ZERO_ENCODER";
 800f7d6:	4816      	ldr	r0, [pc, #88]	; (800f830 <frameTypeName+0xe8>)
 800f7d8:	4770      	bx	lr
				return "BASE_CONFIG";
 800f7da:	4816      	ldr	r0, [pc, #88]	; (800f834 <frameTypeName+0xec>)
 800f7dc:	4770      	bx	lr
				return "GET_INFO";
 800f7de:	4816      	ldr	r0, [pc, #88]	; (800f838 <frameTypeName+0xf0>)
 800f7e0:	4770      	bx	lr
				return "SET_TORQUE_BW";
 800f7e2:	4816      	ldr	r0, [pc, #88]	; (800f83c <frameTypeName+0xf4>)
 800f7e4:	4770      	bx	lr
				return "POS_CONTROL";
 800f7e6:	4816      	ldr	r0, [pc, #88]	; (800f840 <frameTypeName+0xf8>)
 800f7e8:	4770      	bx	lr
				return "VEL_CONTROL";
 800f7ea:	4816      	ldr	r0, [pc, #88]	; (800f844 <frameTypeName+0xfc>)
 800f7ec:	4770      	bx	lr
				return "IMP_CONTROL";
 800f7ee:	4816      	ldr	r0, [pc, #88]	; (800f848 <frameTypeName+0x100>)
 800f7f0:	4770      	bx	lr
				return "RESTART";
 800f7f2:	4816      	ldr	r0, [pc, #88]	; (800f84c <frameTypeName+0x104>)
 800f7f4:	4770      	bx	lr
				return "SET_MOTION_TARGETS";
 800f7f6:	4816      	ldr	r0, [pc, #88]	; (800f850 <frameTypeName+0x108>)
 800f7f8:	4770      	bx	lr
				return "CAN_CONFIG";
 800f7fa:	4816      	ldr	r0, [pc, #88]	; (800f854 <frameTypeName+0x10c>)
 800f7fc:	4770      	bx	lr
				return "CAN_SAVE";
 800f7fe:	4816      	ldr	r0, [pc, #88]	; (800f858 <frameTypeName+0x110>)
 800f800:	4770      	bx	lr
				return "WRITE_REGISTER";
 800f802:	4816      	ldr	r0, [pc, #88]	; (800f85c <frameTypeName+0x114>)
 800f804:	4770      	bx	lr
				return "READ_REGISTER";
 800f806:	4816      	ldr	r0, [pc, #88]	; (800f860 <frameTypeName+0x118>)
 800f808:	4770      	bx	lr
				return "DIAGNOSTIC";
 800f80a:	4816      	ldr	r0, [pc, #88]	; (800f864 <frameTypeName+0x11c>)
 800f80c:	4770      	bx	lr
				return "CALIBRATION";
 800f80e:	4816      	ldr	r0, [pc, #88]	; (800f868 <frameTypeName+0x120>)
 800f810:	4770      	bx	lr
				return "CALIBRATION_OUTPUT";
 800f812:	4816      	ldr	r0, [pc, #88]	; (800f86c <frameTypeName+0x124>)
 800f814:	4770      	bx	lr
			return "Unknown command";
 800f816:	4816      	ldr	r0, [pc, #88]	; (800f870 <frameTypeName+0x128>)
 800f818:	4770      	bx	lr
				return "MOTOR_ENABLE";
 800f81a:	4816      	ldr	r0, [pc, #88]	; (800f874 <frameTypeName+0x12c>)
 800f81c:	4770      	bx	lr
			return "Unknown command";
 800f81e:	4814      	ldr	r0, [pc, #80]	; (800f870 <frameTypeName+0x128>)
}
 800f820:	4770      	bx	lr
 800f822:	bf00      	nop
 800f824:	08013824 	.word	0x08013824
 800f828:	08013810 	.word	0x08013810
 800f82c:	08013724 	.word	0x08013724
 800f830:	08013734 	.word	0x08013734
 800f834:	08013744 	.word	0x08013744
 800f838:	08013750 	.word	0x08013750
 800f83c:	0801375c 	.word	0x0801375c
 800f840:	0801376c 	.word	0x0801376c
 800f844:	08013778 	.word	0x08013778
 800f848:	08013784 	.word	0x08013784
 800f84c:	08013790 	.word	0x08013790
 800f850:	08013798 	.word	0x08013798
 800f854:	080137ac 	.word	0x080137ac
 800f858:	080137b8 	.word	0x080137b8
 800f85c:	080137c4 	.word	0x080137c4
 800f860:	080137d4 	.word	0x080137d4
 800f864:	080137e4 	.word	0x080137e4
 800f868:	080137f0 	.word	0x080137f0
 800f86c:	080137fc 	.word	0x080137fc
 800f870:	08013704 	.word	0x08013704
 800f874:	08013714 	.word	0x08013714

0800f878 <canIdle_GenericFrame>:
{
 800f878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f87c:	b083      	sub	sp, #12
 800f87e:	4605      	mov	r5, r0
   cmd = app->cmd.data[0];
 800f880:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
   md80Id = app->cmd.motorId;
 800f884:	7f87      	ldrb	r7, [r0, #30]
   pMd80dev = (tMd80_Device *)&md80Dev[md80Id];
 800f886:	ebc7 1247 	rsb	r2, r7, r7, lsl #5
 800f88a:	4b53      	ldr	r3, [pc, #332]	; (800f9d8 <canIdle_GenericFrame+0x160>)
 800f88c:	eb03 1902 	add.w	r9, r3, r2, lsl #4
   cdc_printf("@%u\t[Bring up Motor Command]:\t %s for %d\r\n",xTaskGetTickCount()/portTICK_PERIOD_MS,frameTypeName((tMd80_FrameId) cmd) ,md80Id);
 800f890:	f7f9 fd28 	bl	80092e4 <xTaskGetTickCount>
 800f894:	4606      	mov	r6, r0
 800f896:	4620      	mov	r0, r4
 800f898:	f7ff ff56 	bl	800f748 <frameTypeName>
 800f89c:	4602      	mov	r2, r0
 800f89e:	463b      	mov	r3, r7
 800f8a0:	4631      	mov	r1, r6
 800f8a2:	484e      	ldr	r0, [pc, #312]	; (800f9dc <canIdle_GenericFrame+0x164>)
 800f8a4:	f7f1 f92e 	bl	8000b04 <cdc_printf>
   switch (cmd)
 800f8a8:	2c21      	cmp	r4, #33	; 0x21
 800f8aa:	d816      	bhi.n	800f8da <canIdle_GenericFrame+0x62>
 800f8ac:	f04f 0800 	mov.w	r8, #0
 800f8b0:	2c21      	cmp	r4, #33	; 0x21
 800f8b2:	d81d      	bhi.n	800f8f0 <canIdle_GenericFrame+0x78>
 800f8b4:	e8df f004 	tbb	[pc, r4]
 800f8b8:	192c231f 	.word	0x192c231f
 800f8bc:	1c3a1c32 	.word	0x1c3a1c32
 800f8c0:	1c1c1c1c 	.word	0x1c1c1c1c
 800f8c4:	1c1c1c1c 	.word	0x1c1c1c1c
 800f8c8:	8c67533f 	.word	0x8c67533f
 800f8cc:	1c1c1c1c 	.word	0x1c1c1c1c
 800f8d0:	1c1c1c1c 	.word	0x1c1c1c1c
 800f8d4:	1c1c1c1c 	.word	0x1c1c1c1c
 800f8d8:	8877      	.short	0x8877
 800f8da:	2c70      	cmp	r4, #112	; 0x70
 800f8dc:	d05f      	beq.n	800f99e <canIdle_GenericFrame+0x126>
 800f8de:	2c71      	cmp	r4, #113	; 0x71
 800f8e0:	d106      	bne.n	800f8f0 <canIdle_GenericFrame+0x78>
      md80_setupCalibrationOutput(pMd80dev);
 800f8e2:	4648      	mov	r0, r9
 800f8e4:	f7fb ffd0 	bl	800b888 <md80_setupCalibrationOutput>
      break;
 800f8e8:	e002      	b.n	800f8f0 <canIdle_GenericFrame+0x78>
      md80_SetEncoderZero(pMd80dev);
 800f8ea:	4648      	mov	r0, r9
 800f8ec:	f7fc f8e2 	bl	800bab4 <md80_SetEncoderZero>
}
 800f8f0:	b003      	add	sp, #12
 800f8f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      md80_ConfigBlink(pMd80dev);
 800f8f6:	4648      	mov	r0, r9
 800f8f8:	f7fb ffaa 	bl	800b850 <md80_ConfigBlink>
      break;
 800f8fc:	e7f8      	b.n	800f8f0 <canIdle_GenericFrame+0x78>
      md80En = app->cmd.data[1];
 800f8fe:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
      md80_ControlMd80Enable(pMd80dev, md80En);
 800f902:	3900      	subs	r1, #0
 800f904:	bf18      	it	ne
 800f906:	2101      	movne	r1, #1
 800f908:	4648      	mov	r0, r9
 800f90a:	f7fc f872 	bl	800b9f2 <md80_ControlMd80Enable>
      break;
 800f90e:	e7ef      	b.n	800f8f0 <canIdle_GenericFrame+0x78>
      md80_ControlMd80Mode(pMd80dev, md80Mode);
 800f910:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
 800f914:	4648      	mov	r0, r9
 800f916:	f7fc f857 	bl	800b9c8 <md80_ControlMd80Mode>
      break;
 800f91a:	e7e9      	b.n	800f8f0 <canIdle_GenericFrame+0x78>
      md80_SetCurrentLimit(pMd80dev, currentLimit);
 800f91c:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
 800f920:	ee00 3a10 	vmov	s0, r3
 800f924:	4648      	mov	r0, r9
 800f926:	f7fc f81f 	bl	800b968 <md80_SetCurrentLimit>
      break;
 800f92a:	e7e1      	b.n	800f8f0 <canIdle_GenericFrame+0x78>
      md80_SetMaxTorque(pMd80dev, torqueBandwidth);
 800f92c:	8c69      	ldrh	r1, [r5, #34]	; 0x22
 800f92e:	4648      	mov	r0, r9
 800f930:	f7fc f8ac 	bl	800ba8c <md80_SetMaxTorque>
      break;
 800f934:	e7dc      	b.n	800f8f0 <canIdle_GenericFrame+0x78>
      md80_SetPositionControllerParams(pMd80dev, kp, ki, kd, iWindup);
 800f936:	f8d5 302e 	ldr.w	r3, [r5, #46]	; 0x2e
 800f93a:	ee01 3a90 	vmov	s3, r3
 800f93e:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
 800f942:	ee01 3a10 	vmov	s2, r3
 800f946:	f8d5 3026 	ldr.w	r3, [r5, #38]	; 0x26
 800f94a:	ee00 3a90 	vmov	s1, r3
 800f94e:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
 800f952:	ee00 3a10 	vmov	s0, r3
 800f956:	4648      	mov	r0, r9
 800f958:	f7fc f878 	bl	800ba4c <md80_SetPositionControllerParams>
      break;
 800f95c:	e7c8      	b.n	800f8f0 <canIdle_GenericFrame+0x78>
      md80_SetVelocityControllerParams(pMd80dev, kp, ki, kd, iWindup);
 800f95e:	f8d5 302e 	ldr.w	r3, [r5, #46]	; 0x2e
 800f962:	ee01 3a90 	vmov	s3, r3
 800f966:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
 800f96a:	ee01 3a10 	vmov	s2, r3
 800f96e:	f8d5 3026 	ldr.w	r3, [r5, #38]	; 0x26
 800f972:	ee00 3a90 	vmov	s1, r3
 800f976:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
 800f97a:	ee00 3a10 	vmov	s0, r3
 800f97e:	4648      	mov	r0, r9
 800f980:	f7fc f870 	bl	800ba64 <md80_SetVelocityControllerParams>
      break;
 800f984:	e7b4      	b.n	800f8f0 <canIdle_GenericFrame+0x78>
      md80_SetImpedanceControllerParams(pMd80dev, kp, kd);
 800f986:	f8d5 3026 	ldr.w	r3, [r5, #38]	; 0x26
 800f98a:	ee00 3a90 	vmov	s1, r3
 800f98e:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
 800f992:	ee00 3a10 	vmov	s0, r3
 800f996:	4648      	mov	r0, r9
 800f998:	f7fc f870 	bl	800ba7c <md80_SetImpedanceControllerParams>
      break;
 800f99c:	e7a8      	b.n	800f8f0 <canIdle_GenericFrame+0x78>
      md80_setupCalibration(pMd80dev);
 800f99e:	4648      	mov	r0, r9
 800f9a0:	f7fb ff64 	bl	800b86c <md80_setupCalibration>
      break;
 800f9a4:	e7a4      	b.n	800f8f0 <canIdle_GenericFrame+0x78>
      memcpy((void *)&newBaudrate, (void *)&app->cmd.data[2], sizeof(uint32_t));
 800f9a6:	f8d5 3023 	ldr.w	r3, [r5, #35]	; 0x23
 800f9aa:	f8cd 3007 	str.w	r3, [sp, #7]
      memcpy((void *)&newTimeout, (void *)&app->cmd.data[6], sizeof(uint16_t));
 800f9ae:	f8b5 3027 	ldrh.w	r3, [r5, #39]	; 0x27
 800f9b2:	f363 080f 	bfi	r8, r3, #0, #16
      md80_ConfigMd80Can(pMd80dev, newBaudrate, newTimeout, canTermination);
 800f9b6:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800f9ba:	4642      	mov	r2, r8
 800f9bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f9c0:	4648      	mov	r0, r9
 800f9c2:	f7fb ff7d 	bl	800b8c0 <md80_ConfigMd80Can>
      break;
 800f9c6:	e793      	b.n	800f8f0 <canIdle_GenericFrame+0x78>
      md80_ConfigMd80Save(pMd80dev);
 800f9c8:	4648      	mov	r0, r9
 800f9ca:	f7fb ffa3 	bl	800b914 <md80_ConfigMd80Save>
      break;
 800f9ce:	e78f      	b.n	800f8f0 <canIdle_GenericFrame+0x78>
      md80_Restart(pMd80dev);
 800f9d0:	4648      	mov	r0, r9
 800f9d2:	f7fb ff67 	bl	800b8a4 <md80_Restart>
}
 800f9d6:	e78b      	b.n	800f8f0 <canIdle_GenericFrame+0x78>
 800f9d8:	2000733c 	.word	0x2000733c
 800f9dc:	08013830 	.word	0x08013830

0800f9e0 <busFrameName>:
	switch (state){
 800f9e0:	280a      	cmp	r0, #10
 800f9e2:	d81b      	bhi.n	800fa1c <busFrameName+0x3c>
 800f9e4:	e8df f000 	tbb	[pc, r0]
 800f9e8:	0a081c06 	.word	0x0a081c06
 800f9ec:	12100e0c 	.word	0x12100e0c
 800f9f0:	1614      	.short	0x1614
 800f9f2:	18          	.byte	0x18
 800f9f3:	00          	.byte	0x00
 800f9f4:	480b      	ldr	r0, [pc, #44]	; (800fa24 <busFrameName+0x44>)
 800f9f6:	4770      	bx	lr
				return "CANDLE_CFG_BR";
 800f9f8:	480b      	ldr	r0, [pc, #44]	; (800fa28 <busFrameName+0x48>)
 800f9fa:	4770      	bx	lr
				return "MD80_ADD";
 800f9fc:	480b      	ldr	r0, [pc, #44]	; (800fa2c <busFrameName+0x4c>)
 800f9fe:	4770      	bx	lr
				return "GENERIC_FRAME";
 800fa00:	480b      	ldr	r0, [pc, #44]	; (800fa30 <busFrameName+0x50>)
 800fa02:	4770      	bx	lr
				return "CONFIG_CAN";
 800fa04:	480b      	ldr	r0, [pc, #44]	; (800fa34 <busFrameName+0x54>)
 800fa06:	4770      	bx	lr
				return "B_F_BEGIN";
 800fa08:	480b      	ldr	r0, [pc, #44]	; (800fa38 <busFrameName+0x58>)
 800fa0a:	4770      	bx	lr
				return "B_F_END";
 800fa0c:	480b      	ldr	r0, [pc, #44]	; (800fa3c <busFrameName+0x5c>)
 800fa0e:	4770      	bx	lr
				return "B_F_UPDATE";
 800fa10:	480b      	ldr	r0, [pc, #44]	; (800fa40 <busFrameName+0x60>)
 800fa12:	4770      	bx	lr
				return "B_F_RESET";
 800fa14:	480b      	ldr	r0, [pc, #44]	; (800fa44 <busFrameName+0x64>)
 800fa16:	4770      	bx	lr
				return "B_F_INVALID";
 800fa18:	480b      	ldr	r0, [pc, #44]	; (800fa48 <busFrameName+0x68>)
 800fa1a:	4770      	bx	lr
			return "Unknown command";
 800fa1c:	480b      	ldr	r0, [pc, #44]	; (800fa4c <busFrameName+0x6c>)
 800fa1e:	4770      	bx	lr
				return "PING_START";
 800fa20:	480b      	ldr	r0, [pc, #44]	; (800fa50 <busFrameName+0x70>)
}
 800fa22:	4770      	bx	lr
 800fa24:	0801385c 	.word	0x0801385c
 800fa28:	08013874 	.word	0x08013874
 800fa2c:	08013884 	.word	0x08013884
 800fa30:	08013890 	.word	0x08013890
 800fa34:	080138a0 	.word	0x080138a0
 800fa38:	080138ac 	.word	0x080138ac
 800fa3c:	080138b8 	.word	0x080138b8
 800fa40:	080138c0 	.word	0x080138c0
 800fa44:	080138cc 	.word	0x080138cc
 800fa48:	080138d8 	.word	0x080138d8
 800fa4c:	08013704 	.word	0x08013704
 800fa50:	08013868 	.word	0x08013868

0800fa54 <canIdle_Command>:
{
 800fa54:	b538      	push	{r3, r4, r5, lr}
 800fa56:	4604      	mov	r4, r0
   cdc_printf("@%u\t[canIdle]:\tH:%s for %d\r\n",xTaskGetTickCount()/portTICK_PERIOD_MS,busFrameName(app->hostReq.frId), app->cmd.motorId );
 800fa58:	f7f9 fc44 	bl	80092e4 <xTaskGetTickCount>
 800fa5c:	4605      	mov	r5, r0
 800fa5e:	7860      	ldrb	r0, [r4, #1]
 800fa60:	f7ff ffbe 	bl	800f9e0 <busFrameName>
 800fa64:	4602      	mov	r2, r0
 800fa66:	7fa3      	ldrb	r3, [r4, #30]
 800fa68:	4629      	mov	r1, r5
 800fa6a:	481b      	ldr	r0, [pc, #108]	; (800fad8 <canIdle_Command+0x84>)
 800fa6c:	f7f1 f84a 	bl	8000b04 <cdc_printf>
   switch (app->hostReq.frId)
 800fa70:	7863      	ldrb	r3, [r4, #1]
 800fa72:	2b09      	cmp	r3, #9
 800fa74:	d823      	bhi.n	800fabe <canIdle_Command+0x6a>
 800fa76:	e8df f003 	tbb	[pc, r3]
 800fa7a:	0508      	.short	0x0508
 800fa7c:	220e0a1e 	.word	0x220e0a1e
 800fa80:	1a221612 	.word	0x1a221612
      canIdle_ScanDevice(app);
 800fa84:	4620      	mov	r0, r4
 800fa86:	f7ff fd6d 	bl	800f564 <canIdle_ScanDevice>
}
 800fa8a:	2003      	movs	r0, #3
 800fa8c:	bd38      	pop	{r3, r4, r5, pc}
      canIdle_AddMd80(app);
 800fa8e:	4620      	mov	r0, r4
 800fa90:	f7ff fdc0 	bl	800f614 <canIdle_AddMd80>
      break;
 800fa94:	e7f9      	b.n	800fa8a <canIdle_Command+0x36>
      canIdle_GenericFrame(app);
 800fa96:	4620      	mov	r0, r4
 800fa98:	f7ff feee 	bl	800f878 <canIdle_GenericFrame>
      break;
 800fa9c:	e7f5      	b.n	800fa8a <canIdle_Command+0x36>
      canIdle_Begin(app);
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f7ff f98a 	bl	800edb8 <canIdle_Begin>
      break;
 800faa4:	e7f1      	b.n	800fa8a <canIdle_Command+0x36>
      canIdle_End(app);
 800faa6:	4620      	mov	r0, r4
 800faa8:	f7ff f98b 	bl	800edc2 <canIdle_End>
      break;
 800faac:	e7ed      	b.n	800fa8a <canIdle_Command+0x36>
      canIdle_Reset(app);
 800faae:	4620      	mov	r0, r4
 800fab0:	f7ff fdfa 	bl	800f6a8 <canIdle_Reset>
      break;
 800fab4:	e7e9      	b.n	800fa8a <canIdle_Command+0x36>
      canIdle_ConfigBaudrate(app);
 800fab6:	4620      	mov	r0, r4
 800fab8:	f7ff f9a0 	bl	800edfc <canIdle_ConfigBaudrate>
      break;
 800fabc:	e7e5      	b.n	800fa8a <canIdle_Command+0x36>
      cdc_printf("[canIdle_Command]@%u:\t unhandled command %s\r\n",GetCycleCount(),busFrameName(nextState) );
 800fabe:	f7f1 f871 	bl	8000ba4 <GetCycleCount>
 800fac2:	4604      	mov	r4, r0
 800fac4:	2002      	movs	r0, #2
 800fac6:	f7ff ff8b 	bl	800f9e0 <busFrameName>
 800faca:	4602      	mov	r2, r0
 800facc:	4621      	mov	r1, r4
 800face:	4803      	ldr	r0, [pc, #12]	; (800fadc <canIdle_Command+0x88>)
 800fad0:	f7f1 f818 	bl	8000b04 <cdc_printf>
      break;
 800fad4:	e7d9      	b.n	800fa8a <canIdle_Command+0x36>
 800fad6:	bf00      	nop
 800fad8:	080138e4 	.word	0x080138e4
 800fadc:	08013904 	.word	0x08013904

0800fae0 <busFrameTypeName>:


const char* busFrameTypeName(tMd80_BusFrameId type){
	switch(type){
 800fae0:	280a      	cmp	r0, #10
 800fae2:	d81b      	bhi.n	800fb1c <busFrameTypeName+0x3c>
 800fae4:	e8df f000 	tbb	[pc, r0]
 800fae8:	0a081c06 	.word	0x0a081c06
 800faec:	12100e0c 	.word	0x12100e0c
 800faf0:	1614      	.short	0x1614
 800faf2:	18          	.byte	0x18
 800faf3:	00          	.byte	0x00
 800faf4:	480b      	ldr	r0, [pc, #44]	; (800fb24 <busFrameTypeName+0x44>)
 800faf6:	4770      	bx	lr
	case(BUS_FRAME_NONE ):
		return "NONE";
	case(BUS_FRAME_PING_START ):
		return "PING_START";
	case(BUS_FRAME_CANDLE_CONFIG_BAUDRATE ):
		return "CANDLE_CONF_BAUDRATE";
 800faf8:	480b      	ldr	r0, [pc, #44]	; (800fb28 <busFrameTypeName+0x48>)
 800fafa:	4770      	bx	lr
	case(BUS_FRAME_MD80_ADD ):
		return "MD80_ADD";
 800fafc:	480b      	ldr	r0, [pc, #44]	; (800fb2c <busFrameTypeName+0x4c>)
 800fafe:	4770      	bx	lr
	case(BUS_FRAME_MD80_GENERIC_FRAME ):
		return "MD80_GENERIC_FRAME";
 800fb00:	480b      	ldr	r0, [pc, #44]	; (800fb30 <busFrameTypeName+0x50>)
 800fb02:	4770      	bx	lr
	case(BUS_FRAME_MD80_CONFIG_CAN ):
		return "MD80_CONFIG_CAN";
 800fb04:	480b      	ldr	r0, [pc, #44]	; (800fb34 <busFrameTypeName+0x54>)
 800fb06:	4770      	bx	lr
	case(BUS_FRAME_BEGIN ):
		return "BEGIN";
 800fb08:	480b      	ldr	r0, [pc, #44]	; (800fb38 <busFrameTypeName+0x58>)
 800fb0a:	4770      	bx	lr
	case(BUS_FRAME_END ):
		return "END";
 800fb0c:	480b      	ldr	r0, [pc, #44]	; (800fb3c <busFrameTypeName+0x5c>)
 800fb0e:	4770      	bx	lr
	case(BUS_FRAME_UPDATE ):
		return "UPDATE";
 800fb10:	480b      	ldr	r0, [pc, #44]	; (800fb40 <busFrameTypeName+0x60>)
 800fb12:	4770      	bx	lr
	case(BUS_FRAME_RESET ):
		return "RESET";
 800fb14:	480b      	ldr	r0, [pc, #44]	; (800fb44 <busFrameTypeName+0x64>)
 800fb16:	4770      	bx	lr
	case(BUS_FRAME_INVALID):
		return "INVALID";
 800fb18:	480b      	ldr	r0, [pc, #44]	; (800fb48 <busFrameTypeName+0x68>)
 800fb1a:	4770      	bx	lr
	default:
		return "Unknown";
 800fb1c:	480b      	ldr	r0, [pc, #44]	; (800fb4c <busFrameTypeName+0x6c>)
 800fb1e:	4770      	bx	lr
		return "PING_START";
 800fb20:	480b      	ldr	r0, [pc, #44]	; (800fb50 <busFrameTypeName+0x70>)
	}

}
 800fb22:	4770      	bx	lr
 800fb24:	08013860 	.word	0x08013860
 800fb28:	08013934 	.word	0x08013934
 800fb2c:	08013884 	.word	0x08013884
 800fb30:	0801394c 	.word	0x0801394c
 800fb34:	08013960 	.word	0x08013960
 800fb38:	080138b0 	.word	0x080138b0
 800fb3c:	080138bc 	.word	0x080138bc
 800fb40:	080138c4 	.word	0x080138c4
 800fb44:	080138d0 	.word	0x080138d0
 800fb48:	080138dc 	.word	0x080138dc
 800fb4c:	08013970 	.word	0x08013970
 800fb50:	08013868 	.word	0x08013868

0800fb54 <canIdle_UpdateResp>:

static void canIdle_UpdateResp (tCanIdle_Data * const app)
{
 800fb54:	b570      	push	{r4, r5, r6, lr}
 800fb56:	4604      	mov	r4, r0
   uint8_t iter = 0u;
   uint8_t md80Id = 0u;
   tMd80_Device *pMd80dev = NULL;

   if (app->rsp.frId == BUS_FRAME_PING_START)
 800fb58:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	d05a      	beq.n	800fc16 <canIdle_UpdateResp+0xc2>
         {
            Obj.md80_addrs[iter] = 0U;
         }
      }
   }
   else if (app->rsp.frId == BUS_FRAME_CANDLE_CONFIG_BAUDRATE)
 800fb60:	2b02      	cmp	r3, #2
 800fb62:	d02d      	beq.n	800fbc0 <canIdle_UpdateResp+0x6c>
   }
   /* Another command. */
   else
   {
      /* Get the data structure of md80. */
      pMd80dev = (tMd80_Device *)&md80Dev[app->cmd.motorId];
 800fb64:	7f83      	ldrb	r3, [r0, #30]

      memcpy((void *)&app->rsp.data[0], (void *)&pMd80dev->output.errorVector, sizeof(uint16_t));
 800fb66:	4942      	ldr	r1, [pc, #264]	; (800fc70 <canIdle_UpdateResp+0x11c>)
 800fb68:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800fb6c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800fb70:	f8b2 006a 	ldrh.w	r0, [r2, #106]	; 0x6a
 800fb74:	87a0      	strh	r0, [r4, #60]	; 0x3c
      memcpy((void *)&app->rsp.data[2], (void *)&pMd80dev->output.temperature, sizeof(uint8_t));
 800fb76:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 800fb7a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      memcpy((void *)&app->rsp.data[3], (void *)&pMd80dev->output.position, sizeof(float));
 800fb7e:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800fb82:	0112      	lsls	r2, r2, #4
 800fb84:	3250      	adds	r2, #80	; 0x50
 800fb86:	440a      	add	r2, r1
 800fb88:	6850      	ldr	r0, [r2, #4]
 800fb8a:	f8c4 003f 	str.w	r0, [r4, #63]	; 0x3f
      memcpy((void *)&app->rsp.data[7], (void *)&pMd80dev->output.velocity, sizeof(float));
 800fb8e:	6892      	ldr	r2, [r2, #8]
 800fb90:	f8c4 2043 	str.w	r2, [r4, #67]	; 0x43
      memcpy((void *)&app->rsp.data[11], (void *)&pMd80dev->output.torque, sizeof(float));
 800fb94:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800fb98:	0112      	lsls	r2, r2, #4
 800fb9a:	3258      	adds	r2, #88	; 0x58
 800fb9c:	440a      	add	r2, r1
 800fb9e:	6850      	ldr	r0, [r2, #4]
 800fba0:	f8c4 0047 	str.w	r0, [r4, #71]	; 0x47
      memcpy((void *)&app->rsp.data[15], (void *)&pMd80dev->output.encoderPosition, sizeof(float));
 800fba4:	6892      	ldr	r2, [r2, #8]
 800fba6:	f8c4 204b 	str.w	r2, [r4, #75]	; 0x4b
      memcpy((void *)&app->rsp.data[19], (void *)&pMd80dev->output.encoderVelocity, sizeof(float));
 800fbaa:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800fbae:	011b      	lsls	r3, r3, #4
 800fbb0:	3360      	adds	r3, #96	; 0x60
 800fbb2:	440b      	add	r3, r1
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	f8c4 304f 	str.w	r3, [r4, #79]	; 0x4f
      app->rsp.size = 23u;
 800fbba:	2317      	movs	r3, #23
 800fbbc:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   }

   /* Update to object. */
   Obj.md80_Respond.md80_dev_no = app->rsp.motorId;
 800fbc0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800fbc4:	4d2b      	ldr	r5, [pc, #172]	; (800fc74 <canIdle_UpdateResp+0x120>)
 800fbc6:	f885 3124 	strb.w	r3, [r5, #292]	; 0x124
   Obj.md80_Respond.command = app->rsp.frId;
 800fbca:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800fbce:	f885 3125 	strb.w	r3, [r5, #293]	; 0x125
   Obj.md80_Respond.size = app->rsp.size;
 800fbd2:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 800fbd6:	f885 3126 	strb.w	r3, [r5, #294]	; 0x126
   Obj.md80_Respond.timestamp = xTaskGetTickCount()/portTICK_PERIOD_MS;
 800fbda:	f7f9 fb83 	bl	80092e4 <xTaskGetTickCount>
 800fbde:	4606      	mov	r6, r0
 800fbe0:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
   //cdc_printf("response@%u: %d\r\n", GetCycleCount(), Obj.md80_Respond.command);
   cdc_printf("@%u\t[canM response]:\t%s\r\n", Obj.md80_Respond.timestamp, busFrameTypeName(Obj.md80_Respond.command));
 800fbe4:	f895 0125 	ldrb.w	r0, [r5, #293]	; 0x125
 800fbe8:	f7ff ff7a 	bl	800fae0 <busFrameTypeName>
 800fbec:	4602      	mov	r2, r0
 800fbee:	4631      	mov	r1, r6
 800fbf0:	4821      	ldr	r0, [pc, #132]	; (800fc78 <canIdle_UpdateResp+0x124>)
 800fbf2:	f7f0 ff87 	bl	8000b04 <cdc_printf>
   memcpy((void *)&Obj.md80_Respond.dataRet0, (void *)&app->rsp.data[0], 4);
 800fbf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fbf8:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
   memcpy((void *)&Obj.md80_Respond.dataRet1, (void *)&app->rsp.data[4], 4);
 800fbfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fbfe:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
   memcpy((void *)&Obj.md80_Respond.dataRet2, (void *)&app->rsp.data[8], 4);
 800fc02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc04:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
   memcpy((void *)&Obj.md80_Respond.dataRet3, (void *)&app->rsp.data[12], 4);
 800fc08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fc0a:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
   memcpy((void *)&Obj.md80_Respond.dataRet4, (void *)&app->rsp.data[16], 4);
 800fc0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800fc10:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
}
 800fc14:	bd70      	pop	{r4, r5, r6, pc}
      if (app->numMd80Det > 0u)
 800fc16:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 800fc1a:	b330      	cbz	r0, 800fc6a <canIdle_UpdateResp+0x116>
         for (iter = 0u; iter < app->numMd80Det; iter++)
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	e010      	b.n	800fc42 <canIdle_UpdateResp+0xee>
            Obj.md80_addrs[iter] = (uint32_t)app->rsp.data[iter * 2u] + ((uint32_t)app->rsp.data[(iter * 2u) + 1u] << 8);
 800fc20:	005a      	lsls	r2, r3, #1
 800fc22:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 800fc26:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 800fc2a:	3201      	adds	r2, #1
 800fc2c:	4422      	add	r2, r4
 800fc2e:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800fc32:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 800fc36:	4a0f      	ldr	r2, [pc, #60]	; (800fc74 <canIdle_UpdateResp+0x120>)
 800fc38:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fc3c:	6051      	str	r1, [r2, #4]
         for (iter = 0u; iter < app->numMd80Det; iter++)
 800fc3e:	3301      	adds	r3, #1
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	4298      	cmp	r0, r3
 800fc44:	d8ec      	bhi.n	800fc20 <canIdle_UpdateResp+0xcc>
 800fc46:	e006      	b.n	800fc56 <canIdle_UpdateResp+0x102>
            Obj.md80_addrs[iter] = 0U;
 800fc48:	4a0a      	ldr	r2, [pc, #40]	; (800fc74 <canIdle_UpdateResp+0x120>)
 800fc4a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fc4e:	2100      	movs	r1, #0
 800fc50:	6051      	str	r1, [r2, #4]
         for (;iter < CANIDLE_TOTAL_DEV_SUPPORT; iter++)
 800fc52:	3301      	adds	r3, #1
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	2b07      	cmp	r3, #7
 800fc58:	d9f6      	bls.n	800fc48 <canIdle_UpdateResp+0xf4>
 800fc5a:	e7b1      	b.n	800fbc0 <canIdle_UpdateResp+0x6c>
            Obj.md80_addrs[iter] = 0U;
 800fc5c:	4b05      	ldr	r3, [pc, #20]	; (800fc74 <canIdle_UpdateResp+0x120>)
 800fc5e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800fc62:	2200      	movs	r2, #0
 800fc64:	605a      	str	r2, [r3, #4]
         for (iter = 0u; iter < CANIDLE_TOTAL_DEV_SUPPORT; iter++)
 800fc66:	3001      	adds	r0, #1
 800fc68:	b2c0      	uxtb	r0, r0
 800fc6a:	2807      	cmp	r0, #7
 800fc6c:	d9f6      	bls.n	800fc5c <canIdle_UpdateResp+0x108>
 800fc6e:	e7a7      	b.n	800fbc0 <canIdle_UpdateResp+0x6c>
 800fc70:	2000733c 	.word	0x2000733c
 800fc74:	2000d4c0 	.word	0x2000d4c0
 800fc78:	08013978 	.word	0x08013978

0800fc7c <canIdle_Command_Exit>:
{
 800fc7c:	b510      	push	{r4, lr}
 800fc7e:	4604      	mov	r4, r0
   taskENTER_CRITICAL();
 800fc80:	f7fa f988 	bl	8009f94 <vPortEnterCritical>
   app->rsp.frId = app->cmd.frId;
 800fc84:	7fe3      	ldrb	r3, [r4, #31]
 800fc86:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   app->rsp.motorId = app->cmd.motorId;
 800fc8a:	7fa3      	ldrb	r3, [r4, #30]
 800fc8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   app->rsp.size = app->cmd.size;
 800fc90:	f894 3020 	ldrb.w	r3, [r4, #32]
 800fc94:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   canIdle_UpdateResp(app);
 800fc98:	4620      	mov	r0, r4
 800fc9a:	f7ff ff5b 	bl	800fb54 <canIdle_UpdateResp>
   taskEXIT_CRITICAL();
 800fc9e:	f7fa f99b 	bl	8009fd8 <vPortExitCritical>
}
 800fca2:	2000      	movs	r0, #0
 800fca4:	bd10      	pop	{r4, pc}
	...

0800fca8 <canIdle_UpdateCmd>:

void canIdle_UpdateCmd (uint8_t md80id, uint8_t command, uint8_t size, uint8_t *cmd)
{
 800fca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcac:	4605      	mov	r5, r0
 800fcae:	460e      	mov	r6, r1
 800fcb0:	4617      	mov	r7, r2
 800fcb2:	4698      	mov	r8, r3
   isMd80IdExist = true;

   if (true == isMd80IdExist)
   {
      /* Enter critical section. */
      taskENTER_CRITICAL();
 800fcb4:	f7fa f96e 	bl	8009f94 <vPortEnterCritical>

      /* Save the cmd. */
      pCanIdleM->hostReq.motorId = md80id;
 800fcb8:	4c0d      	ldr	r4, [pc, #52]	; (800fcf0 <canIdle_UpdateCmd+0x48>)
 800fcba:	7025      	strb	r5, [r4, #0]
      pCanIdleM->hostReq.frId = command;
 800fcbc:	7066      	strb	r6, [r4, #1]
      pCanIdleM->hostReq.size = size;
 800fcbe:	70a7      	strb	r7, [r4, #2]
      memcpy((uint8_t *)&pCanIdleM->hostReq.data[0], (uint8_t *)cmd, size);
 800fcc0:	463a      	mov	r2, r7
 800fcc2:	4641      	mov	r1, r8
 800fcc4:	1ce0      	adds	r0, r4, #3
 800fcc6:	f002 f89d 	bl	8011e04 <memcpy>

      /* Set flag determine it having new command.*/
      pCanIdleM->isNewCommand = true;
 800fcca:	2301      	movs	r3, #1
 800fccc:	7763      	strb	r3, [r4, #29]

      /* Exit critical section. */
      taskEXIT_CRITICAL();
 800fcce:	f7fa f983 	bl	8009fd8 <vPortExitCritical>
      cdc_printf("@%u\t[canM command]:\t%s for %d\r\n", Obj.md80_Respond.timestamp, busFrameTypeName(command), md80id);
 800fcd2:	4b08      	ldr	r3, [pc, #32]	; (800fcf4 <canIdle_UpdateCmd+0x4c>)
 800fcd4:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 800fcd8:	4630      	mov	r0, r6
 800fcda:	f7ff ff01 	bl	800fae0 <busFrameTypeName>
 800fcde:	4602      	mov	r2, r0
 800fce0:	462b      	mov	r3, r5
 800fce2:	4621      	mov	r1, r4
 800fce4:	4804      	ldr	r0, [pc, #16]	; (800fcf8 <canIdle_UpdateCmd+0x50>)
 800fce6:	f7f0 ff0d 	bl	8000b04 <cdc_printf>
   }
   else
   {
      /* Do nothing. */
   }
}
 800fcea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcee:	bf00      	nop
 800fcf0:	200099bc 	.word	0x200099bc
 800fcf4:	2000d4c0 	.word	0x2000d4c0
 800fcf8:	08013994 	.word	0x08013994

0800fcfc <canIdle_Init>:

void canIdle_Init()
{
 800fcfc:	b508      	push	{r3, lr}
   /* Configuration the baudrate of CAN to 1M. */
   canM_SetNewBaudrate(CAN_BAUD_1M);
 800fcfe:	2001      	movs	r0, #1
 800fd00:	f000 f96a 	bl	800ffd8 <canM_SetNewBaudrate>
}
 800fd04:	bd08      	pop	{r3, pc}
	...

0800fd08 <canIdle_MainFunction>:
	}
	return ret;
}

void canIdle_MainFunction()
{
 800fd08:	b510      	push	{r4, lr}
   tCanIdle_Data * const pCanIdleM = (tCanIdle_Data *)&canIdle_Module;
   tCanIdle_States nextState = pCanIdleM->state;
 800fd0a:	4b12      	ldr	r3, [pc, #72]	; (800fd54 <canIdle_MainFunction+0x4c>)
 800fd0c:	7edc      	ldrb	r4, [r3, #27]

   /* Update data control. */
   //if(nextState != CANIDLE_IDLE) cdc_printf("[can2motor]@%u:\t %s\n",GetCycleCount(), tCanIdle_StatesName(nextState));
   canIdle_UpdateDataControl();
 800fd0e:	f7ff f887 	bl	800ee20 <canIdle_UpdateDataControl>

   /* Run mode. */
   switch (nextState)
 800fd12:	2c03      	cmp	r4, #3
 800fd14:	d818      	bhi.n	800fd48 <canIdle_MainFunction+0x40>
 800fd16:	e8df f004 	tbb	[pc, r4]
 800fd1a:	0b02      	.short	0x0b02
 800fd1c:	130f      	.short	0x130f
   {
   case CANIDLE_IDLE:
      nextState = canIdle_EventHandle(pCanIdleM);
 800fd1e:	480d      	ldr	r0, [pc, #52]	; (800fd54 <canIdle_MainFunction+0x4c>)
 800fd20:	f7ff f856 	bl	800edd0 <canIdle_EventHandle>
   default:
      nextState = CANIDLE_IDLE;
      break;
   }

   pCanIdleM->state = nextState;
 800fd24:	4b0b      	ldr	r3, [pc, #44]	; (800fd54 <canIdle_MainFunction+0x4c>)
 800fd26:	76d8      	strb	r0, [r3, #27]

   if (CANIDLE_RUN == pCanIdleM->workState)
 800fd28:	7f1b      	ldrb	r3, [r3, #28]
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d00e      	beq.n	800fd4c <canIdle_MainFunction+0x44>
   {
	  //we switched to running mode and from now on commands will run constantly - position/impedance commands only change the targets.
      canIdle_Control(pCanIdleM);
   }
}
 800fd2e:	bd10      	pop	{r4, pc}
      nextState = canIdle_Command_Enter(pCanIdleM);
 800fd30:	4808      	ldr	r0, [pc, #32]	; (800fd54 <canIdle_MainFunction+0x4c>)
 800fd32:	f7ff f855 	bl	800ede0 <canIdle_Command_Enter>
      break;
 800fd36:	e7f5      	b.n	800fd24 <canIdle_MainFunction+0x1c>
      nextState = canIdle_Command(pCanIdleM);
 800fd38:	4806      	ldr	r0, [pc, #24]	; (800fd54 <canIdle_MainFunction+0x4c>)
 800fd3a:	f7ff fe8b 	bl	800fa54 <canIdle_Command>
      break;
 800fd3e:	e7f1      	b.n	800fd24 <canIdle_MainFunction+0x1c>
      nextState = canIdle_Command_Exit(pCanIdleM);
 800fd40:	4804      	ldr	r0, [pc, #16]	; (800fd54 <canIdle_MainFunction+0x4c>)
 800fd42:	f7ff ff9b 	bl	800fc7c <canIdle_Command_Exit>
      break;
 800fd46:	e7ed      	b.n	800fd24 <canIdle_MainFunction+0x1c>
   switch (nextState)
 800fd48:	2000      	movs	r0, #0
 800fd4a:	e7eb      	b.n	800fd24 <canIdle_MainFunction+0x1c>
      canIdle_Control(pCanIdleM);
 800fd4c:	4801      	ldr	r0, [pc, #4]	; (800fd54 <canIdle_MainFunction+0x4c>)
 800fd4e:	f7ff fce7 	bl	800f720 <canIdle_Control>
}
 800fd52:	e7ec      	b.n	800fd2e <canIdle_MainFunction+0x26>
 800fd54:	200099bc 	.word	0x200099bc

0800fd58 <canM_getDeviceId>:
 * @param id - Device Can id.
 * 
 * @return the device ID as a uint8_t value.
 */
static uint8_t canM_getDeviceId(tCanM_DeviceId id)
{
 800fd58:	4601      	mov	r1, r0
   uint8_t iter = 0u;
   uint8_t deviceId = CAN_DEV_ID_INVALID;

   for (iter = 0u; iter < CAN_DEV_TOTAL; iter++)
 800fd5a:	2000      	movs	r0, #0
 800fd5c:	e001      	b.n	800fd62 <canM_getDeviceId+0xa>
 800fd5e:	3001      	adds	r0, #1
 800fd60:	b2c0      	uxtb	r0, r0
 800fd62:	2807      	cmp	r0, #7
 800fd64:	d80a      	bhi.n	800fd7c <canM_getDeviceId+0x24>
   {
      if ((id == canM_Devices[iter].deviceId) && (CAN_DEV_ID_INVALID != canM_Devices[iter].deviceId))
 800fd66:	f44f 7316 	mov.w	r3, #600	; 0x258
 800fd6a:	fb00 f303 	mul.w	r3, r0, r3
 800fd6e:	4a04      	ldr	r2, [pc, #16]	; (800fd80 <canM_getDeviceId+0x28>)
 800fd70:	5cd3      	ldrb	r3, [r2, r3]
 800fd72:	428b      	cmp	r3, r1
 800fd74:	d1f3      	bne.n	800fd5e <canM_getDeviceId+0x6>
 800fd76:	2b0a      	cmp	r3, #10
 800fd78:	d0f1      	beq.n	800fd5e <canM_getDeviceId+0x6>
 800fd7a:	e000      	b.n	800fd7e <canM_getDeviceId+0x26>
   uint8_t deviceId = CAN_DEV_ID_INVALID;
 800fd7c:	200a      	movs	r0, #10
         break;
      }
   }

   return (deviceId);
}
 800fd7e:	4770      	bx	lr
 800fd80:	2000016c 	.word	0x2000016c

0800fd84 <canM_N_USData_indication>:
                                    uint32_t size,
                                    CAN_ISO_TP_RESAULT error)
{
   int ret = 0;

   if (N_TIMEOUT_CR == error)
 800fd84:	2b03      	cmp	r3, #3
 800fd86:	d001      	beq.n	800fd8c <canM_N_USData_indication+0x8>
   {
      canM_Module.local.state = CANM_IDLE;
   }

   return ret;
}
 800fd88:	2000      	movs	r0, #0
 800fd8a:	4770      	bx	lr
      canM_Module.local.state = CANM_IDLE;
 800fd8c:	4b02      	ldr	r3, [pc, #8]	; (800fd98 <canM_N_USData_indication+0x14>)
 800fd8e:	2200      	movs	r2, #0
 800fd90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800fd94:	e7f8      	b.n	800fd88 <canM_N_USData_indication+0x4>
 800fd96:	bf00      	nop
 800fd98:	2000142c 	.word	0x2000142c

0800fd9c <canM_N_USData_confirm>:
                                 uint32_t size,
                                 CAN_ISO_TP_RESAULT error)
{
   int ret = 0;

   if (N_TIMEOUT_A == error)
 800fd9c:	2b01      	cmp	r3, #1
 800fd9e:	d001      	beq.n	800fda4 <canM_N_USData_confirm+0x8>
   {
      canM_Module.local.state = CANM_IDLE;
   }

   return ret;
}
 800fda0:	2000      	movs	r0, #0
 800fda2:	4770      	bx	lr
      canM_Module.local.state = CANM_IDLE;
 800fda4:	4b02      	ldr	r3, [pc, #8]	; (800fdb0 <canM_N_USData_confirm+0x14>)
 800fda6:	2200      	movs	r2, #0
 800fda8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800fdac:	e7f8      	b.n	800fda0 <canM_N_USData_confirm+0x4>
 800fdae:	bf00      	nop
 800fdb0:	2000142c 	.word	0x2000142c

0800fdb4 <canM_WaitingEvent>:
 * @param module A pointer to a structure of type tCanM_Module, which contains various variables and flags related to the CAN module.
 * 
 * @return the value of the variable "nextState".
 */
static tCanM_State canM_WaitingEvent(tCanM_Module *const module)
{
 800fdb4:	b538      	push	{r3, r4, r5, lr}
   tCanM_State nextState = CANM_IDLE;
   uint8_t idx = CAN_DEV_ID_INVALID;

   if (true == module->local.isNewReq)
 800fdb6:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 800fdba:	b19b      	cbz	r3, 800fde4 <canM_WaitingEvent+0x30>
 800fdbc:	4604      	mov	r4, r0
   {
      /* Reset flag. */
      module->local.isNewReq = false;
 800fdbe:	2500      	movs	r5, #0
 800fdc0:	f880 5049 	strb.w	r5, [r0, #73]	; 0x49
      module->local.isRecMsg = false;
 800fdc4:	f880 504a 	strb.w	r5, [r0, #74]	; 0x4a
      module->output.isNewResp = false;
 800fdc8:	f880 511a 	strb.w	r5, [r0, #282]	; 0x11a

      /* Verify the can id before module jump to next state. */
      idx = canM_getDeviceId (module->input.id);
 800fdcc:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800fdd0:	f7ff ffc2 	bl	800fd58 <canM_getDeviceId>
      module->local.isFunction = false;
 800fdd4:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b

      if (CAN_DEV_ID_INVALID != idx)
 800fdd8:	280a      	cmp	r0, #10
 800fdda:	d005      	beq.n	800fde8 <canM_WaitingEvent+0x34>
      {
         module->local.idx = idx;
 800fddc:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
         /* Change mode to next state. */
         nextState = CANM_PROCESS_ENTRY;
 800fde0:	2001      	movs	r0, #1
 800fde2:	e000      	b.n	800fde6 <canM_WaitingEvent+0x32>
   tCanM_State nextState = CANM_IDLE;
 800fde4:	2000      	movs	r0, #0
      }
   }

   return (nextState);
}
 800fde6:	bd38      	pop	{r3, r4, r5, pc}
   tCanM_State nextState = CANM_IDLE;
 800fde8:	2000      	movs	r0, #0
 800fdea:	e7fc      	b.n	800fde6 <canM_WaitingEvent+0x32>

0800fdec <canM_Process>:
}

static tCanM_State canM_Process (tCanM_Module *const module)
{
   tCanM_State nextState = CANM_PROCESS;
   uint8_t idx = module->local.idx;
 800fdec:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c

   if (CAN_DEV_ID_INVALID != idx)
 800fdf0:	2b0a      	cmp	r3, #10
 800fdf2:	d007      	beq.n	800fe04 <canM_Process+0x18>
   {
      /* FIXME - Consider add the code to manage the state timeout, device can not send data and receive data from
      Device can on bus after command sent. */

      if (true == module->local.isRecMsg)
 800fdf4:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 800fdf8:	b133      	cbz	r3, 800fe08 <canM_Process+0x1c>
      {
         /* Update new state. */
         nextState = CANM_PROCESS_POST;

         /* Reset flag. */
         module->local.isRecMsg = false;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
         nextState = CANM_PROCESS_POST;
 800fe00:	2003      	movs	r0, #3
 800fe02:	4770      	bx	lr
   tCanM_State nextState = CANM_PROCESS;
 800fe04:	2002      	movs	r0, #2
 800fe06:	4770      	bx	lr
 800fe08:	2002      	movs	r0, #2
//      }
   }


   return (nextState);
}
 800fe0a:	4770      	bx	lr

0800fe0c <canM_FDCanSend>:
{
 800fe0c:	b530      	push	{r4, r5, lr}
 800fe0e:	b08b      	sub	sp, #44	; 0x2c
 800fe10:	4605      	mov	r5, r0
 800fe12:	460c      	mov	r4, r1
   FDCAN_TxHeaderTypeDef txHeader = {0};
 800fe14:	2224      	movs	r2, #36	; 0x24
 800fe16:	2100      	movs	r1, #0
 800fe18:	a801      	add	r0, sp, #4
 800fe1a:	f001 ff35 	bl	8011c88 <memset>
   txHeader.Identifier = msg->id.id;
 800fe1e:	6823      	ldr	r3, [r4, #0]
 800fe20:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800fe24:	9301      	str	r3, [sp, #4]
   txHeader.IdType = (true == msg->id.isExt) ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 800fe26:	78e3      	ldrb	r3, [r4, #3]
 800fe28:	065a      	lsls	r2, r3, #25
 800fe2a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800fe2e:	9202      	str	r2, [sp, #8]
   txHeader.DataLength = (FDCAN_DLC_BYTES_0 | ((uint32_t)CANM_DLC_OFF(msg->dlc)));
 800fe30:	7922      	ldrb	r2, [r4, #4]
 800fe32:	0412      	lsls	r2, r2, #16
 800fe34:	9204      	str	r2, [sp, #16]
   txHeader.FDFormat = (true == msg->id.isCANFD) ? FDCAN_FD_CAN : FDCAN_CLASSIC_CAN;
 800fe36:	03da      	lsls	r2, r3, #15
 800fe38:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800fe3c:	9207      	str	r2, [sp, #28]
   txHeader.TxFrameType = (true == msg->id.isRemote) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 800fe3e:	059b      	lsls	r3, r3, #22
 800fe40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fe44:	9303      	str	r3, [sp, #12]
   if (HAL_OK == HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, (uint8_t *)msg->data))
 800fe46:	1d62      	adds	r2, r4, #5
 800fe48:	a901      	add	r1, sp, #4
 800fe4a:	4807      	ldr	r0, [pc, #28]	; (800fe68 <canM_FDCanSend+0x5c>)
 800fe4c:	f7f1 ff56 	bl	8001cfc <HAL_FDCAN_AddMessageToTxFifoQ>
 800fe50:	b928      	cbnz	r0, 800fe5e <canM_FDCanSend+0x52>
      if (NULL != link->init_info.print_debug)
 800fe52:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800fe54:	b133      	cbz	r3, 800fe64 <canM_FDCanSend+0x58>
         link->init_info.print_debug(canM_msg);
 800fe56:	4805      	ldr	r0, [pc, #20]	; (800fe6c <canM_FDCanSend+0x60>)
 800fe58:	4798      	blx	r3
      ret = OP_OK;
 800fe5a:	2000      	movs	r0, #0
 800fe5c:	e000      	b.n	800fe60 <canM_FDCanSend+0x54>
   int ret = OP_NOK;
 800fe5e:	2001      	movs	r0, #1
}
 800fe60:	b00b      	add	sp, #44	; 0x2c
 800fe62:	bd30      	pop	{r4, r5, pc}
      ret = OP_OK;
 800fe64:	2000      	movs	r0, #0
   return (ret);
 800fe66:	e7fb      	b.n	800fe60 <canM_FDCanSend+0x54>
 800fe68:	20001ca0 	.word	0x20001ca0
 800fe6c:	20009a14 	.word	0x20009a14

0800fe70 <canM_getCurrentTimeInMillis>:
{
 800fe70:	b508      	push	{r3, lr}
   uint32_t milliseconds = (uint32_t)(xTaskGetTickCount()/portTICK_PERIOD_MS);
 800fe72:	f7f9 fa37 	bl	80092e4 <xTaskGetTickCount>
}
 800fe76:	bd08      	pop	{r3, pc}

0800fe78 <canM_pollEvent>:
{
 800fe78:	b510      	push	{r4, lr}
   uint8_t idx = module->input.id;
 800fe7a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
      currTimeMs = canM_getCurrentTimeInMillis();
 800fe7e:	f7ff fff7 	bl	800fe70 <canM_getCurrentTimeInMillis>
 800fe82:	4601      	mov	r1, r0
      link = (can_iso_tp_link_t_p)&canM_Devices[idx].local;
 800fe84:	f44f 7316 	mov.w	r3, #600	; 0x258
 800fe88:	fb03 f404 	mul.w	r4, r3, r4
 800fe8c:	3438      	adds	r4, #56	; 0x38
 800fe8e:	4b03      	ldr	r3, [pc, #12]	; (800fe9c <canM_pollEvent+0x24>)
 800fe90:	441c      	add	r4, r3
      iso_can_tp_poll(link, currTimeMs);
 800fe92:	1d20      	adds	r0, r4, #4
 800fe94:	f7fb f858 	bl	800af48 <iso_can_tp_poll>
}
 800fe98:	bd10      	pop	{r4, pc}
 800fe9a:	bf00      	nop
 800fe9c:	2000016c 	.word	0x2000016c

0800fea0 <canM_ProcessEntry>:
{
 800fea0:	b508      	push	{r3, lr}
   uint8_t idx = module->local.idx;
 800fea2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   uint8_t isFunctionId = (uint8_t)module->local.isFunction;
 800fea6:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
   if (CAN_DEV_ID_INVALID != idx)
 800feaa:	2b0a      	cmp	r3, #10
 800feac:	d101      	bne.n	800feb2 <canM_ProcessEntry+0x12>
   tCanM_State nextState = CANM_PROCESS_ENTRY;
 800feae:	2001      	movs	r0, #1
}
 800feb0:	bd08      	pop	{r3, pc}
      link = (can_iso_tp_link_t_p)&canM_Devices[idx].local;
 800feb2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800feb6:	fb02 fc03 	mul.w	ip, r2, r3
 800feba:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 800febe:	4b05      	ldr	r3, [pc, #20]	; (800fed4 <canM_ProcessEntry+0x34>)
 800fec0:	449c      	add	ip, r3
      if (OP_OK != iso_can_tp_N_USData_request (link, isFunctionId, (uint8_t *)module->input.dataReq, module->input.size))
 800fec2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800fec6:	1d02      	adds	r2, r0, #4
 800fec8:	f10c 0004 	add.w	r0, ip, #4
 800fecc:	f7fb f978 	bl	800b1c0 <iso_can_tp_N_USData_request>
      nextState = CANM_PROCESS;
 800fed0:	2002      	movs	r0, #2
 800fed2:	e7ed      	b.n	800feb0 <canM_ProcessEntry+0x10>
 800fed4:	2000016c 	.word	0x2000016c

0800fed8 <canM_ProcessPost>:

static tCanM_State canM_ProcessPost(tCanM_Module *const module)
{
 800fed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feda:	4605      	mov	r5, r0
   tCanM_State nextState = CANM_PROCESS_POST;
   can_iso_tp_link_t_p link = NULL;
   uint8_t idx = module->local.idx;
 800fedc:	f890 604c 	ldrb.w	r6, [r0, #76]	; 0x4c

   /* Get the link and config of device. */
   link = (can_iso_tp_link_t_p)&canM_Devices[idx].local;
 800fee0:	f44f 7416 	mov.w	r4, #600	; 0x258
 800fee4:	fb06 f404 	mul.w	r4, r6, r4
 800fee8:	3438      	adds	r4, #56	; 0x38
 800feea:	4b20      	ldr	r3, [pc, #128]	; (800ff6c <canM_ProcessPost+0x94>)
 800feec:	441c      	add	r4, r3
 800feee:	3404      	adds	r4, #4

   if (OP_OK == iso_can_tp_L_Data_indication(link, (struct CAN_msg *)&module->local.canResp))
 800fef0:	f100 0790 	add.w	r7, r0, #144	; 0x90
 800fef4:	4639      	mov	r1, r7
 800fef6:	4620      	mov	r0, r4
 800fef8:	f7fb f8ec 	bl	800b0d4 <iso_can_tp_L_Data_indication>
 800fefc:	b108      	cbz	r0, 800ff02 <canM_ProcessPost+0x2a>

   /* Back to IDLE state. */
   nextState = CANM_IDLE;

   return (nextState);
}
 800fefe:	2000      	movs	r0, #0
 800ff00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      iso_can_tp_L_Data_confirm(link, (struct CAN_msg *)&module->local.canResp, N_OK);
 800ff02:	2200      	movs	r2, #0
 800ff04:	4639      	mov	r1, r7
 800ff06:	4620      	mov	r0, r4
 800ff08:	f7fb f868 	bl	800afdc <iso_can_tp_L_Data_confirm>
      taskENTER_CRITICAL();
 800ff0c:	f7fa f842 	bl	8009f94 <vPortEnterCritical>
      memcpy((uint8_t *)module->output.dataResp, (uint8_t *)module->local.canResp.data, dlc2len(module->local.canResp.dlc));
 800ff10:	f105 04d8 	add.w	r4, r5, #216	; 0xd8
 800ff14:	f105 0795 	add.w	r7, r5, #149	; 0x95
 800ff18:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
 800ff1c:	f7fa ff38 	bl	800ad90 <dlc2len>
 800ff20:	4602      	mov	r2, r0
 800ff22:	4639      	mov	r1, r7
 800ff24:	4620      	mov	r0, r4
 800ff26:	f001 ff6d 	bl	8011e04 <memcpy>
      module->output.size = dlc2len(module->local.canResp.dlc);
 800ff2a:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
 800ff2e:	f7fa ff2f 	bl	800ad90 <dlc2len>
 800ff32:	f885 0118 	strb.w	r0, [r5, #280]	; 0x118
      module->output.id = canM_Devices[idx].deviceId;
 800ff36:	f44f 7416 	mov.w	r4, #600	; 0x258
 800ff3a:	fb04 f306 	mul.w	r3, r4, r6
 800ff3e:	4a0b      	ldr	r2, [pc, #44]	; (800ff6c <canM_ProcessPost+0x94>)
 800ff40:	5cd3      	ldrb	r3, [r2, r3]
 800ff42:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
      module->output.isNewResp = true;
 800ff46:	2301      	movs	r3, #1
 800ff48:	f885 311a 	strb.w	r3, [r5, #282]	; 0x11a
      taskEXIT_CRITICAL();
 800ff4c:	f7fa f844 	bl	8009fd8 <vPortExitCritical>
      if (NULL != module->dev[idx].funIrq)
 800ff50:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 800ff54:	fb04 3306 	mla	r3, r4, r6, r3
 800ff58:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d0ce      	beq.n	800fefe <canM_ProcessPost+0x26>
         module->dev[idx].funIrq(module->local.dataResp, module->output.size);
 800ff60:	f895 1118 	ldrb.w	r1, [r5, #280]	; 0x118
 800ff64:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 800ff68:	4798      	blx	r3
 800ff6a:	e7c8      	b.n	800fefe <canM_ProcessPost+0x26>
 800ff6c:	2000016c 	.word	0x2000016c

0800ff70 <canM_Start>:

   return ret;
}

bool canM_Start (void)
{
 800ff70:	b510      	push	{r4, lr}
   bool ret = false;
   tCanM_Module * pModule = (tCanM_Module *)&canM_Module;

   /* Enter critical section. */
   taskENTER_CRITICAL();
 800ff72:	f7fa f80f 	bl	8009f94 <vPortEnterCritical>

   /* Active notify when receive new msg. */
   HAL_FDCAN_ActivateNotification (pModule->config.phfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800ff76:	4c0b      	ldr	r4, [pc, #44]	; (800ffa4 <canM_Start+0x34>)
 800ff78:	2200      	movs	r2, #0
 800ff7a:	2101      	movs	r1, #1
 800ff7c:	6820      	ldr	r0, [r4, #0]
 800ff7e:	f7f2 f817 	bl	8001fb0 <HAL_FDCAN_ActivateNotification>

   /* Start FDCAN core. */
   if (HAL_OK == HAL_FDCAN_Start (pModule->config.phfdcan))
 800ff82:	6820      	ldr	r0, [r4, #0]
 800ff84:	f7f1 fe5e 	bl	8001c44 <HAL_FDCAN_Start>
 800ff88:	b948      	cbnz	r0, 800ff9e <canM_Start+0x2e>
   {
      /* Reset state of module to Idle. */
      pModule->local.isNewReq = false;
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
      pModule->local.state = CANM_IDLE;
 800ff90:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48

      ret = true;
 800ff94:	2401      	movs	r4, #1
   }

   /* Exit critical section. */
   taskEXIT_CRITICAL();
 800ff96:	f7fa f81f 	bl	8009fd8 <vPortExitCritical>

   return (ret);
}
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	bd10      	pop	{r4, pc}
   bool ret = false;
 800ff9e:	2400      	movs	r4, #0
 800ffa0:	e7f9      	b.n	800ff96 <canM_Start+0x26>
 800ffa2:	bf00      	nop
 800ffa4:	2000142c 	.word	0x2000142c

0800ffa8 <canM_Stop>:

bool canM_Stop (void)
{
 800ffa8:	b510      	push	{r4, lr}
   bool ret = false;
   tCanM_Module * pModule = (tCanM_Module *)&canM_Module;

   /* Enter critical section. */
   taskENTER_CRITICAL();
 800ffaa:	f7f9 fff3 	bl	8009f94 <vPortEnterCritical>

   if (HAL_OK == HAL_FDCAN_Stop (pModule->config.phfdcan))
 800ffae:	4b09      	ldr	r3, [pc, #36]	; (800ffd4 <canM_Stop+0x2c>)
 800ffb0:	6818      	ldr	r0, [r3, #0]
 800ffb2:	f7f1 fe5e 	bl	8001c72 <HAL_FDCAN_Stop>
 800ffb6:	b950      	cbnz	r0, 800ffce <canM_Stop+0x26>
   {
      /* Reset state of module to Idle. */
      pModule->local.isNewReq = false;
 800ffb8:	4b06      	ldr	r3, [pc, #24]	; (800ffd4 <canM_Stop+0x2c>)
 800ffba:	2200      	movs	r2, #0
 800ffbc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
      pModule->local.state = CANM_IDLE;
 800ffc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

      ret = true;
 800ffc4:	2401      	movs	r4, #1
   }

   /* Exit critical section. */
   taskEXIT_CRITICAL();
 800ffc6:	f7fa f807 	bl	8009fd8 <vPortExitCritical>

   return (ret);
}
 800ffca:	4620      	mov	r0, r4
 800ffcc:	bd10      	pop	{r4, pc}
   bool ret = false;
 800ffce:	2400      	movs	r4, #0
 800ffd0:	e7f9      	b.n	800ffc6 <canM_Stop+0x1e>
 800ffd2:	bf00      	nop
 800ffd4:	2000142c 	.word	0x2000142c

0800ffd8 <canM_SetNewBaudrate>:
{
 800ffd8:	b570      	push	{r4, r5, r6, lr}
   if (pModule->local.state == CANM_IDLE)
 800ffda:	4b1d      	ldr	r3, [pc, #116]	; (8010050 <canM_SetNewBaudrate+0x78>)
 800ffdc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d12f      	bne.n	8010044 <canM_SetNewBaudrate+0x6c>
 800ffe4:	4604      	mov	r4, r0
      switch (newBaudrateMbps)
 800ffe6:	2808      	cmp	r0, #8
 800ffe8:	bf94      	ite	ls
 800ffea:	2600      	movls	r6, #0
 800ffec:	2601      	movhi	r6, #1
 800ffee:	bb66      	cbnz	r6, 801004a <canM_SetNewBaudrate+0x72>
 800fff0:	f44f 709b 	mov.w	r0, #310	; 0x136
 800fff4:	40e0      	lsrs	r0, r4
 800fff6:	f010 0501 	ands.w	r5, r0, #1
 800fffa:	d024      	beq.n	8010046 <canM_SetNewBaudrate+0x6e>
         taskENTER_CRITICAL();
 800fffc:	f7f9 ffca 	bl	8009f94 <vPortEnterCritical>
         canM_Stop();
 8010000:	f7ff ffd2 	bl	800ffa8 <canM_Stop>
         pModule->config.phfdcan->Init.NominalPrescaler = pBusTiming[newBaudrateMbps].nominal.prescaler;
 8010004:	0122      	lsls	r2, r4, #4
 8010006:	4b13      	ldr	r3, [pc, #76]	; (8010054 <canM_SetNewBaudrate+0x7c>)
 8010008:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801000c:	4910      	ldr	r1, [pc, #64]	; (8010050 <canM_SetNewBaudrate+0x78>)
 801000e:	6808      	ldr	r0, [r1, #0]
 8010010:	5a9b      	ldrh	r3, [r3, r2]
 8010012:	6143      	str	r3, [r0, #20]
         pModule->config.phfdcan->Init.NominalSyncJumpWidth = pBusTiming[newBaudrateMbps].nominal.syncJumpWidth;
 8010014:	8863      	ldrh	r3, [r4, #2]
 8010016:	6183      	str	r3, [r0, #24]
         pModule->config.phfdcan->Init.NominalTimeSeg1 = pBusTiming[newBaudrateMbps].nominal.timeSeq1;
 8010018:	88a3      	ldrh	r3, [r4, #4]
 801001a:	61c3      	str	r3, [r0, #28]
         pModule->config.phfdcan->Init.NominalTimeSeg2 = pBusTiming[newBaudrateMbps].nominal.timeSeq2;
 801001c:	88e3      	ldrh	r3, [r4, #6]
 801001e:	6203      	str	r3, [r0, #32]
         pModule->config.phfdcan->Init.DataPrescaler = pBusTiming[newBaudrateMbps].data.prescaler;
 8010020:	8923      	ldrh	r3, [r4, #8]
 8010022:	6243      	str	r3, [r0, #36]	; 0x24
         pModule->config.phfdcan->Init.DataSyncJumpWidth = pBusTiming[newBaudrateMbps].data.syncJumpWidth;
 8010024:	8963      	ldrh	r3, [r4, #10]
 8010026:	6283      	str	r3, [r0, #40]	; 0x28
         pModule->config.phfdcan->Init.DataTimeSeg1 = pBusTiming[newBaudrateMbps].data.timeSeq1;
 8010028:	89a3      	ldrh	r3, [r4, #12]
 801002a:	62c3      	str	r3, [r0, #44]	; 0x2c
         pModule->config.phfdcan->Init.DataTimeSeg2 = pBusTiming[newBaudrateMbps].data.timeSeq2;
 801002c:	89e3      	ldrh	r3, [r4, #14]
 801002e:	6303      	str	r3, [r0, #48]	; 0x30
         if (HAL_OK != HAL_FDCAN_Init(pModule->config.phfdcan))
 8010030:	f7f1 fc50 	bl	80018d4 <HAL_FDCAN_Init>
 8010034:	b900      	cbnz	r0, 8010038 <canM_SetNewBaudrate+0x60>
 8010036:	462e      	mov	r6, r5
         canM_Start();
 8010038:	f7ff ff9a 	bl	800ff70 <canM_Start>
         taskEXIT_CRITICAL();
 801003c:	f7f9 ffcc 	bl	8009fd8 <vPortExitCritical>
 8010040:	4635      	mov	r5, r6
 8010042:	e000      	b.n	8010046 <canM_SetNewBaudrate+0x6e>
   bool ret = false;
 8010044:	2500      	movs	r5, #0
}
 8010046:	4628      	mov	r0, r5
 8010048:	bd70      	pop	{r4, r5, r6, pc}
      switch (newBaudrateMbps)
 801004a:	2500      	movs	r5, #0
 801004c:	e7fb      	b.n	8010046 <canM_SetNewBaudrate+0x6e>
 801004e:	bf00      	nop
 8010050:	2000142c 	.word	0x2000142c
 8010054:	080139b4 	.word	0x080139b4

08010058 <canM_SetAddrTxRxDev>:

void canM_SetAddrTxRxDev (tCanM_DeviceId id, uint16_t addrTx, uint16_t addrRx)
{
   uint8_t idx = id;

   if (CAN_DEV_ID_INVALID != idx)
 8010058:	280a      	cmp	r0, #10
 801005a:	d010      	beq.n	801007e <canM_SetAddrTxRxDev+0x26>
{
 801005c:	b410      	push	{r4}
   {
      canM_Devices[idx].local.init_info.tx_id.id = addrTx;
 801005e:	4b08      	ldr	r3, [pc, #32]	; (8010080 <canM_SetAddrTxRxDev+0x28>)
 8010060:	f44f 7416 	mov.w	r4, #600	; 0x258
 8010064:	fb04 3300 	mla	r3, r4, r0, r3
 8010068:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 801006a:	f361 041c 	bfi	r4, r1, #0, #29
 801006e:	641c      	str	r4, [r3, #64]	; 0x40
      canM_Devices[idx].local.init_info.rx_id.id = addrRx;
 8010070:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8010072:	f362 011c 	bfi	r1, r2, #0, #29
 8010076:	6459      	str	r1, [r3, #68]	; 0x44
   }
}
 8010078:	f85d 4b04 	ldr.w	r4, [sp], #4
 801007c:	4770      	bx	lr
 801007e:	4770      	bx	lr
 8010080:	2000016c 	.word	0x2000016c

08010084 <canM_GetAddrTxRxDev>:

void canM_GetAddrTxRxDev(tCanM_DeviceId id, uint16_t * addrTx, uint16_t * addrRx)
{
	uint8_t idx = id;

	if (CAN_DEV_ID_INVALID != idx)
 8010084:	280a      	cmp	r0, #10
 8010086:	d00a      	beq.n	801009e <canM_GetAddrTxRxDev+0x1a>
	{
	  *addrTx = (uint16_t)canM_Devices[idx].local.init_info.tx_id.id;
 8010088:	4b05      	ldr	r3, [pc, #20]	; (80100a0 <canM_GetAddrTxRxDev+0x1c>)
 801008a:	f44f 7c16 	mov.w	ip, #600	; 0x258
 801008e:	fb0c 3300 	mla	r3, ip, r0, r3
 8010092:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
 8010096:	8008      	strh	r0, [r1, #0]
	  *addrRx = (uint16_t)canM_Devices[idx].local.init_info.rx_id.id;
 8010098:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801009c:	8013      	strh	r3, [r2, #0]
	}
}
 801009e:	4770      	bx	lr
 80100a0:	2000016c 	.word	0x2000016c

080100a4 <canM_Send>:

bool canM_Send (tCanM_DeviceId id, const uint8_t *payload, uint8_t size)
{
 80100a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bool ret = false;

   if (CANM_IDLE == canM_Module.local.state)
 80100a6:	4b0d      	ldr	r3, [pc, #52]	; (80100dc <canM_Send+0x38>)
 80100a8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80100ac:	b10b      	cbz	r3, 80100b2 <canM_Send+0xe>
   bool ret = false;
 80100ae:	2000      	movs	r0, #0

      ret = true;
   }

   return (ret);
}
 80100b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100b2:	4606      	mov	r6, r0
 80100b4:	460d      	mov	r5, r1
 80100b6:	4614      	mov	r4, r2
      taskENTER_CRITICAL();
 80100b8:	f7f9 ff6c 	bl	8009f94 <vPortEnterCritical>
      canM_Module.input.id = id;
 80100bc:	4f07      	ldr	r7, [pc, #28]	; (80100dc <canM_Send+0x38>)
 80100be:	f887 6045 	strb.w	r6, [r7, #69]	; 0x45
      canM_Module.input.size = size;
 80100c2:	f887 4044 	strb.w	r4, [r7, #68]	; 0x44
      memcpy((void *)canM_Module.input.dataReq, (void *)payload, size);
 80100c6:	4622      	mov	r2, r4
 80100c8:	4629      	mov	r1, r5
 80100ca:	1d38      	adds	r0, r7, #4
 80100cc:	f001 fe9a 	bl	8011e04 <memcpy>
      taskEXIT_CRITICAL();
 80100d0:	f7f9 ff82 	bl	8009fd8 <vPortExitCritical>
      canM_Module.local.isNewReq = true;
 80100d4:	2001      	movs	r0, #1
 80100d6:	f887 0049 	strb.w	r0, [r7, #73]	; 0x49
      ret = true;
 80100da:	e7e9      	b.n	80100b0 <canM_Send+0xc>
 80100dc:	2000142c 	.word	0x2000142c

080100e0 <canM_SendToAddr>:

bool canM_SendToAddr (uint32_t addrTx, const uint8_t * payload, uint8_t size)
{
 80100e0:	b570      	push	{r4, r5, r6, lr}
 80100e2:	b092      	sub	sp, #72	; 0x48
 80100e4:	4606      	mov	r6, r0
 80100e6:	460d      	mov	r5, r1
 80100e8:	4614      	mov	r4, r2
   bool ret = false;

   struct CAN_msg msg = {
 80100ea:	2248      	movs	r2, #72	; 0x48
 80100ec:	2100      	movs	r1, #0
 80100ee:	4668      	mov	r0, sp
 80100f0:	f001 fdca 	bl	8011c88 <memset>
 80100f4:	9b00      	ldr	r3, [sp, #0]
 80100f6:	f366 031c 	bfi	r3, r6, #0, #29
 80100fa:	9300      	str	r3, [sp, #0]
 80100fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010104:	f88d 3003 	strb.w	r3, [sp, #3]
      .id.id = addrTx,
      .id.isCANFD = true,
      .id.isExt = false,
      .id.isRemote = false,
      .dlc = lenToMinDlc(size),
 8010108:	4620      	mov	r0, r4
 801010a:	f7fa fe49 	bl	800ada0 <lenToMinDlc>
   struct CAN_msg msg = {
 801010e:	f88d 0004 	strb.w	r0, [sp, #4]
   };

   memcpy((uint8_t *)msg.data, (uint8_t *)payload, size);
 8010112:	4622      	mov	r2, r4
 8010114:	4629      	mov	r1, r5
 8010116:	f10d 0005 	add.w	r0, sp, #5
 801011a:	f001 fe73 	bl	8011e04 <memcpy>

   if (OP_OK == canM_FDCanSend (NULL, (struct CAN_msg *)&msg))
 801011e:	4669      	mov	r1, sp
 8010120:	2000      	movs	r0, #0
 8010122:	f7ff fe73 	bl	800fe0c <canM_FDCanSend>
 8010126:	b110      	cbz	r0, 801012e <canM_SendToAddr+0x4e>
   bool ret = false;
 8010128:	2000      	movs	r0, #0
   {
      ret = true;
   }

   return (ret);
}
 801012a:	b012      	add	sp, #72	; 0x48
 801012c:	bd70      	pop	{r4, r5, r6, pc}
      ret = true;
 801012e:	2001      	movs	r0, #1
 8010130:	e7fb      	b.n	801012a <canM_SendToAddr+0x4a>
	...

08010134 <canM_Read>:

bool canM_Read (tCanM_DeviceId * const id, const uint8_t *payload, uint8_t *size)
{
 8010134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bool ret = false;
   uint8_t lenDataRet = 0u;

   if (true == canM_Module.output.isNewResp)
 8010138:	4b0d      	ldr	r3, [pc, #52]	; (8010170 <canM_Read+0x3c>)
 801013a:	f893 511a 	ldrb.w	r5, [r3, #282]	; 0x11a
 801013e:	b915      	cbnz	r5, 8010146 <canM_Read+0x12>

      ret = true;
   }

   return ret;
}
 8010140:	4628      	mov	r0, r5
 8010142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010146:	4606      	mov	r6, r0
 8010148:	4608      	mov	r0, r1
 801014a:	4614      	mov	r4, r2
      lenDataRet = canM_Module.output.size;
 801014c:	461f      	mov	r7, r3
 801014e:	f893 8118 	ldrb.w	r8, [r3, #280]	; 0x118
      memcpy((uint8_t *)payload, (uint8_t *)canM_Module.output.dataResp, lenDataRet);
 8010152:	4642      	mov	r2, r8
 8010154:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8010158:	f001 fe54 	bl	8011e04 <memcpy>
      *size = lenDataRet;
 801015c:	f884 8000 	strb.w	r8, [r4]
      canM_Module.output.isNewResp = false;
 8010160:	2300      	movs	r3, #0
 8010162:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
      *id = canM_Module.output.id;
 8010166:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 801016a:	7033      	strb	r3, [r6, #0]
      ret = true;
 801016c:	e7e8      	b.n	8010140 <canM_Read+0xc>
 801016e:	bf00      	nop
 8010170:	2000142c 	.word	0x2000142c

08010174 <canM_ReadAddr>:


bool canM_ReadAddr (uint32_t * const id, const uint8_t *payload, uint8_t *size)
{
 8010174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bool ret = false;
   uint8_t lenDataRet = 0u;

   if (true == canM_Module.local.isRecMsg)
 8010178:	4b10      	ldr	r3, [pc, #64]	; (80101bc <canM_ReadAddr+0x48>)
 801017a:	f893 604a 	ldrb.w	r6, [r3, #74]	; 0x4a
 801017e:	b916      	cbnz	r6, 8010186 <canM_ReadAddr+0x12>

      ret = true;
   }

   return ret;
}
 8010180:	4630      	mov	r0, r6
 8010182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010186:	4607      	mov	r7, r0
 8010188:	460d      	mov	r5, r1
 801018a:	4614      	mov	r4, r2
      lenDataRet = dlc2len(canM_Module.local.canResp.dlc);
 801018c:	4699      	mov	r9, r3
 801018e:	f893 0094 	ldrb.w	r0, [r3, #148]	; 0x94
 8010192:	f7fa fdfd 	bl	800ad90 <dlc2len>
 8010196:	4680      	mov	r8, r0
      memcpy((uint8_t *)payload, (uint8_t *)canM_Module.local.canResp.data, lenDataRet);
 8010198:	4602      	mov	r2, r0
 801019a:	f109 0195 	add.w	r1, r9, #149	; 0x95
 801019e:	4628      	mov	r0, r5
 80101a0:	f001 fe30 	bl	8011e04 <memcpy>
      canM_Module.local.isRecMsg = false;
 80101a4:	2300      	movs	r3, #0
 80101a6:	f889 304a 	strb.w	r3, [r9, #74]	; 0x4a
      *id = canM_Module.local.canResp.id.id;
 80101aa:	f8d9 3090 	ldr.w	r3, [r9, #144]	; 0x90
 80101ae:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80101b2:	603b      	str	r3, [r7, #0]
      *size = lenDataRet;
 80101b4:	f884 8000 	strb.w	r8, [r4]
      ret = true;
 80101b8:	e7e2      	b.n	8010180 <canM_ReadAddr+0xc>
 80101ba:	bf00      	nop
 80101bc:	2000142c 	.word	0x2000142c

080101c0 <canM_Init>:

   return (ret);
}

void canM_Init (tCanM_Module *const module)
{
 80101c0:	b538      	push	{r3, r4, r5, lr}
 80101c2:	4605      	mov	r5, r0
   uint8_t iter = 0u;

   /* Enable the CAN TP layer. */
   for (iter = 0u; iter < CAN_DEV_TOTAL; iter++)
 80101c4:	2400      	movs	r4, #0
 80101c6:	e009      	b.n	80101dc <canM_Init+0x1c>
         canM_Module.dev[iter].config.rx_buff = module->local.dataResp;
         canM_Module.dev[iter].config.rx_buff_len = CANM_RX_SIZE;
      }

      /* Link configuration of each device on bus can. */
      iso_can_tp_create(&canM_Module.dev[iter].local, &canM_Module.dev[iter].config);
 80101c8:	4a19      	ldr	r2, [pc, #100]	; (8010230 <canM_Init+0x70>)
 80101ca:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
 80101ce:	4418      	add	r0, r3
 80101d0:	1d01      	adds	r1, r0, #4
 80101d2:	303c      	adds	r0, #60	; 0x3c
 80101d4:	f7fa fdf2 	bl	800adbc <iso_can_tp_create>
   for (iter = 0u; iter < CAN_DEV_TOTAL; iter++)
 80101d8:	3401      	adds	r4, #1
 80101da:	b2e4      	uxtb	r4, r4
 80101dc:	2c07      	cmp	r4, #7
 80101de:	d823      	bhi.n	8010228 <canM_Init+0x68>
      if (false != canM_Module.dev[iter].isActive)
 80101e0:	4b13      	ldr	r3, [pc, #76]	; (8010230 <canM_Init+0x70>)
 80101e2:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80101e6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80101ea:	fb04 f303 	mul.w	r3, r4, r3
 80101ee:	441a      	add	r2, r3
 80101f0:	7851      	ldrb	r1, [r2, #1]
 80101f2:	2900      	cmp	r1, #0
 80101f4:	d0e8      	beq.n	80101c8 <canM_Init+0x8>
         canM_Module.dev[iter].config.L_Data_request = canM_FDCanSend;
 80101f6:	490f      	ldr	r1, [pc, #60]	; (8010234 <canM_Init+0x74>)
 80101f8:	6151      	str	r1, [r2, #20]
         canM_Module.dev[iter].config.N_USData_indication = (void *)canM_N_USData_indication;
 80101fa:	4a0d      	ldr	r2, [pc, #52]	; (8010230 <canM_Init+0x70>)
 80101fc:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
 8010200:	4419      	add	r1, r3
 8010202:	480d      	ldr	r0, [pc, #52]	; (8010238 <canM_Init+0x78>)
 8010204:	6188      	str	r0, [r1, #24]
         canM_Module.dev[iter].config.N_USData_confirm = (void *)canM_N_USData_confirm;
 8010206:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
 801020a:	4419      	add	r1, r3
 801020c:	480b      	ldr	r0, [pc, #44]	; (801023c <canM_Init+0x7c>)
 801020e:	61c8      	str	r0, [r1, #28]
         canM_Module.dev[iter].config.rx_buff = module->local.dataResp;
 8010210:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
 8010214:	4419      	add	r1, r3
 8010216:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 801021a:	6208      	str	r0, [r1, #32]
         canM_Module.dev[iter].config.rx_buff_len = CANM_RX_SIZE;
 801021c:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
 8010220:	441a      	add	r2, r3
 8010222:	2140      	movs	r1, #64	; 0x40
 8010224:	6251      	str	r1, [r2, #36]	; 0x24
 8010226:	e7cf      	b.n	80101c8 <canM_Init+0x8>
   }

   /* Start CanM. */
   canM_Start();
 8010228:	f7ff fea2 	bl	800ff70 <canM_Start>
}
 801022c:	bd38      	pop	{r3, r4, r5, pc}
 801022e:	bf00      	nop
 8010230:	2000142c 	.word	0x2000142c
 8010234:	0800fe0d 	.word	0x0800fe0d
 8010238:	0800fd85 	.word	0x0800fd85
 801023c:	0800fd9d 	.word	0x0800fd9d

08010240 <canM_MainFunction>:
	return ret;
}


void canM_MainFunction(tCanM_Module *const module)
{
 8010240:	b538      	push	{r3, r4, r5, lr}
 8010242:	4604      	mov	r4, r0
   tCanM_State nextState = module->local.state;
 8010244:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48

   canM_pollEvent(module);
 8010248:	f7ff fe16 	bl	800fe78 <canM_pollEvent>

   //cdc_printf("@%d: canM stage: %d\r\n",HAL_GetTick(), module->local.state);
   //cdc_printf("@%d: canM stage: %d\r\n",osKernelSysTick(), module->local.state);
   //if (nextState!= CANM_IDLE) cdc_printf("[can2Master]@%u:\t %s\n",GetCycleCount(), tCanM_State_StatesName(nextState));
   switch (module->local.state)
 801024c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010250:	2b03      	cmp	r3, #3
 8010252:	d807      	bhi.n	8010264 <canM_MainFunction+0x24>
 8010254:	e8df f003 	tbb	[pc, r3]
 8010258:	130e0902 	.word	0x130e0902
   {
   case CANM_IDLE:
      nextState = canM_WaitingEvent(module);
 801025c:	4620      	mov	r0, r4
 801025e:	f7ff fda9 	bl	800fdb4 <canM_WaitingEvent>
 8010262:	4605      	mov	r5, r0

   default:
      break;
   }

   module->local.state = nextState;
 8010264:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
 8010268:	bd38      	pop	{r3, r4, r5, pc}
      nextState = canM_ProcessEntry(module);
 801026a:	4620      	mov	r0, r4
 801026c:	f7ff fe18 	bl	800fea0 <canM_ProcessEntry>
 8010270:	4605      	mov	r5, r0
      break;
 8010272:	e7f7      	b.n	8010264 <canM_MainFunction+0x24>
      nextState = canM_Process(module);
 8010274:	4620      	mov	r0, r4
 8010276:	f7ff fdb9 	bl	800fdec <canM_Process>
 801027a:	4605      	mov	r5, r0
      break;
 801027c:	e7f2      	b.n	8010264 <canM_MainFunction+0x24>
      nextState = canM_ProcessPost(module);
 801027e:	4620      	mov	r0, r4
 8010280:	f7ff fe2a 	bl	800fed8 <canM_ProcessPost>
 8010284:	4605      	mov	r5, r0
      break;
 8010286:	e7ed      	b.n	8010264 <canM_MainFunction+0x24>

08010288 <HAL_FDCAN_RxFifo0Callback>:
 * 
 * @param hfdcan The parameter `hfdcan` is a pointer to the FDCAN handle structure. It is used to identify the FDCAN peripheral and its associated configuration and status.
 * @param RxFifo0ITs RxFifo0ITs is a bitmask that indicates which interrupt flags are set for the Rx FIFO 0. The function checks if the FDCAN_IT_RX_FIFO0_NEW_MESSAGE flag is set in the bitmask to determine if a new message has been received in Rx FIFO 0.
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8010288:	b530      	push	{r4, r5, lr}
 801028a:	b08b      	sub	sp, #44	; 0x2c
 801028c:	4605      	mov	r5, r0
 801028e:	460c      	mov	r4, r1
   FDCAN_RxHeaderTypeDef rxHeader = {0u};
 8010290:	2228      	movs	r2, #40	; 0x28
 8010292:	2100      	movs	r1, #0
 8010294:	4668      	mov	r0, sp
 8010296:	f001 fcf7 	bl	8011c88 <memset>
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;

   if (FDCAN_IT_RX_FIFO0_NEW_MESSAGE == (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE))   {
 801029a:	f014 0f01 	tst.w	r4, #1
 801029e:	d101      	bne.n	80102a4 <HAL_FDCAN_RxFifo0Callback+0x1c>
      /* Exit critical section. */
      taskEXIT_CRITICAL_FROM_ISR(xHigherPriorityTaskWoken);
      if(0) cdc_printf("HAL_FDCAN_RxFifo0Callback @%u\r\n", GetCycleCount());
   }
   return;
}
 80102a0:	b00b      	add	sp, #44	; 0x2c
 80102a2:	bd30      	pop	{r4, r5, pc}
	__asm volatile
 80102a4:	f3ef 8311 	mrs	r3, BASEPRI
 80102a8:	f04f 0250 	mov.w	r2, #80	; 0x50
 80102ac:	f382 8811 	msr	BASEPRI, r2
 80102b0:	f3bf 8f6f 	isb	sy
 80102b4:	f3bf 8f4f 	dsb	sy
      if (HAL_OK == HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, (FDCAN_RxHeaderTypeDef *)&rxHeader, (uint8_t *)canM_Module.local.canResp.data))
 80102b8:	4b1e      	ldr	r3, [pc, #120]	; (8010334 <HAL_FDCAN_RxFifo0Callback+0xac>)
 80102ba:	466a      	mov	r2, sp
 80102bc:	2140      	movs	r1, #64	; 0x40
 80102be:	4628      	mov	r0, r5
 80102c0:	f7f1 fde2 	bl	8001e88 <HAL_FDCAN_GetRxMessage>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	d130      	bne.n	801032a <HAL_FDCAN_RxFifo0Callback+0xa2>
         canM_Module.local.canResp.id.id = rxHeader.Identifier;
 80102c8:	4b1b      	ldr	r3, [pc, #108]	; (8010338 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 80102ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80102ce:	9900      	ldr	r1, [sp, #0]
 80102d0:	f361 021c 	bfi	r2, r1, #0, #29
 80102d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         canM_Module.local.canResp.id.isCANFD = (FDCAN_FD_CAN == rxHeader.FDFormat) ? true : false;
 80102d8:	9a06      	ldr	r2, [sp, #24]
 80102da:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80102de:	bf14      	ite	ne
 80102e0:	2200      	movne	r2, #0
 80102e2:	2201      	moveq	r2, #1
 80102e4:	f893 1093 	ldrb.w	r1, [r3, #147]	; 0x93
 80102e8:	f362 1186 	bfi	r1, r2, #6, #1
 80102ec:	f883 1093 	strb.w	r1, [r3, #147]	; 0x93
         canM_Module.local.canResp.id.isExt = (FDCAN_EXTENDED_ID == rxHeader.IdType) ? true : false;
 80102f0:	9a01      	ldr	r2, [sp, #4]
 80102f2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80102f6:	bf14      	ite	ne
 80102f8:	2200      	movne	r2, #0
 80102fa:	2201      	moveq	r2, #1
 80102fc:	b2c9      	uxtb	r1, r1
 80102fe:	f362 1145 	bfi	r1, r2, #5, #1
 8010302:	f883 1093 	strb.w	r1, [r3, #147]	; 0x93
         canM_Module.local.canResp.id.isRemote = (FDCAN_REMOTE_FRAME == rxHeader.RxFrameType) ? true : false;
 8010306:	9a02      	ldr	r2, [sp, #8]
 8010308:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 801030c:	bf14      	ite	ne
 801030e:	2200      	movne	r2, #0
 8010310:	2201      	moveq	r2, #1
 8010312:	b2c9      	uxtb	r1, r1
 8010314:	f362 11c7 	bfi	r1, r2, #7, #1
 8010318:	f883 1093 	strb.w	r1, [r3, #147]	; 0x93
         canM_Module.local.canResp.dlc = (uint8_t)(rxHeader.DataLength >> 16U);
 801031c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010320:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
         canM_Module.local.isRecMsg = true;
 8010324:	2201      	movs	r2, #1
 8010326:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	__asm volatile
 801032a:	2300      	movs	r3, #0
 801032c:	f383 8811 	msr	BASEPRI, r3
   return;
 8010330:	e7b6      	b.n	80102a0 <HAL_FDCAN_RxFifo0Callback+0x18>
 8010332:	bf00      	nop
 8010334:	200014c1 	.word	0x200014c1
 8010338:	2000142c 	.word	0x2000142c

0801033c <ethCat_check_dc_handler>:
uint16_t ethCat_check_dc_handler (void)
{
   uint16_t ret = 0u;

   return ret;
}
 801033c:	2000      	movs	r0, #0
 801033e:	4770      	bx	lr

08010340 <ethCat_hw_eep_handler>:

void ethCat_hw_eep_handler (void)
{

}
 8010340:	4770      	bx	lr
	...

08010344 <ethCat_object_download_hook>:
{
 8010344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010348:	b086      	sub	sp, #24
   uint8_t md80id = Obj.md80_Command.md80_dev_no;
 801034a:	4b28      	ldr	r3, [pc, #160]	; (80103ec <ethCat_object_download_hook+0xa8>)
 801034c:	f893 6140 	ldrb.w	r6, [r3, #320]	; 0x140
   uint8_t cmd = Obj.md80_Command.command;
 8010350:	f893 5141 	ldrb.w	r5, [r3, #321]	; 0x141
   uint8_t length = Obj.md80_Command.size;
 8010354:	f893 7142 	ldrb.w	r7, [r3, #322]	; 0x142
   uint8_t dataCmd[ETHCAT_LENGTH_DATAMAX] = {0u};
 8010358:	2300      	movs	r3, #0
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	9301      	str	r3, [sp, #4]
 801035e:	9302      	str	r3, [sp, #8]
 8010360:	9303      	str	r3, [sp, #12]
 8010362:	9304      	str	r3, [sp, #16]
 8010364:	9305      	str	r3, [sp, #20]
   switch (index)
 8010366:	f242 0301 	movw	r3, #8193	; 0x2001
 801036a:	4298      	cmp	r0, r3
 801036c:	d003      	beq.n	8010376 <ethCat_object_download_hook+0x32>
}
 801036e:	2000      	movs	r0, #0
 8010370:	b006      	add	sp, #24
 8010372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((cmd != BUS_FRAME_NONE) && (cmd < BUS_FRAME_INVALID) && (subindex == 9))
 8010376:	1e6b      	subs	r3, r5, #1
 8010378:	b2db      	uxtb	r3, r3
 801037a:	2b08      	cmp	r3, #8
 801037c:	d8f7      	bhi.n	801036e <ethCat_object_download_hook+0x2a>
 801037e:	2909      	cmp	r1, #9
 8010380:	d1f5      	bne.n	801036e <ethCat_object_download_hook+0x2a>
         memcpy(&dataCmd[0],  (uint8_t *)&Obj.md80_Command.dataSet0, sizeof(Obj.md80_Command.dataSet0));
 8010382:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80103ec <ethCat_object_download_hook+0xa8>
 8010386:	f8d8 3148 	ldr.w	r3, [r8, #328]	; 0x148
 801038a:	9300      	str	r3, [sp, #0]
         memcpy(&dataCmd[4],  (uint8_t *)&Obj.md80_Command.dataSet1, sizeof(Obj.md80_Command.dataSet1));
 801038c:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
 8010390:	9301      	str	r3, [sp, #4]
         memcpy(&dataCmd[8],  (uint8_t *)&Obj.md80_Command.dataSet2, sizeof(Obj.md80_Command.dataSet2));
 8010392:	f8d8 3150 	ldr.w	r3, [r8, #336]	; 0x150
 8010396:	9302      	str	r3, [sp, #8]
         memcpy(&dataCmd[12], (uint8_t *)&Obj.md80_Command.dataSet3, sizeof(Obj.md80_Command.dataSet3));
 8010398:	f8d8 3154 	ldr.w	r3, [r8, #340]	; 0x154
 801039c:	9303      	str	r3, [sp, #12]
         memcpy(&dataCmd[16], (uint8_t *)&Obj.md80_Command.dataSet4, sizeof(Obj.md80_Command.dataSet4));
 801039e:	f8d8 3158 	ldr.w	r3, [r8, #344]	; 0x158
 80103a2:	9304      	str	r3, [sp, #16]
         Obj.md80_Last_Command_Received.command = cmd;
 80103a4:	f8c8 515c 	str.w	r5, [r8, #348]	; 0x15c
         Obj.md80_Last_Command_Received.counter = Obj.md80_Command.counter;
 80103a8:	f8d8 3144 	ldr.w	r3, [r8, #324]	; 0x144
 80103ac:	f8c8 3160 	str.w	r3, [r8, #352]	; 0x160
         Obj.md80_Last_Command_Received.timestamp = (uint32_t)(xTaskGetTickCount() / portTICK_PERIOD_MS);
 80103b0:	f7f8 ff98 	bl	80092e4 <xTaskGetTickCount>
 80103b4:	f8c8 0164 	str.w	r0, [r8, #356]	; 0x164
         Obj.md80_Command.command = BUS_FRAME_NONE;
 80103b8:	2400      	movs	r4, #0
 80103ba:	f888 4141 	strb.w	r4, [r8, #321]	; 0x141
         for (int i = 0; i < sizeof(dataCmd); i++)
 80103be:	e008      	b.n	80103d2 <ethCat_object_download_hook+0x8e>
            printf("%02X", dataCmd[i]);
 80103c0:	f104 0318 	add.w	r3, r4, #24
 80103c4:	446b      	add	r3, sp
 80103c6:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 80103ca:	4809      	ldr	r0, [pc, #36]	; (80103f0 <ethCat_object_download_hook+0xac>)
 80103cc:	f001 fbb6 	bl	8011b3c <iprintf>
         for (int i = 0; i < sizeof(dataCmd); i++)
 80103d0:	3401      	adds	r4, #1
 80103d2:	2c17      	cmp	r4, #23
 80103d4:	d9f4      	bls.n	80103c0 <ethCat_object_download_hook+0x7c>
         printf("\n");
 80103d6:	200a      	movs	r0, #10
 80103d8:	f001 fbc2 	bl	8011b60 <putchar>
         canIdle_UpdateCmd(md80id, cmd, length, dataCmd);
 80103dc:	466b      	mov	r3, sp
 80103de:	463a      	mov	r2, r7
 80103e0:	4629      	mov	r1, r5
 80103e2:	4630      	mov	r0, r6
 80103e4:	f7ff fc60 	bl	800fca8 <canIdle_UpdateCmd>
 80103e8:	e7c1      	b.n	801036e <ethCat_object_download_hook+0x2a>
 80103ea:	bf00      	nop
 80103ec:	2000d4c0 	.word	0x2000d4c0
 80103f0:	08013a34 	.word	0x08013a34

080103f4 <cb_get_inputs>:
}
 80103f4:	4770      	bx	lr

080103f6 <cb_set_outputs>:
}
 80103f6:	4770      	bx	lr

080103f8 <ethCat_Init>:

void ethCat_Init (void)
{
 80103f8:	b510      	push	{r4, lr}
      .esc_hw_eep_handler = ethCat_hw_eep_handler,
      .esc_check_dc_handler = ethCat_check_dc_handler,
   };

   /* Turn off etherCat. */
   HAL_GPIO_WritePin (LAN_Reset_CMD_GPIO_Port, LAN_Reset_CMD_Pin, GPIO_PIN_RESET);
 80103fa:	4c0a      	ldr	r4, [pc, #40]	; (8010424 <ethCat_Init+0x2c>)
 80103fc:	2200      	movs	r2, #0
 80103fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010402:	4620      	mov	r0, r4
 8010404:	f7f2 f8b0 	bl	8002568 <HAL_GPIO_WritePin>

   /* Delay */
   osDelay(ETHCAT_DELAY_MS);
 8010408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801040c:	f7f8 f843 	bl	8008496 <osDelay>

   /* Turn on etherCat. */
   HAL_GPIO_WritePin (LAN_Reset_CMD_GPIO_Port, LAN_Reset_CMD_Pin, GPIO_PIN_SET);
 8010410:	2201      	movs	r2, #1
 8010412:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010416:	4620      	mov	r0, r4
 8010418:	f7f2 f8a6 	bl	8002568 <HAL_GPIO_WritePin>

   /* Initialize the EtherCat module. */
   ecat_slv_init (&ethCat_cfg);
 801041c:	4802      	ldr	r0, [pc, #8]	; (8010428 <ethCat_Init+0x30>)
 801041e:	f7fb fce7 	bl	800bdf0 <ecat_slv_init>
}
 8010422:	bd10      	pop	{r4, pc}
 8010424:	48000400 	.word	0x48000400
 8010428:	2000154c 	.word	0x2000154c

0801042c <ethCat_MainFunction>:

void ethCat_MainFunction (void)
{
 801042c:	b508      	push	{r3, lr}
	uint32_t start=0;
	uint32_t end =0;
	start = GetCycleCount();
 801042e:	f7f0 fbb9 	bl	8000ba4 <GetCycleCount>

	ecat_slv();
 8010432:	f7fb fcd5 	bl	800bde0 <ecat_slv>
	end= GetCycleCount();
 8010436:	f7f0 fbb5 	bl	8000ba4 <GetCycleCount>
	if(false) cdc_printf("ecat_slv took: %d\r\n",end-start);
}
 801043a:	bd08      	pop	{r3, pc}

0801043c <timerCounterCb>:

void timerCounterCb(void const * argument)
{
 801043c:	b510      	push	{r4, lr}
#if ETHCAT_DUMMYDATA_500US == 1
   /* Update the counter dummy for md80: 1ms */
   Obj.md80_0_DataReturn.counter++;
 801043e:	4c04      	ldr	r4, [pc, #16]	; (8010450 <timerCounterCb+0x14>)
 8010440:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010442:	3301      	adds	r3, #1
 8010444:	6323      	str	r3, [r4, #48]	; 0x30
   Obj.md80_0_DataReturn.timestamp = (uint32_t)(xTaskGetTickCount()/portTICK_PERIOD_MS);
 8010446:	f7f8 ff4d 	bl	80092e4 <xTaskGetTickCount>
 801044a:	6360      	str	r0, [r4, #52]	; 0x34
#endif
}
 801044c:	bd10      	pop	{r4, pc}
 801044e:	bf00      	nop
 8010450:	2000d4c0 	.word	0x2000d4c0

08010454 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8010454:	b508      	push	{r3, lr}
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8010456:	4803      	ldr	r0, [pc, #12]	; (8010464 <_cbSendSystemDesc+0x10>)
 8010458:	f000 fe5a 	bl	8011110 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 801045c:	4802      	ldr	r0, [pc, #8]	; (8010468 <_cbSendSystemDesc+0x14>)
 801045e:	f000 fe57 	bl	8011110 <SEGGER_SYSVIEW_SendSysDesc>
}
 8010462:	bd08      	pop	{r3, pc}
 8010464:	08016a48 	.word	0x08016a48
 8010468:	08016a6c 	.word	0x08016a6c

0801046c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 801046c:	b508      	push	{r3, lr}
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 801046e:	4b06      	ldr	r3, [pc, #24]	; (8010488 <SEGGER_SYSVIEW_Conf+0x1c>)
 8010470:	6818      	ldr	r0, [r3, #0]
 8010472:	4b06      	ldr	r3, [pc, #24]	; (801048c <SEGGER_SYSVIEW_Conf+0x20>)
 8010474:	4a06      	ldr	r2, [pc, #24]	; (8010490 <SEGGER_SYSVIEW_Conf+0x24>)
 8010476:	4601      	mov	r1, r0
 8010478:	f000 faaa 	bl	80109d0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 801047c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8010480:	f000 fadc 	bl	8010a3c <SEGGER_SYSVIEW_SetRAMBase>
}
 8010484:	bd08      	pop	{r3, pc}
 8010486:	bf00      	nop
 8010488:	20000000 	.word	0x20000000
 801048c:	08010455 	.word	0x08010455
 8010490:	08016acc 	.word	0x08016acc

08010494 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8010494:	b508      	push	{r3, lr}
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8010496:	f7f8 ff2b 	bl	80092f0 <xTaskGetTickCountFromISR>
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 801049a:	0ec3      	lsrs	r3, r0, #27
 801049c:	0141      	lsls	r1, r0, #5
 801049e:	1a09      	subs	r1, r1, r0
 80104a0:	f163 0300 	sbc.w	r3, r3, #0
 80104a4:	009b      	lsls	r3, r3, #2
 80104a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80104aa:	0089      	lsls	r1, r1, #2
 80104ac:	1809      	adds	r1, r1, r0
 80104ae:	f143 0300 	adc.w	r3, r3, #0
 80104b2:	00db      	lsls	r3, r3, #3
  return Time;
}
 80104b4:	00c8      	lsls	r0, r1, #3
 80104b6:	ea43 7151 	orr.w	r1, r3, r1, lsr #29
 80104ba:	bd08      	pop	{r3, pc}

080104bc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80104bc:	b510      	push	{r4, lr}
 80104be:	b086      	sub	sp, #24
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80104c0:	2400      	movs	r4, #0
 80104c2:	9401      	str	r4, [sp, #4]
 80104c4:	9402      	str	r4, [sp, #8]
 80104c6:	9403      	str	r4, [sp, #12]
 80104c8:	9404      	str	r4, [sp, #16]
 80104ca:	9405      	str	r4, [sp, #20]
  TaskInfo.TaskID     = TaskID;
 80104cc:	9001      	str	r0, [sp, #4]
  TaskInfo.sName      = sName;
 80104ce:	9102      	str	r1, [sp, #8]
  TaskInfo.Prio       = Prio;
 80104d0:	9203      	str	r2, [sp, #12]
  TaskInfo.StackBase  = StackBase;
 80104d2:	9304      	str	r3, [sp, #16]
  TaskInfo.StackSize  = StackSize;
 80104d4:	9b08      	ldr	r3, [sp, #32]
 80104d6:	9305      	str	r3, [sp, #20]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80104d8:	a801      	add	r0, sp, #4
 80104da:	f000 fdb7 	bl	801104c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80104de:	b006      	add	sp, #24
 80104e0:	bd10      	pop	{r4, pc}
	...

080104e4 <SYSVIEW_AddTask>:
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80104e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104e6:	b083      	sub	sp, #12
 80104e8:	4605      	mov	r5, r0
 80104ea:	460c      	mov	r4, r1
 80104ec:	4616      	mov	r6, r2
 80104ee:	461f      	mov	r7, r3
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80104f0:	2205      	movs	r2, #5
 80104f2:	4913      	ldr	r1, [pc, #76]	; (8010540 <SYSVIEW_AddTask+0x5c>)
 80104f4:	4620      	mov	r0, r4
 80104f6:	f001 fbb7 	bl	8011c68 <memcmp>
 80104fa:	b1d0      	cbz	r0, 8010532 <SYSVIEW_AddTask+0x4e>
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80104fc:	4b11      	ldr	r3, [pc, #68]	; (8010544 <SYSVIEW_AddTask+0x60>)
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	2a07      	cmp	r2, #7
 8010502:	d818      	bhi.n	8010536 <SYSVIEW_AddTask+0x52>
  _aTasks[_NumTasks].xHandle = xHandle;
 8010504:	4b10      	ldr	r3, [pc, #64]	; (8010548 <SYSVIEW_AddTask+0x64>)
 8010506:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 801050a:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 801050e:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8010512:	604c      	str	r4, [r1, #4]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8010514:	608e      	str	r6, [r1, #8]
  _aTasks[_NumTasks].pxStack = pxStack;
 8010516:	60cf      	str	r7, [r1, #12]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8010518:	9b08      	ldr	r3, [sp, #32]
 801051a:	610b      	str	r3, [r1, #16]
  _NumTasks++;
 801051c:	3201      	adds	r2, #1
 801051e:	4b09      	ldr	r3, [pc, #36]	; (8010544 <SYSVIEW_AddTask+0x60>)
 8010520:	601a      	str	r2, [r3, #0]
  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8010522:	9b08      	ldr	r3, [sp, #32]
 8010524:	9300      	str	r3, [sp, #0]
 8010526:	463b      	mov	r3, r7
 8010528:	4632      	mov	r2, r6
 801052a:	4621      	mov	r1, r4
 801052c:	4628      	mov	r0, r5
 801052e:	f7ff ffc5 	bl	80104bc <SYSVIEW_SendTaskInfo>
}
 8010532:	b003      	add	sp, #12
 8010534:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8010536:	4805      	ldr	r0, [pc, #20]	; (801054c <SYSVIEW_AddTask+0x68>)
 8010538:	f000 fec0 	bl	80112bc <SEGGER_SYSVIEW_Warn>
    return;
 801053c:	e7f9      	b.n	8010532 <SYSVIEW_AddTask+0x4e>
 801053e:	bf00      	nop
 8010540:	0801315c 	.word	0x0801315c
 8010544:	20009b14 	.word	0x20009b14
 8010548:	20009b18 	.word	0x20009b18
 801054c:	08016a7c 	.word	0x08016a7c

08010550 <_cbSendTaskList>:
static void _cbSendTaskList(void) {
 8010550:	b530      	push	{r4, r5, lr}
 8010552:	b083      	sub	sp, #12
  for (n = 0; n < _NumTasks; n++) {
 8010554:	2400      	movs	r4, #0
 8010556:	e00d      	b.n	8010574 <_cbSendTaskList+0x24>
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8010558:	4d09      	ldr	r5, [pc, #36]	; (8010580 <_cbSendTaskList+0x30>)
 801055a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801055e:	0098      	lsls	r0, r3, #2
 8010560:	1829      	adds	r1, r5, r0
 8010562:	690b      	ldr	r3, [r1, #16]
 8010564:	9300      	str	r3, [sp, #0]
 8010566:	68cb      	ldr	r3, [r1, #12]
 8010568:	688a      	ldr	r2, [r1, #8]
 801056a:	6849      	ldr	r1, [r1, #4]
 801056c:	5828      	ldr	r0, [r5, r0]
 801056e:	f7ff ffa5 	bl	80104bc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8010572:	3401      	adds	r4, #1
 8010574:	4b03      	ldr	r3, [pc, #12]	; (8010584 <_cbSendTaskList+0x34>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	42a3      	cmp	r3, r4
 801057a:	d8ed      	bhi.n	8010558 <_cbSendTaskList+0x8>
}
 801057c:	b003      	add	sp, #12
 801057e:	bd30      	pop	{r4, r5, pc}
 8010580:	20009b18 	.word	0x20009b18
 8010584:	20009b14 	.word	0x20009b14

08010588 <_DoInit>:
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8010588:	4a12      	ldr	r2, [pc, #72]	; (80105d4 <_DoInit+0x4c>)
 801058a:	2303      	movs	r3, #3
 801058c:	6113      	str	r3, [r2, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 801058e:	6153      	str	r3, [r2, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8010590:	4911      	ldr	r1, [pc, #68]	; (80105d8 <_DoInit+0x50>)
 8010592:	6191      	str	r1, [r2, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8010594:	4b11      	ldr	r3, [pc, #68]	; (80105dc <_DoInit+0x54>)
 8010596:	61d3      	str	r3, [r2, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8010598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801059c:	6213      	str	r3, [r2, #32]
  p->aUp[0].RdOff         = 0u;
 801059e:	2300      	movs	r3, #0
 80105a0:	6293      	str	r3, [r2, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80105a2:	6253      	str	r3, [r2, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80105a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80105a6:	6611      	str	r1, [r2, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80105a8:	490d      	ldr	r1, [pc, #52]	; (80105e0 <_DoInit+0x58>)
 80105aa:	6651      	str	r1, [r2, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80105ac:	2110      	movs	r1, #16
 80105ae:	6691      	str	r1, [r2, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80105b0:	6713      	str	r3, [r2, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80105b2:	66d3      	str	r3, [r2, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80105b4:	6753      	str	r3, [r2, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80105b6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80105ba:	e006      	b.n	80105ca <_DoInit+0x42>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80105bc:	f1c3 020f 	rsb	r2, r3, #15
 80105c0:	4908      	ldr	r1, [pc, #32]	; (80105e4 <_DoInit+0x5c>)
 80105c2:	5c89      	ldrb	r1, [r1, r2]
 80105c4:	4a03      	ldr	r2, [pc, #12]	; (80105d4 <_DoInit+0x4c>)
 80105c6:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80105c8:	3301      	adds	r3, #1
 80105ca:	2b0f      	cmp	r3, #15
 80105cc:	d9f6      	bls.n	80105bc <_DoInit+0x34>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80105ce:	f3bf 8f5f 	dmb	sy
}
 80105d2:	4770      	bx	lr
 80105d4:	20009bb8 	.word	0x20009bb8
 80105d8:	08016ad4 	.word	0x08016ad4
 80105dc:	20009c70 	.word	0x20009c70
 80105e0:	20009c60 	.word	0x20009c60
 80105e4:	08016ae0 	.word	0x08016ae0

080105e8 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80105e8:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 80105ea:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 80105ec:	4293      	cmp	r3, r2
 80105ee:	d804      	bhi.n	80105fa <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80105f0:	6881      	ldr	r1, [r0, #8]
 80105f2:	1a8a      	subs	r2, r1, r2
 80105f4:	4413      	add	r3, r2
 80105f6:	1e58      	subs	r0, r3, #1
 80105f8:	4770      	bx	lr
  } else {
    r = RdOff - WrOff - 1u;
 80105fa:	1a98      	subs	r0, r3, r2
 80105fc:	3801      	subs	r0, #1
  }
  return r;
}
 80105fe:	4770      	bx	lr

08010600 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8010600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010604:	4604      	mov	r4, r0
 8010606:	4688      	mov	r8, r1
 8010608:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
 801060a:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
 801060c:	6887      	ldr	r7, [r0, #8]
 801060e:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
 8010612:	4591      	cmp	r9, r2
 8010614:	d909      	bls.n	801062a <_WriteNoCheck+0x2a>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8010616:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8010618:	4428      	add	r0, r5
 801061a:	f001 fbf3 	bl	8011e04 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 801061e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8010622:	4435      	add	r5, r6
 8010624:	60e5      	str	r5, [r4, #12]
}
 8010626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 801062a:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 801062c:	464a      	mov	r2, r9
 801062e:	4428      	add	r0, r5
 8010630:	f001 fbe8 	bl	8011e04 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8010634:	1bed      	subs	r5, r5, r7
 8010636:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8010638:	462a      	mov	r2, r5
 801063a:	eb08 0109 	add.w	r1, r8, r9
 801063e:	6860      	ldr	r0, [r4, #4]
 8010640:	f001 fbe0 	bl	8011e04 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8010644:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8010648:	60e5      	str	r5, [r4, #12]
}
 801064a:	e7ec      	b.n	8010626 <_WriteNoCheck+0x26>

0801064c <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 801064c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010650:	4606      	mov	r6, r0
 8010652:	4688      	mov	r8, r1
 8010654:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
 8010656:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
 8010658:	f04f 0900 	mov.w	r9, #0
 801065c:	e01a      	b.n	8010694 <_WriteBlocking+0x48>
      NumBytesToWrite = RdOff - WrOff - 1u;
 801065e:	1b5b      	subs	r3, r3, r5
 8010660:	1e5a      	subs	r2, r3, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8010662:	68b3      	ldr	r3, [r6, #8]
 8010664:	1b5c      	subs	r4, r3, r5
 8010666:	4294      	cmp	r4, r2
 8010668:	bf28      	it	cs
 801066a:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 801066c:	42bc      	cmp	r4, r7
 801066e:	bf28      	it	cs
 8010670:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8010672:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8010674:	4622      	mov	r2, r4
 8010676:	4641      	mov	r1, r8
 8010678:	4428      	add	r0, r5
 801067a:	f001 fbc3 	bl	8011e04 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 801067e:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
 8010680:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
 8010682:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
 8010684:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
 8010686:	68b3      	ldr	r3, [r6, #8]
 8010688:	42ab      	cmp	r3, r5
 801068a:	d00b      	beq.n	80106a4 <_WriteBlocking+0x58>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 801068c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8010690:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 8010692:	b14f      	cbz	r7, 80106a8 <_WriteBlocking+0x5c>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8010694:	6933      	ldr	r3, [r6, #16]
    if (RdOff > WrOff) {
 8010696:	429d      	cmp	r5, r3
 8010698:	d3e1      	bcc.n	801065e <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 801069a:	68b2      	ldr	r2, [r6, #8]
 801069c:	1b5b      	subs	r3, r3, r5
 801069e:	441a      	add	r2, r3
 80106a0:	3a01      	subs	r2, #1
 80106a2:	e7de      	b.n	8010662 <_WriteBlocking+0x16>
      WrOff = 0u;
 80106a4:	2500      	movs	r5, #0
 80106a6:	e7f1      	b.n	801068c <_WriteBlocking+0x40>
}
 80106a8:	4648      	mov	r0, r9
 80106aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080106b0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80106b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106b4:	4604      	mov	r4, r0
 80106b6:	4688      	mov	r8, r1
 80106b8:	4691      	mov	r9, r2
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80106ba:	4b24      	ldr	r3, [pc, #144]	; (801074c <SEGGER_RTT_ReadNoLock+0x9c>)
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	b1c3      	cbz	r3, 80106f2 <SEGGER_RTT_ReadNoLock+0x42>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  pBuffer = (unsigned char*)pData;
  RdOff = pRing->RdOff;
 80106c0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80106c4:	4b21      	ldr	r3, [pc, #132]	; (801074c <SEGGER_RTT_ReadNoLock+0x9c>)
 80106c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106ca:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  WrOff = pRing->WrOff;
 80106cc:	6edd      	ldr	r5, [r3, #108]	; 0x6c
  NumBytesRead = 0u;
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80106ce:	42af      	cmp	r7, r5
 80106d0:	d812      	bhi.n	80106f8 <SEGGER_RTT_ReadNoLock+0x48>
  NumBytesRead = 0u;
 80106d2:	2600      	movs	r6, #0
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80106d4:	1bed      	subs	r5, r5, r7
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80106d6:	454d      	cmp	r5, r9
 80106d8:	bf28      	it	cs
 80106da:	464d      	movcs	r5, r9
  if (NumBytesRem > 0u) {
 80106dc:	bb3d      	cbnz	r5, 801072e <SEGGER_RTT_ReadNoLock+0x7e>
    pBuffer      += NumBytesRem;
    BufferSize   -= NumBytesRem;
    RdOff        += NumBytesRem;
#endif
  }
  if (NumBytesRead) {
 80106de:	b12e      	cbz	r6, 80106ec <SEGGER_RTT_ReadNoLock+0x3c>
    pRing->RdOff = RdOff;
 80106e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80106e4:	4b19      	ldr	r3, [pc, #100]	; (801074c <SEGGER_RTT_ReadNoLock+0x9c>)
 80106e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106ea:	671f      	str	r7, [r3, #112]	; 0x70
  }
  //
  return NumBytesRead;
}
 80106ec:	4630      	mov	r0, r6
 80106ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INIT();
 80106f2:	f7ff ff49 	bl	8010588 <_DoInit>
 80106f6:	e7e3      	b.n	80106c0 <SEGGER_RTT_ReadNoLock+0x10>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80106f8:	4613      	mov	r3, r2
 80106fa:	4a14      	ldr	r2, [pc, #80]	; (801074c <SEGGER_RTT_ReadNoLock+0x9c>)
 80106fc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8010700:	f8da 6068 	ldr.w	r6, [sl, #104]	; 0x68
 8010704:	1bf6      	subs	r6, r6, r7
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8010706:	454e      	cmp	r6, r9
 8010708:	bf28      	it	cs
 801070a:	464e      	movcs	r6, r9
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 801070c:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8010710:	4632      	mov	r2, r6
 8010712:	4439      	add	r1, r7
 8010714:	4640      	mov	r0, r8
 8010716:	f001 fb75 	bl	8011e04 <memcpy>
    pBuffer      += NumBytesRem;
 801071a:	44b0      	add	r8, r6
    BufferSize   -= NumBytesRem;
 801071c:	eba9 0906 	sub.w	r9, r9, r6
    RdOff        += NumBytesRem;
 8010720:	4437      	add	r7, r6
    if (RdOff == pRing->SizeOfBuffer) {
 8010722:	f8da 3068 	ldr.w	r3, [sl, #104]	; 0x68
 8010726:	42bb      	cmp	r3, r7
 8010728:	d1d4      	bne.n	80106d4 <SEGGER_RTT_ReadNoLock+0x24>
      RdOff = 0u;
 801072a:	2700      	movs	r7, #0
 801072c:	e7d2      	b.n	80106d4 <SEGGER_RTT_ReadNoLock+0x24>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 801072e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8010732:	4b06      	ldr	r3, [pc, #24]	; (801074c <SEGGER_RTT_ReadNoLock+0x9c>)
 8010734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010738:	6e59      	ldr	r1, [r3, #100]	; 0x64
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 801073a:	462a      	mov	r2, r5
 801073c:	4439      	add	r1, r7
 801073e:	4640      	mov	r0, r8
 8010740:	f001 fb60 	bl	8011e04 <memcpy>
    NumBytesRead += NumBytesRem;
 8010744:	442e      	add	r6, r5
    RdOff        += NumBytesRem;
 8010746:	442f      	add	r7, r5
 8010748:	e7c9      	b.n	80106de <SEGGER_RTT_ReadNoLock+0x2e>
 801074a:	bf00      	nop
 801074c:	20009bb8 	.word	0x20009bb8

08010750 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8010750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010752:	460f      	mov	r7, r1
 8010754:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8010756:	4b18      	ldr	r3, [pc, #96]	; (80107b8 <SEGGER_RTT_WriteNoLock+0x68>)
 8010758:	1c45      	adds	r5, r0, #1
 801075a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801075e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8010762:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010766:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801076a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801076c:	2c01      	cmp	r4, #1
 801076e:	d011      	beq.n	8010794 <SEGGER_RTT_WriteNoLock+0x44>
 8010770:	2c02      	cmp	r4, #2
 8010772:	d01c      	beq.n	80107ae <SEGGER_RTT_WriteNoLock+0x5e>
 8010774:	b114      	cbz	r4, 801077c <SEGGER_RTT_WriteNoLock+0x2c>
 8010776:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
 8010778:	4620      	mov	r0, r4
 801077a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
 801077c:	4628      	mov	r0, r5
 801077e:	f7ff ff33 	bl	80105e8 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 8010782:	4286      	cmp	r6, r0
 8010784:	d8f8      	bhi.n	8010778 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
 8010786:	4632      	mov	r2, r6
 8010788:	4639      	mov	r1, r7
 801078a:	4628      	mov	r0, r5
 801078c:	f7ff ff38 	bl	8010600 <_WriteNoCheck>
      Status = NumBytes;
 8010790:	4634      	mov	r4, r6
 8010792:	e7f1      	b.n	8010778 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
 8010794:	4628      	mov	r0, r5
 8010796:	f7ff ff27 	bl	80105e8 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 801079a:	4634      	mov	r4, r6
 801079c:	4286      	cmp	r6, r0
 801079e:	bf28      	it	cs
 80107a0:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 80107a2:	4622      	mov	r2, r4
 80107a4:	4639      	mov	r1, r7
 80107a6:	4628      	mov	r0, r5
 80107a8:	f7ff ff2a 	bl	8010600 <_WriteNoCheck>
    break;
 80107ac:	e7e4      	b.n	8010778 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80107ae:	4628      	mov	r0, r5
 80107b0:	f7ff ff4c 	bl	801064c <_WriteBlocking>
 80107b4:	4604      	mov	r4, r0
    break;
 80107b6:	e7df      	b.n	8010778 <SEGGER_RTT_WriteNoLock+0x28>
 80107b8:	20009bb8 	.word	0x20009bb8

080107bc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80107bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107be:	4604      	mov	r4, r0
 80107c0:	460d      	mov	r5, r1
 80107c2:	4616      	mov	r6, r2
  unsigned Status;

  INIT();
 80107c4:	4b09      	ldr	r3, [pc, #36]	; (80107ec <SEGGER_RTT_Write+0x30>)
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	b16b      	cbz	r3, 80107e6 <SEGGER_RTT_Write+0x2a>
  SEGGER_RTT_LOCK();
 80107ca:	f3ef 8711 	mrs	r7, BASEPRI
 80107ce:	f04f 0120 	mov.w	r1, #32
 80107d2:	f381 8811 	msr	BASEPRI, r1
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80107d6:	4632      	mov	r2, r6
 80107d8:	4629      	mov	r1, r5
 80107da:	4620      	mov	r0, r4
 80107dc:	f7ff ffb8 	bl	8010750 <SEGGER_RTT_WriteNoLock>
  SEGGER_RTT_UNLOCK();
 80107e0:	f387 8811 	msr	BASEPRI, r7
  return Status;
}
 80107e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  INIT();
 80107e6:	f7ff fecf 	bl	8010588 <_DoInit>
 80107ea:	e7ee      	b.n	80107ca <SEGGER_RTT_Write+0xe>
 80107ec:	20009bb8 	.word	0x20009bb8

080107f0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80107f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107f2:	4607      	mov	r7, r0
 80107f4:	460e      	mov	r6, r1
 80107f6:	4615      	mov	r5, r2
 80107f8:	461c      	mov	r4, r3
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80107fa:	4b1f      	ldr	r3, [pc, #124]	; (8010878 <SEGGER_RTT_AllocUpBuffer+0x88>)
 80107fc:	781b      	ldrb	r3, [r3, #0]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d034      	beq.n	801086c <SEGGER_RTT_AllocUpBuffer+0x7c>
  SEGGER_RTT_LOCK();
 8010802:	f3ef 8211 	mrs	r2, BASEPRI
 8010806:	f04f 0120 	mov.w	r1, #32
 801080a:	f381 8811 	msr	BASEPRI, r1
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  BufferIndex = 0;
 801080e:	2000      	movs	r0, #0
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8010810:	f100 0c01 	add.w	ip, r0, #1
 8010814:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8010818:	4b17      	ldr	r3, [pc, #92]	; (8010878 <SEGGER_RTT_AllocUpBuffer+0x88>)
 801081a:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 801081e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8010822:	b123      	cbz	r3, 801082e <SEGGER_RTT_AllocUpBuffer+0x3e>
      break;
    }
    BufferIndex++;
 8010824:	3001      	adds	r0, #1
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8010826:	4b14      	ldr	r3, [pc, #80]	; (8010878 <SEGGER_RTT_AllocUpBuffer+0x88>)
 8010828:	691b      	ldr	r3, [r3, #16]
 801082a:	4283      	cmp	r3, r0
 801082c:	dcf0      	bgt.n	8010810 <SEGGER_RTT_AllocUpBuffer+0x20>
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 801082e:	4b12      	ldr	r3, [pc, #72]	; (8010878 <SEGGER_RTT_AllocUpBuffer+0x88>)
 8010830:	691b      	ldr	r3, [r3, #16]
 8010832:	4283      	cmp	r3, r0
 8010834:	dd1d      	ble.n	8010872 <SEGGER_RTT_AllocUpBuffer+0x82>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8010836:	4b10      	ldr	r3, [pc, #64]	; (8010878 <SEGGER_RTT_AllocUpBuffer+0x88>)
 8010838:	1c41      	adds	r1, r0, #1
 801083a:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801083e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8010842:	f843 700c 	str.w	r7, [r3, ip]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8010846:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801084a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801084e:	604e      	str	r6, [r1, #4]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8010850:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8010854:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8010858:	621d      	str	r5, [r3, #32]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 801085a:	2100      	movs	r1, #0
 801085c:	6299      	str	r1, [r3, #40]	; 0x28
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 801085e:	6259      	str	r1, [r3, #36]	; 0x24
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8010860:	62dc      	str	r4, [r3, #44]	; 0x2c
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8010862:	f3bf 8f5f 	dmb	sy
  } else {
    BufferIndex = -1;
  }
  SEGGER_RTT_UNLOCK();
 8010866:	f382 8811 	msr	BASEPRI, r2
  return BufferIndex;
}
 801086a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  INIT();
 801086c:	f7ff fe8c 	bl	8010588 <_DoInit>
 8010870:	e7c7      	b.n	8010802 <SEGGER_RTT_AllocUpBuffer+0x12>
    BufferIndex = -1;
 8010872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010876:	e7f6      	b.n	8010866 <SEGGER_RTT_AllocUpBuffer+0x76>
 8010878:	20009bb8 	.word	0x20009bb8

0801087c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 801087c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010880:	4604      	mov	r4, r0
 8010882:	4688      	mov	r8, r1
 8010884:	4617      	mov	r7, r2
 8010886:	461e      	mov	r6, r3
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8010888:	4b17      	ldr	r3, [pc, #92]	; (80108e8 <SEGGER_RTT_ConfigDownBuffer+0x6c>)
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	b333      	cbz	r3, 80108dc <SEGGER_RTT_ConfigDownBuffer+0x60>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 801088e:	2c02      	cmp	r4, #2
 8010890:	d827      	bhi.n	80108e2 <SEGGER_RTT_ConfigDownBuffer+0x66>
    SEGGER_RTT_LOCK();
 8010892:	f3ef 8011 	mrs	r0, BASEPRI
 8010896:	f04f 0120 	mov.w	r1, #32
 801089a:	f381 8811 	msr	BASEPRI, r1
    pDown = &pRTTCB->aDown[BufferIndex];
    if (BufferIndex) {
 801089e:	b17c      	cbz	r4, 80108c0 <SEGGER_RTT_ConfigDownBuffer+0x44>
      pDown->sName        = sName;
 80108a0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80108a4:	4d10      	ldr	r5, [pc, #64]	; (80108e8 <SEGGER_RTT_ConfigDownBuffer+0x6c>)
 80108a6:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80108aa:	f8cc 8060 	str.w	r8, [ip, #96]	; 0x60
      pDown->pBuffer      = (char*)pBuffer;
 80108ae:	f8cc 7064 	str.w	r7, [ip, #100]	; 0x64
      pDown->SizeOfBuffer = BufferSize;
 80108b2:	f8cc 6068 	str.w	r6, [ip, #104]	; 0x68
      pDown->RdOff        = 0u;
 80108b6:	2300      	movs	r3, #0
 80108b8:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
      pDown->WrOff        = 0u;
 80108bc:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
    }
    pDown->Flags          = Flags;
 80108c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80108c4:	4b08      	ldr	r3, [pc, #32]	; (80108e8 <SEGGER_RTT_ConfigDownBuffer+0x6c>)
 80108c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80108ca:	9a06      	ldr	r2, [sp, #24]
 80108cc:	675a      	str	r2, [r3, #116]	; 0x74
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80108ce:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80108d2:	f380 8811 	msr	BASEPRI, r0
    r =  0;
 80108d6:	2000      	movs	r0, #0
  } else {
    r = -1;
  }
  return r;
}
 80108d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  INIT();
 80108dc:	f7ff fe54 	bl	8010588 <_DoInit>
 80108e0:	e7d5      	b.n	801088e <SEGGER_RTT_ConfigDownBuffer+0x12>
    r = -1;
 80108e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return r;
 80108e6:	e7f7      	b.n	80108d8 <SEGGER_RTT_ConfigDownBuffer+0x5c>
 80108e8:	20009bb8 	.word	0x20009bb8

080108ec <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80108ec:	4684      	mov	ip, r0
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
  if (pText != NULL) {
 80108ee:	460b      	mov	r3, r1
 80108f0:	b329      	cbz	r1, 801093e <_EncodeStr+0x52>
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80108f2:	b410      	push	{r4}
  Len = 0;
 80108f4:	2100      	movs	r1, #0
 80108f6:	e000      	b.n	80108fa <_EncodeStr+0xe>
    while(*(pText + Len) != 0) {
      Len++;
 80108f8:	3101      	adds	r1, #1
    while(*(pText + Len) != 0) {
 80108fa:	5c5c      	ldrb	r4, [r3, r1]
 80108fc:	2c00      	cmp	r4, #0
 80108fe:	d1fb      	bne.n	80108f8 <_EncodeStr+0xc>
    }
    if (Len > Limit) {
 8010900:	4291      	cmp	r1, r2
 8010902:	d800      	bhi.n	8010906 <_EncodeStr+0x1a>
 8010904:	460a      	mov	r2, r1
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8010906:	2afe      	cmp	r2, #254	; 0xfe
 8010908:	d804      	bhi.n	8010914 <_EncodeStr+0x28>
    *pPayload++ = (U8)Len;
 801090a:	4660      	mov	r0, ip
 801090c:	f800 2b01 	strb.w	r2, [r0], #1
    *pPayload++ = ((Len >> 8) & 255);
  }
  //
  // copy string
  //
  n = 0;
 8010910:	2100      	movs	r1, #0
  while (n < Len) {
 8010912:	e00f      	b.n	8010934 <_EncodeStr+0x48>
    *pPayload++ = 255;
 8010914:	21ff      	movs	r1, #255	; 0xff
 8010916:	f88c 1000 	strb.w	r1, [ip]
    *pPayload++ = (Len & 255);
 801091a:	f88c 2001 	strb.w	r2, [ip, #1]
    *pPayload++ = ((Len >> 8) & 255);
 801091e:	0a11      	lsrs	r1, r2, #8
 8010920:	f10c 0003 	add.w	r0, ip, #3
 8010924:	f88c 1002 	strb.w	r1, [ip, #2]
 8010928:	e7f2      	b.n	8010910 <_EncodeStr+0x24>
    *pPayload++ = *pText++;
 801092a:	f813 cb01 	ldrb.w	ip, [r3], #1
 801092e:	f800 cb01 	strb.w	ip, [r0], #1
    n++;
 8010932:	3101      	adds	r1, #1
  while (n < Len) {
 8010934:	4291      	cmp	r1, r2
 8010936:	d3f8      	bcc.n	801092a <_EncodeStr+0x3e>
  }
  return pPayload;
}
 8010938:	f85d 4b04 	ldr.w	r4, [sp], #4
 801093c:	4770      	bx	lr
  Len = 0;
 801093e:	2200      	movs	r2, #0
    *pPayload++ = (U8)Len;
 8010940:	f800 2b01 	strb.w	r2, [r0], #1
  n = 0;
 8010944:	2100      	movs	r1, #0
 8010946:	e004      	b.n	8010952 <_EncodeStr+0x66>
    *pPayload++ = *pText++;
 8010948:	f813 cb01 	ldrb.w	ip, [r3], #1
 801094c:	f800 cb01 	strb.w	ip, [r0], #1
    n++;
 8010950:	3101      	adds	r1, #1
  while (n < Len) {
 8010952:	4291      	cmp	r1, r2
 8010954:	d3f8      	bcc.n	8010948 <_EncodeStr+0x5c>
 8010956:	4770      	bx	lr

08010958 <_PreparePacket>:
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
}
 8010958:	3007      	adds	r0, #7
 801095a:	4770      	bx	lr

0801095c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 801095c:	b510      	push	{r4, lr}
 801095e:	b084      	sub	sp, #16
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8010960:	2301      	movs	r3, #1
 8010962:	f88d 3004 	strb.w	r3, [sp, #4]
  pPayload   = &aPacket[1];
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8010966:	4b18      	ldr	r3, [pc, #96]	; (80109c8 <_TrySendOverflowPacket+0x6c>)
 8010968:	695b      	ldr	r3, [r3, #20]
 801096a:	f10d 0205 	add.w	r2, sp, #5
 801096e:	e004      	b.n	801097a <_TrySendOverflowPacket+0x1e>
 8010970:	f063 017f 	orn	r1, r3, #127	; 0x7f
 8010974:	f802 1b01 	strb.w	r1, [r2], #1
 8010978:	09db      	lsrs	r3, r3, #7
 801097a:	2b7f      	cmp	r3, #127	; 0x7f
 801097c:	d8f8      	bhi.n	8010970 <_TrySendOverflowPacket+0x14>
 801097e:	f802 3b01 	strb.w	r3, [r2], #1
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8010982:	4b12      	ldr	r3, [pc, #72]	; (80109cc <_TrySendOverflowPacket+0x70>)
 8010984:	685c      	ldr	r4, [r3, #4]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8010986:	4b10      	ldr	r3, [pc, #64]	; (80109c8 <_TrySendOverflowPacket+0x6c>)
 8010988:	68db      	ldr	r3, [r3, #12]
 801098a:	1ae3      	subs	r3, r4, r3
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 801098c:	e004      	b.n	8010998 <_TrySendOverflowPacket+0x3c>
 801098e:	f063 017f 	orn	r1, r3, #127	; 0x7f
 8010992:	f802 1b01 	strb.w	r1, [r2], #1
 8010996:	09db      	lsrs	r3, r3, #7
 8010998:	2b7f      	cmp	r3, #127	; 0x7f
 801099a:	d8f8      	bhi.n	801098e <_TrySendOverflowPacket+0x32>
 801099c:	f802 3b01 	strb.w	r3, [r2], #1
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80109a0:	a901      	add	r1, sp, #4
 80109a2:	1a52      	subs	r2, r2, r1
 80109a4:	4b08      	ldr	r3, [pc, #32]	; (80109c8 <_TrySendOverflowPacket+0x6c>)
 80109a6:	7858      	ldrb	r0, [r3, #1]
 80109a8:	f7ef fc3a 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80109ac:	b130      	cbz	r0, 80109bc <_TrySendOverflowPacket+0x60>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80109ae:	4b06      	ldr	r3, [pc, #24]	; (80109c8 <_TrySendOverflowPacket+0x6c>)
 80109b0:	60dc      	str	r4, [r3, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80109b2:	781a      	ldrb	r2, [r3, #0]
 80109b4:	3a01      	subs	r2, #1
 80109b6:	701a      	strb	r2, [r3, #0]
  } else {
    _SYSVIEW_Globals.DropCount++;
  }
  //
  return Status;
}
 80109b8:	b004      	add	sp, #16
 80109ba:	bd10      	pop	{r4, pc}
    _SYSVIEW_Globals.DropCount++;
 80109bc:	4a02      	ldr	r2, [pc, #8]	; (80109c8 <_TrySendOverflowPacket+0x6c>)
 80109be:	6953      	ldr	r3, [r2, #20]
 80109c0:	3301      	adds	r3, #1
 80109c2:	6153      	str	r3, [r2, #20]
  return Status;
 80109c4:	e7f8      	b.n	80109b8 <_TrySendOverflowPacket+0x5c>
 80109c6:	bf00      	nop
 80109c8:	2000a07c 	.word	0x2000a07c
 80109cc:	e0001000 	.word	0xe0001000

080109d0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80109d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109d4:	b082      	sub	sp, #8
 80109d6:	4607      	mov	r7, r0
 80109d8:	460e      	mov	r6, r1
 80109da:	4690      	mov	r8, r2
 80109dc:	461d      	mov	r5, r3
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80109de:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8010a38 <SEGGER_SYSVIEW_Init+0x68>
 80109e2:	2300      	movs	r3, #0
 80109e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80109e8:	490f      	ldr	r1, [pc, #60]	; (8010a28 <SEGGER_SYSVIEW_Init+0x58>)
 80109ea:	4648      	mov	r0, r9
 80109ec:	f7ff ff00 	bl	80107f0 <SEGGER_RTT_AllocUpBuffer>
 80109f0:	b2c0      	uxtb	r0, r0
 80109f2:	4c0e      	ldr	r4, [pc, #56]	; (8010a2c <SEGGER_SYSVIEW_Init+0x5c>)
 80109f4:	7060      	strb	r0, [r4, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80109f6:	7620      	strb	r0, [r4, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80109f8:	f04f 0a00 	mov.w	sl, #0
 80109fc:	f8cd a000 	str.w	sl, [sp]
 8010a00:	2308      	movs	r3, #8
 8010a02:	4a0b      	ldr	r2, [pc, #44]	; (8010a30 <SEGGER_SYSVIEW_Init+0x60>)
 8010a04:	4649      	mov	r1, r9
 8010a06:	f7ff ff39 	bl	801087c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8010a0a:	f8c4 a010 	str.w	sl, [r4, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8010a0e:	4b09      	ldr	r3, [pc, #36]	; (8010a34 <SEGGER_SYSVIEW_Init+0x64>)
 8010a10:	685b      	ldr	r3, [r3, #4]
 8010a12:	60e3      	str	r3, [r4, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8010a14:	f8c4 8020 	str.w	r8, [r4, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8010a18:	6067      	str	r7, [r4, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8010a1a:	60a6      	str	r6, [r4, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8010a1c:	6265      	str	r5, [r4, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8010a1e:	f884 a000 	strb.w	sl, [r4]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8010a22:	b002      	add	sp, #8
 8010a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a28:	2000a0a4 	.word	0x2000a0a4
 8010a2c:	2000a07c 	.word	0x2000a07c
 8010a30:	2000a070 	.word	0x2000a070
 8010a34:	e0001000 	.word	0xe0001000
 8010a38:	08016af4 	.word	0x08016af4

08010a3c <SEGGER_SYSVIEW_SetRAMBase>:
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8010a3c:	4b01      	ldr	r3, [pc, #4]	; (8010a44 <SEGGER_SYSVIEW_SetRAMBase+0x8>)
 8010a3e:	6118      	str	r0, [r3, #16]
}
 8010a40:	4770      	bx	lr
 8010a42:	bf00      	nop
 8010a44:	2000a07c 	.word	0x2000a07c

08010a48 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8010a48:	b508      	push	{r3, lr}
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8010a4a:	4b03      	ldr	r3, [pc, #12]	; (8010a58 <SEGGER_SYSVIEW_SendTaskList+0x10>)
 8010a4c:	6a1b      	ldr	r3, [r3, #32]
 8010a4e:	b113      	cbz	r3, 8010a56 <SEGGER_SYSVIEW_SendTaskList+0xe>
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	b103      	cbz	r3, 8010a56 <SEGGER_SYSVIEW_SendTaskList+0xe>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8010a54:	4798      	blx	r3
  }
}
 8010a56:	bd08      	pop	{r3, pc}
 8010a58:	2000a07c 	.word	0x2000a07c

08010a5c <SEGGER_SYSVIEW_ShrinkId>:
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
  return SHRINK_ID(Id);
 8010a5c:	4b01      	ldr	r3, [pc, #4]	; (8010a64 <SEGGER_SYSVIEW_ShrinkId+0x8>)
 8010a5e:	691b      	ldr	r3, [r3, #16]
}
 8010a60:	1ac0      	subs	r0, r0, r3
 8010a62:	4770      	bx	lr
 8010a64:	2000a07c 	.word	0x2000a07c

08010a68 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8010a68:	b510      	push	{r4, lr}
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8010a6a:	4b06      	ldr	r3, [pc, #24]	; (8010a84 <SEGGER_SYSVIEW_SendModuleDescription+0x1c>)
 8010a6c:	681c      	ldr	r4, [r3, #0]
 8010a6e:	b924      	cbnz	r4, 8010a7a <SEGGER_SYSVIEW_SendModuleDescription+0x12>
        pModule->pfSendModuleDesc();
      }
      pModule = pModule->pNext;
    } while (pModule);
  }
}
 8010a70:	bd10      	pop	{r4, pc}
        pModule->pfSendModuleDesc();
 8010a72:	4798      	blx	r3
      pModule = pModule->pNext;
 8010a74:	6924      	ldr	r4, [r4, #16]
    } while (pModule);
 8010a76:	2c00      	cmp	r4, #0
 8010a78:	d0fa      	beq.n	8010a70 <SEGGER_SYSVIEW_SendModuleDescription+0x8>
      if (pModule->pfSendModuleDesc) {
 8010a7a:	68e3      	ldr	r3, [r4, #12]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d1f8      	bne.n	8010a72 <SEGGER_SYSVIEW_SendModuleDescription+0xa>
 8010a80:	e7f8      	b.n	8010a74 <SEGGER_SYSVIEW_SendModuleDescription+0xc>
 8010a82:	bf00      	nop
 8010a84:	2000b188 	.word	0x2000b188

08010a88 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8010a88:	b510      	push	{r4, lr}
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8010a8a:	f3ef 8411 	mrs	r4, BASEPRI
 8010a8e:	f04f 0120 	mov.w	r1, #32
 8010a92:	f381 8811 	msr	BASEPRI, r1
 8010a96:	480b      	ldr	r0, [pc, #44]	; (8010ac4 <SEGGER_SYSVIEW_SendNumModules+0x3c>)
 8010a98:	f7ff ff5e 	bl	8010958 <_PreparePacket>
  pPayload = pPayloadStart;
  ENCODE_U32(pPayload, _NumModules);
 8010a9c:	4b0a      	ldr	r3, [pc, #40]	; (8010ac8 <SEGGER_SYSVIEW_SendNumModules+0x40>)
 8010a9e:	781b      	ldrb	r3, [r3, #0]
 8010aa0:	4601      	mov	r1, r0
 8010aa2:	e004      	b.n	8010aae <SEGGER_SYSVIEW_SendNumModules+0x26>
 8010aa4:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8010aa8:	f801 2b01 	strb.w	r2, [r1], #1
 8010aac:	09db      	lsrs	r3, r3, #7
 8010aae:	2b7f      	cmp	r3, #127	; 0x7f
 8010ab0:	d8f8      	bhi.n	8010aa4 <SEGGER_SYSVIEW_SendNumModules+0x1c>
 8010ab2:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8010ab6:	221b      	movs	r2, #27
 8010ab8:	f000 f8b0 	bl	8010c1c <_SendPacket>
  RECORD_END();
 8010abc:	f384 8811 	msr	BASEPRI, r4
}
 8010ac0:	bd10      	pop	{r4, pc}
 8010ac2:	bf00      	nop
 8010ac4:	2000b0a4 	.word	0x2000b0a4
 8010ac8:	2000a078 	.word	0x2000a078

08010acc <SEGGER_SYSVIEW_Start>:
void SEGGER_SYSVIEW_Start(void) {
 8010acc:	b538      	push	{r3, r4, r5, lr}
    _SYSVIEW_Globals.EnableState = 1;
 8010ace:	4d29      	ldr	r5, [pc, #164]	; (8010b74 <SEGGER_SYSVIEW_Start+0xa8>)
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	702b      	strb	r3, [r5, #0]
    SEGGER_SYSVIEW_LOCK();
 8010ad4:	f3ef 8411 	mrs	r4, BASEPRI
 8010ad8:	f04f 0120 	mov.w	r1, #32
 8010adc:	f381 8811 	msr	BASEPRI, r1
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8010ae0:	220a      	movs	r2, #10
 8010ae2:	4925      	ldr	r1, [pc, #148]	; (8010b78 <SEGGER_SYSVIEW_Start+0xac>)
 8010ae4:	7868      	ldrb	r0, [r5, #1]
 8010ae6:	f7ef fb9b 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8010aea:	f384 8811 	msr	BASEPRI, r4
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8010aee:	200a      	movs	r0, #10
 8010af0:	f000 f95a 	bl	8010da8 <SEGGER_SYSVIEW_RecordVoid>
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8010af4:	f3ef 8411 	mrs	r4, BASEPRI
 8010af8:	f04f 0120 	mov.w	r1, #32
 8010afc:	f381 8811 	msr	BASEPRI, r1
 8010b00:	481e      	ldr	r0, [pc, #120]	; (8010b7c <SEGGER_SYSVIEW_Start+0xb0>)
 8010b02:	f7ff ff29 	bl	8010958 <_PreparePacket>
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8010b06:	686a      	ldr	r2, [r5, #4]
 8010b08:	4603      	mov	r3, r0
 8010b0a:	e004      	b.n	8010b16 <SEGGER_SYSVIEW_Start+0x4a>
 8010b0c:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8010b10:	f803 1b01 	strb.w	r1, [r3], #1
 8010b14:	09d2      	lsrs	r2, r2, #7
 8010b16:	2a7f      	cmp	r2, #127	; 0x7f
 8010b18:	d8f8      	bhi.n	8010b0c <SEGGER_SYSVIEW_Start+0x40>
 8010b1a:	f803 2b01 	strb.w	r2, [r3], #1
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8010b1e:	4a15      	ldr	r2, [pc, #84]	; (8010b74 <SEGGER_SYSVIEW_Start+0xa8>)
 8010b20:	6892      	ldr	r2, [r2, #8]
 8010b22:	e004      	b.n	8010b2e <SEGGER_SYSVIEW_Start+0x62>
 8010b24:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8010b28:	f803 1b01 	strb.w	r1, [r3], #1
 8010b2c:	09d2      	lsrs	r2, r2, #7
 8010b2e:	2a7f      	cmp	r2, #127	; 0x7f
 8010b30:	d8f8      	bhi.n	8010b24 <SEGGER_SYSVIEW_Start+0x58>
 8010b32:	f803 2b01 	strb.w	r2, [r3], #1
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8010b36:	4a0f      	ldr	r2, [pc, #60]	; (8010b74 <SEGGER_SYSVIEW_Start+0xa8>)
 8010b38:	6912      	ldr	r2, [r2, #16]
 8010b3a:	e004      	b.n	8010b46 <SEGGER_SYSVIEW_Start+0x7a>
 8010b3c:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8010b40:	f803 1b01 	strb.w	r1, [r3], #1
 8010b44:	09d2      	lsrs	r2, r2, #7
 8010b46:	2a7f      	cmp	r2, #127	; 0x7f
 8010b48:	d8f8      	bhi.n	8010b3c <SEGGER_SYSVIEW_Start+0x70>
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	f801 2b02 	strb.w	r2, [r1], #2
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8010b50:	2200      	movs	r2, #0
 8010b52:	705a      	strb	r2, [r3, #1]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8010b54:	2218      	movs	r2, #24
 8010b56:	f000 f861 	bl	8010c1c <_SendPacket>
      RECORD_END();
 8010b5a:	f384 8811 	msr	BASEPRI, r4
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8010b5e:	4b05      	ldr	r3, [pc, #20]	; (8010b74 <SEGGER_SYSVIEW_Start+0xa8>)
 8010b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b62:	b103      	cbz	r3, 8010b66 <SEGGER_SYSVIEW_Start+0x9a>
      _SYSVIEW_Globals.pfSendSysDesc();
 8010b64:	4798      	blx	r3
    SEGGER_SYSVIEW_RecordSystime();
 8010b66:	f000 f97d 	bl	8010e64 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8010b6a:	f7ff ff6d 	bl	8010a48 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8010b6e:	f7ff ff8b 	bl	8010a88 <SEGGER_SYSVIEW_SendNumModules>
}
 8010b72:	bd38      	pop	{r3, r4, r5, pc}
 8010b74:	2000a07c 	.word	0x2000a07c
 8010b78:	08016afc 	.word	0x08016afc
 8010b7c:	2000b0a4 	.word	0x2000b0a4

08010b80 <_HandleIncomingPacket>:
static void _HandleIncomingPacket(void) {
 8010b80:	b500      	push	{lr}
 8010b82:	b083      	sub	sp, #12
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8010b84:	2201      	movs	r2, #1
 8010b86:	f10d 0107 	add.w	r1, sp, #7
 8010b8a:	4b23      	ldr	r3, [pc, #140]	; (8010c18 <_HandleIncomingPacket+0x98>)
 8010b8c:	7e18      	ldrb	r0, [r3, #24]
 8010b8e:	f7ff fd8f 	bl	80106b0 <SEGGER_RTT_ReadNoLock>
  if (Status > 0) {
 8010b92:	b308      	cbz	r0, 8010bd8 <_HandleIncomingPacket+0x58>
    switch (Cmd) {
 8010b94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010b98:	2b07      	cmp	r3, #7
 8010b9a:	d80a      	bhi.n	8010bb2 <_HandleIncomingPacket+0x32>
 8010b9c:	b25a      	sxtb	r2, r3
 8010b9e:	b382      	cbz	r2, 8010c02 <_HandleIncomingPacket+0x82>
 8010ba0:	1e5a      	subs	r2, r3, #1
 8010ba2:	2a06      	cmp	r2, #6
 8010ba4:	d82d      	bhi.n	8010c02 <_HandleIncomingPacket+0x82>
 8010ba6:	e8df f002 	tbb	[pc, r2]
 8010baa:	1a15      	.short	0x1a15
 8010bac:	2623201d 	.word	0x2623201d
 8010bb0:	29          	.byte	0x29
 8010bb1:	00          	.byte	0x00
 8010bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8010bb4:	d010      	beq.n	8010bd8 <_HandleIncomingPacket+0x58>
 8010bb6:	2b80      	cmp	r3, #128	; 0x80
 8010bb8:	d123      	bne.n	8010c02 <_HandleIncomingPacket+0x82>
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8010bba:	2201      	movs	r2, #1
 8010bbc:	f10d 0107 	add.w	r1, sp, #7
 8010bc0:	4b15      	ldr	r3, [pc, #84]	; (8010c18 <_HandleIncomingPacket+0x98>)
 8010bc2:	7e18      	ldrb	r0, [r3, #24]
 8010bc4:	f7ff fd74 	bl	80106b0 <SEGGER_RTT_ReadNoLock>
      if (Status > 0) {
 8010bc8:	b130      	cbz	r0, 8010bd8 <_HandleIncomingPacket+0x58>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8010bca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010bce:	f000 fb39 	bl	8011244 <SEGGER_SYSVIEW_SendModule>
 8010bd2:	e001      	b.n	8010bd8 <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_Start();
 8010bd4:	f7ff ff7a 	bl	8010acc <SEGGER_SYSVIEW_Start>
}
 8010bd8:	b003      	add	sp, #12
 8010bda:	f85d fb04 	ldr.w	pc, [sp], #4
      SEGGER_SYSVIEW_Stop();
 8010bde:	f000 f9d9 	bl	8010f94 <SEGGER_SYSVIEW_Stop>
      break;
 8010be2:	e7f9      	b.n	8010bd8 <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_RecordSystime();
 8010be4:	f000 f93e 	bl	8010e64 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8010be8:	e7f6      	b.n	8010bd8 <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_SendTaskList();
 8010bea:	f7ff ff2d 	bl	8010a48 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8010bee:	e7f3      	b.n	8010bd8 <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_GetSysDesc();
 8010bf0:	f000 f9ec 	bl	8010fcc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8010bf4:	e7f0      	b.n	8010bd8 <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_SendNumModules();
 8010bf6:	f7ff ff47 	bl	8010a88 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8010bfa:	e7ed      	b.n	8010bd8 <_HandleIncomingPacket+0x58>
      SEGGER_SYSVIEW_SendModuleDescription();
 8010bfc:	f7ff ff34 	bl	8010a68 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8010c00:	e7ea      	b.n	8010bd8 <_HandleIncomingPacket+0x58>
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8010c02:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010c06:	d0e7      	beq.n	8010bd8 <_HandleIncomingPacket+0x58>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8010c08:	2201      	movs	r2, #1
 8010c0a:	f10d 0107 	add.w	r1, sp, #7
 8010c0e:	4b02      	ldr	r3, [pc, #8]	; (8010c18 <_HandleIncomingPacket+0x98>)
 8010c10:	7e18      	ldrb	r0, [r3, #24]
 8010c12:	f7ff fd4d 	bl	80106b0 <SEGGER_RTT_ReadNoLock>
}
 8010c16:	e7df      	b.n	8010bd8 <_HandleIncomingPacket+0x58>
 8010c18:	2000a07c 	.word	0x2000a07c

08010c1c <_SendPacket>:
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8010c1c:	b570      	push	{r4, r5, r6, lr}
 8010c1e:	4606      	mov	r6, r0
 8010c20:	460c      	mov	r4, r1
 8010c22:	4615      	mov	r5, r2
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8010c24:	4b5d      	ldr	r3, [pc, #372]	; (8010d9c <_SendPacket+0x180>)
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	2b01      	cmp	r3, #1
 8010c2a:	d004      	beq.n	8010c36 <_SendPacket+0x1a>
  if (_SYSVIEW_Globals.EnableState == 0) {
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	f000 8094 	beq.w	8010d5a <_SendPacket+0x13e>
  if (_SYSVIEW_Globals.EnableState == 2) {
 8010c32:	2b02      	cmp	r3, #2
 8010c34:	d013      	beq.n	8010c5e <_SendPacket+0x42>
  if (EventId < 32) {
 8010c36:	2d1f      	cmp	r5, #31
 8010c38:	d806      	bhi.n	8010c48 <_SendPacket+0x2c>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8010c3a:	4b58      	ldr	r3, [pc, #352]	; (8010d9c <_SendPacket+0x180>)
 8010c3c:	69db      	ldr	r3, [r3, #28]
 8010c3e:	40eb      	lsrs	r3, r5
 8010c40:	f013 0f01 	tst.w	r3, #1
 8010c44:	f040 8089 	bne.w	8010d5a <_SendPacket+0x13e>
  if (EventId < 24) {
 8010c48:	2d17      	cmp	r5, #23
 8010c4a:	d80f      	bhi.n	8010c6c <_SendPacket+0x50>
    *--pStartPacket = (U8)EventId;
 8010c4c:	1e71      	subs	r1, r6, #1
 8010c4e:	f806 5c01 	strb.w	r5, [r6, #-1]
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8010c52:	4b53      	ldr	r3, [pc, #332]	; (8010da0 <_SendPacket+0x184>)
 8010c54:	685d      	ldr	r5, [r3, #4]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8010c56:	4b51      	ldr	r3, [pc, #324]	; (8010d9c <_SendPacket+0x180>)
 8010c58:	68db      	ldr	r3, [r3, #12]
 8010c5a:	1aeb      	subs	r3, r5, r3
  ENCODE_U32(pEndPacket, Delta);
 8010c5c:	e071      	b.n	8010d42 <_SendPacket+0x126>
    _TrySendOverflowPacket();
 8010c5e:	f7ff fe7d 	bl	801095c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8010c62:	4b4e      	ldr	r3, [pc, #312]	; (8010d9c <_SendPacket+0x180>)
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	d177      	bne.n	8010d5a <_SendPacket+0x13e>
Send:
 8010c6a:	e7e4      	b.n	8010c36 <_SendPacket+0x1a>
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8010c6c:	1ba3      	subs	r3, r4, r6
    if (NumBytes > 127) {
 8010c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8010c70:	d90e      	bls.n	8010c90 <_SendPacket+0x74>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8010c72:	f3c3 12c7 	ubfx	r2, r3, #7, #8
 8010c76:	f806 2c01 	strb.w	r2, [r6, #-1]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8010c7a:	1eb2      	subs	r2, r6, #2
 8010c7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010c80:	f806 3c02 	strb.w	r3, [r6, #-2]
    if (EventId < 127) {
 8010c84:	2d7e      	cmp	r5, #126	; 0x7e
 8010c86:	d807      	bhi.n	8010c98 <_SendPacket+0x7c>
      *--pStartPacket = (U8)EventId;
 8010c88:	1e51      	subs	r1, r2, #1
 8010c8a:	f802 5c01 	strb.w	r5, [r2, #-1]
 8010c8e:	e7e0      	b.n	8010c52 <_SendPacket+0x36>
      *--pStartPacket = (U8)NumBytes;
 8010c90:	1e72      	subs	r2, r6, #1
 8010c92:	f806 3c01 	strb.w	r3, [r6, #-1]
 8010c96:	e7f5      	b.n	8010c84 <_SendPacket+0x68>
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8010c98:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 8010c9c:	d209      	bcs.n	8010cb2 <_SendPacket+0x96>
        *--pStartPacket = (U8)(EventId >>  7);
 8010c9e:	f3c5 13c7 	ubfx	r3, r5, #7, #8
 8010ca2:	f802 3c01 	strb.w	r3, [r2, #-1]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010ca6:	1e91      	subs	r1, r2, #2
 8010ca8:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8010cac:	f802 5c02 	strb.w	r5, [r2, #-2]
 8010cb0:	e7cf      	b.n	8010c52 <_SendPacket+0x36>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8010cb2:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8010cb6:	d20e      	bcs.n	8010cd6 <_SendPacket+0xba>
        *--pStartPacket = (U8)(EventId >> 14);
 8010cb8:	f3c5 3387 	ubfx	r3, r5, #14, #8
 8010cbc:	f802 3c01 	strb.w	r3, [r2, #-1]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8010cc0:	09eb      	lsrs	r3, r5, #7
 8010cc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010cc6:	f802 3c02 	strb.w	r3, [r2, #-2]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010cca:	1ed1      	subs	r1, r2, #3
 8010ccc:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8010cd0:	f802 5c03 	strb.w	r5, [r2, #-3]
 8010cd4:	e7bd      	b.n	8010c52 <_SendPacket+0x36>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8010cd6:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8010cda:	d213      	bcs.n	8010d04 <_SendPacket+0xe8>
        *--pStartPacket = (U8)(EventId >> 21);
 8010cdc:	f3c5 5347 	ubfx	r3, r5, #21, #8
 8010ce0:	f802 3c01 	strb.w	r3, [r2, #-1]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8010ce4:	0bab      	lsrs	r3, r5, #14
 8010ce6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010cea:	f802 3c02 	strb.w	r3, [r2, #-2]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8010cee:	09eb      	lsrs	r3, r5, #7
 8010cf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010cf4:	f802 3c03 	strb.w	r3, [r2, #-3]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010cf8:	1f11      	subs	r1, r2, #4
 8010cfa:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8010cfe:	f802 5c04 	strb.w	r5, [r2, #-4]
 8010d02:	e7a6      	b.n	8010c52 <_SendPacket+0x36>
        *--pStartPacket = (U8)(EventId >> 28);
 8010d04:	0f2b      	lsrs	r3, r5, #28
 8010d06:	f802 3c01 	strb.w	r3, [r2, #-1]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8010d0a:	0d6b      	lsrs	r3, r5, #21
 8010d0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d10:	f802 3c02 	strb.w	r3, [r2, #-2]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8010d14:	0bab      	lsrs	r3, r5, #14
 8010d16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d1a:	f802 3c03 	strb.w	r3, [r2, #-3]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8010d1e:	09eb      	lsrs	r3, r5, #7
 8010d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d24:	f802 3c04 	strb.w	r3, [r2, #-4]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010d28:	1f51      	subs	r1, r2, #5
 8010d2a:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8010d2e:	f802 5c05 	strb.w	r5, [r2, #-5]
 8010d32:	e78e      	b.n	8010c52 <_SendPacket+0x36>
  ENCODE_U32(pEndPacket, Delta);
 8010d34:	4622      	mov	r2, r4
 8010d36:	f063 007f 	orn	r0, r3, #127	; 0x7f
 8010d3a:	f802 0b01 	strb.w	r0, [r2], #1
 8010d3e:	09db      	lsrs	r3, r3, #7
 8010d40:	4614      	mov	r4, r2
 8010d42:	2b7f      	cmp	r3, #127	; 0x7f
 8010d44:	d8f6      	bhi.n	8010d34 <_SendPacket+0x118>
 8010d46:	f804 3b01 	strb.w	r3, [r4], #1
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8010d4a:	1a62      	subs	r2, r4, r1
 8010d4c:	4b13      	ldr	r3, [pc, #76]	; (8010d9c <_SendPacket+0x180>)
 8010d4e:	7858      	ldrb	r0, [r3, #1]
 8010d50:	f7ef fa66 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
  if (Status) {
 8010d54:	b1a0      	cbz	r0, 8010d80 <_SendPacket+0x164>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8010d56:	4b11      	ldr	r3, [pc, #68]	; (8010d9c <_SendPacket+0x180>)
 8010d58:	60dd      	str	r5, [r3, #12]
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8010d5a:	4b10      	ldr	r3, [pc, #64]	; (8010d9c <_SendPacket+0x180>)
 8010d5c:	7e1b      	ldrb	r3, [r3, #24]
 8010d5e:	4a11      	ldr	r2, [pc, #68]	; (8010da4 <_SendPacket+0x188>)
 8010d60:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010d64:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8010d68:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 8010d6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010d6e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010d72:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8010d74:	4299      	cmp	r1, r3
 8010d76:	d002      	beq.n	8010d7e <_SendPacket+0x162>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8010d78:	4b08      	ldr	r3, [pc, #32]	; (8010d9c <_SendPacket+0x180>)
 8010d7a:	789b      	ldrb	r3, [r3, #2]
 8010d7c:	b12b      	cbz	r3, 8010d8a <_SendPacket+0x16e>
}
 8010d7e:	bd70      	pop	{r4, r5, r6, pc}
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8010d80:	4a06      	ldr	r2, [pc, #24]	; (8010d9c <_SendPacket+0x180>)
 8010d82:	7813      	ldrb	r3, [r2, #0]
 8010d84:	3301      	adds	r3, #1
 8010d86:	7013      	strb	r3, [r2, #0]
 8010d88:	e7e7      	b.n	8010d5a <_SendPacket+0x13e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8010d8a:	4c04      	ldr	r4, [pc, #16]	; (8010d9c <_SendPacket+0x180>)
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	70a3      	strb	r3, [r4, #2]
      _HandleIncomingPacket();
 8010d90:	f7ff fef6 	bl	8010b80 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8010d94:	2300      	movs	r3, #0
 8010d96:	70a3      	strb	r3, [r4, #2]
}
 8010d98:	e7f1      	b.n	8010d7e <_SendPacket+0x162>
 8010d9a:	bf00      	nop
 8010d9c:	2000a07c 	.word	0x2000a07c
 8010da0:	e0001000 	.word	0xe0001000
 8010da4:	20009bb8 	.word	0x20009bb8

08010da8 <SEGGER_SYSVIEW_RecordVoid>:
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8010da8:	b538      	push	{r3, r4, r5, lr}
 8010daa:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8010dac:	f3ef 8511 	mrs	r5, BASEPRI
 8010db0:	f04f 0120 	mov.w	r1, #32
 8010db4:	f381 8811 	msr	BASEPRI, r1
 8010db8:	4804      	ldr	r0, [pc, #16]	; (8010dcc <SEGGER_SYSVIEW_RecordVoid+0x24>)
 8010dba:	f7ff fdcd 	bl	8010958 <_PreparePacket>
 8010dbe:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8010dc0:	4622      	mov	r2, r4
 8010dc2:	f7ff ff2b 	bl	8010c1c <_SendPacket>
  RECORD_END();
 8010dc6:	f385 8811 	msr	BASEPRI, r5
}
 8010dca:	bd38      	pop	{r3, r4, r5, pc}
 8010dcc:	2000b0a4 	.word	0x2000b0a4

08010dd0 <SEGGER_SYSVIEW_RecordU32>:
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8010dd0:	b570      	push	{r4, r5, r6, lr}
 8010dd2:	4606      	mov	r6, r0
 8010dd4:	460c      	mov	r4, r1
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8010dd6:	f3ef 8511 	mrs	r5, BASEPRI
 8010dda:	f04f 0120 	mov.w	r1, #32
 8010dde:	f381 8811 	msr	BASEPRI, r1
 8010de2:	480a      	ldr	r0, [pc, #40]	; (8010e0c <SEGGER_SYSVIEW_RecordU32+0x3c>)
 8010de4:	f7ff fdb8 	bl	8010958 <_PreparePacket>
  ENCODE_U32(pPayload, Value);
 8010de8:	4601      	mov	r1, r0
 8010dea:	e004      	b.n	8010df6 <SEGGER_SYSVIEW_RecordU32+0x26>
 8010dec:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8010df0:	f801 3b01 	strb.w	r3, [r1], #1
 8010df4:	09e4      	lsrs	r4, r4, #7
 8010df6:	2c7f      	cmp	r4, #127	; 0x7f
 8010df8:	d8f8      	bhi.n	8010dec <SEGGER_SYSVIEW_RecordU32+0x1c>
 8010dfa:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010dfe:	4632      	mov	r2, r6
 8010e00:	f7ff ff0c 	bl	8010c1c <_SendPacket>
  RECORD_END();
 8010e04:	f385 8811 	msr	BASEPRI, r5
}
 8010e08:	bd70      	pop	{r4, r5, r6, pc}
 8010e0a:	bf00      	nop
 8010e0c:	2000b0a4 	.word	0x2000b0a4

08010e10 <SEGGER_SYSVIEW_RecordU32x2>:
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8010e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e12:	4606      	mov	r6, r0
 8010e14:	460f      	mov	r7, r1
 8010e16:	4614      	mov	r4, r2
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8010e18:	f3ef 8511 	mrs	r5, BASEPRI
 8010e1c:	f04f 0120 	mov.w	r1, #32
 8010e20:	f381 8811 	msr	BASEPRI, r1
 8010e24:	480e      	ldr	r0, [pc, #56]	; (8010e60 <SEGGER_SYSVIEW_RecordU32x2+0x50>)
 8010e26:	f7ff fd97 	bl	8010958 <_PreparePacket>
  ENCODE_U32(pPayload, Para0);
 8010e2a:	4601      	mov	r1, r0
 8010e2c:	e004      	b.n	8010e38 <SEGGER_SYSVIEW_RecordU32x2+0x28>
 8010e2e:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8010e32:	f801 3b01 	strb.w	r3, [r1], #1
 8010e36:	09ff      	lsrs	r7, r7, #7
 8010e38:	2f7f      	cmp	r7, #127	; 0x7f
 8010e3a:	d8f8      	bhi.n	8010e2e <SEGGER_SYSVIEW_RecordU32x2+0x1e>
 8010e3c:	f801 7b01 	strb.w	r7, [r1], #1
  ENCODE_U32(pPayload, Para1);
 8010e40:	e004      	b.n	8010e4c <SEGGER_SYSVIEW_RecordU32x2+0x3c>
 8010e42:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8010e46:	f801 3b01 	strb.w	r3, [r1], #1
 8010e4a:	09e4      	lsrs	r4, r4, #7
 8010e4c:	2c7f      	cmp	r4, #127	; 0x7f
 8010e4e:	d8f8      	bhi.n	8010e42 <SEGGER_SYSVIEW_RecordU32x2+0x32>
 8010e50:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010e54:	4632      	mov	r2, r6
 8010e56:	f7ff fee1 	bl	8010c1c <_SendPacket>
  RECORD_END();
 8010e5a:	f385 8811 	msr	BASEPRI, r5
}
 8010e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e60:	2000b0a4 	.word	0x2000b0a4

08010e64 <SEGGER_SYSVIEW_RecordSystime>:
void SEGGER_SYSVIEW_RecordSystime(void) {
 8010e64:	b508      	push	{r3, lr}
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8010e66:	4b09      	ldr	r3, [pc, #36]	; (8010e8c <SEGGER_SYSVIEW_RecordSystime+0x28>)
 8010e68:	6a1b      	ldr	r3, [r3, #32]
 8010e6a:	b143      	cbz	r3, 8010e7e <SEGGER_SYSVIEW_RecordSystime+0x1a>
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	b133      	cbz	r3, 8010e7e <SEGGER_SYSVIEW_RecordSystime+0x1a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8010e70:	4798      	blx	r3
 8010e72:	460a      	mov	r2, r1
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8010e74:	4601      	mov	r1, r0
 8010e76:	200d      	movs	r0, #13
 8010e78:	f7ff ffca 	bl	8010e10 <SEGGER_SYSVIEW_RecordU32x2>
}
 8010e7c:	bd08      	pop	{r3, pc}
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8010e7e:	4b04      	ldr	r3, [pc, #16]	; (8010e90 <SEGGER_SYSVIEW_RecordSystime+0x2c>)
 8010e80:	6859      	ldr	r1, [r3, #4]
 8010e82:	200c      	movs	r0, #12
 8010e84:	f7ff ffa4 	bl	8010dd0 <SEGGER_SYSVIEW_RecordU32>
}
 8010e88:	e7f8      	b.n	8010e7c <SEGGER_SYSVIEW_RecordSystime+0x18>
 8010e8a:	bf00      	nop
 8010e8c:	2000a07c 	.word	0x2000a07c
 8010e90:	e0001000 	.word	0xe0001000

08010e94 <SEGGER_SYSVIEW_RecordU32x3>:
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8010e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e98:	4606      	mov	r6, r0
 8010e9a:	4688      	mov	r8, r1
 8010e9c:	4617      	mov	r7, r2
 8010e9e:	461c      	mov	r4, r3
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8010ea0:	f3ef 8511 	mrs	r5, BASEPRI
 8010ea4:	f04f 0120 	mov.w	r1, #32
 8010ea8:	f381 8811 	msr	BASEPRI, r1
 8010eac:	4815      	ldr	r0, [pc, #84]	; (8010f04 <SEGGER_SYSVIEW_RecordU32x3+0x70>)
 8010eae:	f7ff fd53 	bl	8010958 <_PreparePacket>
  ENCODE_U32(pPayload, Para0);
 8010eb2:	4601      	mov	r1, r0
 8010eb4:	e005      	b.n	8010ec2 <SEGGER_SYSVIEW_RecordU32x3+0x2e>
 8010eb6:	f068 037f 	orn	r3, r8, #127	; 0x7f
 8010eba:	f801 3b01 	strb.w	r3, [r1], #1
 8010ebe:	ea4f 18d8 	mov.w	r8, r8, lsr #7
 8010ec2:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8010ec6:	d8f6      	bhi.n	8010eb6 <SEGGER_SYSVIEW_RecordU32x3+0x22>
 8010ec8:	f801 8b01 	strb.w	r8, [r1], #1
  ENCODE_U32(pPayload, Para1);
 8010ecc:	e004      	b.n	8010ed8 <SEGGER_SYSVIEW_RecordU32x3+0x44>
 8010ece:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8010ed2:	f801 3b01 	strb.w	r3, [r1], #1
 8010ed6:	09ff      	lsrs	r7, r7, #7
 8010ed8:	2f7f      	cmp	r7, #127	; 0x7f
 8010eda:	d8f8      	bhi.n	8010ece <SEGGER_SYSVIEW_RecordU32x3+0x3a>
 8010edc:	f801 7b01 	strb.w	r7, [r1], #1
  ENCODE_U32(pPayload, Para2);
 8010ee0:	e004      	b.n	8010eec <SEGGER_SYSVIEW_RecordU32x3+0x58>
 8010ee2:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8010ee6:	f801 3b01 	strb.w	r3, [r1], #1
 8010eea:	09e4      	lsrs	r4, r4, #7
 8010eec:	2c7f      	cmp	r4, #127	; 0x7f
 8010eee:	d8f8      	bhi.n	8010ee2 <SEGGER_SYSVIEW_RecordU32x3+0x4e>
 8010ef0:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010ef4:	4632      	mov	r2, r6
 8010ef6:	f7ff fe91 	bl	8010c1c <_SendPacket>
  RECORD_END();
 8010efa:	f385 8811 	msr	BASEPRI, r5
}
 8010efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f02:	bf00      	nop
 8010f04:	2000b0a4 	.word	0x2000b0a4

08010f08 <SEGGER_SYSVIEW_RecordU32x4>:
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8010f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f0c:	4606      	mov	r6, r0
 8010f0e:	4689      	mov	r9, r1
 8010f10:	4690      	mov	r8, r2
 8010f12:	461f      	mov	r7, r3
 8010f14:	9c08      	ldr	r4, [sp, #32]
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8010f16:	f3ef 8511 	mrs	r5, BASEPRI
 8010f1a:	f04f 0120 	mov.w	r1, #32
 8010f1e:	f381 8811 	msr	BASEPRI, r1
 8010f22:	481b      	ldr	r0, [pc, #108]	; (8010f90 <SEGGER_SYSVIEW_RecordU32x4+0x88>)
 8010f24:	f7ff fd18 	bl	8010958 <_PreparePacket>
  ENCODE_U32(pPayload, Para0);
 8010f28:	4601      	mov	r1, r0
 8010f2a:	e005      	b.n	8010f38 <SEGGER_SYSVIEW_RecordU32x4+0x30>
 8010f2c:	f069 037f 	orn	r3, r9, #127	; 0x7f
 8010f30:	f801 3b01 	strb.w	r3, [r1], #1
 8010f34:	ea4f 19d9 	mov.w	r9, r9, lsr #7
 8010f38:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
 8010f3c:	d8f6      	bhi.n	8010f2c <SEGGER_SYSVIEW_RecordU32x4+0x24>
 8010f3e:	f801 9b01 	strb.w	r9, [r1], #1
  ENCODE_U32(pPayload, Para1);
 8010f42:	e005      	b.n	8010f50 <SEGGER_SYSVIEW_RecordU32x4+0x48>
 8010f44:	f068 037f 	orn	r3, r8, #127	; 0x7f
 8010f48:	f801 3b01 	strb.w	r3, [r1], #1
 8010f4c:	ea4f 18d8 	mov.w	r8, r8, lsr #7
 8010f50:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8010f54:	d8f6      	bhi.n	8010f44 <SEGGER_SYSVIEW_RecordU32x4+0x3c>
 8010f56:	f801 8b01 	strb.w	r8, [r1], #1
  ENCODE_U32(pPayload, Para2);
 8010f5a:	e004      	b.n	8010f66 <SEGGER_SYSVIEW_RecordU32x4+0x5e>
 8010f5c:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8010f60:	f801 3b01 	strb.w	r3, [r1], #1
 8010f64:	09ff      	lsrs	r7, r7, #7
 8010f66:	2f7f      	cmp	r7, #127	; 0x7f
 8010f68:	d8f8      	bhi.n	8010f5c <SEGGER_SYSVIEW_RecordU32x4+0x54>
 8010f6a:	f801 7b01 	strb.w	r7, [r1], #1
  ENCODE_U32(pPayload, Para3);
 8010f6e:	e004      	b.n	8010f7a <SEGGER_SYSVIEW_RecordU32x4+0x72>
 8010f70:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8010f74:	f801 3b01 	strb.w	r3, [r1], #1
 8010f78:	09e4      	lsrs	r4, r4, #7
 8010f7a:	2c7f      	cmp	r4, #127	; 0x7f
 8010f7c:	d8f8      	bhi.n	8010f70 <SEGGER_SYSVIEW_RecordU32x4+0x68>
 8010f7e:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010f82:	4632      	mov	r2, r6
 8010f84:	f7ff fe4a 	bl	8010c1c <_SendPacket>
  RECORD_END();
 8010f88:	f385 8811 	msr	BASEPRI, r5
}
 8010f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f90:	2000b0a4 	.word	0x2000b0a4

08010f94 <SEGGER_SYSVIEW_Stop>:
void SEGGER_SYSVIEW_Stop(void) {
 8010f94:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8010f96:	f3ef 8411 	mrs	r4, BASEPRI
 8010f9a:	f04f 0120 	mov.w	r1, #32
 8010f9e:	f381 8811 	msr	BASEPRI, r1
 8010fa2:	4808      	ldr	r0, [pc, #32]	; (8010fc4 <SEGGER_SYSVIEW_Stop+0x30>)
 8010fa4:	f7ff fcd8 	bl	8010958 <_PreparePacket>
  if (_SYSVIEW_Globals.EnableState) {
 8010fa8:	4b07      	ldr	r3, [pc, #28]	; (8010fc8 <SEGGER_SYSVIEW_Stop+0x34>)
 8010faa:	781b      	ldrb	r3, [r3, #0]
 8010fac:	b913      	cbnz	r3, 8010fb4 <SEGGER_SYSVIEW_Stop+0x20>
  RECORD_END();
 8010fae:	f384 8811 	msr	BASEPRI, r4
}
 8010fb2:	bd10      	pop	{r4, pc}
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8010fb4:	220b      	movs	r2, #11
 8010fb6:	4601      	mov	r1, r0
 8010fb8:	f7ff fe30 	bl	8010c1c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8010fbc:	4b02      	ldr	r3, [pc, #8]	; (8010fc8 <SEGGER_SYSVIEW_Stop+0x34>)
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	701a      	strb	r2, [r3, #0]
 8010fc2:	e7f4      	b.n	8010fae <SEGGER_SYSVIEW_Stop+0x1a>
 8010fc4:	2000b0a4 	.word	0x2000b0a4
 8010fc8:	2000a07c 	.word	0x2000a07c

08010fcc <SEGGER_SYSVIEW_GetSysDesc>:
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8010fcc:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8010fce:	f3ef 8411 	mrs	r4, BASEPRI
 8010fd2:	f04f 0120 	mov.w	r1, #32
 8010fd6:	f381 8811 	msr	BASEPRI, r1
 8010fda:	481a      	ldr	r0, [pc, #104]	; (8011044 <SEGGER_SYSVIEW_GetSysDesc+0x78>)
 8010fdc:	f7ff fcbc 	bl	8010958 <_PreparePacket>
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8010fe0:	4b19      	ldr	r3, [pc, #100]	; (8011048 <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 8010fe2:	685a      	ldr	r2, [r3, #4]
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	e004      	b.n	8010ff2 <SEGGER_SYSVIEW_GetSysDesc+0x26>
 8010fe8:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8010fec:	f803 1b01 	strb.w	r1, [r3], #1
 8010ff0:	09d2      	lsrs	r2, r2, #7
 8010ff2:	2a7f      	cmp	r2, #127	; 0x7f
 8010ff4:	d8f8      	bhi.n	8010fe8 <SEGGER_SYSVIEW_GetSysDesc+0x1c>
 8010ff6:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8010ffa:	4a13      	ldr	r2, [pc, #76]	; (8011048 <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 8010ffc:	6892      	ldr	r2, [r2, #8]
 8010ffe:	e004      	b.n	801100a <SEGGER_SYSVIEW_GetSysDesc+0x3e>
 8011000:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8011004:	f803 1b01 	strb.w	r1, [r3], #1
 8011008:	09d2      	lsrs	r2, r2, #7
 801100a:	2a7f      	cmp	r2, #127	; 0x7f
 801100c:	d8f8      	bhi.n	8011000 <SEGGER_SYSVIEW_GetSysDesc+0x34>
 801100e:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8011012:	4a0d      	ldr	r2, [pc, #52]	; (8011048 <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 8011014:	6912      	ldr	r2, [r2, #16]
 8011016:	e004      	b.n	8011022 <SEGGER_SYSVIEW_GetSysDesc+0x56>
 8011018:	f062 017f 	orn	r1, r2, #127	; 0x7f
 801101c:	f803 1b01 	strb.w	r1, [r3], #1
 8011020:	09d2      	lsrs	r2, r2, #7
 8011022:	2a7f      	cmp	r2, #127	; 0x7f
 8011024:	d8f8      	bhi.n	8011018 <SEGGER_SYSVIEW_GetSysDesc+0x4c>
 8011026:	4619      	mov	r1, r3
 8011028:	f801 2b02 	strb.w	r2, [r1], #2
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 801102c:	2200      	movs	r2, #0
 801102e:	705a      	strb	r2, [r3, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8011030:	2218      	movs	r2, #24
 8011032:	f7ff fdf3 	bl	8010c1c <_SendPacket>
  RECORD_END();
 8011036:	f384 8811 	msr	BASEPRI, r4
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 801103a:	4b03      	ldr	r3, [pc, #12]	; (8011048 <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 801103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801103e:	b103      	cbz	r3, 8011042 <SEGGER_SYSVIEW_GetSysDesc+0x76>
    _SYSVIEW_Globals.pfSendSysDesc();
 8011040:	4798      	blx	r3
}
 8011042:	bd10      	pop	{r4, pc}
 8011044:	2000b0a4 	.word	0x2000b0a4
 8011048:	2000a07c 	.word	0x2000a07c

0801104c <SEGGER_SYSVIEW_SendTaskInfo>:
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 801104c:	b570      	push	{r4, r5, r6, lr}
 801104e:	4606      	mov	r6, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8011050:	f3ef 8511 	mrs	r5, BASEPRI
 8011054:	f04f 0120 	mov.w	r1, #32
 8011058:	f381 8811 	msr	BASEPRI, r1
 801105c:	482a      	ldr	r0, [pc, #168]	; (8011108 <SEGGER_SYSVIEW_SendTaskInfo+0xbc>)
 801105e:	f7ff fc7b 	bl	8010958 <_PreparePacket>
 8011062:	4604      	mov	r4, r0
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8011064:	6833      	ldr	r3, [r6, #0]
 8011066:	4a29      	ldr	r2, [pc, #164]	; (801110c <SEGGER_SYSVIEW_SendTaskInfo+0xc0>)
 8011068:	6912      	ldr	r2, [r2, #16]
 801106a:	1a9b      	subs	r3, r3, r2
 801106c:	e004      	b.n	8011078 <SEGGER_SYSVIEW_SendTaskInfo+0x2c>
 801106e:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8011072:	f800 2b01 	strb.w	r2, [r0], #1
 8011076:	09db      	lsrs	r3, r3, #7
 8011078:	2b7f      	cmp	r3, #127	; 0x7f
 801107a:	d8f8      	bhi.n	801106e <SEGGER_SYSVIEW_SendTaskInfo+0x22>
 801107c:	f800 3b01 	strb.w	r3, [r0], #1
  ENCODE_U32(pPayload, pInfo->Prio);
 8011080:	68b3      	ldr	r3, [r6, #8]
 8011082:	e004      	b.n	801108e <SEGGER_SYSVIEW_SendTaskInfo+0x42>
 8011084:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8011088:	f800 2b01 	strb.w	r2, [r0], #1
 801108c:	09db      	lsrs	r3, r3, #7
 801108e:	2b7f      	cmp	r3, #127	; 0x7f
 8011090:	d8f8      	bhi.n	8011084 <SEGGER_SYSVIEW_SendTaskInfo+0x38>
 8011092:	f800 3b01 	strb.w	r3, [r0], #1
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8011096:	2220      	movs	r2, #32
 8011098:	6871      	ldr	r1, [r6, #4]
 801109a:	f7ff fc27 	bl	80108ec <_EncodeStr>
 801109e:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80110a0:	2209      	movs	r2, #9
 80110a2:	4620      	mov	r0, r4
 80110a4:	f7ff fdba 	bl	8010c1c <_SendPacket>
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80110a8:	6832      	ldr	r2, [r6, #0]
 80110aa:	4b18      	ldr	r3, [pc, #96]	; (801110c <SEGGER_SYSVIEW_SendTaskInfo+0xc0>)
 80110ac:	691b      	ldr	r3, [r3, #16]
 80110ae:	1ad2      	subs	r2, r2, r3
 80110b0:	4623      	mov	r3, r4
 80110b2:	e004      	b.n	80110be <SEGGER_SYSVIEW_SendTaskInfo+0x72>
 80110b4:	f062 017f 	orn	r1, r2, #127	; 0x7f
 80110b8:	f803 1b01 	strb.w	r1, [r3], #1
 80110bc:	09d2      	lsrs	r2, r2, #7
 80110be:	2a7f      	cmp	r2, #127	; 0x7f
 80110c0:	d8f8      	bhi.n	80110b4 <SEGGER_SYSVIEW_SendTaskInfo+0x68>
 80110c2:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, pInfo->StackBase);
 80110c6:	68f2      	ldr	r2, [r6, #12]
 80110c8:	e004      	b.n	80110d4 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 80110ca:	f062 017f 	orn	r1, r2, #127	; 0x7f
 80110ce:	f803 1b01 	strb.w	r1, [r3], #1
 80110d2:	09d2      	lsrs	r2, r2, #7
 80110d4:	2a7f      	cmp	r2, #127	; 0x7f
 80110d6:	d8f8      	bhi.n	80110ca <SEGGER_SYSVIEW_SendTaskInfo+0x7e>
 80110d8:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, pInfo->StackSize);
 80110dc:	6932      	ldr	r2, [r6, #16]
 80110de:	e004      	b.n	80110ea <SEGGER_SYSVIEW_SendTaskInfo+0x9e>
 80110e0:	f062 017f 	orn	r1, r2, #127	; 0x7f
 80110e4:	f803 1b01 	strb.w	r1, [r3], #1
 80110e8:	09d2      	lsrs	r2, r2, #7
 80110ea:	2a7f      	cmp	r2, #127	; 0x7f
 80110ec:	d8f8      	bhi.n	80110e0 <SEGGER_SYSVIEW_SendTaskInfo+0x94>
 80110ee:	4619      	mov	r1, r3
 80110f0:	f801 2b02 	strb.w	r2, [r1], #2
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80110f4:	2200      	movs	r2, #0
 80110f6:	705a      	strb	r2, [r3, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80110f8:	2215      	movs	r2, #21
 80110fa:	4620      	mov	r0, r4
 80110fc:	f7ff fd8e 	bl	8010c1c <_SendPacket>
  RECORD_END();
 8011100:	f385 8811 	msr	BASEPRI, r5
}
 8011104:	bd70      	pop	{r4, r5, r6, pc}
 8011106:	bf00      	nop
 8011108:	2000b0a4 	.word	0x2000b0a4
 801110c:	2000a07c 	.word	0x2000a07c

08011110 <SEGGER_SYSVIEW_SendSysDesc>:
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8011110:	b570      	push	{r4, r5, r6, lr}
 8011112:	4605      	mov	r5, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8011114:	f3ef 8611 	mrs	r6, BASEPRI
 8011118:	f04f 0120 	mov.w	r1, #32
 801111c:	f381 8811 	msr	BASEPRI, r1
 8011120:	4807      	ldr	r0, [pc, #28]	; (8011140 <SEGGER_SYSVIEW_SendSysDesc+0x30>)
 8011122:	f7ff fc19 	bl	8010958 <_PreparePacket>
 8011126:	4604      	mov	r4, r0
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8011128:	2280      	movs	r2, #128	; 0x80
 801112a:	4629      	mov	r1, r5
 801112c:	f7ff fbde 	bl	80108ec <_EncodeStr>
 8011130:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8011132:	220e      	movs	r2, #14
 8011134:	4620      	mov	r0, r4
 8011136:	f7ff fd71 	bl	8010c1c <_SendPacket>
  RECORD_END();
 801113a:	f386 8811 	msr	BASEPRI, r6
}
 801113e:	bd70      	pop	{r4, r5, r6, pc}
 8011140:	2000b0a4 	.word	0x2000b0a4

08011144 <SEGGER_SYSVIEW_OnIdle>:
void SEGGER_SYSVIEW_OnIdle(void) {
 8011144:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8011146:	f3ef 8411 	mrs	r4, BASEPRI
 801114a:	f04f 0120 	mov.w	r1, #32
 801114e:	f381 8811 	msr	BASEPRI, r1
 8011152:	4805      	ldr	r0, [pc, #20]	; (8011168 <SEGGER_SYSVIEW_OnIdle+0x24>)
 8011154:	f7ff fc00 	bl	8010958 <_PreparePacket>
 8011158:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 801115a:	2211      	movs	r2, #17
 801115c:	f7ff fd5e 	bl	8010c1c <_SendPacket>
  RECORD_END();
 8011160:	f384 8811 	msr	BASEPRI, r4
}
 8011164:	bd10      	pop	{r4, pc}
 8011166:	bf00      	nop
 8011168:	2000b0a4 	.word	0x2000b0a4

0801116c <SEGGER_SYSVIEW_OnTaskCreate>:
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 801116c:	b538      	push	{r3, r4, r5, lr}
 801116e:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8011170:	f3ef 8511 	mrs	r5, BASEPRI
 8011174:	f04f 0120 	mov.w	r1, #32
 8011178:	f381 8811 	msr	BASEPRI, r1
 801117c:	480b      	ldr	r0, [pc, #44]	; (80111ac <SEGGER_SYSVIEW_OnTaskCreate+0x40>)
 801117e:	f7ff fbeb 	bl	8010958 <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 8011182:	4b0b      	ldr	r3, [pc, #44]	; (80111b0 <SEGGER_SYSVIEW_OnTaskCreate+0x44>)
 8011184:	691b      	ldr	r3, [r3, #16]
 8011186:	1ae3      	subs	r3, r4, r3
  ENCODE_U32(pPayload, TaskId);
 8011188:	4601      	mov	r1, r0
 801118a:	e004      	b.n	8011196 <SEGGER_SYSVIEW_OnTaskCreate+0x2a>
 801118c:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8011190:	f801 2b01 	strb.w	r2, [r1], #1
 8011194:	09db      	lsrs	r3, r3, #7
 8011196:	2b7f      	cmp	r3, #127	; 0x7f
 8011198:	d8f8      	bhi.n	801118c <SEGGER_SYSVIEW_OnTaskCreate+0x20>
 801119a:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 801119e:	2208      	movs	r2, #8
 80111a0:	f7ff fd3c 	bl	8010c1c <_SendPacket>
  RECORD_END();
 80111a4:	f385 8811 	msr	BASEPRI, r5
}
 80111a8:	bd38      	pop	{r3, r4, r5, pc}
 80111aa:	bf00      	nop
 80111ac:	2000b0a4 	.word	0x2000b0a4
 80111b0:	2000a07c 	.word	0x2000a07c

080111b4 <SEGGER_SYSVIEW_OnTaskStartExec>:
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80111b4:	b538      	push	{r3, r4, r5, lr}
 80111b6:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80111b8:	f3ef 8511 	mrs	r5, BASEPRI
 80111bc:	f04f 0120 	mov.w	r1, #32
 80111c0:	f381 8811 	msr	BASEPRI, r1
 80111c4:	480b      	ldr	r0, [pc, #44]	; (80111f4 <SEGGER_SYSVIEW_OnTaskStartExec+0x40>)
 80111c6:	f7ff fbc7 	bl	8010958 <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 80111ca:	4b0b      	ldr	r3, [pc, #44]	; (80111f8 <SEGGER_SYSVIEW_OnTaskStartExec+0x44>)
 80111cc:	691b      	ldr	r3, [r3, #16]
 80111ce:	1ae3      	subs	r3, r4, r3
  ENCODE_U32(pPayload, TaskId);
 80111d0:	4601      	mov	r1, r0
 80111d2:	e004      	b.n	80111de <SEGGER_SYSVIEW_OnTaskStartExec+0x2a>
 80111d4:	f063 027f 	orn	r2, r3, #127	; 0x7f
 80111d8:	f801 2b01 	strb.w	r2, [r1], #1
 80111dc:	09db      	lsrs	r3, r3, #7
 80111de:	2b7f      	cmp	r3, #127	; 0x7f
 80111e0:	d8f8      	bhi.n	80111d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x20>
 80111e2:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80111e6:	2204      	movs	r2, #4
 80111e8:	f7ff fd18 	bl	8010c1c <_SendPacket>
  RECORD_END();
 80111ec:	f385 8811 	msr	BASEPRI, r5
}
 80111f0:	bd38      	pop	{r3, r4, r5, pc}
 80111f2:	bf00      	nop
 80111f4:	2000b0a4 	.word	0x2000b0a4
 80111f8:	2000a07c 	.word	0x2000a07c

080111fc <SEGGER_SYSVIEW_OnTaskStartReady>:
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80111fc:	b538      	push	{r3, r4, r5, lr}
 80111fe:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8011200:	f3ef 8511 	mrs	r5, BASEPRI
 8011204:	f04f 0120 	mov.w	r1, #32
 8011208:	f381 8811 	msr	BASEPRI, r1
 801120c:	480b      	ldr	r0, [pc, #44]	; (801123c <SEGGER_SYSVIEW_OnTaskStartReady+0x40>)
 801120e:	f7ff fba3 	bl	8010958 <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 8011212:	4b0b      	ldr	r3, [pc, #44]	; (8011240 <SEGGER_SYSVIEW_OnTaskStartReady+0x44>)
 8011214:	691b      	ldr	r3, [r3, #16]
 8011216:	1ae3      	subs	r3, r4, r3
  ENCODE_U32(pPayload, TaskId);
 8011218:	4601      	mov	r1, r0
 801121a:	e004      	b.n	8011226 <SEGGER_SYSVIEW_OnTaskStartReady+0x2a>
 801121c:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8011220:	f801 2b01 	strb.w	r2, [r1], #1
 8011224:	09db      	lsrs	r3, r3, #7
 8011226:	2b7f      	cmp	r3, #127	; 0x7f
 8011228:	d8f8      	bhi.n	801121c <SEGGER_SYSVIEW_OnTaskStartReady+0x20>
 801122a:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 801122e:	2206      	movs	r2, #6
 8011230:	f7ff fcf4 	bl	8010c1c <_SendPacket>
  RECORD_END();
 8011234:	f385 8811 	msr	BASEPRI, r5
}
 8011238:	bd38      	pop	{r3, r4, r5, pc}
 801123a:	bf00      	nop
 801123c:	2000b0a4 	.word	0x2000b0a4
 8011240:	2000a07c 	.word	0x2000a07c

08011244 <SEGGER_SYSVIEW_SendModule>:
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8011244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_pFirstModule != 0) {
 8011246:	4b1b      	ldr	r3, [pc, #108]	; (80112b4 <SEGGER_SYSVIEW_SendModule+0x70>)
 8011248:	681c      	ldr	r4, [r3, #0]
 801124a:	b394      	cbz	r4, 80112b2 <SEGGER_SYSVIEW_SendModule+0x6e>
    for (n = 0; n < ModuleId; n++) {
 801124c:	2300      	movs	r3, #0
 801124e:	4607      	mov	r7, r0
 8011250:	4298      	cmp	r0, r3
 8011252:	d903      	bls.n	801125c <SEGGER_SYSVIEW_SendModule+0x18>
      pModule = pModule->pNext;
 8011254:	6924      	ldr	r4, [r4, #16]
      if (pModule == 0) {
 8011256:	b10c      	cbz	r4, 801125c <SEGGER_SYSVIEW_SendModule+0x18>
    for (n = 0; n < ModuleId; n++) {
 8011258:	3301      	adds	r3, #1
 801125a:	e7f8      	b.n	801124e <SEGGER_SYSVIEW_SendModule+0xa>
    if (pModule != 0) {
 801125c:	b34c      	cbz	r4, 80112b2 <SEGGER_SYSVIEW_SendModule+0x6e>
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801125e:	f3ef 8611 	mrs	r6, BASEPRI
 8011262:	f04f 0120 	mov.w	r1, #32
 8011266:	f381 8811 	msr	BASEPRI, r1
 801126a:	4813      	ldr	r0, [pc, #76]	; (80112b8 <SEGGER_SYSVIEW_SendModule+0x74>)
 801126c:	f7ff fb74 	bl	8010958 <_PreparePacket>
 8011270:	4605      	mov	r5, r0
      ENCODE_U32(pPayload, ModuleId);
 8011272:	e004      	b.n	801127e <SEGGER_SYSVIEW_SendModule+0x3a>
 8011274:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8011278:	f800 3b01 	strb.w	r3, [r0], #1
 801127c:	09ff      	lsrs	r7, r7, #7
 801127e:	2f7f      	cmp	r7, #127	; 0x7f
 8011280:	d8f8      	bhi.n	8011274 <SEGGER_SYSVIEW_SendModule+0x30>
 8011282:	f800 7b01 	strb.w	r7, [r0], #1
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8011286:	68a3      	ldr	r3, [r4, #8]
 8011288:	e004      	b.n	8011294 <SEGGER_SYSVIEW_SendModule+0x50>
 801128a:	f063 027f 	orn	r2, r3, #127	; 0x7f
 801128e:	f800 2b01 	strb.w	r2, [r0], #1
 8011292:	09db      	lsrs	r3, r3, #7
 8011294:	2b7f      	cmp	r3, #127	; 0x7f
 8011296:	d8f8      	bhi.n	801128a <SEGGER_SYSVIEW_SendModule+0x46>
 8011298:	f800 3b01 	strb.w	r3, [r0], #1
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801129c:	2280      	movs	r2, #128	; 0x80
 801129e:	6821      	ldr	r1, [r4, #0]
 80112a0:	f7ff fb24 	bl	80108ec <_EncodeStr>
 80112a4:	4601      	mov	r1, r0
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80112a6:	2216      	movs	r2, #22
 80112a8:	4628      	mov	r0, r5
 80112aa:	f7ff fcb7 	bl	8010c1c <_SendPacket>
      RECORD_END();
 80112ae:	f386 8811 	msr	BASEPRI, r6
}
 80112b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112b4:	2000b188 	.word	0x2000b188
 80112b8:	2000b0a4 	.word	0x2000b0a4

080112bc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80112bc:	b570      	push	{r4, r5, r6, lr}
 80112be:	4605      	mov	r5, r0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80112c0:	f3ef 8611 	mrs	r6, BASEPRI
 80112c4:	f04f 0120 	mov.w	r1, #32
 80112c8:	f381 8811 	msr	BASEPRI, r1
 80112cc:	480a      	ldr	r0, [pc, #40]	; (80112f8 <SEGGER_SYSVIEW_Warn+0x3c>)
 80112ce:	f7ff fb43 	bl	8010958 <_PreparePacket>
 80112d2:	4604      	mov	r4, r0
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80112d4:	2280      	movs	r2, #128	; 0x80
 80112d6:	4629      	mov	r1, r5
 80112d8:	f7ff fb08 	bl	80108ec <_EncodeStr>
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80112dc:	4601      	mov	r1, r0
 80112de:	2301      	movs	r3, #1
 80112e0:	f801 3b02 	strb.w	r3, [r1], #2
  ENCODE_U32(pPayload, 0);
 80112e4:	2300      	movs	r3, #0
 80112e6:	7043      	strb	r3, [r0, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80112e8:	221a      	movs	r2, #26
 80112ea:	4620      	mov	r0, r4
 80112ec:	f7ff fc96 	bl	8010c1c <_SendPacket>
  RECORD_END();
 80112f0:	f386 8811 	msr	BASEPRI, r6
}
 80112f4:	bd70      	pop	{r4, r5, r6, pc}
 80112f6:	bf00      	nop
 80112f8:	2000b0a4 	.word	0x2000b0a4

080112fc <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80112fc:	b510      	push	{r4, lr}
 80112fe:	4611      	mov	r1, r2
 8011300:	461c      	mov	r4, r3
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8011302:	461a      	mov	r2, r3
 8011304:	2000      	movs	r0, #0
 8011306:	f7ff fa59 	bl	80107bc <SEGGER_RTT_Write>
  return len;
}
 801130a:	4620      	mov	r0, r4
 801130c:	bd10      	pop	{r4, pc}
	...

08011310 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011310:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011312:	2200      	movs	r2, #0
 8011314:	490f      	ldr	r1, [pc, #60]	; (8011354 <MX_USB_Device_Init+0x44>)
 8011316:	4810      	ldr	r0, [pc, #64]	; (8011358 <MX_USB_Device_Init+0x48>)
 8011318:	f7f6 fb8f 	bl	8007a3a <USBD_Init>
 801131c:	b970      	cbnz	r0, 801133c <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801131e:	490f      	ldr	r1, [pc, #60]	; (801135c <MX_USB_Device_Init+0x4c>)
 8011320:	480d      	ldr	r0, [pc, #52]	; (8011358 <MX_USB_Device_Init+0x48>)
 8011322:	f7f6 fba1 	bl	8007a68 <USBD_RegisterClass>
 8011326:	b960      	cbnz	r0, 8011342 <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011328:	490d      	ldr	r1, [pc, #52]	; (8011360 <MX_USB_Device_Init+0x50>)
 801132a:	480b      	ldr	r0, [pc, #44]	; (8011358 <MX_USB_Device_Init+0x48>)
 801132c:	f7f6 fb37 	bl	800799e <USBD_CDC_RegisterInterface>
 8011330:	b950      	cbnz	r0, 8011348 <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011332:	4809      	ldr	r0, [pc, #36]	; (8011358 <MX_USB_Device_Init+0x48>)
 8011334:	f7f6 fbaf 	bl	8007a96 <USBD_Start>
 8011338:	b948      	cbnz	r0, 801134e <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801133a:	bd08      	pop	{r3, pc}
    Error_Handler();
 801133c:	f7ef fc44 	bl	8000bc8 <Error_Handler>
 8011340:	e7ed      	b.n	801131e <MX_USB_Device_Init+0xe>
    Error_Handler();
 8011342:	f7ef fc41 	bl	8000bc8 <Error_Handler>
 8011346:	e7ef      	b.n	8011328 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011348:	f7ef fc3e 	bl	8000bc8 <Error_Handler>
 801134c:	e7f1      	b.n	8011332 <MX_USB_Device_Init+0x22>
    Error_Handler();
 801134e:	f7ef fc3b 	bl	8000bc8 <Error_Handler>
}
 8011352:	e7f2      	b.n	801133a <MX_USB_Device_Init+0x2a>
 8011354:	200015b0 	.word	0x200015b0
 8011358:	2000b18c 	.word	0x2000b18c
 801135c:	2000000c 	.word	0x2000000c
 8011360:	2000159c 	.word	0x2000159c

08011364 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8011364:	2000      	movs	r0, #0
 8011366:	4770      	bx	lr

08011368 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8011368:	2000      	movs	r0, #0
 801136a:	4770      	bx	lr

0801136c <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 801136c:	2000      	movs	r0, #0
 801136e:	4770      	bx	lr

08011370 <CDC_Receive_FS>:
{
 8011370:	b510      	push	{r4, lr}
 8011372:	4601      	mov	r1, r0
	dataReceivedFlag =1;
 8011374:	4b05      	ldr	r3, [pc, #20]	; (801138c <CDC_Receive_FS+0x1c>)
 8011376:	2201      	movs	r2, #1
 8011378:	701a      	strb	r2, [r3, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801137a:	4c05      	ldr	r4, [pc, #20]	; (8011390 <CDC_Receive_FS+0x20>)
 801137c:	4620      	mov	r0, r4
 801137e:	f7f6 fb20 	bl	80079c2 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011382:	4620      	mov	r0, r4
 8011384:	f7f6 fb40 	bl	8007a08 <USBD_CDC_ReceivePacket>
}
 8011388:	2000      	movs	r0, #0
 801138a:	bd10      	pop	{r4, pc}
 801138c:	2000c45c 	.word	0x2000c45c
 8011390:	2000b18c 	.word	0x2000b18c

08011394 <CDC_Init_FS>:
{
 8011394:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011396:	4c06      	ldr	r4, [pc, #24]	; (80113b0 <CDC_Init_FS+0x1c>)
 8011398:	2200      	movs	r2, #0
 801139a:	4906      	ldr	r1, [pc, #24]	; (80113b4 <CDC_Init_FS+0x20>)
 801139c:	4620      	mov	r0, r4
 801139e:	f7f6 fb05 	bl	80079ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80113a2:	4905      	ldr	r1, [pc, #20]	; (80113b8 <CDC_Init_FS+0x24>)
 80113a4:	4620      	mov	r0, r4
 80113a6:	f7f6 fb0c 	bl	80079c2 <USBD_CDC_SetRxBuffer>
}
 80113aa:	2000      	movs	r0, #0
 80113ac:	bd10      	pop	{r4, pc}
 80113ae:	bf00      	nop
 80113b0:	2000b18c 	.word	0x2000b18c
 80113b4:	2000bc5c 	.word	0x2000bc5c
 80113b8:	2000b45c 	.word	0x2000b45c

080113bc <CDC_Transmit_FS>:
{
 80113bc:	b510      	push	{r4, lr}
 80113be:	460a      	mov	r2, r1
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80113c0:	4c04      	ldr	r4, [pc, #16]	; (80113d4 <CDC_Transmit_FS+0x18>)
 80113c2:	4601      	mov	r1, r0
 80113c4:	4620      	mov	r0, r4
 80113c6:	f7f6 faf1 	bl	80079ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80113ca:	4620      	mov	r0, r4
 80113cc:	f7f6 fb02 	bl	80079d4 <USBD_CDC_TransmitPacket>
}
 80113d0:	bd10      	pop	{r4, pc}
 80113d2:	bf00      	nop
 80113d4:	2000b18c 	.word	0x2000b18c

080113d8 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80113d8:	2312      	movs	r3, #18
 80113da:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 80113dc:	4800      	ldr	r0, [pc, #0]	; (80113e0 <USBD_CDC_DeviceDescriptor+0x8>)
 80113de:	4770      	bx	lr
 80113e0:	200015d0 	.word	0x200015d0

080113e4 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80113e4:	2304      	movs	r3, #4
 80113e6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80113e8:	4800      	ldr	r0, [pc, #0]	; (80113ec <USBD_CDC_LangIDStrDescriptor+0x8>)
 80113ea:	4770      	bx	lr
 80113ec:	200015e4 	.word	0x200015e4

080113f0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80113f0:	2300      	movs	r3, #0
 80113f2:	4293      	cmp	r3, r2
 80113f4:	d21e      	bcs.n	8011434 <IntToUnicode+0x44>
{
 80113f6:	b500      	push	{lr}
 80113f8:	e010      	b.n	801141c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80113fa:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 80113fe:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8011402:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8011404:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011408:	f10c 0c01 	add.w	ip, ip, #1
 801140c:	f04f 0e00 	mov.w	lr, #0
 8011410:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8011414:	3301      	adds	r3, #1
 8011416:	b2db      	uxtb	r3, r3
 8011418:	4293      	cmp	r3, r2
 801141a:	d209      	bcs.n	8011430 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 801141c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8011420:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8011424:	d2e9      	bcs.n	80113fa <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8011426:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 801142a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 801142e:	e7e8      	b.n	8011402 <IntToUnicode+0x12>
  }
}
 8011430:	f85d fb04 	ldr.w	pc, [sp], #4
 8011434:	4770      	bx	lr
	...

08011438 <Get_SerialNum>:
{
 8011438:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801143a:	4b0b      	ldr	r3, [pc, #44]	; (8011468 <Get_SerialNum+0x30>)
 801143c:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011440:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011444:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 8011448:	18c0      	adds	r0, r0, r3
 801144a:	d100      	bne.n	801144e <Get_SerialNum+0x16>
}
 801144c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801144e:	4d07      	ldr	r5, [pc, #28]	; (801146c <Get_SerialNum+0x34>)
 8011450:	2208      	movs	r2, #8
 8011452:	1ca9      	adds	r1, r5, #2
 8011454:	f7ff ffcc 	bl	80113f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011458:	2204      	movs	r2, #4
 801145a:	f105 0112 	add.w	r1, r5, #18
 801145e:	4620      	mov	r0, r4
 8011460:	f7ff ffc6 	bl	80113f0 <IntToUnicode>
}
 8011464:	e7f2      	b.n	801144c <Get_SerialNum+0x14>
 8011466:	bf00      	nop
 8011468:	1fff7000 	.word	0x1fff7000
 801146c:	200015e8 	.word	0x200015e8

08011470 <USBD_CDC_SerialStrDescriptor>:
{
 8011470:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8011472:	231a      	movs	r3, #26
 8011474:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8011476:	f7ff ffdf 	bl	8011438 <Get_SerialNum>
}
 801147a:	4801      	ldr	r0, [pc, #4]	; (8011480 <USBD_CDC_SerialStrDescriptor+0x10>)
 801147c:	bd08      	pop	{r3, pc}
 801147e:	bf00      	nop
 8011480:	200015e8 	.word	0x200015e8

08011484 <USBD_CDC_ProductStrDescriptor>:
{
 8011484:	b508      	push	{r3, lr}
 8011486:	460a      	mov	r2, r1
  if(speed == 0)
 8011488:	b928      	cbnz	r0, 8011496 <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801148a:	4905      	ldr	r1, [pc, #20]	; (80114a0 <USBD_CDC_ProductStrDescriptor+0x1c>)
 801148c:	4805      	ldr	r0, [pc, #20]	; (80114a4 <USBD_CDC_ProductStrDescriptor+0x20>)
 801148e:	f7f6 ff7e 	bl	800838e <USBD_GetString>
}
 8011492:	4803      	ldr	r0, [pc, #12]	; (80114a0 <USBD_CDC_ProductStrDescriptor+0x1c>)
 8011494:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011496:	4902      	ldr	r1, [pc, #8]	; (80114a0 <USBD_CDC_ProductStrDescriptor+0x1c>)
 8011498:	4802      	ldr	r0, [pc, #8]	; (80114a4 <USBD_CDC_ProductStrDescriptor+0x20>)
 801149a:	f7f6 ff78 	bl	800838e <USBD_GetString>
 801149e:	e7f8      	b.n	8011492 <USBD_CDC_ProductStrDescriptor+0xe>
 80114a0:	2000c460 	.word	0x2000c460
 80114a4:	08016b08 	.word	0x08016b08

080114a8 <USBD_CDC_ManufacturerStrDescriptor>:
{
 80114a8:	b510      	push	{r4, lr}
 80114aa:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80114ac:	4c03      	ldr	r4, [pc, #12]	; (80114bc <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 80114ae:	4621      	mov	r1, r4
 80114b0:	4803      	ldr	r0, [pc, #12]	; (80114c0 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 80114b2:	f7f6 ff6c 	bl	800838e <USBD_GetString>
}
 80114b6:	4620      	mov	r0, r4
 80114b8:	bd10      	pop	{r4, pc}
 80114ba:	bf00      	nop
 80114bc:	2000c460 	.word	0x2000c460
 80114c0:	08016b20 	.word	0x08016b20

080114c4 <USBD_CDC_ConfigStrDescriptor>:
{
 80114c4:	b508      	push	{r3, lr}
 80114c6:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80114c8:	b928      	cbnz	r0, 80114d6 <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80114ca:	4905      	ldr	r1, [pc, #20]	; (80114e0 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 80114cc:	4805      	ldr	r0, [pc, #20]	; (80114e4 <USBD_CDC_ConfigStrDescriptor+0x20>)
 80114ce:	f7f6 ff5e 	bl	800838e <USBD_GetString>
}
 80114d2:	4803      	ldr	r0, [pc, #12]	; (80114e0 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 80114d4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80114d6:	4902      	ldr	r1, [pc, #8]	; (80114e0 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 80114d8:	4802      	ldr	r0, [pc, #8]	; (80114e4 <USBD_CDC_ConfigStrDescriptor+0x20>)
 80114da:	f7f6 ff58 	bl	800838e <USBD_GetString>
 80114de:	e7f8      	b.n	80114d2 <USBD_CDC_ConfigStrDescriptor+0xe>
 80114e0:	2000c460 	.word	0x2000c460
 80114e4:	08016b34 	.word	0x08016b34

080114e8 <USBD_CDC_InterfaceStrDescriptor>:
{
 80114e8:	b508      	push	{r3, lr}
 80114ea:	460a      	mov	r2, r1
  if(speed == 0)
 80114ec:	b928      	cbnz	r0, 80114fa <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80114ee:	4905      	ldr	r1, [pc, #20]	; (8011504 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 80114f0:	4805      	ldr	r0, [pc, #20]	; (8011508 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 80114f2:	f7f6 ff4c 	bl	800838e <USBD_GetString>
}
 80114f6:	4803      	ldr	r0, [pc, #12]	; (8011504 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 80114f8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80114fa:	4902      	ldr	r1, [pc, #8]	; (8011504 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 80114fc:	4802      	ldr	r0, [pc, #8]	; (8011508 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 80114fe:	f7f6 ff46 	bl	800838e <USBD_GetString>
 8011502:	e7f8      	b.n	80114f6 <USBD_CDC_InterfaceStrDescriptor+0xe>
 8011504:	2000c460 	.word	0x2000c460
 8011508:	08016b40 	.word	0x08016b40

0801150c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 801150c:	2803      	cmp	r0, #3
 801150e:	d805      	bhi.n	801151c <USBD_Get_USB_Status+0x10>
 8011510:	e8df f000 	tbb	[pc, r0]
 8011514:	05020405 	.word	0x05020405
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011518:	2001      	movs	r0, #1
    break;
 801151a:	4770      	bx	lr
      usb_status = USBD_FAIL;
 801151c:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 801151e:	4770      	bx	lr

08011520 <SystemClockConfig_Resume>:
{
 8011520:	b508      	push	{r3, lr}
  SystemClock_Config();
 8011522:	f7ef fb53 	bl	8000bcc <SystemClock_Config>
}
 8011526:	bd08      	pop	{r3, pc}

08011528 <HAL_PCD_MspInit>:
{
 8011528:	b510      	push	{r4, lr}
 801152a:	b096      	sub	sp, #88	; 0x58
 801152c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801152e:	2254      	movs	r2, #84	; 0x54
 8011530:	2100      	movs	r1, #0
 8011532:	a801      	add	r0, sp, #4
 8011534:	f000 fba8 	bl	8011c88 <memset>
  if(pcdHandle->Instance==USB)
 8011538:	6822      	ldr	r2, [r4, #0]
 801153a:	4b11      	ldr	r3, [pc, #68]	; (8011580 <HAL_PCD_MspInit+0x58>)
 801153c:	429a      	cmp	r2, r3
 801153e:	d001      	beq.n	8011544 <HAL_PCD_MspInit+0x1c>
}
 8011540:	b016      	add	sp, #88	; 0x58
 8011542:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011548:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801154a:	a801      	add	r0, sp, #4
 801154c:	f7f2 fe0c 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 8011550:	b990      	cbnz	r0, 8011578 <HAL_PCD_MspInit+0x50>
    __HAL_RCC_USB_CLK_ENABLE();
 8011552:	4b0c      	ldr	r3, [pc, #48]	; (8011584 <HAL_PCD_MspInit+0x5c>)
 8011554:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011556:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 801155a:	659a      	str	r2, [r3, #88]	; 0x58
 801155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801155e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011562:	9300      	str	r3, [sp, #0]
 8011564:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8011566:	2200      	movs	r2, #0
 8011568:	2105      	movs	r1, #5
 801156a:	2014      	movs	r0, #20
 801156c:	f7ef fe3a 	bl	80011e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011570:	2014      	movs	r0, #20
 8011572:	f7ef fe7d 	bl	8001270 <HAL_NVIC_EnableIRQ>
}
 8011576:	e7e3      	b.n	8011540 <HAL_PCD_MspInit+0x18>
      Error_Handler();
 8011578:	f7ef fb26 	bl	8000bc8 <Error_Handler>
 801157c:	e7e9      	b.n	8011552 <HAL_PCD_MspInit+0x2a>
 801157e:	bf00      	nop
 8011580:	40005c00 	.word	0x40005c00
 8011584:	40021000 	.word	0x40021000

08011588 <HAL_PCD_SetupStageCallback>:
{
 8011588:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801158a:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 801158e:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8011592:	f7f6 fa95 	bl	8007ac0 <USBD_LL_SetupStage>
}
 8011596:	bd08      	pop	{r3, pc}

08011598 <HAL_PCD_DataOutStageCallback>:
{
 8011598:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801159a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 801159e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80115a2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80115a6:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80115aa:	f7f6 fab5 	bl	8007b18 <USBD_LL_DataOutStage>
}
 80115ae:	bd08      	pop	{r3, pc}

080115b0 <HAL_PCD_DataInStageCallback>:
{
 80115b0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80115b2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80115b6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80115ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80115bc:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80115c0:	f7f6 fae6 	bl	8007b90 <USBD_LL_DataInStage>
}
 80115c4:	bd08      	pop	{r3, pc}

080115c6 <HAL_PCD_SOFCallback>:
{
 80115c6:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80115c8:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80115cc:	f7f6 fb86 	bl	8007cdc <USBD_LL_SOF>
}
 80115d0:	bd08      	pop	{r3, pc}

080115d2 <HAL_PCD_ResetCallback>:
{
 80115d2:	b510      	push	{r4, lr}
 80115d4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80115d6:	6883      	ldr	r3, [r0, #8]
 80115d8:	2b02      	cmp	r3, #2
 80115da:	d109      	bne.n	80115f0 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80115dc:	2101      	movs	r1, #1
 80115de:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 80115e2:	f7f6 fb61 	bl	8007ca8 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80115e6:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 80115ea:	f7f6 fb30 	bl	8007c4e <USBD_LL_Reset>
}
 80115ee:	bd10      	pop	{r4, pc}
    Error_Handler();
 80115f0:	f7ef faea 	bl	8000bc8 <Error_Handler>
 80115f4:	e7f2      	b.n	80115dc <HAL_PCD_ResetCallback+0xa>
	...

080115f8 <HAL_PCD_SuspendCallback>:
{
 80115f8:	b510      	push	{r4, lr}
 80115fa:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80115fc:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8011600:	f7f6 fb55 	bl	8007cae <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8011604:	69a3      	ldr	r3, [r4, #24]
 8011606:	b123      	cbz	r3, 8011612 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011608:	4a02      	ldr	r2, [pc, #8]	; (8011614 <HAL_PCD_SuspendCallback+0x1c>)
 801160a:	6913      	ldr	r3, [r2, #16]
 801160c:	f043 0306 	orr.w	r3, r3, #6
 8011610:	6113      	str	r3, [r2, #16]
}
 8011612:	bd10      	pop	{r4, pc}
 8011614:	e000ed00 	.word	0xe000ed00

08011618 <HAL_PCD_ResumeCallback>:
{
 8011618:	b510      	push	{r4, lr}
 801161a:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 801161c:	6983      	ldr	r3, [r0, #24]
 801161e:	b923      	cbnz	r3, 801162a <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011620:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8011624:	f7f6 fb4d 	bl	8007cc2 <USBD_LL_Resume>
}
 8011628:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801162a:	4a04      	ldr	r2, [pc, #16]	; (801163c <HAL_PCD_ResumeCallback+0x24>)
 801162c:	6913      	ldr	r3, [r2, #16]
 801162e:	f023 0306 	bic.w	r3, r3, #6
 8011632:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011634:	f7ff ff74 	bl	8011520 <SystemClockConfig_Resume>
 8011638:	e7f2      	b.n	8011620 <HAL_PCD_ResumeCallback+0x8>
 801163a:	bf00      	nop
 801163c:	e000ed00 	.word	0xe000ed00

08011640 <USBD_LL_Init>:
{
 8011640:	b510      	push	{r4, lr}
 8011642:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8011644:	481e      	ldr	r0, [pc, #120]	; (80116c0 <USBD_LL_Init+0x80>)
 8011646:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 801164a:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 801164e:	4b1d      	ldr	r3, [pc, #116]	; (80116c4 <USBD_LL_Init+0x84>)
 8011650:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011652:	2308      	movs	r3, #8
 8011654:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011656:	2302      	movs	r3, #2
 8011658:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801165a:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801165c:	2300      	movs	r3, #0
 801165e:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011660:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011662:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011664:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011666:	f7f1 f825 	bl	80026b4 <HAL_PCD_Init>
 801166a:	bb30      	cbnz	r0, 80116ba <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801166c:	2318      	movs	r3, #24
 801166e:	2200      	movs	r2, #0
 8011670:	4611      	mov	r1, r2
 8011672:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8011676:	f7f1 ff65 	bl	8003544 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801167a:	2358      	movs	r3, #88	; 0x58
 801167c:	2200      	movs	r2, #0
 801167e:	2180      	movs	r1, #128	; 0x80
 8011680:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8011684:	f7f1 ff5e 	bl	8003544 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011688:	23c0      	movs	r3, #192	; 0xc0
 801168a:	2200      	movs	r2, #0
 801168c:	2181      	movs	r1, #129	; 0x81
 801168e:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8011692:	f7f1 ff57 	bl	8003544 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011696:	f44f 7388 	mov.w	r3, #272	; 0x110
 801169a:	2200      	movs	r2, #0
 801169c:	2101      	movs	r1, #1
 801169e:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 80116a2:	f7f1 ff4f 	bl	8003544 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80116a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116aa:	2200      	movs	r2, #0
 80116ac:	2182      	movs	r1, #130	; 0x82
 80116ae:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 80116b2:	f7f1 ff47 	bl	8003544 <HAL_PCDEx_PMAConfig>
}
 80116b6:	2000      	movs	r0, #0
 80116b8:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80116ba:	f7ef fa85 	bl	8000bc8 <Error_Handler>
 80116be:	e7d5      	b.n	801166c <USBD_LL_Init+0x2c>
 80116c0:	2000c660 	.word	0x2000c660
 80116c4:	40005c00 	.word	0x40005c00

080116c8 <USBD_LL_Start>:
{
 80116c8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80116ca:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80116ce:	f7f1 f871 	bl	80027b4 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80116d2:	f7ff ff1b 	bl	801150c <USBD_Get_USB_Status>
}
 80116d6:	bd08      	pop	{r3, pc}

080116d8 <USBD_LL_OpenEP>:
{
 80116d8:	b508      	push	{r3, lr}
 80116da:	4694      	mov	ip, r2
 80116dc:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80116de:	4663      	mov	r3, ip
 80116e0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80116e4:	f7f1 fdf7 	bl	80032d6 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80116e8:	f7ff ff10 	bl	801150c <USBD_Get_USB_Status>
}
 80116ec:	bd08      	pop	{r3, pc}

080116ee <USBD_LL_CloseEP>:
{
 80116ee:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80116f0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80116f4:	f7f1 fe31 	bl	800335a <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80116f8:	f7ff ff08 	bl	801150c <USBD_Get_USB_Status>
}
 80116fc:	bd08      	pop	{r3, pc}

080116fe <USBD_LL_StallEP>:
{
 80116fe:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011700:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8011704:	f7f1 feae 	bl	8003464 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8011708:	f7ff ff00 	bl	801150c <USBD_Get_USB_Status>
}
 801170c:	bd08      	pop	{r3, pc}

0801170e <USBD_LL_ClearStallEP>:
{
 801170e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011710:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8011714:	f7f1 fedb 	bl	80034ce <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8011718:	f7ff fef8 	bl	801150c <USBD_Get_USB_Status>
}
 801171c:	bd08      	pop	{r3, pc}

0801171e <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801171e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8011722:	f011 0f80 	tst.w	r1, #128	; 0x80
 8011726:	d108      	bne.n	801173a <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011728:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801172c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011730:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8011734:	f893 016a 	ldrb.w	r0, [r3, #362]	; 0x16a
}
 8011738:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801173a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801173e:	3101      	adds	r1, #1
 8011740:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011744:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8011748:	7898      	ldrb	r0, [r3, #2]
 801174a:	4770      	bx	lr

0801174c <USBD_LL_SetUSBAddress>:
{
 801174c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801174e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8011752:	f7f1 fcd3 	bl	80030fc <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8011756:	f7ff fed9 	bl	801150c <USBD_Get_USB_Status>
}
 801175a:	bd08      	pop	{r3, pc}

0801175c <USBD_LL_Transmit>:
{
 801175c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801175e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8011762:	f7f1 fe57 	bl	8003414 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8011766:	f7ff fed1 	bl	801150c <USBD_Get_USB_Status>
}
 801176a:	bd08      	pop	{r3, pc}

0801176c <USBD_LL_PrepareReceive>:
{
 801176c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801176e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8011772:	f7f1 fe24 	bl	80033be <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8011776:	f7ff fec9 	bl	801150c <USBD_Get_USB_Status>
}
 801177a:	bd08      	pop	{r3, pc}

0801177c <USBD_LL_GetRxDataSize>:
{
 801177c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801177e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8011782:	f7f1 fe3e 	bl	8003402 <HAL_PCD_EP_GetRxCount>
}
 8011786:	bd08      	pop	{r3, pc}

08011788 <HAL_PCDEx_LPM_Callback>:
{
 8011788:	b510      	push	{r4, lr}
 801178a:	4604      	mov	r4, r0
  switch (msg)
 801178c:	b111      	cbz	r1, 8011794 <HAL_PCDEx_LPM_Callback+0xc>
 801178e:	2901      	cmp	r1, #1
 8011790:	d00f      	beq.n	80117b2 <HAL_PCDEx_LPM_Callback+0x2a>
}
 8011792:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8011794:	6983      	ldr	r3, [r0, #24]
 8011796:	b923      	cbnz	r3, 80117a2 <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 8011798:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 801179c:	f7f6 fa91 	bl	8007cc2 <USBD_LL_Resume>
    break;
 80117a0:	e7f7      	b.n	8011792 <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 80117a2:	f7ff febd 	bl	8011520 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80117a6:	4a09      	ldr	r2, [pc, #36]	; (80117cc <HAL_PCDEx_LPM_Callback+0x44>)
 80117a8:	6913      	ldr	r3, [r2, #16]
 80117aa:	f023 0306 	bic.w	r3, r3, #6
 80117ae:	6113      	str	r3, [r2, #16]
 80117b0:	e7f2      	b.n	8011798 <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 80117b2:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80117b6:	f7f6 fa7a 	bl	8007cae <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80117ba:	69a3      	ldr	r3, [r4, #24]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d0e8      	beq.n	8011792 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80117c0:	4a02      	ldr	r2, [pc, #8]	; (80117cc <HAL_PCDEx_LPM_Callback+0x44>)
 80117c2:	6913      	ldr	r3, [r2, #16]
 80117c4:	f043 0306 	orr.w	r3, r3, #6
 80117c8:	6113      	str	r3, [r2, #16]
}
 80117ca:	e7e2      	b.n	8011792 <HAL_PCDEx_LPM_Callback+0xa>
 80117cc:	e000ed00 	.word	0xe000ed00

080117d0 <USBD_static_malloc>:
}
 80117d0:	4800      	ldr	r0, [pc, #0]	; (80117d4 <USBD_static_malloc+0x4>)
 80117d2:	4770      	bx	lr
 80117d4:	2000c954 	.word	0x2000c954

080117d8 <USBD_static_free>:
}
 80117d8:	4770      	bx	lr
	...

080117dc <AppTest_CanIdle_MainFunction>:
{

}

void AppTest_CanIdle_MainFunction ()
{
 80117dc:	b530      	push	{r4, r5, lr}
 80117de:	b087      	sub	sp, #28
   uint8_t cmd = 0;
   uint8_t length = 0;
   uint8_t dataCmd[ETHCAT_LENGTH_DATAMAX] = {0};
 80117e0:	2300      	movs	r3, #0
 80117e2:	9300      	str	r3, [sp, #0]
 80117e4:	9301      	str	r3, [sp, #4]
 80117e6:	9302      	str	r3, [sp, #8]
 80117e8:	9303      	str	r3, [sp, #12]
 80117ea:	9304      	str	r3, [sp, #16]
 80117ec:	9305      	str	r3, [sp, #20]
   //cdc_printf("[appTest main]@%u:\t %d\n",GetCycleCount(), appTest.testCase);
   switch (appTest.testCase)
 80117ee:	4b5e      	ldr	r3, [pc, #376]	; (8011968 <AppTest_CanIdle_MainFunction+0x18c>)
 80117f0:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 80117f4:	3b01      	subs	r3, #1
 80117f6:	2b0e      	cmp	r3, #14
 80117f8:	d80c      	bhi.n	8011814 <AppTest_CanIdle_MainFunction+0x38>
 80117fa:	e8df f003 	tbb	[pc, r3]
 80117fe:	0b08      	.short	0x0b08
 8011800:	ad93a10b 	.word	0xad93a10b
 8011804:	0b0b0b0b 	.word	0x0b0b0b0b
 8011808:	0b0b0b0b 	.word	0x0b0b0b0b
 801180c:	0d          	.byte	0x0d
 801180d:	00          	.byte	0x00
   case APPTEST_CANIDLE_NO:

      break;

   case APPTEST_CANIDLE_BLINK:
      md80_ConfigBlink (&appTest.dev);
 801180e:	4857      	ldr	r0, [pc, #348]	; (801196c <AppTest_CanIdle_MainFunction+0x190>)
 8011810:	f7fa f81e 	bl	800b850 <md80_ConfigBlink>
      break;

   default:
      break;
   }
}
 8011814:	b007      	add	sp, #28
 8011816:	bd30      	pop	{r4, r5, pc}
      if (false == appTest.isCanIdleEnabled)
 8011818:	4b53      	ldr	r3, [pc, #332]	; (8011968 <AppTest_CanIdle_MainFunction+0x18c>)
 801181a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 801181e:	b32b      	cbz	r3, 801186c <AppTest_CanIdle_MainFunction+0x90>
      md80_SetTargetPosition (&appTest.dev , appTest.angleRad);
 8011820:	4c51      	ldr	r4, [pc, #324]	; (8011968 <AppTest_CanIdle_MainFunction+0x18c>)
 8011822:	ed94 0a7e 	vldr	s0, [r4, #504]	; 0x1f8
 8011826:	1d20      	adds	r0, r4, #4
 8011828:	f7fa f940 	bl	800baac <md80_SetTargetPosition>
      if (appTest.rotationCycle)
 801182c:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
 8011830:	2b00      	cmp	r3, #0
 8011832:	d063      	beq.n	80118fc <AppTest_CanIdle_MainFunction+0x120>
         appTest.angleRad += appTest.dt;
 8011834:	ed94 7a7f 	vldr	s14, [r4, #508]	; 0x1fc
 8011838:	edd4 7a7e 	vldr	s15, [r4, #504]	; 0x1f8
 801183c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011840:	edc4 7a7e 	vstr	s15, [r4, #504]	; 0x1f8
      if (appTest.angleRad >= appTest.maxAngleRad)
 8011844:	4b48      	ldr	r3, [pc, #288]	; (8011968 <AppTest_CanIdle_MainFunction+0x18c>)
 8011846:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 801184a:	ed93 7a80 	vldr	s14, [r3, #512]	; 0x200
 801184e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011856:	db5b      	blt.n	8011910 <AppTest_CanIdle_MainFunction+0x134>
    	   appTest.rotationCycle = false;
 8011858:	2200      	movs	r2, #0
 801185a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
      md80_MainFunction (&appTest.dev);
 801185e:	4843      	ldr	r0, [pc, #268]	; (801196c <AppTest_CanIdle_MainFunction+0x190>)
 8011860:	f7fa f8dc 	bl	800ba1c <md80_MainFunction>
      osDelay(10);
 8011864:	200a      	movs	r0, #10
 8011866:	f7f6 fe16 	bl	8008496 <osDelay>
      break;
 801186a:	e7d3      	b.n	8011814 <AppTest_CanIdle_MainFunction+0x38>
    	   canM_SetAddrTxRxDev(DEV_CAN_0, appTest.md80id, appTest.md80id);
 801186c:	4d3e      	ldr	r5, [pc, #248]	; (8011968 <AppTest_CanIdle_MainFunction+0x18c>)
 801186e:	462c      	mov	r4, r5
 8011870:	f834 1b04 	ldrh.w	r1, [r4], #4
 8011874:	460a      	mov	r2, r1
 8011876:	2000      	movs	r0, #0
 8011878:	f7fe fbee 	bl	8010058 <canM_SetAddrTxRxDev>
      	osDelay(1000);
 801187c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011880:	f7f6 fe09 	bl	8008496 <osDelay>
         md80_ControlMd80Mode (&appTest.dev, MD80_IMPEDANCE);
 8011884:	2104      	movs	r1, #4
 8011886:	4620      	mov	r0, r4
 8011888:	f7fa f89e 	bl	800b9c8 <md80_ControlMd80Mode>
         osDelay(1000);
 801188c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011890:	f7f6 fe01 	bl	8008496 <osDelay>
         md80_ControlMd80Enable (&appTest.dev, true);
 8011894:	2101      	movs	r1, #1
 8011896:	4620      	mov	r0, r4
 8011898:	f7fa f8ab 	bl	800b9f2 <md80_ControlMd80Enable>
         osDelay(1000);
 801189c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80118a0:	f7f6 fdf9 	bl	8008496 <osDelay>
         md80_SetImpedanceControllerParams(&appTest.dev, 10.0f, 1.0f);
 80118a4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80118a8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80118ac:	4620      	mov	r0, r4
 80118ae:	f7fa f8e5 	bl	800ba7c <md80_SetImpedanceControllerParams>
         osDelay(1000);
 80118b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80118b6:	f7f6 fdee 	bl	8008496 <osDelay>
         md80_SetEncoderZero(&appTest.dev);
 80118ba:	4620      	mov	r0, r4
 80118bc:	f7fa f8fa 	bl	800bab4 <md80_SetEncoderZero>
         osDelay(1000);
 80118c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80118c4:	f7f6 fde7 	bl	8008496 <osDelay>
         md80_SetMaxTorque (&appTest.dev, 10.0);
 80118c8:	210a      	movs	r1, #10
 80118ca:	4620      	mov	r0, r4
 80118cc:	f7fa f8de 	bl	800ba8c <md80_SetMaxTorque>
         md80_SetMaxVelocity (&appTest.dev, 5.0);
 80118d0:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80118d4:	4620      	mov	r0, r4
 80118d6:	f7fa f8e3 	bl	800baa0 <md80_SetMaxVelocity>
         osDelay(1000);
 80118da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80118de:	f7f6 fdda 	bl	8008496 <osDelay>
         md80_SetCurrentLimit(&appTest.dev, 1.0f);
 80118e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80118e6:	4620      	mov	r0, r4
 80118e8:	f7fa f83e 	bl	800b968 <md80_SetCurrentLimit>
         osDelay(500);
 80118ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80118f0:	f7f6 fdd1 	bl	8008496 <osDelay>
         appTest.isCanIdleEnabled = true;
 80118f4:	2301      	movs	r3, #1
 80118f6:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 80118fa:	e791      	b.n	8011820 <AppTest_CanIdle_MainFunction+0x44>
         appTest.angleRad -= appTest.dt;
 80118fc:	4b1a      	ldr	r3, [pc, #104]	; (8011968 <AppTest_CanIdle_MainFunction+0x18c>)
 80118fe:	ed93 7a7f 	vldr	s14, [r3, #508]	; 0x1fc
 8011902:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 8011906:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801190a:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
 801190e:	e799      	b.n	8011844 <AppTest_CanIdle_MainFunction+0x68>
      else if (appTest.angleRad <= 0)
 8011910:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011918:	d8a1      	bhi.n	801185e <AppTest_CanIdle_MainFunction+0x82>
    	   appTest.rotationCycle = true;
 801191a:	4b13      	ldr	r3, [pc, #76]	; (8011968 <AppTest_CanIdle_MainFunction+0x18c>)
 801191c:	2201      	movs	r2, #1
 801191e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8011922:	e79c      	b.n	801185e <AppTest_CanIdle_MainFunction+0x82>
                         appTest.newTimeoutMs, 
 8011924:	4c10      	ldr	r4, [pc, #64]	; (8011968 <AppTest_CanIdle_MainFunction+0x18c>)
      md80_ConfigMd80Can(&appTest.dev, 
 8011926:	f894 320a 	ldrb.w	r3, [r4, #522]	; 0x20a
 801192a:	f8b4 2208 	ldrh.w	r2, [r4, #520]	; 0x208
 801192e:	f894 1206 	ldrb.w	r1, [r4, #518]	; 0x206
 8011932:	1d20      	adds	r0, r4, #4
 8011934:	f7f9 ffc4 	bl	800b8c0 <md80_ConfigMd80Can>
      appTest.testCase = APPTEST_CANIDLE_NO;
 8011938:	2300      	movs	r3, #0
 801193a:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
      break;
 801193e:	e769      	b.n	8011814 <AppTest_CanIdle_MainFunction+0x38>
      canIdle_UpdateCmd(appTest.md80id, BUS_FRAME_CANDLE_CONFIG_BAUDRATE, 1, (uint8_t *)&appTest.md80BaudrateSet);
 8011940:	4c09      	ldr	r4, [pc, #36]	; (8011968 <AppTest_CanIdle_MainFunction+0x18c>)
 8011942:	f204 2306 	addw	r3, r4, #518	; 0x206
 8011946:	2201      	movs	r2, #1
 8011948:	2102      	movs	r1, #2
 801194a:	7820      	ldrb	r0, [r4, #0]
 801194c:	f7fe f9ac 	bl	800fca8 <canIdle_UpdateCmd>
      appTest.testCase = APPTEST_CANIDLE_NO;
 8011950:	2300      	movs	r3, #0
 8011952:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
      break;
 8011956:	e75d      	b.n	8011814 <AppTest_CanIdle_MainFunction+0x38>
      md80_ConfigMd80Save(&appTest.dev);
 8011958:	4c03      	ldr	r4, [pc, #12]	; (8011968 <AppTest_CanIdle_MainFunction+0x18c>)
 801195a:	1d20      	adds	r0, r4, #4
 801195c:	f7f9 ffda 	bl	800b914 <md80_ConfigMd80Save>
      appTest.testCase = APPTEST_CANIDLE_NO;
 8011960:	2300      	movs	r3, #0
 8011962:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
}
 8011966:	e755      	b.n	8011814 <AppTest_CanIdle_MainFunction+0x38>
 8011968:	20001604 	.word	0x20001604
 801196c:	20001608 	.word	0x20001608

08011970 <AppTest_Init>:
#endif

#if APPTEST_LAN9252 == 1
   AppTest_Lan9252_Init();
#endif
}
 8011970:	4770      	bx	lr

08011972 <AppTest_MainFunction>:

void AppTest_MainFunction ()
{
 8011972:	b508      	push	{r3, lr}
#if APPTEST_TMC8462 == 1
   AppTest_TMC8462A_MainFunction();
#endif

#if APPTEST_CANIDLE == 1
   AppTest_CanIdle_MainFunction();
 8011974:	f7ff ff32 	bl	80117dc <AppTest_CanIdle_MainFunction>
#endif

#if APPTEST_LAN9252 == 1
   AppTest_Lan9252_MainFunction();
#endif
}
 8011978:	bd08      	pop	{r3, pc}
	...

0801197c <__assert_func>:
 801197c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801197e:	4614      	mov	r4, r2
 8011980:	461a      	mov	r2, r3
 8011982:	4b09      	ldr	r3, [pc, #36]	; (80119a8 <__assert_func+0x2c>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	4605      	mov	r5, r0
 8011988:	68d8      	ldr	r0, [r3, #12]
 801198a:	b14c      	cbz	r4, 80119a0 <__assert_func+0x24>
 801198c:	4b07      	ldr	r3, [pc, #28]	; (80119ac <__assert_func+0x30>)
 801198e:	9100      	str	r1, [sp, #0]
 8011990:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011994:	4906      	ldr	r1, [pc, #24]	; (80119b0 <__assert_func+0x34>)
 8011996:	462b      	mov	r3, r5
 8011998:	f000 f8a0 	bl	8011adc <fiprintf>
 801199c:	f000 fa40 	bl	8011e20 <abort>
 80119a0:	4b04      	ldr	r3, [pc, #16]	; (80119b4 <__assert_func+0x38>)
 80119a2:	461c      	mov	r4, r3
 80119a4:	e7f3      	b.n	801198e <__assert_func+0x12>
 80119a6:	bf00      	nop
 80119a8:	20001868 	.word	0x20001868
 80119ac:	08016b4e 	.word	0x08016b4e
 80119b0:	08016b5b 	.word	0x08016b5b
 80119b4:	08016b89 	.word	0x08016b89

080119b8 <std>:
 80119b8:	2300      	movs	r3, #0
 80119ba:	b510      	push	{r4, lr}
 80119bc:	4604      	mov	r4, r0
 80119be:	e9c0 3300 	strd	r3, r3, [r0]
 80119c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80119c6:	6083      	str	r3, [r0, #8]
 80119c8:	8181      	strh	r1, [r0, #12]
 80119ca:	6643      	str	r3, [r0, #100]	; 0x64
 80119cc:	81c2      	strh	r2, [r0, #14]
 80119ce:	6183      	str	r3, [r0, #24]
 80119d0:	4619      	mov	r1, r3
 80119d2:	2208      	movs	r2, #8
 80119d4:	305c      	adds	r0, #92	; 0x5c
 80119d6:	f000 f957 	bl	8011c88 <memset>
 80119da:	4b05      	ldr	r3, [pc, #20]	; (80119f0 <std+0x38>)
 80119dc:	6263      	str	r3, [r4, #36]	; 0x24
 80119de:	4b05      	ldr	r3, [pc, #20]	; (80119f4 <std+0x3c>)
 80119e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80119e2:	4b05      	ldr	r3, [pc, #20]	; (80119f8 <std+0x40>)
 80119e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80119e6:	4b05      	ldr	r3, [pc, #20]	; (80119fc <std+0x44>)
 80119e8:	6224      	str	r4, [r4, #32]
 80119ea:	6323      	str	r3, [r4, #48]	; 0x30
 80119ec:	bd10      	pop	{r4, pc}
 80119ee:	bf00      	nop
 80119f0:	08011b71 	.word	0x08011b71
 80119f4:	08011b93 	.word	0x08011b93
 80119f8:	08011bcb 	.word	0x08011bcb
 80119fc:	08011bef 	.word	0x08011bef

08011a00 <stdio_exit_handler>:
 8011a00:	4a02      	ldr	r2, [pc, #8]	; (8011a0c <stdio_exit_handler+0xc>)
 8011a02:	4903      	ldr	r1, [pc, #12]	; (8011a10 <stdio_exit_handler+0x10>)
 8011a04:	4803      	ldr	r0, [pc, #12]	; (8011a14 <stdio_exit_handler+0x14>)
 8011a06:	f000 b87b 	b.w	8011b00 <_fwalk_sglue>
 8011a0a:	bf00      	nop
 8011a0c:	20001810 	.word	0x20001810
 8011a10:	08012985 	.word	0x08012985
 8011a14:	2000181c 	.word	0x2000181c

08011a18 <cleanup_stdio>:
 8011a18:	6841      	ldr	r1, [r0, #4]
 8011a1a:	4b0c      	ldr	r3, [pc, #48]	; (8011a4c <cleanup_stdio+0x34>)
 8011a1c:	4299      	cmp	r1, r3
 8011a1e:	b510      	push	{r4, lr}
 8011a20:	4604      	mov	r4, r0
 8011a22:	d001      	beq.n	8011a28 <cleanup_stdio+0x10>
 8011a24:	f000 ffae 	bl	8012984 <_fflush_r>
 8011a28:	68a1      	ldr	r1, [r4, #8]
 8011a2a:	4b09      	ldr	r3, [pc, #36]	; (8011a50 <cleanup_stdio+0x38>)
 8011a2c:	4299      	cmp	r1, r3
 8011a2e:	d002      	beq.n	8011a36 <cleanup_stdio+0x1e>
 8011a30:	4620      	mov	r0, r4
 8011a32:	f000 ffa7 	bl	8012984 <_fflush_r>
 8011a36:	68e1      	ldr	r1, [r4, #12]
 8011a38:	4b06      	ldr	r3, [pc, #24]	; (8011a54 <cleanup_stdio+0x3c>)
 8011a3a:	4299      	cmp	r1, r3
 8011a3c:	d004      	beq.n	8011a48 <cleanup_stdio+0x30>
 8011a3e:	4620      	mov	r0, r4
 8011a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a44:	f000 bf9e 	b.w	8012984 <_fflush_r>
 8011a48:	bd10      	pop	{r4, pc}
 8011a4a:	bf00      	nop
 8011a4c:	2000cb74 	.word	0x2000cb74
 8011a50:	2000cbdc 	.word	0x2000cbdc
 8011a54:	2000cc44 	.word	0x2000cc44

08011a58 <global_stdio_init.part.0>:
 8011a58:	b510      	push	{r4, lr}
 8011a5a:	4b0b      	ldr	r3, [pc, #44]	; (8011a88 <global_stdio_init.part.0+0x30>)
 8011a5c:	4c0b      	ldr	r4, [pc, #44]	; (8011a8c <global_stdio_init.part.0+0x34>)
 8011a5e:	4a0c      	ldr	r2, [pc, #48]	; (8011a90 <global_stdio_init.part.0+0x38>)
 8011a60:	601a      	str	r2, [r3, #0]
 8011a62:	4620      	mov	r0, r4
 8011a64:	2200      	movs	r2, #0
 8011a66:	2104      	movs	r1, #4
 8011a68:	f7ff ffa6 	bl	80119b8 <std>
 8011a6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011a70:	2201      	movs	r2, #1
 8011a72:	2109      	movs	r1, #9
 8011a74:	f7ff ffa0 	bl	80119b8 <std>
 8011a78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011a7c:	2202      	movs	r2, #2
 8011a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a82:	2112      	movs	r1, #18
 8011a84:	f7ff bf98 	b.w	80119b8 <std>
 8011a88:	2000ccac 	.word	0x2000ccac
 8011a8c:	2000cb74 	.word	0x2000cb74
 8011a90:	08011a01 	.word	0x08011a01

08011a94 <__sfp_lock_acquire>:
 8011a94:	4801      	ldr	r0, [pc, #4]	; (8011a9c <__sfp_lock_acquire+0x8>)
 8011a96:	f000 b9b3 	b.w	8011e00 <__retarget_lock_acquire_recursive>
 8011a9a:	bf00      	nop
 8011a9c:	2000ccb5 	.word	0x2000ccb5

08011aa0 <__sfp_lock_release>:
 8011aa0:	4801      	ldr	r0, [pc, #4]	; (8011aa8 <__sfp_lock_release+0x8>)
 8011aa2:	f000 b9ae 	b.w	8011e02 <__retarget_lock_release_recursive>
 8011aa6:	bf00      	nop
 8011aa8:	2000ccb5 	.word	0x2000ccb5

08011aac <__sinit>:
 8011aac:	b510      	push	{r4, lr}
 8011aae:	4604      	mov	r4, r0
 8011ab0:	f7ff fff0 	bl	8011a94 <__sfp_lock_acquire>
 8011ab4:	6a23      	ldr	r3, [r4, #32]
 8011ab6:	b11b      	cbz	r3, 8011ac0 <__sinit+0x14>
 8011ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011abc:	f7ff bff0 	b.w	8011aa0 <__sfp_lock_release>
 8011ac0:	4b04      	ldr	r3, [pc, #16]	; (8011ad4 <__sinit+0x28>)
 8011ac2:	6223      	str	r3, [r4, #32]
 8011ac4:	4b04      	ldr	r3, [pc, #16]	; (8011ad8 <__sinit+0x2c>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d1f5      	bne.n	8011ab8 <__sinit+0xc>
 8011acc:	f7ff ffc4 	bl	8011a58 <global_stdio_init.part.0>
 8011ad0:	e7f2      	b.n	8011ab8 <__sinit+0xc>
 8011ad2:	bf00      	nop
 8011ad4:	08011a19 	.word	0x08011a19
 8011ad8:	2000ccac 	.word	0x2000ccac

08011adc <fiprintf>:
 8011adc:	b40e      	push	{r1, r2, r3}
 8011ade:	b503      	push	{r0, r1, lr}
 8011ae0:	4601      	mov	r1, r0
 8011ae2:	ab03      	add	r3, sp, #12
 8011ae4:	4805      	ldr	r0, [pc, #20]	; (8011afc <fiprintf+0x20>)
 8011ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aea:	6800      	ldr	r0, [r0, #0]
 8011aec:	9301      	str	r3, [sp, #4]
 8011aee:	f000 fc19 	bl	8012324 <_vfiprintf_r>
 8011af2:	b002      	add	sp, #8
 8011af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011af8:	b003      	add	sp, #12
 8011afa:	4770      	bx	lr
 8011afc:	20001868 	.word	0x20001868

08011b00 <_fwalk_sglue>:
 8011b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b04:	4607      	mov	r7, r0
 8011b06:	4688      	mov	r8, r1
 8011b08:	4614      	mov	r4, r2
 8011b0a:	2600      	movs	r6, #0
 8011b0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b10:	f1b9 0901 	subs.w	r9, r9, #1
 8011b14:	d505      	bpl.n	8011b22 <_fwalk_sglue+0x22>
 8011b16:	6824      	ldr	r4, [r4, #0]
 8011b18:	2c00      	cmp	r4, #0
 8011b1a:	d1f7      	bne.n	8011b0c <_fwalk_sglue+0xc>
 8011b1c:	4630      	mov	r0, r6
 8011b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b22:	89ab      	ldrh	r3, [r5, #12]
 8011b24:	2b01      	cmp	r3, #1
 8011b26:	d907      	bls.n	8011b38 <_fwalk_sglue+0x38>
 8011b28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	d003      	beq.n	8011b38 <_fwalk_sglue+0x38>
 8011b30:	4629      	mov	r1, r5
 8011b32:	4638      	mov	r0, r7
 8011b34:	47c0      	blx	r8
 8011b36:	4306      	orrs	r6, r0
 8011b38:	3568      	adds	r5, #104	; 0x68
 8011b3a:	e7e9      	b.n	8011b10 <_fwalk_sglue+0x10>

08011b3c <iprintf>:
 8011b3c:	b40f      	push	{r0, r1, r2, r3}
 8011b3e:	b507      	push	{r0, r1, r2, lr}
 8011b40:	4906      	ldr	r1, [pc, #24]	; (8011b5c <iprintf+0x20>)
 8011b42:	ab04      	add	r3, sp, #16
 8011b44:	6808      	ldr	r0, [r1, #0]
 8011b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b4a:	6881      	ldr	r1, [r0, #8]
 8011b4c:	9301      	str	r3, [sp, #4]
 8011b4e:	f000 fbe9 	bl	8012324 <_vfiprintf_r>
 8011b52:	b003      	add	sp, #12
 8011b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b58:	b004      	add	sp, #16
 8011b5a:	4770      	bx	lr
 8011b5c:	20001868 	.word	0x20001868

08011b60 <putchar>:
 8011b60:	4b02      	ldr	r3, [pc, #8]	; (8011b6c <putchar+0xc>)
 8011b62:	4601      	mov	r1, r0
 8011b64:	6818      	ldr	r0, [r3, #0]
 8011b66:	6882      	ldr	r2, [r0, #8]
 8011b68:	f000 bf34 	b.w	80129d4 <_putc_r>
 8011b6c:	20001868 	.word	0x20001868

08011b70 <__sread>:
 8011b70:	b510      	push	{r4, lr}
 8011b72:	460c      	mov	r4, r1
 8011b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b78:	f000 f906 	bl	8011d88 <_read_r>
 8011b7c:	2800      	cmp	r0, #0
 8011b7e:	bfab      	itete	ge
 8011b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011b82:	89a3      	ldrhlt	r3, [r4, #12]
 8011b84:	181b      	addge	r3, r3, r0
 8011b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b8a:	bfac      	ite	ge
 8011b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011b8e:	81a3      	strhlt	r3, [r4, #12]
 8011b90:	bd10      	pop	{r4, pc}

08011b92 <__swrite>:
 8011b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b96:	461f      	mov	r7, r3
 8011b98:	898b      	ldrh	r3, [r1, #12]
 8011b9a:	05db      	lsls	r3, r3, #23
 8011b9c:	4605      	mov	r5, r0
 8011b9e:	460c      	mov	r4, r1
 8011ba0:	4616      	mov	r6, r2
 8011ba2:	d505      	bpl.n	8011bb0 <__swrite+0x1e>
 8011ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ba8:	2302      	movs	r3, #2
 8011baa:	2200      	movs	r2, #0
 8011bac:	f000 f8da 	bl	8011d64 <_lseek_r>
 8011bb0:	89a3      	ldrh	r3, [r4, #12]
 8011bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011bba:	81a3      	strh	r3, [r4, #12]
 8011bbc:	4632      	mov	r2, r6
 8011bbe:	463b      	mov	r3, r7
 8011bc0:	4628      	mov	r0, r5
 8011bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bc6:	f7ff bb99 	b.w	80112fc <_write_r>

08011bca <__sseek>:
 8011bca:	b510      	push	{r4, lr}
 8011bcc:	460c      	mov	r4, r1
 8011bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bd2:	f000 f8c7 	bl	8011d64 <_lseek_r>
 8011bd6:	1c43      	adds	r3, r0, #1
 8011bd8:	89a3      	ldrh	r3, [r4, #12]
 8011bda:	bf15      	itete	ne
 8011bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8011bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011be6:	81a3      	strheq	r3, [r4, #12]
 8011be8:	bf18      	it	ne
 8011bea:	81a3      	strhne	r3, [r4, #12]
 8011bec:	bd10      	pop	{r4, pc}

08011bee <__sclose>:
 8011bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bf2:	f000 b851 	b.w	8011c98 <_close_r>

08011bf6 <_vsniprintf_r>:
 8011bf6:	b530      	push	{r4, r5, lr}
 8011bf8:	4614      	mov	r4, r2
 8011bfa:	2c00      	cmp	r4, #0
 8011bfc:	b09b      	sub	sp, #108	; 0x6c
 8011bfe:	4605      	mov	r5, r0
 8011c00:	461a      	mov	r2, r3
 8011c02:	da05      	bge.n	8011c10 <_vsniprintf_r+0x1a>
 8011c04:	238b      	movs	r3, #139	; 0x8b
 8011c06:	6003      	str	r3, [r0, #0]
 8011c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c0c:	b01b      	add	sp, #108	; 0x6c
 8011c0e:	bd30      	pop	{r4, r5, pc}
 8011c10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011c14:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011c18:	bf14      	ite	ne
 8011c1a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011c1e:	4623      	moveq	r3, r4
 8011c20:	9302      	str	r3, [sp, #8]
 8011c22:	9305      	str	r3, [sp, #20]
 8011c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c28:	9100      	str	r1, [sp, #0]
 8011c2a:	9104      	str	r1, [sp, #16]
 8011c2c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011c30:	4669      	mov	r1, sp
 8011c32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011c34:	f000 fa4e 	bl	80120d4 <_svfiprintf_r>
 8011c38:	1c43      	adds	r3, r0, #1
 8011c3a:	bfbc      	itt	lt
 8011c3c:	238b      	movlt	r3, #139	; 0x8b
 8011c3e:	602b      	strlt	r3, [r5, #0]
 8011c40:	2c00      	cmp	r4, #0
 8011c42:	d0e3      	beq.n	8011c0c <_vsniprintf_r+0x16>
 8011c44:	9b00      	ldr	r3, [sp, #0]
 8011c46:	2200      	movs	r2, #0
 8011c48:	701a      	strb	r2, [r3, #0]
 8011c4a:	e7df      	b.n	8011c0c <_vsniprintf_r+0x16>

08011c4c <vsniprintf>:
 8011c4c:	b507      	push	{r0, r1, r2, lr}
 8011c4e:	9300      	str	r3, [sp, #0]
 8011c50:	4613      	mov	r3, r2
 8011c52:	460a      	mov	r2, r1
 8011c54:	4601      	mov	r1, r0
 8011c56:	4803      	ldr	r0, [pc, #12]	; (8011c64 <vsniprintf+0x18>)
 8011c58:	6800      	ldr	r0, [r0, #0]
 8011c5a:	f7ff ffcc 	bl	8011bf6 <_vsniprintf_r>
 8011c5e:	b003      	add	sp, #12
 8011c60:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c64:	20001868 	.word	0x20001868

08011c68 <memcmp>:
 8011c68:	b510      	push	{r4, lr}
 8011c6a:	3901      	subs	r1, #1
 8011c6c:	4402      	add	r2, r0
 8011c6e:	4290      	cmp	r0, r2
 8011c70:	d101      	bne.n	8011c76 <memcmp+0xe>
 8011c72:	2000      	movs	r0, #0
 8011c74:	e005      	b.n	8011c82 <memcmp+0x1a>
 8011c76:	7803      	ldrb	r3, [r0, #0]
 8011c78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011c7c:	42a3      	cmp	r3, r4
 8011c7e:	d001      	beq.n	8011c84 <memcmp+0x1c>
 8011c80:	1b18      	subs	r0, r3, r4
 8011c82:	bd10      	pop	{r4, pc}
 8011c84:	3001      	adds	r0, #1
 8011c86:	e7f2      	b.n	8011c6e <memcmp+0x6>

08011c88 <memset>:
 8011c88:	4402      	add	r2, r0
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	d100      	bne.n	8011c92 <memset+0xa>
 8011c90:	4770      	bx	lr
 8011c92:	f803 1b01 	strb.w	r1, [r3], #1
 8011c96:	e7f9      	b.n	8011c8c <memset+0x4>

08011c98 <_close_r>:
 8011c98:	b538      	push	{r3, r4, r5, lr}
 8011c9a:	4d06      	ldr	r5, [pc, #24]	; (8011cb4 <_close_r+0x1c>)
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	4604      	mov	r4, r0
 8011ca0:	4608      	mov	r0, r1
 8011ca2:	602b      	str	r3, [r5, #0]
 8011ca4:	f7ef f946 	bl	8000f34 <_close>
 8011ca8:	1c43      	adds	r3, r0, #1
 8011caa:	d102      	bne.n	8011cb2 <_close_r+0x1a>
 8011cac:	682b      	ldr	r3, [r5, #0]
 8011cae:	b103      	cbz	r3, 8011cb2 <_close_r+0x1a>
 8011cb0:	6023      	str	r3, [r4, #0]
 8011cb2:	bd38      	pop	{r3, r4, r5, pc}
 8011cb4:	2000ccb0 	.word	0x2000ccb0

08011cb8 <_reclaim_reent>:
 8011cb8:	4b29      	ldr	r3, [pc, #164]	; (8011d60 <_reclaim_reent+0xa8>)
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	4283      	cmp	r3, r0
 8011cbe:	b570      	push	{r4, r5, r6, lr}
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	d04b      	beq.n	8011d5c <_reclaim_reent+0xa4>
 8011cc4:	69c3      	ldr	r3, [r0, #28]
 8011cc6:	b143      	cbz	r3, 8011cda <_reclaim_reent+0x22>
 8011cc8:	68db      	ldr	r3, [r3, #12]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d144      	bne.n	8011d58 <_reclaim_reent+0xa0>
 8011cce:	69e3      	ldr	r3, [r4, #28]
 8011cd0:	6819      	ldr	r1, [r3, #0]
 8011cd2:	b111      	cbz	r1, 8011cda <_reclaim_reent+0x22>
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	f000 f8ab 	bl	8011e30 <_free_r>
 8011cda:	6961      	ldr	r1, [r4, #20]
 8011cdc:	b111      	cbz	r1, 8011ce4 <_reclaim_reent+0x2c>
 8011cde:	4620      	mov	r0, r4
 8011ce0:	f000 f8a6 	bl	8011e30 <_free_r>
 8011ce4:	69e1      	ldr	r1, [r4, #28]
 8011ce6:	b111      	cbz	r1, 8011cee <_reclaim_reent+0x36>
 8011ce8:	4620      	mov	r0, r4
 8011cea:	f000 f8a1 	bl	8011e30 <_free_r>
 8011cee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011cf0:	b111      	cbz	r1, 8011cf8 <_reclaim_reent+0x40>
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	f000 f89c 	bl	8011e30 <_free_r>
 8011cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cfa:	b111      	cbz	r1, 8011d02 <_reclaim_reent+0x4a>
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	f000 f897 	bl	8011e30 <_free_r>
 8011d02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011d04:	b111      	cbz	r1, 8011d0c <_reclaim_reent+0x54>
 8011d06:	4620      	mov	r0, r4
 8011d08:	f000 f892 	bl	8011e30 <_free_r>
 8011d0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011d0e:	b111      	cbz	r1, 8011d16 <_reclaim_reent+0x5e>
 8011d10:	4620      	mov	r0, r4
 8011d12:	f000 f88d 	bl	8011e30 <_free_r>
 8011d16:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011d18:	b111      	cbz	r1, 8011d20 <_reclaim_reent+0x68>
 8011d1a:	4620      	mov	r0, r4
 8011d1c:	f000 f888 	bl	8011e30 <_free_r>
 8011d20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011d22:	b111      	cbz	r1, 8011d2a <_reclaim_reent+0x72>
 8011d24:	4620      	mov	r0, r4
 8011d26:	f000 f883 	bl	8011e30 <_free_r>
 8011d2a:	6a23      	ldr	r3, [r4, #32]
 8011d2c:	b1b3      	cbz	r3, 8011d5c <_reclaim_reent+0xa4>
 8011d2e:	4620      	mov	r0, r4
 8011d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d34:	4718      	bx	r3
 8011d36:	5949      	ldr	r1, [r1, r5]
 8011d38:	b941      	cbnz	r1, 8011d4c <_reclaim_reent+0x94>
 8011d3a:	3504      	adds	r5, #4
 8011d3c:	69e3      	ldr	r3, [r4, #28]
 8011d3e:	2d80      	cmp	r5, #128	; 0x80
 8011d40:	68d9      	ldr	r1, [r3, #12]
 8011d42:	d1f8      	bne.n	8011d36 <_reclaim_reent+0x7e>
 8011d44:	4620      	mov	r0, r4
 8011d46:	f000 f873 	bl	8011e30 <_free_r>
 8011d4a:	e7c0      	b.n	8011cce <_reclaim_reent+0x16>
 8011d4c:	680e      	ldr	r6, [r1, #0]
 8011d4e:	4620      	mov	r0, r4
 8011d50:	f000 f86e 	bl	8011e30 <_free_r>
 8011d54:	4631      	mov	r1, r6
 8011d56:	e7ef      	b.n	8011d38 <_reclaim_reent+0x80>
 8011d58:	2500      	movs	r5, #0
 8011d5a:	e7ef      	b.n	8011d3c <_reclaim_reent+0x84>
 8011d5c:	bd70      	pop	{r4, r5, r6, pc}
 8011d5e:	bf00      	nop
 8011d60:	20001868 	.word	0x20001868

08011d64 <_lseek_r>:
 8011d64:	b538      	push	{r3, r4, r5, lr}
 8011d66:	4d07      	ldr	r5, [pc, #28]	; (8011d84 <_lseek_r+0x20>)
 8011d68:	4604      	mov	r4, r0
 8011d6a:	4608      	mov	r0, r1
 8011d6c:	4611      	mov	r1, r2
 8011d6e:	2200      	movs	r2, #0
 8011d70:	602a      	str	r2, [r5, #0]
 8011d72:	461a      	mov	r2, r3
 8011d74:	f7ef f8e8 	bl	8000f48 <_lseek>
 8011d78:	1c43      	adds	r3, r0, #1
 8011d7a:	d102      	bne.n	8011d82 <_lseek_r+0x1e>
 8011d7c:	682b      	ldr	r3, [r5, #0]
 8011d7e:	b103      	cbz	r3, 8011d82 <_lseek_r+0x1e>
 8011d80:	6023      	str	r3, [r4, #0]
 8011d82:	bd38      	pop	{r3, r4, r5, pc}
 8011d84:	2000ccb0 	.word	0x2000ccb0

08011d88 <_read_r>:
 8011d88:	b538      	push	{r3, r4, r5, lr}
 8011d8a:	4d07      	ldr	r5, [pc, #28]	; (8011da8 <_read_r+0x20>)
 8011d8c:	4604      	mov	r4, r0
 8011d8e:	4608      	mov	r0, r1
 8011d90:	4611      	mov	r1, r2
 8011d92:	2200      	movs	r2, #0
 8011d94:	602a      	str	r2, [r5, #0]
 8011d96:	461a      	mov	r2, r3
 8011d98:	f7ef f8bc 	bl	8000f14 <_read>
 8011d9c:	1c43      	adds	r3, r0, #1
 8011d9e:	d102      	bne.n	8011da6 <_read_r+0x1e>
 8011da0:	682b      	ldr	r3, [r5, #0]
 8011da2:	b103      	cbz	r3, 8011da6 <_read_r+0x1e>
 8011da4:	6023      	str	r3, [r4, #0]
 8011da6:	bd38      	pop	{r3, r4, r5, pc}
 8011da8:	2000ccb0 	.word	0x2000ccb0

08011dac <__errno>:
 8011dac:	4b01      	ldr	r3, [pc, #4]	; (8011db4 <__errno+0x8>)
 8011dae:	6818      	ldr	r0, [r3, #0]
 8011db0:	4770      	bx	lr
 8011db2:	bf00      	nop
 8011db4:	20001868 	.word	0x20001868

08011db8 <__libc_init_array>:
 8011db8:	b570      	push	{r4, r5, r6, lr}
 8011dba:	4d0d      	ldr	r5, [pc, #52]	; (8011df0 <__libc_init_array+0x38>)
 8011dbc:	4c0d      	ldr	r4, [pc, #52]	; (8011df4 <__libc_init_array+0x3c>)
 8011dbe:	1b64      	subs	r4, r4, r5
 8011dc0:	10a4      	asrs	r4, r4, #2
 8011dc2:	2600      	movs	r6, #0
 8011dc4:	42a6      	cmp	r6, r4
 8011dc6:	d109      	bne.n	8011ddc <__libc_init_array+0x24>
 8011dc8:	4d0b      	ldr	r5, [pc, #44]	; (8011df8 <__libc_init_array+0x40>)
 8011dca:	4c0c      	ldr	r4, [pc, #48]	; (8011dfc <__libc_init_array+0x44>)
 8011dcc:	f000 fff6 	bl	8012dbc <_init>
 8011dd0:	1b64      	subs	r4, r4, r5
 8011dd2:	10a4      	asrs	r4, r4, #2
 8011dd4:	2600      	movs	r6, #0
 8011dd6:	42a6      	cmp	r6, r4
 8011dd8:	d105      	bne.n	8011de6 <__libc_init_array+0x2e>
 8011dda:	bd70      	pop	{r4, r5, r6, pc}
 8011ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011de0:	4798      	blx	r3
 8011de2:	3601      	adds	r6, #1
 8011de4:	e7ee      	b.n	8011dc4 <__libc_init_array+0xc>
 8011de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dea:	4798      	blx	r3
 8011dec:	3601      	adds	r6, #1
 8011dee:	e7f2      	b.n	8011dd6 <__libc_init_array+0x1e>
 8011df0:	08016bc8 	.word	0x08016bc8
 8011df4:	08016bc8 	.word	0x08016bc8
 8011df8:	08016bc8 	.word	0x08016bc8
 8011dfc:	08016bcc 	.word	0x08016bcc

08011e00 <__retarget_lock_acquire_recursive>:
 8011e00:	4770      	bx	lr

08011e02 <__retarget_lock_release_recursive>:
 8011e02:	4770      	bx	lr

08011e04 <memcpy>:
 8011e04:	440a      	add	r2, r1
 8011e06:	4291      	cmp	r1, r2
 8011e08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011e0c:	d100      	bne.n	8011e10 <memcpy+0xc>
 8011e0e:	4770      	bx	lr
 8011e10:	b510      	push	{r4, lr}
 8011e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e1a:	4291      	cmp	r1, r2
 8011e1c:	d1f9      	bne.n	8011e12 <memcpy+0xe>
 8011e1e:	bd10      	pop	{r4, pc}

08011e20 <abort>:
 8011e20:	b508      	push	{r3, lr}
 8011e22:	2006      	movs	r0, #6
 8011e24:	f000 fee2 	bl	8012bec <raise>
 8011e28:	2001      	movs	r0, #1
 8011e2a:	f7ef f86d 	bl	8000f08 <_exit>
	...

08011e30 <_free_r>:
 8011e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e32:	2900      	cmp	r1, #0
 8011e34:	d044      	beq.n	8011ec0 <_free_r+0x90>
 8011e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e3a:	9001      	str	r0, [sp, #4]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8011e42:	bfb8      	it	lt
 8011e44:	18e4      	addlt	r4, r4, r3
 8011e46:	f000 f8df 	bl	8012008 <__malloc_lock>
 8011e4a:	4a1e      	ldr	r2, [pc, #120]	; (8011ec4 <_free_r+0x94>)
 8011e4c:	9801      	ldr	r0, [sp, #4]
 8011e4e:	6813      	ldr	r3, [r2, #0]
 8011e50:	b933      	cbnz	r3, 8011e60 <_free_r+0x30>
 8011e52:	6063      	str	r3, [r4, #4]
 8011e54:	6014      	str	r4, [r2, #0]
 8011e56:	b003      	add	sp, #12
 8011e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e5c:	f000 b8da 	b.w	8012014 <__malloc_unlock>
 8011e60:	42a3      	cmp	r3, r4
 8011e62:	d908      	bls.n	8011e76 <_free_r+0x46>
 8011e64:	6825      	ldr	r5, [r4, #0]
 8011e66:	1961      	adds	r1, r4, r5
 8011e68:	428b      	cmp	r3, r1
 8011e6a:	bf01      	itttt	eq
 8011e6c:	6819      	ldreq	r1, [r3, #0]
 8011e6e:	685b      	ldreq	r3, [r3, #4]
 8011e70:	1949      	addeq	r1, r1, r5
 8011e72:	6021      	streq	r1, [r4, #0]
 8011e74:	e7ed      	b.n	8011e52 <_free_r+0x22>
 8011e76:	461a      	mov	r2, r3
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	b10b      	cbz	r3, 8011e80 <_free_r+0x50>
 8011e7c:	42a3      	cmp	r3, r4
 8011e7e:	d9fa      	bls.n	8011e76 <_free_r+0x46>
 8011e80:	6811      	ldr	r1, [r2, #0]
 8011e82:	1855      	adds	r5, r2, r1
 8011e84:	42a5      	cmp	r5, r4
 8011e86:	d10b      	bne.n	8011ea0 <_free_r+0x70>
 8011e88:	6824      	ldr	r4, [r4, #0]
 8011e8a:	4421      	add	r1, r4
 8011e8c:	1854      	adds	r4, r2, r1
 8011e8e:	42a3      	cmp	r3, r4
 8011e90:	6011      	str	r1, [r2, #0]
 8011e92:	d1e0      	bne.n	8011e56 <_free_r+0x26>
 8011e94:	681c      	ldr	r4, [r3, #0]
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	6053      	str	r3, [r2, #4]
 8011e9a:	440c      	add	r4, r1
 8011e9c:	6014      	str	r4, [r2, #0]
 8011e9e:	e7da      	b.n	8011e56 <_free_r+0x26>
 8011ea0:	d902      	bls.n	8011ea8 <_free_r+0x78>
 8011ea2:	230c      	movs	r3, #12
 8011ea4:	6003      	str	r3, [r0, #0]
 8011ea6:	e7d6      	b.n	8011e56 <_free_r+0x26>
 8011ea8:	6825      	ldr	r5, [r4, #0]
 8011eaa:	1961      	adds	r1, r4, r5
 8011eac:	428b      	cmp	r3, r1
 8011eae:	bf04      	itt	eq
 8011eb0:	6819      	ldreq	r1, [r3, #0]
 8011eb2:	685b      	ldreq	r3, [r3, #4]
 8011eb4:	6063      	str	r3, [r4, #4]
 8011eb6:	bf04      	itt	eq
 8011eb8:	1949      	addeq	r1, r1, r5
 8011eba:	6021      	streq	r1, [r4, #0]
 8011ebc:	6054      	str	r4, [r2, #4]
 8011ebe:	e7ca      	b.n	8011e56 <_free_r+0x26>
 8011ec0:	b003      	add	sp, #12
 8011ec2:	bd30      	pop	{r4, r5, pc}
 8011ec4:	2000ccb8 	.word	0x2000ccb8

08011ec8 <sbrk_aligned>:
 8011ec8:	b570      	push	{r4, r5, r6, lr}
 8011eca:	4e0e      	ldr	r6, [pc, #56]	; (8011f04 <sbrk_aligned+0x3c>)
 8011ecc:	460c      	mov	r4, r1
 8011ece:	6831      	ldr	r1, [r6, #0]
 8011ed0:	4605      	mov	r5, r0
 8011ed2:	b911      	cbnz	r1, 8011eda <sbrk_aligned+0x12>
 8011ed4:	f000 fea6 	bl	8012c24 <_sbrk_r>
 8011ed8:	6030      	str	r0, [r6, #0]
 8011eda:	4621      	mov	r1, r4
 8011edc:	4628      	mov	r0, r5
 8011ede:	f000 fea1 	bl	8012c24 <_sbrk_r>
 8011ee2:	1c43      	adds	r3, r0, #1
 8011ee4:	d00a      	beq.n	8011efc <sbrk_aligned+0x34>
 8011ee6:	1cc4      	adds	r4, r0, #3
 8011ee8:	f024 0403 	bic.w	r4, r4, #3
 8011eec:	42a0      	cmp	r0, r4
 8011eee:	d007      	beq.n	8011f00 <sbrk_aligned+0x38>
 8011ef0:	1a21      	subs	r1, r4, r0
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	f000 fe96 	bl	8012c24 <_sbrk_r>
 8011ef8:	3001      	adds	r0, #1
 8011efa:	d101      	bne.n	8011f00 <sbrk_aligned+0x38>
 8011efc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011f00:	4620      	mov	r0, r4
 8011f02:	bd70      	pop	{r4, r5, r6, pc}
 8011f04:	2000ccbc 	.word	0x2000ccbc

08011f08 <_malloc_r>:
 8011f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f0c:	1ccd      	adds	r5, r1, #3
 8011f0e:	f025 0503 	bic.w	r5, r5, #3
 8011f12:	3508      	adds	r5, #8
 8011f14:	2d0c      	cmp	r5, #12
 8011f16:	bf38      	it	cc
 8011f18:	250c      	movcc	r5, #12
 8011f1a:	2d00      	cmp	r5, #0
 8011f1c:	4607      	mov	r7, r0
 8011f1e:	db01      	blt.n	8011f24 <_malloc_r+0x1c>
 8011f20:	42a9      	cmp	r1, r5
 8011f22:	d905      	bls.n	8011f30 <_malloc_r+0x28>
 8011f24:	230c      	movs	r3, #12
 8011f26:	603b      	str	r3, [r7, #0]
 8011f28:	2600      	movs	r6, #0
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012004 <_malloc_r+0xfc>
 8011f34:	f000 f868 	bl	8012008 <__malloc_lock>
 8011f38:	f8d8 3000 	ldr.w	r3, [r8]
 8011f3c:	461c      	mov	r4, r3
 8011f3e:	bb5c      	cbnz	r4, 8011f98 <_malloc_r+0x90>
 8011f40:	4629      	mov	r1, r5
 8011f42:	4638      	mov	r0, r7
 8011f44:	f7ff ffc0 	bl	8011ec8 <sbrk_aligned>
 8011f48:	1c43      	adds	r3, r0, #1
 8011f4a:	4604      	mov	r4, r0
 8011f4c:	d155      	bne.n	8011ffa <_malloc_r+0xf2>
 8011f4e:	f8d8 4000 	ldr.w	r4, [r8]
 8011f52:	4626      	mov	r6, r4
 8011f54:	2e00      	cmp	r6, #0
 8011f56:	d145      	bne.n	8011fe4 <_malloc_r+0xdc>
 8011f58:	2c00      	cmp	r4, #0
 8011f5a:	d048      	beq.n	8011fee <_malloc_r+0xe6>
 8011f5c:	6823      	ldr	r3, [r4, #0]
 8011f5e:	4631      	mov	r1, r6
 8011f60:	4638      	mov	r0, r7
 8011f62:	eb04 0903 	add.w	r9, r4, r3
 8011f66:	f000 fe5d 	bl	8012c24 <_sbrk_r>
 8011f6a:	4581      	cmp	r9, r0
 8011f6c:	d13f      	bne.n	8011fee <_malloc_r+0xe6>
 8011f6e:	6821      	ldr	r1, [r4, #0]
 8011f70:	1a6d      	subs	r5, r5, r1
 8011f72:	4629      	mov	r1, r5
 8011f74:	4638      	mov	r0, r7
 8011f76:	f7ff ffa7 	bl	8011ec8 <sbrk_aligned>
 8011f7a:	3001      	adds	r0, #1
 8011f7c:	d037      	beq.n	8011fee <_malloc_r+0xe6>
 8011f7e:	6823      	ldr	r3, [r4, #0]
 8011f80:	442b      	add	r3, r5
 8011f82:	6023      	str	r3, [r4, #0]
 8011f84:	f8d8 3000 	ldr.w	r3, [r8]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d038      	beq.n	8011ffe <_malloc_r+0xf6>
 8011f8c:	685a      	ldr	r2, [r3, #4]
 8011f8e:	42a2      	cmp	r2, r4
 8011f90:	d12b      	bne.n	8011fea <_malloc_r+0xe2>
 8011f92:	2200      	movs	r2, #0
 8011f94:	605a      	str	r2, [r3, #4]
 8011f96:	e00f      	b.n	8011fb8 <_malloc_r+0xb0>
 8011f98:	6822      	ldr	r2, [r4, #0]
 8011f9a:	1b52      	subs	r2, r2, r5
 8011f9c:	d41f      	bmi.n	8011fde <_malloc_r+0xd6>
 8011f9e:	2a0b      	cmp	r2, #11
 8011fa0:	d917      	bls.n	8011fd2 <_malloc_r+0xca>
 8011fa2:	1961      	adds	r1, r4, r5
 8011fa4:	42a3      	cmp	r3, r4
 8011fa6:	6025      	str	r5, [r4, #0]
 8011fa8:	bf18      	it	ne
 8011faa:	6059      	strne	r1, [r3, #4]
 8011fac:	6863      	ldr	r3, [r4, #4]
 8011fae:	bf08      	it	eq
 8011fb0:	f8c8 1000 	streq.w	r1, [r8]
 8011fb4:	5162      	str	r2, [r4, r5]
 8011fb6:	604b      	str	r3, [r1, #4]
 8011fb8:	4638      	mov	r0, r7
 8011fba:	f104 060b 	add.w	r6, r4, #11
 8011fbe:	f000 f829 	bl	8012014 <__malloc_unlock>
 8011fc2:	f026 0607 	bic.w	r6, r6, #7
 8011fc6:	1d23      	adds	r3, r4, #4
 8011fc8:	1af2      	subs	r2, r6, r3
 8011fca:	d0ae      	beq.n	8011f2a <_malloc_r+0x22>
 8011fcc:	1b9b      	subs	r3, r3, r6
 8011fce:	50a3      	str	r3, [r4, r2]
 8011fd0:	e7ab      	b.n	8011f2a <_malloc_r+0x22>
 8011fd2:	42a3      	cmp	r3, r4
 8011fd4:	6862      	ldr	r2, [r4, #4]
 8011fd6:	d1dd      	bne.n	8011f94 <_malloc_r+0x8c>
 8011fd8:	f8c8 2000 	str.w	r2, [r8]
 8011fdc:	e7ec      	b.n	8011fb8 <_malloc_r+0xb0>
 8011fde:	4623      	mov	r3, r4
 8011fe0:	6864      	ldr	r4, [r4, #4]
 8011fe2:	e7ac      	b.n	8011f3e <_malloc_r+0x36>
 8011fe4:	4634      	mov	r4, r6
 8011fe6:	6876      	ldr	r6, [r6, #4]
 8011fe8:	e7b4      	b.n	8011f54 <_malloc_r+0x4c>
 8011fea:	4613      	mov	r3, r2
 8011fec:	e7cc      	b.n	8011f88 <_malloc_r+0x80>
 8011fee:	230c      	movs	r3, #12
 8011ff0:	603b      	str	r3, [r7, #0]
 8011ff2:	4638      	mov	r0, r7
 8011ff4:	f000 f80e 	bl	8012014 <__malloc_unlock>
 8011ff8:	e797      	b.n	8011f2a <_malloc_r+0x22>
 8011ffa:	6025      	str	r5, [r4, #0]
 8011ffc:	e7dc      	b.n	8011fb8 <_malloc_r+0xb0>
 8011ffe:	605b      	str	r3, [r3, #4]
 8012000:	deff      	udf	#255	; 0xff
 8012002:	bf00      	nop
 8012004:	2000ccb8 	.word	0x2000ccb8

08012008 <__malloc_lock>:
 8012008:	4801      	ldr	r0, [pc, #4]	; (8012010 <__malloc_lock+0x8>)
 801200a:	f7ff bef9 	b.w	8011e00 <__retarget_lock_acquire_recursive>
 801200e:	bf00      	nop
 8012010:	2000ccb4 	.word	0x2000ccb4

08012014 <__malloc_unlock>:
 8012014:	4801      	ldr	r0, [pc, #4]	; (801201c <__malloc_unlock+0x8>)
 8012016:	f7ff bef4 	b.w	8011e02 <__retarget_lock_release_recursive>
 801201a:	bf00      	nop
 801201c:	2000ccb4 	.word	0x2000ccb4

08012020 <__ssputs_r>:
 8012020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012024:	688e      	ldr	r6, [r1, #8]
 8012026:	461f      	mov	r7, r3
 8012028:	42be      	cmp	r6, r7
 801202a:	680b      	ldr	r3, [r1, #0]
 801202c:	4682      	mov	sl, r0
 801202e:	460c      	mov	r4, r1
 8012030:	4690      	mov	r8, r2
 8012032:	d82c      	bhi.n	801208e <__ssputs_r+0x6e>
 8012034:	898a      	ldrh	r2, [r1, #12]
 8012036:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801203a:	d026      	beq.n	801208a <__ssputs_r+0x6a>
 801203c:	6965      	ldr	r5, [r4, #20]
 801203e:	6909      	ldr	r1, [r1, #16]
 8012040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012044:	eba3 0901 	sub.w	r9, r3, r1
 8012048:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801204c:	1c7b      	adds	r3, r7, #1
 801204e:	444b      	add	r3, r9
 8012050:	106d      	asrs	r5, r5, #1
 8012052:	429d      	cmp	r5, r3
 8012054:	bf38      	it	cc
 8012056:	461d      	movcc	r5, r3
 8012058:	0553      	lsls	r3, r2, #21
 801205a:	d527      	bpl.n	80120ac <__ssputs_r+0x8c>
 801205c:	4629      	mov	r1, r5
 801205e:	f7ff ff53 	bl	8011f08 <_malloc_r>
 8012062:	4606      	mov	r6, r0
 8012064:	b360      	cbz	r0, 80120c0 <__ssputs_r+0xa0>
 8012066:	6921      	ldr	r1, [r4, #16]
 8012068:	464a      	mov	r2, r9
 801206a:	f7ff fecb 	bl	8011e04 <memcpy>
 801206e:	89a3      	ldrh	r3, [r4, #12]
 8012070:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012078:	81a3      	strh	r3, [r4, #12]
 801207a:	6126      	str	r6, [r4, #16]
 801207c:	6165      	str	r5, [r4, #20]
 801207e:	444e      	add	r6, r9
 8012080:	eba5 0509 	sub.w	r5, r5, r9
 8012084:	6026      	str	r6, [r4, #0]
 8012086:	60a5      	str	r5, [r4, #8]
 8012088:	463e      	mov	r6, r7
 801208a:	42be      	cmp	r6, r7
 801208c:	d900      	bls.n	8012090 <__ssputs_r+0x70>
 801208e:	463e      	mov	r6, r7
 8012090:	6820      	ldr	r0, [r4, #0]
 8012092:	4632      	mov	r2, r6
 8012094:	4641      	mov	r1, r8
 8012096:	f000 fd67 	bl	8012b68 <memmove>
 801209a:	68a3      	ldr	r3, [r4, #8]
 801209c:	1b9b      	subs	r3, r3, r6
 801209e:	60a3      	str	r3, [r4, #8]
 80120a0:	6823      	ldr	r3, [r4, #0]
 80120a2:	4433      	add	r3, r6
 80120a4:	6023      	str	r3, [r4, #0]
 80120a6:	2000      	movs	r0, #0
 80120a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120ac:	462a      	mov	r2, r5
 80120ae:	f000 fdc9 	bl	8012c44 <_realloc_r>
 80120b2:	4606      	mov	r6, r0
 80120b4:	2800      	cmp	r0, #0
 80120b6:	d1e0      	bne.n	801207a <__ssputs_r+0x5a>
 80120b8:	6921      	ldr	r1, [r4, #16]
 80120ba:	4650      	mov	r0, sl
 80120bc:	f7ff feb8 	bl	8011e30 <_free_r>
 80120c0:	230c      	movs	r3, #12
 80120c2:	f8ca 3000 	str.w	r3, [sl]
 80120c6:	89a3      	ldrh	r3, [r4, #12]
 80120c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120cc:	81a3      	strh	r3, [r4, #12]
 80120ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120d2:	e7e9      	b.n	80120a8 <__ssputs_r+0x88>

080120d4 <_svfiprintf_r>:
 80120d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d8:	4698      	mov	r8, r3
 80120da:	898b      	ldrh	r3, [r1, #12]
 80120dc:	061b      	lsls	r3, r3, #24
 80120de:	b09d      	sub	sp, #116	; 0x74
 80120e0:	4607      	mov	r7, r0
 80120e2:	460d      	mov	r5, r1
 80120e4:	4614      	mov	r4, r2
 80120e6:	d50e      	bpl.n	8012106 <_svfiprintf_r+0x32>
 80120e8:	690b      	ldr	r3, [r1, #16]
 80120ea:	b963      	cbnz	r3, 8012106 <_svfiprintf_r+0x32>
 80120ec:	2140      	movs	r1, #64	; 0x40
 80120ee:	f7ff ff0b 	bl	8011f08 <_malloc_r>
 80120f2:	6028      	str	r0, [r5, #0]
 80120f4:	6128      	str	r0, [r5, #16]
 80120f6:	b920      	cbnz	r0, 8012102 <_svfiprintf_r+0x2e>
 80120f8:	230c      	movs	r3, #12
 80120fa:	603b      	str	r3, [r7, #0]
 80120fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012100:	e0d0      	b.n	80122a4 <_svfiprintf_r+0x1d0>
 8012102:	2340      	movs	r3, #64	; 0x40
 8012104:	616b      	str	r3, [r5, #20]
 8012106:	2300      	movs	r3, #0
 8012108:	9309      	str	r3, [sp, #36]	; 0x24
 801210a:	2320      	movs	r3, #32
 801210c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012110:	f8cd 800c 	str.w	r8, [sp, #12]
 8012114:	2330      	movs	r3, #48	; 0x30
 8012116:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80122bc <_svfiprintf_r+0x1e8>
 801211a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801211e:	f04f 0901 	mov.w	r9, #1
 8012122:	4623      	mov	r3, r4
 8012124:	469a      	mov	sl, r3
 8012126:	f813 2b01 	ldrb.w	r2, [r3], #1
 801212a:	b10a      	cbz	r2, 8012130 <_svfiprintf_r+0x5c>
 801212c:	2a25      	cmp	r2, #37	; 0x25
 801212e:	d1f9      	bne.n	8012124 <_svfiprintf_r+0x50>
 8012130:	ebba 0b04 	subs.w	fp, sl, r4
 8012134:	d00b      	beq.n	801214e <_svfiprintf_r+0x7a>
 8012136:	465b      	mov	r3, fp
 8012138:	4622      	mov	r2, r4
 801213a:	4629      	mov	r1, r5
 801213c:	4638      	mov	r0, r7
 801213e:	f7ff ff6f 	bl	8012020 <__ssputs_r>
 8012142:	3001      	adds	r0, #1
 8012144:	f000 80a9 	beq.w	801229a <_svfiprintf_r+0x1c6>
 8012148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801214a:	445a      	add	r2, fp
 801214c:	9209      	str	r2, [sp, #36]	; 0x24
 801214e:	f89a 3000 	ldrb.w	r3, [sl]
 8012152:	2b00      	cmp	r3, #0
 8012154:	f000 80a1 	beq.w	801229a <_svfiprintf_r+0x1c6>
 8012158:	2300      	movs	r3, #0
 801215a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801215e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012162:	f10a 0a01 	add.w	sl, sl, #1
 8012166:	9304      	str	r3, [sp, #16]
 8012168:	9307      	str	r3, [sp, #28]
 801216a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801216e:	931a      	str	r3, [sp, #104]	; 0x68
 8012170:	4654      	mov	r4, sl
 8012172:	2205      	movs	r2, #5
 8012174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012178:	4850      	ldr	r0, [pc, #320]	; (80122bc <_svfiprintf_r+0x1e8>)
 801217a:	f7ee f8a1 	bl	80002c0 <memchr>
 801217e:	9a04      	ldr	r2, [sp, #16]
 8012180:	b9d8      	cbnz	r0, 80121ba <_svfiprintf_r+0xe6>
 8012182:	06d0      	lsls	r0, r2, #27
 8012184:	bf44      	itt	mi
 8012186:	2320      	movmi	r3, #32
 8012188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801218c:	0711      	lsls	r1, r2, #28
 801218e:	bf44      	itt	mi
 8012190:	232b      	movmi	r3, #43	; 0x2b
 8012192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012196:	f89a 3000 	ldrb.w	r3, [sl]
 801219a:	2b2a      	cmp	r3, #42	; 0x2a
 801219c:	d015      	beq.n	80121ca <_svfiprintf_r+0xf6>
 801219e:	9a07      	ldr	r2, [sp, #28]
 80121a0:	4654      	mov	r4, sl
 80121a2:	2000      	movs	r0, #0
 80121a4:	f04f 0c0a 	mov.w	ip, #10
 80121a8:	4621      	mov	r1, r4
 80121aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121ae:	3b30      	subs	r3, #48	; 0x30
 80121b0:	2b09      	cmp	r3, #9
 80121b2:	d94d      	bls.n	8012250 <_svfiprintf_r+0x17c>
 80121b4:	b1b0      	cbz	r0, 80121e4 <_svfiprintf_r+0x110>
 80121b6:	9207      	str	r2, [sp, #28]
 80121b8:	e014      	b.n	80121e4 <_svfiprintf_r+0x110>
 80121ba:	eba0 0308 	sub.w	r3, r0, r8
 80121be:	fa09 f303 	lsl.w	r3, r9, r3
 80121c2:	4313      	orrs	r3, r2
 80121c4:	9304      	str	r3, [sp, #16]
 80121c6:	46a2      	mov	sl, r4
 80121c8:	e7d2      	b.n	8012170 <_svfiprintf_r+0x9c>
 80121ca:	9b03      	ldr	r3, [sp, #12]
 80121cc:	1d19      	adds	r1, r3, #4
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	9103      	str	r1, [sp, #12]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	bfbb      	ittet	lt
 80121d6:	425b      	neglt	r3, r3
 80121d8:	f042 0202 	orrlt.w	r2, r2, #2
 80121dc:	9307      	strge	r3, [sp, #28]
 80121de:	9307      	strlt	r3, [sp, #28]
 80121e0:	bfb8      	it	lt
 80121e2:	9204      	strlt	r2, [sp, #16]
 80121e4:	7823      	ldrb	r3, [r4, #0]
 80121e6:	2b2e      	cmp	r3, #46	; 0x2e
 80121e8:	d10c      	bne.n	8012204 <_svfiprintf_r+0x130>
 80121ea:	7863      	ldrb	r3, [r4, #1]
 80121ec:	2b2a      	cmp	r3, #42	; 0x2a
 80121ee:	d134      	bne.n	801225a <_svfiprintf_r+0x186>
 80121f0:	9b03      	ldr	r3, [sp, #12]
 80121f2:	1d1a      	adds	r2, r3, #4
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	9203      	str	r2, [sp, #12]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	bfb8      	it	lt
 80121fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012200:	3402      	adds	r4, #2
 8012202:	9305      	str	r3, [sp, #20]
 8012204:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80122cc <_svfiprintf_r+0x1f8>
 8012208:	7821      	ldrb	r1, [r4, #0]
 801220a:	2203      	movs	r2, #3
 801220c:	4650      	mov	r0, sl
 801220e:	f7ee f857 	bl	80002c0 <memchr>
 8012212:	b138      	cbz	r0, 8012224 <_svfiprintf_r+0x150>
 8012214:	9b04      	ldr	r3, [sp, #16]
 8012216:	eba0 000a 	sub.w	r0, r0, sl
 801221a:	2240      	movs	r2, #64	; 0x40
 801221c:	4082      	lsls	r2, r0
 801221e:	4313      	orrs	r3, r2
 8012220:	3401      	adds	r4, #1
 8012222:	9304      	str	r3, [sp, #16]
 8012224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012228:	4825      	ldr	r0, [pc, #148]	; (80122c0 <_svfiprintf_r+0x1ec>)
 801222a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801222e:	2206      	movs	r2, #6
 8012230:	f7ee f846 	bl	80002c0 <memchr>
 8012234:	2800      	cmp	r0, #0
 8012236:	d038      	beq.n	80122aa <_svfiprintf_r+0x1d6>
 8012238:	4b22      	ldr	r3, [pc, #136]	; (80122c4 <_svfiprintf_r+0x1f0>)
 801223a:	bb1b      	cbnz	r3, 8012284 <_svfiprintf_r+0x1b0>
 801223c:	9b03      	ldr	r3, [sp, #12]
 801223e:	3307      	adds	r3, #7
 8012240:	f023 0307 	bic.w	r3, r3, #7
 8012244:	3308      	adds	r3, #8
 8012246:	9303      	str	r3, [sp, #12]
 8012248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801224a:	4433      	add	r3, r6
 801224c:	9309      	str	r3, [sp, #36]	; 0x24
 801224e:	e768      	b.n	8012122 <_svfiprintf_r+0x4e>
 8012250:	fb0c 3202 	mla	r2, ip, r2, r3
 8012254:	460c      	mov	r4, r1
 8012256:	2001      	movs	r0, #1
 8012258:	e7a6      	b.n	80121a8 <_svfiprintf_r+0xd4>
 801225a:	2300      	movs	r3, #0
 801225c:	3401      	adds	r4, #1
 801225e:	9305      	str	r3, [sp, #20]
 8012260:	4619      	mov	r1, r3
 8012262:	f04f 0c0a 	mov.w	ip, #10
 8012266:	4620      	mov	r0, r4
 8012268:	f810 2b01 	ldrb.w	r2, [r0], #1
 801226c:	3a30      	subs	r2, #48	; 0x30
 801226e:	2a09      	cmp	r2, #9
 8012270:	d903      	bls.n	801227a <_svfiprintf_r+0x1a6>
 8012272:	2b00      	cmp	r3, #0
 8012274:	d0c6      	beq.n	8012204 <_svfiprintf_r+0x130>
 8012276:	9105      	str	r1, [sp, #20]
 8012278:	e7c4      	b.n	8012204 <_svfiprintf_r+0x130>
 801227a:	fb0c 2101 	mla	r1, ip, r1, r2
 801227e:	4604      	mov	r4, r0
 8012280:	2301      	movs	r3, #1
 8012282:	e7f0      	b.n	8012266 <_svfiprintf_r+0x192>
 8012284:	ab03      	add	r3, sp, #12
 8012286:	9300      	str	r3, [sp, #0]
 8012288:	462a      	mov	r2, r5
 801228a:	4b0f      	ldr	r3, [pc, #60]	; (80122c8 <_svfiprintf_r+0x1f4>)
 801228c:	a904      	add	r1, sp, #16
 801228e:	4638      	mov	r0, r7
 8012290:	f3af 8000 	nop.w
 8012294:	1c42      	adds	r2, r0, #1
 8012296:	4606      	mov	r6, r0
 8012298:	d1d6      	bne.n	8012248 <_svfiprintf_r+0x174>
 801229a:	89ab      	ldrh	r3, [r5, #12]
 801229c:	065b      	lsls	r3, r3, #25
 801229e:	f53f af2d 	bmi.w	80120fc <_svfiprintf_r+0x28>
 80122a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122a4:	b01d      	add	sp, #116	; 0x74
 80122a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122aa:	ab03      	add	r3, sp, #12
 80122ac:	9300      	str	r3, [sp, #0]
 80122ae:	462a      	mov	r2, r5
 80122b0:	4b05      	ldr	r3, [pc, #20]	; (80122c8 <_svfiprintf_r+0x1f4>)
 80122b2:	a904      	add	r1, sp, #16
 80122b4:	4638      	mov	r0, r7
 80122b6:	f000 f9bd 	bl	8012634 <_printf_i>
 80122ba:	e7eb      	b.n	8012294 <_svfiprintf_r+0x1c0>
 80122bc:	08016b8a 	.word	0x08016b8a
 80122c0:	08016b94 	.word	0x08016b94
 80122c4:	00000000 	.word	0x00000000
 80122c8:	08012021 	.word	0x08012021
 80122cc:	08016b90 	.word	0x08016b90

080122d0 <__sfputc_r>:
 80122d0:	6893      	ldr	r3, [r2, #8]
 80122d2:	3b01      	subs	r3, #1
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	b410      	push	{r4}
 80122d8:	6093      	str	r3, [r2, #8]
 80122da:	da08      	bge.n	80122ee <__sfputc_r+0x1e>
 80122dc:	6994      	ldr	r4, [r2, #24]
 80122de:	42a3      	cmp	r3, r4
 80122e0:	db01      	blt.n	80122e6 <__sfputc_r+0x16>
 80122e2:	290a      	cmp	r1, #10
 80122e4:	d103      	bne.n	80122ee <__sfputc_r+0x1e>
 80122e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122ea:	f000 bba7 	b.w	8012a3c <__swbuf_r>
 80122ee:	6813      	ldr	r3, [r2, #0]
 80122f0:	1c58      	adds	r0, r3, #1
 80122f2:	6010      	str	r0, [r2, #0]
 80122f4:	7019      	strb	r1, [r3, #0]
 80122f6:	4608      	mov	r0, r1
 80122f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122fc:	4770      	bx	lr

080122fe <__sfputs_r>:
 80122fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012300:	4606      	mov	r6, r0
 8012302:	460f      	mov	r7, r1
 8012304:	4614      	mov	r4, r2
 8012306:	18d5      	adds	r5, r2, r3
 8012308:	42ac      	cmp	r4, r5
 801230a:	d101      	bne.n	8012310 <__sfputs_r+0x12>
 801230c:	2000      	movs	r0, #0
 801230e:	e007      	b.n	8012320 <__sfputs_r+0x22>
 8012310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012314:	463a      	mov	r2, r7
 8012316:	4630      	mov	r0, r6
 8012318:	f7ff ffda 	bl	80122d0 <__sfputc_r>
 801231c:	1c43      	adds	r3, r0, #1
 801231e:	d1f3      	bne.n	8012308 <__sfputs_r+0xa>
 8012320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012324 <_vfiprintf_r>:
 8012324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012328:	460d      	mov	r5, r1
 801232a:	b09d      	sub	sp, #116	; 0x74
 801232c:	4614      	mov	r4, r2
 801232e:	4698      	mov	r8, r3
 8012330:	4606      	mov	r6, r0
 8012332:	b118      	cbz	r0, 801233c <_vfiprintf_r+0x18>
 8012334:	6a03      	ldr	r3, [r0, #32]
 8012336:	b90b      	cbnz	r3, 801233c <_vfiprintf_r+0x18>
 8012338:	f7ff fbb8 	bl	8011aac <__sinit>
 801233c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801233e:	07d9      	lsls	r1, r3, #31
 8012340:	d405      	bmi.n	801234e <_vfiprintf_r+0x2a>
 8012342:	89ab      	ldrh	r3, [r5, #12]
 8012344:	059a      	lsls	r2, r3, #22
 8012346:	d402      	bmi.n	801234e <_vfiprintf_r+0x2a>
 8012348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801234a:	f7ff fd59 	bl	8011e00 <__retarget_lock_acquire_recursive>
 801234e:	89ab      	ldrh	r3, [r5, #12]
 8012350:	071b      	lsls	r3, r3, #28
 8012352:	d501      	bpl.n	8012358 <_vfiprintf_r+0x34>
 8012354:	692b      	ldr	r3, [r5, #16]
 8012356:	b99b      	cbnz	r3, 8012380 <_vfiprintf_r+0x5c>
 8012358:	4629      	mov	r1, r5
 801235a:	4630      	mov	r0, r6
 801235c:	f000 fbac 	bl	8012ab8 <__swsetup_r>
 8012360:	b170      	cbz	r0, 8012380 <_vfiprintf_r+0x5c>
 8012362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012364:	07dc      	lsls	r4, r3, #31
 8012366:	d504      	bpl.n	8012372 <_vfiprintf_r+0x4e>
 8012368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801236c:	b01d      	add	sp, #116	; 0x74
 801236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012372:	89ab      	ldrh	r3, [r5, #12]
 8012374:	0598      	lsls	r0, r3, #22
 8012376:	d4f7      	bmi.n	8012368 <_vfiprintf_r+0x44>
 8012378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801237a:	f7ff fd42 	bl	8011e02 <__retarget_lock_release_recursive>
 801237e:	e7f3      	b.n	8012368 <_vfiprintf_r+0x44>
 8012380:	2300      	movs	r3, #0
 8012382:	9309      	str	r3, [sp, #36]	; 0x24
 8012384:	2320      	movs	r3, #32
 8012386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801238a:	f8cd 800c 	str.w	r8, [sp, #12]
 801238e:	2330      	movs	r3, #48	; 0x30
 8012390:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012544 <_vfiprintf_r+0x220>
 8012394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012398:	f04f 0901 	mov.w	r9, #1
 801239c:	4623      	mov	r3, r4
 801239e:	469a      	mov	sl, r3
 80123a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123a4:	b10a      	cbz	r2, 80123aa <_vfiprintf_r+0x86>
 80123a6:	2a25      	cmp	r2, #37	; 0x25
 80123a8:	d1f9      	bne.n	801239e <_vfiprintf_r+0x7a>
 80123aa:	ebba 0b04 	subs.w	fp, sl, r4
 80123ae:	d00b      	beq.n	80123c8 <_vfiprintf_r+0xa4>
 80123b0:	465b      	mov	r3, fp
 80123b2:	4622      	mov	r2, r4
 80123b4:	4629      	mov	r1, r5
 80123b6:	4630      	mov	r0, r6
 80123b8:	f7ff ffa1 	bl	80122fe <__sfputs_r>
 80123bc:	3001      	adds	r0, #1
 80123be:	f000 80a9 	beq.w	8012514 <_vfiprintf_r+0x1f0>
 80123c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123c4:	445a      	add	r2, fp
 80123c6:	9209      	str	r2, [sp, #36]	; 0x24
 80123c8:	f89a 3000 	ldrb.w	r3, [sl]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	f000 80a1 	beq.w	8012514 <_vfiprintf_r+0x1f0>
 80123d2:	2300      	movs	r3, #0
 80123d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80123d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123dc:	f10a 0a01 	add.w	sl, sl, #1
 80123e0:	9304      	str	r3, [sp, #16]
 80123e2:	9307      	str	r3, [sp, #28]
 80123e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80123e8:	931a      	str	r3, [sp, #104]	; 0x68
 80123ea:	4654      	mov	r4, sl
 80123ec:	2205      	movs	r2, #5
 80123ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123f2:	4854      	ldr	r0, [pc, #336]	; (8012544 <_vfiprintf_r+0x220>)
 80123f4:	f7ed ff64 	bl	80002c0 <memchr>
 80123f8:	9a04      	ldr	r2, [sp, #16]
 80123fa:	b9d8      	cbnz	r0, 8012434 <_vfiprintf_r+0x110>
 80123fc:	06d1      	lsls	r1, r2, #27
 80123fe:	bf44      	itt	mi
 8012400:	2320      	movmi	r3, #32
 8012402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012406:	0713      	lsls	r3, r2, #28
 8012408:	bf44      	itt	mi
 801240a:	232b      	movmi	r3, #43	; 0x2b
 801240c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012410:	f89a 3000 	ldrb.w	r3, [sl]
 8012414:	2b2a      	cmp	r3, #42	; 0x2a
 8012416:	d015      	beq.n	8012444 <_vfiprintf_r+0x120>
 8012418:	9a07      	ldr	r2, [sp, #28]
 801241a:	4654      	mov	r4, sl
 801241c:	2000      	movs	r0, #0
 801241e:	f04f 0c0a 	mov.w	ip, #10
 8012422:	4621      	mov	r1, r4
 8012424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012428:	3b30      	subs	r3, #48	; 0x30
 801242a:	2b09      	cmp	r3, #9
 801242c:	d94d      	bls.n	80124ca <_vfiprintf_r+0x1a6>
 801242e:	b1b0      	cbz	r0, 801245e <_vfiprintf_r+0x13a>
 8012430:	9207      	str	r2, [sp, #28]
 8012432:	e014      	b.n	801245e <_vfiprintf_r+0x13a>
 8012434:	eba0 0308 	sub.w	r3, r0, r8
 8012438:	fa09 f303 	lsl.w	r3, r9, r3
 801243c:	4313      	orrs	r3, r2
 801243e:	9304      	str	r3, [sp, #16]
 8012440:	46a2      	mov	sl, r4
 8012442:	e7d2      	b.n	80123ea <_vfiprintf_r+0xc6>
 8012444:	9b03      	ldr	r3, [sp, #12]
 8012446:	1d19      	adds	r1, r3, #4
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	9103      	str	r1, [sp, #12]
 801244c:	2b00      	cmp	r3, #0
 801244e:	bfbb      	ittet	lt
 8012450:	425b      	neglt	r3, r3
 8012452:	f042 0202 	orrlt.w	r2, r2, #2
 8012456:	9307      	strge	r3, [sp, #28]
 8012458:	9307      	strlt	r3, [sp, #28]
 801245a:	bfb8      	it	lt
 801245c:	9204      	strlt	r2, [sp, #16]
 801245e:	7823      	ldrb	r3, [r4, #0]
 8012460:	2b2e      	cmp	r3, #46	; 0x2e
 8012462:	d10c      	bne.n	801247e <_vfiprintf_r+0x15a>
 8012464:	7863      	ldrb	r3, [r4, #1]
 8012466:	2b2a      	cmp	r3, #42	; 0x2a
 8012468:	d134      	bne.n	80124d4 <_vfiprintf_r+0x1b0>
 801246a:	9b03      	ldr	r3, [sp, #12]
 801246c:	1d1a      	adds	r2, r3, #4
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	9203      	str	r2, [sp, #12]
 8012472:	2b00      	cmp	r3, #0
 8012474:	bfb8      	it	lt
 8012476:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801247a:	3402      	adds	r4, #2
 801247c:	9305      	str	r3, [sp, #20]
 801247e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012554 <_vfiprintf_r+0x230>
 8012482:	7821      	ldrb	r1, [r4, #0]
 8012484:	2203      	movs	r2, #3
 8012486:	4650      	mov	r0, sl
 8012488:	f7ed ff1a 	bl	80002c0 <memchr>
 801248c:	b138      	cbz	r0, 801249e <_vfiprintf_r+0x17a>
 801248e:	9b04      	ldr	r3, [sp, #16]
 8012490:	eba0 000a 	sub.w	r0, r0, sl
 8012494:	2240      	movs	r2, #64	; 0x40
 8012496:	4082      	lsls	r2, r0
 8012498:	4313      	orrs	r3, r2
 801249a:	3401      	adds	r4, #1
 801249c:	9304      	str	r3, [sp, #16]
 801249e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124a2:	4829      	ldr	r0, [pc, #164]	; (8012548 <_vfiprintf_r+0x224>)
 80124a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124a8:	2206      	movs	r2, #6
 80124aa:	f7ed ff09 	bl	80002c0 <memchr>
 80124ae:	2800      	cmp	r0, #0
 80124b0:	d03f      	beq.n	8012532 <_vfiprintf_r+0x20e>
 80124b2:	4b26      	ldr	r3, [pc, #152]	; (801254c <_vfiprintf_r+0x228>)
 80124b4:	bb1b      	cbnz	r3, 80124fe <_vfiprintf_r+0x1da>
 80124b6:	9b03      	ldr	r3, [sp, #12]
 80124b8:	3307      	adds	r3, #7
 80124ba:	f023 0307 	bic.w	r3, r3, #7
 80124be:	3308      	adds	r3, #8
 80124c0:	9303      	str	r3, [sp, #12]
 80124c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124c4:	443b      	add	r3, r7
 80124c6:	9309      	str	r3, [sp, #36]	; 0x24
 80124c8:	e768      	b.n	801239c <_vfiprintf_r+0x78>
 80124ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80124ce:	460c      	mov	r4, r1
 80124d0:	2001      	movs	r0, #1
 80124d2:	e7a6      	b.n	8012422 <_vfiprintf_r+0xfe>
 80124d4:	2300      	movs	r3, #0
 80124d6:	3401      	adds	r4, #1
 80124d8:	9305      	str	r3, [sp, #20]
 80124da:	4619      	mov	r1, r3
 80124dc:	f04f 0c0a 	mov.w	ip, #10
 80124e0:	4620      	mov	r0, r4
 80124e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124e6:	3a30      	subs	r2, #48	; 0x30
 80124e8:	2a09      	cmp	r2, #9
 80124ea:	d903      	bls.n	80124f4 <_vfiprintf_r+0x1d0>
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d0c6      	beq.n	801247e <_vfiprintf_r+0x15a>
 80124f0:	9105      	str	r1, [sp, #20]
 80124f2:	e7c4      	b.n	801247e <_vfiprintf_r+0x15a>
 80124f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80124f8:	4604      	mov	r4, r0
 80124fa:	2301      	movs	r3, #1
 80124fc:	e7f0      	b.n	80124e0 <_vfiprintf_r+0x1bc>
 80124fe:	ab03      	add	r3, sp, #12
 8012500:	9300      	str	r3, [sp, #0]
 8012502:	462a      	mov	r2, r5
 8012504:	4b12      	ldr	r3, [pc, #72]	; (8012550 <_vfiprintf_r+0x22c>)
 8012506:	a904      	add	r1, sp, #16
 8012508:	4630      	mov	r0, r6
 801250a:	f3af 8000 	nop.w
 801250e:	4607      	mov	r7, r0
 8012510:	1c78      	adds	r0, r7, #1
 8012512:	d1d6      	bne.n	80124c2 <_vfiprintf_r+0x19e>
 8012514:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012516:	07d9      	lsls	r1, r3, #31
 8012518:	d405      	bmi.n	8012526 <_vfiprintf_r+0x202>
 801251a:	89ab      	ldrh	r3, [r5, #12]
 801251c:	059a      	lsls	r2, r3, #22
 801251e:	d402      	bmi.n	8012526 <_vfiprintf_r+0x202>
 8012520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012522:	f7ff fc6e 	bl	8011e02 <__retarget_lock_release_recursive>
 8012526:	89ab      	ldrh	r3, [r5, #12]
 8012528:	065b      	lsls	r3, r3, #25
 801252a:	f53f af1d 	bmi.w	8012368 <_vfiprintf_r+0x44>
 801252e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012530:	e71c      	b.n	801236c <_vfiprintf_r+0x48>
 8012532:	ab03      	add	r3, sp, #12
 8012534:	9300      	str	r3, [sp, #0]
 8012536:	462a      	mov	r2, r5
 8012538:	4b05      	ldr	r3, [pc, #20]	; (8012550 <_vfiprintf_r+0x22c>)
 801253a:	a904      	add	r1, sp, #16
 801253c:	4630      	mov	r0, r6
 801253e:	f000 f879 	bl	8012634 <_printf_i>
 8012542:	e7e4      	b.n	801250e <_vfiprintf_r+0x1ea>
 8012544:	08016b8a 	.word	0x08016b8a
 8012548:	08016b94 	.word	0x08016b94
 801254c:	00000000 	.word	0x00000000
 8012550:	080122ff 	.word	0x080122ff
 8012554:	08016b90 	.word	0x08016b90

08012558 <_printf_common>:
 8012558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801255c:	4616      	mov	r6, r2
 801255e:	4699      	mov	r9, r3
 8012560:	688a      	ldr	r2, [r1, #8]
 8012562:	690b      	ldr	r3, [r1, #16]
 8012564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012568:	4293      	cmp	r3, r2
 801256a:	bfb8      	it	lt
 801256c:	4613      	movlt	r3, r2
 801256e:	6033      	str	r3, [r6, #0]
 8012570:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012574:	4607      	mov	r7, r0
 8012576:	460c      	mov	r4, r1
 8012578:	b10a      	cbz	r2, 801257e <_printf_common+0x26>
 801257a:	3301      	adds	r3, #1
 801257c:	6033      	str	r3, [r6, #0]
 801257e:	6823      	ldr	r3, [r4, #0]
 8012580:	0699      	lsls	r1, r3, #26
 8012582:	bf42      	ittt	mi
 8012584:	6833      	ldrmi	r3, [r6, #0]
 8012586:	3302      	addmi	r3, #2
 8012588:	6033      	strmi	r3, [r6, #0]
 801258a:	6825      	ldr	r5, [r4, #0]
 801258c:	f015 0506 	ands.w	r5, r5, #6
 8012590:	d106      	bne.n	80125a0 <_printf_common+0x48>
 8012592:	f104 0a19 	add.w	sl, r4, #25
 8012596:	68e3      	ldr	r3, [r4, #12]
 8012598:	6832      	ldr	r2, [r6, #0]
 801259a:	1a9b      	subs	r3, r3, r2
 801259c:	42ab      	cmp	r3, r5
 801259e:	dc26      	bgt.n	80125ee <_printf_common+0x96>
 80125a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80125a4:	1e13      	subs	r3, r2, #0
 80125a6:	6822      	ldr	r2, [r4, #0]
 80125a8:	bf18      	it	ne
 80125aa:	2301      	movne	r3, #1
 80125ac:	0692      	lsls	r2, r2, #26
 80125ae:	d42b      	bmi.n	8012608 <_printf_common+0xb0>
 80125b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80125b4:	4649      	mov	r1, r9
 80125b6:	4638      	mov	r0, r7
 80125b8:	47c0      	blx	r8
 80125ba:	3001      	adds	r0, #1
 80125bc:	d01e      	beq.n	80125fc <_printf_common+0xa4>
 80125be:	6823      	ldr	r3, [r4, #0]
 80125c0:	6922      	ldr	r2, [r4, #16]
 80125c2:	f003 0306 	and.w	r3, r3, #6
 80125c6:	2b04      	cmp	r3, #4
 80125c8:	bf02      	ittt	eq
 80125ca:	68e5      	ldreq	r5, [r4, #12]
 80125cc:	6833      	ldreq	r3, [r6, #0]
 80125ce:	1aed      	subeq	r5, r5, r3
 80125d0:	68a3      	ldr	r3, [r4, #8]
 80125d2:	bf0c      	ite	eq
 80125d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80125d8:	2500      	movne	r5, #0
 80125da:	4293      	cmp	r3, r2
 80125dc:	bfc4      	itt	gt
 80125de:	1a9b      	subgt	r3, r3, r2
 80125e0:	18ed      	addgt	r5, r5, r3
 80125e2:	2600      	movs	r6, #0
 80125e4:	341a      	adds	r4, #26
 80125e6:	42b5      	cmp	r5, r6
 80125e8:	d11a      	bne.n	8012620 <_printf_common+0xc8>
 80125ea:	2000      	movs	r0, #0
 80125ec:	e008      	b.n	8012600 <_printf_common+0xa8>
 80125ee:	2301      	movs	r3, #1
 80125f0:	4652      	mov	r2, sl
 80125f2:	4649      	mov	r1, r9
 80125f4:	4638      	mov	r0, r7
 80125f6:	47c0      	blx	r8
 80125f8:	3001      	adds	r0, #1
 80125fa:	d103      	bne.n	8012604 <_printf_common+0xac>
 80125fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012604:	3501      	adds	r5, #1
 8012606:	e7c6      	b.n	8012596 <_printf_common+0x3e>
 8012608:	18e1      	adds	r1, r4, r3
 801260a:	1c5a      	adds	r2, r3, #1
 801260c:	2030      	movs	r0, #48	; 0x30
 801260e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012612:	4422      	add	r2, r4
 8012614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801261c:	3302      	adds	r3, #2
 801261e:	e7c7      	b.n	80125b0 <_printf_common+0x58>
 8012620:	2301      	movs	r3, #1
 8012622:	4622      	mov	r2, r4
 8012624:	4649      	mov	r1, r9
 8012626:	4638      	mov	r0, r7
 8012628:	47c0      	blx	r8
 801262a:	3001      	adds	r0, #1
 801262c:	d0e6      	beq.n	80125fc <_printf_common+0xa4>
 801262e:	3601      	adds	r6, #1
 8012630:	e7d9      	b.n	80125e6 <_printf_common+0x8e>
	...

08012634 <_printf_i>:
 8012634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012638:	7e0f      	ldrb	r7, [r1, #24]
 801263a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801263c:	2f78      	cmp	r7, #120	; 0x78
 801263e:	4691      	mov	r9, r2
 8012640:	4680      	mov	r8, r0
 8012642:	460c      	mov	r4, r1
 8012644:	469a      	mov	sl, r3
 8012646:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801264a:	d807      	bhi.n	801265c <_printf_i+0x28>
 801264c:	2f62      	cmp	r7, #98	; 0x62
 801264e:	d80a      	bhi.n	8012666 <_printf_i+0x32>
 8012650:	2f00      	cmp	r7, #0
 8012652:	f000 80d4 	beq.w	80127fe <_printf_i+0x1ca>
 8012656:	2f58      	cmp	r7, #88	; 0x58
 8012658:	f000 80c0 	beq.w	80127dc <_printf_i+0x1a8>
 801265c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012660:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012664:	e03a      	b.n	80126dc <_printf_i+0xa8>
 8012666:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801266a:	2b15      	cmp	r3, #21
 801266c:	d8f6      	bhi.n	801265c <_printf_i+0x28>
 801266e:	a101      	add	r1, pc, #4	; (adr r1, 8012674 <_printf_i+0x40>)
 8012670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012674:	080126cd 	.word	0x080126cd
 8012678:	080126e1 	.word	0x080126e1
 801267c:	0801265d 	.word	0x0801265d
 8012680:	0801265d 	.word	0x0801265d
 8012684:	0801265d 	.word	0x0801265d
 8012688:	0801265d 	.word	0x0801265d
 801268c:	080126e1 	.word	0x080126e1
 8012690:	0801265d 	.word	0x0801265d
 8012694:	0801265d 	.word	0x0801265d
 8012698:	0801265d 	.word	0x0801265d
 801269c:	0801265d 	.word	0x0801265d
 80126a0:	080127e5 	.word	0x080127e5
 80126a4:	0801270d 	.word	0x0801270d
 80126a8:	0801279f 	.word	0x0801279f
 80126ac:	0801265d 	.word	0x0801265d
 80126b0:	0801265d 	.word	0x0801265d
 80126b4:	08012807 	.word	0x08012807
 80126b8:	0801265d 	.word	0x0801265d
 80126bc:	0801270d 	.word	0x0801270d
 80126c0:	0801265d 	.word	0x0801265d
 80126c4:	0801265d 	.word	0x0801265d
 80126c8:	080127a7 	.word	0x080127a7
 80126cc:	682b      	ldr	r3, [r5, #0]
 80126ce:	1d1a      	adds	r2, r3, #4
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	602a      	str	r2, [r5, #0]
 80126d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80126d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80126dc:	2301      	movs	r3, #1
 80126de:	e09f      	b.n	8012820 <_printf_i+0x1ec>
 80126e0:	6820      	ldr	r0, [r4, #0]
 80126e2:	682b      	ldr	r3, [r5, #0]
 80126e4:	0607      	lsls	r7, r0, #24
 80126e6:	f103 0104 	add.w	r1, r3, #4
 80126ea:	6029      	str	r1, [r5, #0]
 80126ec:	d501      	bpl.n	80126f2 <_printf_i+0xbe>
 80126ee:	681e      	ldr	r6, [r3, #0]
 80126f0:	e003      	b.n	80126fa <_printf_i+0xc6>
 80126f2:	0646      	lsls	r6, r0, #25
 80126f4:	d5fb      	bpl.n	80126ee <_printf_i+0xba>
 80126f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80126fa:	2e00      	cmp	r6, #0
 80126fc:	da03      	bge.n	8012706 <_printf_i+0xd2>
 80126fe:	232d      	movs	r3, #45	; 0x2d
 8012700:	4276      	negs	r6, r6
 8012702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012706:	485a      	ldr	r0, [pc, #360]	; (8012870 <_printf_i+0x23c>)
 8012708:	230a      	movs	r3, #10
 801270a:	e012      	b.n	8012732 <_printf_i+0xfe>
 801270c:	682b      	ldr	r3, [r5, #0]
 801270e:	6820      	ldr	r0, [r4, #0]
 8012710:	1d19      	adds	r1, r3, #4
 8012712:	6029      	str	r1, [r5, #0]
 8012714:	0605      	lsls	r5, r0, #24
 8012716:	d501      	bpl.n	801271c <_printf_i+0xe8>
 8012718:	681e      	ldr	r6, [r3, #0]
 801271a:	e002      	b.n	8012722 <_printf_i+0xee>
 801271c:	0641      	lsls	r1, r0, #25
 801271e:	d5fb      	bpl.n	8012718 <_printf_i+0xe4>
 8012720:	881e      	ldrh	r6, [r3, #0]
 8012722:	4853      	ldr	r0, [pc, #332]	; (8012870 <_printf_i+0x23c>)
 8012724:	2f6f      	cmp	r7, #111	; 0x6f
 8012726:	bf0c      	ite	eq
 8012728:	2308      	moveq	r3, #8
 801272a:	230a      	movne	r3, #10
 801272c:	2100      	movs	r1, #0
 801272e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012732:	6865      	ldr	r5, [r4, #4]
 8012734:	60a5      	str	r5, [r4, #8]
 8012736:	2d00      	cmp	r5, #0
 8012738:	bfa2      	ittt	ge
 801273a:	6821      	ldrge	r1, [r4, #0]
 801273c:	f021 0104 	bicge.w	r1, r1, #4
 8012740:	6021      	strge	r1, [r4, #0]
 8012742:	b90e      	cbnz	r6, 8012748 <_printf_i+0x114>
 8012744:	2d00      	cmp	r5, #0
 8012746:	d04b      	beq.n	80127e0 <_printf_i+0x1ac>
 8012748:	4615      	mov	r5, r2
 801274a:	fbb6 f1f3 	udiv	r1, r6, r3
 801274e:	fb03 6711 	mls	r7, r3, r1, r6
 8012752:	5dc7      	ldrb	r7, [r0, r7]
 8012754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012758:	4637      	mov	r7, r6
 801275a:	42bb      	cmp	r3, r7
 801275c:	460e      	mov	r6, r1
 801275e:	d9f4      	bls.n	801274a <_printf_i+0x116>
 8012760:	2b08      	cmp	r3, #8
 8012762:	d10b      	bne.n	801277c <_printf_i+0x148>
 8012764:	6823      	ldr	r3, [r4, #0]
 8012766:	07de      	lsls	r6, r3, #31
 8012768:	d508      	bpl.n	801277c <_printf_i+0x148>
 801276a:	6923      	ldr	r3, [r4, #16]
 801276c:	6861      	ldr	r1, [r4, #4]
 801276e:	4299      	cmp	r1, r3
 8012770:	bfde      	ittt	le
 8012772:	2330      	movle	r3, #48	; 0x30
 8012774:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012778:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801277c:	1b52      	subs	r2, r2, r5
 801277e:	6122      	str	r2, [r4, #16]
 8012780:	f8cd a000 	str.w	sl, [sp]
 8012784:	464b      	mov	r3, r9
 8012786:	aa03      	add	r2, sp, #12
 8012788:	4621      	mov	r1, r4
 801278a:	4640      	mov	r0, r8
 801278c:	f7ff fee4 	bl	8012558 <_printf_common>
 8012790:	3001      	adds	r0, #1
 8012792:	d14a      	bne.n	801282a <_printf_i+0x1f6>
 8012794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012798:	b004      	add	sp, #16
 801279a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801279e:	6823      	ldr	r3, [r4, #0]
 80127a0:	f043 0320 	orr.w	r3, r3, #32
 80127a4:	6023      	str	r3, [r4, #0]
 80127a6:	4833      	ldr	r0, [pc, #204]	; (8012874 <_printf_i+0x240>)
 80127a8:	2778      	movs	r7, #120	; 0x78
 80127aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80127ae:	6823      	ldr	r3, [r4, #0]
 80127b0:	6829      	ldr	r1, [r5, #0]
 80127b2:	061f      	lsls	r7, r3, #24
 80127b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80127b8:	d402      	bmi.n	80127c0 <_printf_i+0x18c>
 80127ba:	065f      	lsls	r7, r3, #25
 80127bc:	bf48      	it	mi
 80127be:	b2b6      	uxthmi	r6, r6
 80127c0:	07df      	lsls	r7, r3, #31
 80127c2:	bf48      	it	mi
 80127c4:	f043 0320 	orrmi.w	r3, r3, #32
 80127c8:	6029      	str	r1, [r5, #0]
 80127ca:	bf48      	it	mi
 80127cc:	6023      	strmi	r3, [r4, #0]
 80127ce:	b91e      	cbnz	r6, 80127d8 <_printf_i+0x1a4>
 80127d0:	6823      	ldr	r3, [r4, #0]
 80127d2:	f023 0320 	bic.w	r3, r3, #32
 80127d6:	6023      	str	r3, [r4, #0]
 80127d8:	2310      	movs	r3, #16
 80127da:	e7a7      	b.n	801272c <_printf_i+0xf8>
 80127dc:	4824      	ldr	r0, [pc, #144]	; (8012870 <_printf_i+0x23c>)
 80127de:	e7e4      	b.n	80127aa <_printf_i+0x176>
 80127e0:	4615      	mov	r5, r2
 80127e2:	e7bd      	b.n	8012760 <_printf_i+0x12c>
 80127e4:	682b      	ldr	r3, [r5, #0]
 80127e6:	6826      	ldr	r6, [r4, #0]
 80127e8:	6961      	ldr	r1, [r4, #20]
 80127ea:	1d18      	adds	r0, r3, #4
 80127ec:	6028      	str	r0, [r5, #0]
 80127ee:	0635      	lsls	r5, r6, #24
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	d501      	bpl.n	80127f8 <_printf_i+0x1c4>
 80127f4:	6019      	str	r1, [r3, #0]
 80127f6:	e002      	b.n	80127fe <_printf_i+0x1ca>
 80127f8:	0670      	lsls	r0, r6, #25
 80127fa:	d5fb      	bpl.n	80127f4 <_printf_i+0x1c0>
 80127fc:	8019      	strh	r1, [r3, #0]
 80127fe:	2300      	movs	r3, #0
 8012800:	6123      	str	r3, [r4, #16]
 8012802:	4615      	mov	r5, r2
 8012804:	e7bc      	b.n	8012780 <_printf_i+0x14c>
 8012806:	682b      	ldr	r3, [r5, #0]
 8012808:	1d1a      	adds	r2, r3, #4
 801280a:	602a      	str	r2, [r5, #0]
 801280c:	681d      	ldr	r5, [r3, #0]
 801280e:	6862      	ldr	r2, [r4, #4]
 8012810:	2100      	movs	r1, #0
 8012812:	4628      	mov	r0, r5
 8012814:	f7ed fd54 	bl	80002c0 <memchr>
 8012818:	b108      	cbz	r0, 801281e <_printf_i+0x1ea>
 801281a:	1b40      	subs	r0, r0, r5
 801281c:	6060      	str	r0, [r4, #4]
 801281e:	6863      	ldr	r3, [r4, #4]
 8012820:	6123      	str	r3, [r4, #16]
 8012822:	2300      	movs	r3, #0
 8012824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012828:	e7aa      	b.n	8012780 <_printf_i+0x14c>
 801282a:	6923      	ldr	r3, [r4, #16]
 801282c:	462a      	mov	r2, r5
 801282e:	4649      	mov	r1, r9
 8012830:	4640      	mov	r0, r8
 8012832:	47d0      	blx	sl
 8012834:	3001      	adds	r0, #1
 8012836:	d0ad      	beq.n	8012794 <_printf_i+0x160>
 8012838:	6823      	ldr	r3, [r4, #0]
 801283a:	079b      	lsls	r3, r3, #30
 801283c:	d413      	bmi.n	8012866 <_printf_i+0x232>
 801283e:	68e0      	ldr	r0, [r4, #12]
 8012840:	9b03      	ldr	r3, [sp, #12]
 8012842:	4298      	cmp	r0, r3
 8012844:	bfb8      	it	lt
 8012846:	4618      	movlt	r0, r3
 8012848:	e7a6      	b.n	8012798 <_printf_i+0x164>
 801284a:	2301      	movs	r3, #1
 801284c:	4632      	mov	r2, r6
 801284e:	4649      	mov	r1, r9
 8012850:	4640      	mov	r0, r8
 8012852:	47d0      	blx	sl
 8012854:	3001      	adds	r0, #1
 8012856:	d09d      	beq.n	8012794 <_printf_i+0x160>
 8012858:	3501      	adds	r5, #1
 801285a:	68e3      	ldr	r3, [r4, #12]
 801285c:	9903      	ldr	r1, [sp, #12]
 801285e:	1a5b      	subs	r3, r3, r1
 8012860:	42ab      	cmp	r3, r5
 8012862:	dcf2      	bgt.n	801284a <_printf_i+0x216>
 8012864:	e7eb      	b.n	801283e <_printf_i+0x20a>
 8012866:	2500      	movs	r5, #0
 8012868:	f104 0619 	add.w	r6, r4, #25
 801286c:	e7f5      	b.n	801285a <_printf_i+0x226>
 801286e:	bf00      	nop
 8012870:	08016b9b 	.word	0x08016b9b
 8012874:	08016bac 	.word	0x08016bac

08012878 <__sflush_r>:
 8012878:	898a      	ldrh	r2, [r1, #12]
 801287a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801287e:	4605      	mov	r5, r0
 8012880:	0710      	lsls	r0, r2, #28
 8012882:	460c      	mov	r4, r1
 8012884:	d458      	bmi.n	8012938 <__sflush_r+0xc0>
 8012886:	684b      	ldr	r3, [r1, #4]
 8012888:	2b00      	cmp	r3, #0
 801288a:	dc05      	bgt.n	8012898 <__sflush_r+0x20>
 801288c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801288e:	2b00      	cmp	r3, #0
 8012890:	dc02      	bgt.n	8012898 <__sflush_r+0x20>
 8012892:	2000      	movs	r0, #0
 8012894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801289a:	2e00      	cmp	r6, #0
 801289c:	d0f9      	beq.n	8012892 <__sflush_r+0x1a>
 801289e:	2300      	movs	r3, #0
 80128a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80128a4:	682f      	ldr	r7, [r5, #0]
 80128a6:	6a21      	ldr	r1, [r4, #32]
 80128a8:	602b      	str	r3, [r5, #0]
 80128aa:	d032      	beq.n	8012912 <__sflush_r+0x9a>
 80128ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80128ae:	89a3      	ldrh	r3, [r4, #12]
 80128b0:	075a      	lsls	r2, r3, #29
 80128b2:	d505      	bpl.n	80128c0 <__sflush_r+0x48>
 80128b4:	6863      	ldr	r3, [r4, #4]
 80128b6:	1ac0      	subs	r0, r0, r3
 80128b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80128ba:	b10b      	cbz	r3, 80128c0 <__sflush_r+0x48>
 80128bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80128be:	1ac0      	subs	r0, r0, r3
 80128c0:	2300      	movs	r3, #0
 80128c2:	4602      	mov	r2, r0
 80128c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128c6:	6a21      	ldr	r1, [r4, #32]
 80128c8:	4628      	mov	r0, r5
 80128ca:	47b0      	blx	r6
 80128cc:	1c43      	adds	r3, r0, #1
 80128ce:	89a3      	ldrh	r3, [r4, #12]
 80128d0:	d106      	bne.n	80128e0 <__sflush_r+0x68>
 80128d2:	6829      	ldr	r1, [r5, #0]
 80128d4:	291d      	cmp	r1, #29
 80128d6:	d82b      	bhi.n	8012930 <__sflush_r+0xb8>
 80128d8:	4a29      	ldr	r2, [pc, #164]	; (8012980 <__sflush_r+0x108>)
 80128da:	410a      	asrs	r2, r1
 80128dc:	07d6      	lsls	r6, r2, #31
 80128de:	d427      	bmi.n	8012930 <__sflush_r+0xb8>
 80128e0:	2200      	movs	r2, #0
 80128e2:	6062      	str	r2, [r4, #4]
 80128e4:	04d9      	lsls	r1, r3, #19
 80128e6:	6922      	ldr	r2, [r4, #16]
 80128e8:	6022      	str	r2, [r4, #0]
 80128ea:	d504      	bpl.n	80128f6 <__sflush_r+0x7e>
 80128ec:	1c42      	adds	r2, r0, #1
 80128ee:	d101      	bne.n	80128f4 <__sflush_r+0x7c>
 80128f0:	682b      	ldr	r3, [r5, #0]
 80128f2:	b903      	cbnz	r3, 80128f6 <__sflush_r+0x7e>
 80128f4:	6560      	str	r0, [r4, #84]	; 0x54
 80128f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128f8:	602f      	str	r7, [r5, #0]
 80128fa:	2900      	cmp	r1, #0
 80128fc:	d0c9      	beq.n	8012892 <__sflush_r+0x1a>
 80128fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012902:	4299      	cmp	r1, r3
 8012904:	d002      	beq.n	801290c <__sflush_r+0x94>
 8012906:	4628      	mov	r0, r5
 8012908:	f7ff fa92 	bl	8011e30 <_free_r>
 801290c:	2000      	movs	r0, #0
 801290e:	6360      	str	r0, [r4, #52]	; 0x34
 8012910:	e7c0      	b.n	8012894 <__sflush_r+0x1c>
 8012912:	2301      	movs	r3, #1
 8012914:	4628      	mov	r0, r5
 8012916:	47b0      	blx	r6
 8012918:	1c41      	adds	r1, r0, #1
 801291a:	d1c8      	bne.n	80128ae <__sflush_r+0x36>
 801291c:	682b      	ldr	r3, [r5, #0]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d0c5      	beq.n	80128ae <__sflush_r+0x36>
 8012922:	2b1d      	cmp	r3, #29
 8012924:	d001      	beq.n	801292a <__sflush_r+0xb2>
 8012926:	2b16      	cmp	r3, #22
 8012928:	d101      	bne.n	801292e <__sflush_r+0xb6>
 801292a:	602f      	str	r7, [r5, #0]
 801292c:	e7b1      	b.n	8012892 <__sflush_r+0x1a>
 801292e:	89a3      	ldrh	r3, [r4, #12]
 8012930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012934:	81a3      	strh	r3, [r4, #12]
 8012936:	e7ad      	b.n	8012894 <__sflush_r+0x1c>
 8012938:	690f      	ldr	r7, [r1, #16]
 801293a:	2f00      	cmp	r7, #0
 801293c:	d0a9      	beq.n	8012892 <__sflush_r+0x1a>
 801293e:	0793      	lsls	r3, r2, #30
 8012940:	680e      	ldr	r6, [r1, #0]
 8012942:	bf08      	it	eq
 8012944:	694b      	ldreq	r3, [r1, #20]
 8012946:	600f      	str	r7, [r1, #0]
 8012948:	bf18      	it	ne
 801294a:	2300      	movne	r3, #0
 801294c:	eba6 0807 	sub.w	r8, r6, r7
 8012950:	608b      	str	r3, [r1, #8]
 8012952:	f1b8 0f00 	cmp.w	r8, #0
 8012956:	dd9c      	ble.n	8012892 <__sflush_r+0x1a>
 8012958:	6a21      	ldr	r1, [r4, #32]
 801295a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801295c:	4643      	mov	r3, r8
 801295e:	463a      	mov	r2, r7
 8012960:	4628      	mov	r0, r5
 8012962:	47b0      	blx	r6
 8012964:	2800      	cmp	r0, #0
 8012966:	dc06      	bgt.n	8012976 <__sflush_r+0xfe>
 8012968:	89a3      	ldrh	r3, [r4, #12]
 801296a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801296e:	81a3      	strh	r3, [r4, #12]
 8012970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012974:	e78e      	b.n	8012894 <__sflush_r+0x1c>
 8012976:	4407      	add	r7, r0
 8012978:	eba8 0800 	sub.w	r8, r8, r0
 801297c:	e7e9      	b.n	8012952 <__sflush_r+0xda>
 801297e:	bf00      	nop
 8012980:	dfbffffe 	.word	0xdfbffffe

08012984 <_fflush_r>:
 8012984:	b538      	push	{r3, r4, r5, lr}
 8012986:	690b      	ldr	r3, [r1, #16]
 8012988:	4605      	mov	r5, r0
 801298a:	460c      	mov	r4, r1
 801298c:	b913      	cbnz	r3, 8012994 <_fflush_r+0x10>
 801298e:	2500      	movs	r5, #0
 8012990:	4628      	mov	r0, r5
 8012992:	bd38      	pop	{r3, r4, r5, pc}
 8012994:	b118      	cbz	r0, 801299e <_fflush_r+0x1a>
 8012996:	6a03      	ldr	r3, [r0, #32]
 8012998:	b90b      	cbnz	r3, 801299e <_fflush_r+0x1a>
 801299a:	f7ff f887 	bl	8011aac <__sinit>
 801299e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d0f3      	beq.n	801298e <_fflush_r+0xa>
 80129a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80129a8:	07d0      	lsls	r0, r2, #31
 80129aa:	d404      	bmi.n	80129b6 <_fflush_r+0x32>
 80129ac:	0599      	lsls	r1, r3, #22
 80129ae:	d402      	bmi.n	80129b6 <_fflush_r+0x32>
 80129b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129b2:	f7ff fa25 	bl	8011e00 <__retarget_lock_acquire_recursive>
 80129b6:	4628      	mov	r0, r5
 80129b8:	4621      	mov	r1, r4
 80129ba:	f7ff ff5d 	bl	8012878 <__sflush_r>
 80129be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129c0:	07da      	lsls	r2, r3, #31
 80129c2:	4605      	mov	r5, r0
 80129c4:	d4e4      	bmi.n	8012990 <_fflush_r+0xc>
 80129c6:	89a3      	ldrh	r3, [r4, #12]
 80129c8:	059b      	lsls	r3, r3, #22
 80129ca:	d4e1      	bmi.n	8012990 <_fflush_r+0xc>
 80129cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129ce:	f7ff fa18 	bl	8011e02 <__retarget_lock_release_recursive>
 80129d2:	e7dd      	b.n	8012990 <_fflush_r+0xc>

080129d4 <_putc_r>:
 80129d4:	b570      	push	{r4, r5, r6, lr}
 80129d6:	460d      	mov	r5, r1
 80129d8:	4614      	mov	r4, r2
 80129da:	4606      	mov	r6, r0
 80129dc:	b118      	cbz	r0, 80129e6 <_putc_r+0x12>
 80129de:	6a03      	ldr	r3, [r0, #32]
 80129e0:	b90b      	cbnz	r3, 80129e6 <_putc_r+0x12>
 80129e2:	f7ff f863 	bl	8011aac <__sinit>
 80129e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129e8:	07d8      	lsls	r0, r3, #31
 80129ea:	d405      	bmi.n	80129f8 <_putc_r+0x24>
 80129ec:	89a3      	ldrh	r3, [r4, #12]
 80129ee:	0599      	lsls	r1, r3, #22
 80129f0:	d402      	bmi.n	80129f8 <_putc_r+0x24>
 80129f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129f4:	f7ff fa04 	bl	8011e00 <__retarget_lock_acquire_recursive>
 80129f8:	68a3      	ldr	r3, [r4, #8]
 80129fa:	3b01      	subs	r3, #1
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	60a3      	str	r3, [r4, #8]
 8012a00:	da05      	bge.n	8012a0e <_putc_r+0x3a>
 8012a02:	69a2      	ldr	r2, [r4, #24]
 8012a04:	4293      	cmp	r3, r2
 8012a06:	db12      	blt.n	8012a2e <_putc_r+0x5a>
 8012a08:	b2eb      	uxtb	r3, r5
 8012a0a:	2b0a      	cmp	r3, #10
 8012a0c:	d00f      	beq.n	8012a2e <_putc_r+0x5a>
 8012a0e:	6823      	ldr	r3, [r4, #0]
 8012a10:	1c5a      	adds	r2, r3, #1
 8012a12:	6022      	str	r2, [r4, #0]
 8012a14:	701d      	strb	r5, [r3, #0]
 8012a16:	b2ed      	uxtb	r5, r5
 8012a18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a1a:	07da      	lsls	r2, r3, #31
 8012a1c:	d405      	bmi.n	8012a2a <_putc_r+0x56>
 8012a1e:	89a3      	ldrh	r3, [r4, #12]
 8012a20:	059b      	lsls	r3, r3, #22
 8012a22:	d402      	bmi.n	8012a2a <_putc_r+0x56>
 8012a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a26:	f7ff f9ec 	bl	8011e02 <__retarget_lock_release_recursive>
 8012a2a:	4628      	mov	r0, r5
 8012a2c:	bd70      	pop	{r4, r5, r6, pc}
 8012a2e:	4629      	mov	r1, r5
 8012a30:	4622      	mov	r2, r4
 8012a32:	4630      	mov	r0, r6
 8012a34:	f000 f802 	bl	8012a3c <__swbuf_r>
 8012a38:	4605      	mov	r5, r0
 8012a3a:	e7ed      	b.n	8012a18 <_putc_r+0x44>

08012a3c <__swbuf_r>:
 8012a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a3e:	460e      	mov	r6, r1
 8012a40:	4614      	mov	r4, r2
 8012a42:	4605      	mov	r5, r0
 8012a44:	b118      	cbz	r0, 8012a4e <__swbuf_r+0x12>
 8012a46:	6a03      	ldr	r3, [r0, #32]
 8012a48:	b90b      	cbnz	r3, 8012a4e <__swbuf_r+0x12>
 8012a4a:	f7ff f82f 	bl	8011aac <__sinit>
 8012a4e:	69a3      	ldr	r3, [r4, #24]
 8012a50:	60a3      	str	r3, [r4, #8]
 8012a52:	89a3      	ldrh	r3, [r4, #12]
 8012a54:	071a      	lsls	r2, r3, #28
 8012a56:	d525      	bpl.n	8012aa4 <__swbuf_r+0x68>
 8012a58:	6923      	ldr	r3, [r4, #16]
 8012a5a:	b31b      	cbz	r3, 8012aa4 <__swbuf_r+0x68>
 8012a5c:	6823      	ldr	r3, [r4, #0]
 8012a5e:	6922      	ldr	r2, [r4, #16]
 8012a60:	1a98      	subs	r0, r3, r2
 8012a62:	6963      	ldr	r3, [r4, #20]
 8012a64:	b2f6      	uxtb	r6, r6
 8012a66:	4283      	cmp	r3, r0
 8012a68:	4637      	mov	r7, r6
 8012a6a:	dc04      	bgt.n	8012a76 <__swbuf_r+0x3a>
 8012a6c:	4621      	mov	r1, r4
 8012a6e:	4628      	mov	r0, r5
 8012a70:	f7ff ff88 	bl	8012984 <_fflush_r>
 8012a74:	b9e0      	cbnz	r0, 8012ab0 <__swbuf_r+0x74>
 8012a76:	68a3      	ldr	r3, [r4, #8]
 8012a78:	3b01      	subs	r3, #1
 8012a7a:	60a3      	str	r3, [r4, #8]
 8012a7c:	6823      	ldr	r3, [r4, #0]
 8012a7e:	1c5a      	adds	r2, r3, #1
 8012a80:	6022      	str	r2, [r4, #0]
 8012a82:	701e      	strb	r6, [r3, #0]
 8012a84:	6962      	ldr	r2, [r4, #20]
 8012a86:	1c43      	adds	r3, r0, #1
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	d004      	beq.n	8012a96 <__swbuf_r+0x5a>
 8012a8c:	89a3      	ldrh	r3, [r4, #12]
 8012a8e:	07db      	lsls	r3, r3, #31
 8012a90:	d506      	bpl.n	8012aa0 <__swbuf_r+0x64>
 8012a92:	2e0a      	cmp	r6, #10
 8012a94:	d104      	bne.n	8012aa0 <__swbuf_r+0x64>
 8012a96:	4621      	mov	r1, r4
 8012a98:	4628      	mov	r0, r5
 8012a9a:	f7ff ff73 	bl	8012984 <_fflush_r>
 8012a9e:	b938      	cbnz	r0, 8012ab0 <__swbuf_r+0x74>
 8012aa0:	4638      	mov	r0, r7
 8012aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aa4:	4621      	mov	r1, r4
 8012aa6:	4628      	mov	r0, r5
 8012aa8:	f000 f806 	bl	8012ab8 <__swsetup_r>
 8012aac:	2800      	cmp	r0, #0
 8012aae:	d0d5      	beq.n	8012a5c <__swbuf_r+0x20>
 8012ab0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012ab4:	e7f4      	b.n	8012aa0 <__swbuf_r+0x64>
	...

08012ab8 <__swsetup_r>:
 8012ab8:	b538      	push	{r3, r4, r5, lr}
 8012aba:	4b2a      	ldr	r3, [pc, #168]	; (8012b64 <__swsetup_r+0xac>)
 8012abc:	4605      	mov	r5, r0
 8012abe:	6818      	ldr	r0, [r3, #0]
 8012ac0:	460c      	mov	r4, r1
 8012ac2:	b118      	cbz	r0, 8012acc <__swsetup_r+0x14>
 8012ac4:	6a03      	ldr	r3, [r0, #32]
 8012ac6:	b90b      	cbnz	r3, 8012acc <__swsetup_r+0x14>
 8012ac8:	f7fe fff0 	bl	8011aac <__sinit>
 8012acc:	89a3      	ldrh	r3, [r4, #12]
 8012ace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012ad2:	0718      	lsls	r0, r3, #28
 8012ad4:	d422      	bmi.n	8012b1c <__swsetup_r+0x64>
 8012ad6:	06d9      	lsls	r1, r3, #27
 8012ad8:	d407      	bmi.n	8012aea <__swsetup_r+0x32>
 8012ada:	2309      	movs	r3, #9
 8012adc:	602b      	str	r3, [r5, #0]
 8012ade:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012ae2:	81a3      	strh	r3, [r4, #12]
 8012ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ae8:	e034      	b.n	8012b54 <__swsetup_r+0x9c>
 8012aea:	0758      	lsls	r0, r3, #29
 8012aec:	d512      	bpl.n	8012b14 <__swsetup_r+0x5c>
 8012aee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012af0:	b141      	cbz	r1, 8012b04 <__swsetup_r+0x4c>
 8012af2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012af6:	4299      	cmp	r1, r3
 8012af8:	d002      	beq.n	8012b00 <__swsetup_r+0x48>
 8012afa:	4628      	mov	r0, r5
 8012afc:	f7ff f998 	bl	8011e30 <_free_r>
 8012b00:	2300      	movs	r3, #0
 8012b02:	6363      	str	r3, [r4, #52]	; 0x34
 8012b04:	89a3      	ldrh	r3, [r4, #12]
 8012b06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b0a:	81a3      	strh	r3, [r4, #12]
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	6063      	str	r3, [r4, #4]
 8012b10:	6923      	ldr	r3, [r4, #16]
 8012b12:	6023      	str	r3, [r4, #0]
 8012b14:	89a3      	ldrh	r3, [r4, #12]
 8012b16:	f043 0308 	orr.w	r3, r3, #8
 8012b1a:	81a3      	strh	r3, [r4, #12]
 8012b1c:	6923      	ldr	r3, [r4, #16]
 8012b1e:	b94b      	cbnz	r3, 8012b34 <__swsetup_r+0x7c>
 8012b20:	89a3      	ldrh	r3, [r4, #12]
 8012b22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b2a:	d003      	beq.n	8012b34 <__swsetup_r+0x7c>
 8012b2c:	4621      	mov	r1, r4
 8012b2e:	4628      	mov	r0, r5
 8012b30:	f000 f8dd 	bl	8012cee <__smakebuf_r>
 8012b34:	89a0      	ldrh	r0, [r4, #12]
 8012b36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b3a:	f010 0301 	ands.w	r3, r0, #1
 8012b3e:	d00a      	beq.n	8012b56 <__swsetup_r+0x9e>
 8012b40:	2300      	movs	r3, #0
 8012b42:	60a3      	str	r3, [r4, #8]
 8012b44:	6963      	ldr	r3, [r4, #20]
 8012b46:	425b      	negs	r3, r3
 8012b48:	61a3      	str	r3, [r4, #24]
 8012b4a:	6923      	ldr	r3, [r4, #16]
 8012b4c:	b943      	cbnz	r3, 8012b60 <__swsetup_r+0xa8>
 8012b4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012b52:	d1c4      	bne.n	8012ade <__swsetup_r+0x26>
 8012b54:	bd38      	pop	{r3, r4, r5, pc}
 8012b56:	0781      	lsls	r1, r0, #30
 8012b58:	bf58      	it	pl
 8012b5a:	6963      	ldrpl	r3, [r4, #20]
 8012b5c:	60a3      	str	r3, [r4, #8]
 8012b5e:	e7f4      	b.n	8012b4a <__swsetup_r+0x92>
 8012b60:	2000      	movs	r0, #0
 8012b62:	e7f7      	b.n	8012b54 <__swsetup_r+0x9c>
 8012b64:	20001868 	.word	0x20001868

08012b68 <memmove>:
 8012b68:	4288      	cmp	r0, r1
 8012b6a:	b510      	push	{r4, lr}
 8012b6c:	eb01 0402 	add.w	r4, r1, r2
 8012b70:	d902      	bls.n	8012b78 <memmove+0x10>
 8012b72:	4284      	cmp	r4, r0
 8012b74:	4623      	mov	r3, r4
 8012b76:	d807      	bhi.n	8012b88 <memmove+0x20>
 8012b78:	1e43      	subs	r3, r0, #1
 8012b7a:	42a1      	cmp	r1, r4
 8012b7c:	d008      	beq.n	8012b90 <memmove+0x28>
 8012b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b86:	e7f8      	b.n	8012b7a <memmove+0x12>
 8012b88:	4402      	add	r2, r0
 8012b8a:	4601      	mov	r1, r0
 8012b8c:	428a      	cmp	r2, r1
 8012b8e:	d100      	bne.n	8012b92 <memmove+0x2a>
 8012b90:	bd10      	pop	{r4, pc}
 8012b92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b9a:	e7f7      	b.n	8012b8c <memmove+0x24>

08012b9c <_raise_r>:
 8012b9c:	291f      	cmp	r1, #31
 8012b9e:	b538      	push	{r3, r4, r5, lr}
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	460d      	mov	r5, r1
 8012ba4:	d904      	bls.n	8012bb0 <_raise_r+0x14>
 8012ba6:	2316      	movs	r3, #22
 8012ba8:	6003      	str	r3, [r0, #0]
 8012baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012bae:	bd38      	pop	{r3, r4, r5, pc}
 8012bb0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012bb2:	b112      	cbz	r2, 8012bba <_raise_r+0x1e>
 8012bb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012bb8:	b94b      	cbnz	r3, 8012bce <_raise_r+0x32>
 8012bba:	4620      	mov	r0, r4
 8012bbc:	f000 f830 	bl	8012c20 <_getpid_r>
 8012bc0:	462a      	mov	r2, r5
 8012bc2:	4601      	mov	r1, r0
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bca:	f000 b817 	b.w	8012bfc <_kill_r>
 8012bce:	2b01      	cmp	r3, #1
 8012bd0:	d00a      	beq.n	8012be8 <_raise_r+0x4c>
 8012bd2:	1c59      	adds	r1, r3, #1
 8012bd4:	d103      	bne.n	8012bde <_raise_r+0x42>
 8012bd6:	2316      	movs	r3, #22
 8012bd8:	6003      	str	r3, [r0, #0]
 8012bda:	2001      	movs	r0, #1
 8012bdc:	e7e7      	b.n	8012bae <_raise_r+0x12>
 8012bde:	2400      	movs	r4, #0
 8012be0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012be4:	4628      	mov	r0, r5
 8012be6:	4798      	blx	r3
 8012be8:	2000      	movs	r0, #0
 8012bea:	e7e0      	b.n	8012bae <_raise_r+0x12>

08012bec <raise>:
 8012bec:	4b02      	ldr	r3, [pc, #8]	; (8012bf8 <raise+0xc>)
 8012bee:	4601      	mov	r1, r0
 8012bf0:	6818      	ldr	r0, [r3, #0]
 8012bf2:	f7ff bfd3 	b.w	8012b9c <_raise_r>
 8012bf6:	bf00      	nop
 8012bf8:	20001868 	.word	0x20001868

08012bfc <_kill_r>:
 8012bfc:	b538      	push	{r3, r4, r5, lr}
 8012bfe:	4d07      	ldr	r5, [pc, #28]	; (8012c1c <_kill_r+0x20>)
 8012c00:	2300      	movs	r3, #0
 8012c02:	4604      	mov	r4, r0
 8012c04:	4608      	mov	r0, r1
 8012c06:	4611      	mov	r1, r2
 8012c08:	602b      	str	r3, [r5, #0]
 8012c0a:	f7ee f975 	bl	8000ef8 <_kill>
 8012c0e:	1c43      	adds	r3, r0, #1
 8012c10:	d102      	bne.n	8012c18 <_kill_r+0x1c>
 8012c12:	682b      	ldr	r3, [r5, #0]
 8012c14:	b103      	cbz	r3, 8012c18 <_kill_r+0x1c>
 8012c16:	6023      	str	r3, [r4, #0]
 8012c18:	bd38      	pop	{r3, r4, r5, pc}
 8012c1a:	bf00      	nop
 8012c1c:	2000ccb0 	.word	0x2000ccb0

08012c20 <_getpid_r>:
 8012c20:	f7ee b968 	b.w	8000ef4 <_getpid>

08012c24 <_sbrk_r>:
 8012c24:	b538      	push	{r3, r4, r5, lr}
 8012c26:	4d06      	ldr	r5, [pc, #24]	; (8012c40 <_sbrk_r+0x1c>)
 8012c28:	2300      	movs	r3, #0
 8012c2a:	4604      	mov	r4, r0
 8012c2c:	4608      	mov	r0, r1
 8012c2e:	602b      	str	r3, [r5, #0]
 8012c30:	f7ee f98c 	bl	8000f4c <_sbrk>
 8012c34:	1c43      	adds	r3, r0, #1
 8012c36:	d102      	bne.n	8012c3e <_sbrk_r+0x1a>
 8012c38:	682b      	ldr	r3, [r5, #0]
 8012c3a:	b103      	cbz	r3, 8012c3e <_sbrk_r+0x1a>
 8012c3c:	6023      	str	r3, [r4, #0]
 8012c3e:	bd38      	pop	{r3, r4, r5, pc}
 8012c40:	2000ccb0 	.word	0x2000ccb0

08012c44 <_realloc_r>:
 8012c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c48:	4680      	mov	r8, r0
 8012c4a:	4614      	mov	r4, r2
 8012c4c:	460e      	mov	r6, r1
 8012c4e:	b921      	cbnz	r1, 8012c5a <_realloc_r+0x16>
 8012c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c54:	4611      	mov	r1, r2
 8012c56:	f7ff b957 	b.w	8011f08 <_malloc_r>
 8012c5a:	b92a      	cbnz	r2, 8012c68 <_realloc_r+0x24>
 8012c5c:	f7ff f8e8 	bl	8011e30 <_free_r>
 8012c60:	4625      	mov	r5, r4
 8012c62:	4628      	mov	r0, r5
 8012c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c68:	f000 f8a0 	bl	8012dac <_malloc_usable_size_r>
 8012c6c:	4284      	cmp	r4, r0
 8012c6e:	4607      	mov	r7, r0
 8012c70:	d802      	bhi.n	8012c78 <_realloc_r+0x34>
 8012c72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012c76:	d812      	bhi.n	8012c9e <_realloc_r+0x5a>
 8012c78:	4621      	mov	r1, r4
 8012c7a:	4640      	mov	r0, r8
 8012c7c:	f7ff f944 	bl	8011f08 <_malloc_r>
 8012c80:	4605      	mov	r5, r0
 8012c82:	2800      	cmp	r0, #0
 8012c84:	d0ed      	beq.n	8012c62 <_realloc_r+0x1e>
 8012c86:	42bc      	cmp	r4, r7
 8012c88:	4622      	mov	r2, r4
 8012c8a:	4631      	mov	r1, r6
 8012c8c:	bf28      	it	cs
 8012c8e:	463a      	movcs	r2, r7
 8012c90:	f7ff f8b8 	bl	8011e04 <memcpy>
 8012c94:	4631      	mov	r1, r6
 8012c96:	4640      	mov	r0, r8
 8012c98:	f7ff f8ca 	bl	8011e30 <_free_r>
 8012c9c:	e7e1      	b.n	8012c62 <_realloc_r+0x1e>
 8012c9e:	4635      	mov	r5, r6
 8012ca0:	e7df      	b.n	8012c62 <_realloc_r+0x1e>

08012ca2 <__swhatbuf_r>:
 8012ca2:	b570      	push	{r4, r5, r6, lr}
 8012ca4:	460c      	mov	r4, r1
 8012ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012caa:	2900      	cmp	r1, #0
 8012cac:	b096      	sub	sp, #88	; 0x58
 8012cae:	4615      	mov	r5, r2
 8012cb0:	461e      	mov	r6, r3
 8012cb2:	da0d      	bge.n	8012cd0 <__swhatbuf_r+0x2e>
 8012cb4:	89a3      	ldrh	r3, [r4, #12]
 8012cb6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012cba:	f04f 0100 	mov.w	r1, #0
 8012cbe:	bf0c      	ite	eq
 8012cc0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012cc4:	2340      	movne	r3, #64	; 0x40
 8012cc6:	2000      	movs	r0, #0
 8012cc8:	6031      	str	r1, [r6, #0]
 8012cca:	602b      	str	r3, [r5, #0]
 8012ccc:	b016      	add	sp, #88	; 0x58
 8012cce:	bd70      	pop	{r4, r5, r6, pc}
 8012cd0:	466a      	mov	r2, sp
 8012cd2:	f000 f849 	bl	8012d68 <_fstat_r>
 8012cd6:	2800      	cmp	r0, #0
 8012cd8:	dbec      	blt.n	8012cb4 <__swhatbuf_r+0x12>
 8012cda:	9901      	ldr	r1, [sp, #4]
 8012cdc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012ce0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012ce4:	4259      	negs	r1, r3
 8012ce6:	4159      	adcs	r1, r3
 8012ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012cec:	e7eb      	b.n	8012cc6 <__swhatbuf_r+0x24>

08012cee <__smakebuf_r>:
 8012cee:	898b      	ldrh	r3, [r1, #12]
 8012cf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012cf2:	079d      	lsls	r5, r3, #30
 8012cf4:	4606      	mov	r6, r0
 8012cf6:	460c      	mov	r4, r1
 8012cf8:	d507      	bpl.n	8012d0a <__smakebuf_r+0x1c>
 8012cfa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012cfe:	6023      	str	r3, [r4, #0]
 8012d00:	6123      	str	r3, [r4, #16]
 8012d02:	2301      	movs	r3, #1
 8012d04:	6163      	str	r3, [r4, #20]
 8012d06:	b002      	add	sp, #8
 8012d08:	bd70      	pop	{r4, r5, r6, pc}
 8012d0a:	ab01      	add	r3, sp, #4
 8012d0c:	466a      	mov	r2, sp
 8012d0e:	f7ff ffc8 	bl	8012ca2 <__swhatbuf_r>
 8012d12:	9900      	ldr	r1, [sp, #0]
 8012d14:	4605      	mov	r5, r0
 8012d16:	4630      	mov	r0, r6
 8012d18:	f7ff f8f6 	bl	8011f08 <_malloc_r>
 8012d1c:	b948      	cbnz	r0, 8012d32 <__smakebuf_r+0x44>
 8012d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d22:	059a      	lsls	r2, r3, #22
 8012d24:	d4ef      	bmi.n	8012d06 <__smakebuf_r+0x18>
 8012d26:	f023 0303 	bic.w	r3, r3, #3
 8012d2a:	f043 0302 	orr.w	r3, r3, #2
 8012d2e:	81a3      	strh	r3, [r4, #12]
 8012d30:	e7e3      	b.n	8012cfa <__smakebuf_r+0xc>
 8012d32:	89a3      	ldrh	r3, [r4, #12]
 8012d34:	6020      	str	r0, [r4, #0]
 8012d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d3a:	81a3      	strh	r3, [r4, #12]
 8012d3c:	9b00      	ldr	r3, [sp, #0]
 8012d3e:	6163      	str	r3, [r4, #20]
 8012d40:	9b01      	ldr	r3, [sp, #4]
 8012d42:	6120      	str	r0, [r4, #16]
 8012d44:	b15b      	cbz	r3, 8012d5e <__smakebuf_r+0x70>
 8012d46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d4a:	4630      	mov	r0, r6
 8012d4c:	f000 f81e 	bl	8012d8c <_isatty_r>
 8012d50:	b128      	cbz	r0, 8012d5e <__smakebuf_r+0x70>
 8012d52:	89a3      	ldrh	r3, [r4, #12]
 8012d54:	f023 0303 	bic.w	r3, r3, #3
 8012d58:	f043 0301 	orr.w	r3, r3, #1
 8012d5c:	81a3      	strh	r3, [r4, #12]
 8012d5e:	89a3      	ldrh	r3, [r4, #12]
 8012d60:	431d      	orrs	r5, r3
 8012d62:	81a5      	strh	r5, [r4, #12]
 8012d64:	e7cf      	b.n	8012d06 <__smakebuf_r+0x18>
	...

08012d68 <_fstat_r>:
 8012d68:	b538      	push	{r3, r4, r5, lr}
 8012d6a:	4d07      	ldr	r5, [pc, #28]	; (8012d88 <_fstat_r+0x20>)
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	4604      	mov	r4, r0
 8012d70:	4608      	mov	r0, r1
 8012d72:	4611      	mov	r1, r2
 8012d74:	602b      	str	r3, [r5, #0]
 8012d76:	f7ee f8e0 	bl	8000f3a <_fstat>
 8012d7a:	1c43      	adds	r3, r0, #1
 8012d7c:	d102      	bne.n	8012d84 <_fstat_r+0x1c>
 8012d7e:	682b      	ldr	r3, [r5, #0]
 8012d80:	b103      	cbz	r3, 8012d84 <_fstat_r+0x1c>
 8012d82:	6023      	str	r3, [r4, #0]
 8012d84:	bd38      	pop	{r3, r4, r5, pc}
 8012d86:	bf00      	nop
 8012d88:	2000ccb0 	.word	0x2000ccb0

08012d8c <_isatty_r>:
 8012d8c:	b538      	push	{r3, r4, r5, lr}
 8012d8e:	4d06      	ldr	r5, [pc, #24]	; (8012da8 <_isatty_r+0x1c>)
 8012d90:	2300      	movs	r3, #0
 8012d92:	4604      	mov	r4, r0
 8012d94:	4608      	mov	r0, r1
 8012d96:	602b      	str	r3, [r5, #0]
 8012d98:	f7ee f8d4 	bl	8000f44 <_isatty>
 8012d9c:	1c43      	adds	r3, r0, #1
 8012d9e:	d102      	bne.n	8012da6 <_isatty_r+0x1a>
 8012da0:	682b      	ldr	r3, [r5, #0]
 8012da2:	b103      	cbz	r3, 8012da6 <_isatty_r+0x1a>
 8012da4:	6023      	str	r3, [r4, #0]
 8012da6:	bd38      	pop	{r3, r4, r5, pc}
 8012da8:	2000ccb0 	.word	0x2000ccb0

08012dac <_malloc_usable_size_r>:
 8012dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012db0:	1f18      	subs	r0, r3, #4
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	bfbc      	itt	lt
 8012db6:	580b      	ldrlt	r3, [r1, r0]
 8012db8:	18c0      	addlt	r0, r0, r3
 8012dba:	4770      	bx	lr

08012dbc <_init>:
 8012dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dbe:	bf00      	nop
 8012dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dc2:	bc08      	pop	{r3}
 8012dc4:	469e      	mov	lr, r3
 8012dc6:	4770      	bx	lr

08012dc8 <_fini>:
 8012dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dca:	bf00      	nop
 8012dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dce:	bc08      	pop	{r3}
 8012dd0:	469e      	mov	lr, r3
 8012dd2:	4770      	bx	lr
